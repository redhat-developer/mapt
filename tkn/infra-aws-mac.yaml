---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: infra-aws-mac
  labels:
    app.kubernetes.io/version: "1.0.0-dev"
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/categories: infrastructure
    tekton.dev/tags: infrastructure, aws, mac
    tekton.dev/displayName: "aws manager"
    tekton.dev/platforms: "linux/amd64, linux/arm64"
spec:
  description: |
    Task provision a mac dedicated host on AWS, and handle mac machines on top of it.

  volumes:
    - name: aws-credentials
      secret:
        secretName: $(params.secret-aws-credentials)
    - name: host-info
      emptyDir: {}

  params:
    - name: secret-aws-credentials
      description: |
        ocp secret holding the aws credentials. Secret should be accessible to this task.

        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: aws-${name}
        type: Opaque
        data:
          access-key: ${access_key}
          secret-key: ${secret_key}
          region: ${region}
          bucket: ${bucket}
    - name: id
      description: identifier for the provisioned environment
    - name: operation 
      description: operation to execute within the infrastructure. Current values (create, destroy)

    # Secret result 
    # naming
    - name: host-access-secret-name
      type: string
      default: "''"
      description: |
        Once the target is provisioned the config to connect is addded to a secret 
        check resutls. If this param is set the secret will be created with the name set 
        otherwise it will be created with a random name.
    # ownership
    - name: ownerKind
      type: string
      default: PipelineRun
      description: |
        The type of resource that should own the generated SpaceRequest.
        Deletion of this resource will trigger deletion of the SpaceRequest.
        Supported values: `PipelineRun`, `TaskRun`.
    - name: ownerName
      type: string
      default: "''"
      description: |
        The name of the resource that should own the generated SpaceRequest.
        This should either be passed the value of `$(context.pipelineRun.name)`
        or `$(context.taskRun.name)` depending on the value of `ownerKind`.
    - name: ownerUid
      type: string
      default: "''"
      description: |
        The uid of the resource that should own the generated SpaceRequest.
        This should either be passed the value of `$(context.pipelineRun.uid)`
        or `$(context.taskRun.uid)` depending on the value of `ownerKind`.

    # Mac params
    # Dedicated Host
    - name: arch
      description: This param is used within the host provisioning phase and it identifies the arch for the dedicated host. Allowed values x86, m1, m2. Default m2
      default: 'm2'
    - name: only-host
      description: if this flag is set only the host will be created / destroyed.
      default: 'false'
    # Mac Machine
    - name: version
      description: mac os version to sping the mac machine. This param will set the version for it. Default 14.
      default: '14'
    - name: host-id
      description: host id to create the mac instance. If the param is not pass the dedicated host will be created
      default: "''"
    - name: only-machine
      description: if this flag is set only the machine will be destroyed.
      default: 'false'
    - name: fixed-location
      description: if this flag is set the host will be created only on the region set by the AWS Env (AWS_DEFAULT_REGION).
      default: 'false'

    # Topology params
    - name: airgap
      description: |
          Set the machine on an airgap scenario. 

          If airgap is set an extra VM is created acting as bastion, information to access bastion is also
          added to the output folder.

          To access the target machine we need to go through the bastion.
      default: 'false'

    # Metadata params
    - name: tags
      description: tags for the resources created on the providers
      default: "''"

    # Control params
    - name: debug
      description: |
        Warning setting this param to true expose credentials 
        
        The parameter is intended to add verbosity on the task execution and also print credentials on stdout
        to easily access to remote machice
      default: 'false'
    - name: timeout
      default: "8h"

  results:
    - name: host-access-secret
      description: |
        ocp secret holding the information to connect with the target machine.

          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${name}
          type: Opaque
          data:
            # host
            host: ${host}
            username: ${username}
            id_rsa: ${id_rsa}
            # If airgap data for bastion host
            bastion-host: ${bastion-host}
            bastion-username: ${bastion-username}
            bastion-id_rsa: ${bastion-id_rsa}

  steps:
    - name: provisioner
      image: quay.io/redhat-developer/mapt:v1.0.0-dev
      imagePullPolicy: Always
      volumeMounts:
        - name: aws-credentials
          mountPath: /opt/az-credentials
        - name: host-info
          mountPath: /opt/host-info
      script: |
        #!/bin/sh

        set -euo pipefail
        # If debug add verbosity
        if [[ $(params.debug) == "true" ]]; then
          set -xeuo pipefail  
        fi

        # Credentials
        export AWS_ACCESS_KEY_ID=$(cat /opt/aws-credentials/access-key)
        export AWS_SECRET_ACCESS_KEY=$(cat /opt/aws-credentials/secret-key)
        export AWS_DEFAULT_REGION=$(cat /opt/aws-credentials/region)
        BUCKET=$(cat /opt/aws-credentials/bucket)

        if [[ $(params.operation) == "create"  ]]; then
          if [[ $(params.ownerName) == "" || $(params.ownerUid) == "" ]]; then
            echo "Parameter ownerName and ownerUid is required for create instance"
            exit 1
          fi
        fi
       
        # Run mapt
        cmd="mapt aws mac $(params.operation) "
        cmd+="--project-name mapt-mac-$(params.id) "
        cmd+="--backed-url s3://${BUCKET}/mapt/mac/$(params.id) "
        if [[ $(params.only-host) == "true" ]]; then
          cmd+="--only-host "
        fi
        if [[ $(params.only-machine) == "true" ]]; then
          cmd+="--only-machine "
        fi
        if [[ $(params.operation) == "create" ]]; then
          cmd+="--conn-details-output /opt/host-info "
          if [[ $(params.fixed-location) == "true" ]]; then
            cmd+="--fixed-location "
          fi
          # Host params
          cmd+="--arch $(params.arch) " 
          # Mac machine params
          cmd+="--version $(params.version) "
          if [[ $(params.airgap) == "true" ]]; then
            cmd+="--airgap "
          fi
          cmd+="--tags $(params.tags) "
          if [[ $(params.timeout) != "" ]]; then
            cmd+="--timeout $(params.timeout) "
          fi
        fi
        eval "${cmd}"
      resources:      
        requests:
          memory: "200Mi"
          cpu: "100m"
        limits:
          memory: "600Mi"
          cpu: "300m"
          
    - name: host-info-secret
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:e70eb2be867f1236b19f5cbfeb8e0625737ce0ec1369e32a4f9f146aaaf68d49
      env:
        - name: NAMESPACE
          value: $(context.taskRun.namespace)
        - name: OWNER_KIND
          value: $(params.ownerKind)
        - name: OWNER_NAME
          value: $(params.ownerName)
        - name: OWNER_UID
          value: $(params.ownerUid)  
      volumeMounts:
        - name: host-info
          mountPath: /opt/host-info
      script: |
        #!/bin/bash
        set -eo pipefail
        if [[ $(params.operation) == "create" ]]; then
        export SECRETNAME="generateName: mapt-aws-mac-"
        if [[ $(params.host-access-secret-name) != "" ]]; then
          export SECRETNAME="name: $(params.host-access-secret-name)"
        fi
        cat <<EOF > host-info.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          $SECRETNAME
          namespace: $NAMESPACE
          ownerReferences:
          - apiVersion: tekton.dev/v1
            kind: $OWNER_KIND
            name: $OWNER_NAME
            uid: $OWNER_UID
        type: Opaque
        data:
          host: $(cat /opt/host-info/host | base64 -w0)
          username: $(cat /opt/host-info/username | base64 -w0)
          id_rsa: $(cat /opt/host-info/id_rsa | base64 -w0)
        EOF
        if [[ $(params.airgap) == "true" ]]; then
        cat <<EOF >> host-info.yaml
          bastion-host: $(cat /opt/host-info/bastion_host | base64 -w0)
          bastion-username: $(cat /opt/host-info/bastion_username | base64 -w0)
          bastion-id_rsa: $(cat /opt/host-info/bastion_id_rsa | base64 -w0)
        EOF
        fi

          if [[ $(params.debug) == "true" ]]; then
            cat /opt/host-info/*
          fi
          
          NAME=$(oc create -f host-info.yaml -o=jsonpath='{.metadata.name}')
          echo -n "${NAME}" | tee $(results.host-access-secret.path)   

        fi
