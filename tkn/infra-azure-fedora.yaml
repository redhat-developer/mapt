---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: infra-azure-rhel
  labels:
    app.kubernetes.io/version: "1.0.0-dev"
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/categories: infrastructure
    tekton.dev/tags: infrastructure, azure
    tekton.dev/displayName: "azure manager"
    tekton.dev/platforms: "linux/amd64, linux/arm64"
spec:
  description: |
    This task will provision / decomission fedora on azure

    The output will give required information to connect within the remote provisioned host

  volumes:
    - name: az-credentials
      secret:
        secretName: $(params.secret-az-credentials)
    - name: host-info
      emptyDir: {}

  params:
    - name: secret-az-credentials
      description: |
        ocp secret holding the azure credentials. Secret should be accessible to this task.

        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${name}
        type: Opaque
        data:
          tenant_id: ${tenant_id}
          subscription_id: ${subscription_id}
          client_id: ${client_id}
          client_secret: ${client_secret}
          storage_account: ${storage_account}
          storage_key: ${storage_key}
          blob: ${blob}
    - name: id
      description: identifier for the provisioned environment
    - name: operation 
      description: operation to execute within the infrastructure. Current values (create, destroy)

    # Secret result 
    # naming
    - name: host-access-secret-name
      type: string
      default: "''"
      description: |
        Once the target is provisioned the config to connect is addded to a secret 
        check resutls. If this param is set the secret will be created with the name set 
        otherwise it will be created with a random name.
    # ownership
    - name: ownerKind
      type: string
      default: PipelineRun
      description: |
        The type of resource that should own the generated SpaceRequest.
        Deletion of this resource will trigger deletion of the SpaceRequest.
        Supported values: `PipelineRun`, `TaskRun`.
    - name: ownerName
      type: string
      default: "''"
      description: |
        The name of the resource that should own the generated SpaceRequest.
        This should either be passed the value of `$(context.pipelineRun.name)`
        or `$(context.taskRun.name)` depending on the value of `ownerKind`.
    - name: ownerUid
      type: string
      default: "''"
      description: |
        The uid of the resource that should own the generated SpaceRequest.
        This should either be passed the value of `$(context.pipelineRun.uid)`
        or `$(context.taskRun.uid)` depending on the value of `ownerKind`.
    
    # VM type params
    - name: arch
      description: architecture for the target machine. Allowed x86_64 or arm64 (default "x86_64")
      default: 'x86_64'
    - name: vmsize
      description: size for the machine
      default: "''"
    - name: cpus
      description: number of cpus for the machine
      default: '8'
    - name: memory
      description: amount of ram in GB for the machine
      default: '64'
    - name: nested-virt
      description: nested virtualization support on the machine
      default: 'false'
    - name: spot
      description: in case spot is set to true it 'ill check for best spot price and create the VM on the target region
      default: 'true'
    - name: spot-eviction-tolerance
      description: 'if spot is enable we can define the minimum tolerance level of eviction. Allowed value are: lowest, low, medium, high or highest'
      default: 'lowest'
    - name: spot-increase-rate
      description: 'Percentage to be added on top of the current calculated spot price to increase chances to get the machine'
      default: '30'

    # Fedora params
    - name: version
      description: this task will spin a Fedora image. This param will set the version for it. Default 40.0.
      default: '40.0'
    
    # Metadata params
    - name: tags
      description: tags for the resources created on the providers
      default: "''"
    
    # Control params
    - name: debug
      description: |
        Warning setting this param to true expose credentials 
        
        The parameter is intended to add verbosity on the task execution and also print credentials on stdout
        to easily access to remote machice
      default: 'false'
    
  results:
    - name: host-access-secret
      description: |
        ocp secret holding the information to connect with the target machine.

          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${name}
          type: Opaque
          data:
            host: ${host}
            username: ${username}
            id_rsa: ${id_rsa}

  steps:
    - name: provisioner
      image: quay.io/redhat-developer/mapt:v1.0.0-dev
      imagePullPolicy: Always
      volumeMounts:
        - name: az-credentials
          mountPath: /opt/az-credentials
        - name: host-info
          mountPath: /opt/host-info
      script: |
        #!/bin/sh

        # If debug add verbosity
        if [[ $(params.debug) == "true" ]]; then
          set -xuo   
        fi
        
        # Credentials
        export ARM_TENANT_ID=$(cat /opt/az-credentials/tenant_id)
        export ARM_SUBSCRIPTION_ID=$(cat /opt/az-credentials/subscription_id)
        export ARM_CLIENT_ID=$(cat /opt/az-credentials/client_id)
        export ARM_CLIENT_SECRET=$(cat /opt/az-credentials/client_secret)
        export AZURE_STORAGE_ACCOUNT=$(cat /opt/az-credentials/storage_account)
        export AZURE_STORAGE_KEY=$(cat /opt/az-credentials/storage_key)
        BLOB=$(cat /opt/az-credentials/blob)

        if [[ $(params.operation) == "create"  ]]; then
          if [[ $(params.ownerName) == "" || $(params.ownerUid) == "" ]]; then
            echo "Parameter ownerName and ownerUid is required for create instance"
            exit 1
          fi
        fi

        # Run mapt
        cmd="mapt azure fedora $(params.operation) "
        cmd+="--project-name mapt-fedora-$(params.id) "
        cmd+="--backed-url azblob://${BLOB}/fedora-$(params.id) "
        if [[ $(params.operation) == "create" ]]; then
          cmd+="--conn-details-output /opt/host-info "
          cmd+="--arch $(params.arch) --cpus $(params.cpus) "
          cmd+="--memory $(params.memory) --version $(params.version) "
          if [[ $(params.nested-virt) == "true" ]]; then
            cmd+="--nested-virt "
          fi
          if [[ $(params.vmsize) != "" ]]; then
            cmd+="--vmsize $(params.vmsize) "
          fi
          if [[ $(params.spot) == "true" ]]; then
            cmd+="--spot --spot-eviction-tolerance $(params.spot-eviction-tolerance) --spot-increase-rate $(params.spot-increase-rate) "
          fi
          cmd+="--tags $(params.tags) "
        fi
        eval "${cmd}"
      resources:
        requests:
          memory: "200Mi"
          cpu: "100m"
        limits:
          memory: "600Mi"
          cpu: "300m"
    - name: host-info-secret
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:e70eb2be867f1236b19f5cbfeb8e0625737ce0ec1369e32a4f9f146aaaf68d49
      env:
        - name: NAMESPACE
          value: $(context.taskRun.namespace)
        - name: OWNER_KIND
          value: $(params.ownerKind)
        - name: OWNER_NAME
          value: $(params.ownerName)
        - name: OWNER_UID
          value: $(params.ownerUid)  
      volumeMounts:
        - name: host-info
          mountPath: /opt/host-info
      script: |
        #!/bin/bash
        set -eo pipefail
        if [[ $(params.operation) == "create" ]]; then
        export SECRETNAME="generateName: mapt-azure-fedora-"
        if [[ $(params.host-access-secret-name) != "" ]]; then
          export SECRETNAME="name: $(params.host-access-secret-name)"
        fi
        cat <<EOF > host-info.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          $SECRETNAME
          namespace: $NAMESPACE
          ownerReferences:
          - apiVersion: tekton.dev/v1
            kind: $OWNER_KIND
            name: $OWNER_NAME
            uid: $OWNER_UID
        type: Opaque
        data:
          host: $(cat /opt/host-info/host | base64 -w0)
          username: $(cat /opt/host-info/username | base64 -w0)
          id_rsa: $(cat /opt/host-info/id_rsa | base64 -w0)
        EOF

        if [[ $(params.debug) == "true" ]]; then
          cat /opt/host-info/*
        fi
        
        NAME=$(oc create -f host-info.yaml -o=jsonpath='{.metadata.name}')
        echo -n "${NAME}" | tee $(results.host-access-secret.path)   
        fi

