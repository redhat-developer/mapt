---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: infra-aws-windows-server
  labels:
    app.kubernetes.io/version: "0.9.7"
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/categories: infrastructure
    tekton.dev/tags: infrastructure, aws, windows-server
    tekton.dev/displayName: "aws manager"
    tekton.dev/platforms: "linux/amd64, linux/arm64"
spec:
  description: |
    Task provision a windows server dedicated on host on AWS

    The machine will offer nested virtualizataion capabilities as so it should be spin on a dedicated (baremetal) machine

  volumes:
    - name: aws-credentials
      secret:
        secretName: $(params.secret-aws-credentials)
    - name: host-info
      emptyDir: {}

  params:
    - name: secret-aws-credentials
      description: |
        ocp secret holding the aws credentials. Secret should be accessible to this task.

        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: aws-${name}
        type: Opaque
        data:
          access-key: ${access_key}
          secret-key: ${secret_key}
          region: ${region}
          bucket: ${bucket}
    - name: id
      description: identifier for the provisioned environment
    - name: operation 
      description: operation to execute within the infrastructure. Current values (create, destroy)

    # Secret result 
    # naming
    - name: host-access-secret-name
      type: string
      default: "''"
      description: |
        Once the target is provisioned the config to connect is addded to a secret 
        check resutls. If this param is set the secret will be created with the name set 
        otherwise it will be created with a random name.
    # ownership
    - name: ownerKind
      type: string
      default: PipelineRun
      description: |
        The type of resource that should own the generated SpaceRequest.
        Deletion of this resource will trigger deletion of the SpaceRequest.
        Supported values: `PipelineRun`, `TaskRun`.
    - name: ownerName
      type: string
      default: "''"
      description: |
        The name of the resource that should own the generated SpaceRequest.
        This should either be passed the value of `$(context.pipelineRun.name)`
        or `$(context.taskRun.name)` depending on the value of `ownerKind`.
    - name: ownerUid
      type: string
      default: "''"
      description: |
        The uid of the resource that should own the generated SpaceRequest.
        This should either be passed the value of `$(context.pipelineRun.uid)`
        or `$(context.taskRun.uid)` depending on the value of `ownerKind`.

    # Windows params
    - name: ami-name
      description: name for the custom ami to be used within windows machine. Check README on how to build it
      default: 'Windows_Server-2019-English-Full-HyperV-RHQE'
    - name: ami-username
      description: name for de default user on the custom AMI
      default: 'ec2-user'
    - name: ami-owner
      description: alias name for the owner of the custom AMI
      default: 'self'
    - name: ami-lang
      description: language for the ami possible values (eng, non-eng). This param is used when no ami-name is set and the action uses the default custom ami
      default: 'eng'
    - name: spot
      description: Check best spot option to spin the machine and will create resources on that region.
      default: 'true'
    - name: spot-increase-rate
      description: Percentage to be added on top of the current calculated spot price to increase chances to get the machine.
      default: '20'
    - name: spot-eviction-tolerance
      description: | 
        if spot is enable we can define the minimum tolerance level of eviction. 
        Allowed value are: lowest, low, medium, high or highest
      default: 'lowest'
      
    - name: airgap
      description: |
          Set the machine on an airgap scenario. 

          If airgap is set an extra VM is created acting as bastion, information to access bastion is also
          added to the output folder.

          To access the target machine we need to go through the bastion
      default: 'false'
    - name: tags
      description: tags for the resources created on the providers
      default: "''"

    # Control params
    - name: debug
      description: |
        Warning setting this param to true expose credentials 
        
        The parameter is intended to add verbosity on the task execution and also print credentials on stdout
        to easily access to remote machice
      default: 'false'

  results:
    - name: host-access-secret
      description: |
        ocp secret holding the information to connect with the target machine.

          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: ${name}
            labels:
          type: Opaque
          data:
            host: ${host}
            username: ${username}
            id_rsa: ${id_rsa}
            # If airgap data for bastion host
            bastion-host: ${bastion-host}
            bastion-username: ${bastion-username}
            bastion-id_rsa: ${bastion-id_rsa}


  steps:
    - name: provisioner
      image: quay.io/redhat-developer/mapt:v0.9.7
      imagePullPolicy: Always
      volumeMounts:
        - name: aws-credentials
          mountPath: /opt/aws-credentials
        - name: host-info
          mountPath: /opt/host-info
      script: |
        #!/bin/sh

        set -euo pipefail
        # If debug add verbosity
        if [[ $(params.debug) == "true" ]]; then
          set -xeuo pipefail  
        fi

        # Credentials
        export AWS_ACCESS_KEY_ID=$(cat /opt/aws-credentials/access-key)
        export AWS_SECRET_ACCESS_KEY=$(cat /opt/aws-credentials/secret-key)
        export AWS_DEFAULT_REGION=$(cat /opt/aws-credentials/region)
        BUCKET=$(cat /opt/aws-credentials/bucket)

        if [[ $(params.operation) == "create"  ]]; then
          if [[ $(params.ownerName) == "" || $(params.ownerUid) == "" ]]; then
            echo "Parameter ownerName and ownerUid is required for create instance"
            exit 1
          fi
        fi

        # Run mapt
        cmd="mapt aws windows $(params.operation) "
        cmd+="--project-name mapt-windows-$(params.id) "
        # Set the backed url
        cmd+="--backed-url s3://${BUCKET}/mapt/windows/$(params.id) "
        if [[ $(params.operation) == "create" ]]; then
          cmd+="--conn-details-output /opt/host-info "
          cmd+="--ami-name $(params.ami-name) "
          cmd+="--ami-username $(params.ami-username) "
          cmd+="--ami-owner $(params.ami-owner) "
          cmd+="--ami-lang $(params.ami-lang) "
          if [[ $(params.spot) == "true" ]]; then 
            cmd+="--spot --spot-increase-rate $(params.spot-increase-rate) --spot-eviction-tolerance $(params.spot-eviction-tolerance) " 
          fi
          if [[ $(params.airgap) == "true" ]]; then cmd+="--airgap "; fi
          cmd+="--tags $(params.tags) "
        fi
        eval "${cmd}"
      resources:      
        requests:
          memory: "200Mi"
          cpu: "100m"
        limits:
          memory: "600Mi"
          cpu: "300m"
    - name: host-info-secret
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:e70eb2be867f1236b19f5cbfeb8e0625737ce0ec1369e32a4f9f146aaaf68d49
      env:
        - name: NAMESPACE
          value: $(context.taskRun.namespace)
        - name: OWNER_KIND
          value: $(params.ownerKind)
        - name: OWNER_NAME
          value: $(params.ownerName)
        - name: OWNER_UID
          value: $(params.ownerUid)  
      volumeMounts:
        - name: host-info
          mountPath: /opt/host-info
      script: |
        #!/bin/bash
        set -eo pipefail
        if [[ $(params.operation) == "create" ]]; then
        export SECRETNAME="generateName: mapt-aws-windows-"
        if [[ $(params.host-access-secret-name) != "" ]]; then
          export SECRETNAME="name: $(params.host-access-secret-name)"
        fi
        cat <<EOF > host-info.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          $SECRETNAME
          namespace: $NAMESPACE
          ownerReferences:
          - apiVersion: tekton.dev/v1
            kind: $OWNER_KIND
            name: $OWNER_NAME
            uid: $OWNER_UID
        type: Opaque
        data:
          host: $(cat /opt/host-info/host | base64 -w0)
          username: $(cat /opt/host-info/username | base64 -w0)
          id_rsa: $(cat /opt/host-info/id_rsa | base64 -w0)
        EOF
        if [[ $(params.airgap) == "true" ]]; then
        cat <<EOF >> host-info.yaml
          bastion-host: $(cat /opt/host-info/bastion_host | base64 -w0)
          bastion-username: $(cat /opt/host-info/bastion_username | base64 -w0)
          bastion-id_rsa: $(cat /opt/host-info/bastion_id_rsa | base64 -w0)
        EOF
        fi

        if [[ $(params.debug) == "true" ]]; then
          cat /opt/host-info/*
        fi
        
        NAME=$(oc create -f host-info.yaml -o=jsonpath='{.metadata.name}')
        echo -n "${NAME}" | tee $(results.host-access-secret.path)   
        fi

    