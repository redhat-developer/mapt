// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// .
type BlobContainerLegalHold struct {
	pulumi.CustomResourceState

	// Name of the Storage Account.
	AccountName pulumi.StringPtrOutput `pulumi:"accountName"`
	// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
	AllowProtectedAppendWritesAll pulumi.BoolPtrOutput `pulumi:"allowProtectedAppendWritesAll"`
	// Name of the Blob Container.
	ContainerName pulumi.StringPtrOutput `pulumi:"containerName"`
	// Name of the resource group that contains the storage account.
	ResourceGroupName pulumi.StringPtrOutput `pulumi:"resourceGroupName"`
	// List of legal hold tags. Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewBlobContainerLegalHold registers a new resource with the given unique name, arguments, and options.
func NewBlobContainerLegalHold(ctx *pulumi.Context,
	name string, args *BlobContainerLegalHoldArgs, opts ...pulumi.ResourceOption) (*BlobContainerLegalHold, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ContainerName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BlobContainerLegalHold
	err := ctx.RegisterResource("azure-native:storage:BlobContainerLegalHold", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlobContainerLegalHold gets an existing BlobContainerLegalHold resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlobContainerLegalHold(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlobContainerLegalHoldState, opts ...pulumi.ResourceOption) (*BlobContainerLegalHold, error) {
	var resource BlobContainerLegalHold
	err := ctx.ReadResource("azure-native:storage:BlobContainerLegalHold", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlobContainerLegalHold resources.
type blobContainerLegalHoldState struct {
}

type BlobContainerLegalHoldState struct {
}

func (BlobContainerLegalHoldState) ElementType() reflect.Type {
	return reflect.TypeOf((*blobContainerLegalHoldState)(nil)).Elem()
}

type blobContainerLegalHoldArgs struct {
	// Name of the Storage Account.
	AccountName string `pulumi:"accountName"`
	// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
	AllowProtectedAppendWritesAll *bool `pulumi:"allowProtectedAppendWritesAll"`
	// Name of the Blob Container.
	ContainerName string `pulumi:"containerName"`
	// Name of the resource group that contains the storage account.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// List of legal hold tags. Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a BlobContainerLegalHold resource.
type BlobContainerLegalHoldArgs struct {
	// Name of the Storage Account.
	AccountName pulumi.StringInput
	// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
	AllowProtectedAppendWritesAll pulumi.BoolPtrInput
	// Name of the Blob Container.
	ContainerName pulumi.StringInput
	// Name of the resource group that contains the storage account.
	ResourceGroupName pulumi.StringInput
	// List of legal hold tags. Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
	Tags pulumi.StringArrayInput
}

func (BlobContainerLegalHoldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blobContainerLegalHoldArgs)(nil)).Elem()
}

type BlobContainerLegalHoldInput interface {
	pulumi.Input

	ToBlobContainerLegalHoldOutput() BlobContainerLegalHoldOutput
	ToBlobContainerLegalHoldOutputWithContext(ctx context.Context) BlobContainerLegalHoldOutput
}

func (*BlobContainerLegalHold) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobContainerLegalHold)(nil)).Elem()
}

func (i *BlobContainerLegalHold) ToBlobContainerLegalHoldOutput() BlobContainerLegalHoldOutput {
	return i.ToBlobContainerLegalHoldOutputWithContext(context.Background())
}

func (i *BlobContainerLegalHold) ToBlobContainerLegalHoldOutputWithContext(ctx context.Context) BlobContainerLegalHoldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobContainerLegalHoldOutput)
}

type BlobContainerLegalHoldOutput struct{ *pulumi.OutputState }

func (BlobContainerLegalHoldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobContainerLegalHold)(nil)).Elem()
}

func (o BlobContainerLegalHoldOutput) ToBlobContainerLegalHoldOutput() BlobContainerLegalHoldOutput {
	return o
}

func (o BlobContainerLegalHoldOutput) ToBlobContainerLegalHoldOutputWithContext(ctx context.Context) BlobContainerLegalHoldOutput {
	return o
}

// Name of the Storage Account.
func (o BlobContainerLegalHoldOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobContainerLegalHold) pulumi.StringPtrOutput { return v.AccountName }).(pulumi.StringPtrOutput)
}

// When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
func (o BlobContainerLegalHoldOutput) AllowProtectedAppendWritesAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BlobContainerLegalHold) pulumi.BoolPtrOutput { return v.AllowProtectedAppendWritesAll }).(pulumi.BoolPtrOutput)
}

// Name of the Blob Container.
func (o BlobContainerLegalHoldOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobContainerLegalHold) pulumi.StringPtrOutput { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Name of the resource group that contains the storage account.
func (o BlobContainerLegalHoldOutput) ResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobContainerLegalHold) pulumi.StringPtrOutput { return v.ResourceGroupName }).(pulumi.StringPtrOutput)
}

// List of legal hold tags. Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.
func (o BlobContainerLegalHoldOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BlobContainerLegalHold) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(BlobContainerLegalHoldOutput{})
}
