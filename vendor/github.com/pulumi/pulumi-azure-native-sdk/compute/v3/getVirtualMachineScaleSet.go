// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Display information about a virtual machine scale set.
//
// Uses Azure REST API version 2024-11-01.
//
// Other available API versions: 2022-08-01, 2022-11-01, 2023-03-01, 2023-07-01, 2023-09-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native compute [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupVirtualMachineScaleSet(ctx *pulumi.Context, args *LookupVirtualMachineScaleSetArgs, opts ...pulumi.InvokeOption) (*LookupVirtualMachineScaleSetResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualMachineScaleSetResult
	err := ctx.Invoke("azure-native:compute:getVirtualMachineScaleSet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVirtualMachineScaleSetArgs struct {
	// The expand expression to apply on the operation. 'UserData' retrieves the UserData property of the VM scale set that was provided by the user during the VM scale set Create/Update operation
	Expand *string `pulumi:"expand"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the VM scale set.
	VmScaleSetName string `pulumi:"vmScaleSetName"`
}

// Describes a Virtual Machine Scale Set.
type LookupVirtualMachineScaleSetResult struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilitiesResponse `pulumi:"additionalCapabilities"`
	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicyResponse `pulumi:"automaticRepairsPolicy"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Optional property which must either be set to True or omitted.
	ConstrainedMaximumCapacity *bool `pulumi:"constrainedMaximumCapacity"`
	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool `pulumi:"doNotRunExtensionsOnOverprovisionedVMs"`
	// Etag is property returned in Create/Update/Get response of the VMSS, so that customer can supply it in the header to ensure optimistic updates
	Etag string `pulumi:"etag"`
	// The extended location of the Virtual Machine Scale Set.
	ExtendedLocation *ExtendedLocationResponse `pulumi:"extendedLocation"`
	// Specifies information about the dedicated host group that the virtual machine scale set resides in. Minimum api-version: 2020-06-01.
	HostGroup *SubResourceResponse `pulumi:"hostGroup"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Specifies the orchestration mode for the virtual machine scale set.
	OrchestrationMode *string `pulumi:"orchestrationMode"`
	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool `pulumi:"overprovision"`
	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
	Plan *PlanResponse `pulumi:"plan"`
	// Fault Domain count for each placement group.
	PlatformFaultDomainCount *int `pulumi:"platformFaultDomainCount"`
	// Specifies the desired targets for mixing Spot and Regular priority VMs within the same VMSS Flex instance.
	PriorityMixPolicy *PriorityMixPolicyResponse `pulumi:"priorityMixPolicy"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResourceResponse `pulumi:"proximityPlacementGroup"`
	// Policy for Resiliency
	ResiliencyPolicy *ResiliencyPolicyResponse `pulumi:"resiliencyPolicy"`
	// Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set.
	ScaleInPolicy *ScaleInPolicyResponse `pulumi:"scaleInPolicy"`
	// The ScheduledEventsPolicy.
	ScheduledEventsPolicy *ScheduledEventsPolicyResponse `pulumi:"scheduledEventsPolicy"`
	// When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The virtual machine scale set sku.
	Sku *SkuResponse `pulumi:"sku"`
	// Specifies the sku profile for the virtual machine scale set.
	SkuProfile *SkuProfileResponse `pulumi:"skuProfile"`
	// Specifies the Spot Restore properties for the virtual machine scale set.
	SpotRestorePolicy *SpotRestorePolicyResponse `pulumi:"spotRestorePolicy"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the time at which the Virtual Machine Scale Set resource was created. Minimum api-version: 2021-11-01.
	TimeCreated string `pulumi:"timeCreated"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
	UniqueId string `pulumi:"uniqueId"`
	// The upgrade policy.
	UpgradePolicy *UpgradePolicyResponse `pulumi:"upgradePolicy"`
	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetVMProfileResponse `pulumi:"virtualMachineProfile"`
	// Specifies the align mode between Virtual Machine Scale Set compute and storage Fault Domain count.
	ZonalPlatformFaultDomainAlignMode *string `pulumi:"zonalPlatformFaultDomainAlignMode"`
	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property can only be set if the zones property of the scale set contains more than one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// The availability zones.
	Zones []string `pulumi:"zones"`
}

func LookupVirtualMachineScaleSetOutput(ctx *pulumi.Context, args LookupVirtualMachineScaleSetOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualMachineScaleSetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVirtualMachineScaleSetResultOutput, error) {
			args := v.(LookupVirtualMachineScaleSetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:compute:getVirtualMachineScaleSet", args, LookupVirtualMachineScaleSetResultOutput{}, options).(LookupVirtualMachineScaleSetResultOutput), nil
		}).(LookupVirtualMachineScaleSetResultOutput)
}

type LookupVirtualMachineScaleSetOutputArgs struct {
	// The expand expression to apply on the operation. 'UserData' retrieves the UserData property of the VM scale set that was provided by the user during the VM scale set Create/Update operation
	Expand pulumi.StringPtrInput `pulumi:"expand"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the VM scale set.
	VmScaleSetName pulumi.StringInput `pulumi:"vmScaleSetName"`
}

func (LookupVirtualMachineScaleSetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineScaleSetArgs)(nil)).Elem()
}

// Describes a Virtual Machine Scale Set.
type LookupVirtualMachineScaleSetResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualMachineScaleSetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineScaleSetResult)(nil)).Elem()
}

func (o LookupVirtualMachineScaleSetResultOutput) ToLookupVirtualMachineScaleSetResultOutput() LookupVirtualMachineScaleSetResultOutput {
	return o
}

func (o LookupVirtualMachineScaleSetResultOutput) ToLookupVirtualMachineScaleSetResultOutputWithContext(ctx context.Context) LookupVirtualMachineScaleSetResultOutput {
	return o
}

// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
func (o LookupVirtualMachineScaleSetResultOutput) AdditionalCapabilities() AdditionalCapabilitiesResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *AdditionalCapabilitiesResponse {
		return v.AdditionalCapabilities
	}).(AdditionalCapabilitiesResponsePtrOutput)
}

// Policy for automatic repairs.
func (o LookupVirtualMachineScaleSetResultOutput) AutomaticRepairsPolicy() AutomaticRepairsPolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *AutomaticRepairsPolicyResponse {
		return v.AutomaticRepairsPolicy
	}).(AutomaticRepairsPolicyResponsePtrOutput)
}

// The Azure API version of the resource.
func (o LookupVirtualMachineScaleSetResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Optional property which must either be set to True or omitted.
func (o LookupVirtualMachineScaleSetResultOutput) ConstrainedMaximumCapacity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *bool { return v.ConstrainedMaximumCapacity }).(pulumi.BoolPtrOutput)
}

// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
func (o LookupVirtualMachineScaleSetResultOutput) DoNotRunExtensionsOnOverprovisionedVMs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *bool { return v.DoNotRunExtensionsOnOverprovisionedVMs }).(pulumi.BoolPtrOutput)
}

// Etag is property returned in Create/Update/Get response of the VMSS, so that customer can supply it in the header to ensure optimistic updates
func (o LookupVirtualMachineScaleSetResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The extended location of the Virtual Machine Scale Set.
func (o LookupVirtualMachineScaleSetResultOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *ExtendedLocationResponse { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// Specifies information about the dedicated host group that the virtual machine scale set resides in. Minimum api-version: 2020-06-01.
func (o LookupVirtualMachineScaleSetResultOutput) HostGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *SubResourceResponse { return v.HostGroup }).(SubResourceResponsePtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupVirtualMachineScaleSetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identity of the virtual machine scale set, if configured.
func (o LookupVirtualMachineScaleSetResultOutput) Identity() VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *VirtualMachineScaleSetIdentityResponse { return v.Identity }).(VirtualMachineScaleSetIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupVirtualMachineScaleSetResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupVirtualMachineScaleSetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the orchestration mode for the virtual machine scale set.
func (o LookupVirtualMachineScaleSetResultOutput) OrchestrationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *string { return v.OrchestrationMode }).(pulumi.StringPtrOutput)
}

// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
func (o LookupVirtualMachineScaleSetResultOutput) Overprovision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *bool { return v.Overprovision }).(pulumi.BoolPtrOutput)
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
func (o LookupVirtualMachineScaleSetResultOutput) Plan() PlanResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *PlanResponse { return v.Plan }).(PlanResponsePtrOutput)
}

// Fault Domain count for each placement group.
func (o LookupVirtualMachineScaleSetResultOutput) PlatformFaultDomainCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *int { return v.PlatformFaultDomainCount }).(pulumi.IntPtrOutput)
}

// Specifies the desired targets for mixing Spot and Regular priority VMs within the same VMSS Flex instance.
func (o LookupVirtualMachineScaleSetResultOutput) PriorityMixPolicy() PriorityMixPolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *PriorityMixPolicyResponse { return v.PriorityMixPolicy }).(PriorityMixPolicyResponsePtrOutput)
}

// The provisioning state, which only appears in the response.
func (o LookupVirtualMachineScaleSetResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. Minimum api-version: 2018-04-01.
func (o LookupVirtualMachineScaleSetResultOutput) ProximityPlacementGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *SubResourceResponse { return v.ProximityPlacementGroup }).(SubResourceResponsePtrOutput)
}

// Policy for Resiliency
func (o LookupVirtualMachineScaleSetResultOutput) ResiliencyPolicy() ResiliencyPolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *ResiliencyPolicyResponse { return v.ResiliencyPolicy }).(ResiliencyPolicyResponsePtrOutput)
}

// Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set.
func (o LookupVirtualMachineScaleSetResultOutput) ScaleInPolicy() ScaleInPolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *ScaleInPolicyResponse { return v.ScaleInPolicy }).(ScaleInPolicyResponsePtrOutput)
}

// The ScheduledEventsPolicy.
func (o LookupVirtualMachineScaleSetResultOutput) ScheduledEventsPolicy() ScheduledEventsPolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *ScheduledEventsPolicyResponse {
		return v.ScheduledEventsPolicy
	}).(ScheduledEventsPolicyResponsePtrOutput)
}

// When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true.
func (o LookupVirtualMachineScaleSetResultOutput) SinglePlacementGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *bool { return v.SinglePlacementGroup }).(pulumi.BoolPtrOutput)
}

// The virtual machine scale set sku.
func (o LookupVirtualMachineScaleSetResultOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Specifies the sku profile for the virtual machine scale set.
func (o LookupVirtualMachineScaleSetResultOutput) SkuProfile() SkuProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *SkuProfileResponse { return v.SkuProfile }).(SkuProfileResponsePtrOutput)
}

// Specifies the Spot Restore properties for the virtual machine scale set.
func (o LookupVirtualMachineScaleSetResultOutput) SpotRestorePolicy() SpotRestorePolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *SpotRestorePolicyResponse { return v.SpotRestorePolicy }).(SpotRestorePolicyResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupVirtualMachineScaleSetResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupVirtualMachineScaleSetResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the time at which the Virtual Machine Scale Set resource was created. Minimum api-version: 2021-11-01.
func (o LookupVirtualMachineScaleSetResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupVirtualMachineScaleSetResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
func (o LookupVirtualMachineScaleSetResultOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) string { return v.UniqueId }).(pulumi.StringOutput)
}

// The upgrade policy.
func (o LookupVirtualMachineScaleSetResultOutput) UpgradePolicy() UpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *UpgradePolicyResponse { return v.UpgradePolicy }).(UpgradePolicyResponsePtrOutput)
}

// The virtual machine profile.
func (o LookupVirtualMachineScaleSetResultOutput) VirtualMachineProfile() VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *VirtualMachineScaleSetVMProfileResponse {
		return v.VirtualMachineProfile
	}).(VirtualMachineScaleSetVMProfileResponsePtrOutput)
}

// Specifies the align mode between Virtual Machine Scale Set compute and storage Fault Domain count.
func (o LookupVirtualMachineScaleSetResultOutput) ZonalPlatformFaultDomainAlignMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *string { return v.ZonalPlatformFaultDomainAlignMode }).(pulumi.StringPtrOutput)
}

// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property can only be set if the zones property of the scale set contains more than one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set.
func (o LookupVirtualMachineScaleSetResultOutput) ZoneBalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) *bool { return v.ZoneBalance }).(pulumi.BoolPtrOutput)
}

// The availability zones.
func (o LookupVirtualMachineScaleSetResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualMachineScaleSetResultOutput{})
}
