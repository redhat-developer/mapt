// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the cloud service.
//
// Uses Azure REST API version 2022-09-04. In version 2.x of the Azure Native provider, it used API version 2022-09-04.
//
// Other available API versions: 2022-04-04, 2024-11-04. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native compute [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type CloudService struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Resource location.
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Cloud service properties
	Properties CloudServicePropertiesResponseOutput `pulumi:"properties"`
	// The system meta data relating to this resource.
	SystemData SystemDataResponsePtrOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be provisioned. This field is optional.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewCloudService registers a new resource with the given unique name, arguments, and options.
func NewCloudService(ctx *pulumi.Context,
	name string, args *CloudServiceArgs, opts ...pulumi.ResourceOption) (*CloudService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:compute/v20201001preview:CloudService"),
		},
		{
			Type: pulumi.String("azure-native:compute/v20210301:CloudService"),
		},
		{
			Type: pulumi.String("azure-native:compute/v20220404:CloudService"),
		},
		{
			Type: pulumi.String("azure-native:compute/v20220904:CloudService"),
		},
		{
			Type: pulumi.String("azure-native:compute/v20241104:CloudService"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CloudService
	err := ctx.RegisterResource("azure-native:compute:CloudService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudService gets an existing CloudService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudServiceState, opts ...pulumi.ResourceOption) (*CloudService, error) {
	var resource CloudService
	err := ctx.ReadResource("azure-native:compute:CloudService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudService resources.
type cloudServiceState struct {
}

type CloudServiceState struct {
}

func (CloudServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudServiceState)(nil)).Elem()
}

type cloudServiceArgs struct {
	// Name of the cloud service.
	CloudServiceName *string `pulumi:"cloudServiceName"`
	// Resource location.
	Location *string `pulumi:"location"`
	// Cloud service properties
	Properties *CloudServiceProperties `pulumi:"properties"`
	// Name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be provisioned. This field is optional.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a CloudService resource.
type CloudServiceArgs struct {
	// Name of the cloud service.
	CloudServiceName pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// Cloud service properties
	Properties CloudServicePropertiesPtrInput
	// Name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be provisioned. This field is optional.
	Zones pulumi.StringArrayInput
}

func (CloudServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudServiceArgs)(nil)).Elem()
}

type CloudServiceInput interface {
	pulumi.Input

	ToCloudServiceOutput() CloudServiceOutput
	ToCloudServiceOutputWithContext(ctx context.Context) CloudServiceOutput
}

func (*CloudService) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudService)(nil)).Elem()
}

func (i *CloudService) ToCloudServiceOutput() CloudServiceOutput {
	return i.ToCloudServiceOutputWithContext(context.Background())
}

func (i *CloudService) ToCloudServiceOutputWithContext(ctx context.Context) CloudServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceOutput)
}

type CloudServiceOutput struct{ *pulumi.OutputState }

func (CloudServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudService)(nil)).Elem()
}

func (o CloudServiceOutput) ToCloudServiceOutput() CloudServiceOutput {
	return o
}

func (o CloudServiceOutput) ToCloudServiceOutputWithContext(ctx context.Context) CloudServiceOutput {
	return o
}

// The Azure API version of the resource.
func (o CloudServiceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudService) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Resource location.
func (o CloudServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name.
func (o CloudServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Cloud service properties
func (o CloudServiceOutput) Properties() CloudServicePropertiesResponseOutput {
	return o.ApplyT(func(v *CloudService) CloudServicePropertiesResponseOutput { return v.Properties }).(CloudServicePropertiesResponseOutput)
}

// The system meta data relating to this resource.
func (o CloudServiceOutput) SystemData() SystemDataResponsePtrOutput {
	return o.ApplyT(func(v *CloudService) SystemDataResponsePtrOutput { return v.SystemData }).(SystemDataResponsePtrOutput)
}

// Resource tags.
func (o CloudServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CloudService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o CloudServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudService) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// List of logical availability zone of the resource. List should contain only 1 zone where cloud service should be provisioned. This field is optional.
func (o CloudServiceOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudService) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CloudServiceOutput{})
}
