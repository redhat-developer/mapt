// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// This is the Access Control Rules specification for an inVMAccessControlProfile version.
type AccessControlRules struct {
	// A list of identities.
	Identities []AccessControlRulesIdentity `pulumi:"identities"`
	// A list of privileges.
	Privileges []AccessControlRulesPrivilege `pulumi:"privileges"`
	// A list of role assignments.
	RoleAssignments []AccessControlRulesRoleAssignment `pulumi:"roleAssignments"`
	// A list of roles.
	Roles []AccessControlRulesRole `pulumi:"roles"`
}

// AccessControlRulesInput is an input type that accepts AccessControlRulesArgs and AccessControlRulesOutput values.
// You can construct a concrete instance of `AccessControlRulesInput` via:
//
//	AccessControlRulesArgs{...}
type AccessControlRulesInput interface {
	pulumi.Input

	ToAccessControlRulesOutput() AccessControlRulesOutput
	ToAccessControlRulesOutputWithContext(context.Context) AccessControlRulesOutput
}

// This is the Access Control Rules specification for an inVMAccessControlProfile version.
type AccessControlRulesArgs struct {
	// A list of identities.
	Identities AccessControlRulesIdentityArrayInput `pulumi:"identities"`
	// A list of privileges.
	Privileges AccessControlRulesPrivilegeArrayInput `pulumi:"privileges"`
	// A list of role assignments.
	RoleAssignments AccessControlRulesRoleAssignmentArrayInput `pulumi:"roleAssignments"`
	// A list of roles.
	Roles AccessControlRulesRoleArrayInput `pulumi:"roles"`
}

func (AccessControlRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRules)(nil)).Elem()
}

func (i AccessControlRulesArgs) ToAccessControlRulesOutput() AccessControlRulesOutput {
	return i.ToAccessControlRulesOutputWithContext(context.Background())
}

func (i AccessControlRulesArgs) ToAccessControlRulesOutputWithContext(ctx context.Context) AccessControlRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesOutput)
}

func (i AccessControlRulesArgs) ToAccessControlRulesPtrOutput() AccessControlRulesPtrOutput {
	return i.ToAccessControlRulesPtrOutputWithContext(context.Background())
}

func (i AccessControlRulesArgs) ToAccessControlRulesPtrOutputWithContext(ctx context.Context) AccessControlRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesOutput).ToAccessControlRulesPtrOutputWithContext(ctx)
}

// AccessControlRulesPtrInput is an input type that accepts AccessControlRulesArgs, AccessControlRulesPtr and AccessControlRulesPtrOutput values.
// You can construct a concrete instance of `AccessControlRulesPtrInput` via:
//
//	        AccessControlRulesArgs{...}
//
//	or:
//
//	        nil
type AccessControlRulesPtrInput interface {
	pulumi.Input

	ToAccessControlRulesPtrOutput() AccessControlRulesPtrOutput
	ToAccessControlRulesPtrOutputWithContext(context.Context) AccessControlRulesPtrOutput
}

type accessControlRulesPtrType AccessControlRulesArgs

func AccessControlRulesPtr(v *AccessControlRulesArgs) AccessControlRulesPtrInput {
	return (*accessControlRulesPtrType)(v)
}

func (*accessControlRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlRules)(nil)).Elem()
}

func (i *accessControlRulesPtrType) ToAccessControlRulesPtrOutput() AccessControlRulesPtrOutput {
	return i.ToAccessControlRulesPtrOutputWithContext(context.Background())
}

func (i *accessControlRulesPtrType) ToAccessControlRulesPtrOutputWithContext(ctx context.Context) AccessControlRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesPtrOutput)
}

// This is the Access Control Rules specification for an inVMAccessControlProfile version.
type AccessControlRulesOutput struct{ *pulumi.OutputState }

func (AccessControlRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRules)(nil)).Elem()
}

func (o AccessControlRulesOutput) ToAccessControlRulesOutput() AccessControlRulesOutput {
	return o
}

func (o AccessControlRulesOutput) ToAccessControlRulesOutputWithContext(ctx context.Context) AccessControlRulesOutput {
	return o
}

func (o AccessControlRulesOutput) ToAccessControlRulesPtrOutput() AccessControlRulesPtrOutput {
	return o.ToAccessControlRulesPtrOutputWithContext(context.Background())
}

func (o AccessControlRulesOutput) ToAccessControlRulesPtrOutputWithContext(ctx context.Context) AccessControlRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessControlRules) *AccessControlRules {
		return &v
	}).(AccessControlRulesPtrOutput)
}

// A list of identities.
func (o AccessControlRulesOutput) Identities() AccessControlRulesIdentityArrayOutput {
	return o.ApplyT(func(v AccessControlRules) []AccessControlRulesIdentity { return v.Identities }).(AccessControlRulesIdentityArrayOutput)
}

// A list of privileges.
func (o AccessControlRulesOutput) Privileges() AccessControlRulesPrivilegeArrayOutput {
	return o.ApplyT(func(v AccessControlRules) []AccessControlRulesPrivilege { return v.Privileges }).(AccessControlRulesPrivilegeArrayOutput)
}

// A list of role assignments.
func (o AccessControlRulesOutput) RoleAssignments() AccessControlRulesRoleAssignmentArrayOutput {
	return o.ApplyT(func(v AccessControlRules) []AccessControlRulesRoleAssignment { return v.RoleAssignments }).(AccessControlRulesRoleAssignmentArrayOutput)
}

// A list of roles.
func (o AccessControlRulesOutput) Roles() AccessControlRulesRoleArrayOutput {
	return o.ApplyT(func(v AccessControlRules) []AccessControlRulesRole { return v.Roles }).(AccessControlRulesRoleArrayOutput)
}

type AccessControlRulesPtrOutput struct{ *pulumi.OutputState }

func (AccessControlRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlRules)(nil)).Elem()
}

func (o AccessControlRulesPtrOutput) ToAccessControlRulesPtrOutput() AccessControlRulesPtrOutput {
	return o
}

func (o AccessControlRulesPtrOutput) ToAccessControlRulesPtrOutputWithContext(ctx context.Context) AccessControlRulesPtrOutput {
	return o
}

func (o AccessControlRulesPtrOutput) Elem() AccessControlRulesOutput {
	return o.ApplyT(func(v *AccessControlRules) AccessControlRules {
		if v != nil {
			return *v
		}
		var ret AccessControlRules
		return ret
	}).(AccessControlRulesOutput)
}

// A list of identities.
func (o AccessControlRulesPtrOutput) Identities() AccessControlRulesIdentityArrayOutput {
	return o.ApplyT(func(v *AccessControlRules) []AccessControlRulesIdentity {
		if v == nil {
			return nil
		}
		return v.Identities
	}).(AccessControlRulesIdentityArrayOutput)
}

// A list of privileges.
func (o AccessControlRulesPtrOutput) Privileges() AccessControlRulesPrivilegeArrayOutput {
	return o.ApplyT(func(v *AccessControlRules) []AccessControlRulesPrivilege {
		if v == nil {
			return nil
		}
		return v.Privileges
	}).(AccessControlRulesPrivilegeArrayOutput)
}

// A list of role assignments.
func (o AccessControlRulesPtrOutput) RoleAssignments() AccessControlRulesRoleAssignmentArrayOutput {
	return o.ApplyT(func(v *AccessControlRules) []AccessControlRulesRoleAssignment {
		if v == nil {
			return nil
		}
		return v.RoleAssignments
	}).(AccessControlRulesRoleAssignmentArrayOutput)
}

// A list of roles.
func (o AccessControlRulesPtrOutput) Roles() AccessControlRulesRoleArrayOutput {
	return o.ApplyT(func(v *AccessControlRules) []AccessControlRulesRole {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(AccessControlRulesRoleArrayOutput)
}

// The properties of an Access Control Rule Identity.
type AccessControlRulesIdentity struct {
	// The path to the executable.
	ExePath *string `pulumi:"exePath"`
	// The groupName corresponding to this identity.
	GroupName *string `pulumi:"groupName"`
	// The name of the identity.
	Name string `pulumi:"name"`
	// The process name of the executable.
	ProcessName *string `pulumi:"processName"`
	// The username corresponding to this identity.
	UserName *string `pulumi:"userName"`
}

// AccessControlRulesIdentityInput is an input type that accepts AccessControlRulesIdentityArgs and AccessControlRulesIdentityOutput values.
// You can construct a concrete instance of `AccessControlRulesIdentityInput` via:
//
//	AccessControlRulesIdentityArgs{...}
type AccessControlRulesIdentityInput interface {
	pulumi.Input

	ToAccessControlRulesIdentityOutput() AccessControlRulesIdentityOutput
	ToAccessControlRulesIdentityOutputWithContext(context.Context) AccessControlRulesIdentityOutput
}

// The properties of an Access Control Rule Identity.
type AccessControlRulesIdentityArgs struct {
	// The path to the executable.
	ExePath pulumi.StringPtrInput `pulumi:"exePath"`
	// The groupName corresponding to this identity.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// The name of the identity.
	Name pulumi.StringInput `pulumi:"name"`
	// The process name of the executable.
	ProcessName pulumi.StringPtrInput `pulumi:"processName"`
	// The username corresponding to this identity.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (AccessControlRulesIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesIdentity)(nil)).Elem()
}

func (i AccessControlRulesIdentityArgs) ToAccessControlRulesIdentityOutput() AccessControlRulesIdentityOutput {
	return i.ToAccessControlRulesIdentityOutputWithContext(context.Background())
}

func (i AccessControlRulesIdentityArgs) ToAccessControlRulesIdentityOutputWithContext(ctx context.Context) AccessControlRulesIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesIdentityOutput)
}

// AccessControlRulesIdentityArrayInput is an input type that accepts AccessControlRulesIdentityArray and AccessControlRulesIdentityArrayOutput values.
// You can construct a concrete instance of `AccessControlRulesIdentityArrayInput` via:
//
//	AccessControlRulesIdentityArray{ AccessControlRulesIdentityArgs{...} }
type AccessControlRulesIdentityArrayInput interface {
	pulumi.Input

	ToAccessControlRulesIdentityArrayOutput() AccessControlRulesIdentityArrayOutput
	ToAccessControlRulesIdentityArrayOutputWithContext(context.Context) AccessControlRulesIdentityArrayOutput
}

type AccessControlRulesIdentityArray []AccessControlRulesIdentityInput

func (AccessControlRulesIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesIdentity)(nil)).Elem()
}

func (i AccessControlRulesIdentityArray) ToAccessControlRulesIdentityArrayOutput() AccessControlRulesIdentityArrayOutput {
	return i.ToAccessControlRulesIdentityArrayOutputWithContext(context.Background())
}

func (i AccessControlRulesIdentityArray) ToAccessControlRulesIdentityArrayOutputWithContext(ctx context.Context) AccessControlRulesIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesIdentityArrayOutput)
}

// The properties of an Access Control Rule Identity.
type AccessControlRulesIdentityOutput struct{ *pulumi.OutputState }

func (AccessControlRulesIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesIdentity)(nil)).Elem()
}

func (o AccessControlRulesIdentityOutput) ToAccessControlRulesIdentityOutput() AccessControlRulesIdentityOutput {
	return o
}

func (o AccessControlRulesIdentityOutput) ToAccessControlRulesIdentityOutputWithContext(ctx context.Context) AccessControlRulesIdentityOutput {
	return o
}

// The path to the executable.
func (o AccessControlRulesIdentityOutput) ExePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentity) *string { return v.ExePath }).(pulumi.StringPtrOutput)
}

// The groupName corresponding to this identity.
func (o AccessControlRulesIdentityOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentity) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The name of the identity.
func (o AccessControlRulesIdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesIdentity) string { return v.Name }).(pulumi.StringOutput)
}

// The process name of the executable.
func (o AccessControlRulesIdentityOutput) ProcessName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentity) *string { return v.ProcessName }).(pulumi.StringPtrOutput)
}

// The username corresponding to this identity.
func (o AccessControlRulesIdentityOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentity) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type AccessControlRulesIdentityArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesIdentity)(nil)).Elem()
}

func (o AccessControlRulesIdentityArrayOutput) ToAccessControlRulesIdentityArrayOutput() AccessControlRulesIdentityArrayOutput {
	return o
}

func (o AccessControlRulesIdentityArrayOutput) ToAccessControlRulesIdentityArrayOutputWithContext(ctx context.Context) AccessControlRulesIdentityArrayOutput {
	return o
}

func (o AccessControlRulesIdentityArrayOutput) Index(i pulumi.IntInput) AccessControlRulesIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesIdentity {
		return vs[0].([]AccessControlRulesIdentity)[vs[1].(int)]
	}).(AccessControlRulesIdentityOutput)
}

// The properties of an Access Control Rule Identity.
type AccessControlRulesIdentityResponse struct {
	// The path to the executable.
	ExePath *string `pulumi:"exePath"`
	// The groupName corresponding to this identity.
	GroupName *string `pulumi:"groupName"`
	// The name of the identity.
	Name string `pulumi:"name"`
	// The process name of the executable.
	ProcessName *string `pulumi:"processName"`
	// The username corresponding to this identity.
	UserName *string `pulumi:"userName"`
}

// The properties of an Access Control Rule Identity.
type AccessControlRulesIdentityResponseOutput struct{ *pulumi.OutputState }

func (AccessControlRulesIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesIdentityResponse)(nil)).Elem()
}

func (o AccessControlRulesIdentityResponseOutput) ToAccessControlRulesIdentityResponseOutput() AccessControlRulesIdentityResponseOutput {
	return o
}

func (o AccessControlRulesIdentityResponseOutput) ToAccessControlRulesIdentityResponseOutputWithContext(ctx context.Context) AccessControlRulesIdentityResponseOutput {
	return o
}

// The path to the executable.
func (o AccessControlRulesIdentityResponseOutput) ExePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentityResponse) *string { return v.ExePath }).(pulumi.StringPtrOutput)
}

// The groupName corresponding to this identity.
func (o AccessControlRulesIdentityResponseOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentityResponse) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// The name of the identity.
func (o AccessControlRulesIdentityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesIdentityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The process name of the executable.
func (o AccessControlRulesIdentityResponseOutput) ProcessName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentityResponse) *string { return v.ProcessName }).(pulumi.StringPtrOutput)
}

// The username corresponding to this identity.
func (o AccessControlRulesIdentityResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessControlRulesIdentityResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type AccessControlRulesIdentityResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesIdentityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesIdentityResponse)(nil)).Elem()
}

func (o AccessControlRulesIdentityResponseArrayOutput) ToAccessControlRulesIdentityResponseArrayOutput() AccessControlRulesIdentityResponseArrayOutput {
	return o
}

func (o AccessControlRulesIdentityResponseArrayOutput) ToAccessControlRulesIdentityResponseArrayOutputWithContext(ctx context.Context) AccessControlRulesIdentityResponseArrayOutput {
	return o
}

func (o AccessControlRulesIdentityResponseArrayOutput) Index(i pulumi.IntInput) AccessControlRulesIdentityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesIdentityResponse {
		return vs[0].([]AccessControlRulesIdentityResponse)[vs[1].(int)]
	}).(AccessControlRulesIdentityResponseOutput)
}

// The properties of an Access Control Rule Privilege.
type AccessControlRulesPrivilege struct {
	// The name of the privilege.
	Name string `pulumi:"name"`
	// The HTTP path corresponding to the privilege.
	Path string `pulumi:"path"`
	// The query parameters to match in the path.
	QueryParameters map[string]string `pulumi:"queryParameters"`
}

// AccessControlRulesPrivilegeInput is an input type that accepts AccessControlRulesPrivilegeArgs and AccessControlRulesPrivilegeOutput values.
// You can construct a concrete instance of `AccessControlRulesPrivilegeInput` via:
//
//	AccessControlRulesPrivilegeArgs{...}
type AccessControlRulesPrivilegeInput interface {
	pulumi.Input

	ToAccessControlRulesPrivilegeOutput() AccessControlRulesPrivilegeOutput
	ToAccessControlRulesPrivilegeOutputWithContext(context.Context) AccessControlRulesPrivilegeOutput
}

// The properties of an Access Control Rule Privilege.
type AccessControlRulesPrivilegeArgs struct {
	// The name of the privilege.
	Name pulumi.StringInput `pulumi:"name"`
	// The HTTP path corresponding to the privilege.
	Path pulumi.StringInput `pulumi:"path"`
	// The query parameters to match in the path.
	QueryParameters pulumi.StringMapInput `pulumi:"queryParameters"`
}

func (AccessControlRulesPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesPrivilege)(nil)).Elem()
}

func (i AccessControlRulesPrivilegeArgs) ToAccessControlRulesPrivilegeOutput() AccessControlRulesPrivilegeOutput {
	return i.ToAccessControlRulesPrivilegeOutputWithContext(context.Background())
}

func (i AccessControlRulesPrivilegeArgs) ToAccessControlRulesPrivilegeOutputWithContext(ctx context.Context) AccessControlRulesPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesPrivilegeOutput)
}

// AccessControlRulesPrivilegeArrayInput is an input type that accepts AccessControlRulesPrivilegeArray and AccessControlRulesPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccessControlRulesPrivilegeArrayInput` via:
//
//	AccessControlRulesPrivilegeArray{ AccessControlRulesPrivilegeArgs{...} }
type AccessControlRulesPrivilegeArrayInput interface {
	pulumi.Input

	ToAccessControlRulesPrivilegeArrayOutput() AccessControlRulesPrivilegeArrayOutput
	ToAccessControlRulesPrivilegeArrayOutputWithContext(context.Context) AccessControlRulesPrivilegeArrayOutput
}

type AccessControlRulesPrivilegeArray []AccessControlRulesPrivilegeInput

func (AccessControlRulesPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesPrivilege)(nil)).Elem()
}

func (i AccessControlRulesPrivilegeArray) ToAccessControlRulesPrivilegeArrayOutput() AccessControlRulesPrivilegeArrayOutput {
	return i.ToAccessControlRulesPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccessControlRulesPrivilegeArray) ToAccessControlRulesPrivilegeArrayOutputWithContext(ctx context.Context) AccessControlRulesPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesPrivilegeArrayOutput)
}

// The properties of an Access Control Rule Privilege.
type AccessControlRulesPrivilegeOutput struct{ *pulumi.OutputState }

func (AccessControlRulesPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesPrivilege)(nil)).Elem()
}

func (o AccessControlRulesPrivilegeOutput) ToAccessControlRulesPrivilegeOutput() AccessControlRulesPrivilegeOutput {
	return o
}

func (o AccessControlRulesPrivilegeOutput) ToAccessControlRulesPrivilegeOutputWithContext(ctx context.Context) AccessControlRulesPrivilegeOutput {
	return o
}

// The name of the privilege.
func (o AccessControlRulesPrivilegeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesPrivilege) string { return v.Name }).(pulumi.StringOutput)
}

// The HTTP path corresponding to the privilege.
func (o AccessControlRulesPrivilegeOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesPrivilege) string { return v.Path }).(pulumi.StringOutput)
}

// The query parameters to match in the path.
func (o AccessControlRulesPrivilegeOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v AccessControlRulesPrivilege) map[string]string { return v.QueryParameters }).(pulumi.StringMapOutput)
}

type AccessControlRulesPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesPrivilege)(nil)).Elem()
}

func (o AccessControlRulesPrivilegeArrayOutput) ToAccessControlRulesPrivilegeArrayOutput() AccessControlRulesPrivilegeArrayOutput {
	return o
}

func (o AccessControlRulesPrivilegeArrayOutput) ToAccessControlRulesPrivilegeArrayOutputWithContext(ctx context.Context) AccessControlRulesPrivilegeArrayOutput {
	return o
}

func (o AccessControlRulesPrivilegeArrayOutput) Index(i pulumi.IntInput) AccessControlRulesPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesPrivilege {
		return vs[0].([]AccessControlRulesPrivilege)[vs[1].(int)]
	}).(AccessControlRulesPrivilegeOutput)
}

// The properties of an Access Control Rule Privilege.
type AccessControlRulesPrivilegeResponse struct {
	// The name of the privilege.
	Name string `pulumi:"name"`
	// The HTTP path corresponding to the privilege.
	Path string `pulumi:"path"`
	// The query parameters to match in the path.
	QueryParameters map[string]string `pulumi:"queryParameters"`
}

// The properties of an Access Control Rule Privilege.
type AccessControlRulesPrivilegeResponseOutput struct{ *pulumi.OutputState }

func (AccessControlRulesPrivilegeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesPrivilegeResponse)(nil)).Elem()
}

func (o AccessControlRulesPrivilegeResponseOutput) ToAccessControlRulesPrivilegeResponseOutput() AccessControlRulesPrivilegeResponseOutput {
	return o
}

func (o AccessControlRulesPrivilegeResponseOutput) ToAccessControlRulesPrivilegeResponseOutputWithContext(ctx context.Context) AccessControlRulesPrivilegeResponseOutput {
	return o
}

// The name of the privilege.
func (o AccessControlRulesPrivilegeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesPrivilegeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The HTTP path corresponding to the privilege.
func (o AccessControlRulesPrivilegeResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesPrivilegeResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The query parameters to match in the path.
func (o AccessControlRulesPrivilegeResponseOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v AccessControlRulesPrivilegeResponse) map[string]string { return v.QueryParameters }).(pulumi.StringMapOutput)
}

type AccessControlRulesPrivilegeResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesPrivilegeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesPrivilegeResponse)(nil)).Elem()
}

func (o AccessControlRulesPrivilegeResponseArrayOutput) ToAccessControlRulesPrivilegeResponseArrayOutput() AccessControlRulesPrivilegeResponseArrayOutput {
	return o
}

func (o AccessControlRulesPrivilegeResponseArrayOutput) ToAccessControlRulesPrivilegeResponseArrayOutputWithContext(ctx context.Context) AccessControlRulesPrivilegeResponseArrayOutput {
	return o
}

func (o AccessControlRulesPrivilegeResponseArrayOutput) Index(i pulumi.IntInput) AccessControlRulesPrivilegeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesPrivilegeResponse {
		return vs[0].([]AccessControlRulesPrivilegeResponse)[vs[1].(int)]
	}).(AccessControlRulesPrivilegeResponseOutput)
}

// This is the Access Control Rules specification for an inVMAccessControlProfile version.
type AccessControlRulesResponse struct {
	// A list of identities.
	Identities []AccessControlRulesIdentityResponse `pulumi:"identities"`
	// A list of privileges.
	Privileges []AccessControlRulesPrivilegeResponse `pulumi:"privileges"`
	// A list of role assignments.
	RoleAssignments []AccessControlRulesRoleAssignmentResponse `pulumi:"roleAssignments"`
	// A list of roles.
	Roles []AccessControlRulesRoleResponse `pulumi:"roles"`
}

// This is the Access Control Rules specification for an inVMAccessControlProfile version.
type AccessControlRulesResponseOutput struct{ *pulumi.OutputState }

func (AccessControlRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesResponse)(nil)).Elem()
}

func (o AccessControlRulesResponseOutput) ToAccessControlRulesResponseOutput() AccessControlRulesResponseOutput {
	return o
}

func (o AccessControlRulesResponseOutput) ToAccessControlRulesResponseOutputWithContext(ctx context.Context) AccessControlRulesResponseOutput {
	return o
}

// A list of identities.
func (o AccessControlRulesResponseOutput) Identities() AccessControlRulesIdentityResponseArrayOutput {
	return o.ApplyT(func(v AccessControlRulesResponse) []AccessControlRulesIdentityResponse { return v.Identities }).(AccessControlRulesIdentityResponseArrayOutput)
}

// A list of privileges.
func (o AccessControlRulesResponseOutput) Privileges() AccessControlRulesPrivilegeResponseArrayOutput {
	return o.ApplyT(func(v AccessControlRulesResponse) []AccessControlRulesPrivilegeResponse { return v.Privileges }).(AccessControlRulesPrivilegeResponseArrayOutput)
}

// A list of role assignments.
func (o AccessControlRulesResponseOutput) RoleAssignments() AccessControlRulesRoleAssignmentResponseArrayOutput {
	return o.ApplyT(func(v AccessControlRulesResponse) []AccessControlRulesRoleAssignmentResponse {
		return v.RoleAssignments
	}).(AccessControlRulesRoleAssignmentResponseArrayOutput)
}

// A list of roles.
func (o AccessControlRulesResponseOutput) Roles() AccessControlRulesRoleResponseArrayOutput {
	return o.ApplyT(func(v AccessControlRulesResponse) []AccessControlRulesRoleResponse { return v.Roles }).(AccessControlRulesRoleResponseArrayOutput)
}

type AccessControlRulesResponsePtrOutput struct{ *pulumi.OutputState }

func (AccessControlRulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessControlRulesResponse)(nil)).Elem()
}

func (o AccessControlRulesResponsePtrOutput) ToAccessControlRulesResponsePtrOutput() AccessControlRulesResponsePtrOutput {
	return o
}

func (o AccessControlRulesResponsePtrOutput) ToAccessControlRulesResponsePtrOutputWithContext(ctx context.Context) AccessControlRulesResponsePtrOutput {
	return o
}

func (o AccessControlRulesResponsePtrOutput) Elem() AccessControlRulesResponseOutput {
	return o.ApplyT(func(v *AccessControlRulesResponse) AccessControlRulesResponse {
		if v != nil {
			return *v
		}
		var ret AccessControlRulesResponse
		return ret
	}).(AccessControlRulesResponseOutput)
}

// A list of identities.
func (o AccessControlRulesResponsePtrOutput) Identities() AccessControlRulesIdentityResponseArrayOutput {
	return o.ApplyT(func(v *AccessControlRulesResponse) []AccessControlRulesIdentityResponse {
		if v == nil {
			return nil
		}
		return v.Identities
	}).(AccessControlRulesIdentityResponseArrayOutput)
}

// A list of privileges.
func (o AccessControlRulesResponsePtrOutput) Privileges() AccessControlRulesPrivilegeResponseArrayOutput {
	return o.ApplyT(func(v *AccessControlRulesResponse) []AccessControlRulesPrivilegeResponse {
		if v == nil {
			return nil
		}
		return v.Privileges
	}).(AccessControlRulesPrivilegeResponseArrayOutput)
}

// A list of role assignments.
func (o AccessControlRulesResponsePtrOutput) RoleAssignments() AccessControlRulesRoleAssignmentResponseArrayOutput {
	return o.ApplyT(func(v *AccessControlRulesResponse) []AccessControlRulesRoleAssignmentResponse {
		if v == nil {
			return nil
		}
		return v.RoleAssignments
	}).(AccessControlRulesRoleAssignmentResponseArrayOutput)
}

// A list of roles.
func (o AccessControlRulesResponsePtrOutput) Roles() AccessControlRulesRoleResponseArrayOutput {
	return o.ApplyT(func(v *AccessControlRulesResponse) []AccessControlRulesRoleResponse {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(AccessControlRulesRoleResponseArrayOutput)
}

// The properties of an Access Control Rule Role.
type AccessControlRulesRole struct {
	// The name of the role.
	Name string `pulumi:"name"`
	// A list of privileges needed by this role.
	Privileges []string `pulumi:"privileges"`
}

// AccessControlRulesRoleInput is an input type that accepts AccessControlRulesRoleArgs and AccessControlRulesRoleOutput values.
// You can construct a concrete instance of `AccessControlRulesRoleInput` via:
//
//	AccessControlRulesRoleArgs{...}
type AccessControlRulesRoleInput interface {
	pulumi.Input

	ToAccessControlRulesRoleOutput() AccessControlRulesRoleOutput
	ToAccessControlRulesRoleOutputWithContext(context.Context) AccessControlRulesRoleOutput
}

// The properties of an Access Control Rule Role.
type AccessControlRulesRoleArgs struct {
	// The name of the role.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of privileges needed by this role.
	Privileges pulumi.StringArrayInput `pulumi:"privileges"`
}

func (AccessControlRulesRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesRole)(nil)).Elem()
}

func (i AccessControlRulesRoleArgs) ToAccessControlRulesRoleOutput() AccessControlRulesRoleOutput {
	return i.ToAccessControlRulesRoleOutputWithContext(context.Background())
}

func (i AccessControlRulesRoleArgs) ToAccessControlRulesRoleOutputWithContext(ctx context.Context) AccessControlRulesRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesRoleOutput)
}

// AccessControlRulesRoleArrayInput is an input type that accepts AccessControlRulesRoleArray and AccessControlRulesRoleArrayOutput values.
// You can construct a concrete instance of `AccessControlRulesRoleArrayInput` via:
//
//	AccessControlRulesRoleArray{ AccessControlRulesRoleArgs{...} }
type AccessControlRulesRoleArrayInput interface {
	pulumi.Input

	ToAccessControlRulesRoleArrayOutput() AccessControlRulesRoleArrayOutput
	ToAccessControlRulesRoleArrayOutputWithContext(context.Context) AccessControlRulesRoleArrayOutput
}

type AccessControlRulesRoleArray []AccessControlRulesRoleInput

func (AccessControlRulesRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesRole)(nil)).Elem()
}

func (i AccessControlRulesRoleArray) ToAccessControlRulesRoleArrayOutput() AccessControlRulesRoleArrayOutput {
	return i.ToAccessControlRulesRoleArrayOutputWithContext(context.Background())
}

func (i AccessControlRulesRoleArray) ToAccessControlRulesRoleArrayOutputWithContext(ctx context.Context) AccessControlRulesRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesRoleArrayOutput)
}

// The properties of an Access Control Rule Role.
type AccessControlRulesRoleOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesRole)(nil)).Elem()
}

func (o AccessControlRulesRoleOutput) ToAccessControlRulesRoleOutput() AccessControlRulesRoleOutput {
	return o
}

func (o AccessControlRulesRoleOutput) ToAccessControlRulesRoleOutputWithContext(ctx context.Context) AccessControlRulesRoleOutput {
	return o
}

// The name of the role.
func (o AccessControlRulesRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesRole) string { return v.Name }).(pulumi.StringOutput)
}

// A list of privileges needed by this role.
func (o AccessControlRulesRoleOutput) Privileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlRulesRole) []string { return v.Privileges }).(pulumi.StringArrayOutput)
}

type AccessControlRulesRoleArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesRole)(nil)).Elem()
}

func (o AccessControlRulesRoleArrayOutput) ToAccessControlRulesRoleArrayOutput() AccessControlRulesRoleArrayOutput {
	return o
}

func (o AccessControlRulesRoleArrayOutput) ToAccessControlRulesRoleArrayOutputWithContext(ctx context.Context) AccessControlRulesRoleArrayOutput {
	return o
}

func (o AccessControlRulesRoleArrayOutput) Index(i pulumi.IntInput) AccessControlRulesRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesRole {
		return vs[0].([]AccessControlRulesRole)[vs[1].(int)]
	}).(AccessControlRulesRoleOutput)
}

// The properties of an Access Control Rule RoleAssignment.
type AccessControlRulesRoleAssignment struct {
	// A list of identities that can access the privileges defined by the role.
	Identities []string `pulumi:"identities"`
	// The name of the role.
	Role string `pulumi:"role"`
}

// AccessControlRulesRoleAssignmentInput is an input type that accepts AccessControlRulesRoleAssignmentArgs and AccessControlRulesRoleAssignmentOutput values.
// You can construct a concrete instance of `AccessControlRulesRoleAssignmentInput` via:
//
//	AccessControlRulesRoleAssignmentArgs{...}
type AccessControlRulesRoleAssignmentInput interface {
	pulumi.Input

	ToAccessControlRulesRoleAssignmentOutput() AccessControlRulesRoleAssignmentOutput
	ToAccessControlRulesRoleAssignmentOutputWithContext(context.Context) AccessControlRulesRoleAssignmentOutput
}

// The properties of an Access Control Rule RoleAssignment.
type AccessControlRulesRoleAssignmentArgs struct {
	// A list of identities that can access the privileges defined by the role.
	Identities pulumi.StringArrayInput `pulumi:"identities"`
	// The name of the role.
	Role pulumi.StringInput `pulumi:"role"`
}

func (AccessControlRulesRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesRoleAssignment)(nil)).Elem()
}

func (i AccessControlRulesRoleAssignmentArgs) ToAccessControlRulesRoleAssignmentOutput() AccessControlRulesRoleAssignmentOutput {
	return i.ToAccessControlRulesRoleAssignmentOutputWithContext(context.Background())
}

func (i AccessControlRulesRoleAssignmentArgs) ToAccessControlRulesRoleAssignmentOutputWithContext(ctx context.Context) AccessControlRulesRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesRoleAssignmentOutput)
}

// AccessControlRulesRoleAssignmentArrayInput is an input type that accepts AccessControlRulesRoleAssignmentArray and AccessControlRulesRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `AccessControlRulesRoleAssignmentArrayInput` via:
//
//	AccessControlRulesRoleAssignmentArray{ AccessControlRulesRoleAssignmentArgs{...} }
type AccessControlRulesRoleAssignmentArrayInput interface {
	pulumi.Input

	ToAccessControlRulesRoleAssignmentArrayOutput() AccessControlRulesRoleAssignmentArrayOutput
	ToAccessControlRulesRoleAssignmentArrayOutputWithContext(context.Context) AccessControlRulesRoleAssignmentArrayOutput
}

type AccessControlRulesRoleAssignmentArray []AccessControlRulesRoleAssignmentInput

func (AccessControlRulesRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesRoleAssignment)(nil)).Elem()
}

func (i AccessControlRulesRoleAssignmentArray) ToAccessControlRulesRoleAssignmentArrayOutput() AccessControlRulesRoleAssignmentArrayOutput {
	return i.ToAccessControlRulesRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i AccessControlRulesRoleAssignmentArray) ToAccessControlRulesRoleAssignmentArrayOutputWithContext(ctx context.Context) AccessControlRulesRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessControlRulesRoleAssignmentArrayOutput)
}

// The properties of an Access Control Rule RoleAssignment.
type AccessControlRulesRoleAssignmentOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesRoleAssignment)(nil)).Elem()
}

func (o AccessControlRulesRoleAssignmentOutput) ToAccessControlRulesRoleAssignmentOutput() AccessControlRulesRoleAssignmentOutput {
	return o
}

func (o AccessControlRulesRoleAssignmentOutput) ToAccessControlRulesRoleAssignmentOutputWithContext(ctx context.Context) AccessControlRulesRoleAssignmentOutput {
	return o
}

// A list of identities that can access the privileges defined by the role.
func (o AccessControlRulesRoleAssignmentOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlRulesRoleAssignment) []string { return v.Identities }).(pulumi.StringArrayOutput)
}

// The name of the role.
func (o AccessControlRulesRoleAssignmentOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesRoleAssignment) string { return v.Role }).(pulumi.StringOutput)
}

type AccessControlRulesRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesRoleAssignment)(nil)).Elem()
}

func (o AccessControlRulesRoleAssignmentArrayOutput) ToAccessControlRulesRoleAssignmentArrayOutput() AccessControlRulesRoleAssignmentArrayOutput {
	return o
}

func (o AccessControlRulesRoleAssignmentArrayOutput) ToAccessControlRulesRoleAssignmentArrayOutputWithContext(ctx context.Context) AccessControlRulesRoleAssignmentArrayOutput {
	return o
}

func (o AccessControlRulesRoleAssignmentArrayOutput) Index(i pulumi.IntInput) AccessControlRulesRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesRoleAssignment {
		return vs[0].([]AccessControlRulesRoleAssignment)[vs[1].(int)]
	}).(AccessControlRulesRoleAssignmentOutput)
}

// The properties of an Access Control Rule RoleAssignment.
type AccessControlRulesRoleAssignmentResponse struct {
	// A list of identities that can access the privileges defined by the role.
	Identities []string `pulumi:"identities"`
	// The name of the role.
	Role string `pulumi:"role"`
}

// The properties of an Access Control Rule RoleAssignment.
type AccessControlRulesRoleAssignmentResponseOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleAssignmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesRoleAssignmentResponse)(nil)).Elem()
}

func (o AccessControlRulesRoleAssignmentResponseOutput) ToAccessControlRulesRoleAssignmentResponseOutput() AccessControlRulesRoleAssignmentResponseOutput {
	return o
}

func (o AccessControlRulesRoleAssignmentResponseOutput) ToAccessControlRulesRoleAssignmentResponseOutputWithContext(ctx context.Context) AccessControlRulesRoleAssignmentResponseOutput {
	return o
}

// A list of identities that can access the privileges defined by the role.
func (o AccessControlRulesRoleAssignmentResponseOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlRulesRoleAssignmentResponse) []string { return v.Identities }).(pulumi.StringArrayOutput)
}

// The name of the role.
func (o AccessControlRulesRoleAssignmentResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesRoleAssignmentResponse) string { return v.Role }).(pulumi.StringOutput)
}

type AccessControlRulesRoleAssignmentResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleAssignmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesRoleAssignmentResponse)(nil)).Elem()
}

func (o AccessControlRulesRoleAssignmentResponseArrayOutput) ToAccessControlRulesRoleAssignmentResponseArrayOutput() AccessControlRulesRoleAssignmentResponseArrayOutput {
	return o
}

func (o AccessControlRulesRoleAssignmentResponseArrayOutput) ToAccessControlRulesRoleAssignmentResponseArrayOutputWithContext(ctx context.Context) AccessControlRulesRoleAssignmentResponseArrayOutput {
	return o
}

func (o AccessControlRulesRoleAssignmentResponseArrayOutput) Index(i pulumi.IntInput) AccessControlRulesRoleAssignmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesRoleAssignmentResponse {
		return vs[0].([]AccessControlRulesRoleAssignmentResponse)[vs[1].(int)]
	}).(AccessControlRulesRoleAssignmentResponseOutput)
}

// The properties of an Access Control Rule Role.
type AccessControlRulesRoleResponse struct {
	// The name of the role.
	Name string `pulumi:"name"`
	// A list of privileges needed by this role.
	Privileges []string `pulumi:"privileges"`
}

// The properties of an Access Control Rule Role.
type AccessControlRulesRoleResponseOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessControlRulesRoleResponse)(nil)).Elem()
}

func (o AccessControlRulesRoleResponseOutput) ToAccessControlRulesRoleResponseOutput() AccessControlRulesRoleResponseOutput {
	return o
}

func (o AccessControlRulesRoleResponseOutput) ToAccessControlRulesRoleResponseOutputWithContext(ctx context.Context) AccessControlRulesRoleResponseOutput {
	return o
}

// The name of the role.
func (o AccessControlRulesRoleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessControlRulesRoleResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A list of privileges needed by this role.
func (o AccessControlRulesRoleResponseOutput) Privileges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessControlRulesRoleResponse) []string { return v.Privileges }).(pulumi.StringArrayOutput)
}

type AccessControlRulesRoleResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessControlRulesRoleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessControlRulesRoleResponse)(nil)).Elem()
}

func (o AccessControlRulesRoleResponseArrayOutput) ToAccessControlRulesRoleResponseArrayOutput() AccessControlRulesRoleResponseArrayOutput {
	return o
}

func (o AccessControlRulesRoleResponseArrayOutput) ToAccessControlRulesRoleResponseArrayOutputWithContext(ctx context.Context) AccessControlRulesRoleResponseArrayOutput {
	return o
}

func (o AccessControlRulesRoleResponseArrayOutput) Index(i pulumi.IntInput) AccessControlRulesRoleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessControlRulesRoleResponse {
		return vs[0].([]AccessControlRulesRoleResponse)[vs[1].(int)]
	}).(AccessControlRulesRoleResponseOutput)
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilities struct {
	// The flag that enables or disables hibernation capability on the VM.
	HibernationEnabled *bool `pulumi:"hibernationEnabled"`
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `pulumi:"ultraSSDEnabled"`
}

// AdditionalCapabilitiesInput is an input type that accepts AdditionalCapabilitiesArgs and AdditionalCapabilitiesOutput values.
// You can construct a concrete instance of `AdditionalCapabilitiesInput` via:
//
//	AdditionalCapabilitiesArgs{...}
type AdditionalCapabilitiesInput interface {
	pulumi.Input

	ToAdditionalCapabilitiesOutput() AdditionalCapabilitiesOutput
	ToAdditionalCapabilitiesOutputWithContext(context.Context) AdditionalCapabilitiesOutput
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesArgs struct {
	// The flag that enables or disables hibernation capability on the VM.
	HibernationEnabled pulumi.BoolPtrInput `pulumi:"hibernationEnabled"`
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled pulumi.BoolPtrInput `pulumi:"ultraSSDEnabled"`
}

func (AdditionalCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalCapabilities)(nil)).Elem()
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesOutput() AdditionalCapabilitiesOutput {
	return i.ToAdditionalCapabilitiesOutputWithContext(context.Background())
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesOutputWithContext(ctx context.Context) AdditionalCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCapabilitiesOutput)
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput {
	return i.ToAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (i AdditionalCapabilitiesArgs) ToAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCapabilitiesOutput).ToAdditionalCapabilitiesPtrOutputWithContext(ctx)
}

// AdditionalCapabilitiesPtrInput is an input type that accepts AdditionalCapabilitiesArgs, AdditionalCapabilitiesPtr and AdditionalCapabilitiesPtrOutput values.
// You can construct a concrete instance of `AdditionalCapabilitiesPtrInput` via:
//
//	        AdditionalCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type AdditionalCapabilitiesPtrInput interface {
	pulumi.Input

	ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput
	ToAdditionalCapabilitiesPtrOutputWithContext(context.Context) AdditionalCapabilitiesPtrOutput
}

type additionalCapabilitiesPtrType AdditionalCapabilitiesArgs

func AdditionalCapabilitiesPtr(v *AdditionalCapabilitiesArgs) AdditionalCapabilitiesPtrInput {
	return (*additionalCapabilitiesPtrType)(v)
}

func (*additionalCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCapabilities)(nil)).Elem()
}

func (i *additionalCapabilitiesPtrType) ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput {
	return i.ToAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *additionalCapabilitiesPtrType) ToAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalCapabilitiesPtrOutput)
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesOutput struct{ *pulumi.OutputState }

func (AdditionalCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalCapabilities)(nil)).Elem()
}

func (o AdditionalCapabilitiesOutput) ToAdditionalCapabilitiesOutput() AdditionalCapabilitiesOutput {
	return o
}

func (o AdditionalCapabilitiesOutput) ToAdditionalCapabilitiesOutputWithContext(ctx context.Context) AdditionalCapabilitiesOutput {
	return o
}

func (o AdditionalCapabilitiesOutput) ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput {
	return o.ToAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (o AdditionalCapabilitiesOutput) ToAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdditionalCapabilities) *AdditionalCapabilities {
		return &v
	}).(AdditionalCapabilitiesPtrOutput)
}

// The flag that enables or disables hibernation capability on the VM.
func (o AdditionalCapabilitiesOutput) HibernationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdditionalCapabilities) *bool { return v.HibernationEnabled }).(pulumi.BoolPtrOutput)
}

// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
func (o AdditionalCapabilitiesOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdditionalCapabilities) *bool { return v.UltraSSDEnabled }).(pulumi.BoolPtrOutput)
}

type AdditionalCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (AdditionalCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCapabilities)(nil)).Elem()
}

func (o AdditionalCapabilitiesPtrOutput) ToAdditionalCapabilitiesPtrOutput() AdditionalCapabilitiesPtrOutput {
	return o
}

func (o AdditionalCapabilitiesPtrOutput) ToAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesPtrOutput {
	return o
}

func (o AdditionalCapabilitiesPtrOutput) Elem() AdditionalCapabilitiesOutput {
	return o.ApplyT(func(v *AdditionalCapabilities) AdditionalCapabilities {
		if v != nil {
			return *v
		}
		var ret AdditionalCapabilities
		return ret
	}).(AdditionalCapabilitiesOutput)
}

// The flag that enables or disables hibernation capability on the VM.
func (o AdditionalCapabilitiesPtrOutput) HibernationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdditionalCapabilities) *bool {
		if v == nil {
			return nil
		}
		return v.HibernationEnabled
	}).(pulumi.BoolPtrOutput)
}

// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
func (o AdditionalCapabilitiesPtrOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdditionalCapabilities) *bool {
		if v == nil {
			return nil
		}
		return v.UltraSSDEnabled
	}).(pulumi.BoolPtrOutput)
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesResponse struct {
	// The flag that enables or disables hibernation capability on the VM.
	HibernationEnabled *bool `pulumi:"hibernationEnabled"`
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `pulumi:"ultraSSDEnabled"`
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilitiesResponseOutput struct{ *pulumi.OutputState }

func (AdditionalCapabilitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalCapabilitiesResponse)(nil)).Elem()
}

func (o AdditionalCapabilitiesResponseOutput) ToAdditionalCapabilitiesResponseOutput() AdditionalCapabilitiesResponseOutput {
	return o
}

func (o AdditionalCapabilitiesResponseOutput) ToAdditionalCapabilitiesResponseOutputWithContext(ctx context.Context) AdditionalCapabilitiesResponseOutput {
	return o
}

// The flag that enables or disables hibernation capability on the VM.
func (o AdditionalCapabilitiesResponseOutput) HibernationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdditionalCapabilitiesResponse) *bool { return v.HibernationEnabled }).(pulumi.BoolPtrOutput)
}

// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
func (o AdditionalCapabilitiesResponseOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdditionalCapabilitiesResponse) *bool { return v.UltraSSDEnabled }).(pulumi.BoolPtrOutput)
}

type AdditionalCapabilitiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AdditionalCapabilitiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdditionalCapabilitiesResponse)(nil)).Elem()
}

func (o AdditionalCapabilitiesResponsePtrOutput) ToAdditionalCapabilitiesResponsePtrOutput() AdditionalCapabilitiesResponsePtrOutput {
	return o
}

func (o AdditionalCapabilitiesResponsePtrOutput) ToAdditionalCapabilitiesResponsePtrOutputWithContext(ctx context.Context) AdditionalCapabilitiesResponsePtrOutput {
	return o
}

func (o AdditionalCapabilitiesResponsePtrOutput) Elem() AdditionalCapabilitiesResponseOutput {
	return o.ApplyT(func(v *AdditionalCapabilitiesResponse) AdditionalCapabilitiesResponse {
		if v != nil {
			return *v
		}
		var ret AdditionalCapabilitiesResponse
		return ret
	}).(AdditionalCapabilitiesResponseOutput)
}

// The flag that enables or disables hibernation capability on the VM.
func (o AdditionalCapabilitiesResponsePtrOutput) HibernationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdditionalCapabilitiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.HibernationEnabled
	}).(pulumi.BoolPtrOutput)
}

// The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled.
func (o AdditionalCapabilitiesResponsePtrOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdditionalCapabilitiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UltraSSDEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes the additional replica set information.
type AdditionalReplicaSet struct {
	// The number of direct drive replicas of the Image Version to be created.This Property is updatable
	RegionalReplicaCount *int `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to create the direct drive replicas
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// AdditionalReplicaSetInput is an input type that accepts AdditionalReplicaSetArgs and AdditionalReplicaSetOutput values.
// You can construct a concrete instance of `AdditionalReplicaSetInput` via:
//
//	AdditionalReplicaSetArgs{...}
type AdditionalReplicaSetInput interface {
	pulumi.Input

	ToAdditionalReplicaSetOutput() AdditionalReplicaSetOutput
	ToAdditionalReplicaSetOutputWithContext(context.Context) AdditionalReplicaSetOutput
}

// Describes the additional replica set information.
type AdditionalReplicaSetArgs struct {
	// The number of direct drive replicas of the Image Version to be created.This Property is updatable
	RegionalReplicaCount pulumi.IntPtrInput `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to create the direct drive replicas
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (AdditionalReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalReplicaSet)(nil)).Elem()
}

func (i AdditionalReplicaSetArgs) ToAdditionalReplicaSetOutput() AdditionalReplicaSetOutput {
	return i.ToAdditionalReplicaSetOutputWithContext(context.Background())
}

func (i AdditionalReplicaSetArgs) ToAdditionalReplicaSetOutputWithContext(ctx context.Context) AdditionalReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalReplicaSetOutput)
}

// AdditionalReplicaSetArrayInput is an input type that accepts AdditionalReplicaSetArray and AdditionalReplicaSetArrayOutput values.
// You can construct a concrete instance of `AdditionalReplicaSetArrayInput` via:
//
//	AdditionalReplicaSetArray{ AdditionalReplicaSetArgs{...} }
type AdditionalReplicaSetArrayInput interface {
	pulumi.Input

	ToAdditionalReplicaSetArrayOutput() AdditionalReplicaSetArrayOutput
	ToAdditionalReplicaSetArrayOutputWithContext(context.Context) AdditionalReplicaSetArrayOutput
}

type AdditionalReplicaSetArray []AdditionalReplicaSetInput

func (AdditionalReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalReplicaSet)(nil)).Elem()
}

func (i AdditionalReplicaSetArray) ToAdditionalReplicaSetArrayOutput() AdditionalReplicaSetArrayOutput {
	return i.ToAdditionalReplicaSetArrayOutputWithContext(context.Background())
}

func (i AdditionalReplicaSetArray) ToAdditionalReplicaSetArrayOutputWithContext(ctx context.Context) AdditionalReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalReplicaSetArrayOutput)
}

// Describes the additional replica set information.
type AdditionalReplicaSetOutput struct{ *pulumi.OutputState }

func (AdditionalReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalReplicaSet)(nil)).Elem()
}

func (o AdditionalReplicaSetOutput) ToAdditionalReplicaSetOutput() AdditionalReplicaSetOutput {
	return o
}

func (o AdditionalReplicaSetOutput) ToAdditionalReplicaSetOutputWithContext(ctx context.Context) AdditionalReplicaSetOutput {
	return o
}

// The number of direct drive replicas of the Image Version to be created.This Property is updatable
func (o AdditionalReplicaSetOutput) RegionalReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AdditionalReplicaSet) *int { return v.RegionalReplicaCount }).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to create the direct drive replicas
func (o AdditionalReplicaSetOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalReplicaSet) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type AdditionalReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (AdditionalReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalReplicaSet)(nil)).Elem()
}

func (o AdditionalReplicaSetArrayOutput) ToAdditionalReplicaSetArrayOutput() AdditionalReplicaSetArrayOutput {
	return o
}

func (o AdditionalReplicaSetArrayOutput) ToAdditionalReplicaSetArrayOutputWithContext(ctx context.Context) AdditionalReplicaSetArrayOutput {
	return o
}

func (o AdditionalReplicaSetArrayOutput) Index(i pulumi.IntInput) AdditionalReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalReplicaSet {
		return vs[0].([]AdditionalReplicaSet)[vs[1].(int)]
	}).(AdditionalReplicaSetOutput)
}

// Describes the additional replica set information.
type AdditionalReplicaSetResponse struct {
	// The number of direct drive replicas of the Image Version to be created.This Property is updatable
	RegionalReplicaCount *int `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to create the direct drive replicas
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes the additional replica set information.
type AdditionalReplicaSetResponseOutput struct{ *pulumi.OutputState }

func (AdditionalReplicaSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalReplicaSetResponse)(nil)).Elem()
}

func (o AdditionalReplicaSetResponseOutput) ToAdditionalReplicaSetResponseOutput() AdditionalReplicaSetResponseOutput {
	return o
}

func (o AdditionalReplicaSetResponseOutput) ToAdditionalReplicaSetResponseOutputWithContext(ctx context.Context) AdditionalReplicaSetResponseOutput {
	return o
}

// The number of direct drive replicas of the Image Version to be created.This Property is updatable
func (o AdditionalReplicaSetResponseOutput) RegionalReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AdditionalReplicaSetResponse) *int { return v.RegionalReplicaCount }).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to create the direct drive replicas
func (o AdditionalReplicaSetResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalReplicaSetResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type AdditionalReplicaSetResponseArrayOutput struct{ *pulumi.OutputState }

func (AdditionalReplicaSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalReplicaSetResponse)(nil)).Elem()
}

func (o AdditionalReplicaSetResponseArrayOutput) ToAdditionalReplicaSetResponseArrayOutput() AdditionalReplicaSetResponseArrayOutput {
	return o
}

func (o AdditionalReplicaSetResponseArrayOutput) ToAdditionalReplicaSetResponseArrayOutputWithContext(ctx context.Context) AdditionalReplicaSetResponseArrayOutput {
	return o
}

func (o AdditionalReplicaSetResponseArrayOutput) Index(i pulumi.IntInput) AdditionalReplicaSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalReplicaSetResponse {
		return vs[0].([]AdditionalReplicaSetResponse)[vs[1].(int)]
	}).(AdditionalReplicaSetResponseOutput)
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContent struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName *ComponentName `pulumi:"componentName"`
	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
	Content *string `pulumi:"content"`
	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName *PassName `pulumi:"passName"`
	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *SettingNames `pulumi:"settingName"`
}

// AdditionalUnattendContentInput is an input type that accepts AdditionalUnattendContentArgs and AdditionalUnattendContentOutput values.
// You can construct a concrete instance of `AdditionalUnattendContentInput` via:
//
//	AdditionalUnattendContentArgs{...}
type AdditionalUnattendContentInput interface {
	pulumi.Input

	ToAdditionalUnattendContentOutput() AdditionalUnattendContentOutput
	ToAdditionalUnattendContentOutputWithContext(context.Context) AdditionalUnattendContentOutput
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentArgs struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName ComponentNamePtrInput `pulumi:"componentName"`
	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName PassNamePtrInput `pulumi:"passName"`
	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName SettingNamesPtrInput `pulumi:"settingName"`
}

func (AdditionalUnattendContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalUnattendContent)(nil)).Elem()
}

func (i AdditionalUnattendContentArgs) ToAdditionalUnattendContentOutput() AdditionalUnattendContentOutput {
	return i.ToAdditionalUnattendContentOutputWithContext(context.Background())
}

func (i AdditionalUnattendContentArgs) ToAdditionalUnattendContentOutputWithContext(ctx context.Context) AdditionalUnattendContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalUnattendContentOutput)
}

// AdditionalUnattendContentArrayInput is an input type that accepts AdditionalUnattendContentArray and AdditionalUnattendContentArrayOutput values.
// You can construct a concrete instance of `AdditionalUnattendContentArrayInput` via:
//
//	AdditionalUnattendContentArray{ AdditionalUnattendContentArgs{...} }
type AdditionalUnattendContentArrayInput interface {
	pulumi.Input

	ToAdditionalUnattendContentArrayOutput() AdditionalUnattendContentArrayOutput
	ToAdditionalUnattendContentArrayOutputWithContext(context.Context) AdditionalUnattendContentArrayOutput
}

type AdditionalUnattendContentArray []AdditionalUnattendContentInput

func (AdditionalUnattendContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalUnattendContent)(nil)).Elem()
}

func (i AdditionalUnattendContentArray) ToAdditionalUnattendContentArrayOutput() AdditionalUnattendContentArrayOutput {
	return i.ToAdditionalUnattendContentArrayOutputWithContext(context.Background())
}

func (i AdditionalUnattendContentArray) ToAdditionalUnattendContentArrayOutputWithContext(ctx context.Context) AdditionalUnattendContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalUnattendContentArrayOutput)
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentOutput struct{ *pulumi.OutputState }

func (AdditionalUnattendContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalUnattendContent)(nil)).Elem()
}

func (o AdditionalUnattendContentOutput) ToAdditionalUnattendContentOutput() AdditionalUnattendContentOutput {
	return o
}

func (o AdditionalUnattendContentOutput) ToAdditionalUnattendContentOutputWithContext(ctx context.Context) AdditionalUnattendContentOutput {
	return o
}

// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
func (o AdditionalUnattendContentOutput) ComponentName() ComponentNamePtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContent) *ComponentName { return v.ComponentName }).(ComponentNamePtrOutput)
}

// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
func (o AdditionalUnattendContentOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContent) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The pass name. Currently, the only allowable value is OobeSystem.
func (o AdditionalUnattendContentOutput) PassName() PassNamePtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContent) *PassName { return v.PassName }).(PassNamePtrOutput)
}

// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
func (o AdditionalUnattendContentOutput) SettingName() SettingNamesPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContent) *SettingNames { return v.SettingName }).(SettingNamesPtrOutput)
}

type AdditionalUnattendContentArrayOutput struct{ *pulumi.OutputState }

func (AdditionalUnattendContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalUnattendContent)(nil)).Elem()
}

func (o AdditionalUnattendContentArrayOutput) ToAdditionalUnattendContentArrayOutput() AdditionalUnattendContentArrayOutput {
	return o
}

func (o AdditionalUnattendContentArrayOutput) ToAdditionalUnattendContentArrayOutputWithContext(ctx context.Context) AdditionalUnattendContentArrayOutput {
	return o
}

func (o AdditionalUnattendContentArrayOutput) Index(i pulumi.IntInput) AdditionalUnattendContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalUnattendContent {
		return vs[0].([]AdditionalUnattendContent)[vs[1].(int)]
	}).(AdditionalUnattendContentOutput)
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentResponse struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName *string `pulumi:"componentName"`
	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
	Content *string `pulumi:"content"`
	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName *string `pulumi:"passName"`
	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *string `pulumi:"settingName"`
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied.
type AdditionalUnattendContentResponseOutput struct{ *pulumi.OutputState }

func (AdditionalUnattendContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalUnattendContentResponse)(nil)).Elem()
}

func (o AdditionalUnattendContentResponseOutput) ToAdditionalUnattendContentResponseOutput() AdditionalUnattendContentResponseOutput {
	return o
}

func (o AdditionalUnattendContentResponseOutput) ToAdditionalUnattendContentResponseOutputWithContext(ctx context.Context) AdditionalUnattendContentResponseOutput {
	return o
}

// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
func (o AdditionalUnattendContentResponseOutput) ComponentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.ComponentName }).(pulumi.StringPtrOutput)
}

// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted.
func (o AdditionalUnattendContentResponseOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The pass name. Currently, the only allowable value is OobeSystem.
func (o AdditionalUnattendContentResponseOutput) PassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.PassName }).(pulumi.StringPtrOutput)
}

// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
func (o AdditionalUnattendContentResponseOutput) SettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdditionalUnattendContentResponse) *string { return v.SettingName }).(pulumi.StringPtrOutput)
}

type AdditionalUnattendContentResponseArrayOutput struct{ *pulumi.OutputState }

func (AdditionalUnattendContentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalUnattendContentResponse)(nil)).Elem()
}

func (o AdditionalUnattendContentResponseArrayOutput) ToAdditionalUnattendContentResponseArrayOutput() AdditionalUnattendContentResponseArrayOutput {
	return o
}

func (o AdditionalUnattendContentResponseArrayOutput) ToAdditionalUnattendContentResponseArrayOutputWithContext(ctx context.Context) AdditionalUnattendContentResponseArrayOutput {
	return o
}

func (o AdditionalUnattendContentResponseArrayOutput) Index(i pulumi.IntInput) AdditionalUnattendContentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalUnattendContentResponse {
		return vs[0].([]AdditionalUnattendContentResponse)[vs[1].(int)]
	}).(AdditionalUnattendContentResponseOutput)
}

// The API entity reference.
type ApiEntityReference struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
	Id *string `pulumi:"id"`
}

// ApiEntityReferenceInput is an input type that accepts ApiEntityReferenceArgs and ApiEntityReferenceOutput values.
// You can construct a concrete instance of `ApiEntityReferenceInput` via:
//
//	ApiEntityReferenceArgs{...}
type ApiEntityReferenceInput interface {
	pulumi.Input

	ToApiEntityReferenceOutput() ApiEntityReferenceOutput
	ToApiEntityReferenceOutputWithContext(context.Context) ApiEntityReferenceOutput
}

// The API entity reference.
type ApiEntityReferenceArgs struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ApiEntityReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEntityReference)(nil)).Elem()
}

func (i ApiEntityReferenceArgs) ToApiEntityReferenceOutput() ApiEntityReferenceOutput {
	return i.ToApiEntityReferenceOutputWithContext(context.Background())
}

func (i ApiEntityReferenceArgs) ToApiEntityReferenceOutputWithContext(ctx context.Context) ApiEntityReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferenceOutput)
}

func (i ApiEntityReferenceArgs) ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput {
	return i.ToApiEntityReferencePtrOutputWithContext(context.Background())
}

func (i ApiEntityReferenceArgs) ToApiEntityReferencePtrOutputWithContext(ctx context.Context) ApiEntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferenceOutput).ToApiEntityReferencePtrOutputWithContext(ctx)
}

// ApiEntityReferencePtrInput is an input type that accepts ApiEntityReferenceArgs, ApiEntityReferencePtr and ApiEntityReferencePtrOutput values.
// You can construct a concrete instance of `ApiEntityReferencePtrInput` via:
//
//	        ApiEntityReferenceArgs{...}
//
//	or:
//
//	        nil
type ApiEntityReferencePtrInput interface {
	pulumi.Input

	ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput
	ToApiEntityReferencePtrOutputWithContext(context.Context) ApiEntityReferencePtrOutput
}

type apiEntityReferencePtrType ApiEntityReferenceArgs

func ApiEntityReferencePtr(v *ApiEntityReferenceArgs) ApiEntityReferencePtrInput {
	return (*apiEntityReferencePtrType)(v)
}

func (*apiEntityReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEntityReference)(nil)).Elem()
}

func (i *apiEntityReferencePtrType) ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput {
	return i.ToApiEntityReferencePtrOutputWithContext(context.Background())
}

func (i *apiEntityReferencePtrType) ToApiEntityReferencePtrOutputWithContext(ctx context.Context) ApiEntityReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferencePtrOutput)
}

// ApiEntityReferenceArrayInput is an input type that accepts ApiEntityReferenceArray and ApiEntityReferenceArrayOutput values.
// You can construct a concrete instance of `ApiEntityReferenceArrayInput` via:
//
//	ApiEntityReferenceArray{ ApiEntityReferenceArgs{...} }
type ApiEntityReferenceArrayInput interface {
	pulumi.Input

	ToApiEntityReferenceArrayOutput() ApiEntityReferenceArrayOutput
	ToApiEntityReferenceArrayOutputWithContext(context.Context) ApiEntityReferenceArrayOutput
}

type ApiEntityReferenceArray []ApiEntityReferenceInput

func (ApiEntityReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEntityReference)(nil)).Elem()
}

func (i ApiEntityReferenceArray) ToApiEntityReferenceArrayOutput() ApiEntityReferenceArrayOutput {
	return i.ToApiEntityReferenceArrayOutputWithContext(context.Background())
}

func (i ApiEntityReferenceArray) ToApiEntityReferenceArrayOutputWithContext(ctx context.Context) ApiEntityReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiEntityReferenceArrayOutput)
}

// The API entity reference.
type ApiEntityReferenceOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEntityReference)(nil)).Elem()
}

func (o ApiEntityReferenceOutput) ToApiEntityReferenceOutput() ApiEntityReferenceOutput {
	return o
}

func (o ApiEntityReferenceOutput) ToApiEntityReferenceOutputWithContext(ctx context.Context) ApiEntityReferenceOutput {
	return o
}

func (o ApiEntityReferenceOutput) ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput {
	return o.ToApiEntityReferencePtrOutputWithContext(context.Background())
}

func (o ApiEntityReferenceOutput) ToApiEntityReferencePtrOutputWithContext(ctx context.Context) ApiEntityReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiEntityReference) *ApiEntityReference {
		return &v
	}).(ApiEntityReferencePtrOutput)
}

// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
func (o ApiEntityReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEntityReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ApiEntityReferencePtrOutput struct{ *pulumi.OutputState }

func (ApiEntityReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEntityReference)(nil)).Elem()
}

func (o ApiEntityReferencePtrOutput) ToApiEntityReferencePtrOutput() ApiEntityReferencePtrOutput {
	return o
}

func (o ApiEntityReferencePtrOutput) ToApiEntityReferencePtrOutputWithContext(ctx context.Context) ApiEntityReferencePtrOutput {
	return o
}

func (o ApiEntityReferencePtrOutput) Elem() ApiEntityReferenceOutput {
	return o.ApplyT(func(v *ApiEntityReference) ApiEntityReference {
		if v != nil {
			return *v
		}
		var ret ApiEntityReference
		return ret
	}).(ApiEntityReferenceOutput)
}

// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
func (o ApiEntityReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiEntityReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type ApiEntityReferenceArrayOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEntityReference)(nil)).Elem()
}

func (o ApiEntityReferenceArrayOutput) ToApiEntityReferenceArrayOutput() ApiEntityReferenceArrayOutput {
	return o
}

func (o ApiEntityReferenceArrayOutput) ToApiEntityReferenceArrayOutputWithContext(ctx context.Context) ApiEntityReferenceArrayOutput {
	return o
}

func (o ApiEntityReferenceArrayOutput) Index(i pulumi.IntInput) ApiEntityReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiEntityReference {
		return vs[0].([]ApiEntityReference)[vs[1].(int)]
	}).(ApiEntityReferenceOutput)
}

// The API entity reference.
type ApiEntityReferenceResponse struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
	Id *string `pulumi:"id"`
}

// The API entity reference.
type ApiEntityReferenceResponseOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiEntityReferenceResponse)(nil)).Elem()
}

func (o ApiEntityReferenceResponseOutput) ToApiEntityReferenceResponseOutput() ApiEntityReferenceResponseOutput {
	return o
}

func (o ApiEntityReferenceResponseOutput) ToApiEntityReferenceResponseOutputWithContext(ctx context.Context) ApiEntityReferenceResponseOutput {
	return o
}

// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
func (o ApiEntityReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiEntityReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ApiEntityReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiEntityReferenceResponse)(nil)).Elem()
}

func (o ApiEntityReferenceResponsePtrOutput) ToApiEntityReferenceResponsePtrOutput() ApiEntityReferenceResponsePtrOutput {
	return o
}

func (o ApiEntityReferenceResponsePtrOutput) ToApiEntityReferenceResponsePtrOutputWithContext(ctx context.Context) ApiEntityReferenceResponsePtrOutput {
	return o
}

func (o ApiEntityReferenceResponsePtrOutput) Elem() ApiEntityReferenceResponseOutput {
	return o.ApplyT(func(v *ApiEntityReferenceResponse) ApiEntityReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ApiEntityReferenceResponse
		return ret
	}).(ApiEntityReferenceResponseOutput)
}

// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
func (o ApiEntityReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiEntityReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type ApiEntityReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ApiEntityReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiEntityReferenceResponse)(nil)).Elem()
}

func (o ApiEntityReferenceResponseArrayOutput) ToApiEntityReferenceResponseArrayOutput() ApiEntityReferenceResponseArrayOutput {
	return o
}

func (o ApiEntityReferenceResponseArrayOutput) ToApiEntityReferenceResponseArrayOutputWithContext(ctx context.Context) ApiEntityReferenceResponseArrayOutput {
	return o
}

func (o ApiEntityReferenceResponseArrayOutput) Index(i pulumi.IntInput) ApiEntityReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiEntityReferenceResponse {
		return vs[0].([]ApiEntityReferenceResponse)[vs[1].(int)]
	}).(ApiEntityReferenceResponseOutput)
}

// Api error base.
type ApiErrorBaseResponse struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The error message.
	Message *string `pulumi:"message"`
	// The target of the particular error.
	Target *string `pulumi:"target"`
}

// Api error base.
type ApiErrorBaseResponseOutput struct{ *pulumi.OutputState }

func (ApiErrorBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiErrorBaseResponse)(nil)).Elem()
}

func (o ApiErrorBaseResponseOutput) ToApiErrorBaseResponseOutput() ApiErrorBaseResponseOutput {
	return o
}

func (o ApiErrorBaseResponseOutput) ToApiErrorBaseResponseOutputWithContext(ctx context.Context) ApiErrorBaseResponseOutput {
	return o
}

// The error code.
func (o ApiErrorBaseResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorBaseResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The error message.
func (o ApiErrorBaseResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorBaseResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The target of the particular error.
func (o ApiErrorBaseResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorBaseResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ApiErrorBaseResponseArrayOutput struct{ *pulumi.OutputState }

func (ApiErrorBaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiErrorBaseResponse)(nil)).Elem()
}

func (o ApiErrorBaseResponseArrayOutput) ToApiErrorBaseResponseArrayOutput() ApiErrorBaseResponseArrayOutput {
	return o
}

func (o ApiErrorBaseResponseArrayOutput) ToApiErrorBaseResponseArrayOutputWithContext(ctx context.Context) ApiErrorBaseResponseArrayOutput {
	return o
}

func (o ApiErrorBaseResponseArrayOutput) Index(i pulumi.IntInput) ApiErrorBaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiErrorBaseResponse {
		return vs[0].([]ApiErrorBaseResponse)[vs[1].(int)]
	}).(ApiErrorBaseResponseOutput)
}

// Api error.
type ApiErrorResponse struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The Api error details
	Details []ApiErrorBaseResponse `pulumi:"details"`
	// The Api inner error
	Innererror *InnerErrorResponse `pulumi:"innererror"`
	// The error message.
	Message *string `pulumi:"message"`
	// The target of the particular error.
	Target *string `pulumi:"target"`
}

// Api error.
type ApiErrorResponseOutput struct{ *pulumi.OutputState }

func (ApiErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiErrorResponse)(nil)).Elem()
}

func (o ApiErrorResponseOutput) ToApiErrorResponseOutput() ApiErrorResponseOutput {
	return o
}

func (o ApiErrorResponseOutput) ToApiErrorResponseOutputWithContext(ctx context.Context) ApiErrorResponseOutput {
	return o
}

// The error code.
func (o ApiErrorResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The Api error details
func (o ApiErrorResponseOutput) Details() ApiErrorBaseResponseArrayOutput {
	return o.ApplyT(func(v ApiErrorResponse) []ApiErrorBaseResponse { return v.Details }).(ApiErrorBaseResponseArrayOutput)
}

// The Api inner error
func (o ApiErrorResponseOutput) Innererror() InnerErrorResponsePtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *InnerErrorResponse { return v.Innererror }).(InnerErrorResponsePtrOutput)
}

// The error message.
func (o ApiErrorResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The target of the particular error.
func (o ApiErrorResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiErrorResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ApiErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ApiErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiErrorResponse)(nil)).Elem()
}

func (o ApiErrorResponsePtrOutput) ToApiErrorResponsePtrOutput() ApiErrorResponsePtrOutput {
	return o
}

func (o ApiErrorResponsePtrOutput) ToApiErrorResponsePtrOutputWithContext(ctx context.Context) ApiErrorResponsePtrOutput {
	return o
}

func (o ApiErrorResponsePtrOutput) Elem() ApiErrorResponseOutput {
	return o.ApplyT(func(v *ApiErrorResponse) ApiErrorResponse {
		if v != nil {
			return *v
		}
		var ret ApiErrorResponse
		return ret
	}).(ApiErrorResponseOutput)
}

// The error code.
func (o ApiErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// The Api error details
func (o ApiErrorResponsePtrOutput) Details() ApiErrorBaseResponseArrayOutput {
	return o.ApplyT(func(v *ApiErrorResponse) []ApiErrorBaseResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ApiErrorBaseResponseArrayOutput)
}

// The Api inner error
func (o ApiErrorResponsePtrOutput) Innererror() InnerErrorResponsePtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *InnerErrorResponse {
		if v == nil {
			return nil
		}
		return v.Innererror
	}).(InnerErrorResponsePtrOutput)
}

// The error message.
func (o ApiErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The target of the particular error.
func (o ApiErrorResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Contains the list of gallery applications that should be made available to the VM/VMSS
type ApplicationProfile struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	GalleryApplications []VMGalleryApplication `pulumi:"galleryApplications"`
}

// ApplicationProfileInput is an input type that accepts ApplicationProfileArgs and ApplicationProfileOutput values.
// You can construct a concrete instance of `ApplicationProfileInput` via:
//
//	ApplicationProfileArgs{...}
type ApplicationProfileInput interface {
	pulumi.Input

	ToApplicationProfileOutput() ApplicationProfileOutput
	ToApplicationProfileOutputWithContext(context.Context) ApplicationProfileOutput
}

// Contains the list of gallery applications that should be made available to the VM/VMSS
type ApplicationProfileArgs struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	GalleryApplications VMGalleryApplicationArrayInput `pulumi:"galleryApplications"`
}

func (ApplicationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationProfile)(nil)).Elem()
}

func (i ApplicationProfileArgs) ToApplicationProfileOutput() ApplicationProfileOutput {
	return i.ToApplicationProfileOutputWithContext(context.Background())
}

func (i ApplicationProfileArgs) ToApplicationProfileOutputWithContext(ctx context.Context) ApplicationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationProfileOutput)
}

func (i ApplicationProfileArgs) ToApplicationProfilePtrOutput() ApplicationProfilePtrOutput {
	return i.ToApplicationProfilePtrOutputWithContext(context.Background())
}

func (i ApplicationProfileArgs) ToApplicationProfilePtrOutputWithContext(ctx context.Context) ApplicationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationProfileOutput).ToApplicationProfilePtrOutputWithContext(ctx)
}

// ApplicationProfilePtrInput is an input type that accepts ApplicationProfileArgs, ApplicationProfilePtr and ApplicationProfilePtrOutput values.
// You can construct a concrete instance of `ApplicationProfilePtrInput` via:
//
//	        ApplicationProfileArgs{...}
//
//	or:
//
//	        nil
type ApplicationProfilePtrInput interface {
	pulumi.Input

	ToApplicationProfilePtrOutput() ApplicationProfilePtrOutput
	ToApplicationProfilePtrOutputWithContext(context.Context) ApplicationProfilePtrOutput
}

type applicationProfilePtrType ApplicationProfileArgs

func ApplicationProfilePtr(v *ApplicationProfileArgs) ApplicationProfilePtrInput {
	return (*applicationProfilePtrType)(v)
}

func (*applicationProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationProfile)(nil)).Elem()
}

func (i *applicationProfilePtrType) ToApplicationProfilePtrOutput() ApplicationProfilePtrOutput {
	return i.ToApplicationProfilePtrOutputWithContext(context.Background())
}

func (i *applicationProfilePtrType) ToApplicationProfilePtrOutputWithContext(ctx context.Context) ApplicationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationProfilePtrOutput)
}

// Contains the list of gallery applications that should be made available to the VM/VMSS
type ApplicationProfileOutput struct{ *pulumi.OutputState }

func (ApplicationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationProfile)(nil)).Elem()
}

func (o ApplicationProfileOutput) ToApplicationProfileOutput() ApplicationProfileOutput {
	return o
}

func (o ApplicationProfileOutput) ToApplicationProfileOutputWithContext(ctx context.Context) ApplicationProfileOutput {
	return o
}

func (o ApplicationProfileOutput) ToApplicationProfilePtrOutput() ApplicationProfilePtrOutput {
	return o.ToApplicationProfilePtrOutputWithContext(context.Background())
}

func (o ApplicationProfileOutput) ToApplicationProfilePtrOutputWithContext(ctx context.Context) ApplicationProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationProfile) *ApplicationProfile {
		return &v
	}).(ApplicationProfilePtrOutput)
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o ApplicationProfileOutput) GalleryApplications() VMGalleryApplicationArrayOutput {
	return o.ApplyT(func(v ApplicationProfile) []VMGalleryApplication { return v.GalleryApplications }).(VMGalleryApplicationArrayOutput)
}

type ApplicationProfilePtrOutput struct{ *pulumi.OutputState }

func (ApplicationProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationProfile)(nil)).Elem()
}

func (o ApplicationProfilePtrOutput) ToApplicationProfilePtrOutput() ApplicationProfilePtrOutput {
	return o
}

func (o ApplicationProfilePtrOutput) ToApplicationProfilePtrOutputWithContext(ctx context.Context) ApplicationProfilePtrOutput {
	return o
}

func (o ApplicationProfilePtrOutput) Elem() ApplicationProfileOutput {
	return o.ApplyT(func(v *ApplicationProfile) ApplicationProfile {
		if v != nil {
			return *v
		}
		var ret ApplicationProfile
		return ret
	}).(ApplicationProfileOutput)
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o ApplicationProfilePtrOutput) GalleryApplications() VMGalleryApplicationArrayOutput {
	return o.ApplyT(func(v *ApplicationProfile) []VMGalleryApplication {
		if v == nil {
			return nil
		}
		return v.GalleryApplications
	}).(VMGalleryApplicationArrayOutput)
}

// Contains the list of gallery applications that should be made available to the VM/VMSS
type ApplicationProfileResponse struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	GalleryApplications []VMGalleryApplicationResponse `pulumi:"galleryApplications"`
}

// Contains the list of gallery applications that should be made available to the VM/VMSS
type ApplicationProfileResponseOutput struct{ *pulumi.OutputState }

func (ApplicationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationProfileResponse)(nil)).Elem()
}

func (o ApplicationProfileResponseOutput) ToApplicationProfileResponseOutput() ApplicationProfileResponseOutput {
	return o
}

func (o ApplicationProfileResponseOutput) ToApplicationProfileResponseOutputWithContext(ctx context.Context) ApplicationProfileResponseOutput {
	return o
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o ApplicationProfileResponseOutput) GalleryApplications() VMGalleryApplicationResponseArrayOutput {
	return o.ApplyT(func(v ApplicationProfileResponse) []VMGalleryApplicationResponse { return v.GalleryApplications }).(VMGalleryApplicationResponseArrayOutput)
}

type ApplicationProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationProfileResponse)(nil)).Elem()
}

func (o ApplicationProfileResponsePtrOutput) ToApplicationProfileResponsePtrOutput() ApplicationProfileResponsePtrOutput {
	return o
}

func (o ApplicationProfileResponsePtrOutput) ToApplicationProfileResponsePtrOutputWithContext(ctx context.Context) ApplicationProfileResponsePtrOutput {
	return o
}

func (o ApplicationProfileResponsePtrOutput) Elem() ApplicationProfileResponseOutput {
	return o.ApplyT(func(v *ApplicationProfileResponse) ApplicationProfileResponse {
		if v != nil {
			return *v
		}
		var ret ApplicationProfileResponse
		return ret
	}).(ApplicationProfileResponseOutput)
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o ApplicationProfileResponsePtrOutput) GalleryApplications() VMGalleryApplicationResponseArrayOutput {
	return o.ApplyT(func(v *ApplicationProfileResponse) []VMGalleryApplicationResponse {
		if v == nil {
			return nil
		}
		return v.GalleryApplications
	}).(VMGalleryApplicationResponseArrayOutput)
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicy struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback *bool `pulumi:"disableAutomaticRollback"`
	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool `pulumi:"enableAutomaticOSUpgrade"`
	// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
	OsRollingUpgradeDeferral *bool `pulumi:"osRollingUpgradeDeferral"`
	// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
	UseRollingUpgradePolicy *bool `pulumi:"useRollingUpgradePolicy"`
}

// AutomaticOSUpgradePolicyInput is an input type that accepts AutomaticOSUpgradePolicyArgs and AutomaticOSUpgradePolicyOutput values.
// You can construct a concrete instance of `AutomaticOSUpgradePolicyInput` via:
//
//	AutomaticOSUpgradePolicyArgs{...}
type AutomaticOSUpgradePolicyInput interface {
	pulumi.Input

	ToAutomaticOSUpgradePolicyOutput() AutomaticOSUpgradePolicyOutput
	ToAutomaticOSUpgradePolicyOutputWithContext(context.Context) AutomaticOSUpgradePolicyOutput
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyArgs struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback pulumi.BoolPtrInput `pulumi:"disableAutomaticRollback"`
	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade pulumi.BoolPtrInput `pulumi:"enableAutomaticOSUpgrade"`
	// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
	OsRollingUpgradeDeferral pulumi.BoolPtrInput `pulumi:"osRollingUpgradeDeferral"`
	// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
	UseRollingUpgradePolicy pulumi.BoolPtrInput `pulumi:"useRollingUpgradePolicy"`
}

func (AutomaticOSUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticOSUpgradePolicy)(nil)).Elem()
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyOutput() AutomaticOSUpgradePolicyOutput {
	return i.ToAutomaticOSUpgradePolicyOutputWithContext(context.Background())
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOSUpgradePolicyOutput)
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput {
	return i.ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i AutomaticOSUpgradePolicyArgs) ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOSUpgradePolicyOutput).ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx)
}

// AutomaticOSUpgradePolicyPtrInput is an input type that accepts AutomaticOSUpgradePolicyArgs, AutomaticOSUpgradePolicyPtr and AutomaticOSUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `AutomaticOSUpgradePolicyPtrInput` via:
//
//	        AutomaticOSUpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type AutomaticOSUpgradePolicyPtrInput interface {
	pulumi.Input

	ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput
	ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Context) AutomaticOSUpgradePolicyPtrOutput
}

type automaticOSUpgradePolicyPtrType AutomaticOSUpgradePolicyArgs

func AutomaticOSUpgradePolicyPtr(v *AutomaticOSUpgradePolicyArgs) AutomaticOSUpgradePolicyPtrInput {
	return (*automaticOSUpgradePolicyPtrType)(v)
}

func (*automaticOSUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticOSUpgradePolicy)(nil)).Elem()
}

func (i *automaticOSUpgradePolicyPtrType) ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput {
	return i.ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *automaticOSUpgradePolicyPtrType) ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOSUpgradePolicyPtrOutput)
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyOutput struct{ *pulumi.OutputState }

func (AutomaticOSUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticOSUpgradePolicy)(nil)).Elem()
}

func (o AutomaticOSUpgradePolicyOutput) ToAutomaticOSUpgradePolicyOutput() AutomaticOSUpgradePolicyOutput {
	return o
}

func (o AutomaticOSUpgradePolicyOutput) ToAutomaticOSUpgradePolicyOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyOutput {
	return o
}

func (o AutomaticOSUpgradePolicyOutput) ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput {
	return o.ToAutomaticOSUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o AutomaticOSUpgradePolicyOutput) ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomaticOSUpgradePolicy) *AutomaticOSUpgradePolicy {
		return &v
	}).(AutomaticOSUpgradePolicyPtrOutput)
}

// Whether OS image rollback feature should be disabled. Default value is false.
func (o AutomaticOSUpgradePolicyOutput) DisableAutomaticRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicy) *bool { return v.DisableAutomaticRollback }).(pulumi.BoolPtrOutput)
}

// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
func (o AutomaticOSUpgradePolicyOutput) EnableAutomaticOSUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicy) *bool { return v.EnableAutomaticOSUpgrade }).(pulumi.BoolPtrOutput)
}

// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
func (o AutomaticOSUpgradePolicyOutput) OsRollingUpgradeDeferral() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicy) *bool { return v.OsRollingUpgradeDeferral }).(pulumi.BoolPtrOutput)
}

// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
func (o AutomaticOSUpgradePolicyOutput) UseRollingUpgradePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicy) *bool { return v.UseRollingUpgradePolicy }).(pulumi.BoolPtrOutput)
}

type AutomaticOSUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (AutomaticOSUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticOSUpgradePolicy)(nil)).Elem()
}

func (o AutomaticOSUpgradePolicyPtrOutput) ToAutomaticOSUpgradePolicyPtrOutput() AutomaticOSUpgradePolicyPtrOutput {
	return o
}

func (o AutomaticOSUpgradePolicyPtrOutput) ToAutomaticOSUpgradePolicyPtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyPtrOutput {
	return o
}

func (o AutomaticOSUpgradePolicyPtrOutput) Elem() AutomaticOSUpgradePolicyOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicy) AutomaticOSUpgradePolicy {
		if v != nil {
			return *v
		}
		var ret AutomaticOSUpgradePolicy
		return ret
	}).(AutomaticOSUpgradePolicyOutput)
}

// Whether OS image rollback feature should be disabled. Default value is false.
func (o AutomaticOSUpgradePolicyPtrOutput) DisableAutomaticRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.DisableAutomaticRollback
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
func (o AutomaticOSUpgradePolicyPtrOutput) EnableAutomaticOSUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticOSUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
func (o AutomaticOSUpgradePolicyPtrOutput) OsRollingUpgradeDeferral() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.OsRollingUpgradeDeferral
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
func (o AutomaticOSUpgradePolicyPtrOutput) UseRollingUpgradePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UseRollingUpgradePolicy
	}).(pulumi.BoolPtrOutput)
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyResponse struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback *bool `pulumi:"disableAutomaticRollback"`
	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool `pulumi:"enableAutomaticOSUpgrade"`
	// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
	OsRollingUpgradeDeferral *bool `pulumi:"osRollingUpgradeDeferral"`
	// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
	UseRollingUpgradePolicy *bool `pulumi:"useRollingUpgradePolicy"`
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (AutomaticOSUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticOSUpgradePolicyResponse)(nil)).Elem()
}

func (o AutomaticOSUpgradePolicyResponseOutput) ToAutomaticOSUpgradePolicyResponseOutput() AutomaticOSUpgradePolicyResponseOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponseOutput) ToAutomaticOSUpgradePolicyResponseOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyResponseOutput {
	return o
}

// Whether OS image rollback feature should be disabled. Default value is false.
func (o AutomaticOSUpgradePolicyResponseOutput) DisableAutomaticRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *bool { return v.DisableAutomaticRollback }).(pulumi.BoolPtrOutput)
}

// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
func (o AutomaticOSUpgradePolicyResponseOutput) EnableAutomaticOSUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *bool { return v.EnableAutomaticOSUpgrade }).(pulumi.BoolPtrOutput)
}

// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
func (o AutomaticOSUpgradePolicyResponseOutput) OsRollingUpgradeDeferral() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *bool { return v.OsRollingUpgradeDeferral }).(pulumi.BoolPtrOutput)
}

// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
func (o AutomaticOSUpgradePolicyResponseOutput) UseRollingUpgradePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticOSUpgradePolicyResponse) *bool { return v.UseRollingUpgradePolicy }).(pulumi.BoolPtrOutput)
}

type AutomaticOSUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (AutomaticOSUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticOSUpgradePolicyResponse)(nil)).Elem()
}

func (o AutomaticOSUpgradePolicyResponsePtrOutput) ToAutomaticOSUpgradePolicyResponsePtrOutput() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponsePtrOutput) ToAutomaticOSUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticOSUpgradePolicyResponsePtrOutput {
	return o
}

func (o AutomaticOSUpgradePolicyResponsePtrOutput) Elem() AutomaticOSUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) AutomaticOSUpgradePolicyResponse {
		if v != nil {
			return *v
		}
		var ret AutomaticOSUpgradePolicyResponse
		return ret
	}).(AutomaticOSUpgradePolicyResponseOutput)
}

// Whether OS image rollback feature should be disabled. Default value is false.
func (o AutomaticOSUpgradePolicyResponsePtrOutput) DisableAutomaticRollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableAutomaticRollback
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true.
func (o AutomaticOSUpgradePolicyResponsePtrOutput) EnableAutomaticOSUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticOSUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is approved via an ApproveRollingUpgrade call.
func (o AutomaticOSUpgradePolicyResponsePtrOutput) OsRollingUpgradeDeferral() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OsRollingUpgradeDeferral
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS.
func (o AutomaticOSUpgradePolicyResponsePtrOutput) UseRollingUpgradePolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticOSUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseRollingUpgradePolicy
	}).(pulumi.BoolPtrOutput)
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicy struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
	GracePeriod *string `pulumi:"gracePeriod"`
	// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
	RepairAction *string `pulumi:"repairAction"`
}

// AutomaticRepairsPolicyInput is an input type that accepts AutomaticRepairsPolicyArgs and AutomaticRepairsPolicyOutput values.
// You can construct a concrete instance of `AutomaticRepairsPolicyInput` via:
//
//	AutomaticRepairsPolicyArgs{...}
type AutomaticRepairsPolicyInput interface {
	pulumi.Input

	ToAutomaticRepairsPolicyOutput() AutomaticRepairsPolicyOutput
	ToAutomaticRepairsPolicyOutputWithContext(context.Context) AutomaticRepairsPolicyOutput
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyArgs struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
	GracePeriod pulumi.StringPtrInput `pulumi:"gracePeriod"`
	// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
	RepairAction pulumi.StringPtrInput `pulumi:"repairAction"`
}

func (AutomaticRepairsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticRepairsPolicy)(nil)).Elem()
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyOutput() AutomaticRepairsPolicyOutput {
	return i.ToAutomaticRepairsPolicyOutputWithContext(context.Background())
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyOutputWithContext(ctx context.Context) AutomaticRepairsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticRepairsPolicyOutput)
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput {
	return i.ToAutomaticRepairsPolicyPtrOutputWithContext(context.Background())
}

func (i AutomaticRepairsPolicyArgs) ToAutomaticRepairsPolicyPtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticRepairsPolicyOutput).ToAutomaticRepairsPolicyPtrOutputWithContext(ctx)
}

// AutomaticRepairsPolicyPtrInput is an input type that accepts AutomaticRepairsPolicyArgs, AutomaticRepairsPolicyPtr and AutomaticRepairsPolicyPtrOutput values.
// You can construct a concrete instance of `AutomaticRepairsPolicyPtrInput` via:
//
//	        AutomaticRepairsPolicyArgs{...}
//
//	or:
//
//	        nil
type AutomaticRepairsPolicyPtrInput interface {
	pulumi.Input

	ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput
	ToAutomaticRepairsPolicyPtrOutputWithContext(context.Context) AutomaticRepairsPolicyPtrOutput
}

type automaticRepairsPolicyPtrType AutomaticRepairsPolicyArgs

func AutomaticRepairsPolicyPtr(v *AutomaticRepairsPolicyArgs) AutomaticRepairsPolicyPtrInput {
	return (*automaticRepairsPolicyPtrType)(v)
}

func (*automaticRepairsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticRepairsPolicy)(nil)).Elem()
}

func (i *automaticRepairsPolicyPtrType) ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput {
	return i.ToAutomaticRepairsPolicyPtrOutputWithContext(context.Background())
}

func (i *automaticRepairsPolicyPtrType) ToAutomaticRepairsPolicyPtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticRepairsPolicyPtrOutput)
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyOutput struct{ *pulumi.OutputState }

func (AutomaticRepairsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticRepairsPolicy)(nil)).Elem()
}

func (o AutomaticRepairsPolicyOutput) ToAutomaticRepairsPolicyOutput() AutomaticRepairsPolicyOutput {
	return o
}

func (o AutomaticRepairsPolicyOutput) ToAutomaticRepairsPolicyOutputWithContext(ctx context.Context) AutomaticRepairsPolicyOutput {
	return o
}

func (o AutomaticRepairsPolicyOutput) ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput {
	return o.ToAutomaticRepairsPolicyPtrOutputWithContext(context.Background())
}

func (o AutomaticRepairsPolicyOutput) ToAutomaticRepairsPolicyPtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomaticRepairsPolicy) *AutomaticRepairsPolicy {
		return &v
	}).(AutomaticRepairsPolicyPtrOutput)
}

// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticRepairsPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
func (o AutomaticRepairsPolicyOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicy) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
func (o AutomaticRepairsPolicyOutput) RepairAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicy) *string { return v.RepairAction }).(pulumi.StringPtrOutput)
}

type AutomaticRepairsPolicyPtrOutput struct{ *pulumi.OutputState }

func (AutomaticRepairsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticRepairsPolicy)(nil)).Elem()
}

func (o AutomaticRepairsPolicyPtrOutput) ToAutomaticRepairsPolicyPtrOutput() AutomaticRepairsPolicyPtrOutput {
	return o
}

func (o AutomaticRepairsPolicyPtrOutput) ToAutomaticRepairsPolicyPtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyPtrOutput {
	return o
}

func (o AutomaticRepairsPolicyPtrOutput) Elem() AutomaticRepairsPolicyOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicy) AutomaticRepairsPolicy {
		if v != nil {
			return *v
		}
		var ret AutomaticRepairsPolicy
		return ret
	}).(AutomaticRepairsPolicyOutput)
}

// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticRepairsPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
func (o AutomaticRepairsPolicyPtrOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.GracePeriod
	}).(pulumi.StringPtrOutput)
}

// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
func (o AutomaticRepairsPolicyPtrOutput) RepairAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RepairAction
	}).(pulumi.StringPtrOutput)
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyResponse struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
	GracePeriod *string `pulumi:"gracePeriod"`
	// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
	RepairAction *string `pulumi:"repairAction"`
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicyResponseOutput struct{ *pulumi.OutputState }

func (AutomaticRepairsPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticRepairsPolicyResponse)(nil)).Elem()
}

func (o AutomaticRepairsPolicyResponseOutput) ToAutomaticRepairsPolicyResponseOutput() AutomaticRepairsPolicyResponseOutput {
	return o
}

func (o AutomaticRepairsPolicyResponseOutput) ToAutomaticRepairsPolicyResponseOutputWithContext(ctx context.Context) AutomaticRepairsPolicyResponseOutput {
	return o
}

// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticRepairsPolicyResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicyResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
func (o AutomaticRepairsPolicyResponseOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicyResponse) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
func (o AutomaticRepairsPolicyResponseOutput) RepairAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticRepairsPolicyResponse) *string { return v.RepairAction }).(pulumi.StringPtrOutput)
}

type AutomaticRepairsPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (AutomaticRepairsPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticRepairsPolicyResponse)(nil)).Elem()
}

func (o AutomaticRepairsPolicyResponsePtrOutput) ToAutomaticRepairsPolicyResponsePtrOutput() AutomaticRepairsPolicyResponsePtrOutput {
	return o
}

func (o AutomaticRepairsPolicyResponsePtrOutput) ToAutomaticRepairsPolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticRepairsPolicyResponsePtrOutput {
	return o
}

func (o AutomaticRepairsPolicyResponsePtrOutput) Elem() AutomaticRepairsPolicyResponseOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) AutomaticRepairsPolicyResponse {
		if v != nil {
			return *v
		}
		var ret AutomaticRepairsPolicyResponse
		return ret
	}).(AutomaticRepairsPolicyResponseOutput)
}

// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticRepairsPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M).
func (o AutomaticRepairsPolicyResponsePtrOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.GracePeriod
	}).(pulumi.StringPtrOutput)
}

// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace.
func (o AutomaticRepairsPolicyResponsePtrOutput) RepairAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticRepairsPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.RepairAction
	}).(pulumi.StringPtrOutput)
}

// The configuration parameters used while performing automatic AZ balancing.
type AutomaticZoneRebalancingPolicy struct {
	// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
	// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
	RebalanceBehavior *string `pulumi:"rebalanceBehavior"`
	// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
	RebalanceStrategy *string `pulumi:"rebalanceStrategy"`
}

// AutomaticZoneRebalancingPolicyInput is an input type that accepts AutomaticZoneRebalancingPolicyArgs and AutomaticZoneRebalancingPolicyOutput values.
// You can construct a concrete instance of `AutomaticZoneRebalancingPolicyInput` via:
//
//	AutomaticZoneRebalancingPolicyArgs{...}
type AutomaticZoneRebalancingPolicyInput interface {
	pulumi.Input

	ToAutomaticZoneRebalancingPolicyOutput() AutomaticZoneRebalancingPolicyOutput
	ToAutomaticZoneRebalancingPolicyOutputWithContext(context.Context) AutomaticZoneRebalancingPolicyOutput
}

// The configuration parameters used while performing automatic AZ balancing.
type AutomaticZoneRebalancingPolicyArgs struct {
	// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
	RebalanceBehavior pulumi.StringPtrInput `pulumi:"rebalanceBehavior"`
	// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
	RebalanceStrategy pulumi.StringPtrInput `pulumi:"rebalanceStrategy"`
}

func (AutomaticZoneRebalancingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticZoneRebalancingPolicy)(nil)).Elem()
}

func (i AutomaticZoneRebalancingPolicyArgs) ToAutomaticZoneRebalancingPolicyOutput() AutomaticZoneRebalancingPolicyOutput {
	return i.ToAutomaticZoneRebalancingPolicyOutputWithContext(context.Background())
}

func (i AutomaticZoneRebalancingPolicyArgs) ToAutomaticZoneRebalancingPolicyOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticZoneRebalancingPolicyOutput)
}

func (i AutomaticZoneRebalancingPolicyArgs) ToAutomaticZoneRebalancingPolicyPtrOutput() AutomaticZoneRebalancingPolicyPtrOutput {
	return i.ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(context.Background())
}

func (i AutomaticZoneRebalancingPolicyArgs) ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticZoneRebalancingPolicyOutput).ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(ctx)
}

// AutomaticZoneRebalancingPolicyPtrInput is an input type that accepts AutomaticZoneRebalancingPolicyArgs, AutomaticZoneRebalancingPolicyPtr and AutomaticZoneRebalancingPolicyPtrOutput values.
// You can construct a concrete instance of `AutomaticZoneRebalancingPolicyPtrInput` via:
//
//	        AutomaticZoneRebalancingPolicyArgs{...}
//
//	or:
//
//	        nil
type AutomaticZoneRebalancingPolicyPtrInput interface {
	pulumi.Input

	ToAutomaticZoneRebalancingPolicyPtrOutput() AutomaticZoneRebalancingPolicyPtrOutput
	ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(context.Context) AutomaticZoneRebalancingPolicyPtrOutput
}

type automaticZoneRebalancingPolicyPtrType AutomaticZoneRebalancingPolicyArgs

func AutomaticZoneRebalancingPolicyPtr(v *AutomaticZoneRebalancingPolicyArgs) AutomaticZoneRebalancingPolicyPtrInput {
	return (*automaticZoneRebalancingPolicyPtrType)(v)
}

func (*automaticZoneRebalancingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticZoneRebalancingPolicy)(nil)).Elem()
}

func (i *automaticZoneRebalancingPolicyPtrType) ToAutomaticZoneRebalancingPolicyPtrOutput() AutomaticZoneRebalancingPolicyPtrOutput {
	return i.ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(context.Background())
}

func (i *automaticZoneRebalancingPolicyPtrType) ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticZoneRebalancingPolicyPtrOutput)
}

// The configuration parameters used while performing automatic AZ balancing.
type AutomaticZoneRebalancingPolicyOutput struct{ *pulumi.OutputState }

func (AutomaticZoneRebalancingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticZoneRebalancingPolicy)(nil)).Elem()
}

func (o AutomaticZoneRebalancingPolicyOutput) ToAutomaticZoneRebalancingPolicyOutput() AutomaticZoneRebalancingPolicyOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyOutput) ToAutomaticZoneRebalancingPolicyOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyOutput) ToAutomaticZoneRebalancingPolicyPtrOutput() AutomaticZoneRebalancingPolicyPtrOutput {
	return o.ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(context.Background())
}

func (o AutomaticZoneRebalancingPolicyOutput) ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomaticZoneRebalancingPolicy) *AutomaticZoneRebalancingPolicy {
		return &v
	}).(AutomaticZoneRebalancingPolicyPtrOutput)
}

// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticZoneRebalancingPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticZoneRebalancingPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
func (o AutomaticZoneRebalancingPolicyOutput) RebalanceBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticZoneRebalancingPolicy) *string { return v.RebalanceBehavior }).(pulumi.StringPtrOutput)
}

// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
func (o AutomaticZoneRebalancingPolicyOutput) RebalanceStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticZoneRebalancingPolicy) *string { return v.RebalanceStrategy }).(pulumi.StringPtrOutput)
}

type AutomaticZoneRebalancingPolicyPtrOutput struct{ *pulumi.OutputState }

func (AutomaticZoneRebalancingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticZoneRebalancingPolicy)(nil)).Elem()
}

func (o AutomaticZoneRebalancingPolicyPtrOutput) ToAutomaticZoneRebalancingPolicyPtrOutput() AutomaticZoneRebalancingPolicyPtrOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyPtrOutput) ToAutomaticZoneRebalancingPolicyPtrOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyPtrOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyPtrOutput) Elem() AutomaticZoneRebalancingPolicyOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicy) AutomaticZoneRebalancingPolicy {
		if v != nil {
			return *v
		}
		var ret AutomaticZoneRebalancingPolicy
		return ret
	}).(AutomaticZoneRebalancingPolicyOutput)
}

// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticZoneRebalancingPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
func (o AutomaticZoneRebalancingPolicyPtrOutput) RebalanceBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RebalanceBehavior
	}).(pulumi.StringPtrOutput)
}

// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
func (o AutomaticZoneRebalancingPolicyPtrOutput) RebalanceStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.RebalanceStrategy
	}).(pulumi.StringPtrOutput)
}

// The configuration parameters used while performing automatic AZ balancing.
type AutomaticZoneRebalancingPolicyResponse struct {
	// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
	// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
	RebalanceBehavior *string `pulumi:"rebalanceBehavior"`
	// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
	RebalanceStrategy *string `pulumi:"rebalanceStrategy"`
}

// The configuration parameters used while performing automatic AZ balancing.
type AutomaticZoneRebalancingPolicyResponseOutput struct{ *pulumi.OutputState }

func (AutomaticZoneRebalancingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticZoneRebalancingPolicyResponse)(nil)).Elem()
}

func (o AutomaticZoneRebalancingPolicyResponseOutput) ToAutomaticZoneRebalancingPolicyResponseOutput() AutomaticZoneRebalancingPolicyResponseOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyResponseOutput) ToAutomaticZoneRebalancingPolicyResponseOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyResponseOutput {
	return o
}

// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticZoneRebalancingPolicyResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomaticZoneRebalancingPolicyResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
func (o AutomaticZoneRebalancingPolicyResponseOutput) RebalanceBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticZoneRebalancingPolicyResponse) *string { return v.RebalanceBehavior }).(pulumi.StringPtrOutput)
}

// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
func (o AutomaticZoneRebalancingPolicyResponseOutput) RebalanceStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomaticZoneRebalancingPolicyResponse) *string { return v.RebalanceStrategy }).(pulumi.StringPtrOutput)
}

type AutomaticZoneRebalancingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (AutomaticZoneRebalancingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomaticZoneRebalancingPolicyResponse)(nil)).Elem()
}

func (o AutomaticZoneRebalancingPolicyResponsePtrOutput) ToAutomaticZoneRebalancingPolicyResponsePtrOutput() AutomaticZoneRebalancingPolicyResponsePtrOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyResponsePtrOutput) ToAutomaticZoneRebalancingPolicyResponsePtrOutputWithContext(ctx context.Context) AutomaticZoneRebalancingPolicyResponsePtrOutput {
	return o
}

func (o AutomaticZoneRebalancingPolicyResponsePtrOutput) Elem() AutomaticZoneRebalancingPolicyResponseOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicyResponse) AutomaticZoneRebalancingPolicyResponse {
		if v != nil {
			return *v
		}
		var ret AutomaticZoneRebalancingPolicyResponse
		return ret
	}).(AutomaticZoneRebalancingPolicyResponseOutput)
}

// Specifies whether Automatic AZ Balancing should be enabled on the virtual machine scale set. The default value is false.
func (o AutomaticZoneRebalancingPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Type of rebalance behavior that will be used for recreating virtual machines in the scale set across availability zones. Default and only supported value for now is CreateBeforeDelete.
func (o AutomaticZoneRebalancingPolicyResponsePtrOutput) RebalanceBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.RebalanceBehavior
	}).(pulumi.StringPtrOutput)
}

// Type of rebalance strategy that will be used for rebalancing virtual machines in the scale set across availability zones. Default and only supported value for now is Recreate.
func (o AutomaticZoneRebalancingPolicyResponsePtrOutput) RebalanceStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomaticZoneRebalancingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.RebalanceStrategy
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummaryResponse struct {
	// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	AssessmentActivityId string `pulumi:"assessmentActivityId"`
	// The number of critical or security patches that have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount int `pulumi:"criticalAndSecurityPatchCount"`
	// The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error ApiErrorResponse `pulumi:"error"`
	// The UTC timestamp when the operation began.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// The number of all available patches excluding critical and security.
	OtherPatchCount int `pulumi:"otherPatchCount"`
	// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
	RebootPending bool `pulumi:"rebootPending"`
	// The UTC timestamp when the operation began.
	StartTime string `pulumi:"startTime"`
	// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
	Status string `pulumi:"status"`
}

// Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummaryResponseOutput struct{ *pulumi.OutputState }

func (AvailablePatchSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailablePatchSummaryResponse)(nil)).Elem()
}

func (o AvailablePatchSummaryResponseOutput) ToAvailablePatchSummaryResponseOutput() AvailablePatchSummaryResponseOutput {
	return o
}

func (o AvailablePatchSummaryResponseOutput) ToAvailablePatchSummaryResponseOutputWithContext(ctx context.Context) AvailablePatchSummaryResponseOutput {
	return o
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o AvailablePatchSummaryResponseOutput) AssessmentActivityId() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.AssessmentActivityId }).(pulumi.StringOutput)
}

// The number of critical or security patches that have been detected as available and not yet installed.
func (o AvailablePatchSummaryResponseOutput) CriticalAndSecurityPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) int { return v.CriticalAndSecurityPatchCount }).(pulumi.IntOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o AvailablePatchSummaryResponseOutput) Error() ApiErrorResponseOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) ApiErrorResponse { return v.Error }).(ApiErrorResponseOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// The number of all available patches excluding critical and security.
func (o AvailablePatchSummaryResponseOutput) OtherPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) int { return v.OtherPatchCount }).(pulumi.IntOutput)
}

// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
func (o AvailablePatchSummaryResponseOutput) RebootPending() pulumi.BoolOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) bool { return v.RebootPending }).(pulumi.BoolOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
func (o AvailablePatchSummaryResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AvailablePatchSummaryResponse) string { return v.Status }).(pulumi.StringOutput)
}

type AvailablePatchSummaryResponsePtrOutput struct{ *pulumi.OutputState }

func (AvailablePatchSummaryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailablePatchSummaryResponse)(nil)).Elem()
}

func (o AvailablePatchSummaryResponsePtrOutput) ToAvailablePatchSummaryResponsePtrOutput() AvailablePatchSummaryResponsePtrOutput {
	return o
}

func (o AvailablePatchSummaryResponsePtrOutput) ToAvailablePatchSummaryResponsePtrOutputWithContext(ctx context.Context) AvailablePatchSummaryResponsePtrOutput {
	return o
}

func (o AvailablePatchSummaryResponsePtrOutput) Elem() AvailablePatchSummaryResponseOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) AvailablePatchSummaryResponse {
		if v != nil {
			return *v
		}
		var ret AvailablePatchSummaryResponse
		return ret
	}).(AvailablePatchSummaryResponseOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o AvailablePatchSummaryResponsePtrOutput) AssessmentActivityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssessmentActivityId
	}).(pulumi.StringPtrOutput)
}

// The number of critical or security patches that have been detected as available and not yet installed.
func (o AvailablePatchSummaryResponsePtrOutput) CriticalAndSecurityPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CriticalAndSecurityPatchCount
	}).(pulumi.IntPtrOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o AvailablePatchSummaryResponsePtrOutput) Error() ApiErrorResponsePtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *ApiErrorResponse {
		if v == nil {
			return nil
		}
		return &v.Error
	}).(ApiErrorResponsePtrOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponsePtrOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedTime
	}).(pulumi.StringPtrOutput)
}

// The number of all available patches excluding critical and security.
func (o AvailablePatchSummaryResponsePtrOutput) OtherPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.OtherPatchCount
	}).(pulumi.IntPtrOutput)
}

// The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
func (o AvailablePatchSummaryResponsePtrOutput) RebootPending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RebootPending
	}).(pulumi.BoolPtrOutput)
}

// The UTC timestamp when the operation began.
func (o AvailablePatchSummaryResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
func (o AvailablePatchSummaryResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailablePatchSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version: 2019-03-01.
type BillingProfile struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
	MaxPrice *float64 `pulumi:"maxPrice"`
}

// BillingProfileInput is an input type that accepts BillingProfileArgs and BillingProfileOutput values.
// You can construct a concrete instance of `BillingProfileInput` via:
//
//	BillingProfileArgs{...}
type BillingProfileInput interface {
	pulumi.Input

	ToBillingProfileOutput() BillingProfileOutput
	ToBillingProfileOutputWithContext(context.Context) BillingProfileOutput
}

// Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version: 2019-03-01.
type BillingProfileArgs struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
	MaxPrice pulumi.Float64PtrInput `pulumi:"maxPrice"`
}

func (BillingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingProfile)(nil)).Elem()
}

func (i BillingProfileArgs) ToBillingProfileOutput() BillingProfileOutput {
	return i.ToBillingProfileOutputWithContext(context.Background())
}

func (i BillingProfileArgs) ToBillingProfileOutputWithContext(ctx context.Context) BillingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingProfileOutput)
}

func (i BillingProfileArgs) ToBillingProfilePtrOutput() BillingProfilePtrOutput {
	return i.ToBillingProfilePtrOutputWithContext(context.Background())
}

func (i BillingProfileArgs) ToBillingProfilePtrOutputWithContext(ctx context.Context) BillingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingProfileOutput).ToBillingProfilePtrOutputWithContext(ctx)
}

// BillingProfilePtrInput is an input type that accepts BillingProfileArgs, BillingProfilePtr and BillingProfilePtrOutput values.
// You can construct a concrete instance of `BillingProfilePtrInput` via:
//
//	        BillingProfileArgs{...}
//
//	or:
//
//	        nil
type BillingProfilePtrInput interface {
	pulumi.Input

	ToBillingProfilePtrOutput() BillingProfilePtrOutput
	ToBillingProfilePtrOutputWithContext(context.Context) BillingProfilePtrOutput
}

type billingProfilePtrType BillingProfileArgs

func BillingProfilePtr(v *BillingProfileArgs) BillingProfilePtrInput {
	return (*billingProfilePtrType)(v)
}

func (*billingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingProfile)(nil)).Elem()
}

func (i *billingProfilePtrType) ToBillingProfilePtrOutput() BillingProfilePtrOutput {
	return i.ToBillingProfilePtrOutputWithContext(context.Background())
}

func (i *billingProfilePtrType) ToBillingProfilePtrOutputWithContext(ctx context.Context) BillingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingProfilePtrOutput)
}

// Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version: 2019-03-01.
type BillingProfileOutput struct{ *pulumi.OutputState }

func (BillingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingProfile)(nil)).Elem()
}

func (o BillingProfileOutput) ToBillingProfileOutput() BillingProfileOutput {
	return o
}

func (o BillingProfileOutput) ToBillingProfileOutputWithContext(ctx context.Context) BillingProfileOutput {
	return o
}

func (o BillingProfileOutput) ToBillingProfilePtrOutput() BillingProfilePtrOutput {
	return o.ToBillingProfilePtrOutputWithContext(context.Background())
}

func (o BillingProfileOutput) ToBillingProfilePtrOutputWithContext(ctx context.Context) BillingProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BillingProfile) *BillingProfile {
		return &v
	}).(BillingProfilePtrOutput)
}

// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
func (o BillingProfileOutput) MaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BillingProfile) *float64 { return v.MaxPrice }).(pulumi.Float64PtrOutput)
}

type BillingProfilePtrOutput struct{ *pulumi.OutputState }

func (BillingProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingProfile)(nil)).Elem()
}

func (o BillingProfilePtrOutput) ToBillingProfilePtrOutput() BillingProfilePtrOutput {
	return o
}

func (o BillingProfilePtrOutput) ToBillingProfilePtrOutputWithContext(ctx context.Context) BillingProfilePtrOutput {
	return o
}

func (o BillingProfilePtrOutput) Elem() BillingProfileOutput {
	return o.ApplyT(func(v *BillingProfile) BillingProfile {
		if v != nil {
			return *v
		}
		var ret BillingProfile
		return ret
	}).(BillingProfileOutput)
}

// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
func (o BillingProfilePtrOutput) MaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BillingProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxPrice
	}).(pulumi.Float64PtrOutput)
}

// Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version: 2019-03-01.
type BillingProfileResponse struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
	MaxPrice *float64 `pulumi:"maxPrice"`
}

// Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version: 2019-03-01.
type BillingProfileResponseOutput struct{ *pulumi.OutputState }

func (BillingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingProfileResponse)(nil)).Elem()
}

func (o BillingProfileResponseOutput) ToBillingProfileResponseOutput() BillingProfileResponseOutput {
	return o
}

func (o BillingProfileResponseOutput) ToBillingProfileResponseOutputWithContext(ctx context.Context) BillingProfileResponseOutput {
	return o
}

// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
func (o BillingProfileResponseOutput) MaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BillingProfileResponse) *float64 { return v.MaxPrice }).(pulumi.Float64PtrOutput)
}

type BillingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (BillingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingProfileResponse)(nil)).Elem()
}

func (o BillingProfileResponsePtrOutput) ToBillingProfileResponsePtrOutput() BillingProfileResponsePtrOutput {
	return o
}

func (o BillingProfileResponsePtrOutput) ToBillingProfileResponsePtrOutputWithContext(ctx context.Context) BillingProfileResponsePtrOutput {
	return o
}

func (o BillingProfileResponsePtrOutput) Elem() BillingProfileResponseOutput {
	return o.ApplyT(func(v *BillingProfileResponse) BillingProfileResponse {
		if v != nil {
			return *v
		}
		var ret BillingProfileResponse
		return ret
	}).(BillingProfileResponseOutput)
}

// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars. <br><br> This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure Spot price. <br><br> The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS. <br><br> Possible values are: <br><br> - Any decimal value greater than zero. Example: 0.01538 <br><br> -1 – indicates default price to be up-to on-demand. <br><br> You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if it is not provided by you. <br><br>Minimum api-version: 2019-03-01.
func (o BillingProfileResponsePtrOutput) MaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BillingProfileResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxPrice
	}).(pulumi.Float64PtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnostics struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `pulumi:"enabled"`
	// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageUri *string `pulumi:"storageUri"`
}

// BootDiagnosticsInput is an input type that accepts BootDiagnosticsArgs and BootDiagnosticsOutput values.
// You can construct a concrete instance of `BootDiagnosticsInput` via:
//
//	BootDiagnosticsArgs{...}
type BootDiagnosticsInput interface {
	pulumi.Input

	ToBootDiagnosticsOutput() BootDiagnosticsOutput
	ToBootDiagnosticsOutputWithContext(context.Context) BootDiagnosticsOutput
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsArgs struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageUri pulumi.StringPtrInput `pulumi:"storageUri"`
}

func (BootDiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnostics)(nil)).Elem()
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsOutput() BootDiagnosticsOutput {
	return i.ToBootDiagnosticsOutputWithContext(context.Background())
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsOutputWithContext(ctx context.Context) BootDiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiagnosticsOutput)
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput {
	return i.ToBootDiagnosticsPtrOutputWithContext(context.Background())
}

func (i BootDiagnosticsArgs) ToBootDiagnosticsPtrOutputWithContext(ctx context.Context) BootDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiagnosticsOutput).ToBootDiagnosticsPtrOutputWithContext(ctx)
}

// BootDiagnosticsPtrInput is an input type that accepts BootDiagnosticsArgs, BootDiagnosticsPtr and BootDiagnosticsPtrOutput values.
// You can construct a concrete instance of `BootDiagnosticsPtrInput` via:
//
//	        BootDiagnosticsArgs{...}
//
//	or:
//
//	        nil
type BootDiagnosticsPtrInput interface {
	pulumi.Input

	ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput
	ToBootDiagnosticsPtrOutputWithContext(context.Context) BootDiagnosticsPtrOutput
}

type bootDiagnosticsPtrType BootDiagnosticsArgs

func BootDiagnosticsPtr(v *BootDiagnosticsArgs) BootDiagnosticsPtrInput {
	return (*bootDiagnosticsPtrType)(v)
}

func (*bootDiagnosticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnostics)(nil)).Elem()
}

func (i *bootDiagnosticsPtrType) ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput {
	return i.ToBootDiagnosticsPtrOutputWithContext(context.Background())
}

func (i *bootDiagnosticsPtrType) ToBootDiagnosticsPtrOutputWithContext(ctx context.Context) BootDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiagnosticsPtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnostics)(nil)).Elem()
}

func (o BootDiagnosticsOutput) ToBootDiagnosticsOutput() BootDiagnosticsOutput {
	return o
}

func (o BootDiagnosticsOutput) ToBootDiagnosticsOutputWithContext(ctx context.Context) BootDiagnosticsOutput {
	return o
}

func (o BootDiagnosticsOutput) ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput {
	return o.ToBootDiagnosticsPtrOutputWithContext(context.Background())
}

func (o BootDiagnosticsOutput) ToBootDiagnosticsPtrOutputWithContext(ctx context.Context) BootDiagnosticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootDiagnostics) *BootDiagnostics {
		return &v
	}).(BootDiagnosticsPtrOutput)
}

// Whether boot diagnostics should be enabled on the Virtual Machine.
func (o BootDiagnosticsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BootDiagnostics) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
func (o BootDiagnosticsOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDiagnostics) *string { return v.StorageUri }).(pulumi.StringPtrOutput)
}

type BootDiagnosticsPtrOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnostics)(nil)).Elem()
}

func (o BootDiagnosticsPtrOutput) ToBootDiagnosticsPtrOutput() BootDiagnosticsPtrOutput {
	return o
}

func (o BootDiagnosticsPtrOutput) ToBootDiagnosticsPtrOutputWithContext(ctx context.Context) BootDiagnosticsPtrOutput {
	return o
}

func (o BootDiagnosticsPtrOutput) Elem() BootDiagnosticsOutput {
	return o.ApplyT(func(v *BootDiagnostics) BootDiagnostics {
		if v != nil {
			return *v
		}
		var ret BootDiagnostics
		return ret
	}).(BootDiagnosticsOutput)
}

// Whether boot diagnostics should be enabled on the Virtual Machine.
func (o BootDiagnosticsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BootDiagnostics) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
func (o BootDiagnosticsPtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnostics) *string {
		if v == nil {
			return nil
		}
		return v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceViewResponse struct {
	// The console screenshot blob URI. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
	ConsoleScreenshotBlobUri string `pulumi:"consoleScreenshotBlobUri"`
	// The serial console log blob Uri. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
	SerialConsoleLogBlobUri string `pulumi:"serialConsoleLogBlobUri"`
	// The boot diagnostics status information for the VM. **Note:** It will be set only if there are errors encountered in enabling boot diagnostics.
	Status InstanceViewStatusResponse `pulumi:"status"`
}

// The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnosticsInstanceViewResponse)(nil)).Elem()
}

func (o BootDiagnosticsInstanceViewResponseOutput) ToBootDiagnosticsInstanceViewResponseOutput() BootDiagnosticsInstanceViewResponseOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponseOutput) ToBootDiagnosticsInstanceViewResponseOutputWithContext(ctx context.Context) BootDiagnosticsInstanceViewResponseOutput {
	return o
}

// The console screenshot blob URI. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponseOutput) ConsoleScreenshotBlobUri() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) string { return v.ConsoleScreenshotBlobUri }).(pulumi.StringOutput)
}

// The serial console log blob Uri. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponseOutput) SerialConsoleLogBlobUri() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) string { return v.SerialConsoleLogBlobUri }).(pulumi.StringOutput)
}

// The boot diagnostics status information for the VM. **Note:** It will be set only if there are errors encountered in enabling boot diagnostics.
func (o BootDiagnosticsInstanceViewResponseOutput) Status() InstanceViewStatusResponseOutput {
	return o.ApplyT(func(v BootDiagnosticsInstanceViewResponse) InstanceViewStatusResponse { return v.Status }).(InstanceViewStatusResponseOutput)
}

type BootDiagnosticsInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnosticsInstanceViewResponse)(nil)).Elem()
}

func (o BootDiagnosticsInstanceViewResponsePtrOutput) ToBootDiagnosticsInstanceViewResponsePtrOutput() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponsePtrOutput) ToBootDiagnosticsInstanceViewResponsePtrOutputWithContext(ctx context.Context) BootDiagnosticsInstanceViewResponsePtrOutput {
	return o
}

func (o BootDiagnosticsInstanceViewResponsePtrOutput) Elem() BootDiagnosticsInstanceViewResponseOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) BootDiagnosticsInstanceViewResponse {
		if v != nil {
			return *v
		}
		var ret BootDiagnosticsInstanceViewResponse
		return ret
	}).(BootDiagnosticsInstanceViewResponseOutput)
}

// The console screenshot blob URI. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponsePtrOutput) ConsoleScreenshotBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConsoleScreenshotBlobUri
	}).(pulumi.StringPtrOutput)
}

// The serial console log blob Uri. **Note:** This will **not** be set if boot diagnostics is currently enabled with managed storage.
func (o BootDiagnosticsInstanceViewResponsePtrOutput) SerialConsoleLogBlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SerialConsoleLogBlobUri
	}).(pulumi.StringPtrOutput)
}

// The boot diagnostics status information for the VM. **Note:** It will be set only if there are errors encountered in enabling boot diagnostics.
func (o BootDiagnosticsInstanceViewResponsePtrOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsInstanceViewResponse) *InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(InstanceViewStatusResponsePtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsResponse struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `pulumi:"enabled"`
	// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageUri *string `pulumi:"storageUri"`
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiagnosticsResponse)(nil)).Elem()
}

func (o BootDiagnosticsResponseOutput) ToBootDiagnosticsResponseOutput() BootDiagnosticsResponseOutput {
	return o
}

func (o BootDiagnosticsResponseOutput) ToBootDiagnosticsResponseOutputWithContext(ctx context.Context) BootDiagnosticsResponseOutput {
	return o
}

// Whether boot diagnostics should be enabled on the Virtual Machine.
func (o BootDiagnosticsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BootDiagnosticsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
func (o BootDiagnosticsResponseOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDiagnosticsResponse) *string { return v.StorageUri }).(pulumi.StringPtrOutput)
}

type BootDiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (BootDiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiagnosticsResponse)(nil)).Elem()
}

func (o BootDiagnosticsResponsePtrOutput) ToBootDiagnosticsResponsePtrOutput() BootDiagnosticsResponsePtrOutput {
	return o
}

func (o BootDiagnosticsResponsePtrOutput) ToBootDiagnosticsResponsePtrOutputWithContext(ctx context.Context) BootDiagnosticsResponsePtrOutput {
	return o
}

func (o BootDiagnosticsResponsePtrOutput) Elem() BootDiagnosticsResponseOutput {
	return o.ApplyT(func(v *BootDiagnosticsResponse) BootDiagnosticsResponse {
		if v != nil {
			return *v
		}
		var ret BootDiagnosticsResponse
		return ret
	}).(BootDiagnosticsResponseOutput)
}

// Whether boot diagnostics should be enabled on the Virtual Machine.
func (o BootDiagnosticsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Uri of the storage account to use for placing the console output and screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
func (o BootDiagnosticsResponsePtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDiagnosticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageUri
	}).(pulumi.StringPtrOutput)
}

type CapacityReservationGroupInstanceViewResponse struct {
	// List of instance view of the capacity reservations under the capacity reservation group.
	CapacityReservations []CapacityReservationInstanceViewWithNameResponse `pulumi:"capacityReservations"`
	// List of the subscriptions that the capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
	SharedSubscriptionIds []SubResourceReadOnlyResponse `pulumi:"sharedSubscriptionIds"`
}

type CapacityReservationGroupInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationGroupInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupInstanceViewResponse)(nil)).Elem()
}

func (o CapacityReservationGroupInstanceViewResponseOutput) ToCapacityReservationGroupInstanceViewResponseOutput() CapacityReservationGroupInstanceViewResponseOutput {
	return o
}

func (o CapacityReservationGroupInstanceViewResponseOutput) ToCapacityReservationGroupInstanceViewResponseOutputWithContext(ctx context.Context) CapacityReservationGroupInstanceViewResponseOutput {
	return o
}

// List of instance view of the capacity reservations under the capacity reservation group.
func (o CapacityReservationGroupInstanceViewResponseOutput) CapacityReservations() CapacityReservationInstanceViewWithNameResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationGroupInstanceViewResponse) []CapacityReservationInstanceViewWithNameResponse {
		return v.CapacityReservations
	}).(CapacityReservationInstanceViewWithNameResponseArrayOutput)
}

// List of the subscriptions that the capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
func (o CapacityReservationGroupInstanceViewResponseOutput) SharedSubscriptionIds() SubResourceReadOnlyResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationGroupInstanceViewResponse) []SubResourceReadOnlyResponse {
		return v.SharedSubscriptionIds
	}).(SubResourceReadOnlyResponseArrayOutput)
}

// The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations.
type CapacityReservationInstanceViewResponse struct {
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilizationResponse `pulumi:"utilizationInfo"`
}

// The instance view of a capacity reservation that provides as snapshot of the runtime properties of the capacity reservation that is managed by the platform and can change outside of control plane operations.
type CapacityReservationInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationInstanceViewResponse)(nil)).Elem()
}

func (o CapacityReservationInstanceViewResponseOutput) ToCapacityReservationInstanceViewResponseOutput() CapacityReservationInstanceViewResponseOutput {
	return o
}

func (o CapacityReservationInstanceViewResponseOutput) ToCapacityReservationInstanceViewResponseOutputWithContext(ctx context.Context) CapacityReservationInstanceViewResponseOutput {
	return o
}

// The resource status information.
func (o CapacityReservationInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// Unutilized capacity of the capacity reservation.
func (o CapacityReservationInstanceViewResponseOutput) UtilizationInfo() CapacityReservationUtilizationResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewResponse) *CapacityReservationUtilizationResponse {
		return v.UtilizationInfo
	}).(CapacityReservationUtilizationResponsePtrOutput)
}

// The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group.
type CapacityReservationInstanceViewWithNameResponse struct {
	// The name of the capacity reservation.
	Name string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilizationResponse `pulumi:"utilizationInfo"`
}

// The instance view of a capacity reservation that includes the name of the capacity reservation. It is used for the response to the instance view of a capacity reservation group.
type CapacityReservationInstanceViewWithNameResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationInstanceViewWithNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationInstanceViewWithNameResponse)(nil)).Elem()
}

func (o CapacityReservationInstanceViewWithNameResponseOutput) ToCapacityReservationInstanceViewWithNameResponseOutput() CapacityReservationInstanceViewWithNameResponseOutput {
	return o
}

func (o CapacityReservationInstanceViewWithNameResponseOutput) ToCapacityReservationInstanceViewWithNameResponseOutputWithContext(ctx context.Context) CapacityReservationInstanceViewWithNameResponseOutput {
	return o
}

// The name of the capacity reservation.
func (o CapacityReservationInstanceViewWithNameResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewWithNameResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource status information.
func (o CapacityReservationInstanceViewWithNameResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewWithNameResponse) []InstanceViewStatusResponse {
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// Unutilized capacity of the capacity reservation.
func (o CapacityReservationInstanceViewWithNameResponseOutput) UtilizationInfo() CapacityReservationUtilizationResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationInstanceViewWithNameResponse) *CapacityReservationUtilizationResponse {
		return v.UtilizationInfo
	}).(CapacityReservationUtilizationResponsePtrOutput)
}

type CapacityReservationInstanceViewWithNameResponseArrayOutput struct{ *pulumi.OutputState }

func (CapacityReservationInstanceViewWithNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CapacityReservationInstanceViewWithNameResponse)(nil)).Elem()
}

func (o CapacityReservationInstanceViewWithNameResponseArrayOutput) ToCapacityReservationInstanceViewWithNameResponseArrayOutput() CapacityReservationInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o CapacityReservationInstanceViewWithNameResponseArrayOutput) ToCapacityReservationInstanceViewWithNameResponseArrayOutputWithContext(ctx context.Context) CapacityReservationInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o CapacityReservationInstanceViewWithNameResponseArrayOutput) Index(i pulumi.IntInput) CapacityReservationInstanceViewWithNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CapacityReservationInstanceViewWithNameResponse {
		return vs[0].([]CapacityReservationInstanceViewWithNameResponse)[vs[1].(int)]
	}).(CapacityReservationInstanceViewWithNameResponseOutput)
}

// The parameters of a capacity reservation Profile.
type CapacityReservationProfile struct {
	// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
	CapacityReservationGroup *SubResource `pulumi:"capacityReservationGroup"`
}

// CapacityReservationProfileInput is an input type that accepts CapacityReservationProfileArgs and CapacityReservationProfileOutput values.
// You can construct a concrete instance of `CapacityReservationProfileInput` via:
//
//	CapacityReservationProfileArgs{...}
type CapacityReservationProfileInput interface {
	pulumi.Input

	ToCapacityReservationProfileOutput() CapacityReservationProfileOutput
	ToCapacityReservationProfileOutputWithContext(context.Context) CapacityReservationProfileOutput
}

// The parameters of a capacity reservation Profile.
type CapacityReservationProfileArgs struct {
	// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
	CapacityReservationGroup SubResourcePtrInput `pulumi:"capacityReservationGroup"`
}

func (CapacityReservationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationProfile)(nil)).Elem()
}

func (i CapacityReservationProfileArgs) ToCapacityReservationProfileOutput() CapacityReservationProfileOutput {
	return i.ToCapacityReservationProfileOutputWithContext(context.Background())
}

func (i CapacityReservationProfileArgs) ToCapacityReservationProfileOutputWithContext(ctx context.Context) CapacityReservationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationProfileOutput)
}

func (i CapacityReservationProfileArgs) ToCapacityReservationProfilePtrOutput() CapacityReservationProfilePtrOutput {
	return i.ToCapacityReservationProfilePtrOutputWithContext(context.Background())
}

func (i CapacityReservationProfileArgs) ToCapacityReservationProfilePtrOutputWithContext(ctx context.Context) CapacityReservationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationProfileOutput).ToCapacityReservationProfilePtrOutputWithContext(ctx)
}

// CapacityReservationProfilePtrInput is an input type that accepts CapacityReservationProfileArgs, CapacityReservationProfilePtr and CapacityReservationProfilePtrOutput values.
// You can construct a concrete instance of `CapacityReservationProfilePtrInput` via:
//
//	        CapacityReservationProfileArgs{...}
//
//	or:
//
//	        nil
type CapacityReservationProfilePtrInput interface {
	pulumi.Input

	ToCapacityReservationProfilePtrOutput() CapacityReservationProfilePtrOutput
	ToCapacityReservationProfilePtrOutputWithContext(context.Context) CapacityReservationProfilePtrOutput
}

type capacityReservationProfilePtrType CapacityReservationProfileArgs

func CapacityReservationProfilePtr(v *CapacityReservationProfileArgs) CapacityReservationProfilePtrInput {
	return (*capacityReservationProfilePtrType)(v)
}

func (*capacityReservationProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationProfile)(nil)).Elem()
}

func (i *capacityReservationProfilePtrType) ToCapacityReservationProfilePtrOutput() CapacityReservationProfilePtrOutput {
	return i.ToCapacityReservationProfilePtrOutputWithContext(context.Background())
}

func (i *capacityReservationProfilePtrType) ToCapacityReservationProfilePtrOutputWithContext(ctx context.Context) CapacityReservationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationProfilePtrOutput)
}

// The parameters of a capacity reservation Profile.
type CapacityReservationProfileOutput struct{ *pulumi.OutputState }

func (CapacityReservationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationProfile)(nil)).Elem()
}

func (o CapacityReservationProfileOutput) ToCapacityReservationProfileOutput() CapacityReservationProfileOutput {
	return o
}

func (o CapacityReservationProfileOutput) ToCapacityReservationProfileOutputWithContext(ctx context.Context) CapacityReservationProfileOutput {
	return o
}

func (o CapacityReservationProfileOutput) ToCapacityReservationProfilePtrOutput() CapacityReservationProfilePtrOutput {
	return o.ToCapacityReservationProfilePtrOutputWithContext(context.Background())
}

func (o CapacityReservationProfileOutput) ToCapacityReservationProfilePtrOutputWithContext(ctx context.Context) CapacityReservationProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CapacityReservationProfile) *CapacityReservationProfile {
		return &v
	}).(CapacityReservationProfilePtrOutput)
}

// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
func (o CapacityReservationProfileOutput) CapacityReservationGroup() SubResourcePtrOutput {
	return o.ApplyT(func(v CapacityReservationProfile) *SubResource { return v.CapacityReservationGroup }).(SubResourcePtrOutput)
}

type CapacityReservationProfilePtrOutput struct{ *pulumi.OutputState }

func (CapacityReservationProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationProfile)(nil)).Elem()
}

func (o CapacityReservationProfilePtrOutput) ToCapacityReservationProfilePtrOutput() CapacityReservationProfilePtrOutput {
	return o
}

func (o CapacityReservationProfilePtrOutput) ToCapacityReservationProfilePtrOutputWithContext(ctx context.Context) CapacityReservationProfilePtrOutput {
	return o
}

func (o CapacityReservationProfilePtrOutput) Elem() CapacityReservationProfileOutput {
	return o.ApplyT(func(v *CapacityReservationProfile) CapacityReservationProfile {
		if v != nil {
			return *v
		}
		var ret CapacityReservationProfile
		return ret
	}).(CapacityReservationProfileOutput)
}

// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
func (o CapacityReservationProfilePtrOutput) CapacityReservationGroup() SubResourcePtrOutput {
	return o.ApplyT(func(v *CapacityReservationProfile) *SubResource {
		if v == nil {
			return nil
		}
		return v.CapacityReservationGroup
	}).(SubResourcePtrOutput)
}

// The parameters of a capacity reservation Profile.
type CapacityReservationProfileResponse struct {
	// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
	CapacityReservationGroup *SubResourceResponse `pulumi:"capacityReservationGroup"`
}

// The parameters of a capacity reservation Profile.
type CapacityReservationProfileResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationProfileResponse)(nil)).Elem()
}

func (o CapacityReservationProfileResponseOutput) ToCapacityReservationProfileResponseOutput() CapacityReservationProfileResponseOutput {
	return o
}

func (o CapacityReservationProfileResponseOutput) ToCapacityReservationProfileResponseOutputWithContext(ctx context.Context) CapacityReservationProfileResponseOutput {
	return o
}

// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
func (o CapacityReservationProfileResponseOutput) CapacityReservationGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationProfileResponse) *SubResourceResponse { return v.CapacityReservationGroup }).(SubResourceResponsePtrOutput)
}

type CapacityReservationProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CapacityReservationProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationProfileResponse)(nil)).Elem()
}

func (o CapacityReservationProfileResponsePtrOutput) ToCapacityReservationProfileResponsePtrOutput() CapacityReservationProfileResponsePtrOutput {
	return o
}

func (o CapacityReservationProfileResponsePtrOutput) ToCapacityReservationProfileResponsePtrOutputWithContext(ctx context.Context) CapacityReservationProfileResponsePtrOutput {
	return o
}

func (o CapacityReservationProfileResponsePtrOutput) Elem() CapacityReservationProfileResponseOutput {
	return o.ApplyT(func(v *CapacityReservationProfileResponse) CapacityReservationProfileResponse {
		if v != nil {
			return *v
		}
		var ret CapacityReservationProfileResponse
		return ret
	}).(CapacityReservationProfileResponseOutput)
}

// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset vm instances provided enough capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more details.
func (o CapacityReservationProfileResponsePtrOutput) CapacityReservationGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *CapacityReservationProfileResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.CapacityReservationGroup
	}).(SubResourceResponsePtrOutput)
}

// Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilizationResponse struct {
	// The value provides the current capacity of the VM size which was reserved successfully and for which the customer is getting billed. Minimum api-version: 2022-08-01.
	CurrentCapacity int `pulumi:"currentCapacity"`
	// A list of all virtual machines resource ids allocated against the capacity reservation.
	VirtualMachinesAllocated []SubResourceReadOnlyResponse `pulumi:"virtualMachinesAllocated"`
}

// Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilizationResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationUtilizationResponse)(nil)).Elem()
}

func (o CapacityReservationUtilizationResponseOutput) ToCapacityReservationUtilizationResponseOutput() CapacityReservationUtilizationResponseOutput {
	return o
}

func (o CapacityReservationUtilizationResponseOutput) ToCapacityReservationUtilizationResponseOutputWithContext(ctx context.Context) CapacityReservationUtilizationResponseOutput {
	return o
}

// The value provides the current capacity of the VM size which was reserved successfully and for which the customer is getting billed. Minimum api-version: 2022-08-01.
func (o CapacityReservationUtilizationResponseOutput) CurrentCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityReservationUtilizationResponse) int { return v.CurrentCapacity }).(pulumi.IntOutput)
}

// A list of all virtual machines resource ids allocated against the capacity reservation.
func (o CapacityReservationUtilizationResponseOutput) VirtualMachinesAllocated() SubResourceReadOnlyResponseArrayOutput {
	return o.ApplyT(func(v CapacityReservationUtilizationResponse) []SubResourceReadOnlyResponse {
		return v.VirtualMachinesAllocated
	}).(SubResourceReadOnlyResponseArrayOutput)
}

type CapacityReservationUtilizationResponsePtrOutput struct{ *pulumi.OutputState }

func (CapacityReservationUtilizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityReservationUtilizationResponse)(nil)).Elem()
}

func (o CapacityReservationUtilizationResponsePtrOutput) ToCapacityReservationUtilizationResponsePtrOutput() CapacityReservationUtilizationResponsePtrOutput {
	return o
}

func (o CapacityReservationUtilizationResponsePtrOutput) ToCapacityReservationUtilizationResponsePtrOutputWithContext(ctx context.Context) CapacityReservationUtilizationResponsePtrOutput {
	return o
}

func (o CapacityReservationUtilizationResponsePtrOutput) Elem() CapacityReservationUtilizationResponseOutput {
	return o.ApplyT(func(v *CapacityReservationUtilizationResponse) CapacityReservationUtilizationResponse {
		if v != nil {
			return *v
		}
		var ret CapacityReservationUtilizationResponse
		return ret
	}).(CapacityReservationUtilizationResponseOutput)
}

// The value provides the current capacity of the VM size which was reserved successfully and for which the customer is getting billed. Minimum api-version: 2022-08-01.
func (o CapacityReservationUtilizationResponsePtrOutput) CurrentCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CapacityReservationUtilizationResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentCapacity
	}).(pulumi.IntPtrOutput)
}

// A list of all virtual machines resource ids allocated against the capacity reservation.
func (o CapacityReservationUtilizationResponsePtrOutput) VirtualMachinesAllocated() SubResourceReadOnlyResponseArrayOutput {
	return o.ApplyT(func(v *CapacityReservationUtilizationResponse) []SubResourceReadOnlyResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachinesAllocated
	}).(SubResourceReadOnlyResponseArrayOutput)
}

// Describes a cloud service extension profile.
type CloudServiceExtensionProfile struct {
	// List of extensions for the cloud service.
	Extensions []Extension `pulumi:"extensions"`
}

// CloudServiceExtensionProfileInput is an input type that accepts CloudServiceExtensionProfileArgs and CloudServiceExtensionProfileOutput values.
// You can construct a concrete instance of `CloudServiceExtensionProfileInput` via:
//
//	CloudServiceExtensionProfileArgs{...}
type CloudServiceExtensionProfileInput interface {
	pulumi.Input

	ToCloudServiceExtensionProfileOutput() CloudServiceExtensionProfileOutput
	ToCloudServiceExtensionProfileOutputWithContext(context.Context) CloudServiceExtensionProfileOutput
}

// Describes a cloud service extension profile.
type CloudServiceExtensionProfileArgs struct {
	// List of extensions for the cloud service.
	Extensions ExtensionArrayInput `pulumi:"extensions"`
}

func (CloudServiceExtensionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceExtensionProfile)(nil)).Elem()
}

func (i CloudServiceExtensionProfileArgs) ToCloudServiceExtensionProfileOutput() CloudServiceExtensionProfileOutput {
	return i.ToCloudServiceExtensionProfileOutputWithContext(context.Background())
}

func (i CloudServiceExtensionProfileArgs) ToCloudServiceExtensionProfileOutputWithContext(ctx context.Context) CloudServiceExtensionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceExtensionProfileOutput)
}

func (i CloudServiceExtensionProfileArgs) ToCloudServiceExtensionProfilePtrOutput() CloudServiceExtensionProfilePtrOutput {
	return i.ToCloudServiceExtensionProfilePtrOutputWithContext(context.Background())
}

func (i CloudServiceExtensionProfileArgs) ToCloudServiceExtensionProfilePtrOutputWithContext(ctx context.Context) CloudServiceExtensionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceExtensionProfileOutput).ToCloudServiceExtensionProfilePtrOutputWithContext(ctx)
}

// CloudServiceExtensionProfilePtrInput is an input type that accepts CloudServiceExtensionProfileArgs, CloudServiceExtensionProfilePtr and CloudServiceExtensionProfilePtrOutput values.
// You can construct a concrete instance of `CloudServiceExtensionProfilePtrInput` via:
//
//	        CloudServiceExtensionProfileArgs{...}
//
//	or:
//
//	        nil
type CloudServiceExtensionProfilePtrInput interface {
	pulumi.Input

	ToCloudServiceExtensionProfilePtrOutput() CloudServiceExtensionProfilePtrOutput
	ToCloudServiceExtensionProfilePtrOutputWithContext(context.Context) CloudServiceExtensionProfilePtrOutput
}

type cloudServiceExtensionProfilePtrType CloudServiceExtensionProfileArgs

func CloudServiceExtensionProfilePtr(v *CloudServiceExtensionProfileArgs) CloudServiceExtensionProfilePtrInput {
	return (*cloudServiceExtensionProfilePtrType)(v)
}

func (*cloudServiceExtensionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceExtensionProfile)(nil)).Elem()
}

func (i *cloudServiceExtensionProfilePtrType) ToCloudServiceExtensionProfilePtrOutput() CloudServiceExtensionProfilePtrOutput {
	return i.ToCloudServiceExtensionProfilePtrOutputWithContext(context.Background())
}

func (i *cloudServiceExtensionProfilePtrType) ToCloudServiceExtensionProfilePtrOutputWithContext(ctx context.Context) CloudServiceExtensionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceExtensionProfilePtrOutput)
}

// Describes a cloud service extension profile.
type CloudServiceExtensionProfileOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceExtensionProfile)(nil)).Elem()
}

func (o CloudServiceExtensionProfileOutput) ToCloudServiceExtensionProfileOutput() CloudServiceExtensionProfileOutput {
	return o
}

func (o CloudServiceExtensionProfileOutput) ToCloudServiceExtensionProfileOutputWithContext(ctx context.Context) CloudServiceExtensionProfileOutput {
	return o
}

func (o CloudServiceExtensionProfileOutput) ToCloudServiceExtensionProfilePtrOutput() CloudServiceExtensionProfilePtrOutput {
	return o.ToCloudServiceExtensionProfilePtrOutputWithContext(context.Background())
}

func (o CloudServiceExtensionProfileOutput) ToCloudServiceExtensionProfilePtrOutputWithContext(ctx context.Context) CloudServiceExtensionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceExtensionProfile) *CloudServiceExtensionProfile {
		return &v
	}).(CloudServiceExtensionProfilePtrOutput)
}

// List of extensions for the cloud service.
func (o CloudServiceExtensionProfileOutput) Extensions() ExtensionArrayOutput {
	return o.ApplyT(func(v CloudServiceExtensionProfile) []Extension { return v.Extensions }).(ExtensionArrayOutput)
}

type CloudServiceExtensionProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceExtensionProfile)(nil)).Elem()
}

func (o CloudServiceExtensionProfilePtrOutput) ToCloudServiceExtensionProfilePtrOutput() CloudServiceExtensionProfilePtrOutput {
	return o
}

func (o CloudServiceExtensionProfilePtrOutput) ToCloudServiceExtensionProfilePtrOutputWithContext(ctx context.Context) CloudServiceExtensionProfilePtrOutput {
	return o
}

func (o CloudServiceExtensionProfilePtrOutput) Elem() CloudServiceExtensionProfileOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProfile) CloudServiceExtensionProfile {
		if v != nil {
			return *v
		}
		var ret CloudServiceExtensionProfile
		return ret
	}).(CloudServiceExtensionProfileOutput)
}

// List of extensions for the cloud service.
func (o CloudServiceExtensionProfilePtrOutput) Extensions() ExtensionArrayOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProfile) []Extension {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionArrayOutput)
}

// Describes a cloud service extension profile.
type CloudServiceExtensionProfileResponse struct {
	// List of extensions for the cloud service.
	Extensions []ExtensionResponse `pulumi:"extensions"`
}

// Describes a cloud service extension profile.
type CloudServiceExtensionProfileResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceExtensionProfileResponse)(nil)).Elem()
}

func (o CloudServiceExtensionProfileResponseOutput) ToCloudServiceExtensionProfileResponseOutput() CloudServiceExtensionProfileResponseOutput {
	return o
}

func (o CloudServiceExtensionProfileResponseOutput) ToCloudServiceExtensionProfileResponseOutputWithContext(ctx context.Context) CloudServiceExtensionProfileResponseOutput {
	return o
}

// List of extensions for the cloud service.
func (o CloudServiceExtensionProfileResponseOutput) Extensions() ExtensionResponseArrayOutput {
	return o.ApplyT(func(v CloudServiceExtensionProfileResponse) []ExtensionResponse { return v.Extensions }).(ExtensionResponseArrayOutput)
}

type CloudServiceExtensionProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceExtensionProfileResponse)(nil)).Elem()
}

func (o CloudServiceExtensionProfileResponsePtrOutput) ToCloudServiceExtensionProfileResponsePtrOutput() CloudServiceExtensionProfileResponsePtrOutput {
	return o
}

func (o CloudServiceExtensionProfileResponsePtrOutput) ToCloudServiceExtensionProfileResponsePtrOutputWithContext(ctx context.Context) CloudServiceExtensionProfileResponsePtrOutput {
	return o
}

func (o CloudServiceExtensionProfileResponsePtrOutput) Elem() CloudServiceExtensionProfileResponseOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProfileResponse) CloudServiceExtensionProfileResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceExtensionProfileResponse
		return ret
	}).(CloudServiceExtensionProfileResponseOutput)
}

// List of extensions for the cloud service.
func (o CloudServiceExtensionProfileResponsePtrOutput) Extensions() ExtensionResponseArrayOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProfileResponse) []ExtensionResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionResponseArrayOutput)
}

// Extension Properties.
type CloudServiceExtensionProperties struct {
	// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Tag to force apply the provided public and protected settings.
	// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
	// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
	// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
	// it is up to handler implementation whether to re-run it or not
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Protected settings for the extension which are encrypted before sent to the role instance.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
	ProtectedSettingsFromKeyVault *CloudServiceVaultAndSecretReference `pulumi:"protectedSettingsFromKeyVault"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
	RolesAppliedTo []string `pulumi:"rolesAppliedTo"`
	// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
	Settings interface{} `pulumi:"settings"`
	// Specifies the type of the extension.
	Type *string `pulumi:"type"`
	// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// CloudServiceExtensionPropertiesInput is an input type that accepts CloudServiceExtensionPropertiesArgs and CloudServiceExtensionPropertiesOutput values.
// You can construct a concrete instance of `CloudServiceExtensionPropertiesInput` via:
//
//	CloudServiceExtensionPropertiesArgs{...}
type CloudServiceExtensionPropertiesInput interface {
	pulumi.Input

	ToCloudServiceExtensionPropertiesOutput() CloudServiceExtensionPropertiesOutput
	ToCloudServiceExtensionPropertiesOutputWithContext(context.Context) CloudServiceExtensionPropertiesOutput
}

// Extension Properties.
type CloudServiceExtensionPropertiesArgs struct {
	// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
	AutoUpgradeMinorVersion pulumi.BoolPtrInput `pulumi:"autoUpgradeMinorVersion"`
	// Tag to force apply the provided public and protected settings.
	// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
	// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
	// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
	// it is up to handler implementation whether to re-run it or not
	ForceUpdateTag pulumi.StringPtrInput `pulumi:"forceUpdateTag"`
	// Protected settings for the extension which are encrypted before sent to the role instance.
	ProtectedSettings pulumi.Input `pulumi:"protectedSettings"`
	// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
	ProtectedSettingsFromKeyVault CloudServiceVaultAndSecretReferencePtrInput `pulumi:"protectedSettingsFromKeyVault"`
	// The name of the extension handler publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
	RolesAppliedTo pulumi.StringArrayInput `pulumi:"rolesAppliedTo"`
	// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
	Settings pulumi.Input `pulumi:"settings"`
	// Specifies the type of the extension.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
	TypeHandlerVersion pulumi.StringPtrInput `pulumi:"typeHandlerVersion"`
}

func (CloudServiceExtensionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceExtensionProperties)(nil)).Elem()
}

func (i CloudServiceExtensionPropertiesArgs) ToCloudServiceExtensionPropertiesOutput() CloudServiceExtensionPropertiesOutput {
	return i.ToCloudServiceExtensionPropertiesOutputWithContext(context.Background())
}

func (i CloudServiceExtensionPropertiesArgs) ToCloudServiceExtensionPropertiesOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceExtensionPropertiesOutput)
}

func (i CloudServiceExtensionPropertiesArgs) ToCloudServiceExtensionPropertiesPtrOutput() CloudServiceExtensionPropertiesPtrOutput {
	return i.ToCloudServiceExtensionPropertiesPtrOutputWithContext(context.Background())
}

func (i CloudServiceExtensionPropertiesArgs) ToCloudServiceExtensionPropertiesPtrOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceExtensionPropertiesOutput).ToCloudServiceExtensionPropertiesPtrOutputWithContext(ctx)
}

// CloudServiceExtensionPropertiesPtrInput is an input type that accepts CloudServiceExtensionPropertiesArgs, CloudServiceExtensionPropertiesPtr and CloudServiceExtensionPropertiesPtrOutput values.
// You can construct a concrete instance of `CloudServiceExtensionPropertiesPtrInput` via:
//
//	        CloudServiceExtensionPropertiesArgs{...}
//
//	or:
//
//	        nil
type CloudServiceExtensionPropertiesPtrInput interface {
	pulumi.Input

	ToCloudServiceExtensionPropertiesPtrOutput() CloudServiceExtensionPropertiesPtrOutput
	ToCloudServiceExtensionPropertiesPtrOutputWithContext(context.Context) CloudServiceExtensionPropertiesPtrOutput
}

type cloudServiceExtensionPropertiesPtrType CloudServiceExtensionPropertiesArgs

func CloudServiceExtensionPropertiesPtr(v *CloudServiceExtensionPropertiesArgs) CloudServiceExtensionPropertiesPtrInput {
	return (*cloudServiceExtensionPropertiesPtrType)(v)
}

func (*cloudServiceExtensionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceExtensionProperties)(nil)).Elem()
}

func (i *cloudServiceExtensionPropertiesPtrType) ToCloudServiceExtensionPropertiesPtrOutput() CloudServiceExtensionPropertiesPtrOutput {
	return i.ToCloudServiceExtensionPropertiesPtrOutputWithContext(context.Background())
}

func (i *cloudServiceExtensionPropertiesPtrType) ToCloudServiceExtensionPropertiesPtrOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceExtensionPropertiesPtrOutput)
}

// Extension Properties.
type CloudServiceExtensionPropertiesOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceExtensionProperties)(nil)).Elem()
}

func (o CloudServiceExtensionPropertiesOutput) ToCloudServiceExtensionPropertiesOutput() CloudServiceExtensionPropertiesOutput {
	return o
}

func (o CloudServiceExtensionPropertiesOutput) ToCloudServiceExtensionPropertiesOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesOutput {
	return o
}

func (o CloudServiceExtensionPropertiesOutput) ToCloudServiceExtensionPropertiesPtrOutput() CloudServiceExtensionPropertiesPtrOutput {
	return o.ToCloudServiceExtensionPropertiesPtrOutputWithContext(context.Background())
}

func (o CloudServiceExtensionPropertiesOutput) ToCloudServiceExtensionPropertiesPtrOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceExtensionProperties) *CloudServiceExtensionProperties {
		return &v
	}).(CloudServiceExtensionPropertiesPtrOutput)
}

// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
func (o CloudServiceExtensionPropertiesOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Tag to force apply the provided public and protected settings.
// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
// it is up to handler implementation whether to re-run it or not
func (o CloudServiceExtensionPropertiesOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Protected settings for the extension which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesOutput) ProtectedSettingsFromKeyVault() CloudServiceVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) *CloudServiceVaultAndSecretReference {
		return v.ProtectedSettingsFromKeyVault
	}).(CloudServiceVaultAndSecretReferencePtrOutput)
}

// The name of the extension handler publisher.
func (o CloudServiceExtensionPropertiesOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
func (o CloudServiceExtensionPropertiesOutput) RolesAppliedTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) []string { return v.RolesAppliedTo }).(pulumi.StringArrayOutput)
}

// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
func (o CloudServiceExtensionPropertiesOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Specifies the type of the extension.
func (o CloudServiceExtensionPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
func (o CloudServiceExtensionPropertiesOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionProperties) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type CloudServiceExtensionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceExtensionProperties)(nil)).Elem()
}

func (o CloudServiceExtensionPropertiesPtrOutput) ToCloudServiceExtensionPropertiesPtrOutput() CloudServiceExtensionPropertiesPtrOutput {
	return o
}

func (o CloudServiceExtensionPropertiesPtrOutput) ToCloudServiceExtensionPropertiesPtrOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesPtrOutput {
	return o
}

func (o CloudServiceExtensionPropertiesPtrOutput) Elem() CloudServiceExtensionPropertiesOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) CloudServiceExtensionProperties {
		if v != nil {
			return *v
		}
		var ret CloudServiceExtensionProperties
		return ret
	}).(CloudServiceExtensionPropertiesOutput)
}

// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
func (o CloudServiceExtensionPropertiesPtrOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgradeMinorVersion
	}).(pulumi.BoolPtrOutput)
}

// Tag to force apply the provided public and protected settings.
// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
// it is up to handler implementation whether to re-run it or not
func (o CloudServiceExtensionPropertiesPtrOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ForceUpdateTag
	}).(pulumi.StringPtrOutput)
}

// Protected settings for the extension which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesPtrOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.ProtectedSettings
	}).(pulumi.AnyOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesPtrOutput) ProtectedSettingsFromKeyVault() CloudServiceVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) *CloudServiceVaultAndSecretReference {
		if v == nil {
			return nil
		}
		return v.ProtectedSettingsFromKeyVault
	}).(CloudServiceVaultAndSecretReferencePtrOutput)
}

// The name of the extension handler publisher.
func (o CloudServiceExtensionPropertiesPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
func (o CloudServiceExtensionPropertiesPtrOutput) RolesAppliedTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) []string {
		if v == nil {
			return nil
		}
		return v.RolesAppliedTo
	}).(pulumi.StringArrayOutput)
}

// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
func (o CloudServiceExtensionPropertiesPtrOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.AnyOutput)
}

// Specifies the type of the extension.
func (o CloudServiceExtensionPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
func (o CloudServiceExtensionPropertiesPtrOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionProperties) *string {
		if v == nil {
			return nil
		}
		return v.TypeHandlerVersion
	}).(pulumi.StringPtrOutput)
}

// Extension Properties.
type CloudServiceExtensionPropertiesResponse struct {
	// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Tag to force apply the provided public and protected settings.
	// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
	// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
	// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
	// it is up to handler implementation whether to re-run it or not
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Protected settings for the extension which are encrypted before sent to the role instance.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
	ProtectedSettingsFromKeyVault *CloudServiceVaultAndSecretReferenceResponse `pulumi:"protectedSettingsFromKeyVault"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
	RolesAppliedTo []string `pulumi:"rolesAppliedTo"`
	// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
	Settings interface{} `pulumi:"settings"`
	// Specifies the type of the extension.
	Type *string `pulumi:"type"`
	// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// Extension Properties.
type CloudServiceExtensionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceExtensionPropertiesResponse)(nil)).Elem()
}

func (o CloudServiceExtensionPropertiesResponseOutput) ToCloudServiceExtensionPropertiesResponseOutput() CloudServiceExtensionPropertiesResponseOutput {
	return o
}

func (o CloudServiceExtensionPropertiesResponseOutput) ToCloudServiceExtensionPropertiesResponseOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesResponseOutput {
	return o
}

// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
func (o CloudServiceExtensionPropertiesResponseOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Tag to force apply the provided public and protected settings.
// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
// it is up to handler implementation whether to re-run it or not
func (o CloudServiceExtensionPropertiesResponseOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Protected settings for the extension which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesResponseOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesResponseOutput) ProtectedSettingsFromKeyVault() CloudServiceVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) *CloudServiceVaultAndSecretReferenceResponse {
		return v.ProtectedSettingsFromKeyVault
	}).(CloudServiceVaultAndSecretReferenceResponsePtrOutput)
}

// The provisioning state, which only appears in the response.
func (o CloudServiceExtensionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o CloudServiceExtensionPropertiesResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
func (o CloudServiceExtensionPropertiesResponseOutput) RolesAppliedTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) []string { return v.RolesAppliedTo }).(pulumi.StringArrayOutput)
}

// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
func (o CloudServiceExtensionPropertiesResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Specifies the type of the extension.
func (o CloudServiceExtensionPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
func (o CloudServiceExtensionPropertiesResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceExtensionPropertiesResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type CloudServiceExtensionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceExtensionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceExtensionPropertiesResponse)(nil)).Elem()
}

func (o CloudServiceExtensionPropertiesResponsePtrOutput) ToCloudServiceExtensionPropertiesResponsePtrOutput() CloudServiceExtensionPropertiesResponsePtrOutput {
	return o
}

func (o CloudServiceExtensionPropertiesResponsePtrOutput) ToCloudServiceExtensionPropertiesResponsePtrOutputWithContext(ctx context.Context) CloudServiceExtensionPropertiesResponsePtrOutput {
	return o
}

func (o CloudServiceExtensionPropertiesResponsePtrOutput) Elem() CloudServiceExtensionPropertiesResponseOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) CloudServiceExtensionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceExtensionPropertiesResponse
		return ret
	}).(CloudServiceExtensionPropertiesResponseOutput)
}

// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutoUpgradeMinorVersion
	}).(pulumi.BoolPtrOutput)
}

// Tag to force apply the provided public and protected settings.
// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
// it is up to handler implementation whether to re-run it or not
func (o CloudServiceExtensionPropertiesResponsePtrOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ForceUpdateTag
	}).(pulumi.StringPtrOutput)
}

// Protected settings for the extension which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ProtectedSettings
	}).(pulumi.AnyOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) ProtectedSettingsFromKeyVault() CloudServiceVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *CloudServiceVaultAndSecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ProtectedSettingsFromKeyVault
	}).(CloudServiceVaultAndSecretReferenceResponsePtrOutput)
}

// The provisioning state, which only appears in the response.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The name of the extension handler publisher.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied to all roles in the cloud service.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) RolesAppliedTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.RolesAppliedTo
	}).(pulumi.StringArrayOutput)
}

// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.AnyOutput)
}

// Specifies the type of the extension.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance.
func (o CloudServiceExtensionPropertiesResponsePtrOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceExtensionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TypeHandlerVersion
	}).(pulumi.StringPtrOutput)
}

// Network Profile for the cloud service.
type CloudServiceNetworkProfile struct {
	// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
	LoadBalancerConfigurations []LoadBalancerConfiguration `pulumi:"loadBalancerConfigurations"`
	// Slot type for the cloud service.
	// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
	// If not specified, the default value is Production.
	SlotType *string `pulumi:"slotType"`
	// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
	SwappableCloudService *SubResource `pulumi:"swappableCloudService"`
}

// CloudServiceNetworkProfileInput is an input type that accepts CloudServiceNetworkProfileArgs and CloudServiceNetworkProfileOutput values.
// You can construct a concrete instance of `CloudServiceNetworkProfileInput` via:
//
//	CloudServiceNetworkProfileArgs{...}
type CloudServiceNetworkProfileInput interface {
	pulumi.Input

	ToCloudServiceNetworkProfileOutput() CloudServiceNetworkProfileOutput
	ToCloudServiceNetworkProfileOutputWithContext(context.Context) CloudServiceNetworkProfileOutput
}

// Network Profile for the cloud service.
type CloudServiceNetworkProfileArgs struct {
	// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
	LoadBalancerConfigurations LoadBalancerConfigurationArrayInput `pulumi:"loadBalancerConfigurations"`
	// Slot type for the cloud service.
	// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
	// If not specified, the default value is Production.
	SlotType pulumi.StringPtrInput `pulumi:"slotType"`
	// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
	SwappableCloudService SubResourcePtrInput `pulumi:"swappableCloudService"`
}

func (CloudServiceNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceNetworkProfile)(nil)).Elem()
}

func (i CloudServiceNetworkProfileArgs) ToCloudServiceNetworkProfileOutput() CloudServiceNetworkProfileOutput {
	return i.ToCloudServiceNetworkProfileOutputWithContext(context.Background())
}

func (i CloudServiceNetworkProfileArgs) ToCloudServiceNetworkProfileOutputWithContext(ctx context.Context) CloudServiceNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceNetworkProfileOutput)
}

func (i CloudServiceNetworkProfileArgs) ToCloudServiceNetworkProfilePtrOutput() CloudServiceNetworkProfilePtrOutput {
	return i.ToCloudServiceNetworkProfilePtrOutputWithContext(context.Background())
}

func (i CloudServiceNetworkProfileArgs) ToCloudServiceNetworkProfilePtrOutputWithContext(ctx context.Context) CloudServiceNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceNetworkProfileOutput).ToCloudServiceNetworkProfilePtrOutputWithContext(ctx)
}

// CloudServiceNetworkProfilePtrInput is an input type that accepts CloudServiceNetworkProfileArgs, CloudServiceNetworkProfilePtr and CloudServiceNetworkProfilePtrOutput values.
// You can construct a concrete instance of `CloudServiceNetworkProfilePtrInput` via:
//
//	        CloudServiceNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type CloudServiceNetworkProfilePtrInput interface {
	pulumi.Input

	ToCloudServiceNetworkProfilePtrOutput() CloudServiceNetworkProfilePtrOutput
	ToCloudServiceNetworkProfilePtrOutputWithContext(context.Context) CloudServiceNetworkProfilePtrOutput
}

type cloudServiceNetworkProfilePtrType CloudServiceNetworkProfileArgs

func CloudServiceNetworkProfilePtr(v *CloudServiceNetworkProfileArgs) CloudServiceNetworkProfilePtrInput {
	return (*cloudServiceNetworkProfilePtrType)(v)
}

func (*cloudServiceNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceNetworkProfile)(nil)).Elem()
}

func (i *cloudServiceNetworkProfilePtrType) ToCloudServiceNetworkProfilePtrOutput() CloudServiceNetworkProfilePtrOutput {
	return i.ToCloudServiceNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *cloudServiceNetworkProfilePtrType) ToCloudServiceNetworkProfilePtrOutputWithContext(ctx context.Context) CloudServiceNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceNetworkProfilePtrOutput)
}

// Network Profile for the cloud service.
type CloudServiceNetworkProfileOutput struct{ *pulumi.OutputState }

func (CloudServiceNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceNetworkProfile)(nil)).Elem()
}

func (o CloudServiceNetworkProfileOutput) ToCloudServiceNetworkProfileOutput() CloudServiceNetworkProfileOutput {
	return o
}

func (o CloudServiceNetworkProfileOutput) ToCloudServiceNetworkProfileOutputWithContext(ctx context.Context) CloudServiceNetworkProfileOutput {
	return o
}

func (o CloudServiceNetworkProfileOutput) ToCloudServiceNetworkProfilePtrOutput() CloudServiceNetworkProfilePtrOutput {
	return o.ToCloudServiceNetworkProfilePtrOutputWithContext(context.Background())
}

func (o CloudServiceNetworkProfileOutput) ToCloudServiceNetworkProfilePtrOutputWithContext(ctx context.Context) CloudServiceNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceNetworkProfile) *CloudServiceNetworkProfile {
		return &v
	}).(CloudServiceNetworkProfilePtrOutput)
}

// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
func (o CloudServiceNetworkProfileOutput) LoadBalancerConfigurations() LoadBalancerConfigurationArrayOutput {
	return o.ApplyT(func(v CloudServiceNetworkProfile) []LoadBalancerConfiguration { return v.LoadBalancerConfigurations }).(LoadBalancerConfigurationArrayOutput)
}

// Slot type for the cloud service.
// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
// If not specified, the default value is Production.
func (o CloudServiceNetworkProfileOutput) SlotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceNetworkProfile) *string { return v.SlotType }).(pulumi.StringPtrOutput)
}

// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
func (o CloudServiceNetworkProfileOutput) SwappableCloudService() SubResourcePtrOutput {
	return o.ApplyT(func(v CloudServiceNetworkProfile) *SubResource { return v.SwappableCloudService }).(SubResourcePtrOutput)
}

type CloudServiceNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceNetworkProfile)(nil)).Elem()
}

func (o CloudServiceNetworkProfilePtrOutput) ToCloudServiceNetworkProfilePtrOutput() CloudServiceNetworkProfilePtrOutput {
	return o
}

func (o CloudServiceNetworkProfilePtrOutput) ToCloudServiceNetworkProfilePtrOutputWithContext(ctx context.Context) CloudServiceNetworkProfilePtrOutput {
	return o
}

func (o CloudServiceNetworkProfilePtrOutput) Elem() CloudServiceNetworkProfileOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfile) CloudServiceNetworkProfile {
		if v != nil {
			return *v
		}
		var ret CloudServiceNetworkProfile
		return ret
	}).(CloudServiceNetworkProfileOutput)
}

// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
func (o CloudServiceNetworkProfilePtrOutput) LoadBalancerConfigurations() LoadBalancerConfigurationArrayOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfile) []LoadBalancerConfiguration {
		if v == nil {
			return nil
		}
		return v.LoadBalancerConfigurations
	}).(LoadBalancerConfigurationArrayOutput)
}

// Slot type for the cloud service.
// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
// If not specified, the default value is Production.
func (o CloudServiceNetworkProfilePtrOutput) SlotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.SlotType
	}).(pulumi.StringPtrOutput)
}

// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
func (o CloudServiceNetworkProfilePtrOutput) SwappableCloudService() SubResourcePtrOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfile) *SubResource {
		if v == nil {
			return nil
		}
		return v.SwappableCloudService
	}).(SubResourcePtrOutput)
}

// Network Profile for the cloud service.
type CloudServiceNetworkProfileResponse struct {
	// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
	LoadBalancerConfigurations []LoadBalancerConfigurationResponse `pulumi:"loadBalancerConfigurations"`
	// Slot type for the cloud service.
	// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
	// If not specified, the default value is Production.
	SlotType *string `pulumi:"slotType"`
	// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
	SwappableCloudService *SubResourceResponse `pulumi:"swappableCloudService"`
}

// Network Profile for the cloud service.
type CloudServiceNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceNetworkProfileResponse)(nil)).Elem()
}

func (o CloudServiceNetworkProfileResponseOutput) ToCloudServiceNetworkProfileResponseOutput() CloudServiceNetworkProfileResponseOutput {
	return o
}

func (o CloudServiceNetworkProfileResponseOutput) ToCloudServiceNetworkProfileResponseOutputWithContext(ctx context.Context) CloudServiceNetworkProfileResponseOutput {
	return o
}

// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
func (o CloudServiceNetworkProfileResponseOutput) LoadBalancerConfigurations() LoadBalancerConfigurationResponseArrayOutput {
	return o.ApplyT(func(v CloudServiceNetworkProfileResponse) []LoadBalancerConfigurationResponse {
		return v.LoadBalancerConfigurations
	}).(LoadBalancerConfigurationResponseArrayOutput)
}

// Slot type for the cloud service.
// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
// If not specified, the default value is Production.
func (o CloudServiceNetworkProfileResponseOutput) SlotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceNetworkProfileResponse) *string { return v.SlotType }).(pulumi.StringPtrOutput)
}

// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
func (o CloudServiceNetworkProfileResponseOutput) SwappableCloudService() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceNetworkProfileResponse) *SubResourceResponse { return v.SwappableCloudService }).(SubResourceResponsePtrOutput)
}

type CloudServiceNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceNetworkProfileResponse)(nil)).Elem()
}

func (o CloudServiceNetworkProfileResponsePtrOutput) ToCloudServiceNetworkProfileResponsePtrOutput() CloudServiceNetworkProfileResponsePtrOutput {
	return o
}

func (o CloudServiceNetworkProfileResponsePtrOutput) ToCloudServiceNetworkProfileResponsePtrOutputWithContext(ctx context.Context) CloudServiceNetworkProfileResponsePtrOutput {
	return o
}

func (o CloudServiceNetworkProfileResponsePtrOutput) Elem() CloudServiceNetworkProfileResponseOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfileResponse) CloudServiceNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceNetworkProfileResponse
		return ret
	}).(CloudServiceNetworkProfileResponseOutput)
}

// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer.
func (o CloudServiceNetworkProfileResponsePtrOutput) LoadBalancerConfigurations() LoadBalancerConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfileResponse) []LoadBalancerConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancerConfigurations
	}).(LoadBalancerConfigurationResponseArrayOutput)
}

// Slot type for the cloud service.
// Possible values are <br /><br />**Production**<br /><br />**Staging**<br /><br />
// If not specified, the default value is Production.
func (o CloudServiceNetworkProfileResponsePtrOutput) SlotType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SlotType
	}).(pulumi.StringPtrOutput)
}

// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown.
func (o CloudServiceNetworkProfileResponsePtrOutput) SwappableCloudService() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *CloudServiceNetworkProfileResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.SwappableCloudService
	}).(SubResourceResponsePtrOutput)
}

// Describes the OS profile for the cloud service.
type CloudServiceOsProfile struct {
	// Specifies set of certificates that should be installed onto the role instances.
	Secrets []CloudServiceVaultSecretGroup `pulumi:"secrets"`
}

// CloudServiceOsProfileInput is an input type that accepts CloudServiceOsProfileArgs and CloudServiceOsProfileOutput values.
// You can construct a concrete instance of `CloudServiceOsProfileInput` via:
//
//	CloudServiceOsProfileArgs{...}
type CloudServiceOsProfileInput interface {
	pulumi.Input

	ToCloudServiceOsProfileOutput() CloudServiceOsProfileOutput
	ToCloudServiceOsProfileOutputWithContext(context.Context) CloudServiceOsProfileOutput
}

// Describes the OS profile for the cloud service.
type CloudServiceOsProfileArgs struct {
	// Specifies set of certificates that should be installed onto the role instances.
	Secrets CloudServiceVaultSecretGroupArrayInput `pulumi:"secrets"`
}

func (CloudServiceOsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceOsProfile)(nil)).Elem()
}

func (i CloudServiceOsProfileArgs) ToCloudServiceOsProfileOutput() CloudServiceOsProfileOutput {
	return i.ToCloudServiceOsProfileOutputWithContext(context.Background())
}

func (i CloudServiceOsProfileArgs) ToCloudServiceOsProfileOutputWithContext(ctx context.Context) CloudServiceOsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceOsProfileOutput)
}

func (i CloudServiceOsProfileArgs) ToCloudServiceOsProfilePtrOutput() CloudServiceOsProfilePtrOutput {
	return i.ToCloudServiceOsProfilePtrOutputWithContext(context.Background())
}

func (i CloudServiceOsProfileArgs) ToCloudServiceOsProfilePtrOutputWithContext(ctx context.Context) CloudServiceOsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceOsProfileOutput).ToCloudServiceOsProfilePtrOutputWithContext(ctx)
}

// CloudServiceOsProfilePtrInput is an input type that accepts CloudServiceOsProfileArgs, CloudServiceOsProfilePtr and CloudServiceOsProfilePtrOutput values.
// You can construct a concrete instance of `CloudServiceOsProfilePtrInput` via:
//
//	        CloudServiceOsProfileArgs{...}
//
//	or:
//
//	        nil
type CloudServiceOsProfilePtrInput interface {
	pulumi.Input

	ToCloudServiceOsProfilePtrOutput() CloudServiceOsProfilePtrOutput
	ToCloudServiceOsProfilePtrOutputWithContext(context.Context) CloudServiceOsProfilePtrOutput
}

type cloudServiceOsProfilePtrType CloudServiceOsProfileArgs

func CloudServiceOsProfilePtr(v *CloudServiceOsProfileArgs) CloudServiceOsProfilePtrInput {
	return (*cloudServiceOsProfilePtrType)(v)
}

func (*cloudServiceOsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceOsProfile)(nil)).Elem()
}

func (i *cloudServiceOsProfilePtrType) ToCloudServiceOsProfilePtrOutput() CloudServiceOsProfilePtrOutput {
	return i.ToCloudServiceOsProfilePtrOutputWithContext(context.Background())
}

func (i *cloudServiceOsProfilePtrType) ToCloudServiceOsProfilePtrOutputWithContext(ctx context.Context) CloudServiceOsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceOsProfilePtrOutput)
}

// Describes the OS profile for the cloud service.
type CloudServiceOsProfileOutput struct{ *pulumi.OutputState }

func (CloudServiceOsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceOsProfile)(nil)).Elem()
}

func (o CloudServiceOsProfileOutput) ToCloudServiceOsProfileOutput() CloudServiceOsProfileOutput {
	return o
}

func (o CloudServiceOsProfileOutput) ToCloudServiceOsProfileOutputWithContext(ctx context.Context) CloudServiceOsProfileOutput {
	return o
}

func (o CloudServiceOsProfileOutput) ToCloudServiceOsProfilePtrOutput() CloudServiceOsProfilePtrOutput {
	return o.ToCloudServiceOsProfilePtrOutputWithContext(context.Background())
}

func (o CloudServiceOsProfileOutput) ToCloudServiceOsProfilePtrOutputWithContext(ctx context.Context) CloudServiceOsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceOsProfile) *CloudServiceOsProfile {
		return &v
	}).(CloudServiceOsProfilePtrOutput)
}

// Specifies set of certificates that should be installed onto the role instances.
func (o CloudServiceOsProfileOutput) Secrets() CloudServiceVaultSecretGroupArrayOutput {
	return o.ApplyT(func(v CloudServiceOsProfile) []CloudServiceVaultSecretGroup { return v.Secrets }).(CloudServiceVaultSecretGroupArrayOutput)
}

type CloudServiceOsProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceOsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceOsProfile)(nil)).Elem()
}

func (o CloudServiceOsProfilePtrOutput) ToCloudServiceOsProfilePtrOutput() CloudServiceOsProfilePtrOutput {
	return o
}

func (o CloudServiceOsProfilePtrOutput) ToCloudServiceOsProfilePtrOutputWithContext(ctx context.Context) CloudServiceOsProfilePtrOutput {
	return o
}

func (o CloudServiceOsProfilePtrOutput) Elem() CloudServiceOsProfileOutput {
	return o.ApplyT(func(v *CloudServiceOsProfile) CloudServiceOsProfile {
		if v != nil {
			return *v
		}
		var ret CloudServiceOsProfile
		return ret
	}).(CloudServiceOsProfileOutput)
}

// Specifies set of certificates that should be installed onto the role instances.
func (o CloudServiceOsProfilePtrOutput) Secrets() CloudServiceVaultSecretGroupArrayOutput {
	return o.ApplyT(func(v *CloudServiceOsProfile) []CloudServiceVaultSecretGroup {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(CloudServiceVaultSecretGroupArrayOutput)
}

// Describes the OS profile for the cloud service.
type CloudServiceOsProfileResponse struct {
	// Specifies set of certificates that should be installed onto the role instances.
	Secrets []CloudServiceVaultSecretGroupResponse `pulumi:"secrets"`
}

// Describes the OS profile for the cloud service.
type CloudServiceOsProfileResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceOsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceOsProfileResponse)(nil)).Elem()
}

func (o CloudServiceOsProfileResponseOutput) ToCloudServiceOsProfileResponseOutput() CloudServiceOsProfileResponseOutput {
	return o
}

func (o CloudServiceOsProfileResponseOutput) ToCloudServiceOsProfileResponseOutputWithContext(ctx context.Context) CloudServiceOsProfileResponseOutput {
	return o
}

// Specifies set of certificates that should be installed onto the role instances.
func (o CloudServiceOsProfileResponseOutput) Secrets() CloudServiceVaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v CloudServiceOsProfileResponse) []CloudServiceVaultSecretGroupResponse { return v.Secrets }).(CloudServiceVaultSecretGroupResponseArrayOutput)
}

type CloudServiceOsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceOsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceOsProfileResponse)(nil)).Elem()
}

func (o CloudServiceOsProfileResponsePtrOutput) ToCloudServiceOsProfileResponsePtrOutput() CloudServiceOsProfileResponsePtrOutput {
	return o
}

func (o CloudServiceOsProfileResponsePtrOutput) ToCloudServiceOsProfileResponsePtrOutputWithContext(ctx context.Context) CloudServiceOsProfileResponsePtrOutput {
	return o
}

func (o CloudServiceOsProfileResponsePtrOutput) Elem() CloudServiceOsProfileResponseOutput {
	return o.ApplyT(func(v *CloudServiceOsProfileResponse) CloudServiceOsProfileResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceOsProfileResponse
		return ret
	}).(CloudServiceOsProfileResponseOutput)
}

// Specifies set of certificates that should be installed onto the role instances.
func (o CloudServiceOsProfileResponsePtrOutput) Secrets() CloudServiceVaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v *CloudServiceOsProfileResponse) []CloudServiceVaultSecretGroupResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(CloudServiceVaultSecretGroupResponseArrayOutput)
}

// Cloud service properties
type CloudServiceProperties struct {
	// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
	// The default value is `false`.
	AllowModelOverride *bool `pulumi:"allowModelOverride"`
	// Specifies the XML service configuration (.cscfg) for the cloud service.
	Configuration *string `pulumi:"configuration"`
	// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
	// This is a write-only property and is not returned in GET calls.
	ConfigurationUrl *string `pulumi:"configurationUrl"`
	// Describes a cloud service extension profile.
	ExtensionProfile *CloudServiceExtensionProfile `pulumi:"extensionProfile"`
	// Network Profile for the cloud service.
	NetworkProfile *CloudServiceNetworkProfile `pulumi:"networkProfile"`
	// Describes the OS profile for the cloud service.
	OsProfile *CloudServiceOsProfile `pulumi:"osProfile"`
	// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
	// This is a write-only property and is not returned in GET calls.
	PackageUrl *string `pulumi:"packageUrl"`
	// Describes the role profile for the cloud service.
	RoleProfile *CloudServiceRoleProfile `pulumi:"roleProfile"`
	// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
	// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
	StartCloudService *bool `pulumi:"startCloudService"`
	// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
	// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
	// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
	UpgradeMode *string `pulumi:"upgradeMode"`
}

// CloudServicePropertiesInput is an input type that accepts CloudServicePropertiesArgs and CloudServicePropertiesOutput values.
// You can construct a concrete instance of `CloudServicePropertiesInput` via:
//
//	CloudServicePropertiesArgs{...}
type CloudServicePropertiesInput interface {
	pulumi.Input

	ToCloudServicePropertiesOutput() CloudServicePropertiesOutput
	ToCloudServicePropertiesOutputWithContext(context.Context) CloudServicePropertiesOutput
}

// Cloud service properties
type CloudServicePropertiesArgs struct {
	// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
	// The default value is `false`.
	AllowModelOverride pulumi.BoolPtrInput `pulumi:"allowModelOverride"`
	// Specifies the XML service configuration (.cscfg) for the cloud service.
	Configuration pulumi.StringPtrInput `pulumi:"configuration"`
	// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
	// This is a write-only property and is not returned in GET calls.
	ConfigurationUrl pulumi.StringPtrInput `pulumi:"configurationUrl"`
	// Describes a cloud service extension profile.
	ExtensionProfile CloudServiceExtensionProfilePtrInput `pulumi:"extensionProfile"`
	// Network Profile for the cloud service.
	NetworkProfile CloudServiceNetworkProfilePtrInput `pulumi:"networkProfile"`
	// Describes the OS profile for the cloud service.
	OsProfile CloudServiceOsProfilePtrInput `pulumi:"osProfile"`
	// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
	// This is a write-only property and is not returned in GET calls.
	PackageUrl pulumi.StringPtrInput `pulumi:"packageUrl"`
	// Describes the role profile for the cloud service.
	RoleProfile CloudServiceRoleProfilePtrInput `pulumi:"roleProfile"`
	// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
	// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
	StartCloudService pulumi.BoolPtrInput `pulumi:"startCloudService"`
	// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
	// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
	// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
	UpgradeMode pulumi.StringPtrInput `pulumi:"upgradeMode"`
}

func (CloudServicePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceProperties)(nil)).Elem()
}

func (i CloudServicePropertiesArgs) ToCloudServicePropertiesOutput() CloudServicePropertiesOutput {
	return i.ToCloudServicePropertiesOutputWithContext(context.Background())
}

func (i CloudServicePropertiesArgs) ToCloudServicePropertiesOutputWithContext(ctx context.Context) CloudServicePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServicePropertiesOutput)
}

func (i CloudServicePropertiesArgs) ToCloudServicePropertiesPtrOutput() CloudServicePropertiesPtrOutput {
	return i.ToCloudServicePropertiesPtrOutputWithContext(context.Background())
}

func (i CloudServicePropertiesArgs) ToCloudServicePropertiesPtrOutputWithContext(ctx context.Context) CloudServicePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServicePropertiesOutput).ToCloudServicePropertiesPtrOutputWithContext(ctx)
}

// CloudServicePropertiesPtrInput is an input type that accepts CloudServicePropertiesArgs, CloudServicePropertiesPtr and CloudServicePropertiesPtrOutput values.
// You can construct a concrete instance of `CloudServicePropertiesPtrInput` via:
//
//	        CloudServicePropertiesArgs{...}
//
//	or:
//
//	        nil
type CloudServicePropertiesPtrInput interface {
	pulumi.Input

	ToCloudServicePropertiesPtrOutput() CloudServicePropertiesPtrOutput
	ToCloudServicePropertiesPtrOutputWithContext(context.Context) CloudServicePropertiesPtrOutput
}

type cloudServicePropertiesPtrType CloudServicePropertiesArgs

func CloudServicePropertiesPtr(v *CloudServicePropertiesArgs) CloudServicePropertiesPtrInput {
	return (*cloudServicePropertiesPtrType)(v)
}

func (*cloudServicePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceProperties)(nil)).Elem()
}

func (i *cloudServicePropertiesPtrType) ToCloudServicePropertiesPtrOutput() CloudServicePropertiesPtrOutput {
	return i.ToCloudServicePropertiesPtrOutputWithContext(context.Background())
}

func (i *cloudServicePropertiesPtrType) ToCloudServicePropertiesPtrOutputWithContext(ctx context.Context) CloudServicePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServicePropertiesPtrOutput)
}

// Cloud service properties
type CloudServicePropertiesOutput struct{ *pulumi.OutputState }

func (CloudServicePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceProperties)(nil)).Elem()
}

func (o CloudServicePropertiesOutput) ToCloudServicePropertiesOutput() CloudServicePropertiesOutput {
	return o
}

func (o CloudServicePropertiesOutput) ToCloudServicePropertiesOutputWithContext(ctx context.Context) CloudServicePropertiesOutput {
	return o
}

func (o CloudServicePropertiesOutput) ToCloudServicePropertiesPtrOutput() CloudServicePropertiesPtrOutput {
	return o.ToCloudServicePropertiesPtrOutputWithContext(context.Background())
}

func (o CloudServicePropertiesOutput) ToCloudServicePropertiesPtrOutputWithContext(ctx context.Context) CloudServicePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceProperties) *CloudServiceProperties {
		return &v
	}).(CloudServicePropertiesPtrOutput)
}

// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
// The default value is `false`.
func (o CloudServicePropertiesOutput) AllowModelOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *bool { return v.AllowModelOverride }).(pulumi.BoolPtrOutput)
}

// Specifies the XML service configuration (.cscfg) for the cloud service.
func (o CloudServicePropertiesOutput) Configuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *string { return v.Configuration }).(pulumi.StringPtrOutput)
}

// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
// This is a write-only property and is not returned in GET calls.
func (o CloudServicePropertiesOutput) ConfigurationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *string { return v.ConfigurationUrl }).(pulumi.StringPtrOutput)
}

// Describes a cloud service extension profile.
func (o CloudServicePropertiesOutput) ExtensionProfile() CloudServiceExtensionProfilePtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *CloudServiceExtensionProfile { return v.ExtensionProfile }).(CloudServiceExtensionProfilePtrOutput)
}

// Network Profile for the cloud service.
func (o CloudServicePropertiesOutput) NetworkProfile() CloudServiceNetworkProfilePtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *CloudServiceNetworkProfile { return v.NetworkProfile }).(CloudServiceNetworkProfilePtrOutput)
}

// Describes the OS profile for the cloud service.
func (o CloudServicePropertiesOutput) OsProfile() CloudServiceOsProfilePtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *CloudServiceOsProfile { return v.OsProfile }).(CloudServiceOsProfilePtrOutput)
}

// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
// This is a write-only property and is not returned in GET calls.
func (o CloudServicePropertiesOutput) PackageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *string { return v.PackageUrl }).(pulumi.StringPtrOutput)
}

// Describes the role profile for the cloud service.
func (o CloudServicePropertiesOutput) RoleProfile() CloudServiceRoleProfilePtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *CloudServiceRoleProfile { return v.RoleProfile }).(CloudServiceRoleProfilePtrOutput)
}

// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
func (o CloudServicePropertiesOutput) StartCloudService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *bool { return v.StartCloudService }).(pulumi.BoolPtrOutput)
}

// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
func (o CloudServicePropertiesOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceProperties) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

type CloudServicePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CloudServicePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceProperties)(nil)).Elem()
}

func (o CloudServicePropertiesPtrOutput) ToCloudServicePropertiesPtrOutput() CloudServicePropertiesPtrOutput {
	return o
}

func (o CloudServicePropertiesPtrOutput) ToCloudServicePropertiesPtrOutputWithContext(ctx context.Context) CloudServicePropertiesPtrOutput {
	return o
}

func (o CloudServicePropertiesPtrOutput) Elem() CloudServicePropertiesOutput {
	return o.ApplyT(func(v *CloudServiceProperties) CloudServiceProperties {
		if v != nil {
			return *v
		}
		var ret CloudServiceProperties
		return ret
	}).(CloudServicePropertiesOutput)
}

// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
// The default value is `false`.
func (o CloudServicePropertiesPtrOutput) AllowModelOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.AllowModelOverride
	}).(pulumi.BoolPtrOutput)
}

// Specifies the XML service configuration (.cscfg) for the cloud service.
func (o CloudServicePropertiesPtrOutput) Configuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(pulumi.StringPtrOutput)
}

// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
// This is a write-only property and is not returned in GET calls.
func (o CloudServicePropertiesPtrOutput) ConfigurationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ConfigurationUrl
	}).(pulumi.StringPtrOutput)
}

// Describes a cloud service extension profile.
func (o CloudServicePropertiesPtrOutput) ExtensionProfile() CloudServiceExtensionProfilePtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *CloudServiceExtensionProfile {
		if v == nil {
			return nil
		}
		return v.ExtensionProfile
	}).(CloudServiceExtensionProfilePtrOutput)
}

// Network Profile for the cloud service.
func (o CloudServicePropertiesPtrOutput) NetworkProfile() CloudServiceNetworkProfilePtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *CloudServiceNetworkProfile {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(CloudServiceNetworkProfilePtrOutput)
}

// Describes the OS profile for the cloud service.
func (o CloudServicePropertiesPtrOutput) OsProfile() CloudServiceOsProfilePtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *CloudServiceOsProfile {
		if v == nil {
			return nil
		}
		return v.OsProfile
	}).(CloudServiceOsProfilePtrOutput)
}

// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
// This is a write-only property and is not returned in GET calls.
func (o CloudServicePropertiesPtrOutput) PackageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PackageUrl
	}).(pulumi.StringPtrOutput)
}

// Describes the role profile for the cloud service.
func (o CloudServicePropertiesPtrOutput) RoleProfile() CloudServiceRoleProfilePtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *CloudServiceRoleProfile {
		if v == nil {
			return nil
		}
		return v.RoleProfile
	}).(CloudServiceRoleProfilePtrOutput)
}

// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
func (o CloudServicePropertiesPtrOutput) StartCloudService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.StartCloudService
	}).(pulumi.BoolPtrOutput)
}

// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
func (o CloudServicePropertiesPtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceProperties) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// Cloud service properties
type CloudServicePropertiesResponse struct {
	// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
	// The default value is `false`.
	AllowModelOverride *bool `pulumi:"allowModelOverride"`
	// Specifies the XML service configuration (.cscfg) for the cloud service.
	Configuration *string `pulumi:"configuration"`
	// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
	// This is a write-only property and is not returned in GET calls.
	ConfigurationUrl *string `pulumi:"configurationUrl"`
	// Describes a cloud service extension profile.
	ExtensionProfile *CloudServiceExtensionProfileResponse `pulumi:"extensionProfile"`
	// Network Profile for the cloud service.
	NetworkProfile *CloudServiceNetworkProfileResponse `pulumi:"networkProfile"`
	// Describes the OS profile for the cloud service.
	OsProfile *CloudServiceOsProfileResponse `pulumi:"osProfile"`
	// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
	// This is a write-only property and is not returned in GET calls.
	PackageUrl *string `pulumi:"packageUrl"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// Describes the role profile for the cloud service.
	RoleProfile *CloudServiceRoleProfileResponse `pulumi:"roleProfile"`
	// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
	// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
	StartCloudService *bool `pulumi:"startCloudService"`
	// The unique identifier for the cloud service.
	UniqueId string `pulumi:"uniqueId"`
	// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
	// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
	// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
	UpgradeMode *string `pulumi:"upgradeMode"`
}

// Cloud service properties
type CloudServicePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CloudServicePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServicePropertiesResponse)(nil)).Elem()
}

func (o CloudServicePropertiesResponseOutput) ToCloudServicePropertiesResponseOutput() CloudServicePropertiesResponseOutput {
	return o
}

func (o CloudServicePropertiesResponseOutput) ToCloudServicePropertiesResponseOutputWithContext(ctx context.Context) CloudServicePropertiesResponseOutput {
	return o
}

// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
// The default value is `false`.
func (o CloudServicePropertiesResponseOutput) AllowModelOverride() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *bool { return v.AllowModelOverride }).(pulumi.BoolPtrOutput)
}

// Specifies the XML service configuration (.cscfg) for the cloud service.
func (o CloudServicePropertiesResponseOutput) Configuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *string { return v.Configuration }).(pulumi.StringPtrOutput)
}

// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
// This is a write-only property and is not returned in GET calls.
func (o CloudServicePropertiesResponseOutput) ConfigurationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *string { return v.ConfigurationUrl }).(pulumi.StringPtrOutput)
}

// Describes a cloud service extension profile.
func (o CloudServicePropertiesResponseOutput) ExtensionProfile() CloudServiceExtensionProfileResponsePtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *CloudServiceExtensionProfileResponse {
		return v.ExtensionProfile
	}).(CloudServiceExtensionProfileResponsePtrOutput)
}

// Network Profile for the cloud service.
func (o CloudServicePropertiesResponseOutput) NetworkProfile() CloudServiceNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *CloudServiceNetworkProfileResponse { return v.NetworkProfile }).(CloudServiceNetworkProfileResponsePtrOutput)
}

// Describes the OS profile for the cloud service.
func (o CloudServicePropertiesResponseOutput) OsProfile() CloudServiceOsProfileResponsePtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *CloudServiceOsProfileResponse { return v.OsProfile }).(CloudServiceOsProfileResponsePtrOutput)
}

// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
// This is a write-only property and is not returned in GET calls.
func (o CloudServicePropertiesResponseOutput) PackageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *string { return v.PackageUrl }).(pulumi.StringPtrOutput)
}

// The provisioning state, which only appears in the response.
func (o CloudServicePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Describes the role profile for the cloud service.
func (o CloudServicePropertiesResponseOutput) RoleProfile() CloudServiceRoleProfileResponsePtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *CloudServiceRoleProfileResponse { return v.RoleProfile }).(CloudServiceRoleProfileResponsePtrOutput)
}

// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
func (o CloudServicePropertiesResponseOutput) StartCloudService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *bool { return v.StartCloudService }).(pulumi.BoolPtrOutput)
}

// The unique identifier for the cloud service.
func (o CloudServicePropertiesResponseOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) string { return v.UniqueId }).(pulumi.StringOutput)
}

// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
// Possible Values are <br /><br />**Auto**<br /><br />**Manual** <br /><br />**Simultaneous**<br /><br />
// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
func (o CloudServicePropertiesResponseOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServicePropertiesResponse) *string { return v.UpgradeMode }).(pulumi.StringPtrOutput)
}

// Describes the role profile for the cloud service.
type CloudServiceRoleProfile struct {
	// List of roles for the cloud service.
	Roles []CloudServiceRoleProfileProperties `pulumi:"roles"`
}

// CloudServiceRoleProfileInput is an input type that accepts CloudServiceRoleProfileArgs and CloudServiceRoleProfileOutput values.
// You can construct a concrete instance of `CloudServiceRoleProfileInput` via:
//
//	CloudServiceRoleProfileArgs{...}
type CloudServiceRoleProfileInput interface {
	pulumi.Input

	ToCloudServiceRoleProfileOutput() CloudServiceRoleProfileOutput
	ToCloudServiceRoleProfileOutputWithContext(context.Context) CloudServiceRoleProfileOutput
}

// Describes the role profile for the cloud service.
type CloudServiceRoleProfileArgs struct {
	// List of roles for the cloud service.
	Roles CloudServiceRoleProfilePropertiesArrayInput `pulumi:"roles"`
}

func (CloudServiceRoleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleProfile)(nil)).Elem()
}

func (i CloudServiceRoleProfileArgs) ToCloudServiceRoleProfileOutput() CloudServiceRoleProfileOutput {
	return i.ToCloudServiceRoleProfileOutputWithContext(context.Background())
}

func (i CloudServiceRoleProfileArgs) ToCloudServiceRoleProfileOutputWithContext(ctx context.Context) CloudServiceRoleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleProfileOutput)
}

func (i CloudServiceRoleProfileArgs) ToCloudServiceRoleProfilePtrOutput() CloudServiceRoleProfilePtrOutput {
	return i.ToCloudServiceRoleProfilePtrOutputWithContext(context.Background())
}

func (i CloudServiceRoleProfileArgs) ToCloudServiceRoleProfilePtrOutputWithContext(ctx context.Context) CloudServiceRoleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleProfileOutput).ToCloudServiceRoleProfilePtrOutputWithContext(ctx)
}

// CloudServiceRoleProfilePtrInput is an input type that accepts CloudServiceRoleProfileArgs, CloudServiceRoleProfilePtr and CloudServiceRoleProfilePtrOutput values.
// You can construct a concrete instance of `CloudServiceRoleProfilePtrInput` via:
//
//	        CloudServiceRoleProfileArgs{...}
//
//	or:
//
//	        nil
type CloudServiceRoleProfilePtrInput interface {
	pulumi.Input

	ToCloudServiceRoleProfilePtrOutput() CloudServiceRoleProfilePtrOutput
	ToCloudServiceRoleProfilePtrOutputWithContext(context.Context) CloudServiceRoleProfilePtrOutput
}

type cloudServiceRoleProfilePtrType CloudServiceRoleProfileArgs

func CloudServiceRoleProfilePtr(v *CloudServiceRoleProfileArgs) CloudServiceRoleProfilePtrInput {
	return (*cloudServiceRoleProfilePtrType)(v)
}

func (*cloudServiceRoleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceRoleProfile)(nil)).Elem()
}

func (i *cloudServiceRoleProfilePtrType) ToCloudServiceRoleProfilePtrOutput() CloudServiceRoleProfilePtrOutput {
	return i.ToCloudServiceRoleProfilePtrOutputWithContext(context.Background())
}

func (i *cloudServiceRoleProfilePtrType) ToCloudServiceRoleProfilePtrOutputWithContext(ctx context.Context) CloudServiceRoleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleProfilePtrOutput)
}

// Describes the role profile for the cloud service.
type CloudServiceRoleProfileOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleProfile)(nil)).Elem()
}

func (o CloudServiceRoleProfileOutput) ToCloudServiceRoleProfileOutput() CloudServiceRoleProfileOutput {
	return o
}

func (o CloudServiceRoleProfileOutput) ToCloudServiceRoleProfileOutputWithContext(ctx context.Context) CloudServiceRoleProfileOutput {
	return o
}

func (o CloudServiceRoleProfileOutput) ToCloudServiceRoleProfilePtrOutput() CloudServiceRoleProfilePtrOutput {
	return o.ToCloudServiceRoleProfilePtrOutputWithContext(context.Background())
}

func (o CloudServiceRoleProfileOutput) ToCloudServiceRoleProfilePtrOutputWithContext(ctx context.Context) CloudServiceRoleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceRoleProfile) *CloudServiceRoleProfile {
		return &v
	}).(CloudServiceRoleProfilePtrOutput)
}

// List of roles for the cloud service.
func (o CloudServiceRoleProfileOutput) Roles() CloudServiceRoleProfilePropertiesArrayOutput {
	return o.ApplyT(func(v CloudServiceRoleProfile) []CloudServiceRoleProfileProperties { return v.Roles }).(CloudServiceRoleProfilePropertiesArrayOutput)
}

type CloudServiceRoleProfilePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceRoleProfile)(nil)).Elem()
}

func (o CloudServiceRoleProfilePtrOutput) ToCloudServiceRoleProfilePtrOutput() CloudServiceRoleProfilePtrOutput {
	return o
}

func (o CloudServiceRoleProfilePtrOutput) ToCloudServiceRoleProfilePtrOutputWithContext(ctx context.Context) CloudServiceRoleProfilePtrOutput {
	return o
}

func (o CloudServiceRoleProfilePtrOutput) Elem() CloudServiceRoleProfileOutput {
	return o.ApplyT(func(v *CloudServiceRoleProfile) CloudServiceRoleProfile {
		if v != nil {
			return *v
		}
		var ret CloudServiceRoleProfile
		return ret
	}).(CloudServiceRoleProfileOutput)
}

// List of roles for the cloud service.
func (o CloudServiceRoleProfilePtrOutput) Roles() CloudServiceRoleProfilePropertiesArrayOutput {
	return o.ApplyT(func(v *CloudServiceRoleProfile) []CloudServiceRoleProfileProperties {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(CloudServiceRoleProfilePropertiesArrayOutput)
}

// Describes the role properties.
type CloudServiceRoleProfileProperties struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// Describes the cloud service role sku.
	Sku *CloudServiceRoleSku `pulumi:"sku"`
}

// CloudServiceRoleProfilePropertiesInput is an input type that accepts CloudServiceRoleProfilePropertiesArgs and CloudServiceRoleProfilePropertiesOutput values.
// You can construct a concrete instance of `CloudServiceRoleProfilePropertiesInput` via:
//
//	CloudServiceRoleProfilePropertiesArgs{...}
type CloudServiceRoleProfilePropertiesInput interface {
	pulumi.Input

	ToCloudServiceRoleProfilePropertiesOutput() CloudServiceRoleProfilePropertiesOutput
	ToCloudServiceRoleProfilePropertiesOutputWithContext(context.Context) CloudServiceRoleProfilePropertiesOutput
}

// Describes the role properties.
type CloudServiceRoleProfilePropertiesArgs struct {
	// Resource name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes the cloud service role sku.
	Sku CloudServiceRoleSkuPtrInput `pulumi:"sku"`
}

func (CloudServiceRoleProfilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleProfileProperties)(nil)).Elem()
}

func (i CloudServiceRoleProfilePropertiesArgs) ToCloudServiceRoleProfilePropertiesOutput() CloudServiceRoleProfilePropertiesOutput {
	return i.ToCloudServiceRoleProfilePropertiesOutputWithContext(context.Background())
}

func (i CloudServiceRoleProfilePropertiesArgs) ToCloudServiceRoleProfilePropertiesOutputWithContext(ctx context.Context) CloudServiceRoleProfilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleProfilePropertiesOutput)
}

// CloudServiceRoleProfilePropertiesArrayInput is an input type that accepts CloudServiceRoleProfilePropertiesArray and CloudServiceRoleProfilePropertiesArrayOutput values.
// You can construct a concrete instance of `CloudServiceRoleProfilePropertiesArrayInput` via:
//
//	CloudServiceRoleProfilePropertiesArray{ CloudServiceRoleProfilePropertiesArgs{...} }
type CloudServiceRoleProfilePropertiesArrayInput interface {
	pulumi.Input

	ToCloudServiceRoleProfilePropertiesArrayOutput() CloudServiceRoleProfilePropertiesArrayOutput
	ToCloudServiceRoleProfilePropertiesArrayOutputWithContext(context.Context) CloudServiceRoleProfilePropertiesArrayOutput
}

type CloudServiceRoleProfilePropertiesArray []CloudServiceRoleProfilePropertiesInput

func (CloudServiceRoleProfilePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceRoleProfileProperties)(nil)).Elem()
}

func (i CloudServiceRoleProfilePropertiesArray) ToCloudServiceRoleProfilePropertiesArrayOutput() CloudServiceRoleProfilePropertiesArrayOutput {
	return i.ToCloudServiceRoleProfilePropertiesArrayOutputWithContext(context.Background())
}

func (i CloudServiceRoleProfilePropertiesArray) ToCloudServiceRoleProfilePropertiesArrayOutputWithContext(ctx context.Context) CloudServiceRoleProfilePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleProfilePropertiesArrayOutput)
}

// Describes the role properties.
type CloudServiceRoleProfilePropertiesOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleProfileProperties)(nil)).Elem()
}

func (o CloudServiceRoleProfilePropertiesOutput) ToCloudServiceRoleProfilePropertiesOutput() CloudServiceRoleProfilePropertiesOutput {
	return o
}

func (o CloudServiceRoleProfilePropertiesOutput) ToCloudServiceRoleProfilePropertiesOutputWithContext(ctx context.Context) CloudServiceRoleProfilePropertiesOutput {
	return o
}

// Resource name.
func (o CloudServiceRoleProfilePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleProfileProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the cloud service role sku.
func (o CloudServiceRoleProfilePropertiesOutput) Sku() CloudServiceRoleSkuPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleProfileProperties) *CloudServiceRoleSku { return v.Sku }).(CloudServiceRoleSkuPtrOutput)
}

type CloudServiceRoleProfilePropertiesArrayOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfilePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceRoleProfileProperties)(nil)).Elem()
}

func (o CloudServiceRoleProfilePropertiesArrayOutput) ToCloudServiceRoleProfilePropertiesArrayOutput() CloudServiceRoleProfilePropertiesArrayOutput {
	return o
}

func (o CloudServiceRoleProfilePropertiesArrayOutput) ToCloudServiceRoleProfilePropertiesArrayOutputWithContext(ctx context.Context) CloudServiceRoleProfilePropertiesArrayOutput {
	return o
}

func (o CloudServiceRoleProfilePropertiesArrayOutput) Index(i pulumi.IntInput) CloudServiceRoleProfilePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudServiceRoleProfileProperties {
		return vs[0].([]CloudServiceRoleProfileProperties)[vs[1].(int)]
	}).(CloudServiceRoleProfilePropertiesOutput)
}

// Describes the role properties.
type CloudServiceRoleProfilePropertiesResponse struct {
	// Resource name.
	Name *string `pulumi:"name"`
	// Describes the cloud service role sku.
	Sku *CloudServiceRoleSkuResponse `pulumi:"sku"`
}

// Describes the role properties.
type CloudServiceRoleProfilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleProfilePropertiesResponse)(nil)).Elem()
}

func (o CloudServiceRoleProfilePropertiesResponseOutput) ToCloudServiceRoleProfilePropertiesResponseOutput() CloudServiceRoleProfilePropertiesResponseOutput {
	return o
}

func (o CloudServiceRoleProfilePropertiesResponseOutput) ToCloudServiceRoleProfilePropertiesResponseOutputWithContext(ctx context.Context) CloudServiceRoleProfilePropertiesResponseOutput {
	return o
}

// Resource name.
func (o CloudServiceRoleProfilePropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleProfilePropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the cloud service role sku.
func (o CloudServiceRoleProfilePropertiesResponseOutput) Sku() CloudServiceRoleSkuResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceRoleProfilePropertiesResponse) *CloudServiceRoleSkuResponse { return v.Sku }).(CloudServiceRoleSkuResponsePtrOutput)
}

type CloudServiceRoleProfilePropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfilePropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceRoleProfilePropertiesResponse)(nil)).Elem()
}

func (o CloudServiceRoleProfilePropertiesResponseArrayOutput) ToCloudServiceRoleProfilePropertiesResponseArrayOutput() CloudServiceRoleProfilePropertiesResponseArrayOutput {
	return o
}

func (o CloudServiceRoleProfilePropertiesResponseArrayOutput) ToCloudServiceRoleProfilePropertiesResponseArrayOutputWithContext(ctx context.Context) CloudServiceRoleProfilePropertiesResponseArrayOutput {
	return o
}

func (o CloudServiceRoleProfilePropertiesResponseArrayOutput) Index(i pulumi.IntInput) CloudServiceRoleProfilePropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudServiceRoleProfilePropertiesResponse {
		return vs[0].([]CloudServiceRoleProfilePropertiesResponse)[vs[1].(int)]
	}).(CloudServiceRoleProfilePropertiesResponseOutput)
}

// Describes the role profile for the cloud service.
type CloudServiceRoleProfileResponse struct {
	// List of roles for the cloud service.
	Roles []CloudServiceRoleProfilePropertiesResponse `pulumi:"roles"`
}

// Describes the role profile for the cloud service.
type CloudServiceRoleProfileResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleProfileResponse)(nil)).Elem()
}

func (o CloudServiceRoleProfileResponseOutput) ToCloudServiceRoleProfileResponseOutput() CloudServiceRoleProfileResponseOutput {
	return o
}

func (o CloudServiceRoleProfileResponseOutput) ToCloudServiceRoleProfileResponseOutputWithContext(ctx context.Context) CloudServiceRoleProfileResponseOutput {
	return o
}

// List of roles for the cloud service.
func (o CloudServiceRoleProfileResponseOutput) Roles() CloudServiceRoleProfilePropertiesResponseArrayOutput {
	return o.ApplyT(func(v CloudServiceRoleProfileResponse) []CloudServiceRoleProfilePropertiesResponse { return v.Roles }).(CloudServiceRoleProfilePropertiesResponseArrayOutput)
}

type CloudServiceRoleProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceRoleProfileResponse)(nil)).Elem()
}

func (o CloudServiceRoleProfileResponsePtrOutput) ToCloudServiceRoleProfileResponsePtrOutput() CloudServiceRoleProfileResponsePtrOutput {
	return o
}

func (o CloudServiceRoleProfileResponsePtrOutput) ToCloudServiceRoleProfileResponsePtrOutputWithContext(ctx context.Context) CloudServiceRoleProfileResponsePtrOutput {
	return o
}

func (o CloudServiceRoleProfileResponsePtrOutput) Elem() CloudServiceRoleProfileResponseOutput {
	return o.ApplyT(func(v *CloudServiceRoleProfileResponse) CloudServiceRoleProfileResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceRoleProfileResponse
		return ret
	}).(CloudServiceRoleProfileResponseOutput)
}

// List of roles for the cloud service.
func (o CloudServiceRoleProfileResponsePtrOutput) Roles() CloudServiceRoleProfilePropertiesResponseArrayOutput {
	return o.ApplyT(func(v *CloudServiceRoleProfileResponse) []CloudServiceRoleProfilePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(CloudServiceRoleProfilePropertiesResponseArrayOutput)
}

// Describes the cloud service role sku.
type CloudServiceRoleSku struct {
	// Specifies the number of role instances in the cloud service.
	Capacity *float64 `pulumi:"capacity"`
	// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
	Name *string `pulumi:"name"`
	// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// CloudServiceRoleSkuInput is an input type that accepts CloudServiceRoleSkuArgs and CloudServiceRoleSkuOutput values.
// You can construct a concrete instance of `CloudServiceRoleSkuInput` via:
//
//	CloudServiceRoleSkuArgs{...}
type CloudServiceRoleSkuInput interface {
	pulumi.Input

	ToCloudServiceRoleSkuOutput() CloudServiceRoleSkuOutput
	ToCloudServiceRoleSkuOutputWithContext(context.Context) CloudServiceRoleSkuOutput
}

// Describes the cloud service role sku.
type CloudServiceRoleSkuArgs struct {
	// Specifies the number of role instances in the cloud service.
	Capacity pulumi.Float64PtrInput `pulumi:"capacity"`
	// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (CloudServiceRoleSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleSku)(nil)).Elem()
}

func (i CloudServiceRoleSkuArgs) ToCloudServiceRoleSkuOutput() CloudServiceRoleSkuOutput {
	return i.ToCloudServiceRoleSkuOutputWithContext(context.Background())
}

func (i CloudServiceRoleSkuArgs) ToCloudServiceRoleSkuOutputWithContext(ctx context.Context) CloudServiceRoleSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleSkuOutput)
}

func (i CloudServiceRoleSkuArgs) ToCloudServiceRoleSkuPtrOutput() CloudServiceRoleSkuPtrOutput {
	return i.ToCloudServiceRoleSkuPtrOutputWithContext(context.Background())
}

func (i CloudServiceRoleSkuArgs) ToCloudServiceRoleSkuPtrOutputWithContext(ctx context.Context) CloudServiceRoleSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleSkuOutput).ToCloudServiceRoleSkuPtrOutputWithContext(ctx)
}

// CloudServiceRoleSkuPtrInput is an input type that accepts CloudServiceRoleSkuArgs, CloudServiceRoleSkuPtr and CloudServiceRoleSkuPtrOutput values.
// You can construct a concrete instance of `CloudServiceRoleSkuPtrInput` via:
//
//	        CloudServiceRoleSkuArgs{...}
//
//	or:
//
//	        nil
type CloudServiceRoleSkuPtrInput interface {
	pulumi.Input

	ToCloudServiceRoleSkuPtrOutput() CloudServiceRoleSkuPtrOutput
	ToCloudServiceRoleSkuPtrOutputWithContext(context.Context) CloudServiceRoleSkuPtrOutput
}

type cloudServiceRoleSkuPtrType CloudServiceRoleSkuArgs

func CloudServiceRoleSkuPtr(v *CloudServiceRoleSkuArgs) CloudServiceRoleSkuPtrInput {
	return (*cloudServiceRoleSkuPtrType)(v)
}

func (*cloudServiceRoleSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceRoleSku)(nil)).Elem()
}

func (i *cloudServiceRoleSkuPtrType) ToCloudServiceRoleSkuPtrOutput() CloudServiceRoleSkuPtrOutput {
	return i.ToCloudServiceRoleSkuPtrOutputWithContext(context.Background())
}

func (i *cloudServiceRoleSkuPtrType) ToCloudServiceRoleSkuPtrOutputWithContext(ctx context.Context) CloudServiceRoleSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceRoleSkuPtrOutput)
}

// Describes the cloud service role sku.
type CloudServiceRoleSkuOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleSku)(nil)).Elem()
}

func (o CloudServiceRoleSkuOutput) ToCloudServiceRoleSkuOutput() CloudServiceRoleSkuOutput {
	return o
}

func (o CloudServiceRoleSkuOutput) ToCloudServiceRoleSkuOutputWithContext(ctx context.Context) CloudServiceRoleSkuOutput {
	return o
}

func (o CloudServiceRoleSkuOutput) ToCloudServiceRoleSkuPtrOutput() CloudServiceRoleSkuPtrOutput {
	return o.ToCloudServiceRoleSkuPtrOutputWithContext(context.Background())
}

func (o CloudServiceRoleSkuOutput) ToCloudServiceRoleSkuPtrOutputWithContext(ctx context.Context) CloudServiceRoleSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceRoleSku) *CloudServiceRoleSku {
		return &v
	}).(CloudServiceRoleSkuPtrOutput)
}

// Specifies the number of role instances in the cloud service.
func (o CloudServiceRoleSkuOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CloudServiceRoleSku) *float64 { return v.Capacity }).(pulumi.Float64PtrOutput)
}

// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
func (o CloudServiceRoleSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
func (o CloudServiceRoleSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type CloudServiceRoleSkuPtrOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceRoleSku)(nil)).Elem()
}

func (o CloudServiceRoleSkuPtrOutput) ToCloudServiceRoleSkuPtrOutput() CloudServiceRoleSkuPtrOutput {
	return o
}

func (o CloudServiceRoleSkuPtrOutput) ToCloudServiceRoleSkuPtrOutputWithContext(ctx context.Context) CloudServiceRoleSkuPtrOutput {
	return o
}

func (o CloudServiceRoleSkuPtrOutput) Elem() CloudServiceRoleSkuOutput {
	return o.ApplyT(func(v *CloudServiceRoleSku) CloudServiceRoleSku {
		if v != nil {
			return *v
		}
		var ret CloudServiceRoleSku
		return ret
	}).(CloudServiceRoleSkuOutput)
}

// Specifies the number of role instances in the cloud service.
func (o CloudServiceRoleSkuPtrOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CloudServiceRoleSku) *float64 {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.Float64PtrOutput)
}

// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
func (o CloudServiceRoleSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceRoleSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
func (o CloudServiceRoleSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceRoleSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Describes the cloud service role sku.
type CloudServiceRoleSkuResponse struct {
	// Specifies the number of role instances in the cloud service.
	Capacity *float64 `pulumi:"capacity"`
	// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
	Name *string `pulumi:"name"`
	// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// Describes the cloud service role sku.
type CloudServiceRoleSkuResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceRoleSkuResponse)(nil)).Elem()
}

func (o CloudServiceRoleSkuResponseOutput) ToCloudServiceRoleSkuResponseOutput() CloudServiceRoleSkuResponseOutput {
	return o
}

func (o CloudServiceRoleSkuResponseOutput) ToCloudServiceRoleSkuResponseOutputWithContext(ctx context.Context) CloudServiceRoleSkuResponseOutput {
	return o
}

// Specifies the number of role instances in the cloud service.
func (o CloudServiceRoleSkuResponseOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CloudServiceRoleSkuResponse) *float64 { return v.Capacity }).(pulumi.Float64PtrOutput)
}

// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
func (o CloudServiceRoleSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
func (o CloudServiceRoleSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceRoleSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type CloudServiceRoleSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceRoleSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceRoleSkuResponse)(nil)).Elem()
}

func (o CloudServiceRoleSkuResponsePtrOutput) ToCloudServiceRoleSkuResponsePtrOutput() CloudServiceRoleSkuResponsePtrOutput {
	return o
}

func (o CloudServiceRoleSkuResponsePtrOutput) ToCloudServiceRoleSkuResponsePtrOutputWithContext(ctx context.Context) CloudServiceRoleSkuResponsePtrOutput {
	return o
}

func (o CloudServiceRoleSkuResponsePtrOutput) Elem() CloudServiceRoleSkuResponseOutput {
	return o.ApplyT(func(v *CloudServiceRoleSkuResponse) CloudServiceRoleSkuResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceRoleSkuResponse
		return ret
	}).(CloudServiceRoleSkuResponseOutput)
}

// Specifies the number of role instances in the cloud service.
func (o CloudServiceRoleSkuResponsePtrOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CloudServiceRoleSkuResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.Float64PtrOutput)
}

// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku.
func (o CloudServiceRoleSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceRoleSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the tier of the cloud service. Possible Values are <br /><br /> **Standard** <br /><br /> **Basic**
func (o CloudServiceRoleSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceRoleSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
type CloudServiceVaultAndSecretReference struct {
	// Secret URL which contains the protected settings of the extension
	SecretUrl *string `pulumi:"secretUrl"`
	// The ARM Resource ID of the Key Vault
	SourceVault *SubResource `pulumi:"sourceVault"`
}

// CloudServiceVaultAndSecretReferenceInput is an input type that accepts CloudServiceVaultAndSecretReferenceArgs and CloudServiceVaultAndSecretReferenceOutput values.
// You can construct a concrete instance of `CloudServiceVaultAndSecretReferenceInput` via:
//
//	CloudServiceVaultAndSecretReferenceArgs{...}
type CloudServiceVaultAndSecretReferenceInput interface {
	pulumi.Input

	ToCloudServiceVaultAndSecretReferenceOutput() CloudServiceVaultAndSecretReferenceOutput
	ToCloudServiceVaultAndSecretReferenceOutputWithContext(context.Context) CloudServiceVaultAndSecretReferenceOutput
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
type CloudServiceVaultAndSecretReferenceArgs struct {
	// Secret URL which contains the protected settings of the extension
	SecretUrl pulumi.StringPtrInput `pulumi:"secretUrl"`
	// The ARM Resource ID of the Key Vault
	SourceVault SubResourcePtrInput `pulumi:"sourceVault"`
}

func (CloudServiceVaultAndSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultAndSecretReference)(nil)).Elem()
}

func (i CloudServiceVaultAndSecretReferenceArgs) ToCloudServiceVaultAndSecretReferenceOutput() CloudServiceVaultAndSecretReferenceOutput {
	return i.ToCloudServiceVaultAndSecretReferenceOutputWithContext(context.Background())
}

func (i CloudServiceVaultAndSecretReferenceArgs) ToCloudServiceVaultAndSecretReferenceOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultAndSecretReferenceOutput)
}

func (i CloudServiceVaultAndSecretReferenceArgs) ToCloudServiceVaultAndSecretReferencePtrOutput() CloudServiceVaultAndSecretReferencePtrOutput {
	return i.ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i CloudServiceVaultAndSecretReferenceArgs) ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultAndSecretReferenceOutput).ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(ctx)
}

// CloudServiceVaultAndSecretReferencePtrInput is an input type that accepts CloudServiceVaultAndSecretReferenceArgs, CloudServiceVaultAndSecretReferencePtr and CloudServiceVaultAndSecretReferencePtrOutput values.
// You can construct a concrete instance of `CloudServiceVaultAndSecretReferencePtrInput` via:
//
//	        CloudServiceVaultAndSecretReferenceArgs{...}
//
//	or:
//
//	        nil
type CloudServiceVaultAndSecretReferencePtrInput interface {
	pulumi.Input

	ToCloudServiceVaultAndSecretReferencePtrOutput() CloudServiceVaultAndSecretReferencePtrOutput
	ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(context.Context) CloudServiceVaultAndSecretReferencePtrOutput
}

type cloudServiceVaultAndSecretReferencePtrType CloudServiceVaultAndSecretReferenceArgs

func CloudServiceVaultAndSecretReferencePtr(v *CloudServiceVaultAndSecretReferenceArgs) CloudServiceVaultAndSecretReferencePtrInput {
	return (*cloudServiceVaultAndSecretReferencePtrType)(v)
}

func (*cloudServiceVaultAndSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceVaultAndSecretReference)(nil)).Elem()
}

func (i *cloudServiceVaultAndSecretReferencePtrType) ToCloudServiceVaultAndSecretReferencePtrOutput() CloudServiceVaultAndSecretReferencePtrOutput {
	return i.ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i *cloudServiceVaultAndSecretReferencePtrType) ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultAndSecretReferencePtrOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
type CloudServiceVaultAndSecretReferenceOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultAndSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultAndSecretReference)(nil)).Elem()
}

func (o CloudServiceVaultAndSecretReferenceOutput) ToCloudServiceVaultAndSecretReferenceOutput() CloudServiceVaultAndSecretReferenceOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferenceOutput) ToCloudServiceVaultAndSecretReferenceOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferenceOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferenceOutput) ToCloudServiceVaultAndSecretReferencePtrOutput() CloudServiceVaultAndSecretReferencePtrOutput {
	return o.ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (o CloudServiceVaultAndSecretReferenceOutput) ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudServiceVaultAndSecretReference) *CloudServiceVaultAndSecretReference {
		return &v
	}).(CloudServiceVaultAndSecretReferencePtrOutput)
}

// Secret URL which contains the protected settings of the extension
func (o CloudServiceVaultAndSecretReferenceOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceVaultAndSecretReference) *string { return v.SecretUrl }).(pulumi.StringPtrOutput)
}

// The ARM Resource ID of the Key Vault
func (o CloudServiceVaultAndSecretReferenceOutput) SourceVault() SubResourcePtrOutput {
	return o.ApplyT(func(v CloudServiceVaultAndSecretReference) *SubResource { return v.SourceVault }).(SubResourcePtrOutput)
}

type CloudServiceVaultAndSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultAndSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceVaultAndSecretReference)(nil)).Elem()
}

func (o CloudServiceVaultAndSecretReferencePtrOutput) ToCloudServiceVaultAndSecretReferencePtrOutput() CloudServiceVaultAndSecretReferencePtrOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferencePtrOutput) ToCloudServiceVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferencePtrOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferencePtrOutput) Elem() CloudServiceVaultAndSecretReferenceOutput {
	return o.ApplyT(func(v *CloudServiceVaultAndSecretReference) CloudServiceVaultAndSecretReference {
		if v != nil {
			return *v
		}
		var ret CloudServiceVaultAndSecretReference
		return ret
	}).(CloudServiceVaultAndSecretReferenceOutput)
}

// Secret URL which contains the protected settings of the extension
func (o CloudServiceVaultAndSecretReferencePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceVaultAndSecretReference) *string {
		if v == nil {
			return nil
		}
		return v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// The ARM Resource ID of the Key Vault
func (o CloudServiceVaultAndSecretReferencePtrOutput) SourceVault() SubResourcePtrOutput {
	return o.ApplyT(func(v *CloudServiceVaultAndSecretReference) *SubResource {
		if v == nil {
			return nil
		}
		return v.SourceVault
	}).(SubResourcePtrOutput)
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
type CloudServiceVaultAndSecretReferenceResponse struct {
	// Secret URL which contains the protected settings of the extension
	SecretUrl *string `pulumi:"secretUrl"`
	// The ARM Resource ID of the Key Vault
	SourceVault *SubResourceResponse `pulumi:"sourceVault"`
}

// Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance.
type CloudServiceVaultAndSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultAndSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o CloudServiceVaultAndSecretReferenceResponseOutput) ToCloudServiceVaultAndSecretReferenceResponseOutput() CloudServiceVaultAndSecretReferenceResponseOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferenceResponseOutput) ToCloudServiceVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferenceResponseOutput {
	return o
}

// Secret URL which contains the protected settings of the extension
func (o CloudServiceVaultAndSecretReferenceResponseOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceVaultAndSecretReferenceResponse) *string { return v.SecretUrl }).(pulumi.StringPtrOutput)
}

// The ARM Resource ID of the Key Vault
func (o CloudServiceVaultAndSecretReferenceResponseOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceVaultAndSecretReferenceResponse) *SubResourceResponse { return v.SourceVault }).(SubResourceResponsePtrOutput)
}

type CloudServiceVaultAndSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultAndSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudServiceVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o CloudServiceVaultAndSecretReferenceResponsePtrOutput) ToCloudServiceVaultAndSecretReferenceResponsePtrOutput() CloudServiceVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferenceResponsePtrOutput) ToCloudServiceVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) CloudServiceVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o CloudServiceVaultAndSecretReferenceResponsePtrOutput) Elem() CloudServiceVaultAndSecretReferenceResponseOutput {
	return o.ApplyT(func(v *CloudServiceVaultAndSecretReferenceResponse) CloudServiceVaultAndSecretReferenceResponse {
		if v != nil {
			return *v
		}
		var ret CloudServiceVaultAndSecretReferenceResponse
		return ret
	}).(CloudServiceVaultAndSecretReferenceResponseOutput)
}

// Secret URL which contains the protected settings of the extension
func (o CloudServiceVaultAndSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudServiceVaultAndSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// The ARM Resource ID of the Key Vault
func (o CloudServiceVaultAndSecretReferenceResponsePtrOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *CloudServiceVaultAndSecretReferenceResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.SourceVault
	}).(SubResourceResponsePtrOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the role instance.
type CloudServiceVaultCertificate struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret.
	CertificateUrl *string `pulumi:"certificateUrl"`
}

// CloudServiceVaultCertificateInput is an input type that accepts CloudServiceVaultCertificateArgs and CloudServiceVaultCertificateOutput values.
// You can construct a concrete instance of `CloudServiceVaultCertificateInput` via:
//
//	CloudServiceVaultCertificateArgs{...}
type CloudServiceVaultCertificateInput interface {
	pulumi.Input

	ToCloudServiceVaultCertificateOutput() CloudServiceVaultCertificateOutput
	ToCloudServiceVaultCertificateOutputWithContext(context.Context) CloudServiceVaultCertificateOutput
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the role instance.
type CloudServiceVaultCertificateArgs struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret.
	CertificateUrl pulumi.StringPtrInput `pulumi:"certificateUrl"`
}

func (CloudServiceVaultCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultCertificate)(nil)).Elem()
}

func (i CloudServiceVaultCertificateArgs) ToCloudServiceVaultCertificateOutput() CloudServiceVaultCertificateOutput {
	return i.ToCloudServiceVaultCertificateOutputWithContext(context.Background())
}

func (i CloudServiceVaultCertificateArgs) ToCloudServiceVaultCertificateOutputWithContext(ctx context.Context) CloudServiceVaultCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultCertificateOutput)
}

// CloudServiceVaultCertificateArrayInput is an input type that accepts CloudServiceVaultCertificateArray and CloudServiceVaultCertificateArrayOutput values.
// You can construct a concrete instance of `CloudServiceVaultCertificateArrayInput` via:
//
//	CloudServiceVaultCertificateArray{ CloudServiceVaultCertificateArgs{...} }
type CloudServiceVaultCertificateArrayInput interface {
	pulumi.Input

	ToCloudServiceVaultCertificateArrayOutput() CloudServiceVaultCertificateArrayOutput
	ToCloudServiceVaultCertificateArrayOutputWithContext(context.Context) CloudServiceVaultCertificateArrayOutput
}

type CloudServiceVaultCertificateArray []CloudServiceVaultCertificateInput

func (CloudServiceVaultCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceVaultCertificate)(nil)).Elem()
}

func (i CloudServiceVaultCertificateArray) ToCloudServiceVaultCertificateArrayOutput() CloudServiceVaultCertificateArrayOutput {
	return i.ToCloudServiceVaultCertificateArrayOutputWithContext(context.Background())
}

func (i CloudServiceVaultCertificateArray) ToCloudServiceVaultCertificateArrayOutputWithContext(ctx context.Context) CloudServiceVaultCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultCertificateArrayOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the role instance.
type CloudServiceVaultCertificateOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultCertificate)(nil)).Elem()
}

func (o CloudServiceVaultCertificateOutput) ToCloudServiceVaultCertificateOutput() CloudServiceVaultCertificateOutput {
	return o
}

func (o CloudServiceVaultCertificateOutput) ToCloudServiceVaultCertificateOutputWithContext(ctx context.Context) CloudServiceVaultCertificateOutput {
	return o
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret.
func (o CloudServiceVaultCertificateOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceVaultCertificate) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

type CloudServiceVaultCertificateArrayOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceVaultCertificate)(nil)).Elem()
}

func (o CloudServiceVaultCertificateArrayOutput) ToCloudServiceVaultCertificateArrayOutput() CloudServiceVaultCertificateArrayOutput {
	return o
}

func (o CloudServiceVaultCertificateArrayOutput) ToCloudServiceVaultCertificateArrayOutputWithContext(ctx context.Context) CloudServiceVaultCertificateArrayOutput {
	return o
}

func (o CloudServiceVaultCertificateArrayOutput) Index(i pulumi.IntInput) CloudServiceVaultCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudServiceVaultCertificate {
		return vs[0].([]CloudServiceVaultCertificate)[vs[1].(int)]
	}).(CloudServiceVaultCertificateOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the role instance.
type CloudServiceVaultCertificateResponse struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret.
	CertificateUrl *string `pulumi:"certificateUrl"`
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the role instance.
type CloudServiceVaultCertificateResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultCertificateResponse)(nil)).Elem()
}

func (o CloudServiceVaultCertificateResponseOutput) ToCloudServiceVaultCertificateResponseOutput() CloudServiceVaultCertificateResponseOutput {
	return o
}

func (o CloudServiceVaultCertificateResponseOutput) ToCloudServiceVaultCertificateResponseOutputWithContext(ctx context.Context) CloudServiceVaultCertificateResponseOutput {
	return o
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret.
func (o CloudServiceVaultCertificateResponseOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudServiceVaultCertificateResponse) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

type CloudServiceVaultCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceVaultCertificateResponse)(nil)).Elem()
}

func (o CloudServiceVaultCertificateResponseArrayOutput) ToCloudServiceVaultCertificateResponseArrayOutput() CloudServiceVaultCertificateResponseArrayOutput {
	return o
}

func (o CloudServiceVaultCertificateResponseArrayOutput) ToCloudServiceVaultCertificateResponseArrayOutputWithContext(ctx context.Context) CloudServiceVaultCertificateResponseArrayOutput {
	return o
}

func (o CloudServiceVaultCertificateResponseArrayOutput) Index(i pulumi.IntInput) CloudServiceVaultCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudServiceVaultCertificateResponse {
		return vs[0].([]CloudServiceVaultCertificateResponse)[vs[1].(int)]
	}).(CloudServiceVaultCertificateResponseOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type CloudServiceVaultSecretGroup struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []CloudServiceVaultCertificate `pulumi:"vaultCertificates"`
}

// CloudServiceVaultSecretGroupInput is an input type that accepts CloudServiceVaultSecretGroupArgs and CloudServiceVaultSecretGroupOutput values.
// You can construct a concrete instance of `CloudServiceVaultSecretGroupInput` via:
//
//	CloudServiceVaultSecretGroupArgs{...}
type CloudServiceVaultSecretGroupInput interface {
	pulumi.Input

	ToCloudServiceVaultSecretGroupOutput() CloudServiceVaultSecretGroupOutput
	ToCloudServiceVaultSecretGroupOutputWithContext(context.Context) CloudServiceVaultSecretGroupOutput
}

// Describes a set of certificates which are all in the same Key Vault.
type CloudServiceVaultSecretGroupArgs struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault SubResourcePtrInput `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates CloudServiceVaultCertificateArrayInput `pulumi:"vaultCertificates"`
}

func (CloudServiceVaultSecretGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultSecretGroup)(nil)).Elem()
}

func (i CloudServiceVaultSecretGroupArgs) ToCloudServiceVaultSecretGroupOutput() CloudServiceVaultSecretGroupOutput {
	return i.ToCloudServiceVaultSecretGroupOutputWithContext(context.Background())
}

func (i CloudServiceVaultSecretGroupArgs) ToCloudServiceVaultSecretGroupOutputWithContext(ctx context.Context) CloudServiceVaultSecretGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultSecretGroupOutput)
}

// CloudServiceVaultSecretGroupArrayInput is an input type that accepts CloudServiceVaultSecretGroupArray and CloudServiceVaultSecretGroupArrayOutput values.
// You can construct a concrete instance of `CloudServiceVaultSecretGroupArrayInput` via:
//
//	CloudServiceVaultSecretGroupArray{ CloudServiceVaultSecretGroupArgs{...} }
type CloudServiceVaultSecretGroupArrayInput interface {
	pulumi.Input

	ToCloudServiceVaultSecretGroupArrayOutput() CloudServiceVaultSecretGroupArrayOutput
	ToCloudServiceVaultSecretGroupArrayOutputWithContext(context.Context) CloudServiceVaultSecretGroupArrayOutput
}

type CloudServiceVaultSecretGroupArray []CloudServiceVaultSecretGroupInput

func (CloudServiceVaultSecretGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceVaultSecretGroup)(nil)).Elem()
}

func (i CloudServiceVaultSecretGroupArray) ToCloudServiceVaultSecretGroupArrayOutput() CloudServiceVaultSecretGroupArrayOutput {
	return i.ToCloudServiceVaultSecretGroupArrayOutputWithContext(context.Background())
}

func (i CloudServiceVaultSecretGroupArray) ToCloudServiceVaultSecretGroupArrayOutputWithContext(ctx context.Context) CloudServiceVaultSecretGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudServiceVaultSecretGroupArrayOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type CloudServiceVaultSecretGroupOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultSecretGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultSecretGroup)(nil)).Elem()
}

func (o CloudServiceVaultSecretGroupOutput) ToCloudServiceVaultSecretGroupOutput() CloudServiceVaultSecretGroupOutput {
	return o
}

func (o CloudServiceVaultSecretGroupOutput) ToCloudServiceVaultSecretGroupOutputWithContext(ctx context.Context) CloudServiceVaultSecretGroupOutput {
	return o
}

// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
func (o CloudServiceVaultSecretGroupOutput) SourceVault() SubResourcePtrOutput {
	return o.ApplyT(func(v CloudServiceVaultSecretGroup) *SubResource { return v.SourceVault }).(SubResourcePtrOutput)
}

// The list of key vault references in SourceVault which contain certificates.
func (o CloudServiceVaultSecretGroupOutput) VaultCertificates() CloudServiceVaultCertificateArrayOutput {
	return o.ApplyT(func(v CloudServiceVaultSecretGroup) []CloudServiceVaultCertificate { return v.VaultCertificates }).(CloudServiceVaultCertificateArrayOutput)
}

type CloudServiceVaultSecretGroupArrayOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultSecretGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceVaultSecretGroup)(nil)).Elem()
}

func (o CloudServiceVaultSecretGroupArrayOutput) ToCloudServiceVaultSecretGroupArrayOutput() CloudServiceVaultSecretGroupArrayOutput {
	return o
}

func (o CloudServiceVaultSecretGroupArrayOutput) ToCloudServiceVaultSecretGroupArrayOutputWithContext(ctx context.Context) CloudServiceVaultSecretGroupArrayOutput {
	return o
}

func (o CloudServiceVaultSecretGroupArrayOutput) Index(i pulumi.IntInput) CloudServiceVaultSecretGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudServiceVaultSecretGroup {
		return vs[0].([]CloudServiceVaultSecretGroup)[vs[1].(int)]
	}).(CloudServiceVaultSecretGroupOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type CloudServiceVaultSecretGroupResponse struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResourceResponse `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []CloudServiceVaultCertificateResponse `pulumi:"vaultCertificates"`
}

// Describes a set of certificates which are all in the same Key Vault.
type CloudServiceVaultSecretGroupResponseOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultSecretGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudServiceVaultSecretGroupResponse)(nil)).Elem()
}

func (o CloudServiceVaultSecretGroupResponseOutput) ToCloudServiceVaultSecretGroupResponseOutput() CloudServiceVaultSecretGroupResponseOutput {
	return o
}

func (o CloudServiceVaultSecretGroupResponseOutput) ToCloudServiceVaultSecretGroupResponseOutputWithContext(ctx context.Context) CloudServiceVaultSecretGroupResponseOutput {
	return o
}

// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
func (o CloudServiceVaultSecretGroupResponseOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v CloudServiceVaultSecretGroupResponse) *SubResourceResponse { return v.SourceVault }).(SubResourceResponsePtrOutput)
}

// The list of key vault references in SourceVault which contain certificates.
func (o CloudServiceVaultSecretGroupResponseOutput) VaultCertificates() CloudServiceVaultCertificateResponseArrayOutput {
	return o.ApplyT(func(v CloudServiceVaultSecretGroupResponse) []CloudServiceVaultCertificateResponse {
		return v.VaultCertificates
	}).(CloudServiceVaultCertificateResponseArrayOutput)
}

type CloudServiceVaultSecretGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (CloudServiceVaultSecretGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudServiceVaultSecretGroupResponse)(nil)).Elem()
}

func (o CloudServiceVaultSecretGroupResponseArrayOutput) ToCloudServiceVaultSecretGroupResponseArrayOutput() CloudServiceVaultSecretGroupResponseArrayOutput {
	return o
}

func (o CloudServiceVaultSecretGroupResponseArrayOutput) ToCloudServiceVaultSecretGroupResponseArrayOutputWithContext(ctx context.Context) CloudServiceVaultSecretGroupResponseArrayOutput {
	return o
}

func (o CloudServiceVaultSecretGroupResponseArrayOutput) Index(i pulumi.IntInput) CloudServiceVaultSecretGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudServiceVaultSecretGroupResponse {
		return vs[0].([]CloudServiceVaultSecretGroupResponse)[vs[1].(int)]
	}).(CloudServiceVaultSecretGroupResponseOutput)
}

// Information of community gallery if current gallery is shared to community
type CommunityGalleryInfo struct {
	// End-user license agreement for community gallery image.
	Eula *string `pulumi:"eula"`
	// The prefix of the gallery name that will be displayed publicly. Visible to all users.
	PublicNamePrefix *string `pulumi:"publicNamePrefix"`
	// Community gallery publisher support email. The email address of the publisher. Visible to all users.
	PublisherContact *string `pulumi:"publisherContact"`
	// The link to the publisher website. Visible to all users.
	PublisherUri *string `pulumi:"publisherUri"`
}

// CommunityGalleryInfoInput is an input type that accepts CommunityGalleryInfoArgs and CommunityGalleryInfoOutput values.
// You can construct a concrete instance of `CommunityGalleryInfoInput` via:
//
//	CommunityGalleryInfoArgs{...}
type CommunityGalleryInfoInput interface {
	pulumi.Input

	ToCommunityGalleryInfoOutput() CommunityGalleryInfoOutput
	ToCommunityGalleryInfoOutputWithContext(context.Context) CommunityGalleryInfoOutput
}

// Information of community gallery if current gallery is shared to community
type CommunityGalleryInfoArgs struct {
	// End-user license agreement for community gallery image.
	Eula pulumi.StringPtrInput `pulumi:"eula"`
	// The prefix of the gallery name that will be displayed publicly. Visible to all users.
	PublicNamePrefix pulumi.StringPtrInput `pulumi:"publicNamePrefix"`
	// Community gallery publisher support email. The email address of the publisher. Visible to all users.
	PublisherContact pulumi.StringPtrInput `pulumi:"publisherContact"`
	// The link to the publisher website. Visible to all users.
	PublisherUri pulumi.StringPtrInput `pulumi:"publisherUri"`
}

func (CommunityGalleryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityGalleryInfo)(nil)).Elem()
}

func (i CommunityGalleryInfoArgs) ToCommunityGalleryInfoOutput() CommunityGalleryInfoOutput {
	return i.ToCommunityGalleryInfoOutputWithContext(context.Background())
}

func (i CommunityGalleryInfoArgs) ToCommunityGalleryInfoOutputWithContext(ctx context.Context) CommunityGalleryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommunityGalleryInfoOutput)
}

func (i CommunityGalleryInfoArgs) ToCommunityGalleryInfoPtrOutput() CommunityGalleryInfoPtrOutput {
	return i.ToCommunityGalleryInfoPtrOutputWithContext(context.Background())
}

func (i CommunityGalleryInfoArgs) ToCommunityGalleryInfoPtrOutputWithContext(ctx context.Context) CommunityGalleryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommunityGalleryInfoOutput).ToCommunityGalleryInfoPtrOutputWithContext(ctx)
}

// CommunityGalleryInfoPtrInput is an input type that accepts CommunityGalleryInfoArgs, CommunityGalleryInfoPtr and CommunityGalleryInfoPtrOutput values.
// You can construct a concrete instance of `CommunityGalleryInfoPtrInput` via:
//
//	        CommunityGalleryInfoArgs{...}
//
//	or:
//
//	        nil
type CommunityGalleryInfoPtrInput interface {
	pulumi.Input

	ToCommunityGalleryInfoPtrOutput() CommunityGalleryInfoPtrOutput
	ToCommunityGalleryInfoPtrOutputWithContext(context.Context) CommunityGalleryInfoPtrOutput
}

type communityGalleryInfoPtrType CommunityGalleryInfoArgs

func CommunityGalleryInfoPtr(v *CommunityGalleryInfoArgs) CommunityGalleryInfoPtrInput {
	return (*communityGalleryInfoPtrType)(v)
}

func (*communityGalleryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommunityGalleryInfo)(nil)).Elem()
}

func (i *communityGalleryInfoPtrType) ToCommunityGalleryInfoPtrOutput() CommunityGalleryInfoPtrOutput {
	return i.ToCommunityGalleryInfoPtrOutputWithContext(context.Background())
}

func (i *communityGalleryInfoPtrType) ToCommunityGalleryInfoPtrOutputWithContext(ctx context.Context) CommunityGalleryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommunityGalleryInfoPtrOutput)
}

// Information of community gallery if current gallery is shared to community
type CommunityGalleryInfoOutput struct{ *pulumi.OutputState }

func (CommunityGalleryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityGalleryInfo)(nil)).Elem()
}

func (o CommunityGalleryInfoOutput) ToCommunityGalleryInfoOutput() CommunityGalleryInfoOutput {
	return o
}

func (o CommunityGalleryInfoOutput) ToCommunityGalleryInfoOutputWithContext(ctx context.Context) CommunityGalleryInfoOutput {
	return o
}

func (o CommunityGalleryInfoOutput) ToCommunityGalleryInfoPtrOutput() CommunityGalleryInfoPtrOutput {
	return o.ToCommunityGalleryInfoPtrOutputWithContext(context.Background())
}

func (o CommunityGalleryInfoOutput) ToCommunityGalleryInfoPtrOutputWithContext(ctx context.Context) CommunityGalleryInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommunityGalleryInfo) *CommunityGalleryInfo {
		return &v
	}).(CommunityGalleryInfoPtrOutput)
}

// End-user license agreement for community gallery image.
func (o CommunityGalleryInfoOutput) Eula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfo) *string { return v.Eula }).(pulumi.StringPtrOutput)
}

// The prefix of the gallery name that will be displayed publicly. Visible to all users.
func (o CommunityGalleryInfoOutput) PublicNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfo) *string { return v.PublicNamePrefix }).(pulumi.StringPtrOutput)
}

// Community gallery publisher support email. The email address of the publisher. Visible to all users.
func (o CommunityGalleryInfoOutput) PublisherContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfo) *string { return v.PublisherContact }).(pulumi.StringPtrOutput)
}

// The link to the publisher website. Visible to all users.
func (o CommunityGalleryInfoOutput) PublisherUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfo) *string { return v.PublisherUri }).(pulumi.StringPtrOutput)
}

type CommunityGalleryInfoPtrOutput struct{ *pulumi.OutputState }

func (CommunityGalleryInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommunityGalleryInfo)(nil)).Elem()
}

func (o CommunityGalleryInfoPtrOutput) ToCommunityGalleryInfoPtrOutput() CommunityGalleryInfoPtrOutput {
	return o
}

func (o CommunityGalleryInfoPtrOutput) ToCommunityGalleryInfoPtrOutputWithContext(ctx context.Context) CommunityGalleryInfoPtrOutput {
	return o
}

func (o CommunityGalleryInfoPtrOutput) Elem() CommunityGalleryInfoOutput {
	return o.ApplyT(func(v *CommunityGalleryInfo) CommunityGalleryInfo {
		if v != nil {
			return *v
		}
		var ret CommunityGalleryInfo
		return ret
	}).(CommunityGalleryInfoOutput)
}

// End-user license agreement for community gallery image.
func (o CommunityGalleryInfoPtrOutput) Eula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfo) *string {
		if v == nil {
			return nil
		}
		return v.Eula
	}).(pulumi.StringPtrOutput)
}

// The prefix of the gallery name that will be displayed publicly. Visible to all users.
func (o CommunityGalleryInfoPtrOutput) PublicNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfo) *string {
		if v == nil {
			return nil
		}
		return v.PublicNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Community gallery publisher support email. The email address of the publisher. Visible to all users.
func (o CommunityGalleryInfoPtrOutput) PublisherContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfo) *string {
		if v == nil {
			return nil
		}
		return v.PublisherContact
	}).(pulumi.StringPtrOutput)
}

// The link to the publisher website. Visible to all users.
func (o CommunityGalleryInfoPtrOutput) PublisherUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfo) *string {
		if v == nil {
			return nil
		}
		return v.PublisherUri
	}).(pulumi.StringPtrOutput)
}

// Information of community gallery if current gallery is shared to community
type CommunityGalleryInfoResponse struct {
	// Contains info about whether community gallery sharing is enabled.
	CommunityGalleryEnabled bool `pulumi:"communityGalleryEnabled"`
	// End-user license agreement for community gallery image.
	Eula *string `pulumi:"eula"`
	// The prefix of the gallery name that will be displayed publicly. Visible to all users.
	PublicNamePrefix *string `pulumi:"publicNamePrefix"`
	// Community gallery public name list.
	PublicNames []string `pulumi:"publicNames"`
	// Community gallery publisher support email. The email address of the publisher. Visible to all users.
	PublisherContact *string `pulumi:"publisherContact"`
	// The link to the publisher website. Visible to all users.
	PublisherUri *string `pulumi:"publisherUri"`
}

// Information of community gallery if current gallery is shared to community
type CommunityGalleryInfoResponseOutput struct{ *pulumi.OutputState }

func (CommunityGalleryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityGalleryInfoResponse)(nil)).Elem()
}

func (o CommunityGalleryInfoResponseOutput) ToCommunityGalleryInfoResponseOutput() CommunityGalleryInfoResponseOutput {
	return o
}

func (o CommunityGalleryInfoResponseOutput) ToCommunityGalleryInfoResponseOutputWithContext(ctx context.Context) CommunityGalleryInfoResponseOutput {
	return o
}

// Contains info about whether community gallery sharing is enabled.
func (o CommunityGalleryInfoResponseOutput) CommunityGalleryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v CommunityGalleryInfoResponse) bool { return v.CommunityGalleryEnabled }).(pulumi.BoolOutput)
}

// End-user license agreement for community gallery image.
func (o CommunityGalleryInfoResponseOutput) Eula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfoResponse) *string { return v.Eula }).(pulumi.StringPtrOutput)
}

// The prefix of the gallery name that will be displayed publicly. Visible to all users.
func (o CommunityGalleryInfoResponseOutput) PublicNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfoResponse) *string { return v.PublicNamePrefix }).(pulumi.StringPtrOutput)
}

// Community gallery public name list.
func (o CommunityGalleryInfoResponseOutput) PublicNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommunityGalleryInfoResponse) []string { return v.PublicNames }).(pulumi.StringArrayOutput)
}

// Community gallery publisher support email. The email address of the publisher. Visible to all users.
func (o CommunityGalleryInfoResponseOutput) PublisherContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfoResponse) *string { return v.PublisherContact }).(pulumi.StringPtrOutput)
}

// The link to the publisher website. Visible to all users.
func (o CommunityGalleryInfoResponseOutput) PublisherUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommunityGalleryInfoResponse) *string { return v.PublisherUri }).(pulumi.StringPtrOutput)
}

type CommunityGalleryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (CommunityGalleryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommunityGalleryInfoResponse)(nil)).Elem()
}

func (o CommunityGalleryInfoResponsePtrOutput) ToCommunityGalleryInfoResponsePtrOutput() CommunityGalleryInfoResponsePtrOutput {
	return o
}

func (o CommunityGalleryInfoResponsePtrOutput) ToCommunityGalleryInfoResponsePtrOutputWithContext(ctx context.Context) CommunityGalleryInfoResponsePtrOutput {
	return o
}

func (o CommunityGalleryInfoResponsePtrOutput) Elem() CommunityGalleryInfoResponseOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) CommunityGalleryInfoResponse {
		if v != nil {
			return *v
		}
		var ret CommunityGalleryInfoResponse
		return ret
	}).(CommunityGalleryInfoResponseOutput)
}

// Contains info about whether community gallery sharing is enabled.
func (o CommunityGalleryInfoResponsePtrOutput) CommunityGalleryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CommunityGalleryEnabled
	}).(pulumi.BoolPtrOutput)
}

// End-user license agreement for community gallery image.
func (o CommunityGalleryInfoResponsePtrOutput) Eula() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Eula
	}).(pulumi.StringPtrOutput)
}

// The prefix of the gallery name that will be displayed publicly. Visible to all users.
func (o CommunityGalleryInfoResponsePtrOutput) PublicNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Community gallery public name list.
func (o CommunityGalleryInfoResponsePtrOutput) PublicNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.PublicNames
	}).(pulumi.StringArrayOutput)
}

// Community gallery publisher support email. The email address of the publisher. Visible to all users.
func (o CommunityGalleryInfoResponsePtrOutput) PublisherContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublisherContact
	}).(pulumi.StringPtrOutput)
}

// The link to the publisher website. Visible to all users.
func (o CommunityGalleryInfoResponsePtrOutput) PublisherUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommunityGalleryInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublisherUri
	}).(pulumi.StringPtrOutput)
}

// Indicates the error details if the background copy of a resource created via the CopyStart operation fails.
type CopyCompletionError struct {
	// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
	ErrorCode string `pulumi:"errorCode"`
	// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
	ErrorMessage string `pulumi:"errorMessage"`
}

// CopyCompletionErrorInput is an input type that accepts CopyCompletionErrorArgs and CopyCompletionErrorOutput values.
// You can construct a concrete instance of `CopyCompletionErrorInput` via:
//
//	CopyCompletionErrorArgs{...}
type CopyCompletionErrorInput interface {
	pulumi.Input

	ToCopyCompletionErrorOutput() CopyCompletionErrorOutput
	ToCopyCompletionErrorOutputWithContext(context.Context) CopyCompletionErrorOutput
}

// Indicates the error details if the background copy of a resource created via the CopyStart operation fails.
type CopyCompletionErrorArgs struct {
	// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
	ErrorCode pulumi.StringInput `pulumi:"errorCode"`
	// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
}

func (CopyCompletionErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyCompletionError)(nil)).Elem()
}

func (i CopyCompletionErrorArgs) ToCopyCompletionErrorOutput() CopyCompletionErrorOutput {
	return i.ToCopyCompletionErrorOutputWithContext(context.Background())
}

func (i CopyCompletionErrorArgs) ToCopyCompletionErrorOutputWithContext(ctx context.Context) CopyCompletionErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyCompletionErrorOutput)
}

func (i CopyCompletionErrorArgs) ToCopyCompletionErrorPtrOutput() CopyCompletionErrorPtrOutput {
	return i.ToCopyCompletionErrorPtrOutputWithContext(context.Background())
}

func (i CopyCompletionErrorArgs) ToCopyCompletionErrorPtrOutputWithContext(ctx context.Context) CopyCompletionErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyCompletionErrorOutput).ToCopyCompletionErrorPtrOutputWithContext(ctx)
}

// CopyCompletionErrorPtrInput is an input type that accepts CopyCompletionErrorArgs, CopyCompletionErrorPtr and CopyCompletionErrorPtrOutput values.
// You can construct a concrete instance of `CopyCompletionErrorPtrInput` via:
//
//	        CopyCompletionErrorArgs{...}
//
//	or:
//
//	        nil
type CopyCompletionErrorPtrInput interface {
	pulumi.Input

	ToCopyCompletionErrorPtrOutput() CopyCompletionErrorPtrOutput
	ToCopyCompletionErrorPtrOutputWithContext(context.Context) CopyCompletionErrorPtrOutput
}

type copyCompletionErrorPtrType CopyCompletionErrorArgs

func CopyCompletionErrorPtr(v *CopyCompletionErrorArgs) CopyCompletionErrorPtrInput {
	return (*copyCompletionErrorPtrType)(v)
}

func (*copyCompletionErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyCompletionError)(nil)).Elem()
}

func (i *copyCompletionErrorPtrType) ToCopyCompletionErrorPtrOutput() CopyCompletionErrorPtrOutput {
	return i.ToCopyCompletionErrorPtrOutputWithContext(context.Background())
}

func (i *copyCompletionErrorPtrType) ToCopyCompletionErrorPtrOutputWithContext(ctx context.Context) CopyCompletionErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CopyCompletionErrorPtrOutput)
}

// Indicates the error details if the background copy of a resource created via the CopyStart operation fails.
type CopyCompletionErrorOutput struct{ *pulumi.OutputState }

func (CopyCompletionErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyCompletionError)(nil)).Elem()
}

func (o CopyCompletionErrorOutput) ToCopyCompletionErrorOutput() CopyCompletionErrorOutput {
	return o
}

func (o CopyCompletionErrorOutput) ToCopyCompletionErrorOutputWithContext(ctx context.Context) CopyCompletionErrorOutput {
	return o
}

func (o CopyCompletionErrorOutput) ToCopyCompletionErrorPtrOutput() CopyCompletionErrorPtrOutput {
	return o.ToCopyCompletionErrorPtrOutputWithContext(context.Background())
}

func (o CopyCompletionErrorOutput) ToCopyCompletionErrorPtrOutputWithContext(ctx context.Context) CopyCompletionErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CopyCompletionError) *CopyCompletionError {
		return &v
	}).(CopyCompletionErrorPtrOutput)
}

// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v CopyCompletionError) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v CopyCompletionError) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

type CopyCompletionErrorPtrOutput struct{ *pulumi.OutputState }

func (CopyCompletionErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyCompletionError)(nil)).Elem()
}

func (o CopyCompletionErrorPtrOutput) ToCopyCompletionErrorPtrOutput() CopyCompletionErrorPtrOutput {
	return o
}

func (o CopyCompletionErrorPtrOutput) ToCopyCompletionErrorPtrOutputWithContext(ctx context.Context) CopyCompletionErrorPtrOutput {
	return o
}

func (o CopyCompletionErrorPtrOutput) Elem() CopyCompletionErrorOutput {
	return o.ApplyT(func(v *CopyCompletionError) CopyCompletionError {
		if v != nil {
			return *v
		}
		var ret CopyCompletionError
		return ret
	}).(CopyCompletionErrorOutput)
}

// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorPtrOutput) ErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CopyCompletionError) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorCode
	}).(pulumi.StringPtrOutput)
}

// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorPtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CopyCompletionError) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Indicates the error details if the background copy of a resource created via the CopyStart operation fails.
type CopyCompletionErrorResponse struct {
	// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
	ErrorCode string `pulumi:"errorCode"`
	// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
	ErrorMessage string `pulumi:"errorMessage"`
}

// Indicates the error details if the background copy of a resource created via the CopyStart operation fails.
type CopyCompletionErrorResponseOutput struct{ *pulumi.OutputState }

func (CopyCompletionErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CopyCompletionErrorResponse)(nil)).Elem()
}

func (o CopyCompletionErrorResponseOutput) ToCopyCompletionErrorResponseOutput() CopyCompletionErrorResponseOutput {
	return o
}

func (o CopyCompletionErrorResponseOutput) ToCopyCompletionErrorResponseOutputWithContext(ctx context.Context) CopyCompletionErrorResponseOutput {
	return o
}

// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorResponseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v CopyCompletionErrorResponse) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v CopyCompletionErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

type CopyCompletionErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (CopyCompletionErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CopyCompletionErrorResponse)(nil)).Elem()
}

func (o CopyCompletionErrorResponsePtrOutput) ToCopyCompletionErrorResponsePtrOutput() CopyCompletionErrorResponsePtrOutput {
	return o
}

func (o CopyCompletionErrorResponsePtrOutput) ToCopyCompletionErrorResponsePtrOutputWithContext(ctx context.Context) CopyCompletionErrorResponsePtrOutput {
	return o
}

func (o CopyCompletionErrorResponsePtrOutput) Elem() CopyCompletionErrorResponseOutput {
	return o.ApplyT(func(v *CopyCompletionErrorResponse) CopyCompletionErrorResponse {
		if v != nil {
			return *v
		}
		var ret CopyCompletionErrorResponse
		return ret
	}).(CopyCompletionErrorResponseOutput)
}

// Indicates the error code if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorResponsePtrOutput) ErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CopyCompletionErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorCode
	}).(pulumi.StringPtrOutput)
}

// Indicates the error message if the background copy of a resource created via the CopyStart operation fails.
func (o CopyCompletionErrorResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CopyCompletionErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Data used when creating a disk.
type CreationData struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Required if createOption is CopyFromSanSnapshot. This is the ARM id of the source elastic san volume snapshot.
	ElasticSanResourceId *string `pulumi:"elasticSanResourceId"`
	// Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReference `pulumi:"galleryImageReference"`
	// Disk source information for PIR or user images.
	ImageReference *ImageDiskReference `pulumi:"imageReference"`
	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int `pulumi:"logicalSectorSize"`
	// Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled.
	PerformancePlus *bool `pulumi:"performancePlus"`
	// If this field is set on a snapshot and createOption is CopyStart, the snapshot will be copied at a quicker speed.
	ProvisionedBandwidthCopySpeed *string `pulumi:"provisionedBandwidthCopySpeed"`
	// If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state.
	SecurityDataUri *string `pulumi:"securityDataUri"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *float64 `pulumi:"uploadSizeBytes"`
}

// CreationDataInput is an input type that accepts CreationDataArgs and CreationDataOutput values.
// You can construct a concrete instance of `CreationDataInput` via:
//
//	CreationDataArgs{...}
type CreationDataInput interface {
	pulumi.Input

	ToCreationDataOutput() CreationDataOutput
	ToCreationDataOutputWithContext(context.Context) CreationDataOutput
}

// Data used when creating a disk.
type CreationDataArgs struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Required if createOption is CopyFromSanSnapshot. This is the ARM id of the source elastic san volume snapshot.
	ElasticSanResourceId pulumi.StringPtrInput `pulumi:"elasticSanResourceId"`
	// Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference ImageDiskReferencePtrInput `pulumi:"galleryImageReference"`
	// Disk source information for PIR or user images.
	ImageReference ImageDiskReferencePtrInput `pulumi:"imageReference"`
	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize pulumi.IntPtrInput `pulumi:"logicalSectorSize"`
	// Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled.
	PerformancePlus pulumi.BoolPtrInput `pulumi:"performancePlus"`
	// If this field is set on a snapshot and createOption is CopyStart, the snapshot will be copied at a quicker speed.
	ProvisionedBandwidthCopySpeed pulumi.StringPtrInput `pulumi:"provisionedBandwidthCopySpeed"`
	// If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state.
	SecurityDataUri pulumi.StringPtrInput `pulumi:"securityDataUri"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri pulumi.StringPtrInput `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes pulumi.Float64PtrInput `pulumi:"uploadSizeBytes"`
}

func (CreationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (i CreationDataArgs) ToCreationDataOutput() CreationDataOutput {
	return i.ToCreationDataOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput)
}

// Data used when creating a disk.
type CreationDataOutput struct{ *pulumi.OutputState }

func (CreationDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (o CreationDataOutput) ToCreationDataOutput() CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return o
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationData) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Required if createOption is CopyFromSanSnapshot. This is the ARM id of the source elastic san volume snapshot.
func (o CreationDataOutput) ElasticSanResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.ElasticSanResourceId }).(pulumi.StringPtrOutput)
}

// Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataOutput) GalleryImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v CreationData) *ImageDiskReference { return v.GalleryImageReference }).(ImageDiskReferencePtrOutput)
}

// Disk source information for PIR or user images.
func (o CreationDataOutput) ImageReference() ImageDiskReferencePtrOutput {
	return o.ApplyT(func(v CreationData) *ImageDiskReference { return v.ImageReference }).(ImageDiskReferencePtrOutput)
}

// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
func (o CreationDataOutput) LogicalSectorSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CreationData) *int { return v.LogicalSectorSize }).(pulumi.IntPtrOutput)
}

// Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled.
func (o CreationDataOutput) PerformancePlus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CreationData) *bool { return v.PerformancePlus }).(pulumi.BoolPtrOutput)
}

// If this field is set on a snapshot and createOption is CopyStart, the snapshot will be copied at a quicker speed.
func (o CreationDataOutput) ProvisionedBandwidthCopySpeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.ProvisionedBandwidthCopySpeed }).(pulumi.StringPtrOutput)
}

// If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state.
func (o CreationDataOutput) SecurityDataUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SecurityDataUri }).(pulumi.StringPtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataOutput) UploadSizeBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CreationData) *float64 { return v.UploadSizeBytes }).(pulumi.Float64PtrOutput)
}

// Data used when creating a disk.
type CreationDataResponse struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption string `pulumi:"createOption"`
	// Required if createOption is CopyFromSanSnapshot. This is the ARM id of the source elastic san volume snapshot.
	ElasticSanResourceId *string `pulumi:"elasticSanResourceId"`
	// Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
	GalleryImageReference *ImageDiskReferenceResponse `pulumi:"galleryImageReference"`
	// Disk source information for PIR or user images.
	ImageReference *ImageDiskReferenceResponse `pulumi:"imageReference"`
	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int `pulumi:"logicalSectorSize"`
	// Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled.
	PerformancePlus *bool `pulumi:"performancePlus"`
	// If this field is set on a snapshot and createOption is CopyStart, the snapshot will be copied at a quicker speed.
	ProvisionedBandwidthCopySpeed *string `pulumi:"provisionedBandwidthCopySpeed"`
	// If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state.
	SecurityDataUri *string `pulumi:"securityDataUri"`
	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// If this field is set, this is the unique id identifying the source of this resource.
	SourceUniqueId string `pulumi:"sourceUniqueId"`
	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceUri *string `pulumi:"sourceUri"`
	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *float64 `pulumi:"uploadSizeBytes"`
}

// Data used when creating a disk.
type CreationDataResponseOutput struct{ *pulumi.OutputState }

func (CreationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return o
}

// This enumerates the possible sources of a disk's creation.
func (o CreationDataResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Required if createOption is CopyFromSanSnapshot. This is the ARM id of the source elastic san volume snapshot.
func (o CreationDataResponseOutput) ElasticSanResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.ElasticSanResourceId }).(pulumi.StringPtrOutput)
}

// Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
func (o CreationDataResponseOutput) GalleryImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.GalleryImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// Disk source information for PIR or user images.
func (o CreationDataResponseOutput) ImageReference() ImageDiskReferenceResponsePtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *ImageDiskReferenceResponse { return v.ImageReference }).(ImageDiskReferenceResponsePtrOutput)
}

// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
func (o CreationDataResponseOutput) LogicalSectorSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *int { return v.LogicalSectorSize }).(pulumi.IntPtrOutput)
}

// Set this flag to true to get a boost on the performance target of the disk deployed, see here on the respective performance target. This flag can only be set on disk creation time and cannot be disabled after enabled.
func (o CreationDataResponseOutput) PerformancePlus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *bool { return v.PerformancePlus }).(pulumi.BoolPtrOutput)
}

// If this field is set on a snapshot and createOption is CopyStart, the snapshot will be copied at a quicker speed.
func (o CreationDataResponseOutput) ProvisionedBandwidthCopySpeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.ProvisionedBandwidthCopySpeed }).(pulumi.StringPtrOutput)
}

// If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state.
func (o CreationDataResponseOutput) SecurityDataUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SecurityDataUri }).(pulumi.StringPtrOutput)
}

// If createOption is Copy, this is the ARM id of the source snapshot or disk.
func (o CreationDataResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// If this field is set, this is the unique id identifying the source of this resource.
func (o CreationDataResponseOutput) SourceUniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v CreationDataResponse) string { return v.SourceUniqueId }).(pulumi.StringOutput)
}

// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
func (o CreationDataResponseOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceUri }).(pulumi.StringPtrOutput)
}

// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
func (o CreationDataResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
func (o CreationDataResponseOutput) UploadSizeBytes() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *float64 { return v.UploadSizeBytes }).(pulumi.Float64PtrOutput)
}

// Describes a data disk.
type DataDisk struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *CachingTypes `pulumi:"caching"`
	// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine data disk. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether data disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is deleted. The default value is set to **Detach**.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. **This feature is still in preview**. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
	DetachOption *string `pulumi:"detachOption"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDisk `pulumi:"image"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// The source resource identifier. It can be a snapshot, or disk restore point from which to create a disk.
	SourceResource *ApiEntityReference `pulumi:"sourceResource"`
	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `pulumi:"toBeDetached"`
	// The virtual hard disk.
	Vhd *VirtualHardDisk `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// DataDiskInput is an input type that accepts DataDiskArgs and DataDiskOutput values.
// You can construct a concrete instance of `DataDiskInput` via:
//
//	DataDiskArgs{...}
type DataDiskInput interface {
	pulumi.Input

	ToDataDiskOutput() DataDiskOutput
	ToDataDiskOutputWithContext(context.Context) DataDiskOutput
}

// Describes a data disk.
type DataDiskArgs struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
	Caching CachingTypesPtrInput `pulumi:"caching"`
	// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine data disk. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies whether data disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is deleted. The default value is set to **Detach**.
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. **This feature is still in preview**. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
	DetachOption pulumi.StringPtrInput `pulumi:"detachOption"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image VirtualHardDiskPtrInput `pulumi:"image"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk ManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The source resource identifier. It can be a snapshot, or disk restore point from which to create a disk.
	SourceResource ApiEntityReferencePtrInput `pulumi:"sourceResource"`
	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached pulumi.BoolPtrInput `pulumi:"toBeDetached"`
	// The virtual hard disk.
	Vhd VirtualHardDiskPtrInput `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (DataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (i DataDiskArgs) ToDataDiskOutput() DataDiskOutput {
	return i.ToDataDiskOutputWithContext(context.Background())
}

func (i DataDiskArgs) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskOutput)
}

// DataDiskArrayInput is an input type that accepts DataDiskArray and DataDiskArrayOutput values.
// You can construct a concrete instance of `DataDiskArrayInput` via:
//
//	DataDiskArray{ DataDiskArgs{...} }
type DataDiskArrayInput interface {
	pulumi.Input

	ToDataDiskArrayOutput() DataDiskArrayOutput
	ToDataDiskArrayOutputWithContext(context.Context) DataDiskArrayOutput
}

type DataDiskArray []DataDiskInput

func (DataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (i DataDiskArray) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return i.ToDataDiskArrayOutputWithContext(context.Background())
}

func (i DataDiskArray) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskArrayOutput)
}

// Describes a data disk.
type DataDiskOutput struct{ *pulumi.OutputState }

func (DataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (o DataDiskOutput) ToDataDiskOutput() DataDiskOutput {
	return o
}

func (o DataDiskOutput) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return o
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
func (o DataDiskOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v DataDisk) *CachingTypes { return v.Caching }).(CachingTypesPtrOutput)
}

// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine data disk. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
func (o DataDiskOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v DataDisk) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether data disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is deleted. The default value is set to **Detach**.
func (o DataDiskOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. **This feature is still in preview**. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
func (o DataDiskOutput) DetachOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.DetachOption }).(pulumi.StringPtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o DataDiskOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataDisk) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o DataDiskOutput) Image() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v DataDisk) *VirtualHardDisk { return v.Image }).(VirtualHardDiskPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o DataDiskOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisk) int { return v.Lun }).(pulumi.IntOutput)
}

// The managed disk parameters.
func (o DataDiskOutput) ManagedDisk() ManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v DataDisk) *ManagedDiskParameters { return v.ManagedDisk }).(ManagedDiskParametersPtrOutput)
}

// The disk name.
func (o DataDiskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The source resource identifier. It can be a snapshot, or disk restore point from which to create a disk.
func (o DataDiskOutput) SourceResource() ApiEntityReferencePtrOutput {
	return o.ApplyT(func(v DataDisk) *ApiEntityReference { return v.SourceResource }).(ApiEntityReferencePtrOutput)
}

// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
func (o DataDiskOutput) ToBeDetached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataDisk) *bool { return v.ToBeDetached }).(pulumi.BoolPtrOutput)
}

// The virtual hard disk.
func (o DataDiskOutput) Vhd() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v DataDisk) *VirtualHardDisk { return v.Vhd }).(VirtualHardDiskPtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o DataDiskOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataDisk) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type DataDiskArrayOutput struct{ *pulumi.OutputState }

func (DataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (o DataDiskArrayOutput) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return o
}

func (o DataDiskArrayOutput) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return o
}

func (o DataDiskArrayOutput) Index(i pulumi.IntInput) DataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDisk {
		return vs[0].([]DataDisk)[vs[1].(int)]
	}).(DataDiskOutput)
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryption struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
}

// DataDiskImageEncryptionInput is an input type that accepts DataDiskImageEncryptionArgs and DataDiskImageEncryptionOutput values.
// You can construct a concrete instance of `DataDiskImageEncryptionInput` via:
//
//	DataDiskImageEncryptionArgs{...}
type DataDiskImageEncryptionInput interface {
	pulumi.Input

	ToDataDiskImageEncryptionOutput() DataDiskImageEncryptionOutput
	ToDataDiskImageEncryptionOutputWithContext(context.Context) DataDiskImageEncryptionOutput
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionArgs struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun pulumi.IntInput `pulumi:"lun"`
}

func (DataDiskImageEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskImageEncryption)(nil)).Elem()
}

func (i DataDiskImageEncryptionArgs) ToDataDiskImageEncryptionOutput() DataDiskImageEncryptionOutput {
	return i.ToDataDiskImageEncryptionOutputWithContext(context.Background())
}

func (i DataDiskImageEncryptionArgs) ToDataDiskImageEncryptionOutputWithContext(ctx context.Context) DataDiskImageEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskImageEncryptionOutput)
}

// DataDiskImageEncryptionArrayInput is an input type that accepts DataDiskImageEncryptionArray and DataDiskImageEncryptionArrayOutput values.
// You can construct a concrete instance of `DataDiskImageEncryptionArrayInput` via:
//
//	DataDiskImageEncryptionArray{ DataDiskImageEncryptionArgs{...} }
type DataDiskImageEncryptionArrayInput interface {
	pulumi.Input

	ToDataDiskImageEncryptionArrayOutput() DataDiskImageEncryptionArrayOutput
	ToDataDiskImageEncryptionArrayOutputWithContext(context.Context) DataDiskImageEncryptionArrayOutput
}

type DataDiskImageEncryptionArray []DataDiskImageEncryptionInput

func (DataDiskImageEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskImageEncryption)(nil)).Elem()
}

func (i DataDiskImageEncryptionArray) ToDataDiskImageEncryptionArrayOutput() DataDiskImageEncryptionArrayOutput {
	return i.ToDataDiskImageEncryptionArrayOutputWithContext(context.Background())
}

func (i DataDiskImageEncryptionArray) ToDataDiskImageEncryptionArrayOutputWithContext(ctx context.Context) DataDiskImageEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskImageEncryptionArrayOutput)
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionOutput struct{ *pulumi.OutputState }

func (DataDiskImageEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskImageEncryption)(nil)).Elem()
}

func (o DataDiskImageEncryptionOutput) ToDataDiskImageEncryptionOutput() DataDiskImageEncryptionOutput {
	return o
}

func (o DataDiskImageEncryptionOutput) ToDataDiskImageEncryptionOutputWithContext(ctx context.Context) DataDiskImageEncryptionOutput {
	return o
}

// A relative URI containing the resource ID of the disk encryption set.
func (o DataDiskImageEncryptionOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskImageEncryption) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
func (o DataDiskImageEncryptionOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskImageEncryption) int { return v.Lun }).(pulumi.IntOutput)
}

type DataDiskImageEncryptionArrayOutput struct{ *pulumi.OutputState }

func (DataDiskImageEncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskImageEncryption)(nil)).Elem()
}

func (o DataDiskImageEncryptionArrayOutput) ToDataDiskImageEncryptionArrayOutput() DataDiskImageEncryptionArrayOutput {
	return o
}

func (o DataDiskImageEncryptionArrayOutput) ToDataDiskImageEncryptionArrayOutputWithContext(ctx context.Context) DataDiskImageEncryptionArrayOutput {
	return o
}

func (o DataDiskImageEncryptionArrayOutput) Index(i pulumi.IntInput) DataDiskImageEncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskImageEncryption {
		return vs[0].([]DataDiskImageEncryption)[vs[1].(int)]
	}).(DataDiskImageEncryptionOutput)
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionResponse struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryptionResponseOutput struct{ *pulumi.OutputState }

func (DataDiskImageEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskImageEncryptionResponse)(nil)).Elem()
}

func (o DataDiskImageEncryptionResponseOutput) ToDataDiskImageEncryptionResponseOutput() DataDiskImageEncryptionResponseOutput {
	return o
}

func (o DataDiskImageEncryptionResponseOutput) ToDataDiskImageEncryptionResponseOutputWithContext(ctx context.Context) DataDiskImageEncryptionResponseOutput {
	return o
}

// A relative URI containing the resource ID of the disk encryption set.
func (o DataDiskImageEncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskImageEncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
func (o DataDiskImageEncryptionResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskImageEncryptionResponse) int { return v.Lun }).(pulumi.IntOutput)
}

type DataDiskImageEncryptionResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskImageEncryptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskImageEncryptionResponse)(nil)).Elem()
}

func (o DataDiskImageEncryptionResponseArrayOutput) ToDataDiskImageEncryptionResponseArrayOutput() DataDiskImageEncryptionResponseArrayOutput {
	return o
}

func (o DataDiskImageEncryptionResponseArrayOutput) ToDataDiskImageEncryptionResponseArrayOutputWithContext(ctx context.Context) DataDiskImageEncryptionResponseArrayOutput {
	return o
}

func (o DataDiskImageEncryptionResponseArrayOutput) Index(i pulumi.IntInput) DataDiskImageEncryptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskImageEncryptionResponse {
		return vs[0].([]DataDiskImageEncryptionResponse)[vs[1].(int)]
	}).(DataDiskImageEncryptionResponseOutput)
}

// Describes a data disk.
type DataDiskResponse struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine data disk. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether data disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is deleted. The default value is set to **Detach**.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. **This feature is still in preview**. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
	DetachOption *string `pulumi:"detachOption"`
	// Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
	DiskIOPSReadWrite float64 `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
	DiskMBpsReadWrite float64 `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDiskResponse `pulumi:"image"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// The source resource identifier. It can be a snapshot, or disk restore point from which to create a disk.
	SourceResource *ApiEntityReferenceResponse `pulumi:"sourceResource"`
	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `pulumi:"toBeDetached"`
	// The virtual hard disk.
	Vhd *VirtualHardDiskResponse `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a data disk.
type DataDiskResponseOutput struct{ *pulumi.OutputState }

func (DataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutput() DataDiskResponseOutput {
	return o
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutputWithContext(ctx context.Context) DataDiskResponseOutput {
	return o
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
func (o DataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine data disk. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described. **Empty:** This value is used when creating an empty data disk. **Copy:** This value is used to create a data disk from a snapshot or another disk. **Restore:** This value is used to create a data disk from a disk restore point.
func (o DataDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v DataDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether data disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is deleted. The default value is set to **Detach**.
func (o DataDiskResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. **This feature is still in preview**. To force-detach a data disk update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
func (o DataDiskResponseOutput) DetachOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.DetachOption }).(pulumi.StringPtrOutput)
}

// Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
func (o DataDiskResponseOutput) DiskIOPSReadWrite() pulumi.Float64Output {
	return o.ApplyT(func(v DataDiskResponse) float64 { return v.DiskIOPSReadWrite }).(pulumi.Float64Output)
}

// Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set.
func (o DataDiskResponseOutput) DiskMBpsReadWrite() pulumi.Float64Output {
	return o.ApplyT(func(v DataDiskResponse) float64 { return v.DiskMBpsReadWrite }).(pulumi.Float64Output)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o DataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o DataDiskResponseOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *VirtualHardDiskResponse { return v.Image }).(VirtualHardDiskResponsePtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o DataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v DataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// The managed disk parameters.
func (o DataDiskResponseOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *ManagedDiskParametersResponse { return v.ManagedDisk }).(ManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o DataDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The source resource identifier. It can be a snapshot, or disk restore point from which to create a disk.
func (o DataDiskResponseOutput) SourceResource() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *ApiEntityReferenceResponse { return v.SourceResource }).(ApiEntityReferenceResponsePtrOutput)
}

// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
func (o DataDiskResponseOutput) ToBeDetached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *bool { return v.ToBeDetached }).(pulumi.BoolPtrOutput)
}

// The virtual hard disk.
func (o DataDiskResponseOutput) Vhd() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *VirtualHardDiskResponse { return v.Vhd }).(VirtualHardDiskResponsePtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o DataDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type DataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutputWithContext(ctx context.Context) DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) Index(i pulumi.IntInput) DataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskResponse {
		return vs[0].([]DataDiskResponse)[vs[1].(int)]
	}).(DataDiskResponseOutput)
}

// Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVMResponse struct {
	// Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
	Count *float64 `pulumi:"count"`
	// VM size in terms of which the unutilized capacity is represented.
	VmSize *string `pulumi:"vmSize"`
}

// Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVMResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostAllocatableVMResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostAllocatableVMResponse)(nil)).Elem()
}

func (o DedicatedHostAllocatableVMResponseOutput) ToDedicatedHostAllocatableVMResponseOutput() DedicatedHostAllocatableVMResponseOutput {
	return o
}

func (o DedicatedHostAllocatableVMResponseOutput) ToDedicatedHostAllocatableVMResponseOutputWithContext(ctx context.Context) DedicatedHostAllocatableVMResponseOutput {
	return o
}

// Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
func (o DedicatedHostAllocatableVMResponseOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DedicatedHostAllocatableVMResponse) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

// VM size in terms of which the unutilized capacity is represented.
func (o DedicatedHostAllocatableVMResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DedicatedHostAllocatableVMResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type DedicatedHostAllocatableVMResponseArrayOutput struct{ *pulumi.OutputState }

func (DedicatedHostAllocatableVMResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DedicatedHostAllocatableVMResponse)(nil)).Elem()
}

func (o DedicatedHostAllocatableVMResponseArrayOutput) ToDedicatedHostAllocatableVMResponseArrayOutput() DedicatedHostAllocatableVMResponseArrayOutput {
	return o
}

func (o DedicatedHostAllocatableVMResponseArrayOutput) ToDedicatedHostAllocatableVMResponseArrayOutputWithContext(ctx context.Context) DedicatedHostAllocatableVMResponseArrayOutput {
	return o
}

func (o DedicatedHostAllocatableVMResponseArrayOutput) Index(i pulumi.IntInput) DedicatedHostAllocatableVMResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DedicatedHostAllocatableVMResponse {
		return vs[0].([]DedicatedHostAllocatableVMResponse)[vs[1].(int)]
	}).(DedicatedHostAllocatableVMResponseOutput)
}

// Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacityResponse struct {
	// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
	AllocatableVMs []DedicatedHostAllocatableVMResponse `pulumi:"allocatableVMs"`
}

// Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacityResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostAvailableCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostAvailableCapacityResponse)(nil)).Elem()
}

func (o DedicatedHostAvailableCapacityResponseOutput) ToDedicatedHostAvailableCapacityResponseOutput() DedicatedHostAvailableCapacityResponseOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponseOutput) ToDedicatedHostAvailableCapacityResponseOutputWithContext(ctx context.Context) DedicatedHostAvailableCapacityResponseOutput {
	return o
}

// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
func (o DedicatedHostAvailableCapacityResponseOutput) AllocatableVMs() DedicatedHostAllocatableVMResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostAvailableCapacityResponse) []DedicatedHostAllocatableVMResponse {
		return v.AllocatableVMs
	}).(DedicatedHostAllocatableVMResponseArrayOutput)
}

type DedicatedHostAvailableCapacityResponsePtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostAvailableCapacityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostAvailableCapacityResponse)(nil)).Elem()
}

func (o DedicatedHostAvailableCapacityResponsePtrOutput) ToDedicatedHostAvailableCapacityResponsePtrOutput() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponsePtrOutput) ToDedicatedHostAvailableCapacityResponsePtrOutputWithContext(ctx context.Context) DedicatedHostAvailableCapacityResponsePtrOutput {
	return o
}

func (o DedicatedHostAvailableCapacityResponsePtrOutput) Elem() DedicatedHostAvailableCapacityResponseOutput {
	return o.ApplyT(func(v *DedicatedHostAvailableCapacityResponse) DedicatedHostAvailableCapacityResponse {
		if v != nil {
			return *v
		}
		var ret DedicatedHostAvailableCapacityResponse
		return ret
	}).(DedicatedHostAvailableCapacityResponseOutput)
}

// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
func (o DedicatedHostAvailableCapacityResponsePtrOutput) AllocatableVMs() DedicatedHostAllocatableVMResponseArrayOutput {
	return o.ApplyT(func(v *DedicatedHostAvailableCapacityResponse) []DedicatedHostAllocatableVMResponse {
		if v == nil {
			return nil
		}
		return v.AllocatableVMs
	}).(DedicatedHostAllocatableVMResponseArrayOutput)
}

type DedicatedHostGroupInstanceViewResponse struct {
	// List of instance view of the dedicated hosts under the dedicated host group.
	Hosts []DedicatedHostInstanceViewWithNameResponse `pulumi:"hosts"`
}

type DedicatedHostGroupInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostGroupInstanceViewResponse)(nil)).Elem()
}

func (o DedicatedHostGroupInstanceViewResponseOutput) ToDedicatedHostGroupInstanceViewResponseOutput() DedicatedHostGroupInstanceViewResponseOutput {
	return o
}

func (o DedicatedHostGroupInstanceViewResponseOutput) ToDedicatedHostGroupInstanceViewResponseOutputWithContext(ctx context.Context) DedicatedHostGroupInstanceViewResponseOutput {
	return o
}

// List of instance view of the dedicated hosts under the dedicated host group.
func (o DedicatedHostGroupInstanceViewResponseOutput) Hosts() DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostGroupInstanceViewResponse) []DedicatedHostInstanceViewWithNameResponse {
		return v.Hosts
	}).(DedicatedHostInstanceViewWithNameResponseArrayOutput)
}

// Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01.
type DedicatedHostGroupPropertiesAdditionalCapabilities struct {
	// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
	UltraSSDEnabled *bool `pulumi:"ultraSSDEnabled"`
}

// DedicatedHostGroupPropertiesAdditionalCapabilitiesInput is an input type that accepts DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs and DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput values.
// You can construct a concrete instance of `DedicatedHostGroupPropertiesAdditionalCapabilitiesInput` via:
//
//	DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs{...}
type DedicatedHostGroupPropertiesAdditionalCapabilitiesInput interface {
	pulumi.Input

	ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput
	ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutputWithContext(context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput
}

// Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01.
type DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs struct {
	// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
	UltraSSDEnabled pulumi.BoolPtrInput `pulumi:"ultraSSDEnabled"`
}

func (DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostGroupPropertiesAdditionalCapabilities)(nil)).Elem()
}

func (i DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput {
	return i.ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutputWithContext(context.Background())
}

func (i DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput)
}

func (i DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return i.ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (i DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput).ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(ctx)
}

// DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrInput is an input type that accepts DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs, DedicatedHostGroupPropertiesAdditionalCapabilitiesPtr and DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput values.
// You can construct a concrete instance of `DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrInput` via:
//
//	        DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrInput interface {
	pulumi.Input

	ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput
	ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput
}

type dedicatedHostGroupPropertiesAdditionalCapabilitiesPtrType DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs

func DedicatedHostGroupPropertiesAdditionalCapabilitiesPtr(v *DedicatedHostGroupPropertiesAdditionalCapabilitiesArgs) DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrInput {
	return (*dedicatedHostGroupPropertiesAdditionalCapabilitiesPtrType)(v)
}

func (*dedicatedHostGroupPropertiesAdditionalCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostGroupPropertiesAdditionalCapabilities)(nil)).Elem()
}

func (i *dedicatedHostGroupPropertiesAdditionalCapabilitiesPtrType) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return i.ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *dedicatedHostGroupPropertiesAdditionalCapabilitiesPtrType) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput)
}

// Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01.
type DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostGroupPropertiesAdditionalCapabilities)(nil)).Elem()
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return o.ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(context.Background())
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DedicatedHostGroupPropertiesAdditionalCapabilities) *DedicatedHostGroupPropertiesAdditionalCapabilities {
		return &v
	}).(DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput)
}

// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DedicatedHostGroupPropertiesAdditionalCapabilities) *bool { return v.UltraSSDEnabled }).(pulumi.BoolPtrOutput)
}

type DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostGroupPropertiesAdditionalCapabilities)(nil)).Elem()
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput) Elem() DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput {
	return o.ApplyT(func(v *DedicatedHostGroupPropertiesAdditionalCapabilities) DedicatedHostGroupPropertiesAdditionalCapabilities {
		if v != nil {
			return *v
		}
		var ret DedicatedHostGroupPropertiesAdditionalCapabilities
		return ret
	}).(DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput)
}

// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DedicatedHostGroupPropertiesAdditionalCapabilities) *bool {
		if v == nil {
			return nil
		}
		return v.UltraSSDEnabled
	}).(pulumi.BoolPtrOutput)
}

// Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01.
type DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse struct {
	// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
	UltraSSDEnabled *bool `pulumi:"ultraSSDEnabled"`
}

// Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01.
type DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse)(nil)).Elem()
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput {
	return o
}

// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse) *bool { return v.UltraSSDEnabled }).(pulumi.BoolPtrOutput)
}

type DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse)(nil)).Elem()
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput() DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput) ToDedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutputWithContext(ctx context.Context) DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput {
	return o
}

func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput) Elem() DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput {
	return o.ApplyT(func(v *DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse) DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse {
		if v != nil {
			return *v
		}
		var ret DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse
		return ret
	}).(DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput)
}

// The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to 'false' when not provided. Please refer to https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups that are created as zonal. Minimum api-version: 2022-03-01.
func (o DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput) UltraSSDEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DedicatedHostGroupPropertiesAdditionalCapabilitiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UltraSSDEnabled
	}).(pulumi.BoolPtrOutput)
}

// The instance view of a dedicated host.
type DedicatedHostInstanceViewResponse struct {
	// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetId string `pulumi:"assetId"`
	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacityResponse `pulumi:"availableCapacity"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of a dedicated host.
type DedicatedHostInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostInstanceViewResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewResponseOutput) ToDedicatedHostInstanceViewResponseOutput() DedicatedHostInstanceViewResponseOutput {
	return o
}

func (o DedicatedHostInstanceViewResponseOutput) ToDedicatedHostInstanceViewResponseOutputWithContext(ctx context.Context) DedicatedHostInstanceViewResponseOutput {
	return o
}

// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
func (o DedicatedHostInstanceViewResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Unutilized capacity of the dedicated host.
func (o DedicatedHostInstanceViewResponseOutput) AvailableCapacity() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) *DedicatedHostAvailableCapacityResponse {
		return v.AvailableCapacity
	}).(DedicatedHostAvailableCapacityResponsePtrOutput)
}

// The resource status information.
func (o DedicatedHostInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group.
type DedicatedHostInstanceViewWithNameResponse struct {
	// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetId string `pulumi:"assetId"`
	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacityResponse `pulumi:"availableCapacity"`
	// The name of the dedicated host.
	Name string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group.
type DedicatedHostInstanceViewWithNameResponseOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewWithNameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DedicatedHostInstanceViewWithNameResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewWithNameResponseOutput) ToDedicatedHostInstanceViewWithNameResponseOutput() DedicatedHostInstanceViewWithNameResponseOutput {
	return o
}

func (o DedicatedHostInstanceViewWithNameResponseOutput) ToDedicatedHostInstanceViewWithNameResponseOutputWithContext(ctx context.Context) DedicatedHostInstanceViewWithNameResponseOutput {
	return o
}

// Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
func (o DedicatedHostInstanceViewWithNameResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Unutilized capacity of the dedicated host.
func (o DedicatedHostInstanceViewWithNameResponseOutput) AvailableCapacity() DedicatedHostAvailableCapacityResponsePtrOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) *DedicatedHostAvailableCapacityResponse {
		return v.AvailableCapacity
	}).(DedicatedHostAvailableCapacityResponsePtrOutput)
}

// The name of the dedicated host.
func (o DedicatedHostInstanceViewWithNameResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource status information.
func (o DedicatedHostInstanceViewWithNameResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v DedicatedHostInstanceViewWithNameResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

type DedicatedHostInstanceViewWithNameResponseArrayOutput struct{ *pulumi.OutputState }

func (DedicatedHostInstanceViewWithNameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DedicatedHostInstanceViewWithNameResponse)(nil)).Elem()
}

func (o DedicatedHostInstanceViewWithNameResponseArrayOutput) ToDedicatedHostInstanceViewWithNameResponseArrayOutput() DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o DedicatedHostInstanceViewWithNameResponseArrayOutput) ToDedicatedHostInstanceViewWithNameResponseArrayOutputWithContext(ctx context.Context) DedicatedHostInstanceViewWithNameResponseArrayOutput {
	return o
}

func (o DedicatedHostInstanceViewWithNameResponseArrayOutput) Index(i pulumi.IntInput) DedicatedHostInstanceViewWithNameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DedicatedHostInstanceViewWithNameResponse {
		return vs[0].([]DedicatedHostInstanceViewWithNameResponse)[vs[1].(int)]
	}).(DedicatedHostInstanceViewWithNameResponseOutput)
}

// Indicates the target Virtual Machine ScaleSet properties upon triggering a seamless migration without downtime of the VMs via the ConvertToVirtualMachineScaleSet API.
type DefaultVirtualMachineScaleSetInfoResponse struct {
	// Indicates if the the maximum capacity of the default migrated Virtual Machine Scale Set after its migration will be constrained to a limited number of VMs.
	ConstrainedMaximumCapacity bool `pulumi:"constrainedMaximumCapacity"`
	// The default Virtual Machine ScaleSet Uri that the Availability Set will be moved to upon triggering a seamless migration via the ConvertToVirtualMachineScaleSet API.
	DefaultVirtualMachineScaleSet SubResourceResponse `pulumi:"defaultVirtualMachineScaleSet"`
}

// Indicates the target Virtual Machine ScaleSet properties upon triggering a seamless migration without downtime of the VMs via the ConvertToVirtualMachineScaleSet API.
type DefaultVirtualMachineScaleSetInfoResponseOutput struct{ *pulumi.OutputState }

func (DefaultVirtualMachineScaleSetInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultVirtualMachineScaleSetInfoResponse)(nil)).Elem()
}

func (o DefaultVirtualMachineScaleSetInfoResponseOutput) ToDefaultVirtualMachineScaleSetInfoResponseOutput() DefaultVirtualMachineScaleSetInfoResponseOutput {
	return o
}

func (o DefaultVirtualMachineScaleSetInfoResponseOutput) ToDefaultVirtualMachineScaleSetInfoResponseOutputWithContext(ctx context.Context) DefaultVirtualMachineScaleSetInfoResponseOutput {
	return o
}

// Indicates if the the maximum capacity of the default migrated Virtual Machine Scale Set after its migration will be constrained to a limited number of VMs.
func (o DefaultVirtualMachineScaleSetInfoResponseOutput) ConstrainedMaximumCapacity() pulumi.BoolOutput {
	return o.ApplyT(func(v DefaultVirtualMachineScaleSetInfoResponse) bool { return v.ConstrainedMaximumCapacity }).(pulumi.BoolOutput)
}

// The default Virtual Machine ScaleSet Uri that the Availability Set will be moved to upon triggering a seamless migration via the ConvertToVirtualMachineScaleSet API.
func (o DefaultVirtualMachineScaleSetInfoResponseOutput) DefaultVirtualMachineScaleSet() SubResourceResponseOutput {
	return o.ApplyT(func(v DefaultVirtualMachineScaleSetInfoResponse) SubResourceResponse {
		return v.DefaultVirtualMachineScaleSet
	}).(SubResourceResponseOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
type DiagnosticsProfile struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnostics `pulumi:"bootDiagnostics"`
}

// DiagnosticsProfileInput is an input type that accepts DiagnosticsProfileArgs and DiagnosticsProfileOutput values.
// You can construct a concrete instance of `DiagnosticsProfileInput` via:
//
//	DiagnosticsProfileArgs{...}
type DiagnosticsProfileInput interface {
	pulumi.Input

	ToDiagnosticsProfileOutput() DiagnosticsProfileOutput
	ToDiagnosticsProfileOutputWithContext(context.Context) DiagnosticsProfileOutput
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
type DiagnosticsProfileArgs struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics BootDiagnosticsPtrInput `pulumi:"bootDiagnostics"`
}

func (DiagnosticsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsProfile)(nil)).Elem()
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfileOutput() DiagnosticsProfileOutput {
	return i.ToDiagnosticsProfileOutputWithContext(context.Background())
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfileOutputWithContext(ctx context.Context) DiagnosticsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsProfileOutput)
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput {
	return i.ToDiagnosticsProfilePtrOutputWithContext(context.Background())
}

func (i DiagnosticsProfileArgs) ToDiagnosticsProfilePtrOutputWithContext(ctx context.Context) DiagnosticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsProfileOutput).ToDiagnosticsProfilePtrOutputWithContext(ctx)
}

// DiagnosticsProfilePtrInput is an input type that accepts DiagnosticsProfileArgs, DiagnosticsProfilePtr and DiagnosticsProfilePtrOutput values.
// You can construct a concrete instance of `DiagnosticsProfilePtrInput` via:
//
//	        DiagnosticsProfileArgs{...}
//
//	or:
//
//	        nil
type DiagnosticsProfilePtrInput interface {
	pulumi.Input

	ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput
	ToDiagnosticsProfilePtrOutputWithContext(context.Context) DiagnosticsProfilePtrOutput
}

type diagnosticsProfilePtrType DiagnosticsProfileArgs

func DiagnosticsProfilePtr(v *DiagnosticsProfileArgs) DiagnosticsProfilePtrInput {
	return (*diagnosticsProfilePtrType)(v)
}

func (*diagnosticsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsProfile)(nil)).Elem()
}

func (i *diagnosticsProfilePtrType) ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput {
	return i.ToDiagnosticsProfilePtrOutputWithContext(context.Background())
}

func (i *diagnosticsProfilePtrType) ToDiagnosticsProfilePtrOutputWithContext(ctx context.Context) DiagnosticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticsProfilePtrOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
type DiagnosticsProfileOutput struct{ *pulumi.OutputState }

func (DiagnosticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsProfile)(nil)).Elem()
}

func (o DiagnosticsProfileOutput) ToDiagnosticsProfileOutput() DiagnosticsProfileOutput {
	return o
}

func (o DiagnosticsProfileOutput) ToDiagnosticsProfileOutputWithContext(ctx context.Context) DiagnosticsProfileOutput {
	return o
}

func (o DiagnosticsProfileOutput) ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput {
	return o.ToDiagnosticsProfilePtrOutputWithContext(context.Background())
}

func (o DiagnosticsProfileOutput) ToDiagnosticsProfilePtrOutputWithContext(ctx context.Context) DiagnosticsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticsProfile) *DiagnosticsProfile {
		return &v
	}).(DiagnosticsProfilePtrOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o DiagnosticsProfileOutput) BootDiagnostics() BootDiagnosticsPtrOutput {
	return o.ApplyT(func(v DiagnosticsProfile) *BootDiagnostics { return v.BootDiagnostics }).(BootDiagnosticsPtrOutput)
}

type DiagnosticsProfilePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsProfile)(nil)).Elem()
}

func (o DiagnosticsProfilePtrOutput) ToDiagnosticsProfilePtrOutput() DiagnosticsProfilePtrOutput {
	return o
}

func (o DiagnosticsProfilePtrOutput) ToDiagnosticsProfilePtrOutputWithContext(ctx context.Context) DiagnosticsProfilePtrOutput {
	return o
}

func (o DiagnosticsProfilePtrOutput) Elem() DiagnosticsProfileOutput {
	return o.ApplyT(func(v *DiagnosticsProfile) DiagnosticsProfile {
		if v != nil {
			return *v
		}
		var ret DiagnosticsProfile
		return ret
	}).(DiagnosticsProfileOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o DiagnosticsProfilePtrOutput) BootDiagnostics() BootDiagnosticsPtrOutput {
	return o.ApplyT(func(v *DiagnosticsProfile) *BootDiagnostics {
		if v == nil {
			return nil
		}
		return v.BootDiagnostics
	}).(BootDiagnosticsPtrOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
type DiagnosticsProfileResponse struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsResponse `pulumi:"bootDiagnostics"`
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
type DiagnosticsProfileResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsProfileResponse)(nil)).Elem()
}

func (o DiagnosticsProfileResponseOutput) ToDiagnosticsProfileResponseOutput() DiagnosticsProfileResponseOutput {
	return o
}

func (o DiagnosticsProfileResponseOutput) ToDiagnosticsProfileResponseOutputWithContext(ctx context.Context) DiagnosticsProfileResponseOutput {
	return o
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o DiagnosticsProfileResponseOutput) BootDiagnostics() BootDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v DiagnosticsProfileResponse) *BootDiagnosticsResponse { return v.BootDiagnostics }).(BootDiagnosticsResponsePtrOutput)
}

type DiagnosticsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsProfileResponse)(nil)).Elem()
}

func (o DiagnosticsProfileResponsePtrOutput) ToDiagnosticsProfileResponsePtrOutput() DiagnosticsProfileResponsePtrOutput {
	return o
}

func (o DiagnosticsProfileResponsePtrOutput) ToDiagnosticsProfileResponsePtrOutputWithContext(ctx context.Context) DiagnosticsProfileResponsePtrOutput {
	return o
}

func (o DiagnosticsProfileResponsePtrOutput) Elem() DiagnosticsProfileResponseOutput {
	return o.ApplyT(func(v *DiagnosticsProfileResponse) DiagnosticsProfileResponse {
		if v != nil {
			return *v
		}
		var ret DiagnosticsProfileResponse
		return ret
	}).(DiagnosticsProfileResponseOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. **NOTE**: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the VM. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o DiagnosticsProfileResponsePtrOutput) BootDiagnostics() BootDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *DiagnosticsProfileResponse) *BootDiagnosticsResponse {
		if v == nil {
			return nil
		}
		return v.BootDiagnostics
	}).(BootDiagnosticsResponsePtrOutput)
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. **Note:** The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettings struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option *string `pulumi:"option"`
	// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
	Placement *string `pulumi:"placement"`
}

// DiffDiskSettingsInput is an input type that accepts DiffDiskSettingsArgs and DiffDiskSettingsOutput values.
// You can construct a concrete instance of `DiffDiskSettingsInput` via:
//
//	DiffDiskSettingsArgs{...}
type DiffDiskSettingsInput interface {
	pulumi.Input

	ToDiffDiskSettingsOutput() DiffDiskSettingsOutput
	ToDiffDiskSettingsOutputWithContext(context.Context) DiffDiskSettingsOutput
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. **Note:** The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsArgs struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option pulumi.StringPtrInput `pulumi:"option"`
	// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
}

func (DiffDiskSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiffDiskSettings)(nil)).Elem()
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsOutput() DiffDiskSettingsOutput {
	return i.ToDiffDiskSettingsOutputWithContext(context.Background())
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsOutputWithContext(ctx context.Context) DiffDiskSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiffDiskSettingsOutput)
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput {
	return i.ToDiffDiskSettingsPtrOutputWithContext(context.Background())
}

func (i DiffDiskSettingsArgs) ToDiffDiskSettingsPtrOutputWithContext(ctx context.Context) DiffDiskSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiffDiskSettingsOutput).ToDiffDiskSettingsPtrOutputWithContext(ctx)
}

// DiffDiskSettingsPtrInput is an input type that accepts DiffDiskSettingsArgs, DiffDiskSettingsPtr and DiffDiskSettingsPtrOutput values.
// You can construct a concrete instance of `DiffDiskSettingsPtrInput` via:
//
//	        DiffDiskSettingsArgs{...}
//
//	or:
//
//	        nil
type DiffDiskSettingsPtrInput interface {
	pulumi.Input

	ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput
	ToDiffDiskSettingsPtrOutputWithContext(context.Context) DiffDiskSettingsPtrOutput
}

type diffDiskSettingsPtrType DiffDiskSettingsArgs

func DiffDiskSettingsPtr(v *DiffDiskSettingsArgs) DiffDiskSettingsPtrInput {
	return (*diffDiskSettingsPtrType)(v)
}

func (*diffDiskSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiffDiskSettings)(nil)).Elem()
}

func (i *diffDiskSettingsPtrType) ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput {
	return i.ToDiffDiskSettingsPtrOutputWithContext(context.Background())
}

func (i *diffDiskSettingsPtrType) ToDiffDiskSettingsPtrOutputWithContext(ctx context.Context) DiffDiskSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiffDiskSettingsPtrOutput)
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. **Note:** The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsOutput struct{ *pulumi.OutputState }

func (DiffDiskSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiffDiskSettings)(nil)).Elem()
}

func (o DiffDiskSettingsOutput) ToDiffDiskSettingsOutput() DiffDiskSettingsOutput {
	return o
}

func (o DiffDiskSettingsOutput) ToDiffDiskSettingsOutputWithContext(ctx context.Context) DiffDiskSettingsOutput {
	return o
}

func (o DiffDiskSettingsOutput) ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput {
	return o.ToDiffDiskSettingsPtrOutputWithContext(context.Background())
}

func (o DiffDiskSettingsOutput) ToDiffDiskSettingsPtrOutputWithContext(ctx context.Context) DiffDiskSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiffDiskSettings) *DiffDiskSettings {
		return &v
	}).(DiffDiskSettingsPtrOutput)
}

// Specifies the ephemeral disk settings for operating system disk.
func (o DiffDiskSettingsOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiffDiskSettings) *string { return v.Option }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
func (o DiffDiskSettingsOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiffDiskSettings) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

type DiffDiskSettingsPtrOutput struct{ *pulumi.OutputState }

func (DiffDiskSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiffDiskSettings)(nil)).Elem()
}

func (o DiffDiskSettingsPtrOutput) ToDiffDiskSettingsPtrOutput() DiffDiskSettingsPtrOutput {
	return o
}

func (o DiffDiskSettingsPtrOutput) ToDiffDiskSettingsPtrOutputWithContext(ctx context.Context) DiffDiskSettingsPtrOutput {
	return o
}

func (o DiffDiskSettingsPtrOutput) Elem() DiffDiskSettingsOutput {
	return o.ApplyT(func(v *DiffDiskSettings) DiffDiskSettings {
		if v != nil {
			return *v
		}
		var ret DiffDiskSettings
		return ret
	}).(DiffDiskSettingsOutput)
}

// Specifies the ephemeral disk settings for operating system disk.
func (o DiffDiskSettingsPtrOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiffDiskSettings) *string {
		if v == nil {
			return nil
		}
		return v.Option
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
func (o DiffDiskSettingsPtrOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiffDiskSettings) *string {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(pulumi.StringPtrOutput)
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. **Note:** The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsResponse struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option *string `pulumi:"option"`
	// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
	Placement *string `pulumi:"placement"`
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk. **Note:** The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettingsResponseOutput struct{ *pulumi.OutputState }

func (DiffDiskSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiffDiskSettingsResponse)(nil)).Elem()
}

func (o DiffDiskSettingsResponseOutput) ToDiffDiskSettingsResponseOutput() DiffDiskSettingsResponseOutput {
	return o
}

func (o DiffDiskSettingsResponseOutput) ToDiffDiskSettingsResponseOutputWithContext(ctx context.Context) DiffDiskSettingsResponseOutput {
	return o
}

// Specifies the ephemeral disk settings for operating system disk.
func (o DiffDiskSettingsResponseOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiffDiskSettingsResponse) *string { return v.Option }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
func (o DiffDiskSettingsResponseOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiffDiskSettingsResponse) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

type DiffDiskSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiffDiskSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiffDiskSettingsResponse)(nil)).Elem()
}

func (o DiffDiskSettingsResponsePtrOutput) ToDiffDiskSettingsResponsePtrOutput() DiffDiskSettingsResponsePtrOutput {
	return o
}

func (o DiffDiskSettingsResponsePtrOutput) ToDiffDiskSettingsResponsePtrOutputWithContext(ctx context.Context) DiffDiskSettingsResponsePtrOutput {
	return o
}

func (o DiffDiskSettingsResponsePtrOutput) Elem() DiffDiskSettingsResponseOutput {
	return o.ApplyT(func(v *DiffDiskSettingsResponse) DiffDiskSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DiffDiskSettingsResponse
		return ret
	}).(DiffDiskSettingsResponseOutput)
}

// Specifies the ephemeral disk settings for operating system disk.
func (o DiffDiskSettingsResponsePtrOutput) Option() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiffDiskSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Option
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk placement for operating system disk. Possible values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. Minimum api-version for NvmeDisk: 2024-03-01.
func (o DiffDiskSettingsResponsePtrOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiffDiskSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Placement
	}).(pulumi.StringPtrOutput)
}

// Describes the disallowed disk types.
type Disallowed struct {
	// A list of disk types.
	DiskTypes []string `pulumi:"diskTypes"`
}

// DisallowedInput is an input type that accepts DisallowedArgs and DisallowedOutput values.
// You can construct a concrete instance of `DisallowedInput` via:
//
//	DisallowedArgs{...}
type DisallowedInput interface {
	pulumi.Input

	ToDisallowedOutput() DisallowedOutput
	ToDisallowedOutputWithContext(context.Context) DisallowedOutput
}

// Describes the disallowed disk types.
type DisallowedArgs struct {
	// A list of disk types.
	DiskTypes pulumi.StringArrayInput `pulumi:"diskTypes"`
}

func (DisallowedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disallowed)(nil)).Elem()
}

func (i DisallowedArgs) ToDisallowedOutput() DisallowedOutput {
	return i.ToDisallowedOutputWithContext(context.Background())
}

func (i DisallowedArgs) ToDisallowedOutputWithContext(ctx context.Context) DisallowedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisallowedOutput)
}

func (i DisallowedArgs) ToDisallowedPtrOutput() DisallowedPtrOutput {
	return i.ToDisallowedPtrOutputWithContext(context.Background())
}

func (i DisallowedArgs) ToDisallowedPtrOutputWithContext(ctx context.Context) DisallowedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisallowedOutput).ToDisallowedPtrOutputWithContext(ctx)
}

// DisallowedPtrInput is an input type that accepts DisallowedArgs, DisallowedPtr and DisallowedPtrOutput values.
// You can construct a concrete instance of `DisallowedPtrInput` via:
//
//	        DisallowedArgs{...}
//
//	or:
//
//	        nil
type DisallowedPtrInput interface {
	pulumi.Input

	ToDisallowedPtrOutput() DisallowedPtrOutput
	ToDisallowedPtrOutputWithContext(context.Context) DisallowedPtrOutput
}

type disallowedPtrType DisallowedArgs

func DisallowedPtr(v *DisallowedArgs) DisallowedPtrInput {
	return (*disallowedPtrType)(v)
}

func (*disallowedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Disallowed)(nil)).Elem()
}

func (i *disallowedPtrType) ToDisallowedPtrOutput() DisallowedPtrOutput {
	return i.ToDisallowedPtrOutputWithContext(context.Background())
}

func (i *disallowedPtrType) ToDisallowedPtrOutputWithContext(ctx context.Context) DisallowedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisallowedPtrOutput)
}

// Describes the disallowed disk types.
type DisallowedOutput struct{ *pulumi.OutputState }

func (DisallowedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disallowed)(nil)).Elem()
}

func (o DisallowedOutput) ToDisallowedOutput() DisallowedOutput {
	return o
}

func (o DisallowedOutput) ToDisallowedOutputWithContext(ctx context.Context) DisallowedOutput {
	return o
}

func (o DisallowedOutput) ToDisallowedPtrOutput() DisallowedPtrOutput {
	return o.ToDisallowedPtrOutputWithContext(context.Background())
}

func (o DisallowedOutput) ToDisallowedPtrOutputWithContext(ctx context.Context) DisallowedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Disallowed) *Disallowed {
		return &v
	}).(DisallowedPtrOutput)
}

// A list of disk types.
func (o DisallowedOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Disallowed) []string { return v.DiskTypes }).(pulumi.StringArrayOutput)
}

type DisallowedPtrOutput struct{ *pulumi.OutputState }

func (DisallowedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Disallowed)(nil)).Elem()
}

func (o DisallowedPtrOutput) ToDisallowedPtrOutput() DisallowedPtrOutput {
	return o
}

func (o DisallowedPtrOutput) ToDisallowedPtrOutputWithContext(ctx context.Context) DisallowedPtrOutput {
	return o
}

func (o DisallowedPtrOutput) Elem() DisallowedOutput {
	return o.ApplyT(func(v *Disallowed) Disallowed {
		if v != nil {
			return *v
		}
		var ret Disallowed
		return ret
	}).(DisallowedOutput)
}

// A list of disk types.
func (o DisallowedPtrOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Disallowed) []string {
		if v == nil {
			return nil
		}
		return v.DiskTypes
	}).(pulumi.StringArrayOutput)
}

// Describes the disallowed disk types.
type DisallowedResponse struct {
	// A list of disk types.
	DiskTypes []string `pulumi:"diskTypes"`
}

// Describes the disallowed disk types.
type DisallowedResponseOutput struct{ *pulumi.OutputState }

func (DisallowedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisallowedResponse)(nil)).Elem()
}

func (o DisallowedResponseOutput) ToDisallowedResponseOutput() DisallowedResponseOutput {
	return o
}

func (o DisallowedResponseOutput) ToDisallowedResponseOutputWithContext(ctx context.Context) DisallowedResponseOutput {
	return o
}

// A list of disk types.
func (o DisallowedResponseOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DisallowedResponse) []string { return v.DiskTypes }).(pulumi.StringArrayOutput)
}

type DisallowedResponsePtrOutput struct{ *pulumi.OutputState }

func (DisallowedResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisallowedResponse)(nil)).Elem()
}

func (o DisallowedResponsePtrOutput) ToDisallowedResponsePtrOutput() DisallowedResponsePtrOutput {
	return o
}

func (o DisallowedResponsePtrOutput) ToDisallowedResponsePtrOutputWithContext(ctx context.Context) DisallowedResponsePtrOutput {
	return o
}

func (o DisallowedResponsePtrOutput) Elem() DisallowedResponseOutput {
	return o.ApplyT(func(v *DisallowedResponse) DisallowedResponse {
		if v != nil {
			return *v
		}
		var ret DisallowedResponse
		return ret
	}).(DisallowedResponseOutput)
}

// A list of disk types.
func (o DisallowedResponsePtrOutput) DiskTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DisallowedResponse) []string {
		if v == nil {
			return nil
		}
		return v.DiskTypes
	}).(pulumi.StringArrayOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParameters struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// DiskEncryptionSetParametersInput is an input type that accepts DiskEncryptionSetParametersArgs and DiskEncryptionSetParametersOutput values.
// You can construct a concrete instance of `DiskEncryptionSetParametersInput` via:
//
//	DiskEncryptionSetParametersArgs{...}
type DiskEncryptionSetParametersInput interface {
	pulumi.Input

	ToDiskEncryptionSetParametersOutput() DiskEncryptionSetParametersOutput
	ToDiskEncryptionSetParametersOutputWithContext(context.Context) DiskEncryptionSetParametersOutput
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (DiskEncryptionSetParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetParameters)(nil)).Elem()
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersOutput() DiskEncryptionSetParametersOutput {
	return i.ToDiskEncryptionSetParametersOutputWithContext(context.Background())
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersOutputWithContext(ctx context.Context) DiskEncryptionSetParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetParametersOutput)
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput {
	return i.ToDiskEncryptionSetParametersPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionSetParametersArgs) ToDiskEncryptionSetParametersPtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetParametersOutput).ToDiskEncryptionSetParametersPtrOutputWithContext(ctx)
}

// DiskEncryptionSetParametersPtrInput is an input type that accepts DiskEncryptionSetParametersArgs, DiskEncryptionSetParametersPtr and DiskEncryptionSetParametersPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionSetParametersPtrInput` via:
//
//	        DiskEncryptionSetParametersArgs{...}
//
//	or:
//
//	        nil
type DiskEncryptionSetParametersPtrInput interface {
	pulumi.Input

	ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput
	ToDiskEncryptionSetParametersPtrOutputWithContext(context.Context) DiskEncryptionSetParametersPtrOutput
}

type diskEncryptionSetParametersPtrType DiskEncryptionSetParametersArgs

func DiskEncryptionSetParametersPtr(v *DiskEncryptionSetParametersArgs) DiskEncryptionSetParametersPtrInput {
	return (*diskEncryptionSetParametersPtrType)(v)
}

func (*diskEncryptionSetParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSetParameters)(nil)).Elem()
}

func (i *diskEncryptionSetParametersPtrType) ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput {
	return i.ToDiskEncryptionSetParametersPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionSetParametersPtrType) ToDiskEncryptionSetParametersPtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSetParametersPtrOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetParameters)(nil)).Elem()
}

func (o DiskEncryptionSetParametersOutput) ToDiskEncryptionSetParametersOutput() DiskEncryptionSetParametersOutput {
	return o
}

func (o DiskEncryptionSetParametersOutput) ToDiskEncryptionSetParametersOutputWithContext(ctx context.Context) DiskEncryptionSetParametersOutput {
	return o
}

func (o DiskEncryptionSetParametersOutput) ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput {
	return o.ToDiskEncryptionSetParametersPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionSetParametersOutput) ToDiskEncryptionSetParametersPtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskEncryptionSetParameters) *DiskEncryptionSetParameters {
		return &v
	}).(DiskEncryptionSetParametersPtrOutput)
}

// Resource Id
func (o DiskEncryptionSetParametersOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionSetParameters) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type DiskEncryptionSetParametersPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSetParameters)(nil)).Elem()
}

func (o DiskEncryptionSetParametersPtrOutput) ToDiskEncryptionSetParametersPtrOutput() DiskEncryptionSetParametersPtrOutput {
	return o
}

func (o DiskEncryptionSetParametersPtrOutput) ToDiskEncryptionSetParametersPtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersPtrOutput {
	return o
}

func (o DiskEncryptionSetParametersPtrOutput) Elem() DiskEncryptionSetParametersOutput {
	return o.ApplyT(func(v *DiskEncryptionSetParameters) DiskEncryptionSetParameters {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionSetParameters
		return ret
	}).(DiskEncryptionSetParametersOutput)
}

// Resource Id
func (o DiskEncryptionSetParametersPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSetParameters) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParametersResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSetParametersResponse)(nil)).Elem()
}

func (o DiskEncryptionSetParametersResponseOutput) ToDiskEncryptionSetParametersResponseOutput() DiskEncryptionSetParametersResponseOutput {
	return o
}

func (o DiskEncryptionSetParametersResponseOutput) ToDiskEncryptionSetParametersResponseOutputWithContext(ctx context.Context) DiskEncryptionSetParametersResponseOutput {
	return o
}

// Resource Id
func (o DiskEncryptionSetParametersResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionSetParametersResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type DiskEncryptionSetParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSetParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSetParametersResponse)(nil)).Elem()
}

func (o DiskEncryptionSetParametersResponsePtrOutput) ToDiskEncryptionSetParametersResponsePtrOutput() DiskEncryptionSetParametersResponsePtrOutput {
	return o
}

func (o DiskEncryptionSetParametersResponsePtrOutput) ToDiskEncryptionSetParametersResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionSetParametersResponsePtrOutput {
	return o
}

func (o DiskEncryptionSetParametersResponsePtrOutput) Elem() DiskEncryptionSetParametersResponseOutput {
	return o.ApplyT(func(v *DiskEncryptionSetParametersResponse) DiskEncryptionSetParametersResponse {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionSetParametersResponse
		return ret
	}).(DiskEncryptionSetParametersResponseOutput)
}

// Resource Id
func (o DiskEncryptionSetParametersResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSetParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettings struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference `pulumi:"diskEncryptionKey"`
	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference `pulumi:"keyEncryptionKey"`
}

// DiskEncryptionSettingsInput is an input type that accepts DiskEncryptionSettingsArgs and DiskEncryptionSettingsOutput values.
// You can construct a concrete instance of `DiskEncryptionSettingsInput` via:
//
//	DiskEncryptionSettingsArgs{...}
type DiskEncryptionSettingsInput interface {
	pulumi.Input

	ToDiskEncryptionSettingsOutput() DiskEncryptionSettingsOutput
	ToDiskEncryptionSettingsOutputWithContext(context.Context) DiskEncryptionSettingsOutput
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsArgs struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey KeyVaultSecretReferencePtrInput `pulumi:"diskEncryptionKey"`
	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey KeyVaultKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (DiskEncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSettings)(nil)).Elem()
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsOutput() DiskEncryptionSettingsOutput {
	return i.ToDiskEncryptionSettingsOutputWithContext(context.Background())
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsOutputWithContext(ctx context.Context) DiskEncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSettingsOutput)
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput {
	return i.ToDiskEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionSettingsArgs) ToDiskEncryptionSettingsPtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSettingsOutput).ToDiskEncryptionSettingsPtrOutputWithContext(ctx)
}

// DiskEncryptionSettingsPtrInput is an input type that accepts DiskEncryptionSettingsArgs, DiskEncryptionSettingsPtr and DiskEncryptionSettingsPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionSettingsPtrInput` via:
//
//	        DiskEncryptionSettingsArgs{...}
//
//	or:
//
//	        nil
type DiskEncryptionSettingsPtrInput interface {
	pulumi.Input

	ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput
	ToDiskEncryptionSettingsPtrOutputWithContext(context.Context) DiskEncryptionSettingsPtrOutput
}

type diskEncryptionSettingsPtrType DiskEncryptionSettingsArgs

func DiskEncryptionSettingsPtr(v *DiskEncryptionSettingsArgs) DiskEncryptionSettingsPtrInput {
	return (*diskEncryptionSettingsPtrType)(v)
}

func (*diskEncryptionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSettings)(nil)).Elem()
}

func (i *diskEncryptionSettingsPtrType) ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput {
	return i.ToDiskEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionSettingsPtrType) ToDiskEncryptionSettingsPtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionSettingsPtrOutput)
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSettings)(nil)).Elem()
}

func (o DiskEncryptionSettingsOutput) ToDiskEncryptionSettingsOutput() DiskEncryptionSettingsOutput {
	return o
}

func (o DiskEncryptionSettingsOutput) ToDiskEncryptionSettingsOutputWithContext(ctx context.Context) DiskEncryptionSettingsOutput {
	return o
}

func (o DiskEncryptionSettingsOutput) ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput {
	return o.ToDiskEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionSettingsOutput) ToDiskEncryptionSettingsPtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskEncryptionSettings) *DiskEncryptionSettings {
		return &v
	}).(DiskEncryptionSettingsPtrOutput)
}

// Specifies the location of the disk encryption key, which is a Key Vault Secret.
func (o DiskEncryptionSettingsOutput) DiskEncryptionKey() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettings) *KeyVaultSecretReference { return v.DiskEncryptionKey }).(KeyVaultSecretReferencePtrOutput)
}

// Specifies whether disk encryption should be enabled on the virtual machine.
func (o DiskEncryptionSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o DiskEncryptionSettingsOutput) KeyEncryptionKey() KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettings) *KeyVaultKeyReference { return v.KeyEncryptionKey }).(KeyVaultKeyReferencePtrOutput)
}

type DiskEncryptionSettingsPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSettings)(nil)).Elem()
}

func (o DiskEncryptionSettingsPtrOutput) ToDiskEncryptionSettingsPtrOutput() DiskEncryptionSettingsPtrOutput {
	return o
}

func (o DiskEncryptionSettingsPtrOutput) ToDiskEncryptionSettingsPtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsPtrOutput {
	return o
}

func (o DiskEncryptionSettingsPtrOutput) Elem() DiskEncryptionSettingsOutput {
	return o.ApplyT(func(v *DiskEncryptionSettings) DiskEncryptionSettings {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionSettings
		return ret
	}).(DiskEncryptionSettingsOutput)
}

// Specifies the location of the disk encryption key, which is a Key Vault Secret.
func (o DiskEncryptionSettingsPtrOutput) DiskEncryptionKey() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettings) *KeyVaultSecretReference {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKey
	}).(KeyVaultSecretReferencePtrOutput)
}

// Specifies whether disk encryption should be enabled on the virtual machine.
func (o DiskEncryptionSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o DiskEncryptionSettingsPtrOutput) KeyEncryptionKey() KeyVaultKeyReferencePtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettings) *KeyVaultKeyReference {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferencePtrOutput)
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsResponse struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReferenceResponse `pulumi:"diskEncryptionKey"`
	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettingsResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionSettingsResponse)(nil)).Elem()
}

func (o DiskEncryptionSettingsResponseOutput) ToDiskEncryptionSettingsResponseOutput() DiskEncryptionSettingsResponseOutput {
	return o
}

func (o DiskEncryptionSettingsResponseOutput) ToDiskEncryptionSettingsResponseOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponseOutput {
	return o
}

// Specifies the location of the disk encryption key, which is a Key Vault Secret.
func (o DiskEncryptionSettingsResponseOutput) DiskEncryptionKey() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *KeyVaultSecretReferenceResponse { return v.DiskEncryptionKey }).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Specifies whether disk encryption should be enabled on the virtual machine.
func (o DiskEncryptionSettingsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o DiskEncryptionSettingsResponseOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v DiskEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultKeyReferenceResponsePtrOutput)
}

type DiskEncryptionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionSettingsResponse)(nil)).Elem()
}

func (o DiskEncryptionSettingsResponsePtrOutput) ToDiskEncryptionSettingsResponsePtrOutput() DiskEncryptionSettingsResponsePtrOutput {
	return o
}

func (o DiskEncryptionSettingsResponsePtrOutput) ToDiskEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponsePtrOutput {
	return o
}

func (o DiskEncryptionSettingsResponsePtrOutput) Elem() DiskEncryptionSettingsResponseOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) DiskEncryptionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionSettingsResponse
		return ret
	}).(DiskEncryptionSettingsResponseOutput)
}

// Specifies the location of the disk encryption key, which is a Key Vault Secret.
func (o DiskEncryptionSettingsResponsePtrOutput) DiskEncryptionKey() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) *KeyVaultSecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionKey
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Specifies whether disk encryption should be enabled on the virtual machine.
func (o DiskEncryptionSettingsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the location of the key encryption key in Key Vault.
func (o DiskEncryptionSettingsResponsePtrOutput) KeyEncryptionKey() KeyVaultKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DiskEncryptionSettingsResponse) *KeyVaultKeyReferenceResponse {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKey
	}).(KeyVaultKeyReferenceResponsePtrOutput)
}

type DiskEncryptionSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskEncryptionSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskEncryptionSettingsResponse)(nil)).Elem()
}

func (o DiskEncryptionSettingsResponseArrayOutput) ToDiskEncryptionSettingsResponseArrayOutput() DiskEncryptionSettingsResponseArrayOutput {
	return o
}

func (o DiskEncryptionSettingsResponseArrayOutput) ToDiskEncryptionSettingsResponseArrayOutputWithContext(ctx context.Context) DiskEncryptionSettingsResponseArrayOutput {
	return o
}

func (o DiskEncryptionSettingsResponseArrayOutput) Index(i pulumi.IntInput) DiskEncryptionSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskEncryptionSettingsResponse {
		return vs[0].([]DiskEncryptionSettingsResponse)[vs[1].(int)]
	}).(DiskEncryptionSettingsResponseOutput)
}

// The instance view of the disk.
type DiskInstanceViewResponse struct {
	// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
	EncryptionSettings []DiskEncryptionSettingsResponse `pulumi:"encryptionSettings"`
	// The disk name.
	Name *string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of the disk.
type DiskInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DiskInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInstanceViewResponse)(nil)).Elem()
}

func (o DiskInstanceViewResponseOutput) ToDiskInstanceViewResponseOutput() DiskInstanceViewResponseOutput {
	return o
}

func (o DiskInstanceViewResponseOutput) ToDiskInstanceViewResponseOutputWithContext(ctx context.Context) DiskInstanceViewResponseOutput {
	return o
}

// Specifies the encryption settings for the OS Disk. <br><br> Minimum api-version: 2015-06-15
func (o DiskInstanceViewResponseOutput) EncryptionSettings() DiskEncryptionSettingsResponseArrayOutput {
	return o.ApplyT(func(v DiskInstanceViewResponse) []DiskEncryptionSettingsResponse { return v.EncryptionSettings }).(DiskEncryptionSettingsResponseArrayOutput)
}

// The disk name.
func (o DiskInstanceViewResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskInstanceViewResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o DiskInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v DiskInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

type DiskInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInstanceViewResponse)(nil)).Elem()
}

func (o DiskInstanceViewResponseArrayOutput) ToDiskInstanceViewResponseArrayOutput() DiskInstanceViewResponseArrayOutput {
	return o
}

func (o DiskInstanceViewResponseArrayOutput) ToDiskInstanceViewResponseArrayOutputWithContext(ctx context.Context) DiskInstanceViewResponseArrayOutput {
	return o
}

func (o DiskInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) DiskInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskInstanceViewResponse {
		return vs[0].([]DiskInstanceViewResponse)[vs[1].(int)]
	}).(DiskInstanceViewResponseOutput)
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type DiskPurchasePlan struct {
	// The plan ID.
	Name string `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product string `pulumi:"product"`
	// The Offer Promotion Code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher string `pulumi:"publisher"`
}

// DiskPurchasePlanInput is an input type that accepts DiskPurchasePlanArgs and DiskPurchasePlanOutput values.
// You can construct a concrete instance of `DiskPurchasePlanInput` via:
//
//	DiskPurchasePlanArgs{...}
type DiskPurchasePlanInput interface {
	pulumi.Input

	ToDiskPurchasePlanOutput() DiskPurchasePlanOutput
	ToDiskPurchasePlanOutputWithContext(context.Context) DiskPurchasePlanOutput
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type DiskPurchasePlanArgs struct {
	// The plan ID.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product pulumi.StringInput `pulumi:"product"`
	// The Offer Promotion Code.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (DiskPurchasePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPurchasePlan)(nil)).Elem()
}

func (i DiskPurchasePlanArgs) ToDiskPurchasePlanOutput() DiskPurchasePlanOutput {
	return i.ToDiskPurchasePlanOutputWithContext(context.Background())
}

func (i DiskPurchasePlanArgs) ToDiskPurchasePlanOutputWithContext(ctx context.Context) DiskPurchasePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPurchasePlanOutput)
}

func (i DiskPurchasePlanArgs) ToDiskPurchasePlanPtrOutput() DiskPurchasePlanPtrOutput {
	return i.ToDiskPurchasePlanPtrOutputWithContext(context.Background())
}

func (i DiskPurchasePlanArgs) ToDiskPurchasePlanPtrOutputWithContext(ctx context.Context) DiskPurchasePlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPurchasePlanOutput).ToDiskPurchasePlanPtrOutputWithContext(ctx)
}

// DiskPurchasePlanPtrInput is an input type that accepts DiskPurchasePlanArgs, DiskPurchasePlanPtr and DiskPurchasePlanPtrOutput values.
// You can construct a concrete instance of `DiskPurchasePlanPtrInput` via:
//
//	        DiskPurchasePlanArgs{...}
//
//	or:
//
//	        nil
type DiskPurchasePlanPtrInput interface {
	pulumi.Input

	ToDiskPurchasePlanPtrOutput() DiskPurchasePlanPtrOutput
	ToDiskPurchasePlanPtrOutputWithContext(context.Context) DiskPurchasePlanPtrOutput
}

type diskPurchasePlanPtrType DiskPurchasePlanArgs

func DiskPurchasePlanPtr(v *DiskPurchasePlanArgs) DiskPurchasePlanPtrInput {
	return (*diskPurchasePlanPtrType)(v)
}

func (*diskPurchasePlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPurchasePlan)(nil)).Elem()
}

func (i *diskPurchasePlanPtrType) ToDiskPurchasePlanPtrOutput() DiskPurchasePlanPtrOutput {
	return i.ToDiskPurchasePlanPtrOutputWithContext(context.Background())
}

func (i *diskPurchasePlanPtrType) ToDiskPurchasePlanPtrOutputWithContext(ctx context.Context) DiskPurchasePlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPurchasePlanPtrOutput)
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type DiskPurchasePlanOutput struct{ *pulumi.OutputState }

func (DiskPurchasePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPurchasePlan)(nil)).Elem()
}

func (o DiskPurchasePlanOutput) ToDiskPurchasePlanOutput() DiskPurchasePlanOutput {
	return o
}

func (o DiskPurchasePlanOutput) ToDiskPurchasePlanOutputWithContext(ctx context.Context) DiskPurchasePlanOutput {
	return o
}

func (o DiskPurchasePlanOutput) ToDiskPurchasePlanPtrOutput() DiskPurchasePlanPtrOutput {
	return o.ToDiskPurchasePlanPtrOutputWithContext(context.Background())
}

func (o DiskPurchasePlanOutput) ToDiskPurchasePlanPtrOutputWithContext(ctx context.Context) DiskPurchasePlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskPurchasePlan) *DiskPurchasePlan {
		return &v
	}).(DiskPurchasePlanPtrOutput)
}

// The plan ID.
func (o DiskPurchasePlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPurchasePlan) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o DiskPurchasePlanOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPurchasePlan) string { return v.Product }).(pulumi.StringOutput)
}

// The Offer Promotion Code.
func (o DiskPurchasePlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskPurchasePlan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o DiskPurchasePlanOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPurchasePlan) string { return v.Publisher }).(pulumi.StringOutput)
}

type DiskPurchasePlanPtrOutput struct{ *pulumi.OutputState }

func (DiskPurchasePlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPurchasePlan)(nil)).Elem()
}

func (o DiskPurchasePlanPtrOutput) ToDiskPurchasePlanPtrOutput() DiskPurchasePlanPtrOutput {
	return o
}

func (o DiskPurchasePlanPtrOutput) ToDiskPurchasePlanPtrOutputWithContext(ctx context.Context) DiskPurchasePlanPtrOutput {
	return o
}

func (o DiskPurchasePlanPtrOutput) Elem() DiskPurchasePlanOutput {
	return o.ApplyT(func(v *DiskPurchasePlan) DiskPurchasePlan {
		if v != nil {
			return *v
		}
		var ret DiskPurchasePlan
		return ret
	}).(DiskPurchasePlanOutput)
}

// The plan ID.
func (o DiskPurchasePlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlan) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o DiskPurchasePlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlan) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// The Offer Promotion Code.
func (o DiskPurchasePlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o DiskPurchasePlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlan) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type DiskPurchasePlanResponse struct {
	// The plan ID.
	Name string `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product string `pulumi:"product"`
	// The Offer Promotion Code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher string `pulumi:"publisher"`
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type DiskPurchasePlanResponseOutput struct{ *pulumi.OutputState }

func (DiskPurchasePlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskPurchasePlanResponse)(nil)).Elem()
}

func (o DiskPurchasePlanResponseOutput) ToDiskPurchasePlanResponseOutput() DiskPurchasePlanResponseOutput {
	return o
}

func (o DiskPurchasePlanResponseOutput) ToDiskPurchasePlanResponseOutputWithContext(ctx context.Context) DiskPurchasePlanResponseOutput {
	return o
}

// The plan ID.
func (o DiskPurchasePlanResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPurchasePlanResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o DiskPurchasePlanResponseOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPurchasePlanResponse) string { return v.Product }).(pulumi.StringOutput)
}

// The Offer Promotion Code.
func (o DiskPurchasePlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskPurchasePlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o DiskPurchasePlanResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v DiskPurchasePlanResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

type DiskPurchasePlanResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskPurchasePlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskPurchasePlanResponse)(nil)).Elem()
}

func (o DiskPurchasePlanResponsePtrOutput) ToDiskPurchasePlanResponsePtrOutput() DiskPurchasePlanResponsePtrOutput {
	return o
}

func (o DiskPurchasePlanResponsePtrOutput) ToDiskPurchasePlanResponsePtrOutputWithContext(ctx context.Context) DiskPurchasePlanResponsePtrOutput {
	return o
}

func (o DiskPurchasePlanResponsePtrOutput) Elem() DiskPurchasePlanResponseOutput {
	return o.ApplyT(func(v *DiskPurchasePlanResponse) DiskPurchasePlanResponse {
		if v != nil {
			return *v
		}
		var ret DiskPurchasePlanResponse
		return ret
	}).(DiskPurchasePlanResponseOutput)
}

// The plan ID.
func (o DiskPurchasePlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o DiskPurchasePlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// The Offer Promotion Code.
func (o DiskPurchasePlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o DiskPurchasePlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskPurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Disk Restore Point details.
type DiskRestorePointAttributes struct {
	// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
	Encryption *RestorePointEncryption `pulumi:"encryption"`
	// Resource Id of the source disk restore point.
	SourceDiskRestorePoint *ApiEntityReference `pulumi:"sourceDiskRestorePoint"`
}

// DiskRestorePointAttributesInput is an input type that accepts DiskRestorePointAttributesArgs and DiskRestorePointAttributesOutput values.
// You can construct a concrete instance of `DiskRestorePointAttributesInput` via:
//
//	DiskRestorePointAttributesArgs{...}
type DiskRestorePointAttributesInput interface {
	pulumi.Input

	ToDiskRestorePointAttributesOutput() DiskRestorePointAttributesOutput
	ToDiskRestorePointAttributesOutputWithContext(context.Context) DiskRestorePointAttributesOutput
}

// Disk Restore Point details.
type DiskRestorePointAttributesArgs struct {
	// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
	Encryption RestorePointEncryptionPtrInput `pulumi:"encryption"`
	// Resource Id of the source disk restore point.
	SourceDiskRestorePoint ApiEntityReferencePtrInput `pulumi:"sourceDiskRestorePoint"`
}

func (DiskRestorePointAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskRestorePointAttributes)(nil)).Elem()
}

func (i DiskRestorePointAttributesArgs) ToDiskRestorePointAttributesOutput() DiskRestorePointAttributesOutput {
	return i.ToDiskRestorePointAttributesOutputWithContext(context.Background())
}

func (i DiskRestorePointAttributesArgs) ToDiskRestorePointAttributesOutputWithContext(ctx context.Context) DiskRestorePointAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskRestorePointAttributesOutput)
}

func (i DiskRestorePointAttributesArgs) ToDiskRestorePointAttributesPtrOutput() DiskRestorePointAttributesPtrOutput {
	return i.ToDiskRestorePointAttributesPtrOutputWithContext(context.Background())
}

func (i DiskRestorePointAttributesArgs) ToDiskRestorePointAttributesPtrOutputWithContext(ctx context.Context) DiskRestorePointAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskRestorePointAttributesOutput).ToDiskRestorePointAttributesPtrOutputWithContext(ctx)
}

// DiskRestorePointAttributesPtrInput is an input type that accepts DiskRestorePointAttributesArgs, DiskRestorePointAttributesPtr and DiskRestorePointAttributesPtrOutput values.
// You can construct a concrete instance of `DiskRestorePointAttributesPtrInput` via:
//
//	        DiskRestorePointAttributesArgs{...}
//
//	or:
//
//	        nil
type DiskRestorePointAttributesPtrInput interface {
	pulumi.Input

	ToDiskRestorePointAttributesPtrOutput() DiskRestorePointAttributesPtrOutput
	ToDiskRestorePointAttributesPtrOutputWithContext(context.Context) DiskRestorePointAttributesPtrOutput
}

type diskRestorePointAttributesPtrType DiskRestorePointAttributesArgs

func DiskRestorePointAttributesPtr(v *DiskRestorePointAttributesArgs) DiskRestorePointAttributesPtrInput {
	return (*diskRestorePointAttributesPtrType)(v)
}

func (*diskRestorePointAttributesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskRestorePointAttributes)(nil)).Elem()
}

func (i *diskRestorePointAttributesPtrType) ToDiskRestorePointAttributesPtrOutput() DiskRestorePointAttributesPtrOutput {
	return i.ToDiskRestorePointAttributesPtrOutputWithContext(context.Background())
}

func (i *diskRestorePointAttributesPtrType) ToDiskRestorePointAttributesPtrOutputWithContext(ctx context.Context) DiskRestorePointAttributesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskRestorePointAttributesPtrOutput)
}

// Disk Restore Point details.
type DiskRestorePointAttributesOutput struct{ *pulumi.OutputState }

func (DiskRestorePointAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskRestorePointAttributes)(nil)).Elem()
}

func (o DiskRestorePointAttributesOutput) ToDiskRestorePointAttributesOutput() DiskRestorePointAttributesOutput {
	return o
}

func (o DiskRestorePointAttributesOutput) ToDiskRestorePointAttributesOutputWithContext(ctx context.Context) DiskRestorePointAttributesOutput {
	return o
}

func (o DiskRestorePointAttributesOutput) ToDiskRestorePointAttributesPtrOutput() DiskRestorePointAttributesPtrOutput {
	return o.ToDiskRestorePointAttributesPtrOutputWithContext(context.Background())
}

func (o DiskRestorePointAttributesOutput) ToDiskRestorePointAttributesPtrOutputWithContext(ctx context.Context) DiskRestorePointAttributesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskRestorePointAttributes) *DiskRestorePointAttributes {
		return &v
	}).(DiskRestorePointAttributesPtrOutput)
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
func (o DiskRestorePointAttributesOutput) Encryption() RestorePointEncryptionPtrOutput {
	return o.ApplyT(func(v DiskRestorePointAttributes) *RestorePointEncryption { return v.Encryption }).(RestorePointEncryptionPtrOutput)
}

// Resource Id of the source disk restore point.
func (o DiskRestorePointAttributesOutput) SourceDiskRestorePoint() ApiEntityReferencePtrOutput {
	return o.ApplyT(func(v DiskRestorePointAttributes) *ApiEntityReference { return v.SourceDiskRestorePoint }).(ApiEntityReferencePtrOutput)
}

type DiskRestorePointAttributesPtrOutput struct{ *pulumi.OutputState }

func (DiskRestorePointAttributesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskRestorePointAttributes)(nil)).Elem()
}

func (o DiskRestorePointAttributesPtrOutput) ToDiskRestorePointAttributesPtrOutput() DiskRestorePointAttributesPtrOutput {
	return o
}

func (o DiskRestorePointAttributesPtrOutput) ToDiskRestorePointAttributesPtrOutputWithContext(ctx context.Context) DiskRestorePointAttributesPtrOutput {
	return o
}

func (o DiskRestorePointAttributesPtrOutput) Elem() DiskRestorePointAttributesOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributes) DiskRestorePointAttributes {
		if v != nil {
			return *v
		}
		var ret DiskRestorePointAttributes
		return ret
	}).(DiskRestorePointAttributesOutput)
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
func (o DiskRestorePointAttributesPtrOutput) Encryption() RestorePointEncryptionPtrOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributes) *RestorePointEncryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(RestorePointEncryptionPtrOutput)
}

// Resource Id of the source disk restore point.
func (o DiskRestorePointAttributesPtrOutput) SourceDiskRestorePoint() ApiEntityReferencePtrOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributes) *ApiEntityReference {
		if v == nil {
			return nil
		}
		return v.SourceDiskRestorePoint
	}).(ApiEntityReferencePtrOutput)
}

// Disk Restore Point details.
type DiskRestorePointAttributesResponse struct {
	// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
	Encryption *RestorePointEncryptionResponse `pulumi:"encryption"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource Id of the source disk restore point.
	SourceDiskRestorePoint *ApiEntityReferenceResponse `pulumi:"sourceDiskRestorePoint"`
}

// Disk Restore Point details.
type DiskRestorePointAttributesResponseOutput struct{ *pulumi.OutputState }

func (DiskRestorePointAttributesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskRestorePointAttributesResponse)(nil)).Elem()
}

func (o DiskRestorePointAttributesResponseOutput) ToDiskRestorePointAttributesResponseOutput() DiskRestorePointAttributesResponseOutput {
	return o
}

func (o DiskRestorePointAttributesResponseOutput) ToDiskRestorePointAttributesResponseOutputWithContext(ctx context.Context) DiskRestorePointAttributesResponseOutput {
	return o
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
func (o DiskRestorePointAttributesResponseOutput) Encryption() RestorePointEncryptionResponsePtrOutput {
	return o.ApplyT(func(v DiskRestorePointAttributesResponse) *RestorePointEncryptionResponse { return v.Encryption }).(RestorePointEncryptionResponsePtrOutput)
}

// Resource Id
func (o DiskRestorePointAttributesResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DiskRestorePointAttributesResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource Id of the source disk restore point.
func (o DiskRestorePointAttributesResponseOutput) SourceDiskRestorePoint() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v DiskRestorePointAttributesResponse) *ApiEntityReferenceResponse {
		return v.SourceDiskRestorePoint
	}).(ApiEntityReferenceResponsePtrOutput)
}

type DiskRestorePointAttributesResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskRestorePointAttributesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskRestorePointAttributesResponse)(nil)).Elem()
}

func (o DiskRestorePointAttributesResponsePtrOutput) ToDiskRestorePointAttributesResponsePtrOutput() DiskRestorePointAttributesResponsePtrOutput {
	return o
}

func (o DiskRestorePointAttributesResponsePtrOutput) ToDiskRestorePointAttributesResponsePtrOutputWithContext(ctx context.Context) DiskRestorePointAttributesResponsePtrOutput {
	return o
}

func (o DiskRestorePointAttributesResponsePtrOutput) Elem() DiskRestorePointAttributesResponseOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributesResponse) DiskRestorePointAttributesResponse {
		if v != nil {
			return *v
		}
		var ret DiskRestorePointAttributesResponse
		return ret
	}).(DiskRestorePointAttributesResponseOutput)
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
func (o DiskRestorePointAttributesResponsePtrOutput) Encryption() RestorePointEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributesResponse) *RestorePointEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(RestorePointEncryptionResponsePtrOutput)
}

// Resource Id
func (o DiskRestorePointAttributesResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Resource Id of the source disk restore point.
func (o DiskRestorePointAttributesResponsePtrOutput) SourceDiskRestorePoint() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *DiskRestorePointAttributesResponse) *ApiEntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.SourceDiskRestorePoint
	}).(ApiEntityReferenceResponsePtrOutput)
}

// The instance view of a disk restore point.
type DiskRestorePointInstanceViewResponse struct {
	// Disk restore point Id.
	Id *string `pulumi:"id"`
	// The disk restore point replication status information.
	ReplicationStatus *DiskRestorePointReplicationStatusResponse `pulumi:"replicationStatus"`
}

// The instance view of a disk restore point.
type DiskRestorePointInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (DiskRestorePointInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskRestorePointInstanceViewResponse)(nil)).Elem()
}

func (o DiskRestorePointInstanceViewResponseOutput) ToDiskRestorePointInstanceViewResponseOutput() DiskRestorePointInstanceViewResponseOutput {
	return o
}

func (o DiskRestorePointInstanceViewResponseOutput) ToDiskRestorePointInstanceViewResponseOutputWithContext(ctx context.Context) DiskRestorePointInstanceViewResponseOutput {
	return o
}

// Disk restore point Id.
func (o DiskRestorePointInstanceViewResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskRestorePointInstanceViewResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The disk restore point replication status information.
func (o DiskRestorePointInstanceViewResponseOutput) ReplicationStatus() DiskRestorePointReplicationStatusResponsePtrOutput {
	return o.ApplyT(func(v DiskRestorePointInstanceViewResponse) *DiskRestorePointReplicationStatusResponse {
		return v.ReplicationStatus
	}).(DiskRestorePointReplicationStatusResponsePtrOutput)
}

type DiskRestorePointInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskRestorePointInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskRestorePointInstanceViewResponse)(nil)).Elem()
}

func (o DiskRestorePointInstanceViewResponseArrayOutput) ToDiskRestorePointInstanceViewResponseArrayOutput() DiskRestorePointInstanceViewResponseArrayOutput {
	return o
}

func (o DiskRestorePointInstanceViewResponseArrayOutput) ToDiskRestorePointInstanceViewResponseArrayOutputWithContext(ctx context.Context) DiskRestorePointInstanceViewResponseArrayOutput {
	return o
}

func (o DiskRestorePointInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) DiskRestorePointInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskRestorePointInstanceViewResponse {
		return vs[0].([]DiskRestorePointInstanceViewResponse)[vs[1].(int)]
	}).(DiskRestorePointInstanceViewResponseOutput)
}

// The instance view of a disk restore point.
type DiskRestorePointReplicationStatusResponse struct {
	// Replication completion percentage.
	CompletionPercent *int `pulumi:"completionPercent"`
	// The resource status information.
	Status *InstanceViewStatusResponse `pulumi:"status"`
}

// The instance view of a disk restore point.
type DiskRestorePointReplicationStatusResponseOutput struct{ *pulumi.OutputState }

func (DiskRestorePointReplicationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskRestorePointReplicationStatusResponse)(nil)).Elem()
}

func (o DiskRestorePointReplicationStatusResponseOutput) ToDiskRestorePointReplicationStatusResponseOutput() DiskRestorePointReplicationStatusResponseOutput {
	return o
}

func (o DiskRestorePointReplicationStatusResponseOutput) ToDiskRestorePointReplicationStatusResponseOutputWithContext(ctx context.Context) DiskRestorePointReplicationStatusResponseOutput {
	return o
}

// Replication completion percentage.
func (o DiskRestorePointReplicationStatusResponseOutput) CompletionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiskRestorePointReplicationStatusResponse) *int { return v.CompletionPercent }).(pulumi.IntPtrOutput)
}

// The resource status information.
func (o DiskRestorePointReplicationStatusResponseOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v DiskRestorePointReplicationStatusResponse) *InstanceViewStatusResponse { return v.Status }).(InstanceViewStatusResponsePtrOutput)
}

type DiskRestorePointReplicationStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskRestorePointReplicationStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskRestorePointReplicationStatusResponse)(nil)).Elem()
}

func (o DiskRestorePointReplicationStatusResponsePtrOutput) ToDiskRestorePointReplicationStatusResponsePtrOutput() DiskRestorePointReplicationStatusResponsePtrOutput {
	return o
}

func (o DiskRestorePointReplicationStatusResponsePtrOutput) ToDiskRestorePointReplicationStatusResponsePtrOutputWithContext(ctx context.Context) DiskRestorePointReplicationStatusResponsePtrOutput {
	return o
}

func (o DiskRestorePointReplicationStatusResponsePtrOutput) Elem() DiskRestorePointReplicationStatusResponseOutput {
	return o.ApplyT(func(v *DiskRestorePointReplicationStatusResponse) DiskRestorePointReplicationStatusResponse {
		if v != nil {
			return *v
		}
		var ret DiskRestorePointReplicationStatusResponse
		return ret
	}).(DiskRestorePointReplicationStatusResponseOutput)
}

// Replication completion percentage.
func (o DiskRestorePointReplicationStatusResponsePtrOutput) CompletionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskRestorePointReplicationStatusResponse) *int {
		if v == nil {
			return nil
		}
		return v.CompletionPercent
	}).(pulumi.IntPtrOutput)
}

// The resource status information.
func (o DiskRestorePointReplicationStatusResponsePtrOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v *DiskRestorePointReplicationStatusResponse) *InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Status
	}).(InstanceViewStatusResponsePtrOutput)
}

// Contains the security related information for the resource.
type DiskSecurityProfile struct {
	// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
	SecureVMDiskEncryptionSetId *string `pulumi:"secureVMDiskEncryptionSetId"`
	// Specifies the SecurityType of the VM. Applicable for OS disks only.
	SecurityType *string `pulumi:"securityType"`
}

// DiskSecurityProfileInput is an input type that accepts DiskSecurityProfileArgs and DiskSecurityProfileOutput values.
// You can construct a concrete instance of `DiskSecurityProfileInput` via:
//
//	DiskSecurityProfileArgs{...}
type DiskSecurityProfileInput interface {
	pulumi.Input

	ToDiskSecurityProfileOutput() DiskSecurityProfileOutput
	ToDiskSecurityProfileOutputWithContext(context.Context) DiskSecurityProfileOutput
}

// Contains the security related information for the resource.
type DiskSecurityProfileArgs struct {
	// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
	SecureVMDiskEncryptionSetId pulumi.StringPtrInput `pulumi:"secureVMDiskEncryptionSetId"`
	// Specifies the SecurityType of the VM. Applicable for OS disks only.
	SecurityType pulumi.StringPtrInput `pulumi:"securityType"`
}

func (DiskSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSecurityProfile)(nil)).Elem()
}

func (i DiskSecurityProfileArgs) ToDiskSecurityProfileOutput() DiskSecurityProfileOutput {
	return i.ToDiskSecurityProfileOutputWithContext(context.Background())
}

func (i DiskSecurityProfileArgs) ToDiskSecurityProfileOutputWithContext(ctx context.Context) DiskSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSecurityProfileOutput)
}

func (i DiskSecurityProfileArgs) ToDiskSecurityProfilePtrOutput() DiskSecurityProfilePtrOutput {
	return i.ToDiskSecurityProfilePtrOutputWithContext(context.Background())
}

func (i DiskSecurityProfileArgs) ToDiskSecurityProfilePtrOutputWithContext(ctx context.Context) DiskSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSecurityProfileOutput).ToDiskSecurityProfilePtrOutputWithContext(ctx)
}

// DiskSecurityProfilePtrInput is an input type that accepts DiskSecurityProfileArgs, DiskSecurityProfilePtr and DiskSecurityProfilePtrOutput values.
// You can construct a concrete instance of `DiskSecurityProfilePtrInput` via:
//
//	        DiskSecurityProfileArgs{...}
//
//	or:
//
//	        nil
type DiskSecurityProfilePtrInput interface {
	pulumi.Input

	ToDiskSecurityProfilePtrOutput() DiskSecurityProfilePtrOutput
	ToDiskSecurityProfilePtrOutputWithContext(context.Context) DiskSecurityProfilePtrOutput
}

type diskSecurityProfilePtrType DiskSecurityProfileArgs

func DiskSecurityProfilePtr(v *DiskSecurityProfileArgs) DiskSecurityProfilePtrInput {
	return (*diskSecurityProfilePtrType)(v)
}

func (*diskSecurityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSecurityProfile)(nil)).Elem()
}

func (i *diskSecurityProfilePtrType) ToDiskSecurityProfilePtrOutput() DiskSecurityProfilePtrOutput {
	return i.ToDiskSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *diskSecurityProfilePtrType) ToDiskSecurityProfilePtrOutputWithContext(ctx context.Context) DiskSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSecurityProfilePtrOutput)
}

// Contains the security related information for the resource.
type DiskSecurityProfileOutput struct{ *pulumi.OutputState }

func (DiskSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSecurityProfile)(nil)).Elem()
}

func (o DiskSecurityProfileOutput) ToDiskSecurityProfileOutput() DiskSecurityProfileOutput {
	return o
}

func (o DiskSecurityProfileOutput) ToDiskSecurityProfileOutputWithContext(ctx context.Context) DiskSecurityProfileOutput {
	return o
}

func (o DiskSecurityProfileOutput) ToDiskSecurityProfilePtrOutput() DiskSecurityProfilePtrOutput {
	return o.ToDiskSecurityProfilePtrOutputWithContext(context.Background())
}

func (o DiskSecurityProfileOutput) ToDiskSecurityProfilePtrOutputWithContext(ctx context.Context) DiskSecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskSecurityProfile) *DiskSecurityProfile {
		return &v
	}).(DiskSecurityProfilePtrOutput)
}

// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
func (o DiskSecurityProfileOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSecurityProfile) *string { return v.SecureVMDiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// Specifies the SecurityType of the VM. Applicable for OS disks only.
func (o DiskSecurityProfileOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSecurityProfile) *string { return v.SecurityType }).(pulumi.StringPtrOutput)
}

type DiskSecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (DiskSecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSecurityProfile)(nil)).Elem()
}

func (o DiskSecurityProfilePtrOutput) ToDiskSecurityProfilePtrOutput() DiskSecurityProfilePtrOutput {
	return o
}

func (o DiskSecurityProfilePtrOutput) ToDiskSecurityProfilePtrOutputWithContext(ctx context.Context) DiskSecurityProfilePtrOutput {
	return o
}

func (o DiskSecurityProfilePtrOutput) Elem() DiskSecurityProfileOutput {
	return o.ApplyT(func(v *DiskSecurityProfile) DiskSecurityProfile {
		if v != nil {
			return *v
		}
		var ret DiskSecurityProfile
		return ret
	}).(DiskSecurityProfileOutput)
}

// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
func (o DiskSecurityProfilePtrOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecureVMDiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// Specifies the SecurityType of the VM. Applicable for OS disks only.
func (o DiskSecurityProfilePtrOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecurityType
	}).(pulumi.StringPtrOutput)
}

// Contains the security related information for the resource.
type DiskSecurityProfileResponse struct {
	// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
	SecureVMDiskEncryptionSetId *string `pulumi:"secureVMDiskEncryptionSetId"`
	// Specifies the SecurityType of the VM. Applicable for OS disks only.
	SecurityType *string `pulumi:"securityType"`
}

// Contains the security related information for the resource.
type DiskSecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (DiskSecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSecurityProfileResponse)(nil)).Elem()
}

func (o DiskSecurityProfileResponseOutput) ToDiskSecurityProfileResponseOutput() DiskSecurityProfileResponseOutput {
	return o
}

func (o DiskSecurityProfileResponseOutput) ToDiskSecurityProfileResponseOutputWithContext(ctx context.Context) DiskSecurityProfileResponseOutput {
	return o
}

// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
func (o DiskSecurityProfileResponseOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSecurityProfileResponse) *string { return v.SecureVMDiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// Specifies the SecurityType of the VM. Applicable for OS disks only.
func (o DiskSecurityProfileResponseOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSecurityProfileResponse) *string { return v.SecurityType }).(pulumi.StringPtrOutput)
}

type DiskSecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSecurityProfileResponse)(nil)).Elem()
}

func (o DiskSecurityProfileResponsePtrOutput) ToDiskSecurityProfileResponsePtrOutput() DiskSecurityProfileResponsePtrOutput {
	return o
}

func (o DiskSecurityProfileResponsePtrOutput) ToDiskSecurityProfileResponsePtrOutputWithContext(ctx context.Context) DiskSecurityProfileResponsePtrOutput {
	return o
}

func (o DiskSecurityProfileResponsePtrOutput) Elem() DiskSecurityProfileResponseOutput {
	return o.ApplyT(func(v *DiskSecurityProfileResponse) DiskSecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret DiskSecurityProfileResponse
		return ret
	}).(DiskSecurityProfileResponseOutput)
}

// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
func (o DiskSecurityProfileResponsePtrOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecureVMDiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// Specifies the SecurityType of the VM. Applicable for OS disks only.
func (o DiskSecurityProfileResponsePtrOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecurityType
	}).(pulumi.StringPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS.
type DiskSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// DiskSkuInput is an input type that accepts DiskSkuArgs and DiskSkuOutput values.
// You can construct a concrete instance of `DiskSkuInput` via:
//
//	DiskSkuArgs{...}
type DiskSkuInput interface {
	pulumi.Input

	ToDiskSkuOutput() DiskSkuOutput
	ToDiskSkuOutputWithContext(context.Context) DiskSkuOutput
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS.
type DiskSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DiskSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (i DiskSkuArgs) ToDiskSkuOutput() DiskSkuOutput {
	return i.ToDiskSkuOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput)
}

func (i DiskSkuArgs) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput).ToDiskSkuPtrOutputWithContext(ctx)
}

// DiskSkuPtrInput is an input type that accepts DiskSkuArgs, DiskSkuPtr and DiskSkuPtrOutput values.
// You can construct a concrete instance of `DiskSkuPtrInput` via:
//
//	        DiskSkuArgs{...}
//
//	or:
//
//	        nil
type DiskSkuPtrInput interface {
	pulumi.Input

	ToDiskSkuPtrOutput() DiskSkuPtrOutput
	ToDiskSkuPtrOutputWithContext(context.Context) DiskSkuPtrOutput
}

type diskSkuPtrType DiskSkuArgs

func DiskSkuPtr(v *DiskSkuArgs) DiskSkuPtrInput {
	return (*diskSkuPtrType)(v)
}

func (*diskSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS.
type DiskSkuOutput struct{ *pulumi.OutputState }

func (DiskSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (o DiskSkuOutput) ToDiskSkuOutput() DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (o DiskSkuOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskSku) *DiskSku {
		return &v
	}).(DiskSkuPtrOutput)
}

// The sku name.
func (o DiskSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DiskSkuPtrOutput struct{ *pulumi.OutputState }

func (DiskSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) Elem() DiskSkuOutput {
	return o.ApplyT(func(v *DiskSku) DiskSku {
		if v != nil {
			return *v
		}
		var ret DiskSku
		return ret
	}).(DiskSkuOutput)
}

// The sku name.
func (o DiskSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS.
type DiskSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS.
type DiskSkuResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return o
}

// The sku name.
func (o DiskSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v DiskSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type DiskSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) Elem() DiskSkuResponseOutput {
	return o.ApplyT(func(v *DiskSkuResponse) DiskSkuResponse {
		if v != nil {
			return *v
		}
		var ret DiskSkuResponse
		return ret
	}).(DiskSkuResponseOutput)
}

// The sku name.
func (o DiskSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o DiskSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Encryption at rest settings for disk or snapshot
type Encryption struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type *string `pulumi:"type"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//	EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption at rest settings for disk or snapshot
type EncryptionArgs struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//	        EncryptionArgs{...}
//
//	or:
//
//	        nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

// Encryption at rest settings for disk or snapshot
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o.ToEncryptionPtrOutputWithContext(context.Background())
}

func (o EncryptionOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Encryption) *Encryption {
		return &v
	}).(EncryptionPtrOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Encryption) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Encryption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) Elem() EncryptionOutput {
	return o.ApplyT(func(v *Encryption) Encryption {
		if v != nil {
			return *v
		}
		var ret Encryption
		return ret
	}).(EncryptionOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionPtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
type EncryptionIdentity struct {
	// Specifies ARM Resource ID of one of the user identities associated with the VM.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// EncryptionIdentityInput is an input type that accepts EncryptionIdentityArgs and EncryptionIdentityOutput values.
// You can construct a concrete instance of `EncryptionIdentityInput` via:
//
//	EncryptionIdentityArgs{...}
type EncryptionIdentityInput interface {
	pulumi.Input

	ToEncryptionIdentityOutput() EncryptionIdentityOutput
	ToEncryptionIdentityOutputWithContext(context.Context) EncryptionIdentityOutput
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
type EncryptionIdentityArgs struct {
	// Specifies ARM Resource ID of one of the user identities associated with the VM.
	UserAssignedIdentityResourceId pulumi.StringPtrInput `pulumi:"userAssignedIdentityResourceId"`
}

func (EncryptionIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionIdentity)(nil)).Elem()
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityOutput() EncryptionIdentityOutput {
	return i.ToEncryptionIdentityOutputWithContext(context.Background())
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityOutputWithContext(ctx context.Context) EncryptionIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionIdentityOutput)
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return i.ToEncryptionIdentityPtrOutputWithContext(context.Background())
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionIdentityOutput).ToEncryptionIdentityPtrOutputWithContext(ctx)
}

// EncryptionIdentityPtrInput is an input type that accepts EncryptionIdentityArgs, EncryptionIdentityPtr and EncryptionIdentityPtrOutput values.
// You can construct a concrete instance of `EncryptionIdentityPtrInput` via:
//
//	        EncryptionIdentityArgs{...}
//
//	or:
//
//	        nil
type EncryptionIdentityPtrInput interface {
	pulumi.Input

	ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput
	ToEncryptionIdentityPtrOutputWithContext(context.Context) EncryptionIdentityPtrOutput
}

type encryptionIdentityPtrType EncryptionIdentityArgs

func EncryptionIdentityPtr(v *EncryptionIdentityArgs) EncryptionIdentityPtrInput {
	return (*encryptionIdentityPtrType)(v)
}

func (*encryptionIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionIdentity)(nil)).Elem()
}

func (i *encryptionIdentityPtrType) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return i.ToEncryptionIdentityPtrOutputWithContext(context.Background())
}

func (i *encryptionIdentityPtrType) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionIdentityPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
type EncryptionIdentityOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionIdentity)(nil)).Elem()
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityOutput() EncryptionIdentityOutput {
	return o
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityOutputWithContext(ctx context.Context) EncryptionIdentityOutput {
	return o
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return o.ToEncryptionIdentityPtrOutputWithContext(context.Background())
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionIdentity) *EncryptionIdentity {
		return &v
	}).(EncryptionIdentityPtrOutput)
}

// Specifies ARM Resource ID of one of the user identities associated with the VM.
func (o EncryptionIdentityOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionIdentity) *string { return v.UserAssignedIdentityResourceId }).(pulumi.StringPtrOutput)
}

type EncryptionIdentityPtrOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionIdentity)(nil)).Elem()
}

func (o EncryptionIdentityPtrOutput) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return o
}

func (o EncryptionIdentityPtrOutput) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return o
}

func (o EncryptionIdentityPtrOutput) Elem() EncryptionIdentityOutput {
	return o.ApplyT(func(v *EncryptionIdentity) EncryptionIdentity {
		if v != nil {
			return *v
		}
		var ret EncryptionIdentity
		return ret
	}).(EncryptionIdentityOutput)
}

// Specifies ARM Resource ID of one of the user identities associated with the VM.
func (o EncryptionIdentityPtrOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
type EncryptionIdentityResponse struct {
	// Specifies ARM Resource ID of one of the user identities associated with the VM.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
type EncryptionIdentityResponseOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionIdentityResponse)(nil)).Elem()
}

func (o EncryptionIdentityResponseOutput) ToEncryptionIdentityResponseOutput() EncryptionIdentityResponseOutput {
	return o
}

func (o EncryptionIdentityResponseOutput) ToEncryptionIdentityResponseOutputWithContext(ctx context.Context) EncryptionIdentityResponseOutput {
	return o
}

// Specifies ARM Resource ID of one of the user identities associated with the VM.
func (o EncryptionIdentityResponseOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionIdentityResponse) *string { return v.UserAssignedIdentityResourceId }).(pulumi.StringPtrOutput)
}

type EncryptionIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionIdentityResponse)(nil)).Elem()
}

func (o EncryptionIdentityResponsePtrOutput) ToEncryptionIdentityResponsePtrOutput() EncryptionIdentityResponsePtrOutput {
	return o
}

func (o EncryptionIdentityResponsePtrOutput) ToEncryptionIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionIdentityResponsePtrOutput {
	return o
}

func (o EncryptionIdentityResponsePtrOutput) Elem() EncryptionIdentityResponseOutput {
	return o.ApplyT(func(v *EncryptionIdentityResponse) EncryptionIdentityResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionIdentityResponse
		return ret
	}).(EncryptionIdentityResponseOutput)
}

// Specifies ARM Resource ID of one of the user identities associated with the VM.
func (o EncryptionIdentityResponsePtrOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImages struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages []DataDiskImageEncryption `pulumi:"dataDiskImages"`
	// Contains encryption settings for an OS disk image.
	OsDiskImage *OSDiskImageEncryption `pulumi:"osDiskImage"`
}

// EncryptionImagesInput is an input type that accepts EncryptionImagesArgs and EncryptionImagesOutput values.
// You can construct a concrete instance of `EncryptionImagesInput` via:
//
//	EncryptionImagesArgs{...}
type EncryptionImagesInput interface {
	pulumi.Input

	ToEncryptionImagesOutput() EncryptionImagesOutput
	ToEncryptionImagesOutputWithContext(context.Context) EncryptionImagesOutput
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesArgs struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages DataDiskImageEncryptionArrayInput `pulumi:"dataDiskImages"`
	// Contains encryption settings for an OS disk image.
	OsDiskImage OSDiskImageEncryptionPtrInput `pulumi:"osDiskImage"`
}

func (EncryptionImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionImages)(nil)).Elem()
}

func (i EncryptionImagesArgs) ToEncryptionImagesOutput() EncryptionImagesOutput {
	return i.ToEncryptionImagesOutputWithContext(context.Background())
}

func (i EncryptionImagesArgs) ToEncryptionImagesOutputWithContext(ctx context.Context) EncryptionImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionImagesOutput)
}

func (i EncryptionImagesArgs) ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput {
	return i.ToEncryptionImagesPtrOutputWithContext(context.Background())
}

func (i EncryptionImagesArgs) ToEncryptionImagesPtrOutputWithContext(ctx context.Context) EncryptionImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionImagesOutput).ToEncryptionImagesPtrOutputWithContext(ctx)
}

// EncryptionImagesPtrInput is an input type that accepts EncryptionImagesArgs, EncryptionImagesPtr and EncryptionImagesPtrOutput values.
// You can construct a concrete instance of `EncryptionImagesPtrInput` via:
//
//	        EncryptionImagesArgs{...}
//
//	or:
//
//	        nil
type EncryptionImagesPtrInput interface {
	pulumi.Input

	ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput
	ToEncryptionImagesPtrOutputWithContext(context.Context) EncryptionImagesPtrOutput
}

type encryptionImagesPtrType EncryptionImagesArgs

func EncryptionImagesPtr(v *EncryptionImagesArgs) EncryptionImagesPtrInput {
	return (*encryptionImagesPtrType)(v)
}

func (*encryptionImagesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionImages)(nil)).Elem()
}

func (i *encryptionImagesPtrType) ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput {
	return i.ToEncryptionImagesPtrOutputWithContext(context.Background())
}

func (i *encryptionImagesPtrType) ToEncryptionImagesPtrOutputWithContext(ctx context.Context) EncryptionImagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionImagesPtrOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesOutput struct{ *pulumi.OutputState }

func (EncryptionImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionImages)(nil)).Elem()
}

func (o EncryptionImagesOutput) ToEncryptionImagesOutput() EncryptionImagesOutput {
	return o
}

func (o EncryptionImagesOutput) ToEncryptionImagesOutputWithContext(ctx context.Context) EncryptionImagesOutput {
	return o
}

func (o EncryptionImagesOutput) ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput {
	return o.ToEncryptionImagesPtrOutputWithContext(context.Background())
}

func (o EncryptionImagesOutput) ToEncryptionImagesPtrOutputWithContext(ctx context.Context) EncryptionImagesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionImages) *EncryptionImages {
		return &v
	}).(EncryptionImagesPtrOutput)
}

// A list of encryption specifications for data disk images.
func (o EncryptionImagesOutput) DataDiskImages() DataDiskImageEncryptionArrayOutput {
	return o.ApplyT(func(v EncryptionImages) []DataDiskImageEncryption { return v.DataDiskImages }).(DataDiskImageEncryptionArrayOutput)
}

// Contains encryption settings for an OS disk image.
func (o EncryptionImagesOutput) OsDiskImage() OSDiskImageEncryptionPtrOutput {
	return o.ApplyT(func(v EncryptionImages) *OSDiskImageEncryption { return v.OsDiskImage }).(OSDiskImageEncryptionPtrOutput)
}

type EncryptionImagesPtrOutput struct{ *pulumi.OutputState }

func (EncryptionImagesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionImages)(nil)).Elem()
}

func (o EncryptionImagesPtrOutput) ToEncryptionImagesPtrOutput() EncryptionImagesPtrOutput {
	return o
}

func (o EncryptionImagesPtrOutput) ToEncryptionImagesPtrOutputWithContext(ctx context.Context) EncryptionImagesPtrOutput {
	return o
}

func (o EncryptionImagesPtrOutput) Elem() EncryptionImagesOutput {
	return o.ApplyT(func(v *EncryptionImages) EncryptionImages {
		if v != nil {
			return *v
		}
		var ret EncryptionImages
		return ret
	}).(EncryptionImagesOutput)
}

// A list of encryption specifications for data disk images.
func (o EncryptionImagesPtrOutput) DataDiskImages() DataDiskImageEncryptionArrayOutput {
	return o.ApplyT(func(v *EncryptionImages) []DataDiskImageEncryption {
		if v == nil {
			return nil
		}
		return v.DataDiskImages
	}).(DataDiskImageEncryptionArrayOutput)
}

// Contains encryption settings for an OS disk image.
func (o EncryptionImagesPtrOutput) OsDiskImage() OSDiskImageEncryptionPtrOutput {
	return o.ApplyT(func(v *EncryptionImages) *OSDiskImageEncryption {
		if v == nil {
			return nil
		}
		return v.OsDiskImage
	}).(OSDiskImageEncryptionPtrOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesResponse struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages []DataDiskImageEncryptionResponse `pulumi:"dataDiskImages"`
	// Contains encryption settings for an OS disk image.
	OsDiskImage *OSDiskImageEncryptionResponse `pulumi:"osDiskImage"`
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImagesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionImagesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionImagesResponse)(nil)).Elem()
}

func (o EncryptionImagesResponseOutput) ToEncryptionImagesResponseOutput() EncryptionImagesResponseOutput {
	return o
}

func (o EncryptionImagesResponseOutput) ToEncryptionImagesResponseOutputWithContext(ctx context.Context) EncryptionImagesResponseOutput {
	return o
}

// A list of encryption specifications for data disk images.
func (o EncryptionImagesResponseOutput) DataDiskImages() DataDiskImageEncryptionResponseArrayOutput {
	return o.ApplyT(func(v EncryptionImagesResponse) []DataDiskImageEncryptionResponse { return v.DataDiskImages }).(DataDiskImageEncryptionResponseArrayOutput)
}

// Contains encryption settings for an OS disk image.
func (o EncryptionImagesResponseOutput) OsDiskImage() OSDiskImageEncryptionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionImagesResponse) *OSDiskImageEncryptionResponse { return v.OsDiskImage }).(OSDiskImageEncryptionResponsePtrOutput)
}

type EncryptionImagesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionImagesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionImagesResponse)(nil)).Elem()
}

func (o EncryptionImagesResponsePtrOutput) ToEncryptionImagesResponsePtrOutput() EncryptionImagesResponsePtrOutput {
	return o
}

func (o EncryptionImagesResponsePtrOutput) ToEncryptionImagesResponsePtrOutputWithContext(ctx context.Context) EncryptionImagesResponsePtrOutput {
	return o
}

func (o EncryptionImagesResponsePtrOutput) Elem() EncryptionImagesResponseOutput {
	return o.ApplyT(func(v *EncryptionImagesResponse) EncryptionImagesResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionImagesResponse
		return ret
	}).(EncryptionImagesResponseOutput)
}

// A list of encryption specifications for data disk images.
func (o EncryptionImagesResponsePtrOutput) DataDiskImages() DataDiskImageEncryptionResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionImagesResponse) []DataDiskImageEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.DataDiskImages
	}).(DataDiskImageEncryptionResponseArrayOutput)
}

// Contains encryption settings for an OS disk image.
func (o EncryptionImagesResponsePtrOutput) OsDiskImage() OSDiskImageEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionImagesResponse) *OSDiskImageEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.OsDiskImage
	}).(OSDiskImageEncryptionResponsePtrOutput)
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponse struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// The type of key used to encrypt the data of the disk.
	Type *string `pulumi:"type"`
}

// Encryption at rest settings for disk or snapshot
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) Elem() EncryptionResponseOutput {
	return o.ApplyT(func(v *EncryptionResponse) EncryptionResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionResponse
		return ret
	}).(EncryptionResponseOutput)
}

// ResourceId of the disk encryption set to use for enabling encryption at rest.
func (o EncryptionResponsePtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// The type of key used to encrypt the data of the disk.
func (o EncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentity struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// EncryptionSetIdentityInput is an input type that accepts EncryptionSetIdentityArgs and EncryptionSetIdentityOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityInput` via:
//
//	EncryptionSetIdentityArgs{...}
type EncryptionSetIdentityInput interface {
	pulumi.Input

	ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput
	ToEncryptionSetIdentityOutputWithContext(context.Context) EncryptionSetIdentityOutput
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityArgs struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (EncryptionSetIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentity)(nil)).Elem()
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput {
	return i.ToEncryptionSetIdentityOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityOutputWithContext(ctx context.Context) EncryptionSetIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityOutput)
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return i.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (i EncryptionSetIdentityArgs) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityOutput).ToEncryptionSetIdentityPtrOutputWithContext(ctx)
}

// EncryptionSetIdentityPtrInput is an input type that accepts EncryptionSetIdentityArgs, EncryptionSetIdentityPtr and EncryptionSetIdentityPtrOutput values.
// You can construct a concrete instance of `EncryptionSetIdentityPtrInput` via:
//
//	        EncryptionSetIdentityArgs{...}
//
//	or:
//
//	        nil
type EncryptionSetIdentityPtrInput interface {
	pulumi.Input

	ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput
	ToEncryptionSetIdentityPtrOutputWithContext(context.Context) EncryptionSetIdentityPtrOutput
}

type encryptionSetIdentityPtrType EncryptionSetIdentityArgs

func EncryptionSetIdentityPtr(v *EncryptionSetIdentityArgs) EncryptionSetIdentityPtrInput {
	return (*encryptionSetIdentityPtrType)(v)
}

func (*encryptionSetIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentity)(nil)).Elem()
}

func (i *encryptionSetIdentityPtrType) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return i.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (i *encryptionSetIdentityPtrType) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSetIdentityPtrOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentity)(nil)).Elem()
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityOutput() EncryptionSetIdentityOutput {
	return o
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityOutputWithContext(ctx context.Context) EncryptionSetIdentityOutput {
	return o
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return o.ToEncryptionSetIdentityPtrOutputWithContext(context.Background())
}

func (o EncryptionSetIdentityOutput) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionSetIdentity) *EncryptionSetIdentity {
		return &v
	}).(EncryptionSetIdentityPtrOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
func (o EncryptionSetIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o EncryptionSetIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EncryptionSetIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type EncryptionSetIdentityPtrOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentity)(nil)).Elem()
}

func (o EncryptionSetIdentityPtrOutput) ToEncryptionSetIdentityPtrOutput() EncryptionSetIdentityPtrOutput {
	return o
}

func (o EncryptionSetIdentityPtrOutput) ToEncryptionSetIdentityPtrOutputWithContext(ctx context.Context) EncryptionSetIdentityPtrOutput {
	return o
}

func (o EncryptionSetIdentityPtrOutput) Elem() EncryptionSetIdentityOutput {
	return o.ApplyT(func(v *EncryptionSetIdentity) EncryptionSetIdentity {
		if v != nil {
			return *v
		}
		var ret EncryptionSetIdentity
		return ret
	}).(EncryptionSetIdentityOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
func (o EncryptionSetIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o EncryptionSetIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EncryptionSetIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponse struct {
	// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
	TenantId string `pulumi:"tenantId"`
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentitiesValueResponse `pulumi:"userAssignedIdentities"`
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentityResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSetIdentityResponse)(nil)).Elem()
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponseOutput() EncryptionSetIdentityResponseOutput {
	return o
}

func (o EncryptionSetIdentityResponseOutput) ToEncryptionSetIdentityResponseOutputWithContext(ctx context.Context) EncryptionSetIdentityResponseOutput {
	return o
}

// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
func (o EncryptionSetIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o EncryptionSetIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v EncryptionSetIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

type EncryptionSetIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSetIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSetIdentityResponse)(nil)).Elem()
}

func (o EncryptionSetIdentityResponsePtrOutput) ToEncryptionSetIdentityResponsePtrOutput() EncryptionSetIdentityResponsePtrOutput {
	return o
}

func (o EncryptionSetIdentityResponsePtrOutput) ToEncryptionSetIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionSetIdentityResponsePtrOutput {
	return o
}

func (o EncryptionSetIdentityResponsePtrOutput) Elem() EncryptionSetIdentityResponseOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) EncryptionSetIdentityResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionSetIdentityResponse
		return ret
	}).(EncryptionSetIdentityResponseOutput)
}

// The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
func (o EncryptionSetIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with Identity type None during migration of subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
func (o EncryptionSetIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the disk encryption set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o EncryptionSetIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v *EncryptionSetIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElement `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `pulumi:"encryptionSettingsVersion"`
}

// EncryptionSettingsCollectionInput is an input type that accepts EncryptionSettingsCollectionArgs and EncryptionSettingsCollectionOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionInput` via:
//
//	EncryptionSettingsCollectionArgs{...}
type EncryptionSettingsCollectionInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput
	ToEncryptionSettingsCollectionOutputWithContext(context.Context) EncryptionSettingsCollectionOutput
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionArgs struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings EncryptionSettingsElementArrayInput `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion pulumi.StringPtrInput `pulumi:"encryptionSettingsVersion"`
}

func (EncryptionSettingsCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return i.ToEncryptionSettingsCollectionOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput)
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsCollectionArgs) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionOutput).ToEncryptionSettingsCollectionPtrOutputWithContext(ctx)
}

// EncryptionSettingsCollectionPtrInput is an input type that accepts EncryptionSettingsCollectionArgs, EncryptionSettingsCollectionPtr and EncryptionSettingsCollectionPtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsCollectionPtrInput` via:
//
//	        EncryptionSettingsCollectionArgs{...}
//
//	or:
//
//	        nil
type EncryptionSettingsCollectionPtrInput interface {
	pulumi.Input

	ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput
	ToEncryptionSettingsCollectionPtrOutputWithContext(context.Context) EncryptionSettingsCollectionPtrOutput
}

type encryptionSettingsCollectionPtrType EncryptionSettingsCollectionArgs

func EncryptionSettingsCollectionPtr(v *EncryptionSettingsCollectionArgs) EncryptionSettingsCollectionPtrInput {
	return (*encryptionSettingsCollectionPtrType)(v)
}

func (*encryptionSettingsCollectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return i.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsCollectionPtrType) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsCollectionPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollection)(nil)).Elem()
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionOutput() EncryptionSettingsCollectionOutput {
	return o
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionOutputWithContext(ctx context.Context) EncryptionSettingsCollectionOutput {
	return o
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return o.ToEncryptionSettingsCollectionPtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsCollectionOutput) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionSettingsCollection) *EncryptionSettingsCollection {
		return &v
	}).(EncryptionSettingsCollectionPtrOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionOutput) EncryptionSettings() EncryptionSettingsElementArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) []EncryptionSettingsElement { return v.EncryptionSettings }).(EncryptionSettingsElementArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollection) *string { return v.EncryptionSettingsVersion }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsCollectionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollection)(nil)).Elem()
}

func (o EncryptionSettingsCollectionPtrOutput) ToEncryptionSettingsCollectionPtrOutput() EncryptionSettingsCollectionPtrOutput {
	return o
}

func (o EncryptionSettingsCollectionPtrOutput) ToEncryptionSettingsCollectionPtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionPtrOutput {
	return o
}

func (o EncryptionSettingsCollectionPtrOutput) Elem() EncryptionSettingsCollectionOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) EncryptionSettingsCollection {
		if v != nil {
			return *v
		}
		var ret EncryptionSettingsCollection
		return ret
	}).(EncryptionSettingsCollectionOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionPtrOutput) EncryptionSettings() EncryptionSettingsElementArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) []EncryptionSettingsElement {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionPtrOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollection) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsVersion
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponse struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled bool `pulumi:"enabled"`
	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElementResponse `pulumi:"encryptionSettings"`
	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
	EncryptionSettingsVersion *string `pulumi:"encryptionSettingsVersion"`
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollectionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutput() EncryptionSettingsCollectionResponseOutput {
	return o
}

func (o EncryptionSettingsCollectionResponseOutput) ToEncryptionSettingsCollectionResponseOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponseOutput {
	return o
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionResponseOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsCollectionResponse) *string { return v.EncryptionSettingsVersion }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsCollectionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsCollectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsCollectionResponse)(nil)).Elem()
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutput() EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) ToEncryptionSettingsCollectionResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsCollectionResponsePtrOutput {
	return o
}

func (o EncryptionSettingsCollectionResponsePtrOutput) Elem() EncryptionSettingsCollectionResponseOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) EncryptionSettingsCollectionResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionSettingsCollectionResponse
		return ret
	}).(EncryptionSettingsCollectionResponseOutput)
}

// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
func (o EncryptionSettingsCollectionResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A collection of encryption settings, one for each disk volume.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettings() EncryptionSettingsElementResponseArrayOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) []EncryptionSettingsElementResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(EncryptionSettingsElementResponseArrayOutput)
}

// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
func (o EncryptionSettingsCollectionResponsePtrOutput) EncryptionSettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsCollectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionSettingsVersion
	}).(pulumi.StringPtrOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference `pulumi:"keyEncryptionKey"`
}

// EncryptionSettingsElementInput is an input type that accepts EncryptionSettingsElementArgs and EncryptionSettingsElementOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementInput` via:
//
//	EncryptionSettingsElementArgs{...}
type EncryptionSettingsElementInput interface {
	pulumi.Input

	ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput
	ToEncryptionSettingsElementOutputWithContext(context.Context) EncryptionSettingsElementOutput
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementArgs struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey KeyVaultAndSecretReferencePtrInput `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey KeyVaultAndKeyReferencePtrInput `pulumi:"keyEncryptionKey"`
}

func (EncryptionSettingsElementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return i.ToEncryptionSettingsElementOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArgs) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementOutput)
}

// EncryptionSettingsElementArrayInput is an input type that accepts EncryptionSettingsElementArray and EncryptionSettingsElementArrayOutput values.
// You can construct a concrete instance of `EncryptionSettingsElementArrayInput` via:
//
//	EncryptionSettingsElementArray{ EncryptionSettingsElementArgs{...} }
type EncryptionSettingsElementArrayInput interface {
	pulumi.Input

	ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput
	ToEncryptionSettingsElementArrayOutputWithContext(context.Context) EncryptionSettingsElementArrayOutput
}

type EncryptionSettingsElementArray []EncryptionSettingsElementInput

func (EncryptionSettingsElementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return i.ToEncryptionSettingsElementArrayOutputWithContext(context.Background())
}

func (i EncryptionSettingsElementArray) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsElementArrayOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElement)(nil)).Elem()
}

func (o EncryptionSettingsElementOutput) ToEncryptionSettingsElementOutput() EncryptionSettingsElementOutput {
	return o
}

func (o EncryptionSettingsElementOutput) ToEncryptionSettingsElementOutputWithContext(ctx context.Context) EncryptionSettingsElementOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementOutput) DiskEncryptionKey() KeyVaultAndSecretReferencePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElement) *KeyVaultAndSecretReference { return v.DiskEncryptionKey }).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementOutput) KeyEncryptionKey() KeyVaultAndKeyReferencePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElement) *KeyVaultAndKeyReference { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferencePtrOutput)
}

type EncryptionSettingsElementArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElement)(nil)).Elem()
}

func (o EncryptionSettingsElementArrayOutput) ToEncryptionSettingsElementArrayOutput() EncryptionSettingsElementArrayOutput {
	return o
}

func (o EncryptionSettingsElementArrayOutput) ToEncryptionSettingsElementArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementArrayOutput {
	return o
}

func (o EncryptionSettingsElementArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElement {
		return vs[0].([]EncryptionSettingsElement)[vs[1].(int)]
	}).(EncryptionSettingsElementOutput)
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponse struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReferenceResponse `pulumi:"diskEncryptionKey"`
	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReferenceResponse `pulumi:"keyEncryptionKey"`
}

// Encryption settings for one disk volume.
type EncryptionSettingsElementResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutput() EncryptionSettingsElementResponseOutput {
	return o
}

func (o EncryptionSettingsElementResponseOutput) ToEncryptionSettingsElementResponseOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseOutput {
	return o
}

// Key Vault Secret Url and vault id of the disk encryption key
func (o EncryptionSettingsElementResponseOutput) DiskEncryptionKey() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndSecretReferenceResponse {
		return v.DiskEncryptionKey
	}).(KeyVaultAndSecretReferenceResponsePtrOutput)
}

// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
func (o EncryptionSettingsElementResponseOutput) KeyEncryptionKey() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o.ApplyT(func(v EncryptionSettingsElementResponse) *KeyVaultAndKeyReferenceResponse { return v.KeyEncryptionKey }).(KeyVaultAndKeyReferenceResponsePtrOutput)
}

type EncryptionSettingsElementResponseArrayOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionSettingsElementResponse)(nil)).Elem()
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutput() EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) ToEncryptionSettingsElementResponseArrayOutputWithContext(ctx context.Context) EncryptionSettingsElementResponseArrayOutput {
	return o
}

func (o EncryptionSettingsElementResponseArrayOutput) Index(i pulumi.IntInput) EncryptionSettingsElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionSettingsElementResponse {
		return vs[0].([]EncryptionSettingsElementResponse)[vs[1].(int)]
	}).(EncryptionSettingsElementResponseOutput)
}

// Specifies eventGridAndResourceGraph related Scheduled Event related configurations.
type EventGridAndResourceGraph struct {
	// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
	Enable *bool `pulumi:"enable"`
}

// EventGridAndResourceGraphInput is an input type that accepts EventGridAndResourceGraphArgs and EventGridAndResourceGraphOutput values.
// You can construct a concrete instance of `EventGridAndResourceGraphInput` via:
//
//	EventGridAndResourceGraphArgs{...}
type EventGridAndResourceGraphInput interface {
	pulumi.Input

	ToEventGridAndResourceGraphOutput() EventGridAndResourceGraphOutput
	ToEventGridAndResourceGraphOutputWithContext(context.Context) EventGridAndResourceGraphOutput
}

// Specifies eventGridAndResourceGraph related Scheduled Event related configurations.
type EventGridAndResourceGraphArgs struct {
	// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
}

func (EventGridAndResourceGraphArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridAndResourceGraph)(nil)).Elem()
}

func (i EventGridAndResourceGraphArgs) ToEventGridAndResourceGraphOutput() EventGridAndResourceGraphOutput {
	return i.ToEventGridAndResourceGraphOutputWithContext(context.Background())
}

func (i EventGridAndResourceGraphArgs) ToEventGridAndResourceGraphOutputWithContext(ctx context.Context) EventGridAndResourceGraphOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridAndResourceGraphOutput)
}

func (i EventGridAndResourceGraphArgs) ToEventGridAndResourceGraphPtrOutput() EventGridAndResourceGraphPtrOutput {
	return i.ToEventGridAndResourceGraphPtrOutputWithContext(context.Background())
}

func (i EventGridAndResourceGraphArgs) ToEventGridAndResourceGraphPtrOutputWithContext(ctx context.Context) EventGridAndResourceGraphPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridAndResourceGraphOutput).ToEventGridAndResourceGraphPtrOutputWithContext(ctx)
}

// EventGridAndResourceGraphPtrInput is an input type that accepts EventGridAndResourceGraphArgs, EventGridAndResourceGraphPtr and EventGridAndResourceGraphPtrOutput values.
// You can construct a concrete instance of `EventGridAndResourceGraphPtrInput` via:
//
//	        EventGridAndResourceGraphArgs{...}
//
//	or:
//
//	        nil
type EventGridAndResourceGraphPtrInput interface {
	pulumi.Input

	ToEventGridAndResourceGraphPtrOutput() EventGridAndResourceGraphPtrOutput
	ToEventGridAndResourceGraphPtrOutputWithContext(context.Context) EventGridAndResourceGraphPtrOutput
}

type eventGridAndResourceGraphPtrType EventGridAndResourceGraphArgs

func EventGridAndResourceGraphPtr(v *EventGridAndResourceGraphArgs) EventGridAndResourceGraphPtrInput {
	return (*eventGridAndResourceGraphPtrType)(v)
}

func (*eventGridAndResourceGraphPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridAndResourceGraph)(nil)).Elem()
}

func (i *eventGridAndResourceGraphPtrType) ToEventGridAndResourceGraphPtrOutput() EventGridAndResourceGraphPtrOutput {
	return i.ToEventGridAndResourceGraphPtrOutputWithContext(context.Background())
}

func (i *eventGridAndResourceGraphPtrType) ToEventGridAndResourceGraphPtrOutputWithContext(ctx context.Context) EventGridAndResourceGraphPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridAndResourceGraphPtrOutput)
}

// Specifies eventGridAndResourceGraph related Scheduled Event related configurations.
type EventGridAndResourceGraphOutput struct{ *pulumi.OutputState }

func (EventGridAndResourceGraphOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridAndResourceGraph)(nil)).Elem()
}

func (o EventGridAndResourceGraphOutput) ToEventGridAndResourceGraphOutput() EventGridAndResourceGraphOutput {
	return o
}

func (o EventGridAndResourceGraphOutput) ToEventGridAndResourceGraphOutputWithContext(ctx context.Context) EventGridAndResourceGraphOutput {
	return o
}

func (o EventGridAndResourceGraphOutput) ToEventGridAndResourceGraphPtrOutput() EventGridAndResourceGraphPtrOutput {
	return o.ToEventGridAndResourceGraphPtrOutputWithContext(context.Background())
}

func (o EventGridAndResourceGraphOutput) ToEventGridAndResourceGraphPtrOutputWithContext(ctx context.Context) EventGridAndResourceGraphPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGridAndResourceGraph) *EventGridAndResourceGraph {
		return &v
	}).(EventGridAndResourceGraphPtrOutput)
}

// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
func (o EventGridAndResourceGraphOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventGridAndResourceGraph) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type EventGridAndResourceGraphPtrOutput struct{ *pulumi.OutputState }

func (EventGridAndResourceGraphPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridAndResourceGraph)(nil)).Elem()
}

func (o EventGridAndResourceGraphPtrOutput) ToEventGridAndResourceGraphPtrOutput() EventGridAndResourceGraphPtrOutput {
	return o
}

func (o EventGridAndResourceGraphPtrOutput) ToEventGridAndResourceGraphPtrOutputWithContext(ctx context.Context) EventGridAndResourceGraphPtrOutput {
	return o
}

func (o EventGridAndResourceGraphPtrOutput) Elem() EventGridAndResourceGraphOutput {
	return o.ApplyT(func(v *EventGridAndResourceGraph) EventGridAndResourceGraph {
		if v != nil {
			return *v
		}
		var ret EventGridAndResourceGraph
		return ret
	}).(EventGridAndResourceGraphOutput)
}

// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
func (o EventGridAndResourceGraphPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventGridAndResourceGraph) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Specifies eventGridAndResourceGraph related Scheduled Event related configurations.
type EventGridAndResourceGraphResponse struct {
	// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
	Enable *bool `pulumi:"enable"`
}

// Specifies eventGridAndResourceGraph related Scheduled Event related configurations.
type EventGridAndResourceGraphResponseOutput struct{ *pulumi.OutputState }

func (EventGridAndResourceGraphResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridAndResourceGraphResponse)(nil)).Elem()
}

func (o EventGridAndResourceGraphResponseOutput) ToEventGridAndResourceGraphResponseOutput() EventGridAndResourceGraphResponseOutput {
	return o
}

func (o EventGridAndResourceGraphResponseOutput) ToEventGridAndResourceGraphResponseOutputWithContext(ctx context.Context) EventGridAndResourceGraphResponseOutput {
	return o
}

// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
func (o EventGridAndResourceGraphResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventGridAndResourceGraphResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type EventGridAndResourceGraphResponsePtrOutput struct{ *pulumi.OutputState }

func (EventGridAndResourceGraphResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridAndResourceGraphResponse)(nil)).Elem()
}

func (o EventGridAndResourceGraphResponsePtrOutput) ToEventGridAndResourceGraphResponsePtrOutput() EventGridAndResourceGraphResponsePtrOutput {
	return o
}

func (o EventGridAndResourceGraphResponsePtrOutput) ToEventGridAndResourceGraphResponsePtrOutputWithContext(ctx context.Context) EventGridAndResourceGraphResponsePtrOutput {
	return o
}

func (o EventGridAndResourceGraphResponsePtrOutput) Elem() EventGridAndResourceGraphResponseOutput {
	return o.ApplyT(func(v *EventGridAndResourceGraphResponse) EventGridAndResourceGraphResponse {
		if v != nil {
			return *v
		}
		var ret EventGridAndResourceGraphResponse
		return ret
	}).(EventGridAndResourceGraphResponseOutput)
}

// Specifies if event grid and resource graph is enabled for Scheduled event related configurations.
func (o EventGridAndResourceGraphResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventGridAndResourceGraphResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This is the executed Validation.
type ExecutedValidationResponse struct {
	// This property specifies the starting timestamp.
	ExecutionTime *string `pulumi:"executionTime"`
	// This property specifies the status of the validationProfile of the image version.
	Status *string `pulumi:"status"`
	// This property specifies the type of image version validation.
	Type *string `pulumi:"type"`
	// This property specifies the valid version of the validation.
	Version *string `pulumi:"version"`
}

// This is the executed Validation.
type ExecutedValidationResponseOutput struct{ *pulumi.OutputState }

func (ExecutedValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutedValidationResponse)(nil)).Elem()
}

func (o ExecutedValidationResponseOutput) ToExecutedValidationResponseOutput() ExecutedValidationResponseOutput {
	return o
}

func (o ExecutedValidationResponseOutput) ToExecutedValidationResponseOutputWithContext(ctx context.Context) ExecutedValidationResponseOutput {
	return o
}

// This property specifies the starting timestamp.
func (o ExecutedValidationResponseOutput) ExecutionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutedValidationResponse) *string { return v.ExecutionTime }).(pulumi.StringPtrOutput)
}

// This property specifies the status of the validationProfile of the image version.
func (o ExecutedValidationResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutedValidationResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// This property specifies the type of image version validation.
func (o ExecutedValidationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutedValidationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// This property specifies the valid version of the validation.
func (o ExecutedValidationResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutedValidationResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ExecutedValidationResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutedValidationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutedValidationResponse)(nil)).Elem()
}

func (o ExecutedValidationResponseArrayOutput) ToExecutedValidationResponseArrayOutput() ExecutedValidationResponseArrayOutput {
	return o
}

func (o ExecutedValidationResponseArrayOutput) ToExecutedValidationResponseArrayOutputWithContext(ctx context.Context) ExecutedValidationResponseArrayOutput {
	return o
}

func (o ExecutedValidationResponseArrayOutput) Index(i pulumi.IntInput) ExecutedValidationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutedValidationResponse {
		return vs[0].([]ExecutedValidationResponse)[vs[1].(int)]
	}).(ExecutedValidationResponseOutput)
}

// The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The complex type of the extended location.
type ExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// The name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The name of the extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationResponse struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// The complex type of the extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The name of the extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a cloud service Extension.
type Extension struct {
	// The name of the extension.
	Name *string `pulumi:"name"`
	// Extension Properties.
	Properties *CloudServiceExtensionProperties `pulumi:"properties"`
}

// ExtensionInput is an input type that accepts ExtensionArgs and ExtensionOutput values.
// You can construct a concrete instance of `ExtensionInput` via:
//
//	ExtensionArgs{...}
type ExtensionInput interface {
	pulumi.Input

	ToExtensionOutput() ExtensionOutput
	ToExtensionOutputWithContext(context.Context) ExtensionOutput
}

// Describes a cloud service Extension.
type ExtensionArgs struct {
	// The name of the extension.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Extension Properties.
	Properties CloudServiceExtensionPropertiesPtrInput `pulumi:"properties"`
}

func (ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Extension)(nil)).Elem()
}

func (i ExtensionArgs) ToExtensionOutput() ExtensionOutput {
	return i.ToExtensionOutputWithContext(context.Background())
}

func (i ExtensionArgs) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionOutput)
}

// ExtensionArrayInput is an input type that accepts ExtensionArray and ExtensionArrayOutput values.
// You can construct a concrete instance of `ExtensionArrayInput` via:
//
//	ExtensionArray{ ExtensionArgs{...} }
type ExtensionArrayInput interface {
	pulumi.Input

	ToExtensionArrayOutput() ExtensionArrayOutput
	ToExtensionArrayOutputWithContext(context.Context) ExtensionArrayOutput
}

type ExtensionArray []ExtensionInput

func (ExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Extension)(nil)).Elem()
}

func (i ExtensionArray) ToExtensionArrayOutput() ExtensionArrayOutput {
	return i.ToExtensionArrayOutputWithContext(context.Background())
}

func (i ExtensionArray) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionArrayOutput)
}

// Describes a cloud service Extension.
type ExtensionOutput struct{ *pulumi.OutputState }

func (ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Extension)(nil)).Elem()
}

func (o ExtensionOutput) ToExtensionOutput() ExtensionOutput {
	return o
}

func (o ExtensionOutput) ToExtensionOutputWithContext(ctx context.Context) ExtensionOutput {
	return o
}

// The name of the extension.
func (o ExtensionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Extension) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Extension Properties.
func (o ExtensionOutput) Properties() CloudServiceExtensionPropertiesPtrOutput {
	return o.ApplyT(func(v Extension) *CloudServiceExtensionProperties { return v.Properties }).(CloudServiceExtensionPropertiesPtrOutput)
}

type ExtensionArrayOutput struct{ *pulumi.OutputState }

func (ExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Extension)(nil)).Elem()
}

func (o ExtensionArrayOutput) ToExtensionArrayOutput() ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) ToExtensionArrayOutputWithContext(ctx context.Context) ExtensionArrayOutput {
	return o
}

func (o ExtensionArrayOutput) Index(i pulumi.IntInput) ExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Extension {
		return vs[0].([]Extension)[vs[1].(int)]
	}).(ExtensionOutput)
}

// Describes a cloud service Extension.
type ExtensionResponse struct {
	// The name of the extension.
	Name *string `pulumi:"name"`
	// Extension Properties.
	Properties *CloudServiceExtensionPropertiesResponse `pulumi:"properties"`
}

// Describes a cloud service Extension.
type ExtensionResponseOutput struct{ *pulumi.OutputState }

func (ExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionResponse)(nil)).Elem()
}

func (o ExtensionResponseOutput) ToExtensionResponseOutput() ExtensionResponseOutput {
	return o
}

func (o ExtensionResponseOutput) ToExtensionResponseOutputWithContext(ctx context.Context) ExtensionResponseOutput {
	return o
}

// The name of the extension.
func (o ExtensionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Extension Properties.
func (o ExtensionResponseOutput) Properties() CloudServiceExtensionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ExtensionResponse) *CloudServiceExtensionPropertiesResponse { return v.Properties }).(CloudServiceExtensionPropertiesResponsePtrOutput)
}

type ExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionResponse)(nil)).Elem()
}

func (o ExtensionResponseArrayOutput) ToExtensionResponseArrayOutput() ExtensionResponseArrayOutput {
	return o
}

func (o ExtensionResponseArrayOutput) ToExtensionResponseArrayOutputWithContext(ctx context.Context) ExtensionResponseArrayOutput {
	return o
}

func (o ExtensionResponseArrayOutput) Index(i pulumi.IntInput) ExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionResponse {
		return vs[0].([]ExtensionResponse)[vs[1].(int)]
	}).(ExtensionResponseOutput)
}

// A custom action that can be performed with a Gallery Application Version.
type GalleryApplicationCustomAction struct {
	// Description to help the users understand what this custom action does.
	Description *string `pulumi:"description"`
	// The name of the custom action.  Must be unique within the Gallery Application Version.
	Name string `pulumi:"name"`
	// The parameters that this custom action uses
	Parameters []GalleryApplicationCustomActionParameter `pulumi:"parameters"`
	// The script to run when executing this custom action.
	Script string `pulumi:"script"`
}

// GalleryApplicationCustomActionInput is an input type that accepts GalleryApplicationCustomActionArgs and GalleryApplicationCustomActionOutput values.
// You can construct a concrete instance of `GalleryApplicationCustomActionInput` via:
//
//	GalleryApplicationCustomActionArgs{...}
type GalleryApplicationCustomActionInput interface {
	pulumi.Input

	ToGalleryApplicationCustomActionOutput() GalleryApplicationCustomActionOutput
	ToGalleryApplicationCustomActionOutputWithContext(context.Context) GalleryApplicationCustomActionOutput
}

// A custom action that can be performed with a Gallery Application Version.
type GalleryApplicationCustomActionArgs struct {
	// Description to help the users understand what this custom action does.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the custom action.  Must be unique within the Gallery Application Version.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters that this custom action uses
	Parameters GalleryApplicationCustomActionParameterArrayInput `pulumi:"parameters"`
	// The script to run when executing this custom action.
	Script pulumi.StringInput `pulumi:"script"`
}

func (GalleryApplicationCustomActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationCustomAction)(nil)).Elem()
}

func (i GalleryApplicationCustomActionArgs) ToGalleryApplicationCustomActionOutput() GalleryApplicationCustomActionOutput {
	return i.ToGalleryApplicationCustomActionOutputWithContext(context.Background())
}

func (i GalleryApplicationCustomActionArgs) ToGalleryApplicationCustomActionOutputWithContext(ctx context.Context) GalleryApplicationCustomActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationCustomActionOutput)
}

// GalleryApplicationCustomActionArrayInput is an input type that accepts GalleryApplicationCustomActionArray and GalleryApplicationCustomActionArrayOutput values.
// You can construct a concrete instance of `GalleryApplicationCustomActionArrayInput` via:
//
//	GalleryApplicationCustomActionArray{ GalleryApplicationCustomActionArgs{...} }
type GalleryApplicationCustomActionArrayInput interface {
	pulumi.Input

	ToGalleryApplicationCustomActionArrayOutput() GalleryApplicationCustomActionArrayOutput
	ToGalleryApplicationCustomActionArrayOutputWithContext(context.Context) GalleryApplicationCustomActionArrayOutput
}

type GalleryApplicationCustomActionArray []GalleryApplicationCustomActionInput

func (GalleryApplicationCustomActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryApplicationCustomAction)(nil)).Elem()
}

func (i GalleryApplicationCustomActionArray) ToGalleryApplicationCustomActionArrayOutput() GalleryApplicationCustomActionArrayOutput {
	return i.ToGalleryApplicationCustomActionArrayOutputWithContext(context.Background())
}

func (i GalleryApplicationCustomActionArray) ToGalleryApplicationCustomActionArrayOutputWithContext(ctx context.Context) GalleryApplicationCustomActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationCustomActionArrayOutput)
}

// A custom action that can be performed with a Gallery Application Version.
type GalleryApplicationCustomActionOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationCustomAction)(nil)).Elem()
}

func (o GalleryApplicationCustomActionOutput) ToGalleryApplicationCustomActionOutput() GalleryApplicationCustomActionOutput {
	return o
}

func (o GalleryApplicationCustomActionOutput) ToGalleryApplicationCustomActionOutputWithContext(ctx context.Context) GalleryApplicationCustomActionOutput {
	return o
}

// Description to help the users understand what this custom action does.
func (o GalleryApplicationCustomActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomAction) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the custom action.  Must be unique within the Gallery Application Version.
func (o GalleryApplicationCustomActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationCustomAction) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters that this custom action uses
func (o GalleryApplicationCustomActionOutput) Parameters() GalleryApplicationCustomActionParameterArrayOutput {
	return o.ApplyT(func(v GalleryApplicationCustomAction) []GalleryApplicationCustomActionParameter { return v.Parameters }).(GalleryApplicationCustomActionParameterArrayOutput)
}

// The script to run when executing this custom action.
func (o GalleryApplicationCustomActionOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationCustomAction) string { return v.Script }).(pulumi.StringOutput)
}

type GalleryApplicationCustomActionArrayOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryApplicationCustomAction)(nil)).Elem()
}

func (o GalleryApplicationCustomActionArrayOutput) ToGalleryApplicationCustomActionArrayOutput() GalleryApplicationCustomActionArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionArrayOutput) ToGalleryApplicationCustomActionArrayOutputWithContext(ctx context.Context) GalleryApplicationCustomActionArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionArrayOutput) Index(i pulumi.IntInput) GalleryApplicationCustomActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryApplicationCustomAction {
		return vs[0].([]GalleryApplicationCustomAction)[vs[1].(int)]
	}).(GalleryApplicationCustomActionOutput)
}

// The definition of a parameter that can be passed to a custom action of a Gallery Application Version.
type GalleryApplicationCustomActionParameter struct {
	// The default value of the parameter.  Only applies to string types
	DefaultValue *string `pulumi:"defaultValue"`
	// A description to help users understand what this parameter means
	Description *string `pulumi:"description"`
	// The name of the custom action.  Must be unique within the Gallery Application Version.
	Name string `pulumi:"name"`
	// Indicates whether this parameter must be passed when running the custom action.
	Required *bool `pulumi:"required"`
	// Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob
	Type *GalleryApplicationCustomActionParameterType `pulumi:"type"`
}

// GalleryApplicationCustomActionParameterInput is an input type that accepts GalleryApplicationCustomActionParameterArgs and GalleryApplicationCustomActionParameterOutput values.
// You can construct a concrete instance of `GalleryApplicationCustomActionParameterInput` via:
//
//	GalleryApplicationCustomActionParameterArgs{...}
type GalleryApplicationCustomActionParameterInput interface {
	pulumi.Input

	ToGalleryApplicationCustomActionParameterOutput() GalleryApplicationCustomActionParameterOutput
	ToGalleryApplicationCustomActionParameterOutputWithContext(context.Context) GalleryApplicationCustomActionParameterOutput
}

// The definition of a parameter that can be passed to a custom action of a Gallery Application Version.
type GalleryApplicationCustomActionParameterArgs struct {
	// The default value of the parameter.  Only applies to string types
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// A description to help users understand what this parameter means
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the custom action.  Must be unique within the Gallery Application Version.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether this parameter must be passed when running the custom action.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob
	Type GalleryApplicationCustomActionParameterTypePtrInput `pulumi:"type"`
}

func (GalleryApplicationCustomActionParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationCustomActionParameter)(nil)).Elem()
}

func (i GalleryApplicationCustomActionParameterArgs) ToGalleryApplicationCustomActionParameterOutput() GalleryApplicationCustomActionParameterOutput {
	return i.ToGalleryApplicationCustomActionParameterOutputWithContext(context.Background())
}

func (i GalleryApplicationCustomActionParameterArgs) ToGalleryApplicationCustomActionParameterOutputWithContext(ctx context.Context) GalleryApplicationCustomActionParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationCustomActionParameterOutput)
}

// GalleryApplicationCustomActionParameterArrayInput is an input type that accepts GalleryApplicationCustomActionParameterArray and GalleryApplicationCustomActionParameterArrayOutput values.
// You can construct a concrete instance of `GalleryApplicationCustomActionParameterArrayInput` via:
//
//	GalleryApplicationCustomActionParameterArray{ GalleryApplicationCustomActionParameterArgs{...} }
type GalleryApplicationCustomActionParameterArrayInput interface {
	pulumi.Input

	ToGalleryApplicationCustomActionParameterArrayOutput() GalleryApplicationCustomActionParameterArrayOutput
	ToGalleryApplicationCustomActionParameterArrayOutputWithContext(context.Context) GalleryApplicationCustomActionParameterArrayOutput
}

type GalleryApplicationCustomActionParameterArray []GalleryApplicationCustomActionParameterInput

func (GalleryApplicationCustomActionParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryApplicationCustomActionParameter)(nil)).Elem()
}

func (i GalleryApplicationCustomActionParameterArray) ToGalleryApplicationCustomActionParameterArrayOutput() GalleryApplicationCustomActionParameterArrayOutput {
	return i.ToGalleryApplicationCustomActionParameterArrayOutputWithContext(context.Background())
}

func (i GalleryApplicationCustomActionParameterArray) ToGalleryApplicationCustomActionParameterArrayOutputWithContext(ctx context.Context) GalleryApplicationCustomActionParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationCustomActionParameterArrayOutput)
}

// The definition of a parameter that can be passed to a custom action of a Gallery Application Version.
type GalleryApplicationCustomActionParameterOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationCustomActionParameter)(nil)).Elem()
}

func (o GalleryApplicationCustomActionParameterOutput) ToGalleryApplicationCustomActionParameterOutput() GalleryApplicationCustomActionParameterOutput {
	return o
}

func (o GalleryApplicationCustomActionParameterOutput) ToGalleryApplicationCustomActionParameterOutputWithContext(ctx context.Context) GalleryApplicationCustomActionParameterOutput {
	return o
}

// The default value of the parameter.  Only applies to string types
func (o GalleryApplicationCustomActionParameterOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameter) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// A description to help users understand what this parameter means
func (o GalleryApplicationCustomActionParameterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameter) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the custom action.  Must be unique within the Gallery Application Version.
func (o GalleryApplicationCustomActionParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether this parameter must be passed when running the custom action.
func (o GalleryApplicationCustomActionParameterOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameter) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob
func (o GalleryApplicationCustomActionParameterOutput) Type() GalleryApplicationCustomActionParameterTypePtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameter) *GalleryApplicationCustomActionParameterType {
		return v.Type
	}).(GalleryApplicationCustomActionParameterTypePtrOutput)
}

type GalleryApplicationCustomActionParameterArrayOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryApplicationCustomActionParameter)(nil)).Elem()
}

func (o GalleryApplicationCustomActionParameterArrayOutput) ToGalleryApplicationCustomActionParameterArrayOutput() GalleryApplicationCustomActionParameterArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionParameterArrayOutput) ToGalleryApplicationCustomActionParameterArrayOutputWithContext(ctx context.Context) GalleryApplicationCustomActionParameterArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionParameterArrayOutput) Index(i pulumi.IntInput) GalleryApplicationCustomActionParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryApplicationCustomActionParameter {
		return vs[0].([]GalleryApplicationCustomActionParameter)[vs[1].(int)]
	}).(GalleryApplicationCustomActionParameterOutput)
}

// The definition of a parameter that can be passed to a custom action of a Gallery Application Version.
type GalleryApplicationCustomActionParameterResponse struct {
	// The default value of the parameter.  Only applies to string types
	DefaultValue *string `pulumi:"defaultValue"`
	// A description to help users understand what this parameter means
	Description *string `pulumi:"description"`
	// The name of the custom action.  Must be unique within the Gallery Application Version.
	Name string `pulumi:"name"`
	// Indicates whether this parameter must be passed when running the custom action.
	Required *bool `pulumi:"required"`
	// Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob
	Type *string `pulumi:"type"`
}

// The definition of a parameter that can be passed to a custom action of a Gallery Application Version.
type GalleryApplicationCustomActionParameterResponseOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationCustomActionParameterResponse)(nil)).Elem()
}

func (o GalleryApplicationCustomActionParameterResponseOutput) ToGalleryApplicationCustomActionParameterResponseOutput() GalleryApplicationCustomActionParameterResponseOutput {
	return o
}

func (o GalleryApplicationCustomActionParameterResponseOutput) ToGalleryApplicationCustomActionParameterResponseOutputWithContext(ctx context.Context) GalleryApplicationCustomActionParameterResponseOutput {
	return o
}

// The default value of the parameter.  Only applies to string types
func (o GalleryApplicationCustomActionParameterResponseOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameterResponse) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// A description to help users understand what this parameter means
func (o GalleryApplicationCustomActionParameterResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameterResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the custom action.  Must be unique within the Gallery Application Version.
func (o GalleryApplicationCustomActionParameterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameterResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether this parameter must be passed when running the custom action.
func (o GalleryApplicationCustomActionParameterResponseOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameterResponse) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob
func (o GalleryApplicationCustomActionParameterResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionParameterResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GalleryApplicationCustomActionParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryApplicationCustomActionParameterResponse)(nil)).Elem()
}

func (o GalleryApplicationCustomActionParameterResponseArrayOutput) ToGalleryApplicationCustomActionParameterResponseArrayOutput() GalleryApplicationCustomActionParameterResponseArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionParameterResponseArrayOutput) ToGalleryApplicationCustomActionParameterResponseArrayOutputWithContext(ctx context.Context) GalleryApplicationCustomActionParameterResponseArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionParameterResponseArrayOutput) Index(i pulumi.IntInput) GalleryApplicationCustomActionParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryApplicationCustomActionParameterResponse {
		return vs[0].([]GalleryApplicationCustomActionParameterResponse)[vs[1].(int)]
	}).(GalleryApplicationCustomActionParameterResponseOutput)
}

// A custom action that can be performed with a Gallery Application Version.
type GalleryApplicationCustomActionResponse struct {
	// Description to help the users understand what this custom action does.
	Description *string `pulumi:"description"`
	// The name of the custom action.  Must be unique within the Gallery Application Version.
	Name string `pulumi:"name"`
	// The parameters that this custom action uses
	Parameters []GalleryApplicationCustomActionParameterResponse `pulumi:"parameters"`
	// The script to run when executing this custom action.
	Script string `pulumi:"script"`
}

// A custom action that can be performed with a Gallery Application Version.
type GalleryApplicationCustomActionResponseOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationCustomActionResponse)(nil)).Elem()
}

func (o GalleryApplicationCustomActionResponseOutput) ToGalleryApplicationCustomActionResponseOutput() GalleryApplicationCustomActionResponseOutput {
	return o
}

func (o GalleryApplicationCustomActionResponseOutput) ToGalleryApplicationCustomActionResponseOutputWithContext(ctx context.Context) GalleryApplicationCustomActionResponseOutput {
	return o
}

// Description to help the users understand what this custom action does.
func (o GalleryApplicationCustomActionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the custom action.  Must be unique within the Gallery Application Version.
func (o GalleryApplicationCustomActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters that this custom action uses
func (o GalleryApplicationCustomActionResponseOutput) Parameters() GalleryApplicationCustomActionParameterResponseArrayOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionResponse) []GalleryApplicationCustomActionParameterResponse {
		return v.Parameters
	}).(GalleryApplicationCustomActionParameterResponseArrayOutput)
}

// The script to run when executing this custom action.
func (o GalleryApplicationCustomActionResponseOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationCustomActionResponse) string { return v.Script }).(pulumi.StringOutput)
}

type GalleryApplicationCustomActionResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryApplicationCustomActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryApplicationCustomActionResponse)(nil)).Elem()
}

func (o GalleryApplicationCustomActionResponseArrayOutput) ToGalleryApplicationCustomActionResponseArrayOutput() GalleryApplicationCustomActionResponseArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionResponseArrayOutput) ToGalleryApplicationCustomActionResponseArrayOutputWithContext(ctx context.Context) GalleryApplicationCustomActionResponseArrayOutput {
	return o
}

func (o GalleryApplicationCustomActionResponseArrayOutput) Index(i pulumi.IntInput) GalleryApplicationCustomActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryApplicationCustomActionResponse {
		return vs[0].([]GalleryApplicationCustomActionResponse)[vs[1].(int)]
	}).(GalleryApplicationCustomActionResponseOutput)
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfile struct {
	// Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
	AdvancedSettings map[string]string `pulumi:"advancedSettings"`
	// A list of custom actions that can be performed with this Gallery Application Version.
	CustomActions []GalleryApplicationCustomAction `pulumi:"customActions"`
	// Optional. Whether or not this application reports health.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool               `pulumi:"excludeFromLatest"`
	ManageActions     *UserArtifactManage `pulumi:"manageActions"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode *string `pulumi:"replicationMode"`
	// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
	Settings *UserArtifactSettings `pulumi:"settings"`
	// The source image from which the Image Version is going to be created.
	Source UserArtifactSource `pulumi:"source"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations []GalleryTargetExtendedLocation `pulumi:"targetExtendedLocations"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegion `pulumi:"targetRegions"`
}

// GalleryApplicationVersionPublishingProfileInput is an input type that accepts GalleryApplicationVersionPublishingProfileArgs and GalleryApplicationVersionPublishingProfileOutput values.
// You can construct a concrete instance of `GalleryApplicationVersionPublishingProfileInput` via:
//
//	GalleryApplicationVersionPublishingProfileArgs{...}
type GalleryApplicationVersionPublishingProfileInput interface {
	pulumi.Input

	ToGalleryApplicationVersionPublishingProfileOutput() GalleryApplicationVersionPublishingProfileOutput
	ToGalleryApplicationVersionPublishingProfileOutputWithContext(context.Context) GalleryApplicationVersionPublishingProfileOutput
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileArgs struct {
	// Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
	AdvancedSettings pulumi.StringMapInput `pulumi:"advancedSettings"`
	// A list of custom actions that can be performed with this Gallery Application Version.
	CustomActions GalleryApplicationCustomActionArrayInput `pulumi:"customActions"`
	// Optional. Whether or not this application reports health.
	EnableHealthCheck pulumi.BoolPtrInput `pulumi:"enableHealthCheck"`
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate pulumi.StringPtrInput `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest pulumi.BoolPtrInput        `pulumi:"excludeFromLatest"`
	ManageActions     UserArtifactManagePtrInput `pulumi:"manageActions"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode pulumi.StringPtrInput `pulumi:"replicationMode"`
	// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
	Settings UserArtifactSettingsPtrInput `pulumi:"settings"`
	// The source image from which the Image Version is going to be created.
	Source UserArtifactSourceInput `pulumi:"source"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations GalleryTargetExtendedLocationArrayInput `pulumi:"targetExtendedLocations"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions TargetRegionArrayInput `pulumi:"targetRegions"`
}

func (GalleryApplicationVersionPublishingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionPublishingProfile)(nil)).Elem()
}

func (i GalleryApplicationVersionPublishingProfileArgs) ToGalleryApplicationVersionPublishingProfileOutput() GalleryApplicationVersionPublishingProfileOutput {
	return i.ToGalleryApplicationVersionPublishingProfileOutputWithContext(context.Background())
}

func (i GalleryApplicationVersionPublishingProfileArgs) ToGalleryApplicationVersionPublishingProfileOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionPublishingProfileOutput)
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionPublishingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionPublishingProfile)(nil)).Elem()
}

func (o GalleryApplicationVersionPublishingProfileOutput) ToGalleryApplicationVersionPublishingProfileOutput() GalleryApplicationVersionPublishingProfileOutput {
	return o
}

func (o GalleryApplicationVersionPublishingProfileOutput) ToGalleryApplicationVersionPublishingProfileOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileOutput {
	return o
}

// Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
func (o GalleryApplicationVersionPublishingProfileOutput) AdvancedSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) map[string]string { return v.AdvancedSettings }).(pulumi.StringMapOutput)
}

// A list of custom actions that can be performed with this Gallery Application Version.
func (o GalleryApplicationVersionPublishingProfileOutput) CustomActions() GalleryApplicationCustomActionArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) []GalleryApplicationCustomAction {
		return v.CustomActions
	}).(GalleryApplicationCustomActionArrayOutput)
}

// Optional. Whether or not this application reports health.
func (o GalleryApplicationVersionPublishingProfileOutput) EnableHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *bool { return v.EnableHealthCheck }).(pulumi.BoolPtrOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *string { return v.EndOfLifeDate }).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryApplicationVersionPublishingProfileOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

func (o GalleryApplicationVersionPublishingProfileOutput) ManageActions() UserArtifactManagePtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *UserArtifactManage { return v.ManageActions }).(UserArtifactManagePtrOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
func (o GalleryApplicationVersionPublishingProfileOutput) ReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *string { return v.ReplicationMode }).(pulumi.StringPtrOutput)
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
func (o GalleryApplicationVersionPublishingProfileOutput) Settings() UserArtifactSettingsPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *UserArtifactSettings { return v.Settings }).(UserArtifactSettingsPtrOutput)
}

// The source image from which the Image Version is going to be created.
func (o GalleryApplicationVersionPublishingProfileOutput) Source() UserArtifactSourceOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) UserArtifactSource { return v.Source }).(UserArtifactSourceOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryApplicationVersionPublishingProfileOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileOutput) TargetExtendedLocations() GalleryTargetExtendedLocationArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) []GalleryTargetExtendedLocation {
		return v.TargetExtendedLocations
	}).(GalleryTargetExtendedLocationArrayOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileOutput) TargetRegions() TargetRegionArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfile) []TargetRegion { return v.TargetRegions }).(TargetRegionArrayOutput)
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileResponse struct {
	// Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
	AdvancedSettings map[string]string `pulumi:"advancedSettings"`
	// A list of custom actions that can be performed with this Gallery Application Version.
	CustomActions []GalleryApplicationCustomActionResponse `pulumi:"customActions"`
	// Optional. Whether or not this application reports health.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool                       `pulumi:"excludeFromLatest"`
	ManageActions     *UserArtifactManageResponse `pulumi:"manageActions"`
	// The timestamp for when the gallery image version is published.
	PublishedDate string `pulumi:"publishedDate"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode *string `pulumi:"replicationMode"`
	// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
	Settings *UserArtifactSettingsResponse `pulumi:"settings"`
	// The source image from which the Image Version is going to be created.
	Source UserArtifactSourceResponse `pulumi:"source"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations []GalleryTargetExtendedLocationResponse `pulumi:"targetExtendedLocations"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegionResponse `pulumi:"targetRegions"`
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionPublishingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ToGalleryApplicationVersionPublishingProfileResponseOutput() GalleryApplicationVersionPublishingProfileResponseOutput {
	return o
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ToGalleryApplicationVersionPublishingProfileResponseOutputWithContext(ctx context.Context) GalleryApplicationVersionPublishingProfileResponseOutput {
	return o
}

// Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) AdvancedSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) map[string]string {
		return v.AdvancedSettings
	}).(pulumi.StringMapOutput)
}

// A list of custom actions that can be performed with this Gallery Application Version.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) CustomActions() GalleryApplicationCustomActionResponseArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) []GalleryApplicationCustomActionResponse {
		return v.CustomActions
	}).(GalleryApplicationCustomActionResponseArrayOutput)
}

// Optional. Whether or not this application reports health.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) EnableHealthCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *bool { return v.EnableHealthCheck }).(pulumi.BoolPtrOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *string { return v.EndOfLifeDate }).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

func (o GalleryApplicationVersionPublishingProfileResponseOutput) ManageActions() UserArtifactManageResponsePtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *UserArtifactManageResponse {
		return v.ManageActions
	}).(UserArtifactManageResponsePtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) PublishedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) string { return v.PublishedDate }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) ReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *string { return v.ReplicationMode }).(pulumi.StringPtrOutput)
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) Settings() UserArtifactSettingsResponsePtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *UserArtifactSettingsResponse {
		return v.Settings
	}).(UserArtifactSettingsResponsePtrOutput)
}

// The source image from which the Image Version is going to be created.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) Source() UserArtifactSourceResponseOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) UserArtifactSourceResponse { return v.Source }).(UserArtifactSourceResponseOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) TargetExtendedLocations() GalleryTargetExtendedLocationResponseArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) []GalleryTargetExtendedLocationResponse {
		return v.TargetExtendedLocations
	}).(GalleryTargetExtendedLocationResponseArrayOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryApplicationVersionPublishingProfileResponseOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v GalleryApplicationVersionPublishingProfileResponse) []TargetRegionResponse {
		return v.TargetRegions
	}).(TargetRegionResponseArrayOutput)
}

// The safety profile of the Gallery Application Version.
type GalleryApplicationVersionSafetyProfile struct {
	// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
	AllowDeletionOfReplicatedLocations *bool `pulumi:"allowDeletionOfReplicatedLocations"`
}

// GalleryApplicationVersionSafetyProfileInput is an input type that accepts GalleryApplicationVersionSafetyProfileArgs and GalleryApplicationVersionSafetyProfileOutput values.
// You can construct a concrete instance of `GalleryApplicationVersionSafetyProfileInput` via:
//
//	GalleryApplicationVersionSafetyProfileArgs{...}
type GalleryApplicationVersionSafetyProfileInput interface {
	pulumi.Input

	ToGalleryApplicationVersionSafetyProfileOutput() GalleryApplicationVersionSafetyProfileOutput
	ToGalleryApplicationVersionSafetyProfileOutputWithContext(context.Context) GalleryApplicationVersionSafetyProfileOutput
}

// The safety profile of the Gallery Application Version.
type GalleryApplicationVersionSafetyProfileArgs struct {
	// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
	AllowDeletionOfReplicatedLocations pulumi.BoolPtrInput `pulumi:"allowDeletionOfReplicatedLocations"`
}

func (GalleryApplicationVersionSafetyProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionSafetyProfile)(nil)).Elem()
}

func (i GalleryApplicationVersionSafetyProfileArgs) ToGalleryApplicationVersionSafetyProfileOutput() GalleryApplicationVersionSafetyProfileOutput {
	return i.ToGalleryApplicationVersionSafetyProfileOutputWithContext(context.Background())
}

func (i GalleryApplicationVersionSafetyProfileArgs) ToGalleryApplicationVersionSafetyProfileOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionSafetyProfileOutput)
}

func (i GalleryApplicationVersionSafetyProfileArgs) ToGalleryApplicationVersionSafetyProfilePtrOutput() GalleryApplicationVersionSafetyProfilePtrOutput {
	return i.ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(context.Background())
}

func (i GalleryApplicationVersionSafetyProfileArgs) ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionSafetyProfileOutput).ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(ctx)
}

// GalleryApplicationVersionSafetyProfilePtrInput is an input type that accepts GalleryApplicationVersionSafetyProfileArgs, GalleryApplicationVersionSafetyProfilePtr and GalleryApplicationVersionSafetyProfilePtrOutput values.
// You can construct a concrete instance of `GalleryApplicationVersionSafetyProfilePtrInput` via:
//
//	        GalleryApplicationVersionSafetyProfileArgs{...}
//
//	or:
//
//	        nil
type GalleryApplicationVersionSafetyProfilePtrInput interface {
	pulumi.Input

	ToGalleryApplicationVersionSafetyProfilePtrOutput() GalleryApplicationVersionSafetyProfilePtrOutput
	ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(context.Context) GalleryApplicationVersionSafetyProfilePtrOutput
}

type galleryApplicationVersionSafetyProfilePtrType GalleryApplicationVersionSafetyProfileArgs

func GalleryApplicationVersionSafetyProfilePtr(v *GalleryApplicationVersionSafetyProfileArgs) GalleryApplicationVersionSafetyProfilePtrInput {
	return (*galleryApplicationVersionSafetyProfilePtrType)(v)
}

func (*galleryApplicationVersionSafetyProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryApplicationVersionSafetyProfile)(nil)).Elem()
}

func (i *galleryApplicationVersionSafetyProfilePtrType) ToGalleryApplicationVersionSafetyProfilePtrOutput() GalleryApplicationVersionSafetyProfilePtrOutput {
	return i.ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(context.Background())
}

func (i *galleryApplicationVersionSafetyProfilePtrType) ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryApplicationVersionSafetyProfilePtrOutput)
}

// The safety profile of the Gallery Application Version.
type GalleryApplicationVersionSafetyProfileOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionSafetyProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionSafetyProfile)(nil)).Elem()
}

func (o GalleryApplicationVersionSafetyProfileOutput) ToGalleryApplicationVersionSafetyProfileOutput() GalleryApplicationVersionSafetyProfileOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfileOutput) ToGalleryApplicationVersionSafetyProfileOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfileOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfileOutput) ToGalleryApplicationVersionSafetyProfilePtrOutput() GalleryApplicationVersionSafetyProfilePtrOutput {
	return o.ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(context.Background())
}

func (o GalleryApplicationVersionSafetyProfileOutput) ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryApplicationVersionSafetyProfile) *GalleryApplicationVersionSafetyProfile {
		return &v
	}).(GalleryApplicationVersionSafetyProfilePtrOutput)
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryApplicationVersionSafetyProfileOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionSafetyProfile) *bool { return v.AllowDeletionOfReplicatedLocations }).(pulumi.BoolPtrOutput)
}

type GalleryApplicationVersionSafetyProfilePtrOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionSafetyProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryApplicationVersionSafetyProfile)(nil)).Elem()
}

func (o GalleryApplicationVersionSafetyProfilePtrOutput) ToGalleryApplicationVersionSafetyProfilePtrOutput() GalleryApplicationVersionSafetyProfilePtrOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfilePtrOutput) ToGalleryApplicationVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfilePtrOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfilePtrOutput) Elem() GalleryApplicationVersionSafetyProfileOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionSafetyProfile) GalleryApplicationVersionSafetyProfile {
		if v != nil {
			return *v
		}
		var ret GalleryApplicationVersionSafetyProfile
		return ret
	}).(GalleryApplicationVersionSafetyProfileOutput)
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryApplicationVersionSafetyProfilePtrOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionSafetyProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeletionOfReplicatedLocations
	}).(pulumi.BoolPtrOutput)
}

// The safety profile of the Gallery Application Version.
type GalleryApplicationVersionSafetyProfileResponse struct {
	// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
	AllowDeletionOfReplicatedLocations *bool `pulumi:"allowDeletionOfReplicatedLocations"`
}

// The safety profile of the Gallery Application Version.
type GalleryApplicationVersionSafetyProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionSafetyProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryApplicationVersionSafetyProfileResponse)(nil)).Elem()
}

func (o GalleryApplicationVersionSafetyProfileResponseOutput) ToGalleryApplicationVersionSafetyProfileResponseOutput() GalleryApplicationVersionSafetyProfileResponseOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfileResponseOutput) ToGalleryApplicationVersionSafetyProfileResponseOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfileResponseOutput {
	return o
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryApplicationVersionSafetyProfileResponseOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryApplicationVersionSafetyProfileResponse) *bool {
		return v.AllowDeletionOfReplicatedLocations
	}).(pulumi.BoolPtrOutput)
}

type GalleryApplicationVersionSafetyProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryApplicationVersionSafetyProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryApplicationVersionSafetyProfileResponse)(nil)).Elem()
}

func (o GalleryApplicationVersionSafetyProfileResponsePtrOutput) ToGalleryApplicationVersionSafetyProfileResponsePtrOutput() GalleryApplicationVersionSafetyProfileResponsePtrOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfileResponsePtrOutput) ToGalleryApplicationVersionSafetyProfileResponsePtrOutputWithContext(ctx context.Context) GalleryApplicationVersionSafetyProfileResponsePtrOutput {
	return o
}

func (o GalleryApplicationVersionSafetyProfileResponsePtrOutput) Elem() GalleryApplicationVersionSafetyProfileResponseOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionSafetyProfileResponse) GalleryApplicationVersionSafetyProfileResponse {
		if v != nil {
			return *v
		}
		var ret GalleryApplicationVersionSafetyProfileResponse
		return ret
	}).(GalleryApplicationVersionSafetyProfileResponseOutput)
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryApplicationVersionSafetyProfileResponsePtrOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryApplicationVersionSafetyProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeletionOfReplicatedLocations
	}).(pulumi.BoolPtrOutput)
}

// The source of the gallery artifact version.
type GalleryArtifactVersionFullSource struct {
	// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
	CommunityGalleryImageId *string `pulumi:"communityGalleryImageId"`
	// The id of the gallery artifact version source.
	Id *string `pulumi:"id"`
	// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

// GalleryArtifactVersionFullSourceInput is an input type that accepts GalleryArtifactVersionFullSourceArgs and GalleryArtifactVersionFullSourceOutput values.
// You can construct a concrete instance of `GalleryArtifactVersionFullSourceInput` via:
//
//	GalleryArtifactVersionFullSourceArgs{...}
type GalleryArtifactVersionFullSourceInput interface {
	pulumi.Input

	ToGalleryArtifactVersionFullSourceOutput() GalleryArtifactVersionFullSourceOutput
	ToGalleryArtifactVersionFullSourceOutputWithContext(context.Context) GalleryArtifactVersionFullSourceOutput
}

// The source of the gallery artifact version.
type GalleryArtifactVersionFullSourceArgs struct {
	// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
	CommunityGalleryImageId pulumi.StringPtrInput `pulumi:"communityGalleryImageId"`
	// The id of the gallery artifact version source.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
	VirtualMachineId pulumi.StringPtrInput `pulumi:"virtualMachineId"`
}

func (GalleryArtifactVersionFullSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryArtifactVersionFullSource)(nil)).Elem()
}

func (i GalleryArtifactVersionFullSourceArgs) ToGalleryArtifactVersionFullSourceOutput() GalleryArtifactVersionFullSourceOutput {
	return i.ToGalleryArtifactVersionFullSourceOutputWithContext(context.Background())
}

func (i GalleryArtifactVersionFullSourceArgs) ToGalleryArtifactVersionFullSourceOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArtifactVersionFullSourceOutput)
}

func (i GalleryArtifactVersionFullSourceArgs) ToGalleryArtifactVersionFullSourcePtrOutput() GalleryArtifactVersionFullSourcePtrOutput {
	return i.ToGalleryArtifactVersionFullSourcePtrOutputWithContext(context.Background())
}

func (i GalleryArtifactVersionFullSourceArgs) ToGalleryArtifactVersionFullSourcePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArtifactVersionFullSourceOutput).ToGalleryArtifactVersionFullSourcePtrOutputWithContext(ctx)
}

// GalleryArtifactVersionFullSourcePtrInput is an input type that accepts GalleryArtifactVersionFullSourceArgs, GalleryArtifactVersionFullSourcePtr and GalleryArtifactVersionFullSourcePtrOutput values.
// You can construct a concrete instance of `GalleryArtifactVersionFullSourcePtrInput` via:
//
//	        GalleryArtifactVersionFullSourceArgs{...}
//
//	or:
//
//	        nil
type GalleryArtifactVersionFullSourcePtrInput interface {
	pulumi.Input

	ToGalleryArtifactVersionFullSourcePtrOutput() GalleryArtifactVersionFullSourcePtrOutput
	ToGalleryArtifactVersionFullSourcePtrOutputWithContext(context.Context) GalleryArtifactVersionFullSourcePtrOutput
}

type galleryArtifactVersionFullSourcePtrType GalleryArtifactVersionFullSourceArgs

func GalleryArtifactVersionFullSourcePtr(v *GalleryArtifactVersionFullSourceArgs) GalleryArtifactVersionFullSourcePtrInput {
	return (*galleryArtifactVersionFullSourcePtrType)(v)
}

func (*galleryArtifactVersionFullSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryArtifactVersionFullSource)(nil)).Elem()
}

func (i *galleryArtifactVersionFullSourcePtrType) ToGalleryArtifactVersionFullSourcePtrOutput() GalleryArtifactVersionFullSourcePtrOutput {
	return i.ToGalleryArtifactVersionFullSourcePtrOutputWithContext(context.Background())
}

func (i *galleryArtifactVersionFullSourcePtrType) ToGalleryArtifactVersionFullSourcePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryArtifactVersionFullSourcePtrOutput)
}

// The source of the gallery artifact version.
type GalleryArtifactVersionFullSourceOutput struct{ *pulumi.OutputState }

func (GalleryArtifactVersionFullSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryArtifactVersionFullSource)(nil)).Elem()
}

func (o GalleryArtifactVersionFullSourceOutput) ToGalleryArtifactVersionFullSourceOutput() GalleryArtifactVersionFullSourceOutput {
	return o
}

func (o GalleryArtifactVersionFullSourceOutput) ToGalleryArtifactVersionFullSourceOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourceOutput {
	return o
}

func (o GalleryArtifactVersionFullSourceOutput) ToGalleryArtifactVersionFullSourcePtrOutput() GalleryArtifactVersionFullSourcePtrOutput {
	return o.ToGalleryArtifactVersionFullSourcePtrOutputWithContext(context.Background())
}

func (o GalleryArtifactVersionFullSourceOutput) ToGalleryArtifactVersionFullSourcePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryArtifactVersionFullSource) *GalleryArtifactVersionFullSource {
		return &v
	}).(GalleryArtifactVersionFullSourcePtrOutput)
}

// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
func (o GalleryArtifactVersionFullSourceOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionFullSource) *string { return v.CommunityGalleryImageId }).(pulumi.StringPtrOutput)
}

// The id of the gallery artifact version source.
func (o GalleryArtifactVersionFullSourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionFullSource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
func (o GalleryArtifactVersionFullSourceOutput) VirtualMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionFullSource) *string { return v.VirtualMachineId }).(pulumi.StringPtrOutput)
}

type GalleryArtifactVersionFullSourcePtrOutput struct{ *pulumi.OutputState }

func (GalleryArtifactVersionFullSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryArtifactVersionFullSource)(nil)).Elem()
}

func (o GalleryArtifactVersionFullSourcePtrOutput) ToGalleryArtifactVersionFullSourcePtrOutput() GalleryArtifactVersionFullSourcePtrOutput {
	return o
}

func (o GalleryArtifactVersionFullSourcePtrOutput) ToGalleryArtifactVersionFullSourcePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourcePtrOutput {
	return o
}

func (o GalleryArtifactVersionFullSourcePtrOutput) Elem() GalleryArtifactVersionFullSourceOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSource) GalleryArtifactVersionFullSource {
		if v != nil {
			return *v
		}
		var ret GalleryArtifactVersionFullSource
		return ret
	}).(GalleryArtifactVersionFullSourceOutput)
}

// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
func (o GalleryArtifactVersionFullSourcePtrOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSource) *string {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// The id of the gallery artifact version source.
func (o GalleryArtifactVersionFullSourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
func (o GalleryArtifactVersionFullSourcePtrOutput) VirtualMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSource) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineId
	}).(pulumi.StringPtrOutput)
}

// The source of the gallery artifact version.
type GalleryArtifactVersionFullSourceResponse struct {
	// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
	CommunityGalleryImageId *string `pulumi:"communityGalleryImageId"`
	// The id of the gallery artifact version source.
	Id *string `pulumi:"id"`
	// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}

// The source of the gallery artifact version.
type GalleryArtifactVersionFullSourceResponseOutput struct{ *pulumi.OutputState }

func (GalleryArtifactVersionFullSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryArtifactVersionFullSourceResponse)(nil)).Elem()
}

func (o GalleryArtifactVersionFullSourceResponseOutput) ToGalleryArtifactVersionFullSourceResponseOutput() GalleryArtifactVersionFullSourceResponseOutput {
	return o
}

func (o GalleryArtifactVersionFullSourceResponseOutput) ToGalleryArtifactVersionFullSourceResponseOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourceResponseOutput {
	return o
}

// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
func (o GalleryArtifactVersionFullSourceResponseOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionFullSourceResponse) *string { return v.CommunityGalleryImageId }).(pulumi.StringPtrOutput)
}

// The id of the gallery artifact version source.
func (o GalleryArtifactVersionFullSourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionFullSourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
func (o GalleryArtifactVersionFullSourceResponseOutput) VirtualMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryArtifactVersionFullSourceResponse) *string { return v.VirtualMachineId }).(pulumi.StringPtrOutput)
}

type GalleryArtifactVersionFullSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryArtifactVersionFullSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryArtifactVersionFullSourceResponse)(nil)).Elem()
}

func (o GalleryArtifactVersionFullSourceResponsePtrOutput) ToGalleryArtifactVersionFullSourceResponsePtrOutput() GalleryArtifactVersionFullSourceResponsePtrOutput {
	return o
}

func (o GalleryArtifactVersionFullSourceResponsePtrOutput) ToGalleryArtifactVersionFullSourceResponsePtrOutputWithContext(ctx context.Context) GalleryArtifactVersionFullSourceResponsePtrOutput {
	return o
}

func (o GalleryArtifactVersionFullSourceResponsePtrOutput) Elem() GalleryArtifactVersionFullSourceResponseOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSourceResponse) GalleryArtifactVersionFullSourceResponse {
		if v != nil {
			return *v
		}
		var ret GalleryArtifactVersionFullSourceResponse
		return ret
	}).(GalleryArtifactVersionFullSourceResponseOutput)
}

// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
func (o GalleryArtifactVersionFullSourceResponsePtrOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// The id of the gallery artifact version source.
func (o GalleryArtifactVersionFullSourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
func (o GalleryArtifactVersionFullSourceResponsePtrOutput) VirtualMachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryArtifactVersionFullSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineId
	}).(pulumi.StringPtrOutput)
}

// This is the data disk image.
type GalleryDataDiskImage struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *HostCaching `pulumi:"hostCaching"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
	// The source for the disk image.
	Source *GalleryDiskImageSource `pulumi:"source"`
}

// GalleryDataDiskImageInput is an input type that accepts GalleryDataDiskImageArgs and GalleryDataDiskImageOutput values.
// You can construct a concrete instance of `GalleryDataDiskImageInput` via:
//
//	GalleryDataDiskImageArgs{...}
type GalleryDataDiskImageInput interface {
	pulumi.Input

	ToGalleryDataDiskImageOutput() GalleryDataDiskImageOutput
	ToGalleryDataDiskImageOutputWithContext(context.Context) GalleryDataDiskImageOutput
}

// This is the data disk image.
type GalleryDataDiskImageArgs struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching HostCachingPtrInput `pulumi:"hostCaching"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The source for the disk image.
	Source GalleryDiskImageSourcePtrInput `pulumi:"source"`
}

func (GalleryDataDiskImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDataDiskImage)(nil)).Elem()
}

func (i GalleryDataDiskImageArgs) ToGalleryDataDiskImageOutput() GalleryDataDiskImageOutput {
	return i.ToGalleryDataDiskImageOutputWithContext(context.Background())
}

func (i GalleryDataDiskImageArgs) ToGalleryDataDiskImageOutputWithContext(ctx context.Context) GalleryDataDiskImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDataDiskImageOutput)
}

// GalleryDataDiskImageArrayInput is an input type that accepts GalleryDataDiskImageArray and GalleryDataDiskImageArrayOutput values.
// You can construct a concrete instance of `GalleryDataDiskImageArrayInput` via:
//
//	GalleryDataDiskImageArray{ GalleryDataDiskImageArgs{...} }
type GalleryDataDiskImageArrayInput interface {
	pulumi.Input

	ToGalleryDataDiskImageArrayOutput() GalleryDataDiskImageArrayOutput
	ToGalleryDataDiskImageArrayOutputWithContext(context.Context) GalleryDataDiskImageArrayOutput
}

type GalleryDataDiskImageArray []GalleryDataDiskImageInput

func (GalleryDataDiskImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryDataDiskImage)(nil)).Elem()
}

func (i GalleryDataDiskImageArray) ToGalleryDataDiskImageArrayOutput() GalleryDataDiskImageArrayOutput {
	return i.ToGalleryDataDiskImageArrayOutputWithContext(context.Background())
}

func (i GalleryDataDiskImageArray) ToGalleryDataDiskImageArrayOutputWithContext(ctx context.Context) GalleryDataDiskImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDataDiskImageArrayOutput)
}

// This is the data disk image.
type GalleryDataDiskImageOutput struct{ *pulumi.OutputState }

func (GalleryDataDiskImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDataDiskImage)(nil)).Elem()
}

func (o GalleryDataDiskImageOutput) ToGalleryDataDiskImageOutput() GalleryDataDiskImageOutput {
	return o
}

func (o GalleryDataDiskImageOutput) ToGalleryDataDiskImageOutputWithContext(ctx context.Context) GalleryDataDiskImageOutput {
	return o
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryDataDiskImageOutput) HostCaching() HostCachingPtrOutput {
	return o.ApplyT(func(v GalleryDataDiskImage) *HostCaching { return v.HostCaching }).(HostCachingPtrOutput)
}

// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
func (o GalleryDataDiskImageOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryDataDiskImage) int { return v.Lun }).(pulumi.IntOutput)
}

// The source for the disk image.
func (o GalleryDataDiskImageOutput) Source() GalleryDiskImageSourcePtrOutput {
	return o.ApplyT(func(v GalleryDataDiskImage) *GalleryDiskImageSource { return v.Source }).(GalleryDiskImageSourcePtrOutput)
}

type GalleryDataDiskImageArrayOutput struct{ *pulumi.OutputState }

func (GalleryDataDiskImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryDataDiskImage)(nil)).Elem()
}

func (o GalleryDataDiskImageArrayOutput) ToGalleryDataDiskImageArrayOutput() GalleryDataDiskImageArrayOutput {
	return o
}

func (o GalleryDataDiskImageArrayOutput) ToGalleryDataDiskImageArrayOutputWithContext(ctx context.Context) GalleryDataDiskImageArrayOutput {
	return o
}

func (o GalleryDataDiskImageArrayOutput) Index(i pulumi.IntInput) GalleryDataDiskImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryDataDiskImage {
		return vs[0].([]GalleryDataDiskImage)[vs[1].(int)]
	}).(GalleryDataDiskImageOutput)
}

// This is the data disk image.
type GalleryDataDiskImageResponse struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *string `pulumi:"hostCaching"`
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
	Lun int `pulumi:"lun"`
	// This property indicates the size of the VHD to be created.
	SizeInGB int `pulumi:"sizeInGB"`
	// The source for the disk image.
	Source *GalleryDiskImageSourceResponse `pulumi:"source"`
}

// This is the data disk image.
type GalleryDataDiskImageResponseOutput struct{ *pulumi.OutputState }

func (GalleryDataDiskImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDataDiskImageResponse)(nil)).Elem()
}

func (o GalleryDataDiskImageResponseOutput) ToGalleryDataDiskImageResponseOutput() GalleryDataDiskImageResponseOutput {
	return o
}

func (o GalleryDataDiskImageResponseOutput) ToGalleryDataDiskImageResponseOutputWithContext(ctx context.Context) GalleryDataDiskImageResponseOutput {
	return o
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryDataDiskImageResponseOutput) HostCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) *string { return v.HostCaching }).(pulumi.StringPtrOutput)
}

// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
func (o GalleryDataDiskImageResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// This property indicates the size of the VHD to be created.
func (o GalleryDataDiskImageResponseOutput) SizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) int { return v.SizeInGB }).(pulumi.IntOutput)
}

// The source for the disk image.
func (o GalleryDataDiskImageResponseOutput) Source() GalleryDiskImageSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryDataDiskImageResponse) *GalleryDiskImageSourceResponse { return v.Source }).(GalleryDiskImageSourceResponsePtrOutput)
}

type GalleryDataDiskImageResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryDataDiskImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryDataDiskImageResponse)(nil)).Elem()
}

func (o GalleryDataDiskImageResponseArrayOutput) ToGalleryDataDiskImageResponseArrayOutput() GalleryDataDiskImageResponseArrayOutput {
	return o
}

func (o GalleryDataDiskImageResponseArrayOutput) ToGalleryDataDiskImageResponseArrayOutputWithContext(ctx context.Context) GalleryDataDiskImageResponseArrayOutput {
	return o
}

func (o GalleryDataDiskImageResponseArrayOutput) Index(i pulumi.IntInput) GalleryDataDiskImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryDataDiskImageResponse {
		return vs[0].([]GalleryDataDiskImageResponse)[vs[1].(int)]
	}).(GalleryDataDiskImageResponseOutput)
}

// The source for the disk image.
type GalleryDiskImageSource struct {
	// The id of the gallery artifact version source.
	Id *string `pulumi:"id"`
	// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	Uri *string `pulumi:"uri"`
}

// GalleryDiskImageSourceInput is an input type that accepts GalleryDiskImageSourceArgs and GalleryDiskImageSourceOutput values.
// You can construct a concrete instance of `GalleryDiskImageSourceInput` via:
//
//	GalleryDiskImageSourceArgs{...}
type GalleryDiskImageSourceInput interface {
	pulumi.Input

	ToGalleryDiskImageSourceOutput() GalleryDiskImageSourceOutput
	ToGalleryDiskImageSourceOutputWithContext(context.Context) GalleryDiskImageSourceOutput
}

// The source for the disk image.
type GalleryDiskImageSourceArgs struct {
	// The id of the gallery artifact version source.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (GalleryDiskImageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDiskImageSource)(nil)).Elem()
}

func (i GalleryDiskImageSourceArgs) ToGalleryDiskImageSourceOutput() GalleryDiskImageSourceOutput {
	return i.ToGalleryDiskImageSourceOutputWithContext(context.Background())
}

func (i GalleryDiskImageSourceArgs) ToGalleryDiskImageSourceOutputWithContext(ctx context.Context) GalleryDiskImageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDiskImageSourceOutput)
}

func (i GalleryDiskImageSourceArgs) ToGalleryDiskImageSourcePtrOutput() GalleryDiskImageSourcePtrOutput {
	return i.ToGalleryDiskImageSourcePtrOutputWithContext(context.Background())
}

func (i GalleryDiskImageSourceArgs) ToGalleryDiskImageSourcePtrOutputWithContext(ctx context.Context) GalleryDiskImageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDiskImageSourceOutput).ToGalleryDiskImageSourcePtrOutputWithContext(ctx)
}

// GalleryDiskImageSourcePtrInput is an input type that accepts GalleryDiskImageSourceArgs, GalleryDiskImageSourcePtr and GalleryDiskImageSourcePtrOutput values.
// You can construct a concrete instance of `GalleryDiskImageSourcePtrInput` via:
//
//	        GalleryDiskImageSourceArgs{...}
//
//	or:
//
//	        nil
type GalleryDiskImageSourcePtrInput interface {
	pulumi.Input

	ToGalleryDiskImageSourcePtrOutput() GalleryDiskImageSourcePtrOutput
	ToGalleryDiskImageSourcePtrOutputWithContext(context.Context) GalleryDiskImageSourcePtrOutput
}

type galleryDiskImageSourcePtrType GalleryDiskImageSourceArgs

func GalleryDiskImageSourcePtr(v *GalleryDiskImageSourceArgs) GalleryDiskImageSourcePtrInput {
	return (*galleryDiskImageSourcePtrType)(v)
}

func (*galleryDiskImageSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryDiskImageSource)(nil)).Elem()
}

func (i *galleryDiskImageSourcePtrType) ToGalleryDiskImageSourcePtrOutput() GalleryDiskImageSourcePtrOutput {
	return i.ToGalleryDiskImageSourcePtrOutputWithContext(context.Background())
}

func (i *galleryDiskImageSourcePtrType) ToGalleryDiskImageSourcePtrOutputWithContext(ctx context.Context) GalleryDiskImageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryDiskImageSourcePtrOutput)
}

// The source for the disk image.
type GalleryDiskImageSourceOutput struct{ *pulumi.OutputState }

func (GalleryDiskImageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDiskImageSource)(nil)).Elem()
}

func (o GalleryDiskImageSourceOutput) ToGalleryDiskImageSourceOutput() GalleryDiskImageSourceOutput {
	return o
}

func (o GalleryDiskImageSourceOutput) ToGalleryDiskImageSourceOutputWithContext(ctx context.Context) GalleryDiskImageSourceOutput {
	return o
}

func (o GalleryDiskImageSourceOutput) ToGalleryDiskImageSourcePtrOutput() GalleryDiskImageSourcePtrOutput {
	return o.ToGalleryDiskImageSourcePtrOutputWithContext(context.Background())
}

func (o GalleryDiskImageSourceOutput) ToGalleryDiskImageSourcePtrOutputWithContext(ctx context.Context) GalleryDiskImageSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryDiskImageSource) *GalleryDiskImageSource {
		return &v
	}).(GalleryDiskImageSourcePtrOutput)
}

// The id of the gallery artifact version source.
func (o GalleryDiskImageSourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDiskImageSource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
func (o GalleryDiskImageSourceOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDiskImageSource) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
func (o GalleryDiskImageSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDiskImageSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GalleryDiskImageSourcePtrOutput struct{ *pulumi.OutputState }

func (GalleryDiskImageSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryDiskImageSource)(nil)).Elem()
}

func (o GalleryDiskImageSourcePtrOutput) ToGalleryDiskImageSourcePtrOutput() GalleryDiskImageSourcePtrOutput {
	return o
}

func (o GalleryDiskImageSourcePtrOutput) ToGalleryDiskImageSourcePtrOutputWithContext(ctx context.Context) GalleryDiskImageSourcePtrOutput {
	return o
}

func (o GalleryDiskImageSourcePtrOutput) Elem() GalleryDiskImageSourceOutput {
	return o.ApplyT(func(v *GalleryDiskImageSource) GalleryDiskImageSource {
		if v != nil {
			return *v
		}
		var ret GalleryDiskImageSource
		return ret
	}).(GalleryDiskImageSourceOutput)
}

// The id of the gallery artifact version source.
func (o GalleryDiskImageSourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryDiskImageSource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
func (o GalleryDiskImageSourcePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryDiskImageSource) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
func (o GalleryDiskImageSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryDiskImageSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The source for the disk image.
type GalleryDiskImageSourceResponse struct {
	// The id of the gallery artifact version source.
	Id *string `pulumi:"id"`
	// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	Uri *string `pulumi:"uri"`
}

// The source for the disk image.
type GalleryDiskImageSourceResponseOutput struct{ *pulumi.OutputState }

func (GalleryDiskImageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryDiskImageSourceResponse)(nil)).Elem()
}

func (o GalleryDiskImageSourceResponseOutput) ToGalleryDiskImageSourceResponseOutput() GalleryDiskImageSourceResponseOutput {
	return o
}

func (o GalleryDiskImageSourceResponseOutput) ToGalleryDiskImageSourceResponseOutputWithContext(ctx context.Context) GalleryDiskImageSourceResponseOutput {
	return o
}

// The id of the gallery artifact version source.
func (o GalleryDiskImageSourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDiskImageSourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
func (o GalleryDiskImageSourceResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDiskImageSourceResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
func (o GalleryDiskImageSourceResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryDiskImageSourceResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GalleryDiskImageSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryDiskImageSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryDiskImageSourceResponse)(nil)).Elem()
}

func (o GalleryDiskImageSourceResponsePtrOutput) ToGalleryDiskImageSourceResponsePtrOutput() GalleryDiskImageSourceResponsePtrOutput {
	return o
}

func (o GalleryDiskImageSourceResponsePtrOutput) ToGalleryDiskImageSourceResponsePtrOutputWithContext(ctx context.Context) GalleryDiskImageSourceResponsePtrOutput {
	return o
}

func (o GalleryDiskImageSourceResponsePtrOutput) Elem() GalleryDiskImageSourceResponseOutput {
	return o.ApplyT(func(v *GalleryDiskImageSourceResponse) GalleryDiskImageSourceResponse {
		if v != nil {
			return *v
		}
		var ret GalleryDiskImageSourceResponse
		return ret
	}).(GalleryDiskImageSourceResponseOutput)
}

// The id of the gallery artifact version source.
func (o GalleryDiskImageSourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryDiskImageSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
func (o GalleryDiskImageSourceResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryDiskImageSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
func (o GalleryDiskImageSourceResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryDiskImageSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The name of the extended location.
type GalleryExtendedLocation struct {
	Name *string `pulumi:"name"`
	// It is type of the extended location.
	Type *string `pulumi:"type"`
}

// GalleryExtendedLocationInput is an input type that accepts GalleryExtendedLocationArgs and GalleryExtendedLocationOutput values.
// You can construct a concrete instance of `GalleryExtendedLocationInput` via:
//
//	GalleryExtendedLocationArgs{...}
type GalleryExtendedLocationInput interface {
	pulumi.Input

	ToGalleryExtendedLocationOutput() GalleryExtendedLocationOutput
	ToGalleryExtendedLocationOutputWithContext(context.Context) GalleryExtendedLocationOutput
}

// The name of the extended location.
type GalleryExtendedLocationArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	// It is type of the extended location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GalleryExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryExtendedLocation)(nil)).Elem()
}

func (i GalleryExtendedLocationArgs) ToGalleryExtendedLocationOutput() GalleryExtendedLocationOutput {
	return i.ToGalleryExtendedLocationOutputWithContext(context.Background())
}

func (i GalleryExtendedLocationArgs) ToGalleryExtendedLocationOutputWithContext(ctx context.Context) GalleryExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryExtendedLocationOutput)
}

func (i GalleryExtendedLocationArgs) ToGalleryExtendedLocationPtrOutput() GalleryExtendedLocationPtrOutput {
	return i.ToGalleryExtendedLocationPtrOutputWithContext(context.Background())
}

func (i GalleryExtendedLocationArgs) ToGalleryExtendedLocationPtrOutputWithContext(ctx context.Context) GalleryExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryExtendedLocationOutput).ToGalleryExtendedLocationPtrOutputWithContext(ctx)
}

// GalleryExtendedLocationPtrInput is an input type that accepts GalleryExtendedLocationArgs, GalleryExtendedLocationPtr and GalleryExtendedLocationPtrOutput values.
// You can construct a concrete instance of `GalleryExtendedLocationPtrInput` via:
//
//	        GalleryExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type GalleryExtendedLocationPtrInput interface {
	pulumi.Input

	ToGalleryExtendedLocationPtrOutput() GalleryExtendedLocationPtrOutput
	ToGalleryExtendedLocationPtrOutputWithContext(context.Context) GalleryExtendedLocationPtrOutput
}

type galleryExtendedLocationPtrType GalleryExtendedLocationArgs

func GalleryExtendedLocationPtr(v *GalleryExtendedLocationArgs) GalleryExtendedLocationPtrInput {
	return (*galleryExtendedLocationPtrType)(v)
}

func (*galleryExtendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryExtendedLocation)(nil)).Elem()
}

func (i *galleryExtendedLocationPtrType) ToGalleryExtendedLocationPtrOutput() GalleryExtendedLocationPtrOutput {
	return i.ToGalleryExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *galleryExtendedLocationPtrType) ToGalleryExtendedLocationPtrOutputWithContext(ctx context.Context) GalleryExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryExtendedLocationPtrOutput)
}

// The name of the extended location.
type GalleryExtendedLocationOutput struct{ *pulumi.OutputState }

func (GalleryExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryExtendedLocation)(nil)).Elem()
}

func (o GalleryExtendedLocationOutput) ToGalleryExtendedLocationOutput() GalleryExtendedLocationOutput {
	return o
}

func (o GalleryExtendedLocationOutput) ToGalleryExtendedLocationOutputWithContext(ctx context.Context) GalleryExtendedLocationOutput {
	return o
}

func (o GalleryExtendedLocationOutput) ToGalleryExtendedLocationPtrOutput() GalleryExtendedLocationPtrOutput {
	return o.ToGalleryExtendedLocationPtrOutputWithContext(context.Background())
}

func (o GalleryExtendedLocationOutput) ToGalleryExtendedLocationPtrOutputWithContext(ctx context.Context) GalleryExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryExtendedLocation) *GalleryExtendedLocation {
		return &v
	}).(GalleryExtendedLocationPtrOutput)
}

func (o GalleryExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// It is type of the extended location.
func (o GalleryExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GalleryExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (GalleryExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryExtendedLocation)(nil)).Elem()
}

func (o GalleryExtendedLocationPtrOutput) ToGalleryExtendedLocationPtrOutput() GalleryExtendedLocationPtrOutput {
	return o
}

func (o GalleryExtendedLocationPtrOutput) ToGalleryExtendedLocationPtrOutputWithContext(ctx context.Context) GalleryExtendedLocationPtrOutput {
	return o
}

func (o GalleryExtendedLocationPtrOutput) Elem() GalleryExtendedLocationOutput {
	return o.ApplyT(func(v *GalleryExtendedLocation) GalleryExtendedLocation {
		if v != nil {
			return *v
		}
		var ret GalleryExtendedLocation
		return ret
	}).(GalleryExtendedLocationOutput)
}

func (o GalleryExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// It is type of the extended location.
func (o GalleryExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The name of the extended location.
type GalleryExtendedLocationResponse struct {
	Name *string `pulumi:"name"`
	// It is type of the extended location.
	Type *string `pulumi:"type"`
}

// The name of the extended location.
type GalleryExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (GalleryExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryExtendedLocationResponse)(nil)).Elem()
}

func (o GalleryExtendedLocationResponseOutput) ToGalleryExtendedLocationResponseOutput() GalleryExtendedLocationResponseOutput {
	return o
}

func (o GalleryExtendedLocationResponseOutput) ToGalleryExtendedLocationResponseOutputWithContext(ctx context.Context) GalleryExtendedLocationResponseOutput {
	return o
}

func (o GalleryExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// It is type of the extended location.
func (o GalleryExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GalleryExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryExtendedLocationResponse)(nil)).Elem()
}

func (o GalleryExtendedLocationResponsePtrOutput) ToGalleryExtendedLocationResponsePtrOutput() GalleryExtendedLocationResponsePtrOutput {
	return o
}

func (o GalleryExtendedLocationResponsePtrOutput) ToGalleryExtendedLocationResponsePtrOutputWithContext(ctx context.Context) GalleryExtendedLocationResponsePtrOutput {
	return o
}

func (o GalleryExtendedLocationResponsePtrOutput) Elem() GalleryExtendedLocationResponseOutput {
	return o.ApplyT(func(v *GalleryExtendedLocationResponse) GalleryExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret GalleryExtendedLocationResponse
		return ret
	}).(GalleryExtendedLocationResponseOutput)
}

func (o GalleryExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// It is type of the extended location.
func (o GalleryExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes the gallery unique name.
type GalleryIdentifierResponse struct {
	// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
	UniqueName string `pulumi:"uniqueName"`
}

// Describes the gallery unique name.
type GalleryIdentifierResponseOutput struct{ *pulumi.OutputState }

func (GalleryIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryIdentifierResponse)(nil)).Elem()
}

func (o GalleryIdentifierResponseOutput) ToGalleryIdentifierResponseOutput() GalleryIdentifierResponseOutput {
	return o
}

func (o GalleryIdentifierResponseOutput) ToGalleryIdentifierResponseOutputWithContext(ctx context.Context) GalleryIdentifierResponseOutput {
	return o
}

// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
func (o GalleryIdentifierResponseOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryIdentifierResponse) string { return v.UniqueName }).(pulumi.StringOutput)
}

type GalleryIdentifierResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryIdentifierResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryIdentifierResponse)(nil)).Elem()
}

func (o GalleryIdentifierResponsePtrOutput) ToGalleryIdentifierResponsePtrOutput() GalleryIdentifierResponsePtrOutput {
	return o
}

func (o GalleryIdentifierResponsePtrOutput) ToGalleryIdentifierResponsePtrOutputWithContext(ctx context.Context) GalleryIdentifierResponsePtrOutput {
	return o
}

func (o GalleryIdentifierResponsePtrOutput) Elem() GalleryIdentifierResponseOutput {
	return o.ApplyT(func(v *GalleryIdentifierResponse) GalleryIdentifierResponse {
		if v != nil {
			return *v
		}
		var ret GalleryIdentifierResponse
		return ret
	}).(GalleryIdentifierResponseOutput)
}

// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
func (o GalleryIdentifierResponsePtrOutput) UniqueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryIdentifierResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UniqueName
	}).(pulumi.StringPtrOutput)
}

// Identity for the virtual machine.
type GalleryIdentity struct {
	// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// GalleryIdentityInput is an input type that accepts GalleryIdentityArgs and GalleryIdentityOutput values.
// You can construct a concrete instance of `GalleryIdentityInput` via:
//
//	GalleryIdentityArgs{...}
type GalleryIdentityInput interface {
	pulumi.Input

	ToGalleryIdentityOutput() GalleryIdentityOutput
	ToGalleryIdentityOutputWithContext(context.Context) GalleryIdentityOutput
}

// Identity for the virtual machine.
type GalleryIdentityArgs struct {
	// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (GalleryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryIdentity)(nil)).Elem()
}

func (i GalleryIdentityArgs) ToGalleryIdentityOutput() GalleryIdentityOutput {
	return i.ToGalleryIdentityOutputWithContext(context.Background())
}

func (i GalleryIdentityArgs) ToGalleryIdentityOutputWithContext(ctx context.Context) GalleryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryIdentityOutput)
}

func (i GalleryIdentityArgs) ToGalleryIdentityPtrOutput() GalleryIdentityPtrOutput {
	return i.ToGalleryIdentityPtrOutputWithContext(context.Background())
}

func (i GalleryIdentityArgs) ToGalleryIdentityPtrOutputWithContext(ctx context.Context) GalleryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryIdentityOutput).ToGalleryIdentityPtrOutputWithContext(ctx)
}

// GalleryIdentityPtrInput is an input type that accepts GalleryIdentityArgs, GalleryIdentityPtr and GalleryIdentityPtrOutput values.
// You can construct a concrete instance of `GalleryIdentityPtrInput` via:
//
//	        GalleryIdentityArgs{...}
//
//	or:
//
//	        nil
type GalleryIdentityPtrInput interface {
	pulumi.Input

	ToGalleryIdentityPtrOutput() GalleryIdentityPtrOutput
	ToGalleryIdentityPtrOutputWithContext(context.Context) GalleryIdentityPtrOutput
}

type galleryIdentityPtrType GalleryIdentityArgs

func GalleryIdentityPtr(v *GalleryIdentityArgs) GalleryIdentityPtrInput {
	return (*galleryIdentityPtrType)(v)
}

func (*galleryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryIdentity)(nil)).Elem()
}

func (i *galleryIdentityPtrType) ToGalleryIdentityPtrOutput() GalleryIdentityPtrOutput {
	return i.ToGalleryIdentityPtrOutputWithContext(context.Background())
}

func (i *galleryIdentityPtrType) ToGalleryIdentityPtrOutputWithContext(ctx context.Context) GalleryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryIdentityPtrOutput)
}

// Identity for the virtual machine.
type GalleryIdentityOutput struct{ *pulumi.OutputState }

func (GalleryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryIdentity)(nil)).Elem()
}

func (o GalleryIdentityOutput) ToGalleryIdentityOutput() GalleryIdentityOutput {
	return o
}

func (o GalleryIdentityOutput) ToGalleryIdentityOutputWithContext(ctx context.Context) GalleryIdentityOutput {
	return o
}

func (o GalleryIdentityOutput) ToGalleryIdentityPtrOutput() GalleryIdentityPtrOutput {
	return o.ToGalleryIdentityPtrOutputWithContext(context.Background())
}

func (o GalleryIdentityOutput) ToGalleryIdentityPtrOutputWithContext(ctx context.Context) GalleryIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryIdentity) *GalleryIdentity {
		return &v
	}).(GalleryIdentityPtrOutput)
}

// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
func (o GalleryIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v GalleryIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o GalleryIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GalleryIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type GalleryIdentityPtrOutput struct{ *pulumi.OutputState }

func (GalleryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryIdentity)(nil)).Elem()
}

func (o GalleryIdentityPtrOutput) ToGalleryIdentityPtrOutput() GalleryIdentityPtrOutput {
	return o
}

func (o GalleryIdentityPtrOutput) ToGalleryIdentityPtrOutputWithContext(ctx context.Context) GalleryIdentityPtrOutput {
	return o
}

func (o GalleryIdentityPtrOutput) Elem() GalleryIdentityOutput {
	return o.ApplyT(func(v *GalleryIdentity) GalleryIdentity {
		if v != nil {
			return *v
		}
		var ret GalleryIdentity
		return ret
	}).(GalleryIdentityOutput)
}

// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
func (o GalleryIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *GalleryIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o GalleryIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GalleryIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the virtual machine.
type GalleryIdentityResponse struct {
	// The principal id of the gallery identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The AAD tenant id of the gallery identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentitiesValueResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the virtual machine.
type GalleryIdentityResponseOutput struct{ *pulumi.OutputState }

func (GalleryIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryIdentityResponse)(nil)).Elem()
}

func (o GalleryIdentityResponseOutput) ToGalleryIdentityResponseOutput() GalleryIdentityResponseOutput {
	return o
}

func (o GalleryIdentityResponseOutput) ToGalleryIdentityResponseOutputWithContext(ctx context.Context) GalleryIdentityResponseOutput {
	return o
}

// The principal id of the gallery identity. This property will only be provided for a system assigned identity.
func (o GalleryIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The AAD tenant id of the gallery identity. This property will only be provided for a system assigned identity.
func (o GalleryIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
func (o GalleryIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o GalleryIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v GalleryIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

type GalleryIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryIdentityResponse)(nil)).Elem()
}

func (o GalleryIdentityResponsePtrOutput) ToGalleryIdentityResponsePtrOutput() GalleryIdentityResponsePtrOutput {
	return o
}

func (o GalleryIdentityResponsePtrOutput) ToGalleryIdentityResponsePtrOutputWithContext(ctx context.Context) GalleryIdentityResponsePtrOutput {
	return o
}

func (o GalleryIdentityResponsePtrOutput) Elem() GalleryIdentityResponseOutput {
	return o.ApplyT(func(v *GalleryIdentityResponse) GalleryIdentityResponse {
		if v != nil {
			return *v
		}
		var ret GalleryIdentityResponse
		return ret
	}).(GalleryIdentityResponseOutput)
}

// The principal id of the gallery identity. This property will only be provided for a system assigned identity.
func (o GalleryIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The AAD tenant id of the gallery identity. This property will only be provided for a system assigned identity.
func (o GalleryIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
func (o GalleryIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o GalleryIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v *GalleryIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

// A feature for gallery image.
type GalleryImageFeature struct {
	// The name of the gallery image feature.
	Name *string `pulumi:"name"`
	// The minimum gallery image version which supports this feature.
	StartsAtVersion *string `pulumi:"startsAtVersion"`
	// The value of the gallery image feature.
	Value *string `pulumi:"value"`
}

// GalleryImageFeatureInput is an input type that accepts GalleryImageFeatureArgs and GalleryImageFeatureOutput values.
// You can construct a concrete instance of `GalleryImageFeatureInput` via:
//
//	GalleryImageFeatureArgs{...}
type GalleryImageFeatureInput interface {
	pulumi.Input

	ToGalleryImageFeatureOutput() GalleryImageFeatureOutput
	ToGalleryImageFeatureOutputWithContext(context.Context) GalleryImageFeatureOutput
}

// A feature for gallery image.
type GalleryImageFeatureArgs struct {
	// The name of the gallery image feature.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The minimum gallery image version which supports this feature.
	StartsAtVersion pulumi.StringPtrInput `pulumi:"startsAtVersion"`
	// The value of the gallery image feature.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GalleryImageFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageFeature)(nil)).Elem()
}

func (i GalleryImageFeatureArgs) ToGalleryImageFeatureOutput() GalleryImageFeatureOutput {
	return i.ToGalleryImageFeatureOutputWithContext(context.Background())
}

func (i GalleryImageFeatureArgs) ToGalleryImageFeatureOutputWithContext(ctx context.Context) GalleryImageFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageFeatureOutput)
}

// GalleryImageFeatureArrayInput is an input type that accepts GalleryImageFeatureArray and GalleryImageFeatureArrayOutput values.
// You can construct a concrete instance of `GalleryImageFeatureArrayInput` via:
//
//	GalleryImageFeatureArray{ GalleryImageFeatureArgs{...} }
type GalleryImageFeatureArrayInput interface {
	pulumi.Input

	ToGalleryImageFeatureArrayOutput() GalleryImageFeatureArrayOutput
	ToGalleryImageFeatureArrayOutputWithContext(context.Context) GalleryImageFeatureArrayOutput
}

type GalleryImageFeatureArray []GalleryImageFeatureInput

func (GalleryImageFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryImageFeature)(nil)).Elem()
}

func (i GalleryImageFeatureArray) ToGalleryImageFeatureArrayOutput() GalleryImageFeatureArrayOutput {
	return i.ToGalleryImageFeatureArrayOutputWithContext(context.Background())
}

func (i GalleryImageFeatureArray) ToGalleryImageFeatureArrayOutputWithContext(ctx context.Context) GalleryImageFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageFeatureArrayOutput)
}

// A feature for gallery image.
type GalleryImageFeatureOutput struct{ *pulumi.OutputState }

func (GalleryImageFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageFeature)(nil)).Elem()
}

func (o GalleryImageFeatureOutput) ToGalleryImageFeatureOutput() GalleryImageFeatureOutput {
	return o
}

func (o GalleryImageFeatureOutput) ToGalleryImageFeatureOutputWithContext(ctx context.Context) GalleryImageFeatureOutput {
	return o
}

// The name of the gallery image feature.
func (o GalleryImageFeatureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeature) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The minimum gallery image version which supports this feature.
func (o GalleryImageFeatureOutput) StartsAtVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeature) *string { return v.StartsAtVersion }).(pulumi.StringPtrOutput)
}

// The value of the gallery image feature.
func (o GalleryImageFeatureOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeature) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GalleryImageFeatureArrayOutput struct{ *pulumi.OutputState }

func (GalleryImageFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryImageFeature)(nil)).Elem()
}

func (o GalleryImageFeatureArrayOutput) ToGalleryImageFeatureArrayOutput() GalleryImageFeatureArrayOutput {
	return o
}

func (o GalleryImageFeatureArrayOutput) ToGalleryImageFeatureArrayOutputWithContext(ctx context.Context) GalleryImageFeatureArrayOutput {
	return o
}

func (o GalleryImageFeatureArrayOutput) Index(i pulumi.IntInput) GalleryImageFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryImageFeature {
		return vs[0].([]GalleryImageFeature)[vs[1].(int)]
	}).(GalleryImageFeatureOutput)
}

// A feature for gallery image.
type GalleryImageFeatureResponse struct {
	// The name of the gallery image feature.
	Name *string `pulumi:"name"`
	// The minimum gallery image version which supports this feature.
	StartsAtVersion *string `pulumi:"startsAtVersion"`
	// The value of the gallery image feature.
	Value *string `pulumi:"value"`
}

// A feature for gallery image.
type GalleryImageFeatureResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageFeatureResponse)(nil)).Elem()
}

func (o GalleryImageFeatureResponseOutput) ToGalleryImageFeatureResponseOutput() GalleryImageFeatureResponseOutput {
	return o
}

func (o GalleryImageFeatureResponseOutput) ToGalleryImageFeatureResponseOutputWithContext(ctx context.Context) GalleryImageFeatureResponseOutput {
	return o
}

// The name of the gallery image feature.
func (o GalleryImageFeatureResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeatureResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The minimum gallery image version which supports this feature.
func (o GalleryImageFeatureResponseOutput) StartsAtVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeatureResponse) *string { return v.StartsAtVersion }).(pulumi.StringPtrOutput)
}

// The value of the gallery image feature.
func (o GalleryImageFeatureResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageFeatureResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GalleryImageFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryImageFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryImageFeatureResponse)(nil)).Elem()
}

func (o GalleryImageFeatureResponseArrayOutput) ToGalleryImageFeatureResponseArrayOutput() GalleryImageFeatureResponseArrayOutput {
	return o
}

func (o GalleryImageFeatureResponseArrayOutput) ToGalleryImageFeatureResponseArrayOutputWithContext(ctx context.Context) GalleryImageFeatureResponseArrayOutput {
	return o
}

func (o GalleryImageFeatureResponseArrayOutput) Index(i pulumi.IntInput) GalleryImageFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryImageFeatureResponse {
		return vs[0].([]GalleryImageFeatureResponse)[vs[1].(int)]
	}).(GalleryImageFeatureResponseOutput)
}

// This is the gallery image definition identifier.
type GalleryImageIdentifier struct {
	// The name of the gallery image definition offer.
	Offer string `pulumi:"offer"`
	// The name of the gallery image definition publisher.
	Publisher string `pulumi:"publisher"`
	// The name of the gallery image definition SKU.
	Sku string `pulumi:"sku"`
}

// GalleryImageIdentifierInput is an input type that accepts GalleryImageIdentifierArgs and GalleryImageIdentifierOutput values.
// You can construct a concrete instance of `GalleryImageIdentifierInput` via:
//
//	GalleryImageIdentifierArgs{...}
type GalleryImageIdentifierInput interface {
	pulumi.Input

	ToGalleryImageIdentifierOutput() GalleryImageIdentifierOutput
	ToGalleryImageIdentifierOutputWithContext(context.Context) GalleryImageIdentifierOutput
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierArgs struct {
	// The name of the gallery image definition offer.
	Offer pulumi.StringInput `pulumi:"offer"`
	// The name of the gallery image definition publisher.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The name of the gallery image definition SKU.
	Sku pulumi.StringInput `pulumi:"sku"`
}

func (GalleryImageIdentifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageIdentifier)(nil)).Elem()
}

func (i GalleryImageIdentifierArgs) ToGalleryImageIdentifierOutput() GalleryImageIdentifierOutput {
	return i.ToGalleryImageIdentifierOutputWithContext(context.Background())
}

func (i GalleryImageIdentifierArgs) ToGalleryImageIdentifierOutputWithContext(ctx context.Context) GalleryImageIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageIdentifierOutput)
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierOutput struct{ *pulumi.OutputState }

func (GalleryImageIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageIdentifier)(nil)).Elem()
}

func (o GalleryImageIdentifierOutput) ToGalleryImageIdentifierOutput() GalleryImageIdentifierOutput {
	return o
}

func (o GalleryImageIdentifierOutput) ToGalleryImageIdentifierOutputWithContext(ctx context.Context) GalleryImageIdentifierOutput {
	return o
}

// The name of the gallery image definition offer.
func (o GalleryImageIdentifierOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifier) string { return v.Offer }).(pulumi.StringOutput)
}

// The name of the gallery image definition publisher.
func (o GalleryImageIdentifierOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifier) string { return v.Publisher }).(pulumi.StringOutput)
}

// The name of the gallery image definition SKU.
func (o GalleryImageIdentifierOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifier) string { return v.Sku }).(pulumi.StringOutput)
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierResponse struct {
	// The name of the gallery image definition offer.
	Offer string `pulumi:"offer"`
	// The name of the gallery image definition publisher.
	Publisher string `pulumi:"publisher"`
	// The name of the gallery image definition SKU.
	Sku string `pulumi:"sku"`
}

// This is the gallery image definition identifier.
type GalleryImageIdentifierResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageIdentifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageIdentifierResponse)(nil)).Elem()
}

func (o GalleryImageIdentifierResponseOutput) ToGalleryImageIdentifierResponseOutput() GalleryImageIdentifierResponseOutput {
	return o
}

func (o GalleryImageIdentifierResponseOutput) ToGalleryImageIdentifierResponseOutputWithContext(ctx context.Context) GalleryImageIdentifierResponseOutput {
	return o
}

// The name of the gallery image definition offer.
func (o GalleryImageIdentifierResponseOutput) Offer() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) string { return v.Offer }).(pulumi.StringOutput)
}

// The name of the gallery image definition publisher.
func (o GalleryImageIdentifierResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The name of the gallery image definition SKU.
func (o GalleryImageIdentifierResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageIdentifierResponse) string { return v.Sku }).(pulumi.StringOutput)
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfile struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode *string `pulumi:"replicationMode"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations []GalleryTargetExtendedLocation `pulumi:"targetExtendedLocations"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegion `pulumi:"targetRegions"`
}

// GalleryImageVersionPublishingProfileInput is an input type that accepts GalleryImageVersionPublishingProfileArgs and GalleryImageVersionPublishingProfileOutput values.
// You can construct a concrete instance of `GalleryImageVersionPublishingProfileInput` via:
//
//	GalleryImageVersionPublishingProfileArgs{...}
type GalleryImageVersionPublishingProfileInput interface {
	pulumi.Input

	ToGalleryImageVersionPublishingProfileOutput() GalleryImageVersionPublishingProfileOutput
	ToGalleryImageVersionPublishingProfileOutputWithContext(context.Context) GalleryImageVersionPublishingProfileOutput
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileArgs struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate pulumi.StringPtrInput `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest pulumi.BoolPtrInput `pulumi:"excludeFromLatest"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount pulumi.IntPtrInput `pulumi:"replicaCount"`
	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode pulumi.StringPtrInput `pulumi:"replicationMode"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations GalleryTargetExtendedLocationArrayInput `pulumi:"targetExtendedLocations"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions TargetRegionArrayInput `pulumi:"targetRegions"`
}

func (GalleryImageVersionPublishingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionPublishingProfile)(nil)).Elem()
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfileOutput() GalleryImageVersionPublishingProfileOutput {
	return i.ToGalleryImageVersionPublishingProfileOutputWithContext(context.Background())
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfileOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionPublishingProfileOutput)
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput {
	return i.ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (i GalleryImageVersionPublishingProfileArgs) ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionPublishingProfileOutput).ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx)
}

// GalleryImageVersionPublishingProfilePtrInput is an input type that accepts GalleryImageVersionPublishingProfileArgs, GalleryImageVersionPublishingProfilePtr and GalleryImageVersionPublishingProfilePtrOutput values.
// You can construct a concrete instance of `GalleryImageVersionPublishingProfilePtrInput` via:
//
//	        GalleryImageVersionPublishingProfileArgs{...}
//
//	or:
//
//	        nil
type GalleryImageVersionPublishingProfilePtrInput interface {
	pulumi.Input

	ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput
	ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Context) GalleryImageVersionPublishingProfilePtrOutput
}

type galleryImageVersionPublishingProfilePtrType GalleryImageVersionPublishingProfileArgs

func GalleryImageVersionPublishingProfilePtr(v *GalleryImageVersionPublishingProfileArgs) GalleryImageVersionPublishingProfilePtrInput {
	return (*galleryImageVersionPublishingProfilePtrType)(v)
}

func (*galleryImageVersionPublishingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionPublishingProfile)(nil)).Elem()
}

func (i *galleryImageVersionPublishingProfilePtrType) ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput {
	return i.ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (i *galleryImageVersionPublishingProfilePtrType) ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionPublishingProfilePtrOutput)
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionPublishingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionPublishingProfile)(nil)).Elem()
}

func (o GalleryImageVersionPublishingProfileOutput) ToGalleryImageVersionPublishingProfileOutput() GalleryImageVersionPublishingProfileOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileOutput) ToGalleryImageVersionPublishingProfileOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileOutput) ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput {
	return o.ToGalleryImageVersionPublishingProfilePtrOutputWithContext(context.Background())
}

func (o GalleryImageVersionPublishingProfileOutput) ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryImageVersionPublishingProfile) *GalleryImageVersionPublishingProfile {
		return &v
	}).(GalleryImageVersionPublishingProfilePtrOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryImageVersionPublishingProfileOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) *string { return v.EndOfLifeDate }).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryImageVersionPublishingProfileOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryImageVersionPublishingProfileOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
func (o GalleryImageVersionPublishingProfileOutput) ReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) *string { return v.ReplicationMode }).(pulumi.StringPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryImageVersionPublishingProfileOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileOutput) TargetExtendedLocations() GalleryTargetExtendedLocationArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) []GalleryTargetExtendedLocation {
		return v.TargetExtendedLocations
	}).(GalleryTargetExtendedLocationArrayOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileOutput) TargetRegions() TargetRegionArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfile) []TargetRegion { return v.TargetRegions }).(TargetRegionArrayOutput)
}

type GalleryImageVersionPublishingProfilePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionPublishingProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionPublishingProfile)(nil)).Elem()
}

func (o GalleryImageVersionPublishingProfilePtrOutput) ToGalleryImageVersionPublishingProfilePtrOutput() GalleryImageVersionPublishingProfilePtrOutput {
	return o
}

func (o GalleryImageVersionPublishingProfilePtrOutput) ToGalleryImageVersionPublishingProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfilePtrOutput {
	return o
}

func (o GalleryImageVersionPublishingProfilePtrOutput) Elem() GalleryImageVersionPublishingProfileOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) GalleryImageVersionPublishingProfile {
		if v != nil {
			return *v
		}
		var ret GalleryImageVersionPublishingProfile
		return ret
	}).(GalleryImageVersionPublishingProfileOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryImageVersionPublishingProfilePtrOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) *string {
		if v == nil {
			return nil
		}
		return v.EndOfLifeDate
	}).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryImageVersionPublishingProfilePtrOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeFromLatest
	}).(pulumi.BoolPtrOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryImageVersionPublishingProfilePtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
func (o GalleryImageVersionPublishingProfilePtrOutput) ReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryImageVersionPublishingProfilePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfilePtrOutput) TargetExtendedLocations() GalleryTargetExtendedLocationArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) []GalleryTargetExtendedLocation {
		if v == nil {
			return nil
		}
		return v.TargetExtendedLocations
	}).(GalleryTargetExtendedLocationArrayOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfilePtrOutput) TargetRegions() TargetRegionArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfile) []TargetRegion {
		if v == nil {
			return nil
		}
		return v.TargetRegions
	}).(TargetRegionArrayOutput)
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileResponse struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *string `pulumi:"endOfLifeDate"`
	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The timestamp for when the gallery image version is published.
	PublishedDate string `pulumi:"publishedDate"`
	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode *string `pulumi:"replicationMode"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations []GalleryTargetExtendedLocationResponse `pulumi:"targetExtendedLocations"`
	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegionResponse `pulumi:"targetRegions"`
}

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionPublishingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionPublishingProfileResponseOutput) ToGalleryImageVersionPublishingProfileResponseOutput() GalleryImageVersionPublishingProfileResponseOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponseOutput) ToGalleryImageVersionPublishingProfileResponseOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileResponseOutput {
	return o
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *string { return v.EndOfLifeDate }).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryImageVersionPublishingProfileResponseOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryImageVersionPublishingProfileResponseOutput) PublishedDate() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) string { return v.PublishedDate }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *int { return v.ReplicaCount }).(pulumi.IntPtrOutput)
}

// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) ReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *string { return v.ReplicationMode }).(pulumi.StringPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) TargetExtendedLocations() GalleryTargetExtendedLocationResponseArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) []GalleryTargetExtendedLocationResponse {
		return v.TargetExtendedLocations
	}).(GalleryTargetExtendedLocationResponseArrayOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponseOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionPublishingProfileResponse) []TargetRegionResponse { return v.TargetRegions }).(TargetRegionResponseArrayOutput)
}

type GalleryImageVersionPublishingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionPublishingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionPublishingProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ToGalleryImageVersionPublishingProfileResponsePtrOutput() GalleryImageVersionPublishingProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ToGalleryImageVersionPublishingProfileResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionPublishingProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionPublishingProfileResponsePtrOutput) Elem() GalleryImageVersionPublishingProfileResponseOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) GalleryImageVersionPublishingProfileResponse {
		if v != nil {
			return *v
		}
		var ret GalleryImageVersionPublishingProfileResponse
		return ret
	}).(GalleryImageVersionPublishingProfileResponseOutput)
}

// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) EndOfLifeDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndOfLifeDate
	}).(pulumi.StringPtrOutput)
}

// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ExcludeFromLatest
	}).(pulumi.BoolPtrOutput)
}

// The timestamp for when the gallery image version is published.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) PublishedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublishedDate
	}).(pulumi.StringPtrOutput)
}

// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.IntPtrOutput)
}

// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) ReplicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationMode
	}).(pulumi.StringPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) TargetExtendedLocations() GalleryTargetExtendedLocationResponseArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) []GalleryTargetExtendedLocationResponse {
		if v == nil {
			return nil
		}
		return v.TargetExtendedLocations
	}).(GalleryTargetExtendedLocationResponseArrayOutput)
}

// The target regions where the Image Version is going to be replicated to. This property is updatable.
func (o GalleryImageVersionPublishingProfileResponsePtrOutput) TargetRegions() TargetRegionResponseArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionPublishingProfileResponse) []TargetRegionResponse {
		if v == nil {
			return nil
		}
		return v.TargetRegions
	}).(TargetRegionResponseArrayOutput)
}

// This is the safety profile of the Gallery Image Version.
type GalleryImageVersionSafetyProfile struct {
	// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
	AllowDeletionOfReplicatedLocations *bool `pulumi:"allowDeletionOfReplicatedLocations"`
	// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
	BlockDeletionBeforeEndOfLife *bool `pulumi:"blockDeletionBeforeEndOfLife"`
}

// GalleryImageVersionSafetyProfileInput is an input type that accepts GalleryImageVersionSafetyProfileArgs and GalleryImageVersionSafetyProfileOutput values.
// You can construct a concrete instance of `GalleryImageVersionSafetyProfileInput` via:
//
//	GalleryImageVersionSafetyProfileArgs{...}
type GalleryImageVersionSafetyProfileInput interface {
	pulumi.Input

	ToGalleryImageVersionSafetyProfileOutput() GalleryImageVersionSafetyProfileOutput
	ToGalleryImageVersionSafetyProfileOutputWithContext(context.Context) GalleryImageVersionSafetyProfileOutput
}

// This is the safety profile of the Gallery Image Version.
type GalleryImageVersionSafetyProfileArgs struct {
	// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
	AllowDeletionOfReplicatedLocations pulumi.BoolPtrInput `pulumi:"allowDeletionOfReplicatedLocations"`
	// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
	BlockDeletionBeforeEndOfLife pulumi.BoolPtrInput `pulumi:"blockDeletionBeforeEndOfLife"`
}

func (GalleryImageVersionSafetyProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionSafetyProfile)(nil)).Elem()
}

func (i GalleryImageVersionSafetyProfileArgs) ToGalleryImageVersionSafetyProfileOutput() GalleryImageVersionSafetyProfileOutput {
	return i.ToGalleryImageVersionSafetyProfileOutputWithContext(context.Background())
}

func (i GalleryImageVersionSafetyProfileArgs) ToGalleryImageVersionSafetyProfileOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionSafetyProfileOutput)
}

func (i GalleryImageVersionSafetyProfileArgs) ToGalleryImageVersionSafetyProfilePtrOutput() GalleryImageVersionSafetyProfilePtrOutput {
	return i.ToGalleryImageVersionSafetyProfilePtrOutputWithContext(context.Background())
}

func (i GalleryImageVersionSafetyProfileArgs) ToGalleryImageVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionSafetyProfileOutput).ToGalleryImageVersionSafetyProfilePtrOutputWithContext(ctx)
}

// GalleryImageVersionSafetyProfilePtrInput is an input type that accepts GalleryImageVersionSafetyProfileArgs, GalleryImageVersionSafetyProfilePtr and GalleryImageVersionSafetyProfilePtrOutput values.
// You can construct a concrete instance of `GalleryImageVersionSafetyProfilePtrInput` via:
//
//	        GalleryImageVersionSafetyProfileArgs{...}
//
//	or:
//
//	        nil
type GalleryImageVersionSafetyProfilePtrInput interface {
	pulumi.Input

	ToGalleryImageVersionSafetyProfilePtrOutput() GalleryImageVersionSafetyProfilePtrOutput
	ToGalleryImageVersionSafetyProfilePtrOutputWithContext(context.Context) GalleryImageVersionSafetyProfilePtrOutput
}

type galleryImageVersionSafetyProfilePtrType GalleryImageVersionSafetyProfileArgs

func GalleryImageVersionSafetyProfilePtr(v *GalleryImageVersionSafetyProfileArgs) GalleryImageVersionSafetyProfilePtrInput {
	return (*galleryImageVersionSafetyProfilePtrType)(v)
}

func (*galleryImageVersionSafetyProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionSafetyProfile)(nil)).Elem()
}

func (i *galleryImageVersionSafetyProfilePtrType) ToGalleryImageVersionSafetyProfilePtrOutput() GalleryImageVersionSafetyProfilePtrOutput {
	return i.ToGalleryImageVersionSafetyProfilePtrOutputWithContext(context.Background())
}

func (i *galleryImageVersionSafetyProfilePtrType) ToGalleryImageVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionSafetyProfilePtrOutput)
}

// This is the safety profile of the Gallery Image Version.
type GalleryImageVersionSafetyProfileOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionSafetyProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionSafetyProfile)(nil)).Elem()
}

func (o GalleryImageVersionSafetyProfileOutput) ToGalleryImageVersionSafetyProfileOutput() GalleryImageVersionSafetyProfileOutput {
	return o
}

func (o GalleryImageVersionSafetyProfileOutput) ToGalleryImageVersionSafetyProfileOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfileOutput {
	return o
}

func (o GalleryImageVersionSafetyProfileOutput) ToGalleryImageVersionSafetyProfilePtrOutput() GalleryImageVersionSafetyProfilePtrOutput {
	return o.ToGalleryImageVersionSafetyProfilePtrOutputWithContext(context.Background())
}

func (o GalleryImageVersionSafetyProfileOutput) ToGalleryImageVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryImageVersionSafetyProfile) *GalleryImageVersionSafetyProfile {
		return &v
	}).(GalleryImageVersionSafetyProfilePtrOutput)
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryImageVersionSafetyProfileOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionSafetyProfile) *bool { return v.AllowDeletionOfReplicatedLocations }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
func (o GalleryImageVersionSafetyProfileOutput) BlockDeletionBeforeEndOfLife() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionSafetyProfile) *bool { return v.BlockDeletionBeforeEndOfLife }).(pulumi.BoolPtrOutput)
}

type GalleryImageVersionSafetyProfilePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionSafetyProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionSafetyProfile)(nil)).Elem()
}

func (o GalleryImageVersionSafetyProfilePtrOutput) ToGalleryImageVersionSafetyProfilePtrOutput() GalleryImageVersionSafetyProfilePtrOutput {
	return o
}

func (o GalleryImageVersionSafetyProfilePtrOutput) ToGalleryImageVersionSafetyProfilePtrOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfilePtrOutput {
	return o
}

func (o GalleryImageVersionSafetyProfilePtrOutput) Elem() GalleryImageVersionSafetyProfileOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfile) GalleryImageVersionSafetyProfile {
		if v != nil {
			return *v
		}
		var ret GalleryImageVersionSafetyProfile
		return ret
	}).(GalleryImageVersionSafetyProfileOutput)
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryImageVersionSafetyProfilePtrOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeletionOfReplicatedLocations
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
func (o GalleryImageVersionSafetyProfilePtrOutput) BlockDeletionBeforeEndOfLife() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfile) *bool {
		if v == nil {
			return nil
		}
		return v.BlockDeletionBeforeEndOfLife
	}).(pulumi.BoolPtrOutput)
}

// This is the safety profile of the Gallery Image Version.
type GalleryImageVersionSafetyProfileResponse struct {
	// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
	AllowDeletionOfReplicatedLocations *bool `pulumi:"allowDeletionOfReplicatedLocations"`
	// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
	BlockDeletionBeforeEndOfLife *bool `pulumi:"blockDeletionBeforeEndOfLife"`
	// A list of Policy Violations that have been reported for this Gallery Image Version.
	PolicyViolations []PolicyViolationResponse `pulumi:"policyViolations"`
	// Indicates whether this image has been reported as violating Microsoft's policies.
	ReportedForPolicyViolation bool `pulumi:"reportedForPolicyViolation"`
}

// This is the safety profile of the Gallery Image Version.
type GalleryImageVersionSafetyProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionSafetyProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionSafetyProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionSafetyProfileResponseOutput) ToGalleryImageVersionSafetyProfileResponseOutput() GalleryImageVersionSafetyProfileResponseOutput {
	return o
}

func (o GalleryImageVersionSafetyProfileResponseOutput) ToGalleryImageVersionSafetyProfileResponseOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfileResponseOutput {
	return o
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryImageVersionSafetyProfileResponseOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionSafetyProfileResponse) *bool { return v.AllowDeletionOfReplicatedLocations }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
func (o GalleryImageVersionSafetyProfileResponseOutput) BlockDeletionBeforeEndOfLife() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionSafetyProfileResponse) *bool { return v.BlockDeletionBeforeEndOfLife }).(pulumi.BoolPtrOutput)
}

// A list of Policy Violations that have been reported for this Gallery Image Version.
func (o GalleryImageVersionSafetyProfileResponseOutput) PolicyViolations() PolicyViolationResponseArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionSafetyProfileResponse) []PolicyViolationResponse { return v.PolicyViolations }).(PolicyViolationResponseArrayOutput)
}

// Indicates whether this image has been reported as violating Microsoft's policies.
func (o GalleryImageVersionSafetyProfileResponseOutput) ReportedForPolicyViolation() pulumi.BoolOutput {
	return o.ApplyT(func(v GalleryImageVersionSafetyProfileResponse) bool { return v.ReportedForPolicyViolation }).(pulumi.BoolOutput)
}

type GalleryImageVersionSafetyProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionSafetyProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionSafetyProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionSafetyProfileResponsePtrOutput) ToGalleryImageVersionSafetyProfileResponsePtrOutput() GalleryImageVersionSafetyProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionSafetyProfileResponsePtrOutput) ToGalleryImageVersionSafetyProfileResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionSafetyProfileResponsePtrOutput {
	return o
}

func (o GalleryImageVersionSafetyProfileResponsePtrOutput) Elem() GalleryImageVersionSafetyProfileResponseOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfileResponse) GalleryImageVersionSafetyProfileResponse {
		if v != nil {
			return *v
		}
		var ret GalleryImageVersionSafetyProfileResponse
		return ret
	}).(GalleryImageVersionSafetyProfileResponseOutput)
}

// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
func (o GalleryImageVersionSafetyProfileResponsePtrOutput) AllowDeletionOfReplicatedLocations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeletionOfReplicatedLocations
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
func (o GalleryImageVersionSafetyProfileResponsePtrOutput) BlockDeletionBeforeEndOfLife() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BlockDeletionBeforeEndOfLife
	}).(pulumi.BoolPtrOutput)
}

// A list of Policy Violations that have been reported for this Gallery Image Version.
func (o GalleryImageVersionSafetyProfileResponsePtrOutput) PolicyViolations() PolicyViolationResponseArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfileResponse) []PolicyViolationResponse {
		if v == nil {
			return nil
		}
		return v.PolicyViolations
	}).(PolicyViolationResponseArrayOutput)
}

// Indicates whether this image has been reported as violating Microsoft's policies.
func (o GalleryImageVersionSafetyProfileResponsePtrOutput) ReportedForPolicyViolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionSafetyProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ReportedForPolicyViolation
	}).(pulumi.BoolPtrOutput)
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfile struct {
	// A list of data disk images.
	DataDiskImages []GalleryDataDiskImage `pulumi:"dataDiskImages"`
	// This is the OS disk image.
	OsDiskImage *GalleryOSDiskImage `pulumi:"osDiskImage"`
	// The source of the gallery artifact version.
	Source *GalleryArtifactVersionFullSource `pulumi:"source"`
}

// GalleryImageVersionStorageProfileInput is an input type that accepts GalleryImageVersionStorageProfileArgs and GalleryImageVersionStorageProfileOutput values.
// You can construct a concrete instance of `GalleryImageVersionStorageProfileInput` via:
//
//	GalleryImageVersionStorageProfileArgs{...}
type GalleryImageVersionStorageProfileInput interface {
	pulumi.Input

	ToGalleryImageVersionStorageProfileOutput() GalleryImageVersionStorageProfileOutput
	ToGalleryImageVersionStorageProfileOutputWithContext(context.Context) GalleryImageVersionStorageProfileOutput
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileArgs struct {
	// A list of data disk images.
	DataDiskImages GalleryDataDiskImageArrayInput `pulumi:"dataDiskImages"`
	// This is the OS disk image.
	OsDiskImage GalleryOSDiskImagePtrInput `pulumi:"osDiskImage"`
	// The source of the gallery artifact version.
	Source GalleryArtifactVersionFullSourcePtrInput `pulumi:"source"`
}

func (GalleryImageVersionStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionStorageProfile)(nil)).Elem()
}

func (i GalleryImageVersionStorageProfileArgs) ToGalleryImageVersionStorageProfileOutput() GalleryImageVersionStorageProfileOutput {
	return i.ToGalleryImageVersionStorageProfileOutputWithContext(context.Background())
}

func (i GalleryImageVersionStorageProfileArgs) ToGalleryImageVersionStorageProfileOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionStorageProfileOutput)
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionStorageProfile)(nil)).Elem()
}

func (o GalleryImageVersionStorageProfileOutput) ToGalleryImageVersionStorageProfileOutput() GalleryImageVersionStorageProfileOutput {
	return o
}

func (o GalleryImageVersionStorageProfileOutput) ToGalleryImageVersionStorageProfileOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileOutput {
	return o
}

// A list of data disk images.
func (o GalleryImageVersionStorageProfileOutput) DataDiskImages() GalleryDataDiskImageArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfile) []GalleryDataDiskImage { return v.DataDiskImages }).(GalleryDataDiskImageArrayOutput)
}

// This is the OS disk image.
func (o GalleryImageVersionStorageProfileOutput) OsDiskImage() GalleryOSDiskImagePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfile) *GalleryOSDiskImage { return v.OsDiskImage }).(GalleryOSDiskImagePtrOutput)
}

// The source of the gallery artifact version.
func (o GalleryImageVersionStorageProfileOutput) Source() GalleryArtifactVersionFullSourcePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfile) *GalleryArtifactVersionFullSource { return v.Source }).(GalleryArtifactVersionFullSourcePtrOutput)
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileResponse struct {
	// A list of data disk images.
	DataDiskImages []GalleryDataDiskImageResponse `pulumi:"dataDiskImages"`
	// This is the OS disk image.
	OsDiskImage *GalleryOSDiskImageResponse `pulumi:"osDiskImage"`
	// The source of the gallery artifact version.
	Source *GalleryArtifactVersionFullSourceResponse `pulumi:"source"`
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionStorageProfileResponse)(nil)).Elem()
}

func (o GalleryImageVersionStorageProfileResponseOutput) ToGalleryImageVersionStorageProfileResponseOutput() GalleryImageVersionStorageProfileResponseOutput {
	return o
}

func (o GalleryImageVersionStorageProfileResponseOutput) ToGalleryImageVersionStorageProfileResponseOutputWithContext(ctx context.Context) GalleryImageVersionStorageProfileResponseOutput {
	return o
}

// A list of data disk images.
func (o GalleryImageVersionStorageProfileResponseOutput) DataDiskImages() GalleryDataDiskImageResponseArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) []GalleryDataDiskImageResponse {
		return v.DataDiskImages
	}).(GalleryDataDiskImageResponseArrayOutput)
}

// This is the OS disk image.
func (o GalleryImageVersionStorageProfileResponseOutput) OsDiskImage() GalleryOSDiskImageResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) *GalleryOSDiskImageResponse { return v.OsDiskImage }).(GalleryOSDiskImageResponsePtrOutput)
}

// The source of the gallery artifact version.
func (o GalleryImageVersionStorageProfileResponseOutput) Source() GalleryArtifactVersionFullSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionStorageProfileResponse) *GalleryArtifactVersionFullSourceResponse {
		return v.Source
	}).(GalleryArtifactVersionFullSourceResponsePtrOutput)
}

// Contains UEFI settings for the image version.
type GalleryImageVersionUefiSettings struct {
	// Additional UEFI key signatures that will be added to the image in addition to the signature templates
	AdditionalSignatures *UefiKeySignatures `pulumi:"additionalSignatures"`
	// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
	SignatureTemplateNames []string `pulumi:"signatureTemplateNames"`
}

// GalleryImageVersionUefiSettingsInput is an input type that accepts GalleryImageVersionUefiSettingsArgs and GalleryImageVersionUefiSettingsOutput values.
// You can construct a concrete instance of `GalleryImageVersionUefiSettingsInput` via:
//
//	GalleryImageVersionUefiSettingsArgs{...}
type GalleryImageVersionUefiSettingsInput interface {
	pulumi.Input

	ToGalleryImageVersionUefiSettingsOutput() GalleryImageVersionUefiSettingsOutput
	ToGalleryImageVersionUefiSettingsOutputWithContext(context.Context) GalleryImageVersionUefiSettingsOutput
}

// Contains UEFI settings for the image version.
type GalleryImageVersionUefiSettingsArgs struct {
	// Additional UEFI key signatures that will be added to the image in addition to the signature templates
	AdditionalSignatures UefiKeySignaturesPtrInput `pulumi:"additionalSignatures"`
	// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
	SignatureTemplateNames pulumi.StringArrayInput `pulumi:"signatureTemplateNames"`
}

func (GalleryImageVersionUefiSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionUefiSettings)(nil)).Elem()
}

func (i GalleryImageVersionUefiSettingsArgs) ToGalleryImageVersionUefiSettingsOutput() GalleryImageVersionUefiSettingsOutput {
	return i.ToGalleryImageVersionUefiSettingsOutputWithContext(context.Background())
}

func (i GalleryImageVersionUefiSettingsArgs) ToGalleryImageVersionUefiSettingsOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionUefiSettingsOutput)
}

func (i GalleryImageVersionUefiSettingsArgs) ToGalleryImageVersionUefiSettingsPtrOutput() GalleryImageVersionUefiSettingsPtrOutput {
	return i.ToGalleryImageVersionUefiSettingsPtrOutputWithContext(context.Background())
}

func (i GalleryImageVersionUefiSettingsArgs) ToGalleryImageVersionUefiSettingsPtrOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionUefiSettingsOutput).ToGalleryImageVersionUefiSettingsPtrOutputWithContext(ctx)
}

// GalleryImageVersionUefiSettingsPtrInput is an input type that accepts GalleryImageVersionUefiSettingsArgs, GalleryImageVersionUefiSettingsPtr and GalleryImageVersionUefiSettingsPtrOutput values.
// You can construct a concrete instance of `GalleryImageVersionUefiSettingsPtrInput` via:
//
//	        GalleryImageVersionUefiSettingsArgs{...}
//
//	or:
//
//	        nil
type GalleryImageVersionUefiSettingsPtrInput interface {
	pulumi.Input

	ToGalleryImageVersionUefiSettingsPtrOutput() GalleryImageVersionUefiSettingsPtrOutput
	ToGalleryImageVersionUefiSettingsPtrOutputWithContext(context.Context) GalleryImageVersionUefiSettingsPtrOutput
}

type galleryImageVersionUefiSettingsPtrType GalleryImageVersionUefiSettingsArgs

func GalleryImageVersionUefiSettingsPtr(v *GalleryImageVersionUefiSettingsArgs) GalleryImageVersionUefiSettingsPtrInput {
	return (*galleryImageVersionUefiSettingsPtrType)(v)
}

func (*galleryImageVersionUefiSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionUefiSettings)(nil)).Elem()
}

func (i *galleryImageVersionUefiSettingsPtrType) ToGalleryImageVersionUefiSettingsPtrOutput() GalleryImageVersionUefiSettingsPtrOutput {
	return i.ToGalleryImageVersionUefiSettingsPtrOutputWithContext(context.Background())
}

func (i *galleryImageVersionUefiSettingsPtrType) ToGalleryImageVersionUefiSettingsPtrOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryImageVersionUefiSettingsPtrOutput)
}

// Contains UEFI settings for the image version.
type GalleryImageVersionUefiSettingsOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionUefiSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionUefiSettings)(nil)).Elem()
}

func (o GalleryImageVersionUefiSettingsOutput) ToGalleryImageVersionUefiSettingsOutput() GalleryImageVersionUefiSettingsOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsOutput) ToGalleryImageVersionUefiSettingsOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsOutput) ToGalleryImageVersionUefiSettingsPtrOutput() GalleryImageVersionUefiSettingsPtrOutput {
	return o.ToGalleryImageVersionUefiSettingsPtrOutputWithContext(context.Background())
}

func (o GalleryImageVersionUefiSettingsOutput) ToGalleryImageVersionUefiSettingsPtrOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryImageVersionUefiSettings) *GalleryImageVersionUefiSettings {
		return &v
	}).(GalleryImageVersionUefiSettingsPtrOutput)
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
func (o GalleryImageVersionUefiSettingsOutput) AdditionalSignatures() UefiKeySignaturesPtrOutput {
	return o.ApplyT(func(v GalleryImageVersionUefiSettings) *UefiKeySignatures { return v.AdditionalSignatures }).(UefiKeySignaturesPtrOutput)
}

// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
func (o GalleryImageVersionUefiSettingsOutput) SignatureTemplateNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionUefiSettings) []string { return v.SignatureTemplateNames }).(pulumi.StringArrayOutput)
}

type GalleryImageVersionUefiSettingsPtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionUefiSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionUefiSettings)(nil)).Elem()
}

func (o GalleryImageVersionUefiSettingsPtrOutput) ToGalleryImageVersionUefiSettingsPtrOutput() GalleryImageVersionUefiSettingsPtrOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsPtrOutput) ToGalleryImageVersionUefiSettingsPtrOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsPtrOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsPtrOutput) Elem() GalleryImageVersionUefiSettingsOutput {
	return o.ApplyT(func(v *GalleryImageVersionUefiSettings) GalleryImageVersionUefiSettings {
		if v != nil {
			return *v
		}
		var ret GalleryImageVersionUefiSettings
		return ret
	}).(GalleryImageVersionUefiSettingsOutput)
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
func (o GalleryImageVersionUefiSettingsPtrOutput) AdditionalSignatures() UefiKeySignaturesPtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionUefiSettings) *UefiKeySignatures {
		if v == nil {
			return nil
		}
		return v.AdditionalSignatures
	}).(UefiKeySignaturesPtrOutput)
}

// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
func (o GalleryImageVersionUefiSettingsPtrOutput) SignatureTemplateNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionUefiSettings) []string {
		if v == nil {
			return nil
		}
		return v.SignatureTemplateNames
	}).(pulumi.StringArrayOutput)
}

// Contains UEFI settings for the image version.
type GalleryImageVersionUefiSettingsResponse struct {
	// Additional UEFI key signatures that will be added to the image in addition to the signature templates
	AdditionalSignatures *UefiKeySignaturesResponse `pulumi:"additionalSignatures"`
	// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
	SignatureTemplateNames []string `pulumi:"signatureTemplateNames"`
}

// Contains UEFI settings for the image version.
type GalleryImageVersionUefiSettingsResponseOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionUefiSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryImageVersionUefiSettingsResponse)(nil)).Elem()
}

func (o GalleryImageVersionUefiSettingsResponseOutput) ToGalleryImageVersionUefiSettingsResponseOutput() GalleryImageVersionUefiSettingsResponseOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsResponseOutput) ToGalleryImageVersionUefiSettingsResponseOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsResponseOutput {
	return o
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
func (o GalleryImageVersionUefiSettingsResponseOutput) AdditionalSignatures() UefiKeySignaturesResponsePtrOutput {
	return o.ApplyT(func(v GalleryImageVersionUefiSettingsResponse) *UefiKeySignaturesResponse {
		return v.AdditionalSignatures
	}).(UefiKeySignaturesResponsePtrOutput)
}

// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
func (o GalleryImageVersionUefiSettingsResponseOutput) SignatureTemplateNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GalleryImageVersionUefiSettingsResponse) []string { return v.SignatureTemplateNames }).(pulumi.StringArrayOutput)
}

type GalleryImageVersionUefiSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryImageVersionUefiSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryImageVersionUefiSettingsResponse)(nil)).Elem()
}

func (o GalleryImageVersionUefiSettingsResponsePtrOutput) ToGalleryImageVersionUefiSettingsResponsePtrOutput() GalleryImageVersionUefiSettingsResponsePtrOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsResponsePtrOutput) ToGalleryImageVersionUefiSettingsResponsePtrOutputWithContext(ctx context.Context) GalleryImageVersionUefiSettingsResponsePtrOutput {
	return o
}

func (o GalleryImageVersionUefiSettingsResponsePtrOutput) Elem() GalleryImageVersionUefiSettingsResponseOutput {
	return o.ApplyT(func(v *GalleryImageVersionUefiSettingsResponse) GalleryImageVersionUefiSettingsResponse {
		if v != nil {
			return *v
		}
		var ret GalleryImageVersionUefiSettingsResponse
		return ret
	}).(GalleryImageVersionUefiSettingsResponseOutput)
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
func (o GalleryImageVersionUefiSettingsResponsePtrOutput) AdditionalSignatures() UefiKeySignaturesResponsePtrOutput {
	return o.ApplyT(func(v *GalleryImageVersionUefiSettingsResponse) *UefiKeySignaturesResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalSignatures
	}).(UefiKeySignaturesResponsePtrOutput)
}

// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
func (o GalleryImageVersionUefiSettingsResponsePtrOutput) SignatureTemplateNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GalleryImageVersionUefiSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.SignatureTemplateNames
	}).(pulumi.StringArrayOutput)
}

// Describes the properties of a gallery inVMAccessControlProfile.
type GalleryInVMAccessControlProfileProperties struct {
	// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
	ApplicableHostEndpoint EndpointTypes `pulumi:"applicableHostEndpoint"`
	// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
	Description *string `pulumi:"description"`
	// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
	OsType OperatingSystemTypes `pulumi:"osType"`
}

// GalleryInVMAccessControlProfilePropertiesInput is an input type that accepts GalleryInVMAccessControlProfilePropertiesArgs and GalleryInVMAccessControlProfilePropertiesOutput values.
// You can construct a concrete instance of `GalleryInVMAccessControlProfilePropertiesInput` via:
//
//	GalleryInVMAccessControlProfilePropertiesArgs{...}
type GalleryInVMAccessControlProfilePropertiesInput interface {
	pulumi.Input

	ToGalleryInVMAccessControlProfilePropertiesOutput() GalleryInVMAccessControlProfilePropertiesOutput
	ToGalleryInVMAccessControlProfilePropertiesOutputWithContext(context.Context) GalleryInVMAccessControlProfilePropertiesOutput
}

// Describes the properties of a gallery inVMAccessControlProfile.
type GalleryInVMAccessControlProfilePropertiesArgs struct {
	// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
	ApplicableHostEndpoint EndpointTypesInput `pulumi:"applicableHostEndpoint"`
	// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
	OsType OperatingSystemTypesInput `pulumi:"osType"`
}

func (GalleryInVMAccessControlProfilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryInVMAccessControlProfileProperties)(nil)).Elem()
}

func (i GalleryInVMAccessControlProfilePropertiesArgs) ToGalleryInVMAccessControlProfilePropertiesOutput() GalleryInVMAccessControlProfilePropertiesOutput {
	return i.ToGalleryInVMAccessControlProfilePropertiesOutputWithContext(context.Background())
}

func (i GalleryInVMAccessControlProfilePropertiesArgs) ToGalleryInVMAccessControlProfilePropertiesOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryInVMAccessControlProfilePropertiesOutput)
}

func (i GalleryInVMAccessControlProfilePropertiesArgs) ToGalleryInVMAccessControlProfilePropertiesPtrOutput() GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return i.ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i GalleryInVMAccessControlProfilePropertiesArgs) ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryInVMAccessControlProfilePropertiesOutput).ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(ctx)
}

// GalleryInVMAccessControlProfilePropertiesPtrInput is an input type that accepts GalleryInVMAccessControlProfilePropertiesArgs, GalleryInVMAccessControlProfilePropertiesPtr and GalleryInVMAccessControlProfilePropertiesPtrOutput values.
// You can construct a concrete instance of `GalleryInVMAccessControlProfilePropertiesPtrInput` via:
//
//	        GalleryInVMAccessControlProfilePropertiesArgs{...}
//
//	or:
//
//	        nil
type GalleryInVMAccessControlProfilePropertiesPtrInput interface {
	pulumi.Input

	ToGalleryInVMAccessControlProfilePropertiesPtrOutput() GalleryInVMAccessControlProfilePropertiesPtrOutput
	ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(context.Context) GalleryInVMAccessControlProfilePropertiesPtrOutput
}

type galleryInVMAccessControlProfilePropertiesPtrType GalleryInVMAccessControlProfilePropertiesArgs

func GalleryInVMAccessControlProfilePropertiesPtr(v *GalleryInVMAccessControlProfilePropertiesArgs) GalleryInVMAccessControlProfilePropertiesPtrInput {
	return (*galleryInVMAccessControlProfilePropertiesPtrType)(v)
}

func (*galleryInVMAccessControlProfilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryInVMAccessControlProfileProperties)(nil)).Elem()
}

func (i *galleryInVMAccessControlProfilePropertiesPtrType) ToGalleryInVMAccessControlProfilePropertiesPtrOutput() GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return i.ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(context.Background())
}

func (i *galleryInVMAccessControlProfilePropertiesPtrType) ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryInVMAccessControlProfilePropertiesPtrOutput)
}

// Describes the properties of a gallery inVMAccessControlProfile.
type GalleryInVMAccessControlProfilePropertiesOutput struct{ *pulumi.OutputState }

func (GalleryInVMAccessControlProfilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryInVMAccessControlProfileProperties)(nil)).Elem()
}

func (o GalleryInVMAccessControlProfilePropertiesOutput) ToGalleryInVMAccessControlProfilePropertiesOutput() GalleryInVMAccessControlProfilePropertiesOutput {
	return o
}

func (o GalleryInVMAccessControlProfilePropertiesOutput) ToGalleryInVMAccessControlProfilePropertiesOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesOutput {
	return o
}

func (o GalleryInVMAccessControlProfilePropertiesOutput) ToGalleryInVMAccessControlProfilePropertiesPtrOutput() GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return o.ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(context.Background())
}

func (o GalleryInVMAccessControlProfilePropertiesOutput) ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryInVMAccessControlProfileProperties) *GalleryInVMAccessControlProfileProperties {
		return &v
	}).(GalleryInVMAccessControlProfilePropertiesPtrOutput)
}

// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
func (o GalleryInVMAccessControlProfilePropertiesOutput) ApplicableHostEndpoint() EndpointTypesOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfileProperties) EndpointTypes { return v.ApplicableHostEndpoint }).(EndpointTypesOutput)
}

// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
func (o GalleryInVMAccessControlProfilePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfileProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
func (o GalleryInVMAccessControlProfilePropertiesOutput) OsType() OperatingSystemTypesOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfileProperties) OperatingSystemTypes { return v.OsType }).(OperatingSystemTypesOutput)
}

type GalleryInVMAccessControlProfilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (GalleryInVMAccessControlProfilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryInVMAccessControlProfileProperties)(nil)).Elem()
}

func (o GalleryInVMAccessControlProfilePropertiesPtrOutput) ToGalleryInVMAccessControlProfilePropertiesPtrOutput() GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return o
}

func (o GalleryInVMAccessControlProfilePropertiesPtrOutput) ToGalleryInVMAccessControlProfilePropertiesPtrOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesPtrOutput {
	return o
}

func (o GalleryInVMAccessControlProfilePropertiesPtrOutput) Elem() GalleryInVMAccessControlProfilePropertiesOutput {
	return o.ApplyT(func(v *GalleryInVMAccessControlProfileProperties) GalleryInVMAccessControlProfileProperties {
		if v != nil {
			return *v
		}
		var ret GalleryInVMAccessControlProfileProperties
		return ret
	}).(GalleryInVMAccessControlProfilePropertiesOutput)
}

// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
func (o GalleryInVMAccessControlProfilePropertiesPtrOutput) ApplicableHostEndpoint() EndpointTypesPtrOutput {
	return o.ApplyT(func(v *GalleryInVMAccessControlProfileProperties) *EndpointTypes {
		if v == nil {
			return nil
		}
		return &v.ApplicableHostEndpoint
	}).(EndpointTypesPtrOutput)
}

// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
func (o GalleryInVMAccessControlProfilePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryInVMAccessControlProfileProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
func (o GalleryInVMAccessControlProfilePropertiesPtrOutput) OsType() OperatingSystemTypesPtrOutput {
	return o.ApplyT(func(v *GalleryInVMAccessControlProfileProperties) *OperatingSystemTypes {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(OperatingSystemTypesPtrOutput)
}

// Describes the properties of a gallery inVMAccessControlProfile.
type GalleryInVMAccessControlProfilePropertiesResponse struct {
	// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
	ApplicableHostEndpoint string `pulumi:"applicableHostEndpoint"`
	// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
	Description *string `pulumi:"description"`
	// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
	OsType string `pulumi:"osType"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Describes the properties of a gallery inVMAccessControlProfile.
type GalleryInVMAccessControlProfilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (GalleryInVMAccessControlProfilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryInVMAccessControlProfilePropertiesResponse)(nil)).Elem()
}

func (o GalleryInVMAccessControlProfilePropertiesResponseOutput) ToGalleryInVMAccessControlProfilePropertiesResponseOutput() GalleryInVMAccessControlProfilePropertiesResponseOutput {
	return o
}

func (o GalleryInVMAccessControlProfilePropertiesResponseOutput) ToGalleryInVMAccessControlProfilePropertiesResponseOutputWithContext(ctx context.Context) GalleryInVMAccessControlProfilePropertiesResponseOutput {
	return o
}

// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
func (o GalleryInVMAccessControlProfilePropertiesResponseOutput) ApplicableHostEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfilePropertiesResponse) string { return v.ApplicableHostEndpoint }).(pulumi.StringOutput)
}

// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
func (o GalleryInVMAccessControlProfilePropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfilePropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
func (o GalleryInVMAccessControlProfilePropertiesResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfilePropertiesResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The provisioning state, which only appears in the response.
func (o GalleryInVMAccessControlProfilePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GalleryInVMAccessControlProfilePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// This is the OS disk image.
type GalleryOSDiskImage struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *HostCaching `pulumi:"hostCaching"`
	// The source for the disk image.
	Source *GalleryDiskImageSource `pulumi:"source"`
}

// GalleryOSDiskImageInput is an input type that accepts GalleryOSDiskImageArgs and GalleryOSDiskImageOutput values.
// You can construct a concrete instance of `GalleryOSDiskImageInput` via:
//
//	GalleryOSDiskImageArgs{...}
type GalleryOSDiskImageInput interface {
	pulumi.Input

	ToGalleryOSDiskImageOutput() GalleryOSDiskImageOutput
	ToGalleryOSDiskImageOutputWithContext(context.Context) GalleryOSDiskImageOutput
}

// This is the OS disk image.
type GalleryOSDiskImageArgs struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching HostCachingPtrInput `pulumi:"hostCaching"`
	// The source for the disk image.
	Source GalleryDiskImageSourcePtrInput `pulumi:"source"`
}

func (GalleryOSDiskImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryOSDiskImage)(nil)).Elem()
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImageOutput() GalleryOSDiskImageOutput {
	return i.ToGalleryOSDiskImageOutputWithContext(context.Background())
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImageOutputWithContext(ctx context.Context) GalleryOSDiskImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOSDiskImageOutput)
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput {
	return i.ToGalleryOSDiskImagePtrOutputWithContext(context.Background())
}

func (i GalleryOSDiskImageArgs) ToGalleryOSDiskImagePtrOutputWithContext(ctx context.Context) GalleryOSDiskImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOSDiskImageOutput).ToGalleryOSDiskImagePtrOutputWithContext(ctx)
}

// GalleryOSDiskImagePtrInput is an input type that accepts GalleryOSDiskImageArgs, GalleryOSDiskImagePtr and GalleryOSDiskImagePtrOutput values.
// You can construct a concrete instance of `GalleryOSDiskImagePtrInput` via:
//
//	        GalleryOSDiskImageArgs{...}
//
//	or:
//
//	        nil
type GalleryOSDiskImagePtrInput interface {
	pulumi.Input

	ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput
	ToGalleryOSDiskImagePtrOutputWithContext(context.Context) GalleryOSDiskImagePtrOutput
}

type galleryOSDiskImagePtrType GalleryOSDiskImageArgs

func GalleryOSDiskImagePtr(v *GalleryOSDiskImageArgs) GalleryOSDiskImagePtrInput {
	return (*galleryOSDiskImagePtrType)(v)
}

func (*galleryOSDiskImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryOSDiskImage)(nil)).Elem()
}

func (i *galleryOSDiskImagePtrType) ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput {
	return i.ToGalleryOSDiskImagePtrOutputWithContext(context.Background())
}

func (i *galleryOSDiskImagePtrType) ToGalleryOSDiskImagePtrOutputWithContext(ctx context.Context) GalleryOSDiskImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryOSDiskImagePtrOutput)
}

// This is the OS disk image.
type GalleryOSDiskImageOutput struct{ *pulumi.OutputState }

func (GalleryOSDiskImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryOSDiskImage)(nil)).Elem()
}

func (o GalleryOSDiskImageOutput) ToGalleryOSDiskImageOutput() GalleryOSDiskImageOutput {
	return o
}

func (o GalleryOSDiskImageOutput) ToGalleryOSDiskImageOutputWithContext(ctx context.Context) GalleryOSDiskImageOutput {
	return o
}

func (o GalleryOSDiskImageOutput) ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput {
	return o.ToGalleryOSDiskImagePtrOutputWithContext(context.Background())
}

func (o GalleryOSDiskImageOutput) ToGalleryOSDiskImagePtrOutputWithContext(ctx context.Context) GalleryOSDiskImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GalleryOSDiskImage) *GalleryOSDiskImage {
		return &v
	}).(GalleryOSDiskImagePtrOutput)
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryOSDiskImageOutput) HostCaching() HostCachingPtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImage) *HostCaching { return v.HostCaching }).(HostCachingPtrOutput)
}

// The source for the disk image.
func (o GalleryOSDiskImageOutput) Source() GalleryDiskImageSourcePtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImage) *GalleryDiskImageSource { return v.Source }).(GalleryDiskImageSourcePtrOutput)
}

type GalleryOSDiskImagePtrOutput struct{ *pulumi.OutputState }

func (GalleryOSDiskImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryOSDiskImage)(nil)).Elem()
}

func (o GalleryOSDiskImagePtrOutput) ToGalleryOSDiskImagePtrOutput() GalleryOSDiskImagePtrOutput {
	return o
}

func (o GalleryOSDiskImagePtrOutput) ToGalleryOSDiskImagePtrOutputWithContext(ctx context.Context) GalleryOSDiskImagePtrOutput {
	return o
}

func (o GalleryOSDiskImagePtrOutput) Elem() GalleryOSDiskImageOutput {
	return o.ApplyT(func(v *GalleryOSDiskImage) GalleryOSDiskImage {
		if v != nil {
			return *v
		}
		var ret GalleryOSDiskImage
		return ret
	}).(GalleryOSDiskImageOutput)
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryOSDiskImagePtrOutput) HostCaching() HostCachingPtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImage) *HostCaching {
		if v == nil {
			return nil
		}
		return v.HostCaching
	}).(HostCachingPtrOutput)
}

// The source for the disk image.
func (o GalleryOSDiskImagePtrOutput) Source() GalleryDiskImageSourcePtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImage) *GalleryDiskImageSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(GalleryDiskImageSourcePtrOutput)
}

// This is the OS disk image.
type GalleryOSDiskImageResponse struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *string `pulumi:"hostCaching"`
	// This property indicates the size of the VHD to be created.
	SizeInGB int `pulumi:"sizeInGB"`
	// The source for the disk image.
	Source *GalleryDiskImageSourceResponse `pulumi:"source"`
}

// This is the OS disk image.
type GalleryOSDiskImageResponseOutput struct{ *pulumi.OutputState }

func (GalleryOSDiskImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryOSDiskImageResponse)(nil)).Elem()
}

func (o GalleryOSDiskImageResponseOutput) ToGalleryOSDiskImageResponseOutput() GalleryOSDiskImageResponseOutput {
	return o
}

func (o GalleryOSDiskImageResponseOutput) ToGalleryOSDiskImageResponseOutputWithContext(ctx context.Context) GalleryOSDiskImageResponseOutput {
	return o
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryOSDiskImageResponseOutput) HostCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) *string { return v.HostCaching }).(pulumi.StringPtrOutput)
}

// This property indicates the size of the VHD to be created.
func (o GalleryOSDiskImageResponseOutput) SizeInGB() pulumi.IntOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) int { return v.SizeInGB }).(pulumi.IntOutput)
}

// The source for the disk image.
func (o GalleryOSDiskImageResponseOutput) Source() GalleryDiskImageSourceResponsePtrOutput {
	return o.ApplyT(func(v GalleryOSDiskImageResponse) *GalleryDiskImageSourceResponse { return v.Source }).(GalleryDiskImageSourceResponsePtrOutput)
}

type GalleryOSDiskImageResponsePtrOutput struct{ *pulumi.OutputState }

func (GalleryOSDiskImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GalleryOSDiskImageResponse)(nil)).Elem()
}

func (o GalleryOSDiskImageResponsePtrOutput) ToGalleryOSDiskImageResponsePtrOutput() GalleryOSDiskImageResponsePtrOutput {
	return o
}

func (o GalleryOSDiskImageResponsePtrOutput) ToGalleryOSDiskImageResponsePtrOutputWithContext(ctx context.Context) GalleryOSDiskImageResponsePtrOutput {
	return o
}

func (o GalleryOSDiskImageResponsePtrOutput) Elem() GalleryOSDiskImageResponseOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) GalleryOSDiskImageResponse {
		if v != nil {
			return *v
		}
		var ret GalleryOSDiskImageResponse
		return ret
	}).(GalleryOSDiskImageResponseOutput)
}

// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
func (o GalleryOSDiskImageResponsePtrOutput) HostCaching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostCaching
	}).(pulumi.StringPtrOutput)
}

// This property indicates the size of the VHD to be created.
func (o GalleryOSDiskImageResponsePtrOutput) SizeInGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SizeInGB
	}).(pulumi.IntPtrOutput)
}

// The source for the disk image.
func (o GalleryOSDiskImageResponsePtrOutput) Source() GalleryDiskImageSourceResponsePtrOutput {
	return o.ApplyT(func(v *GalleryOSDiskImageResponse) *GalleryDiskImageSourceResponse {
		if v == nil {
			return nil
		}
		return v.Source
	}).(GalleryDiskImageSourceResponsePtrOutput)
}

type GalleryTargetExtendedLocation struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImages `pulumi:"encryption"`
	// The name of the extended location.
	ExtendedLocation *GalleryExtendedLocation `pulumi:"extendedLocation"`
	// The number of replicas of the Image Version to be created per extended location. This property is updatable.
	ExtendedLocationReplicaCount *int `pulumi:"extendedLocationReplicaCount"`
	// The name of the region.
	Name *string `pulumi:"name"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// GalleryTargetExtendedLocationInput is an input type that accepts GalleryTargetExtendedLocationArgs and GalleryTargetExtendedLocationOutput values.
// You can construct a concrete instance of `GalleryTargetExtendedLocationInput` via:
//
//	GalleryTargetExtendedLocationArgs{...}
type GalleryTargetExtendedLocationInput interface {
	pulumi.Input

	ToGalleryTargetExtendedLocationOutput() GalleryTargetExtendedLocationOutput
	ToGalleryTargetExtendedLocationOutputWithContext(context.Context) GalleryTargetExtendedLocationOutput
}

type GalleryTargetExtendedLocationArgs struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption EncryptionImagesPtrInput `pulumi:"encryption"`
	// The name of the extended location.
	ExtendedLocation GalleryExtendedLocationPtrInput `pulumi:"extendedLocation"`
	// The number of replicas of the Image Version to be created per extended location. This property is updatable.
	ExtendedLocationReplicaCount pulumi.IntPtrInput `pulumi:"extendedLocationReplicaCount"`
	// The name of the region.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (GalleryTargetExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryTargetExtendedLocation)(nil)).Elem()
}

func (i GalleryTargetExtendedLocationArgs) ToGalleryTargetExtendedLocationOutput() GalleryTargetExtendedLocationOutput {
	return i.ToGalleryTargetExtendedLocationOutputWithContext(context.Background())
}

func (i GalleryTargetExtendedLocationArgs) ToGalleryTargetExtendedLocationOutputWithContext(ctx context.Context) GalleryTargetExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryTargetExtendedLocationOutput)
}

// GalleryTargetExtendedLocationArrayInput is an input type that accepts GalleryTargetExtendedLocationArray and GalleryTargetExtendedLocationArrayOutput values.
// You can construct a concrete instance of `GalleryTargetExtendedLocationArrayInput` via:
//
//	GalleryTargetExtendedLocationArray{ GalleryTargetExtendedLocationArgs{...} }
type GalleryTargetExtendedLocationArrayInput interface {
	pulumi.Input

	ToGalleryTargetExtendedLocationArrayOutput() GalleryTargetExtendedLocationArrayOutput
	ToGalleryTargetExtendedLocationArrayOutputWithContext(context.Context) GalleryTargetExtendedLocationArrayOutput
}

type GalleryTargetExtendedLocationArray []GalleryTargetExtendedLocationInput

func (GalleryTargetExtendedLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryTargetExtendedLocation)(nil)).Elem()
}

func (i GalleryTargetExtendedLocationArray) ToGalleryTargetExtendedLocationArrayOutput() GalleryTargetExtendedLocationArrayOutput {
	return i.ToGalleryTargetExtendedLocationArrayOutputWithContext(context.Background())
}

func (i GalleryTargetExtendedLocationArray) ToGalleryTargetExtendedLocationArrayOutputWithContext(ctx context.Context) GalleryTargetExtendedLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GalleryTargetExtendedLocationArrayOutput)
}

type GalleryTargetExtendedLocationOutput struct{ *pulumi.OutputState }

func (GalleryTargetExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryTargetExtendedLocation)(nil)).Elem()
}

func (o GalleryTargetExtendedLocationOutput) ToGalleryTargetExtendedLocationOutput() GalleryTargetExtendedLocationOutput {
	return o
}

func (o GalleryTargetExtendedLocationOutput) ToGalleryTargetExtendedLocationOutputWithContext(ctx context.Context) GalleryTargetExtendedLocationOutput {
	return o
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
func (o GalleryTargetExtendedLocationOutput) Encryption() EncryptionImagesPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocation) *EncryptionImages { return v.Encryption }).(EncryptionImagesPtrOutput)
}

// The name of the extended location.
func (o GalleryTargetExtendedLocationOutput) ExtendedLocation() GalleryExtendedLocationPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocation) *GalleryExtendedLocation { return v.ExtendedLocation }).(GalleryExtendedLocationPtrOutput)
}

// The number of replicas of the Image Version to be created per extended location. This property is updatable.
func (o GalleryTargetExtendedLocationOutput) ExtendedLocationReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocation) *int { return v.ExtendedLocationReplicaCount }).(pulumi.IntPtrOutput)
}

// The name of the region.
func (o GalleryTargetExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryTargetExtendedLocationOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocation) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type GalleryTargetExtendedLocationArrayOutput struct{ *pulumi.OutputState }

func (GalleryTargetExtendedLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryTargetExtendedLocation)(nil)).Elem()
}

func (o GalleryTargetExtendedLocationArrayOutput) ToGalleryTargetExtendedLocationArrayOutput() GalleryTargetExtendedLocationArrayOutput {
	return o
}

func (o GalleryTargetExtendedLocationArrayOutput) ToGalleryTargetExtendedLocationArrayOutputWithContext(ctx context.Context) GalleryTargetExtendedLocationArrayOutput {
	return o
}

func (o GalleryTargetExtendedLocationArrayOutput) Index(i pulumi.IntInput) GalleryTargetExtendedLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryTargetExtendedLocation {
		return vs[0].([]GalleryTargetExtendedLocation)[vs[1].(int)]
	}).(GalleryTargetExtendedLocationOutput)
}

type GalleryTargetExtendedLocationResponse struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImagesResponse `pulumi:"encryption"`
	// The name of the extended location.
	ExtendedLocation *GalleryExtendedLocationResponse `pulumi:"extendedLocation"`
	// The number of replicas of the Image Version to be created per extended location. This property is updatable.
	ExtendedLocationReplicaCount *int `pulumi:"extendedLocationReplicaCount"`
	// The name of the region.
	Name *string `pulumi:"name"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

type GalleryTargetExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (GalleryTargetExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GalleryTargetExtendedLocationResponse)(nil)).Elem()
}

func (o GalleryTargetExtendedLocationResponseOutput) ToGalleryTargetExtendedLocationResponseOutput() GalleryTargetExtendedLocationResponseOutput {
	return o
}

func (o GalleryTargetExtendedLocationResponseOutput) ToGalleryTargetExtendedLocationResponseOutputWithContext(ctx context.Context) GalleryTargetExtendedLocationResponseOutput {
	return o
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
func (o GalleryTargetExtendedLocationResponseOutput) Encryption() EncryptionImagesResponsePtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocationResponse) *EncryptionImagesResponse { return v.Encryption }).(EncryptionImagesResponsePtrOutput)
}

// The name of the extended location.
func (o GalleryTargetExtendedLocationResponseOutput) ExtendedLocation() GalleryExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocationResponse) *GalleryExtendedLocationResponse {
		return v.ExtendedLocation
	}).(GalleryExtendedLocationResponsePtrOutput)
}

// The number of replicas of the Image Version to be created per extended location. This property is updatable.
func (o GalleryTargetExtendedLocationResponseOutput) ExtendedLocationReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocationResponse) *int { return v.ExtendedLocationReplicaCount }).(pulumi.IntPtrOutput)
}

// The name of the region.
func (o GalleryTargetExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o GalleryTargetExtendedLocationResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GalleryTargetExtendedLocationResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type GalleryTargetExtendedLocationResponseArrayOutput struct{ *pulumi.OutputState }

func (GalleryTargetExtendedLocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GalleryTargetExtendedLocationResponse)(nil)).Elem()
}

func (o GalleryTargetExtendedLocationResponseArrayOutput) ToGalleryTargetExtendedLocationResponseArrayOutput() GalleryTargetExtendedLocationResponseArrayOutput {
	return o
}

func (o GalleryTargetExtendedLocationResponseArrayOutput) ToGalleryTargetExtendedLocationResponseArrayOutputWithContext(ctx context.Context) GalleryTargetExtendedLocationResponseArrayOutput {
	return o
}

func (o GalleryTargetExtendedLocationResponseArrayOutput) Index(i pulumi.IntInput) GalleryTargetExtendedLocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GalleryTargetExtendedLocationResponse {
		return vs[0].([]GalleryTargetExtendedLocationResponse)[vs[1].(int)]
	}).(GalleryTargetExtendedLocationResponseOutput)
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfile struct {
	// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
	VmSize *string `pulumi:"vmSize"`
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
	VmSizeProperties *VMSizeProperties `pulumi:"vmSizeProperties"`
}

// HardwareProfileInput is an input type that accepts HardwareProfileArgs and HardwareProfileOutput values.
// You can construct a concrete instance of `HardwareProfileInput` via:
//
//	HardwareProfileArgs{...}
type HardwareProfileInput interface {
	pulumi.Input

	ToHardwareProfileOutput() HardwareProfileOutput
	ToHardwareProfileOutputWithContext(context.Context) HardwareProfileOutput
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileArgs struct {
	// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
	VmSizeProperties VMSizePropertiesPtrInput `pulumi:"vmSizeProperties"`
}

func (HardwareProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfile)(nil)).Elem()
}

func (i HardwareProfileArgs) ToHardwareProfileOutput() HardwareProfileOutput {
	return i.ToHardwareProfileOutputWithContext(context.Background())
}

func (i HardwareProfileArgs) ToHardwareProfileOutputWithContext(ctx context.Context) HardwareProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfileOutput)
}

func (i HardwareProfileArgs) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return i.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (i HardwareProfileArgs) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfileOutput).ToHardwareProfilePtrOutputWithContext(ctx)
}

// HardwareProfilePtrInput is an input type that accepts HardwareProfileArgs, HardwareProfilePtr and HardwareProfilePtrOutput values.
// You can construct a concrete instance of `HardwareProfilePtrInput` via:
//
//	        HardwareProfileArgs{...}
//
//	or:
//
//	        nil
type HardwareProfilePtrInput interface {
	pulumi.Input

	ToHardwareProfilePtrOutput() HardwareProfilePtrOutput
	ToHardwareProfilePtrOutputWithContext(context.Context) HardwareProfilePtrOutput
}

type hardwareProfilePtrType HardwareProfileArgs

func HardwareProfilePtr(v *HardwareProfileArgs) HardwareProfilePtrInput {
	return (*hardwareProfilePtrType)(v)
}

func (*hardwareProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfile)(nil)).Elem()
}

func (i *hardwareProfilePtrType) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return i.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (i *hardwareProfilePtrType) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfilePtrOutput)
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileOutput struct{ *pulumi.OutputState }

func (HardwareProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfile)(nil)).Elem()
}

func (o HardwareProfileOutput) ToHardwareProfileOutput() HardwareProfileOutput {
	return o
}

func (o HardwareProfileOutput) ToHardwareProfileOutputWithContext(ctx context.Context) HardwareProfileOutput {
	return o
}

func (o HardwareProfileOutput) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return o.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (o HardwareProfileOutput) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HardwareProfile) *HardwareProfile {
		return &v
	}).(HardwareProfilePtrOutput)
}

// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
func (o HardwareProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HardwareProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o HardwareProfileOutput) VmSizeProperties() VMSizePropertiesPtrOutput {
	return o.ApplyT(func(v HardwareProfile) *VMSizeProperties { return v.VmSizeProperties }).(VMSizePropertiesPtrOutput)
}

type HardwareProfilePtrOutput struct{ *pulumi.OutputState }

func (HardwareProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfile)(nil)).Elem()
}

func (o HardwareProfilePtrOutput) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return o
}

func (o HardwareProfilePtrOutput) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return o
}

func (o HardwareProfilePtrOutput) Elem() HardwareProfileOutput {
	return o.ApplyT(func(v *HardwareProfile) HardwareProfile {
		if v != nil {
			return *v
		}
		var ret HardwareProfile
		return ret
	}).(HardwareProfileOutput)
}

// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
func (o HardwareProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardwareProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o HardwareProfilePtrOutput) VmSizeProperties() VMSizePropertiesPtrOutput {
	return o.ApplyT(func(v *HardwareProfile) *VMSizeProperties {
		if v == nil {
			return nil
		}
		return v.VmSizeProperties
	}).(VMSizePropertiesPtrOutput)
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileResponse struct {
	// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
	VmSize *string `pulumi:"vmSize"`
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
	VmSizeProperties *VMSizePropertiesResponse `pulumi:"vmSizeProperties"`
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfileResponseOutput struct{ *pulumi.OutputState }

func (HardwareProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfileResponse)(nil)).Elem()
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponseOutput() HardwareProfileResponseOutput {
	return o
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponseOutputWithContext(ctx context.Context) HardwareProfileResponseOutput {
	return o
}

// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
func (o HardwareProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HardwareProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o HardwareProfileResponseOutput) VmSizeProperties() VMSizePropertiesResponsePtrOutput {
	return o.ApplyT(func(v HardwareProfileResponse) *VMSizePropertiesResponse { return v.VmSizeProperties }).(VMSizePropertiesResponsePtrOutput)
}

type HardwareProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (HardwareProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfileResponse)(nil)).Elem()
}

func (o HardwareProfileResponsePtrOutput) ToHardwareProfileResponsePtrOutput() HardwareProfileResponsePtrOutput {
	return o
}

func (o HardwareProfileResponsePtrOutput) ToHardwareProfileResponsePtrOutputWithContext(ctx context.Context) HardwareProfileResponsePtrOutput {
	return o
}

func (o HardwareProfileResponsePtrOutput) Elem() HardwareProfileResponseOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) HardwareProfileResponse {
		if v != nil {
			return *v
		}
		var ret HardwareProfileResponse
		return ret
	}).(HardwareProfileResponseOutput)
}

// Specifies the size of the virtual machine. The enum data type is currently deprecated and will be removed by December 23rd 2023. The recommended way to get the list of available sizes is using these APIs: [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes), [List all available virtual machine sizes in a region](https://docs.microsoft.com/rest/api/compute/resourceskus/list), [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). The available VM sizes depend on region and availability set.
func (o HardwareProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not supported for VirtualMachineScaleSet. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o HardwareProfileResponsePtrOutput) VmSizeProperties() VMSizePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) *VMSizePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.VmSizeProperties
	}).(VMSizePropertiesResponsePtrOutput)
}

// Specifies particular host endpoint settings.
type HostEndpointSettings struct {
	// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
	InVMAccessControlProfileReferenceId *string `pulumi:"inVMAccessControlProfileReferenceId"`
	// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
	Mode *string `pulumi:"mode"`
}

// HostEndpointSettingsInput is an input type that accepts HostEndpointSettingsArgs and HostEndpointSettingsOutput values.
// You can construct a concrete instance of `HostEndpointSettingsInput` via:
//
//	HostEndpointSettingsArgs{...}
type HostEndpointSettingsInput interface {
	pulumi.Input

	ToHostEndpointSettingsOutput() HostEndpointSettingsOutput
	ToHostEndpointSettingsOutputWithContext(context.Context) HostEndpointSettingsOutput
}

// Specifies particular host endpoint settings.
type HostEndpointSettingsArgs struct {
	// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
	InVMAccessControlProfileReferenceId pulumi.StringPtrInput `pulumi:"inVMAccessControlProfileReferenceId"`
	// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (HostEndpointSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostEndpointSettings)(nil)).Elem()
}

func (i HostEndpointSettingsArgs) ToHostEndpointSettingsOutput() HostEndpointSettingsOutput {
	return i.ToHostEndpointSettingsOutputWithContext(context.Background())
}

func (i HostEndpointSettingsArgs) ToHostEndpointSettingsOutputWithContext(ctx context.Context) HostEndpointSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostEndpointSettingsOutput)
}

func (i HostEndpointSettingsArgs) ToHostEndpointSettingsPtrOutput() HostEndpointSettingsPtrOutput {
	return i.ToHostEndpointSettingsPtrOutputWithContext(context.Background())
}

func (i HostEndpointSettingsArgs) ToHostEndpointSettingsPtrOutputWithContext(ctx context.Context) HostEndpointSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostEndpointSettingsOutput).ToHostEndpointSettingsPtrOutputWithContext(ctx)
}

// HostEndpointSettingsPtrInput is an input type that accepts HostEndpointSettingsArgs, HostEndpointSettingsPtr and HostEndpointSettingsPtrOutput values.
// You can construct a concrete instance of `HostEndpointSettingsPtrInput` via:
//
//	        HostEndpointSettingsArgs{...}
//
//	or:
//
//	        nil
type HostEndpointSettingsPtrInput interface {
	pulumi.Input

	ToHostEndpointSettingsPtrOutput() HostEndpointSettingsPtrOutput
	ToHostEndpointSettingsPtrOutputWithContext(context.Context) HostEndpointSettingsPtrOutput
}

type hostEndpointSettingsPtrType HostEndpointSettingsArgs

func HostEndpointSettingsPtr(v *HostEndpointSettingsArgs) HostEndpointSettingsPtrInput {
	return (*hostEndpointSettingsPtrType)(v)
}

func (*hostEndpointSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostEndpointSettings)(nil)).Elem()
}

func (i *hostEndpointSettingsPtrType) ToHostEndpointSettingsPtrOutput() HostEndpointSettingsPtrOutput {
	return i.ToHostEndpointSettingsPtrOutputWithContext(context.Background())
}

func (i *hostEndpointSettingsPtrType) ToHostEndpointSettingsPtrOutputWithContext(ctx context.Context) HostEndpointSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostEndpointSettingsPtrOutput)
}

// Specifies particular host endpoint settings.
type HostEndpointSettingsOutput struct{ *pulumi.OutputState }

func (HostEndpointSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostEndpointSettings)(nil)).Elem()
}

func (o HostEndpointSettingsOutput) ToHostEndpointSettingsOutput() HostEndpointSettingsOutput {
	return o
}

func (o HostEndpointSettingsOutput) ToHostEndpointSettingsOutputWithContext(ctx context.Context) HostEndpointSettingsOutput {
	return o
}

func (o HostEndpointSettingsOutput) ToHostEndpointSettingsPtrOutput() HostEndpointSettingsPtrOutput {
	return o.ToHostEndpointSettingsPtrOutputWithContext(context.Background())
}

func (o HostEndpointSettingsOutput) ToHostEndpointSettingsPtrOutputWithContext(ctx context.Context) HostEndpointSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostEndpointSettings) *HostEndpointSettings {
		return &v
	}).(HostEndpointSettingsPtrOutput)
}

// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
func (o HostEndpointSettingsOutput) InVMAccessControlProfileReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostEndpointSettings) *string { return v.InVMAccessControlProfileReferenceId }).(pulumi.StringPtrOutput)
}

// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
func (o HostEndpointSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostEndpointSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type HostEndpointSettingsPtrOutput struct{ *pulumi.OutputState }

func (HostEndpointSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostEndpointSettings)(nil)).Elem()
}

func (o HostEndpointSettingsPtrOutput) ToHostEndpointSettingsPtrOutput() HostEndpointSettingsPtrOutput {
	return o
}

func (o HostEndpointSettingsPtrOutput) ToHostEndpointSettingsPtrOutputWithContext(ctx context.Context) HostEndpointSettingsPtrOutput {
	return o
}

func (o HostEndpointSettingsPtrOutput) Elem() HostEndpointSettingsOutput {
	return o.ApplyT(func(v *HostEndpointSettings) HostEndpointSettings {
		if v != nil {
			return *v
		}
		var ret HostEndpointSettings
		return ret
	}).(HostEndpointSettingsOutput)
}

// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
func (o HostEndpointSettingsPtrOutput) InVMAccessControlProfileReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostEndpointSettings) *string {
		if v == nil {
			return nil
		}
		return v.InVMAccessControlProfileReferenceId
	}).(pulumi.StringPtrOutput)
}

// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
func (o HostEndpointSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostEndpointSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Specifies particular host endpoint settings.
type HostEndpointSettingsResponse struct {
	// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
	InVMAccessControlProfileReferenceId *string `pulumi:"inVMAccessControlProfileReferenceId"`
	// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
	Mode *string `pulumi:"mode"`
}

// Specifies particular host endpoint settings.
type HostEndpointSettingsResponseOutput struct{ *pulumi.OutputState }

func (HostEndpointSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostEndpointSettingsResponse)(nil)).Elem()
}

func (o HostEndpointSettingsResponseOutput) ToHostEndpointSettingsResponseOutput() HostEndpointSettingsResponseOutput {
	return o
}

func (o HostEndpointSettingsResponseOutput) ToHostEndpointSettingsResponseOutputWithContext(ctx context.Context) HostEndpointSettingsResponseOutput {
	return o
}

// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
func (o HostEndpointSettingsResponseOutput) InVMAccessControlProfileReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostEndpointSettingsResponse) *string { return v.InVMAccessControlProfileReferenceId }).(pulumi.StringPtrOutput)
}

// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
func (o HostEndpointSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostEndpointSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type HostEndpointSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (HostEndpointSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostEndpointSettingsResponse)(nil)).Elem()
}

func (o HostEndpointSettingsResponsePtrOutput) ToHostEndpointSettingsResponsePtrOutput() HostEndpointSettingsResponsePtrOutput {
	return o
}

func (o HostEndpointSettingsResponsePtrOutput) ToHostEndpointSettingsResponsePtrOutputWithContext(ctx context.Context) HostEndpointSettingsResponsePtrOutput {
	return o
}

func (o HostEndpointSettingsResponsePtrOutput) Elem() HostEndpointSettingsResponseOutput {
	return o.ApplyT(func(v *HostEndpointSettingsResponse) HostEndpointSettingsResponse {
		if v != nil {
			return *v
		}
		var ret HostEndpointSettingsResponse
		return ret
	}).(HostEndpointSettingsResponseOutput)
}

// Specifies the InVMAccessControlProfileVersion resource id in the format of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{profile}/versions/{version}
func (o HostEndpointSettingsResponsePtrOutput) InVMAccessControlProfileReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostEndpointSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InVMAccessControlProfileReferenceId
	}).(pulumi.StringPtrOutput)
}

// Specifies the execution mode. In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. In Enforce mode, the system will enforce the access control and it is the recommended mode of operation.
func (o HostEndpointSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostEndpointSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Describes a data disk.
type ImageDataDisk struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *CachingTypes `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managedDisk.
	ManagedDisk *SubResource `pulumi:"managedDisk"`
	// The snapshot.
	Snapshot *SubResource `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// ImageDataDiskInput is an input type that accepts ImageDataDiskArgs and ImageDataDiskOutput values.
// You can construct a concrete instance of `ImageDataDiskInput` via:
//
//	ImageDataDiskArgs{...}
type ImageDataDiskInput interface {
	pulumi.Input

	ToImageDataDiskOutput() ImageDataDiskOutput
	ToImageDataDiskOutputWithContext(context.Context) ImageDataDiskOutput
}

// Describes a data disk.
type ImageDataDiskArgs struct {
	// The Virtual Hard Disk.
	BlobUri pulumi.StringPtrInput `pulumi:"blobUri"`
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching CachingTypesPtrInput `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The managedDisk.
	ManagedDisk SubResourcePtrInput `pulumi:"managedDisk"`
	// The snapshot.
	Snapshot SubResourcePtrInput `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (ImageDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDataDisk)(nil)).Elem()
}

func (i ImageDataDiskArgs) ToImageDataDiskOutput() ImageDataDiskOutput {
	return i.ToImageDataDiskOutputWithContext(context.Background())
}

func (i ImageDataDiskArgs) ToImageDataDiskOutputWithContext(ctx context.Context) ImageDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDataDiskOutput)
}

// ImageDataDiskArrayInput is an input type that accepts ImageDataDiskArray and ImageDataDiskArrayOutput values.
// You can construct a concrete instance of `ImageDataDiskArrayInput` via:
//
//	ImageDataDiskArray{ ImageDataDiskArgs{...} }
type ImageDataDiskArrayInput interface {
	pulumi.Input

	ToImageDataDiskArrayOutput() ImageDataDiskArrayOutput
	ToImageDataDiskArrayOutputWithContext(context.Context) ImageDataDiskArrayOutput
}

type ImageDataDiskArray []ImageDataDiskInput

func (ImageDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDataDisk)(nil)).Elem()
}

func (i ImageDataDiskArray) ToImageDataDiskArrayOutput() ImageDataDiskArrayOutput {
	return i.ToImageDataDiskArrayOutputWithContext(context.Background())
}

func (i ImageDataDiskArray) ToImageDataDiskArrayOutputWithContext(ctx context.Context) ImageDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDataDiskArrayOutput)
}

// Describes a data disk.
type ImageDataDiskOutput struct{ *pulumi.OutputState }

func (ImageDataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDataDisk)(nil)).Elem()
}

func (o ImageDataDiskOutput) ToImageDataDiskOutput() ImageDataDiskOutput {
	return o
}

func (o ImageDataDiskOutput) ToImageDataDiskOutputWithContext(ctx context.Context) ImageDataDiskOutput {
	return o
}

// The Virtual Hard Disk.
func (o ImageDataDiskOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *string { return v.BlobUri }).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o ImageDataDiskOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *CachingTypes { return v.Caching }).(CachingTypesPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageDataDiskOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *DiskEncryptionSetParameters { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
func (o ImageDataDiskOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o ImageDataDiskOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v ImageDataDisk) int { return v.Lun }).(pulumi.IntOutput)
}

// The managedDisk.
func (o ImageDataDiskOutput) ManagedDisk() SubResourcePtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *SubResource { return v.ManagedDisk }).(SubResourcePtrOutput)
}

// The snapshot.
func (o ImageDataDiskOutput) Snapshot() SubResourcePtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *SubResource { return v.Snapshot }).(SubResourcePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageDataDiskOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDisk) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ImageDataDiskArrayOutput struct{ *pulumi.OutputState }

func (ImageDataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDataDisk)(nil)).Elem()
}

func (o ImageDataDiskArrayOutput) ToImageDataDiskArrayOutput() ImageDataDiskArrayOutput {
	return o
}

func (o ImageDataDiskArrayOutput) ToImageDataDiskArrayOutputWithContext(ctx context.Context) ImageDataDiskArrayOutput {
	return o
}

func (o ImageDataDiskArrayOutput) Index(i pulumi.IntInput) ImageDataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDataDisk {
		return vs[0].([]ImageDataDisk)[vs[1].(int)]
	}).(ImageDataDiskOutput)
}

// Describes a data disk.
type ImageDataDiskResponse struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *string `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managedDisk.
	ManagedDisk *SubResourceResponse `pulumi:"managedDisk"`
	// The snapshot.
	Snapshot *SubResourceResponse `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes a data disk.
type ImageDataDiskResponseOutput struct{ *pulumi.OutputState }

func (ImageDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDataDiskResponse)(nil)).Elem()
}

func (o ImageDataDiskResponseOutput) ToImageDataDiskResponseOutput() ImageDataDiskResponseOutput {
	return o
}

func (o ImageDataDiskResponseOutput) ToImageDataDiskResponseOutputWithContext(ctx context.Context) ImageDataDiskResponseOutput {
	return o
}

// The Virtual Hard Disk.
func (o ImageDataDiskResponseOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *string { return v.BlobUri }).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o ImageDataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageDataDiskResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
func (o ImageDataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o ImageDataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// The managedDisk.
func (o ImageDataDiskResponseOutput) ManagedDisk() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *SubResourceResponse { return v.ManagedDisk }).(SubResourceResponsePtrOutput)
}

// The snapshot.
func (o ImageDataDiskResponseOutput) Snapshot() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *SubResourceResponse { return v.Snapshot }).(SubResourceResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageDataDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDataDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ImageDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDataDiskResponse)(nil)).Elem()
}

func (o ImageDataDiskResponseArrayOutput) ToImageDataDiskResponseArrayOutput() ImageDataDiskResponseArrayOutput {
	return o
}

func (o ImageDataDiskResponseArrayOutput) ToImageDataDiskResponseArrayOutputWithContext(ctx context.Context) ImageDataDiskResponseArrayOutput {
	return o
}

func (o ImageDataDiskResponseArrayOutput) Index(i pulumi.IntInput) ImageDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDataDiskResponse {
		return vs[0].([]ImageDataDiskResponse)[vs[1].(int)]
	}).(ImageDataDiskResponseOutput)
}

// The source image used for creating the disk.
type ImageDiskReference struct {
	// A relative uri containing a community Azure Compute Gallery image reference.
	CommunityGalleryImageId *string `pulumi:"communityGalleryImageId"`
	// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
	Id *string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
	// A relative uri containing a direct shared Azure Compute Gallery image reference.
	SharedGalleryImageId *string `pulumi:"sharedGalleryImageId"`
}

// ImageDiskReferenceInput is an input type that accepts ImageDiskReferenceArgs and ImageDiskReferenceOutput values.
// You can construct a concrete instance of `ImageDiskReferenceInput` via:
//
//	ImageDiskReferenceArgs{...}
type ImageDiskReferenceInput interface {
	pulumi.Input

	ToImageDiskReferenceOutput() ImageDiskReferenceOutput
	ToImageDiskReferenceOutputWithContext(context.Context) ImageDiskReferenceOutput
}

// The source image used for creating the disk.
type ImageDiskReferenceArgs struct {
	// A relative uri containing a community Azure Compute Gallery image reference.
	CommunityGalleryImageId pulumi.StringPtrInput `pulumi:"communityGalleryImageId"`
	// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// A relative uri containing a direct shared Azure Compute Gallery image reference.
	SharedGalleryImageId pulumi.StringPtrInput `pulumi:"sharedGalleryImageId"`
}

func (ImageDiskReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return i.ToImageDiskReferenceOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput)
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i ImageDiskReferenceArgs) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferenceOutput).ToImageDiskReferencePtrOutputWithContext(ctx)
}

// ImageDiskReferencePtrInput is an input type that accepts ImageDiskReferenceArgs, ImageDiskReferencePtr and ImageDiskReferencePtrOutput values.
// You can construct a concrete instance of `ImageDiskReferencePtrInput` via:
//
//	        ImageDiskReferenceArgs{...}
//
//	or:
//
//	        nil
type ImageDiskReferencePtrInput interface {
	pulumi.Input

	ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput
	ToImageDiskReferencePtrOutputWithContext(context.Context) ImageDiskReferencePtrOutput
}

type imageDiskReferencePtrType ImageDiskReferenceArgs

func ImageDiskReferencePtr(v *ImageDiskReferenceArgs) ImageDiskReferencePtrInput {
	return (*imageDiskReferencePtrType)(v)
}

func (*imageDiskReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return i.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (i *imageDiskReferencePtrType) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDiskReferencePtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReference)(nil)).Elem()
}

func (o ImageDiskReferenceOutput) ToImageDiskReferenceOutput() ImageDiskReferenceOutput {
	return o
}

func (o ImageDiskReferenceOutput) ToImageDiskReferenceOutputWithContext(ctx context.Context) ImageDiskReferenceOutput {
	return o
}

func (o ImageDiskReferenceOutput) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return o.ToImageDiskReferencePtrOutputWithContext(context.Background())
}

func (o ImageDiskReferenceOutput) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageDiskReference) *ImageDiskReference {
		return &v
	}).(ImageDiskReferencePtrOutput)
}

// A relative uri containing a community Azure Compute Gallery image reference.
func (o ImageDiskReferenceOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *string { return v.CommunityGalleryImageId }).(pulumi.StringPtrOutput)
}

// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
func (o ImageDiskReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// A relative uri containing a direct shared Azure Compute Gallery image reference.
func (o ImageDiskReferenceOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDiskReference) *string { return v.SharedGalleryImageId }).(pulumi.StringPtrOutput)
}

type ImageDiskReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReference)(nil)).Elem()
}

func (o ImageDiskReferencePtrOutput) ToImageDiskReferencePtrOutput() ImageDiskReferencePtrOutput {
	return o
}

func (o ImageDiskReferencePtrOutput) ToImageDiskReferencePtrOutputWithContext(ctx context.Context) ImageDiskReferencePtrOutput {
	return o
}

func (o ImageDiskReferencePtrOutput) Elem() ImageDiskReferenceOutput {
	return o.ApplyT(func(v *ImageDiskReference) ImageDiskReference {
		if v != nil {
			return *v
		}
		var ret ImageDiskReference
		return ret
	}).(ImageDiskReferenceOutput)
}

// A relative uri containing a community Azure Compute Gallery image reference.
func (o ImageDiskReferencePtrOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *string {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
func (o ImageDiskReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferencePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// A relative uri containing a direct shared Azure Compute Gallery image reference.
func (o ImageDiskReferencePtrOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReference) *string {
		if v == nil {
			return nil
		}
		return v.SharedGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// The source image used for creating the disk.
type ImageDiskReferenceResponse struct {
	// A relative uri containing a community Azure Compute Gallery image reference.
	CommunityGalleryImageId *string `pulumi:"communityGalleryImageId"`
	// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
	Id *string `pulumi:"id"`
	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
	Lun *int `pulumi:"lun"`
	// A relative uri containing a direct shared Azure Compute Gallery image reference.
	SharedGalleryImageId *string `pulumi:"sharedGalleryImageId"`
}

// The source image used for creating the disk.
type ImageDiskReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutput() ImageDiskReferenceResponseOutput {
	return o
}

func (o ImageDiskReferenceResponseOutput) ToImageDiskReferenceResponseOutputWithContext(ctx context.Context) ImageDiskReferenceResponseOutput {
	return o
}

// A relative uri containing a community Azure Compute Gallery image reference.
func (o ImageDiskReferenceResponseOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *string { return v.CommunityGalleryImageId }).(pulumi.StringPtrOutput)
}

// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
func (o ImageDiskReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// A relative uri containing a direct shared Azure Compute Gallery image reference.
func (o ImageDiskReferenceResponseOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDiskReferenceResponse) *string { return v.SharedGalleryImageId }).(pulumi.StringPtrOutput)
}

type ImageDiskReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageDiskReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDiskReferenceResponse)(nil)).Elem()
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutput() ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) ToImageDiskReferenceResponsePtrOutputWithContext(ctx context.Context) ImageDiskReferenceResponsePtrOutput {
	return o
}

func (o ImageDiskReferenceResponsePtrOutput) Elem() ImageDiskReferenceResponseOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) ImageDiskReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ImageDiskReferenceResponse
		return ret
	}).(ImageDiskReferenceResponseOutput)
}

// A relative uri containing a community Azure Compute Gallery image reference.
func (o ImageDiskReferenceResponsePtrOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference.
func (o ImageDiskReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
func (o ImageDiskReferenceResponsePtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// A relative uri containing a direct shared Azure Compute Gallery image reference.
func (o ImageDiskReferenceResponsePtrOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDiskReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// Describes an Operating System disk.
type ImageOSDisk struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *CachingTypes `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The managedDisk.
	ManagedDisk *SubResource `pulumi:"managedDisk"`
	// The OS State. For managed images, use Generalized.
	OsState OperatingSystemStateTypes `pulumi:"osState"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
	OsType OperatingSystemTypes `pulumi:"osType"`
	// The snapshot.
	Snapshot *SubResource `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// ImageOSDiskInput is an input type that accepts ImageOSDiskArgs and ImageOSDiskOutput values.
// You can construct a concrete instance of `ImageOSDiskInput` via:
//
//	ImageOSDiskArgs{...}
type ImageOSDiskInput interface {
	pulumi.Input

	ToImageOSDiskOutput() ImageOSDiskOutput
	ToImageOSDiskOutputWithContext(context.Context) ImageOSDiskOutput
}

// Describes an Operating System disk.
type ImageOSDiskArgs struct {
	// The Virtual Hard Disk.
	BlobUri pulumi.StringPtrInput `pulumi:"blobUri"`
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching CachingTypesPtrInput `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// The managedDisk.
	ManagedDisk SubResourcePtrInput `pulumi:"managedDisk"`
	// The OS State. For managed images, use Generalized.
	OsState OperatingSystemStateTypesInput `pulumi:"osState"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
	OsType OperatingSystemTypesInput `pulumi:"osType"`
	// The snapshot.
	Snapshot SubResourcePtrInput `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (ImageOSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOSDisk)(nil)).Elem()
}

func (i ImageOSDiskArgs) ToImageOSDiskOutput() ImageOSDiskOutput {
	return i.ToImageOSDiskOutputWithContext(context.Background())
}

func (i ImageOSDiskArgs) ToImageOSDiskOutputWithContext(ctx context.Context) ImageOSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOSDiskOutput)
}

func (i ImageOSDiskArgs) ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput {
	return i.ToImageOSDiskPtrOutputWithContext(context.Background())
}

func (i ImageOSDiskArgs) ToImageOSDiskPtrOutputWithContext(ctx context.Context) ImageOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOSDiskOutput).ToImageOSDiskPtrOutputWithContext(ctx)
}

// ImageOSDiskPtrInput is an input type that accepts ImageOSDiskArgs, ImageOSDiskPtr and ImageOSDiskPtrOutput values.
// You can construct a concrete instance of `ImageOSDiskPtrInput` via:
//
//	        ImageOSDiskArgs{...}
//
//	or:
//
//	        nil
type ImageOSDiskPtrInput interface {
	pulumi.Input

	ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput
	ToImageOSDiskPtrOutputWithContext(context.Context) ImageOSDiskPtrOutput
}

type imageOSDiskPtrType ImageOSDiskArgs

func ImageOSDiskPtr(v *ImageOSDiskArgs) ImageOSDiskPtrInput {
	return (*imageOSDiskPtrType)(v)
}

func (*imageOSDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOSDisk)(nil)).Elem()
}

func (i *imageOSDiskPtrType) ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput {
	return i.ToImageOSDiskPtrOutputWithContext(context.Background())
}

func (i *imageOSDiskPtrType) ToImageOSDiskPtrOutputWithContext(ctx context.Context) ImageOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOSDiskPtrOutput)
}

// Describes an Operating System disk.
type ImageOSDiskOutput struct{ *pulumi.OutputState }

func (ImageOSDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOSDisk)(nil)).Elem()
}

func (o ImageOSDiskOutput) ToImageOSDiskOutput() ImageOSDiskOutput {
	return o
}

func (o ImageOSDiskOutput) ToImageOSDiskOutputWithContext(ctx context.Context) ImageOSDiskOutput {
	return o
}

func (o ImageOSDiskOutput) ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput {
	return o.ToImageOSDiskPtrOutputWithContext(context.Background())
}

func (o ImageOSDiskOutput) ToImageOSDiskPtrOutputWithContext(ctx context.Context) ImageOSDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageOSDisk) *ImageOSDisk {
		return &v
	}).(ImageOSDiskPtrOutput)
}

// The Virtual Hard Disk.
func (o ImageOSDiskOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *string { return v.BlobUri }).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o ImageOSDiskOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *CachingTypes { return v.Caching }).(CachingTypesPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageOSDiskOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *DiskEncryptionSetParameters { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
func (o ImageOSDiskOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The managedDisk.
func (o ImageOSDiskOutput) ManagedDisk() SubResourcePtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *SubResource { return v.ManagedDisk }).(SubResourcePtrOutput)
}

// The OS State. For managed images, use Generalized.
func (o ImageOSDiskOutput) OsState() OperatingSystemStateTypesOutput {
	return o.ApplyT(func(v ImageOSDisk) OperatingSystemStateTypes { return v.OsState }).(OperatingSystemStateTypesOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
func (o ImageOSDiskOutput) OsType() OperatingSystemTypesOutput {
	return o.ApplyT(func(v ImageOSDisk) OperatingSystemTypes { return v.OsType }).(OperatingSystemTypesOutput)
}

// The snapshot.
func (o ImageOSDiskOutput) Snapshot() SubResourcePtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *SubResource { return v.Snapshot }).(SubResourcePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageOSDiskOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDisk) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ImageOSDiskPtrOutput struct{ *pulumi.OutputState }

func (ImageOSDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOSDisk)(nil)).Elem()
}

func (o ImageOSDiskPtrOutput) ToImageOSDiskPtrOutput() ImageOSDiskPtrOutput {
	return o
}

func (o ImageOSDiskPtrOutput) ToImageOSDiskPtrOutputWithContext(ctx context.Context) ImageOSDiskPtrOutput {
	return o
}

func (o ImageOSDiskPtrOutput) Elem() ImageOSDiskOutput {
	return o.ApplyT(func(v *ImageOSDisk) ImageOSDisk {
		if v != nil {
			return *v
		}
		var ret ImageOSDisk
		return ret
	}).(ImageOSDiskOutput)
}

// The Virtual Hard Disk.
func (o ImageOSDiskPtrOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *string {
		if v == nil {
			return nil
		}
		return v.BlobUri
	}).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o ImageOSDiskPtrOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *CachingTypes {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(CachingTypesPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageOSDiskPtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *DiskEncryptionSetParameters {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
func (o ImageOSDiskPtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// The managedDisk.
func (o ImageOSDiskPtrOutput) ManagedDisk() SubResourcePtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *SubResource {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(SubResourcePtrOutput)
}

// The OS State. For managed images, use Generalized.
func (o ImageOSDiskPtrOutput) OsState() OperatingSystemStateTypesPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *OperatingSystemStateTypes {
		if v == nil {
			return nil
		}
		return &v.OsState
	}).(OperatingSystemStateTypesPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
func (o ImageOSDiskPtrOutput) OsType() OperatingSystemTypesPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *OperatingSystemTypes {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(OperatingSystemTypesPtrOutput)
}

// The snapshot.
func (o ImageOSDiskPtrOutput) Snapshot() SubResourcePtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *SubResource {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(SubResourcePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageOSDiskPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDisk) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes an Operating System disk.
type ImageOSDiskResponse struct {
	// The Virtual Hard Disk.
	BlobUri *string `pulumi:"blobUri"`
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *string `pulumi:"caching"`
	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The managedDisk.
	ManagedDisk *SubResourceResponse `pulumi:"managedDisk"`
	// The OS State. For managed images, use Generalized.
	OsState string `pulumi:"osState"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
	OsType string `pulumi:"osType"`
	// The snapshot.
	Snapshot *SubResourceResponse `pulumi:"snapshot"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes an Operating System disk.
type ImageOSDiskResponseOutput struct{ *pulumi.OutputState }

func (ImageOSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageOSDiskResponse)(nil)).Elem()
}

func (o ImageOSDiskResponseOutput) ToImageOSDiskResponseOutput() ImageOSDiskResponseOutput {
	return o
}

func (o ImageOSDiskResponseOutput) ToImageOSDiskResponseOutputWithContext(ctx context.Context) ImageOSDiskResponseOutput {
	return o
}

// The Virtual Hard Disk.
func (o ImageOSDiskResponseOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *string { return v.BlobUri }).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o ImageOSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageOSDiskResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
func (o ImageOSDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The managedDisk.
func (o ImageOSDiskResponseOutput) ManagedDisk() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *SubResourceResponse { return v.ManagedDisk }).(SubResourceResponsePtrOutput)
}

// The OS State. For managed images, use Generalized.
func (o ImageOSDiskResponseOutput) OsState() pulumi.StringOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) string { return v.OsState }).(pulumi.StringOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
func (o ImageOSDiskResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The snapshot.
func (o ImageOSDiskResponseOutput) Snapshot() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *SubResourceResponse { return v.Snapshot }).(SubResourceResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageOSDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageOSDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ImageOSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageOSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageOSDiskResponse)(nil)).Elem()
}

func (o ImageOSDiskResponsePtrOutput) ToImageOSDiskResponsePtrOutput() ImageOSDiskResponsePtrOutput {
	return o
}

func (o ImageOSDiskResponsePtrOutput) ToImageOSDiskResponsePtrOutputWithContext(ctx context.Context) ImageOSDiskResponsePtrOutput {
	return o
}

func (o ImageOSDiskResponsePtrOutput) Elem() ImageOSDiskResponseOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) ImageOSDiskResponse {
		if v != nil {
			return *v
		}
		var ret ImageOSDiskResponse
		return ret
	}).(ImageOSDiskResponseOutput)
}

// The Virtual Hard Disk.
func (o ImageOSDiskResponsePtrOutput) BlobUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobUri
	}).(pulumi.StringPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o ImageOSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed image disk.
func (o ImageOSDiskResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. This value cannot be larger than 1023 GB.
func (o ImageOSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// The managedDisk.
func (o ImageOSDiskResponsePtrOutput) ManagedDisk() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(SubResourceResponsePtrOutput)
}

// The OS State. For managed images, use Generalized.
func (o ImageOSDiskResponsePtrOutput) OsState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsState
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**
func (o ImageOSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// The snapshot.
func (o ImageOSDiskResponsePtrOutput) Snapshot() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(SubResourceResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ImageOSDiskResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlan struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// The product ID.
	Product *string `pulumi:"product"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// ImagePurchasePlanInput is an input type that accepts ImagePurchasePlanArgs and ImagePurchasePlanOutput values.
// You can construct a concrete instance of `ImagePurchasePlanInput` via:
//
//	ImagePurchasePlanArgs{...}
type ImagePurchasePlanInput interface {
	pulumi.Input

	ToImagePurchasePlanOutput() ImagePurchasePlanOutput
	ToImagePurchasePlanOutputWithContext(context.Context) ImagePurchasePlanOutput
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanArgs struct {
	// The plan ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The product ID.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The publisher ID.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (ImagePurchasePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePurchasePlan)(nil)).Elem()
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanOutput() ImagePurchasePlanOutput {
	return i.ToImagePurchasePlanOutputWithContext(context.Background())
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanOutputWithContext(ctx context.Context) ImagePurchasePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePurchasePlanOutput)
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput {
	return i.ToImagePurchasePlanPtrOutputWithContext(context.Background())
}

func (i ImagePurchasePlanArgs) ToImagePurchasePlanPtrOutputWithContext(ctx context.Context) ImagePurchasePlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePurchasePlanOutput).ToImagePurchasePlanPtrOutputWithContext(ctx)
}

// ImagePurchasePlanPtrInput is an input type that accepts ImagePurchasePlanArgs, ImagePurchasePlanPtr and ImagePurchasePlanPtrOutput values.
// You can construct a concrete instance of `ImagePurchasePlanPtrInput` via:
//
//	        ImagePurchasePlanArgs{...}
//
//	or:
//
//	        nil
type ImagePurchasePlanPtrInput interface {
	pulumi.Input

	ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput
	ToImagePurchasePlanPtrOutputWithContext(context.Context) ImagePurchasePlanPtrOutput
}

type imagePurchasePlanPtrType ImagePurchasePlanArgs

func ImagePurchasePlanPtr(v *ImagePurchasePlanArgs) ImagePurchasePlanPtrInput {
	return (*imagePurchasePlanPtrType)(v)
}

func (*imagePurchasePlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePurchasePlan)(nil)).Elem()
}

func (i *imagePurchasePlanPtrType) ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput {
	return i.ToImagePurchasePlanPtrOutputWithContext(context.Background())
}

func (i *imagePurchasePlanPtrType) ToImagePurchasePlanPtrOutputWithContext(ctx context.Context) ImagePurchasePlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePurchasePlanPtrOutput)
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanOutput struct{ *pulumi.OutputState }

func (ImagePurchasePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePurchasePlan)(nil)).Elem()
}

func (o ImagePurchasePlanOutput) ToImagePurchasePlanOutput() ImagePurchasePlanOutput {
	return o
}

func (o ImagePurchasePlanOutput) ToImagePurchasePlanOutputWithContext(ctx context.Context) ImagePurchasePlanOutput {
	return o
}

func (o ImagePurchasePlanOutput) ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput {
	return o.ToImagePurchasePlanPtrOutputWithContext(context.Background())
}

func (o ImagePurchasePlanOutput) ToImagePurchasePlanPtrOutputWithContext(ctx context.Context) ImagePurchasePlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePurchasePlan) *ImagePurchasePlan {
		return &v
	}).(ImagePurchasePlanPtrOutput)
}

// The plan ID.
func (o ImagePurchasePlanOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlan) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The product ID.
func (o ImagePurchasePlanOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlan) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o ImagePurchasePlanOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlan) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type ImagePurchasePlanPtrOutput struct{ *pulumi.OutputState }

func (ImagePurchasePlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePurchasePlan)(nil)).Elem()
}

func (o ImagePurchasePlanPtrOutput) ToImagePurchasePlanPtrOutput() ImagePurchasePlanPtrOutput {
	return o
}

func (o ImagePurchasePlanPtrOutput) ToImagePurchasePlanPtrOutputWithContext(ctx context.Context) ImagePurchasePlanPtrOutput {
	return o
}

func (o ImagePurchasePlanPtrOutput) Elem() ImagePurchasePlanOutput {
	return o.ApplyT(func(v *ImagePurchasePlan) ImagePurchasePlan {
		if v != nil {
			return *v
		}
		var ret ImagePurchasePlan
		return ret
	}).(ImagePurchasePlanOutput)
}

// The plan ID.
func (o ImagePurchasePlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlan) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The product ID.
func (o ImagePurchasePlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlan) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o ImagePurchasePlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlan) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanResponse struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// The product ID.
	Product *string `pulumi:"product"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlanResponseOutput struct{ *pulumi.OutputState }

func (ImagePurchasePlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePurchasePlanResponse)(nil)).Elem()
}

func (o ImagePurchasePlanResponseOutput) ToImagePurchasePlanResponseOutput() ImagePurchasePlanResponseOutput {
	return o
}

func (o ImagePurchasePlanResponseOutput) ToImagePurchasePlanResponseOutputWithContext(ctx context.Context) ImagePurchasePlanResponseOutput {
	return o
}

// The plan ID.
func (o ImagePurchasePlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The product ID.
func (o ImagePurchasePlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o ImagePurchasePlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePurchasePlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type ImagePurchasePlanResponsePtrOutput struct{ *pulumi.OutputState }

func (ImagePurchasePlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePurchasePlanResponse)(nil)).Elem()
}

func (o ImagePurchasePlanResponsePtrOutput) ToImagePurchasePlanResponsePtrOutput() ImagePurchasePlanResponsePtrOutput {
	return o
}

func (o ImagePurchasePlanResponsePtrOutput) ToImagePurchasePlanResponsePtrOutputWithContext(ctx context.Context) ImagePurchasePlanResponsePtrOutput {
	return o
}

func (o ImagePurchasePlanResponsePtrOutput) Elem() ImagePurchasePlanResponseOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) ImagePurchasePlanResponse {
		if v != nil {
			return *v
		}
		var ret ImagePurchasePlanResponse
		return ret
	}).(ImagePurchasePlanResponseOutput)
}

// The plan ID.
func (o ImagePurchasePlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The product ID.
func (o ImagePurchasePlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o ImagePurchasePlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePurchasePlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReference struct {
	// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
	CommunityGalleryImageId *string `pulumi:"communityGalleryImageId"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
	SharedGalleryImageId *string `pulumi:"sharedGalleryImageId"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
	Version *string `pulumi:"version"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//	ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceArgs struct {
	// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
	CommunityGalleryImageId pulumi.StringPtrInput `pulumi:"communityGalleryImageId"`
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// The image publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
	SharedGalleryImageId pulumi.StringPtrInput `pulumi:"sharedGalleryImageId"`
	// The image SKU.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//	        ImageReferenceArgs{...}
//
//	or:
//
//	        nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceOutput struct{ *pulumi.OutputState }

func (ImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (o ImageReferenceOutput) ToImageReferenceOutput() ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o.ToImageReferencePtrOutputWithContext(context.Background())
}

func (o ImageReferenceOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageReference) *ImageReference {
		return &v
	}).(ImageReferencePtrOutput)
}

// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
func (o ImageReferenceOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.CommunityGalleryImageId }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o ImageReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
func (o ImageReferenceOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.SharedGalleryImageId }).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
func (o ImageReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) Elem() ImageReferenceOutput {
	return o.ApplyT(func(v *ImageReference) ImageReference {
		if v != nil {
			return *v
		}
		var ret ImageReference
		return ret
	}).(ImageReferenceOutput)
}

// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
func (o ImageReferencePtrOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// Resource Id
func (o ImageReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferencePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferencePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
func (o ImageReferencePtrOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.SharedGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferencePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
func (o ImageReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponse struct {
	// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
	CommunityGalleryImageId *string `pulumi:"communityGalleryImageId"`
	// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
	ExactVersion string `pulumi:"exactVersion"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
	SharedGalleryImageId *string `pulumi:"sharedGalleryImageId"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
	Version *string `pulumi:"version"`
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
func (o ImageReferenceResponseOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.CommunityGalleryImageId }).(pulumi.StringPtrOutput)
}

// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
func (o ImageReferenceResponseOutput) ExactVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ImageReferenceResponse) string { return v.ExactVersion }).(pulumi.StringOutput)
}

// Resource Id
func (o ImageReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
func (o ImageReferenceResponseOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.SharedGalleryImageId }).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
func (o ImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ImageReferenceResponse
		return ret
	}).(ImageReferenceResponseOutput)
}

// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call.
func (o ImageReferenceResponsePtrOutput) CommunityGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from 'version', only if the value specified in 'version' field is 'latest'.
func (o ImageReferenceResponsePtrOutput) ExactVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExactVersion
	}).(pulumi.StringPtrOutput)
}

// Resource Id
func (o ImageReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
func (o ImageReferenceResponsePtrOutput) SharedGalleryImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedGalleryImageId
	}).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for deployment, to use 'latest' version of gallery image, just set '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}' in the 'id' field without version input.
func (o ImageReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Describes a storage profile.
type ImageStorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks []ImageDataDisk `pulumi:"dataDisks"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk *ImageOSDisk `pulumi:"osDisk"`
	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
	ZoneResilient *bool `pulumi:"zoneResilient"`
}

// ImageStorageProfileInput is an input type that accepts ImageStorageProfileArgs and ImageStorageProfileOutput values.
// You can construct a concrete instance of `ImageStorageProfileInput` via:
//
//	ImageStorageProfileArgs{...}
type ImageStorageProfileInput interface {
	pulumi.Input

	ToImageStorageProfileOutput() ImageStorageProfileOutput
	ToImageStorageProfileOutputWithContext(context.Context) ImageStorageProfileOutput
}

// Describes a storage profile.
type ImageStorageProfileArgs struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks ImageDataDiskArrayInput `pulumi:"dataDisks"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk ImageOSDiskPtrInput `pulumi:"osDisk"`
	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
	ZoneResilient pulumi.BoolPtrInput `pulumi:"zoneResilient"`
}

func (ImageStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageStorageProfile)(nil)).Elem()
}

func (i ImageStorageProfileArgs) ToImageStorageProfileOutput() ImageStorageProfileOutput {
	return i.ToImageStorageProfileOutputWithContext(context.Background())
}

func (i ImageStorageProfileArgs) ToImageStorageProfileOutputWithContext(ctx context.Context) ImageStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageStorageProfileOutput)
}

func (i ImageStorageProfileArgs) ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput {
	return i.ToImageStorageProfilePtrOutputWithContext(context.Background())
}

func (i ImageStorageProfileArgs) ToImageStorageProfilePtrOutputWithContext(ctx context.Context) ImageStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageStorageProfileOutput).ToImageStorageProfilePtrOutputWithContext(ctx)
}

// ImageStorageProfilePtrInput is an input type that accepts ImageStorageProfileArgs, ImageStorageProfilePtr and ImageStorageProfilePtrOutput values.
// You can construct a concrete instance of `ImageStorageProfilePtrInput` via:
//
//	        ImageStorageProfileArgs{...}
//
//	or:
//
//	        nil
type ImageStorageProfilePtrInput interface {
	pulumi.Input

	ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput
	ToImageStorageProfilePtrOutputWithContext(context.Context) ImageStorageProfilePtrOutput
}

type imageStorageProfilePtrType ImageStorageProfileArgs

func ImageStorageProfilePtr(v *ImageStorageProfileArgs) ImageStorageProfilePtrInput {
	return (*imageStorageProfilePtrType)(v)
}

func (*imageStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageStorageProfile)(nil)).Elem()
}

func (i *imageStorageProfilePtrType) ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput {
	return i.ToImageStorageProfilePtrOutputWithContext(context.Background())
}

func (i *imageStorageProfilePtrType) ToImageStorageProfilePtrOutputWithContext(ctx context.Context) ImageStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageStorageProfilePtrOutput)
}

// Describes a storage profile.
type ImageStorageProfileOutput struct{ *pulumi.OutputState }

func (ImageStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageStorageProfile)(nil)).Elem()
}

func (o ImageStorageProfileOutput) ToImageStorageProfileOutput() ImageStorageProfileOutput {
	return o
}

func (o ImageStorageProfileOutput) ToImageStorageProfileOutputWithContext(ctx context.Context) ImageStorageProfileOutput {
	return o
}

func (o ImageStorageProfileOutput) ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput {
	return o.ToImageStorageProfilePtrOutputWithContext(context.Background())
}

func (o ImageStorageProfileOutput) ToImageStorageProfilePtrOutputWithContext(ctx context.Context) ImageStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageStorageProfile) *ImageStorageProfile {
		return &v
	}).(ImageStorageProfilePtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfileOutput) DataDisks() ImageDataDiskArrayOutput {
	return o.ApplyT(func(v ImageStorageProfile) []ImageDataDisk { return v.DataDisks }).(ImageDataDiskArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfileOutput) OsDisk() ImageOSDiskPtrOutput {
	return o.ApplyT(func(v ImageStorageProfile) *ImageOSDisk { return v.OsDisk }).(ImageOSDiskPtrOutput)
}

// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
func (o ImageStorageProfileOutput) ZoneResilient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageStorageProfile) *bool { return v.ZoneResilient }).(pulumi.BoolPtrOutput)
}

type ImageStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (ImageStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageStorageProfile)(nil)).Elem()
}

func (o ImageStorageProfilePtrOutput) ToImageStorageProfilePtrOutput() ImageStorageProfilePtrOutput {
	return o
}

func (o ImageStorageProfilePtrOutput) ToImageStorageProfilePtrOutputWithContext(ctx context.Context) ImageStorageProfilePtrOutput {
	return o
}

func (o ImageStorageProfilePtrOutput) Elem() ImageStorageProfileOutput {
	return o.ApplyT(func(v *ImageStorageProfile) ImageStorageProfile {
		if v != nil {
			return *v
		}
		var ret ImageStorageProfile
		return ret
	}).(ImageStorageProfileOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfilePtrOutput) DataDisks() ImageDataDiskArrayOutput {
	return o.ApplyT(func(v *ImageStorageProfile) []ImageDataDisk {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(ImageDataDiskArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfilePtrOutput) OsDisk() ImageOSDiskPtrOutput {
	return o.ApplyT(func(v *ImageStorageProfile) *ImageOSDisk {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(ImageOSDiskPtrOutput)
}

// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
func (o ImageStorageProfilePtrOutput) ZoneResilient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageStorageProfile) *bool {
		if v == nil {
			return nil
		}
		return v.ZoneResilient
	}).(pulumi.BoolPtrOutput)
}

// Describes a storage profile.
type ImageStorageProfileResponse struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks []ImageDataDiskResponse `pulumi:"dataDisks"`
	// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk *ImageOSDiskResponse `pulumi:"osDisk"`
	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
	ZoneResilient *bool `pulumi:"zoneResilient"`
}

// Describes a storage profile.
type ImageStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (ImageStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageStorageProfileResponse)(nil)).Elem()
}

func (o ImageStorageProfileResponseOutput) ToImageStorageProfileResponseOutput() ImageStorageProfileResponseOutput {
	return o
}

func (o ImageStorageProfileResponseOutput) ToImageStorageProfileResponseOutputWithContext(ctx context.Context) ImageStorageProfileResponseOutput {
	return o
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfileResponseOutput) DataDisks() ImageDataDiskResponseArrayOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) []ImageDataDiskResponse { return v.DataDisks }).(ImageDataDiskResponseArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfileResponseOutput) OsDisk() ImageOSDiskResponsePtrOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) *ImageOSDiskResponse { return v.OsDisk }).(ImageOSDiskResponsePtrOutput)
}

// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
func (o ImageStorageProfileResponseOutput) ZoneResilient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageStorageProfileResponse) *bool { return v.ZoneResilient }).(pulumi.BoolPtrOutput)
}

type ImageStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageStorageProfileResponse)(nil)).Elem()
}

func (o ImageStorageProfileResponsePtrOutput) ToImageStorageProfileResponsePtrOutput() ImageStorageProfileResponsePtrOutput {
	return o
}

func (o ImageStorageProfileResponsePtrOutput) ToImageStorageProfileResponsePtrOutputWithContext(ctx context.Context) ImageStorageProfileResponsePtrOutput {
	return o
}

func (o ImageStorageProfileResponsePtrOutput) Elem() ImageStorageProfileResponseOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) ImageStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret ImageStorageProfileResponse
		return ret
	}).(ImageStorageProfileResponseOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfileResponsePtrOutput) DataDisks() ImageDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) []ImageDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(ImageDataDiskResponseArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o ImageStorageProfileResponsePtrOutput) OsDisk() ImageOSDiskResponsePtrOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) *ImageOSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(ImageOSDiskResponsePtrOutput)
}

// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
func (o ImageStorageProfileResponsePtrOutput) ZoneResilient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageStorageProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ZoneResilient
	}).(pulumi.BoolPtrOutput)
}

// The security profile of a gallery image version
type ImageVersionSecurityProfile struct {
	// Contains UEFI settings for the image version.
	UefiSettings *GalleryImageVersionUefiSettings `pulumi:"uefiSettings"`
}

// ImageVersionSecurityProfileInput is an input type that accepts ImageVersionSecurityProfileArgs and ImageVersionSecurityProfileOutput values.
// You can construct a concrete instance of `ImageVersionSecurityProfileInput` via:
//
//	ImageVersionSecurityProfileArgs{...}
type ImageVersionSecurityProfileInput interface {
	pulumi.Input

	ToImageVersionSecurityProfileOutput() ImageVersionSecurityProfileOutput
	ToImageVersionSecurityProfileOutputWithContext(context.Context) ImageVersionSecurityProfileOutput
}

// The security profile of a gallery image version
type ImageVersionSecurityProfileArgs struct {
	// Contains UEFI settings for the image version.
	UefiSettings GalleryImageVersionUefiSettingsPtrInput `pulumi:"uefiSettings"`
}

func (ImageVersionSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVersionSecurityProfile)(nil)).Elem()
}

func (i ImageVersionSecurityProfileArgs) ToImageVersionSecurityProfileOutput() ImageVersionSecurityProfileOutput {
	return i.ToImageVersionSecurityProfileOutputWithContext(context.Background())
}

func (i ImageVersionSecurityProfileArgs) ToImageVersionSecurityProfileOutputWithContext(ctx context.Context) ImageVersionSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVersionSecurityProfileOutput)
}

func (i ImageVersionSecurityProfileArgs) ToImageVersionSecurityProfilePtrOutput() ImageVersionSecurityProfilePtrOutput {
	return i.ToImageVersionSecurityProfilePtrOutputWithContext(context.Background())
}

func (i ImageVersionSecurityProfileArgs) ToImageVersionSecurityProfilePtrOutputWithContext(ctx context.Context) ImageVersionSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVersionSecurityProfileOutput).ToImageVersionSecurityProfilePtrOutputWithContext(ctx)
}

// ImageVersionSecurityProfilePtrInput is an input type that accepts ImageVersionSecurityProfileArgs, ImageVersionSecurityProfilePtr and ImageVersionSecurityProfilePtrOutput values.
// You can construct a concrete instance of `ImageVersionSecurityProfilePtrInput` via:
//
//	        ImageVersionSecurityProfileArgs{...}
//
//	or:
//
//	        nil
type ImageVersionSecurityProfilePtrInput interface {
	pulumi.Input

	ToImageVersionSecurityProfilePtrOutput() ImageVersionSecurityProfilePtrOutput
	ToImageVersionSecurityProfilePtrOutputWithContext(context.Context) ImageVersionSecurityProfilePtrOutput
}

type imageVersionSecurityProfilePtrType ImageVersionSecurityProfileArgs

func ImageVersionSecurityProfilePtr(v *ImageVersionSecurityProfileArgs) ImageVersionSecurityProfilePtrInput {
	return (*imageVersionSecurityProfilePtrType)(v)
}

func (*imageVersionSecurityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVersionSecurityProfile)(nil)).Elem()
}

func (i *imageVersionSecurityProfilePtrType) ToImageVersionSecurityProfilePtrOutput() ImageVersionSecurityProfilePtrOutput {
	return i.ToImageVersionSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *imageVersionSecurityProfilePtrType) ToImageVersionSecurityProfilePtrOutputWithContext(ctx context.Context) ImageVersionSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVersionSecurityProfilePtrOutput)
}

// The security profile of a gallery image version
type ImageVersionSecurityProfileOutput struct{ *pulumi.OutputState }

func (ImageVersionSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVersionSecurityProfile)(nil)).Elem()
}

func (o ImageVersionSecurityProfileOutput) ToImageVersionSecurityProfileOutput() ImageVersionSecurityProfileOutput {
	return o
}

func (o ImageVersionSecurityProfileOutput) ToImageVersionSecurityProfileOutputWithContext(ctx context.Context) ImageVersionSecurityProfileOutput {
	return o
}

func (o ImageVersionSecurityProfileOutput) ToImageVersionSecurityProfilePtrOutput() ImageVersionSecurityProfilePtrOutput {
	return o.ToImageVersionSecurityProfilePtrOutputWithContext(context.Background())
}

func (o ImageVersionSecurityProfileOutput) ToImageVersionSecurityProfilePtrOutputWithContext(ctx context.Context) ImageVersionSecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageVersionSecurityProfile) *ImageVersionSecurityProfile {
		return &v
	}).(ImageVersionSecurityProfilePtrOutput)
}

// Contains UEFI settings for the image version.
func (o ImageVersionSecurityProfileOutput) UefiSettings() GalleryImageVersionUefiSettingsPtrOutput {
	return o.ApplyT(func(v ImageVersionSecurityProfile) *GalleryImageVersionUefiSettings { return v.UefiSettings }).(GalleryImageVersionUefiSettingsPtrOutput)
}

type ImageVersionSecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (ImageVersionSecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVersionSecurityProfile)(nil)).Elem()
}

func (o ImageVersionSecurityProfilePtrOutput) ToImageVersionSecurityProfilePtrOutput() ImageVersionSecurityProfilePtrOutput {
	return o
}

func (o ImageVersionSecurityProfilePtrOutput) ToImageVersionSecurityProfilePtrOutputWithContext(ctx context.Context) ImageVersionSecurityProfilePtrOutput {
	return o
}

func (o ImageVersionSecurityProfilePtrOutput) Elem() ImageVersionSecurityProfileOutput {
	return o.ApplyT(func(v *ImageVersionSecurityProfile) ImageVersionSecurityProfile {
		if v != nil {
			return *v
		}
		var ret ImageVersionSecurityProfile
		return ret
	}).(ImageVersionSecurityProfileOutput)
}

// Contains UEFI settings for the image version.
func (o ImageVersionSecurityProfilePtrOutput) UefiSettings() GalleryImageVersionUefiSettingsPtrOutput {
	return o.ApplyT(func(v *ImageVersionSecurityProfile) *GalleryImageVersionUefiSettings {
		if v == nil {
			return nil
		}
		return v.UefiSettings
	}).(GalleryImageVersionUefiSettingsPtrOutput)
}

// The security profile of a gallery image version
type ImageVersionSecurityProfileResponse struct {
	// Contains UEFI settings for the image version.
	UefiSettings *GalleryImageVersionUefiSettingsResponse `pulumi:"uefiSettings"`
}

// The security profile of a gallery image version
type ImageVersionSecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (ImageVersionSecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVersionSecurityProfileResponse)(nil)).Elem()
}

func (o ImageVersionSecurityProfileResponseOutput) ToImageVersionSecurityProfileResponseOutput() ImageVersionSecurityProfileResponseOutput {
	return o
}

func (o ImageVersionSecurityProfileResponseOutput) ToImageVersionSecurityProfileResponseOutputWithContext(ctx context.Context) ImageVersionSecurityProfileResponseOutput {
	return o
}

// Contains UEFI settings for the image version.
func (o ImageVersionSecurityProfileResponseOutput) UefiSettings() GalleryImageVersionUefiSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageVersionSecurityProfileResponse) *GalleryImageVersionUefiSettingsResponse {
		return v.UefiSettings
	}).(GalleryImageVersionUefiSettingsResponsePtrOutput)
}

type ImageVersionSecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageVersionSecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVersionSecurityProfileResponse)(nil)).Elem()
}

func (o ImageVersionSecurityProfileResponsePtrOutput) ToImageVersionSecurityProfileResponsePtrOutput() ImageVersionSecurityProfileResponsePtrOutput {
	return o
}

func (o ImageVersionSecurityProfileResponsePtrOutput) ToImageVersionSecurityProfileResponsePtrOutputWithContext(ctx context.Context) ImageVersionSecurityProfileResponsePtrOutput {
	return o
}

func (o ImageVersionSecurityProfileResponsePtrOutput) Elem() ImageVersionSecurityProfileResponseOutput {
	return o.ApplyT(func(v *ImageVersionSecurityProfileResponse) ImageVersionSecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret ImageVersionSecurityProfileResponse
		return ret
	}).(ImageVersionSecurityProfileResponseOutput)
}

// Contains UEFI settings for the image version.
func (o ImageVersionSecurityProfileResponsePtrOutput) UefiSettings() GalleryImageVersionUefiSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ImageVersionSecurityProfileResponse) *GalleryImageVersionUefiSettingsResponse {
		if v == nil {
			return nil
		}
		return v.UefiSettings
	}).(GalleryImageVersionUefiSettingsResponsePtrOutput)
}

// Inner error details.
type InnerErrorResponse struct {
	// The internal error message or exception dump.
	Errordetail *string `pulumi:"errordetail"`
	// The exception type.
	Exceptiontype *string `pulumi:"exceptiontype"`
}

// Inner error details.
type InnerErrorResponseOutput struct{ *pulumi.OutputState }

func (InnerErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InnerErrorResponse)(nil)).Elem()
}

func (o InnerErrorResponseOutput) ToInnerErrorResponseOutput() InnerErrorResponseOutput {
	return o
}

func (o InnerErrorResponseOutput) ToInnerErrorResponseOutputWithContext(ctx context.Context) InnerErrorResponseOutput {
	return o
}

// The internal error message or exception dump.
func (o InnerErrorResponseOutput) Errordetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InnerErrorResponse) *string { return v.Errordetail }).(pulumi.StringPtrOutput)
}

// The exception type.
func (o InnerErrorResponseOutput) Exceptiontype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InnerErrorResponse) *string { return v.Exceptiontype }).(pulumi.StringPtrOutput)
}

type InnerErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (InnerErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InnerErrorResponse)(nil)).Elem()
}

func (o InnerErrorResponsePtrOutput) ToInnerErrorResponsePtrOutput() InnerErrorResponsePtrOutput {
	return o
}

func (o InnerErrorResponsePtrOutput) ToInnerErrorResponsePtrOutputWithContext(ctx context.Context) InnerErrorResponsePtrOutput {
	return o
}

func (o InnerErrorResponsePtrOutput) Elem() InnerErrorResponseOutput {
	return o.ApplyT(func(v *InnerErrorResponse) InnerErrorResponse {
		if v != nil {
			return *v
		}
		var ret InnerErrorResponse
		return ret
	}).(InnerErrorResponseOutput)
}

// The internal error message or exception dump.
func (o InnerErrorResponsePtrOutput) Errordetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InnerErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Errordetail
	}).(pulumi.StringPtrOutput)
}

// The exception type.
func (o InnerErrorResponsePtrOutput) Exceptiontype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InnerErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Exceptiontype
	}).(pulumi.StringPtrOutput)
}

// Instance view status.
type InstanceViewStatus struct {
	// The status code.
	Code *string `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus *string `pulumi:"displayStatus"`
	// The level code.
	Level *StatusLevelTypes `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message *string `pulumi:"message"`
	// The time of the status.
	Time *string `pulumi:"time"`
}

// InstanceViewStatusInput is an input type that accepts InstanceViewStatusArgs and InstanceViewStatusOutput values.
// You can construct a concrete instance of `InstanceViewStatusInput` via:
//
//	InstanceViewStatusArgs{...}
type InstanceViewStatusInput interface {
	pulumi.Input

	ToInstanceViewStatusOutput() InstanceViewStatusOutput
	ToInstanceViewStatusOutputWithContext(context.Context) InstanceViewStatusOutput
}

// Instance view status.
type InstanceViewStatusArgs struct {
	// The status code.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus pulumi.StringPtrInput `pulumi:"displayStatus"`
	// The level code.
	Level StatusLevelTypesPtrInput `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The time of the status.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (InstanceViewStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceViewStatus)(nil)).Elem()
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusOutput() InstanceViewStatusOutput {
	return i.ToInstanceViewStatusOutputWithContext(context.Background())
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusOutputWithContext(ctx context.Context) InstanceViewStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusOutput)
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput {
	return i.ToInstanceViewStatusPtrOutputWithContext(context.Background())
}

func (i InstanceViewStatusArgs) ToInstanceViewStatusPtrOutputWithContext(ctx context.Context) InstanceViewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusOutput).ToInstanceViewStatusPtrOutputWithContext(ctx)
}

// InstanceViewStatusPtrInput is an input type that accepts InstanceViewStatusArgs, InstanceViewStatusPtr and InstanceViewStatusPtrOutput values.
// You can construct a concrete instance of `InstanceViewStatusPtrInput` via:
//
//	        InstanceViewStatusArgs{...}
//
//	or:
//
//	        nil
type InstanceViewStatusPtrInput interface {
	pulumi.Input

	ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput
	ToInstanceViewStatusPtrOutputWithContext(context.Context) InstanceViewStatusPtrOutput
}

type instanceViewStatusPtrType InstanceViewStatusArgs

func InstanceViewStatusPtr(v *InstanceViewStatusArgs) InstanceViewStatusPtrInput {
	return (*instanceViewStatusPtrType)(v)
}

func (*instanceViewStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceViewStatus)(nil)).Elem()
}

func (i *instanceViewStatusPtrType) ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput {
	return i.ToInstanceViewStatusPtrOutputWithContext(context.Background())
}

func (i *instanceViewStatusPtrType) ToInstanceViewStatusPtrOutputWithContext(ctx context.Context) InstanceViewStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusPtrOutput)
}

// InstanceViewStatusArrayInput is an input type that accepts InstanceViewStatusArray and InstanceViewStatusArrayOutput values.
// You can construct a concrete instance of `InstanceViewStatusArrayInput` via:
//
//	InstanceViewStatusArray{ InstanceViewStatusArgs{...} }
type InstanceViewStatusArrayInput interface {
	pulumi.Input

	ToInstanceViewStatusArrayOutput() InstanceViewStatusArrayOutput
	ToInstanceViewStatusArrayOutputWithContext(context.Context) InstanceViewStatusArrayOutput
}

type InstanceViewStatusArray []InstanceViewStatusInput

func (InstanceViewStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceViewStatus)(nil)).Elem()
}

func (i InstanceViewStatusArray) ToInstanceViewStatusArrayOutput() InstanceViewStatusArrayOutput {
	return i.ToInstanceViewStatusArrayOutputWithContext(context.Background())
}

func (i InstanceViewStatusArray) ToInstanceViewStatusArrayOutputWithContext(ctx context.Context) InstanceViewStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceViewStatusArrayOutput)
}

// Instance view status.
type InstanceViewStatusOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceViewStatus)(nil)).Elem()
}

func (o InstanceViewStatusOutput) ToInstanceViewStatusOutput() InstanceViewStatusOutput {
	return o
}

func (o InstanceViewStatusOutput) ToInstanceViewStatusOutputWithContext(ctx context.Context) InstanceViewStatusOutput {
	return o
}

func (o InstanceViewStatusOutput) ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput {
	return o.ToInstanceViewStatusPtrOutputWithContext(context.Background())
}

func (o InstanceViewStatusOutput) ToInstanceViewStatusPtrOutputWithContext(ctx context.Context) InstanceViewStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceViewStatus) *InstanceViewStatus {
		return &v
	}).(InstanceViewStatusPtrOutput)
}

// The status code.
func (o InstanceViewStatusOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatus) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatus) *string { return v.DisplayStatus }).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusOutput) Level() StatusLevelTypesPtrOutput {
	return o.ApplyT(func(v InstanceViewStatus) *StatusLevelTypes { return v.Level }).(StatusLevelTypesPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatus) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type InstanceViewStatusPtrOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceViewStatus)(nil)).Elem()
}

func (o InstanceViewStatusPtrOutput) ToInstanceViewStatusPtrOutput() InstanceViewStatusPtrOutput {
	return o
}

func (o InstanceViewStatusPtrOutput) ToInstanceViewStatusPtrOutputWithContext(ctx context.Context) InstanceViewStatusPtrOutput {
	return o
}

func (o InstanceViewStatusPtrOutput) Elem() InstanceViewStatusOutput {
	return o.ApplyT(func(v *InstanceViewStatus) InstanceViewStatus {
		if v != nil {
			return *v
		}
		var ret InstanceViewStatus
		return ret
	}).(InstanceViewStatusOutput)
}

// The status code.
func (o InstanceViewStatusPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatus) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusPtrOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatus) *string {
		if v == nil {
			return nil
		}
		return v.DisplayStatus
	}).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusPtrOutput) Level() StatusLevelTypesPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatus) *StatusLevelTypes {
		if v == nil {
			return nil
		}
		return v.Level
	}).(StatusLevelTypesPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatus) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type InstanceViewStatusArrayOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceViewStatus)(nil)).Elem()
}

func (o InstanceViewStatusArrayOutput) ToInstanceViewStatusArrayOutput() InstanceViewStatusArrayOutput {
	return o
}

func (o InstanceViewStatusArrayOutput) ToInstanceViewStatusArrayOutputWithContext(ctx context.Context) InstanceViewStatusArrayOutput {
	return o
}

func (o InstanceViewStatusArrayOutput) Index(i pulumi.IntInput) InstanceViewStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceViewStatus {
		return vs[0].([]InstanceViewStatus)[vs[1].(int)]
	}).(InstanceViewStatusOutput)
}

// Instance view status.
type InstanceViewStatusResponse struct {
	// The status code.
	Code *string `pulumi:"code"`
	// The short localizable label for the status.
	DisplayStatus *string `pulumi:"displayStatus"`
	// The level code.
	Level *string `pulumi:"level"`
	// The detailed status message, including for alerts and error messages.
	Message *string `pulumi:"message"`
	// The time of the status.
	Time *string `pulumi:"time"`
}

// Instance view status.
type InstanceViewStatusResponseOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponseOutput() InstanceViewStatusResponseOutput {
	return o
}

func (o InstanceViewStatusResponseOutput) ToInstanceViewStatusResponseOutputWithContext(ctx context.Context) InstanceViewStatusResponseOutput {
	return o
}

// The status code.
func (o InstanceViewStatusResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusResponseOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.DisplayStatus }).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusResponseOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceViewStatusResponse) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type InstanceViewStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponsePtrOutput) ToInstanceViewStatusResponsePtrOutput() InstanceViewStatusResponsePtrOutput {
	return o
}

func (o InstanceViewStatusResponsePtrOutput) ToInstanceViewStatusResponsePtrOutputWithContext(ctx context.Context) InstanceViewStatusResponsePtrOutput {
	return o
}

func (o InstanceViewStatusResponsePtrOutput) Elem() InstanceViewStatusResponseOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) InstanceViewStatusResponse {
		if v != nil {
			return *v
		}
		var ret InstanceViewStatusResponse
		return ret
	}).(InstanceViewStatusResponseOutput)
}

// The status code.
func (o InstanceViewStatusResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// The short localizable label for the status.
func (o InstanceViewStatusResponsePtrOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayStatus
	}).(pulumi.StringPtrOutput)
}

// The level code.
func (o InstanceViewStatusResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The detailed status message, including for alerts and error messages.
func (o InstanceViewStatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The time of the status.
func (o InstanceViewStatusResponsePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceViewStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type InstanceViewStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceViewStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceViewStatusResponse)(nil)).Elem()
}

func (o InstanceViewStatusResponseArrayOutput) ToInstanceViewStatusResponseArrayOutput() InstanceViewStatusResponseArrayOutput {
	return o
}

func (o InstanceViewStatusResponseArrayOutput) ToInstanceViewStatusResponseArrayOutputWithContext(ctx context.Context) InstanceViewStatusResponseArrayOutput {
	return o
}

func (o InstanceViewStatusResponseArrayOutput) Index(i pulumi.IntInput) InstanceViewStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceViewStatusResponse {
		return vs[0].([]InstanceViewStatusResponse)[vs[1].(int)]
	}).(InstanceViewStatusResponseOutput)
}

// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSet struct {
	// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
	SourceVault *SourceVault `pulumi:"sourceVault"`
}

// KeyForDiskEncryptionSetInput is an input type that accepts KeyForDiskEncryptionSetArgs and KeyForDiskEncryptionSetOutput values.
// You can construct a concrete instance of `KeyForDiskEncryptionSetInput` via:
//
//	KeyForDiskEncryptionSetArgs{...}
type KeyForDiskEncryptionSetInput interface {
	pulumi.Input

	ToKeyForDiskEncryptionSetOutput() KeyForDiskEncryptionSetOutput
	ToKeyForDiskEncryptionSetOutputWithContext(context.Context) KeyForDiskEncryptionSetOutput
}

// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSetArgs struct {
	// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
	SourceVault SourceVaultPtrInput `pulumi:"sourceVault"`
}

func (KeyForDiskEncryptionSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyForDiskEncryptionSet)(nil)).Elem()
}

func (i KeyForDiskEncryptionSetArgs) ToKeyForDiskEncryptionSetOutput() KeyForDiskEncryptionSetOutput {
	return i.ToKeyForDiskEncryptionSetOutputWithContext(context.Background())
}

func (i KeyForDiskEncryptionSetArgs) ToKeyForDiskEncryptionSetOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyForDiskEncryptionSetOutput)
}

func (i KeyForDiskEncryptionSetArgs) ToKeyForDiskEncryptionSetPtrOutput() KeyForDiskEncryptionSetPtrOutput {
	return i.ToKeyForDiskEncryptionSetPtrOutputWithContext(context.Background())
}

func (i KeyForDiskEncryptionSetArgs) ToKeyForDiskEncryptionSetPtrOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyForDiskEncryptionSetOutput).ToKeyForDiskEncryptionSetPtrOutputWithContext(ctx)
}

// KeyForDiskEncryptionSetPtrInput is an input type that accepts KeyForDiskEncryptionSetArgs, KeyForDiskEncryptionSetPtr and KeyForDiskEncryptionSetPtrOutput values.
// You can construct a concrete instance of `KeyForDiskEncryptionSetPtrInput` via:
//
//	        KeyForDiskEncryptionSetArgs{...}
//
//	or:
//
//	        nil
type KeyForDiskEncryptionSetPtrInput interface {
	pulumi.Input

	ToKeyForDiskEncryptionSetPtrOutput() KeyForDiskEncryptionSetPtrOutput
	ToKeyForDiskEncryptionSetPtrOutputWithContext(context.Context) KeyForDiskEncryptionSetPtrOutput
}

type keyForDiskEncryptionSetPtrType KeyForDiskEncryptionSetArgs

func KeyForDiskEncryptionSetPtr(v *KeyForDiskEncryptionSetArgs) KeyForDiskEncryptionSetPtrInput {
	return (*keyForDiskEncryptionSetPtrType)(v)
}

func (*keyForDiskEncryptionSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyForDiskEncryptionSet)(nil)).Elem()
}

func (i *keyForDiskEncryptionSetPtrType) ToKeyForDiskEncryptionSetPtrOutput() KeyForDiskEncryptionSetPtrOutput {
	return i.ToKeyForDiskEncryptionSetPtrOutputWithContext(context.Background())
}

func (i *keyForDiskEncryptionSetPtrType) ToKeyForDiskEncryptionSetPtrOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyForDiskEncryptionSetPtrOutput)
}

// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSetOutput struct{ *pulumi.OutputState }

func (KeyForDiskEncryptionSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyForDiskEncryptionSet)(nil)).Elem()
}

func (o KeyForDiskEncryptionSetOutput) ToKeyForDiskEncryptionSetOutput() KeyForDiskEncryptionSetOutput {
	return o
}

func (o KeyForDiskEncryptionSetOutput) ToKeyForDiskEncryptionSetOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetOutput {
	return o
}

func (o KeyForDiskEncryptionSetOutput) ToKeyForDiskEncryptionSetPtrOutput() KeyForDiskEncryptionSetPtrOutput {
	return o.ToKeyForDiskEncryptionSetPtrOutputWithContext(context.Background())
}

func (o KeyForDiskEncryptionSetOutput) ToKeyForDiskEncryptionSetPtrOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyForDiskEncryptionSet) *KeyForDiskEncryptionSet {
		return &v
	}).(KeyForDiskEncryptionSetPtrOutput)
}

// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
func (o KeyForDiskEncryptionSetOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyForDiskEncryptionSet) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
func (o KeyForDiskEncryptionSetOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v KeyForDiskEncryptionSet) *SourceVault { return v.SourceVault }).(SourceVaultPtrOutput)
}

type KeyForDiskEncryptionSetPtrOutput struct{ *pulumi.OutputState }

func (KeyForDiskEncryptionSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyForDiskEncryptionSet)(nil)).Elem()
}

func (o KeyForDiskEncryptionSetPtrOutput) ToKeyForDiskEncryptionSetPtrOutput() KeyForDiskEncryptionSetPtrOutput {
	return o
}

func (o KeyForDiskEncryptionSetPtrOutput) ToKeyForDiskEncryptionSetPtrOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetPtrOutput {
	return o
}

func (o KeyForDiskEncryptionSetPtrOutput) Elem() KeyForDiskEncryptionSetOutput {
	return o.ApplyT(func(v *KeyForDiskEncryptionSet) KeyForDiskEncryptionSet {
		if v != nil {
			return *v
		}
		var ret KeyForDiskEncryptionSet
		return ret
	}).(KeyForDiskEncryptionSetOutput)
}

// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
func (o KeyForDiskEncryptionSetPtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyForDiskEncryptionSet) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
func (o KeyForDiskEncryptionSetPtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyForDiskEncryptionSet) *SourceVault {
		if v == nil {
			return nil
		}
		return v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSetResponse struct {
	// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
	SourceVault *SourceVaultResponse `pulumi:"sourceVault"`
}

// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSetResponseOutput struct{ *pulumi.OutputState }

func (KeyForDiskEncryptionSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyForDiskEncryptionSetResponse)(nil)).Elem()
}

func (o KeyForDiskEncryptionSetResponseOutput) ToKeyForDiskEncryptionSetResponseOutput() KeyForDiskEncryptionSetResponseOutput {
	return o
}

func (o KeyForDiskEncryptionSetResponseOutput) ToKeyForDiskEncryptionSetResponseOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetResponseOutput {
	return o
}

// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
func (o KeyForDiskEncryptionSetResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyForDiskEncryptionSetResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
func (o KeyForDiskEncryptionSetResponseOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v KeyForDiskEncryptionSetResponse) *SourceVaultResponse { return v.SourceVault }).(SourceVaultResponsePtrOutput)
}

type KeyForDiskEncryptionSetResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyForDiskEncryptionSetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyForDiskEncryptionSetResponse)(nil)).Elem()
}

func (o KeyForDiskEncryptionSetResponsePtrOutput) ToKeyForDiskEncryptionSetResponsePtrOutput() KeyForDiskEncryptionSetResponsePtrOutput {
	return o
}

func (o KeyForDiskEncryptionSetResponsePtrOutput) ToKeyForDiskEncryptionSetResponsePtrOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetResponsePtrOutput {
	return o
}

func (o KeyForDiskEncryptionSetResponsePtrOutput) Elem() KeyForDiskEncryptionSetResponseOutput {
	return o.ApplyT(func(v *KeyForDiskEncryptionSetResponse) KeyForDiskEncryptionSetResponse {
		if v != nil {
			return *v
		}
		var ret KeyForDiskEncryptionSetResponse
		return ret
	}).(KeyForDiskEncryptionSetResponseOutput)
}

// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
func (o KeyForDiskEncryptionSetResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyForDiskEncryptionSetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
func (o KeyForDiskEncryptionSetResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyForDiskEncryptionSetResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

type KeyForDiskEncryptionSetResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyForDiskEncryptionSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyForDiskEncryptionSetResponse)(nil)).Elem()
}

func (o KeyForDiskEncryptionSetResponseArrayOutput) ToKeyForDiskEncryptionSetResponseArrayOutput() KeyForDiskEncryptionSetResponseArrayOutput {
	return o
}

func (o KeyForDiskEncryptionSetResponseArrayOutput) ToKeyForDiskEncryptionSetResponseArrayOutputWithContext(ctx context.Context) KeyForDiskEncryptionSetResponseArrayOutput {
	return o
}

func (o KeyForDiskEncryptionSetResponseArrayOutput) Index(i pulumi.IntInput) KeyForDiskEncryptionSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyForDiskEncryptionSetResponse {
		return vs[0].([]KeyForDiskEncryptionSetResponse)[vs[1].(int)]
	}).(KeyForDiskEncryptionSetResponseOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndKeyReferenceInput is an input type that accepts KeyVaultAndKeyReferenceArgs and KeyVaultAndKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferenceInput` via:
//
//	KeyVaultAndKeyReferenceArgs{...}
type KeyVaultAndKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput
	ToKeyVaultAndKeyReferenceOutputWithContext(context.Context) KeyVaultAndKeyReferenceOutput
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return i.ToKeyVaultAndKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput)
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndKeyReferenceArgs) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferenceOutput).ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndKeyReferencePtrInput is an input type that accepts KeyVaultAndKeyReferenceArgs, KeyVaultAndKeyReferencePtr and KeyVaultAndKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndKeyReferencePtrInput` via:
//
//	        KeyVaultAndKeyReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultAndKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput
	ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Context) KeyVaultAndKeyReferencePtrOutput
}

type keyVaultAndKeyReferencePtrType KeyVaultAndKeyReferenceArgs

func KeyVaultAndKeyReferencePtr(v *KeyVaultAndKeyReferenceArgs) KeyVaultAndKeyReferencePtrInput {
	return (*keyVaultAndKeyReferencePtrType)(v)
}

func (*keyVaultAndKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return i.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndKeyReferencePtrType) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndKeyReferencePtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReference)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferenceOutput() KeyVaultAndKeyReferenceOutput {
	return o
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferenceOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceOutput {
	return o
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return o.ToKeyVaultAndKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndKeyReferenceOutput) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultAndKeyReference) *KeyVaultAndKeyReference {
		return &v
	}).(KeyVaultAndKeyReferencePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceOutput) SourceVault() SourceVaultOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReference) SourceVault { return v.SourceVault }).(SourceVaultOutput)
}

type KeyVaultAndKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReference)(nil)).Elem()
}

func (o KeyVaultAndKeyReferencePtrOutput) ToKeyVaultAndKeyReferencePtrOutput() KeyVaultAndKeyReferencePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferencePtrOutput) ToKeyVaultAndKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferencePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferencePtrOutput) Elem() KeyVaultAndKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) KeyVaultAndKeyReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultAndKeyReference
		return ret
	}).(KeyVaultAndKeyReferenceOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferencePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferencePtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReference) *SourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	KeyUrl string `pulumi:"keyUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutput() KeyVaultAndKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponseOutput) ToKeyVaultAndKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponseOutput {
	return o
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndKeyReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutput() KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) ToKeyVaultAndKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndKeyReferenceResponsePtrOutput) Elem() KeyVaultAndKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) KeyVaultAndKeyReferenceResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultAndKeyReferenceResponse
		return ret
	}).(KeyVaultAndKeyReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndKeyReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndKeyReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVault `pulumi:"sourceVault"`
}

// KeyVaultAndSecretReferenceInput is an input type that accepts KeyVaultAndSecretReferenceArgs and KeyVaultAndSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferenceInput` via:
//
//	KeyVaultAndSecretReferenceArgs{...}
type KeyVaultAndSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput
	ToKeyVaultAndSecretReferenceOutputWithContext(context.Context) KeyVaultAndSecretReferenceOutput
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceArgs struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultInput `pulumi:"sourceVault"`
}

func (KeyVaultAndSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return i.ToKeyVaultAndSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput)
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultAndSecretReferenceArgs) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferenceOutput).ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultAndSecretReferencePtrInput is an input type that accepts KeyVaultAndSecretReferenceArgs, KeyVaultAndSecretReferencePtr and KeyVaultAndSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultAndSecretReferencePtrInput` via:
//
//	        KeyVaultAndSecretReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultAndSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput
	ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Context) KeyVaultAndSecretReferencePtrOutput
}

type keyVaultAndSecretReferencePtrType KeyVaultAndSecretReferenceArgs

func KeyVaultAndSecretReferencePtr(v *KeyVaultAndSecretReferenceArgs) KeyVaultAndSecretReferencePtrInput {
	return (*keyVaultAndSecretReferencePtrType)(v)
}

func (*keyVaultAndSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return i.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultAndSecretReferencePtrType) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAndSecretReferencePtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReference)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferenceOutput() KeyVaultAndSecretReferenceOutput {
	return o
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferenceOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceOutput {
	return o
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return o.ToKeyVaultAndSecretReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultAndSecretReferenceOutput) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultAndSecretReference) *KeyVaultAndSecretReference {
		return &v
	}).(KeyVaultAndSecretReferencePtrOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceOutput) SourceVault() SourceVaultOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReference) SourceVault { return v.SourceVault }).(SourceVaultOutput)
}

type KeyVaultAndSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReference)(nil)).Elem()
}

func (o KeyVaultAndSecretReferencePtrOutput) ToKeyVaultAndSecretReferencePtrOutput() KeyVaultAndSecretReferencePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferencePtrOutput) ToKeyVaultAndSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferencePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferencePtrOutput) Elem() KeyVaultAndSecretReferenceOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) KeyVaultAndSecretReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultAndSecretReference
		return ret
	}).(KeyVaultAndSecretReferenceOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferencePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferencePtrOutput) SourceVault() SourceVaultPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReference) *SourceVault {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultPtrOutput)
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponse struct {
	// Url pointing to a key or secret in KeyVault
	SecretUrl string `pulumi:"secretUrl"`
	// Resource id of the KeyVault containing the key or secret
	SourceVault SourceVaultResponse `pulumi:"sourceVault"`
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutput() KeyVaultAndSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponseOutput) ToKeyVaultAndSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponseOutput {
	return o
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponseOutput) SourceVault() SourceVaultResponseOutput {
	return o.ApplyT(func(v KeyVaultAndSecretReferenceResponse) SourceVaultResponse { return v.SourceVault }).(SourceVaultResponseOutput)
}

type KeyVaultAndSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultAndSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultAndSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutput() KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) ToKeyVaultAndSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultAndSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultAndSecretReferenceResponsePtrOutput) Elem() KeyVaultAndSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) KeyVaultAndSecretReferenceResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultAndSecretReferenceResponse
		return ret
	}).(KeyVaultAndSecretReferenceResponseOutput)
}

// Url pointing to a key or secret in KeyVault
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// Resource id of the KeyVault containing the key or secret
func (o KeyVaultAndSecretReferenceResponsePtrOutput) SourceVault() SourceVaultResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultAndSecretReferenceResponse) *SourceVaultResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SourceVaultResponsePtrOutput)
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReference struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// The relative URL of the Key Vault containing the key.
	SourceVault SubResource `pulumi:"sourceVault"`
}

// KeyVaultKeyReferenceInput is an input type that accepts KeyVaultKeyReferenceArgs and KeyVaultKeyReferenceOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferenceInput` via:
//
//	KeyVaultKeyReferenceArgs{...}
type KeyVaultKeyReferenceInput interface {
	pulumi.Input

	ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput
	ToKeyVaultKeyReferenceOutputWithContext(context.Context) KeyVaultKeyReferenceOutput
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceArgs struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl pulumi.StringInput `pulumi:"keyUrl"`
	// The relative URL of the Key Vault containing the key.
	SourceVault SubResourceInput `pulumi:"sourceVault"`
}

func (KeyVaultKeyReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return i.ToKeyVaultKeyReferenceOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput)
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultKeyReferenceArgs) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferenceOutput).ToKeyVaultKeyReferencePtrOutputWithContext(ctx)
}

// KeyVaultKeyReferencePtrInput is an input type that accepts KeyVaultKeyReferenceArgs, KeyVaultKeyReferencePtr and KeyVaultKeyReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultKeyReferencePtrInput` via:
//
//	        KeyVaultKeyReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultKeyReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput
	ToKeyVaultKeyReferencePtrOutputWithContext(context.Context) KeyVaultKeyReferencePtrOutput
}

type keyVaultKeyReferencePtrType KeyVaultKeyReferenceArgs

func KeyVaultKeyReferencePtr(v *KeyVaultKeyReferenceArgs) KeyVaultKeyReferencePtrInput {
	return (*keyVaultKeyReferencePtrType)(v)
}

func (*keyVaultKeyReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return i.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultKeyReferencePtrType) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultKeyReferencePtrOutput)
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutput() KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferenceOutputWithContext(ctx context.Context) KeyVaultKeyReferenceOutput {
	return o
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o.ToKeyVaultKeyReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultKeyReferenceOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultKeyReference) *KeyVaultKeyReference {
		return &v
	}).(KeyVaultKeyReferencePtrOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// The relative URL of the Key Vault containing the key.
func (o KeyVaultKeyReferenceOutput) SourceVault() SubResourceOutput {
	return o.ApplyT(func(v KeyVaultKeyReference) SubResource { return v.SourceVault }).(SubResourceOutput)
}

type KeyVaultKeyReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReference)(nil)).Elem()
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutput() KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) ToKeyVaultKeyReferencePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferencePtrOutput {
	return o
}

func (o KeyVaultKeyReferencePtrOutput) Elem() KeyVaultKeyReferenceOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) KeyVaultKeyReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultKeyReference
		return ret
	}).(KeyVaultKeyReferenceOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferencePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// The relative URL of the Key Vault containing the key.
func (o KeyVaultKeyReferencePtrOutput) SourceVault() SubResourcePtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReference) *SubResource {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SubResourcePtrOutput)
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceResponse struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyUrl string `pulumi:"keyUrl"`
	// The relative URL of the Key Vault containing the key.
	SourceVault SubResourceResponse `pulumi:"sourceVault"`
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutput() KeyVaultKeyReferenceResponseOutput {
	return o
}

func (o KeyVaultKeyReferenceResponseOutput) ToKeyVaultKeyReferenceResponseOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponseOutput {
	return o
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponseOutput) KeyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) string { return v.KeyUrl }).(pulumi.StringOutput)
}

// The relative URL of the Key Vault containing the key.
func (o KeyVaultKeyReferenceResponseOutput) SourceVault() SubResourceResponseOutput {
	return o.ApplyT(func(v KeyVaultKeyReferenceResponse) SubResourceResponse { return v.SourceVault }).(SubResourceResponseOutput)
}

type KeyVaultKeyReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultKeyReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultKeyReferenceResponse)(nil)).Elem()
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutput() KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) ToKeyVaultKeyReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultKeyReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultKeyReferenceResponsePtrOutput) Elem() KeyVaultKeyReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) KeyVaultKeyReferenceResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultKeyReferenceResponse
		return ret
	}).(KeyVaultKeyReferenceResponseOutput)
}

// The URL referencing a key encryption key in Key Vault.
func (o KeyVaultKeyReferenceResponsePtrOutput) KeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUrl
	}).(pulumi.StringPtrOutput)
}

// The relative URL of the Key Vault containing the key.
func (o KeyVaultKeyReferenceResponsePtrOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultKeyReferenceResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SubResourceResponsePtrOutput)
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReference struct {
	// The URL referencing a secret in a Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// The relative URL of the Key Vault containing the secret.
	SourceVault SubResource `pulumi:"sourceVault"`
}

// KeyVaultSecretReferenceInput is an input type that accepts KeyVaultSecretReferenceArgs and KeyVaultSecretReferenceOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceInput` via:
//
//	KeyVaultSecretReferenceArgs{...}
type KeyVaultSecretReferenceInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput
	ToKeyVaultSecretReferenceOutputWithContext(context.Context) KeyVaultSecretReferenceOutput
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceArgs struct {
	// The URL referencing a secret in a Key Vault.
	SecretUrl pulumi.StringInput `pulumi:"secretUrl"`
	// The relative URL of the Key Vault containing the secret.
	SourceVault SubResourceInput `pulumi:"sourceVault"`
}

func (KeyVaultSecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReference)(nil)).Elem()
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput {
	return i.ToKeyVaultSecretReferenceOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferenceOutputWithContext(ctx context.Context) KeyVaultSecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceOutput)
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return i.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceArgs) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceOutput).ToKeyVaultSecretReferencePtrOutputWithContext(ctx)
}

// KeyVaultSecretReferencePtrInput is an input type that accepts KeyVaultSecretReferenceArgs, KeyVaultSecretReferencePtr and KeyVaultSecretReferencePtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferencePtrInput` via:
//
//	        KeyVaultSecretReferenceArgs{...}
//
//	or:
//
//	        nil
type KeyVaultSecretReferencePtrInput interface {
	pulumi.Input

	ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput
	ToKeyVaultSecretReferencePtrOutputWithContext(context.Context) KeyVaultSecretReferencePtrOutput
}

type keyVaultSecretReferencePtrType KeyVaultSecretReferenceArgs

func KeyVaultSecretReferencePtr(v *KeyVaultSecretReferenceArgs) KeyVaultSecretReferencePtrInput {
	return (*keyVaultSecretReferencePtrType)(v)
}

func (*keyVaultSecretReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReference)(nil)).Elem()
}

func (i *keyVaultSecretReferencePtrType) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return i.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretReferencePtrType) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferencePtrOutput)
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReference)(nil)).Elem()
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferenceOutput() KeyVaultSecretReferenceOutput {
	return o
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferenceOutputWithContext(ctx context.Context) KeyVaultSecretReferenceOutput {
	return o
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return o.ToKeyVaultSecretReferencePtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretReferenceOutput) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultSecretReference) *KeyVaultSecretReference {
		return &v
	}).(KeyVaultSecretReferencePtrOutput)
}

// The URL referencing a secret in a Key Vault.
func (o KeyVaultSecretReferenceOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReference) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// The relative URL of the Key Vault containing the secret.
func (o KeyVaultSecretReferenceOutput) SourceVault() SubResourceOutput {
	return o.ApplyT(func(v KeyVaultSecretReference) SubResource { return v.SourceVault }).(SubResourceOutput)
}

type KeyVaultSecretReferencePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReference)(nil)).Elem()
}

func (o KeyVaultSecretReferencePtrOutput) ToKeyVaultSecretReferencePtrOutput() KeyVaultSecretReferencePtrOutput {
	return o
}

func (o KeyVaultSecretReferencePtrOutput) ToKeyVaultSecretReferencePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferencePtrOutput {
	return o
}

func (o KeyVaultSecretReferencePtrOutput) Elem() KeyVaultSecretReferenceOutput {
	return o.ApplyT(func(v *KeyVaultSecretReference) KeyVaultSecretReference {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretReference
		return ret
	}).(KeyVaultSecretReferenceOutput)
}

// The URL referencing a secret in a Key Vault.
func (o KeyVaultSecretReferencePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReference) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// The relative URL of the Key Vault containing the secret.
func (o KeyVaultSecretReferencePtrOutput) SourceVault() SubResourcePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReference) *SubResource {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SubResourcePtrOutput)
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceResponse struct {
	// The URL referencing a secret in a Key Vault.
	SecretUrl string `pulumi:"secretUrl"`
	// The relative URL of the Key Vault containing the secret.
	SourceVault SubResourceResponse `pulumi:"sourceVault"`
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponseOutput() KeyVaultSecretReferenceResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceResponseOutput) ToKeyVaultSecretReferenceResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponseOutput {
	return o
}

// The URL referencing a secret in a Key Vault.
func (o KeyVaultSecretReferenceResponseOutput) SecretUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) string { return v.SecretUrl }).(pulumi.StringOutput)
}

// The relative URL of the Key Vault containing the secret.
func (o KeyVaultSecretReferenceResponseOutput) SourceVault() SubResourceResponseOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceResponse) SubResourceResponse { return v.SourceVault }).(SubResourceResponseOutput)
}

type KeyVaultSecretReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceResponsePtrOutput) ToKeyVaultSecretReferenceResponsePtrOutput() KeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceResponsePtrOutput) ToKeyVaultSecretReferenceResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceResponsePtrOutput) Elem() KeyVaultSecretReferenceResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) KeyVaultSecretReferenceResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretReferenceResponse
		return ret
	}).(KeyVaultSecretReferenceResponseOutput)
}

// The URL referencing a secret in a Key Vault.
func (o KeyVaultSecretReferenceResponsePtrOutput) SecretUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretUrl
	}).(pulumi.StringPtrOutput)
}

// The relative URL of the Key Vault containing the secret.
func (o KeyVaultSecretReferenceResponsePtrOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return &v.SourceVault
	}).(SubResourceResponsePtrOutput)
}

// Describes the properties of the last installed patch summary.
type LastPatchInstallationSummaryResponse struct {
	// The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error ApiErrorResponse `pulumi:"error"`
	// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
	ExcludedPatchCount int `pulumi:"excludedPatchCount"`
	// The count of patches that failed installation.
	FailedPatchCount int `pulumi:"failedPatchCount"`
	// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	InstallationActivityId string `pulumi:"installationActivityId"`
	// The count of patches that successfully installed.
	InstalledPatchCount int `pulumi:"installedPatchCount"`
	// The UTC timestamp when the operation began.
	LastModifiedTime string `pulumi:"lastModifiedTime"`
	// Describes whether the operation ran out of time before it completed all its intended actions
	MaintenanceWindowExceeded bool `pulumi:"maintenanceWindowExceeded"`
	// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
	NotSelectedPatchCount int `pulumi:"notSelectedPatchCount"`
	// The number of all available patches expected to be installed over the course of the patch installation operation.
	PendingPatchCount int `pulumi:"pendingPatchCount"`
	// The UTC timestamp when the operation began.
	StartTime string `pulumi:"startTime"`
	// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
	Status string `pulumi:"status"`
}

// Describes the properties of the last installed patch summary.
type LastPatchInstallationSummaryResponseOutput struct{ *pulumi.OutputState }

func (LastPatchInstallationSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LastPatchInstallationSummaryResponse)(nil)).Elem()
}

func (o LastPatchInstallationSummaryResponseOutput) ToLastPatchInstallationSummaryResponseOutput() LastPatchInstallationSummaryResponseOutput {
	return o
}

func (o LastPatchInstallationSummaryResponseOutput) ToLastPatchInstallationSummaryResponseOutputWithContext(ctx context.Context) LastPatchInstallationSummaryResponseOutput {
	return o
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o LastPatchInstallationSummaryResponseOutput) Error() ApiErrorResponseOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) ApiErrorResponse { return v.Error }).(ApiErrorResponseOutput)
}

// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
func (o LastPatchInstallationSummaryResponseOutput) ExcludedPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.ExcludedPatchCount }).(pulumi.IntOutput)
}

// The count of patches that failed installation.
func (o LastPatchInstallationSummaryResponseOutput) FailedPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.FailedPatchCount }).(pulumi.IntOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o LastPatchInstallationSummaryResponseOutput) InstallationActivityId() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.InstallationActivityId }).(pulumi.StringOutput)
}

// The count of patches that successfully installed.
func (o LastPatchInstallationSummaryResponseOutput) InstalledPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.InstalledPatchCount }).(pulumi.IntOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponseOutput) LastModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.LastModifiedTime }).(pulumi.StringOutput)
}

// Describes whether the operation ran out of time before it completed all its intended actions
func (o LastPatchInstallationSummaryResponseOutput) MaintenanceWindowExceeded() pulumi.BoolOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) bool { return v.MaintenanceWindowExceeded }).(pulumi.BoolOutput)
}

// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
func (o LastPatchInstallationSummaryResponseOutput) NotSelectedPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.NotSelectedPatchCount }).(pulumi.IntOutput)
}

// The number of all available patches expected to be installed over the course of the patch installation operation.
func (o LastPatchInstallationSummaryResponseOutput) PendingPatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) int { return v.PendingPatchCount }).(pulumi.IntOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
func (o LastPatchInstallationSummaryResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LastPatchInstallationSummaryResponse) string { return v.Status }).(pulumi.StringOutput)
}

type LastPatchInstallationSummaryResponsePtrOutput struct{ *pulumi.OutputState }

func (LastPatchInstallationSummaryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LastPatchInstallationSummaryResponse)(nil)).Elem()
}

func (o LastPatchInstallationSummaryResponsePtrOutput) ToLastPatchInstallationSummaryResponsePtrOutput() LastPatchInstallationSummaryResponsePtrOutput {
	return o
}

func (o LastPatchInstallationSummaryResponsePtrOutput) ToLastPatchInstallationSummaryResponsePtrOutputWithContext(ctx context.Context) LastPatchInstallationSummaryResponsePtrOutput {
	return o
}

func (o LastPatchInstallationSummaryResponsePtrOutput) Elem() LastPatchInstallationSummaryResponseOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) LastPatchInstallationSummaryResponse {
		if v != nil {
			return *v
		}
		var ret LastPatchInstallationSummaryResponse
		return ret
	}).(LastPatchInstallationSummaryResponseOutput)
}

// The errors that were encountered during execution of the operation. The details array contains the list of them.
func (o LastPatchInstallationSummaryResponsePtrOutput) Error() ApiErrorResponsePtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *ApiErrorResponse {
		if v == nil {
			return nil
		}
		return &v.Error
	}).(ApiErrorResponsePtrOutput)
}

// The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
func (o LastPatchInstallationSummaryResponsePtrOutput) ExcludedPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ExcludedPatchCount
	}).(pulumi.IntPtrOutput)
}

// The count of patches that failed installation.
func (o LastPatchInstallationSummaryResponsePtrOutput) FailedPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FailedPatchCount
	}).(pulumi.IntPtrOutput)
}

// The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
func (o LastPatchInstallationSummaryResponsePtrOutput) InstallationActivityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstallationActivityId
	}).(pulumi.StringPtrOutput)
}

// The count of patches that successfully installed.
func (o LastPatchInstallationSummaryResponsePtrOutput) InstalledPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.InstalledPatchCount
	}).(pulumi.IntPtrOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponsePtrOutput) LastModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastModifiedTime
	}).(pulumi.StringPtrOutput)
}

// Describes whether the operation ran out of time before it completed all its intended actions
func (o LastPatchInstallationSummaryResponsePtrOutput) MaintenanceWindowExceeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.MaintenanceWindowExceeded
	}).(pulumi.BoolPtrOutput)
}

// The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
func (o LastPatchInstallationSummaryResponsePtrOutput) NotSelectedPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.NotSelectedPatchCount
	}).(pulumi.IntPtrOutput)
}

// The number of all available patches expected to be installed over the course of the patch installation operation.
func (o LastPatchInstallationSummaryResponsePtrOutput) PendingPatchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PendingPatchCount
	}).(pulumi.IntPtrOutput)
}

// The UTC timestamp when the operation began.
func (o LastPatchInstallationSummaryResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
func (o LastPatchInstallationSummaryResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LastPatchInstallationSummaryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfiguration struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
	EnableVMAgentPlatformUpdates *bool `pulumi:"enableVMAgentPlatformUpdates"`
	// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
	PatchSettings *LinuxPatchSettings `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the ssh key configuration for a Linux OS.
	Ssh *SshConfiguration `pulumi:"ssh"`
}

// LinuxConfigurationInput is an input type that accepts LinuxConfigurationArgs and LinuxConfigurationOutput values.
// You can construct a concrete instance of `LinuxConfigurationInput` via:
//
//	LinuxConfigurationArgs{...}
type LinuxConfigurationInput interface {
	pulumi.Input

	ToLinuxConfigurationOutput() LinuxConfigurationOutput
	ToLinuxConfigurationOutputWithContext(context.Context) LinuxConfigurationOutput
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationArgs struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication pulumi.BoolPtrInput `pulumi:"disablePasswordAuthentication"`
	// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
	EnableVMAgentPlatformUpdates pulumi.BoolPtrInput `pulumi:"enableVMAgentPlatformUpdates"`
	// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
	PatchSettings LinuxPatchSettingsPtrInput `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent pulumi.BoolPtrInput `pulumi:"provisionVMAgent"`
	// Specifies the ssh key configuration for a Linux OS.
	Ssh SshConfigurationPtrInput `pulumi:"ssh"`
}

func (LinuxConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfiguration)(nil)).Elem()
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationOutput() LinuxConfigurationOutput {
	return i.ToLinuxConfigurationOutputWithContext(context.Background())
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationOutputWithContext(ctx context.Context) LinuxConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationOutput)
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return i.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationOutput).ToLinuxConfigurationPtrOutputWithContext(ctx)
}

// LinuxConfigurationPtrInput is an input type that accepts LinuxConfigurationArgs, LinuxConfigurationPtr and LinuxConfigurationPtrOutput values.
// You can construct a concrete instance of `LinuxConfigurationPtrInput` via:
//
//	        LinuxConfigurationArgs{...}
//
//	or:
//
//	        nil
type LinuxConfigurationPtrInput interface {
	pulumi.Input

	ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput
	ToLinuxConfigurationPtrOutputWithContext(context.Context) LinuxConfigurationPtrOutput
}

type linuxConfigurationPtrType LinuxConfigurationArgs

func LinuxConfigurationPtr(v *LinuxConfigurationArgs) LinuxConfigurationPtrInput {
	return (*linuxConfigurationPtrType)(v)
}

func (*linuxConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfiguration)(nil)).Elem()
}

func (i *linuxConfigurationPtrType) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return i.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (i *linuxConfigurationPtrType) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfiguration)(nil)).Elem()
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationOutput() LinuxConfigurationOutput {
	return o
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationOutputWithContext(ctx context.Context) LinuxConfigurationOutput {
	return o
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return o.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxConfiguration) *LinuxConfiguration {
		return &v
	}).(LinuxConfigurationPtrOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *bool { return v.DisablePasswordAuthentication }).(pulumi.BoolPtrOutput)
}

// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
func (o LinuxConfigurationOutput) EnableVMAgentPlatformUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *bool { return v.EnableVMAgentPlatformUpdates }).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
func (o LinuxConfigurationOutput) PatchSettings() LinuxPatchSettingsPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *LinuxPatchSettings { return v.PatchSettings }).(LinuxPatchSettingsPtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o LinuxConfigurationOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *bool { return v.ProvisionVMAgent }).(pulumi.BoolPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS.
func (o LinuxConfigurationOutput) Ssh() SshConfigurationPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *SshConfiguration { return v.Ssh }).(SshConfigurationPtrOutput)
}

type LinuxConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfiguration)(nil)).Elem()
}

func (o LinuxConfigurationPtrOutput) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return o
}

func (o LinuxConfigurationPtrOutput) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return o
}

func (o LinuxConfigurationPtrOutput) Elem() LinuxConfigurationOutput {
	return o.ApplyT(func(v *LinuxConfiguration) LinuxConfiguration {
		if v != nil {
			return *v
		}
		var ret LinuxConfiguration
		return ret
	}).(LinuxConfigurationOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationPtrOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePasswordAuthentication
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
func (o LinuxConfigurationPtrOutput) EnableVMAgentPlatformUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVMAgentPlatformUpdates
	}).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
func (o LinuxConfigurationPtrOutput) PatchSettings() LinuxPatchSettingsPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *LinuxPatchSettings {
		if v == nil {
			return nil
		}
		return v.PatchSettings
	}).(LinuxPatchSettingsPtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o LinuxConfigurationPtrOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ProvisionVMAgent
	}).(pulumi.BoolPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS.
func (o LinuxConfigurationPtrOutput) Ssh() SshConfigurationPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *SshConfiguration {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(SshConfigurationPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationResponse struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
	EnableVMAgentPlatformUpdates *bool `pulumi:"enableVMAgentPlatformUpdates"`
	// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
	PatchSettings *LinuxPatchSettingsResponse `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the ssh key configuration for a Linux OS.
	Ssh *SshConfigurationResponse `pulumi:"ssh"`
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfigurationResponse)(nil)).Elem()
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponseOutput() LinuxConfigurationResponseOutput {
	return o
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponseOutputWithContext(ctx context.Context) LinuxConfigurationResponseOutput {
	return o
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationResponseOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *bool { return v.DisablePasswordAuthentication }).(pulumi.BoolPtrOutput)
}

// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
func (o LinuxConfigurationResponseOutput) EnableVMAgentPlatformUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *bool { return v.EnableVMAgentPlatformUpdates }).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
func (o LinuxConfigurationResponseOutput) PatchSettings() LinuxPatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *LinuxPatchSettingsResponse { return v.PatchSettings }).(LinuxPatchSettingsResponsePtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o LinuxConfigurationResponseOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *bool { return v.ProvisionVMAgent }).(pulumi.BoolPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS.
func (o LinuxConfigurationResponseOutput) Ssh() SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *SshConfigurationResponse { return v.Ssh }).(SshConfigurationResponsePtrOutput)
}

type LinuxConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfigurationResponse)(nil)).Elem()
}

func (o LinuxConfigurationResponsePtrOutput) ToLinuxConfigurationResponsePtrOutput() LinuxConfigurationResponsePtrOutput {
	return o
}

func (o LinuxConfigurationResponsePtrOutput) ToLinuxConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxConfigurationResponsePtrOutput {
	return o
}

func (o LinuxConfigurationResponsePtrOutput) Elem() LinuxConfigurationResponseOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) LinuxConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LinuxConfigurationResponse
		return ret
	}).(LinuxConfigurationResponseOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationResponsePtrOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePasswordAuthentication
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default value is false.
func (o LinuxConfigurationResponsePtrOutput) EnableVMAgentPlatformUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVMAgentPlatformUpdates
	}).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
func (o LinuxConfigurationResponsePtrOutput) PatchSettings() LinuxPatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *LinuxPatchSettingsResponse {
		if v == nil {
			return nil
		}
		return v.PatchSettings
	}).(LinuxPatchSettingsResponsePtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o LinuxConfigurationResponsePtrOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProvisionVMAgent
	}).(pulumi.BoolPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS.
func (o LinuxConfigurationResponsePtrOutput) Ssh() SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *SshConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(SshConfigurationResponsePtrOutput)
}

// Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettings struct {
	// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode *string `pulumi:"assessmentMode"`
	// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
	AutomaticByPlatformSettings *LinuxVMGuestPatchAutomaticByPlatformSettings `pulumi:"automaticByPlatformSettings"`
	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
	PatchMode *string `pulumi:"patchMode"`
}

// LinuxPatchSettingsInput is an input type that accepts LinuxPatchSettingsArgs and LinuxPatchSettingsOutput values.
// You can construct a concrete instance of `LinuxPatchSettingsInput` via:
//
//	LinuxPatchSettingsArgs{...}
type LinuxPatchSettingsInput interface {
	pulumi.Input

	ToLinuxPatchSettingsOutput() LinuxPatchSettingsOutput
	ToLinuxPatchSettingsOutputWithContext(context.Context) LinuxPatchSettingsOutput
}

// Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettingsArgs struct {
	// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode pulumi.StringPtrInput `pulumi:"assessmentMode"`
	// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
	AutomaticByPlatformSettings LinuxVMGuestPatchAutomaticByPlatformSettingsPtrInput `pulumi:"automaticByPlatformSettings"`
	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
	PatchMode pulumi.StringPtrInput `pulumi:"patchMode"`
}

func (LinuxPatchSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxPatchSettings)(nil)).Elem()
}

func (i LinuxPatchSettingsArgs) ToLinuxPatchSettingsOutput() LinuxPatchSettingsOutput {
	return i.ToLinuxPatchSettingsOutputWithContext(context.Background())
}

func (i LinuxPatchSettingsArgs) ToLinuxPatchSettingsOutputWithContext(ctx context.Context) LinuxPatchSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxPatchSettingsOutput)
}

func (i LinuxPatchSettingsArgs) ToLinuxPatchSettingsPtrOutput() LinuxPatchSettingsPtrOutput {
	return i.ToLinuxPatchSettingsPtrOutputWithContext(context.Background())
}

func (i LinuxPatchSettingsArgs) ToLinuxPatchSettingsPtrOutputWithContext(ctx context.Context) LinuxPatchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxPatchSettingsOutput).ToLinuxPatchSettingsPtrOutputWithContext(ctx)
}

// LinuxPatchSettingsPtrInput is an input type that accepts LinuxPatchSettingsArgs, LinuxPatchSettingsPtr and LinuxPatchSettingsPtrOutput values.
// You can construct a concrete instance of `LinuxPatchSettingsPtrInput` via:
//
//	        LinuxPatchSettingsArgs{...}
//
//	or:
//
//	        nil
type LinuxPatchSettingsPtrInput interface {
	pulumi.Input

	ToLinuxPatchSettingsPtrOutput() LinuxPatchSettingsPtrOutput
	ToLinuxPatchSettingsPtrOutputWithContext(context.Context) LinuxPatchSettingsPtrOutput
}

type linuxPatchSettingsPtrType LinuxPatchSettingsArgs

func LinuxPatchSettingsPtr(v *LinuxPatchSettingsArgs) LinuxPatchSettingsPtrInput {
	return (*linuxPatchSettingsPtrType)(v)
}

func (*linuxPatchSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxPatchSettings)(nil)).Elem()
}

func (i *linuxPatchSettingsPtrType) ToLinuxPatchSettingsPtrOutput() LinuxPatchSettingsPtrOutput {
	return i.ToLinuxPatchSettingsPtrOutputWithContext(context.Background())
}

func (i *linuxPatchSettingsPtrType) ToLinuxPatchSettingsPtrOutputWithContext(ctx context.Context) LinuxPatchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxPatchSettingsPtrOutput)
}

// Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettingsOutput struct{ *pulumi.OutputState }

func (LinuxPatchSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxPatchSettings)(nil)).Elem()
}

func (o LinuxPatchSettingsOutput) ToLinuxPatchSettingsOutput() LinuxPatchSettingsOutput {
	return o
}

func (o LinuxPatchSettingsOutput) ToLinuxPatchSettingsOutputWithContext(ctx context.Context) LinuxPatchSettingsOutput {
	return o
}

func (o LinuxPatchSettingsOutput) ToLinuxPatchSettingsPtrOutput() LinuxPatchSettingsPtrOutput {
	return o.ToLinuxPatchSettingsPtrOutputWithContext(context.Background())
}

func (o LinuxPatchSettingsOutput) ToLinuxPatchSettingsPtrOutputWithContext(ctx context.Context) LinuxPatchSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxPatchSettings) *LinuxPatchSettings {
		return &v
	}).(LinuxPatchSettingsPtrOutput)
}

// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o LinuxPatchSettingsOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxPatchSettings) *string { return v.AssessmentMode }).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
func (o LinuxPatchSettingsOutput) AutomaticByPlatformSettings() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ApplyT(func(v LinuxPatchSettings) *LinuxVMGuestPatchAutomaticByPlatformSettings {
		return v.AutomaticByPlatformSettings
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
func (o LinuxPatchSettingsOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxPatchSettings) *string { return v.PatchMode }).(pulumi.StringPtrOutput)
}

type LinuxPatchSettingsPtrOutput struct{ *pulumi.OutputState }

func (LinuxPatchSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxPatchSettings)(nil)).Elem()
}

func (o LinuxPatchSettingsPtrOutput) ToLinuxPatchSettingsPtrOutput() LinuxPatchSettingsPtrOutput {
	return o
}

func (o LinuxPatchSettingsPtrOutput) ToLinuxPatchSettingsPtrOutputWithContext(ctx context.Context) LinuxPatchSettingsPtrOutput {
	return o
}

func (o LinuxPatchSettingsPtrOutput) Elem() LinuxPatchSettingsOutput {
	return o.ApplyT(func(v *LinuxPatchSettings) LinuxPatchSettings {
		if v != nil {
			return *v
		}
		var ret LinuxPatchSettings
		return ret
	}).(LinuxPatchSettingsOutput)
}

// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o LinuxPatchSettingsPtrOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxPatchSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssessmentMode
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
func (o LinuxPatchSettingsPtrOutput) AutomaticByPlatformSettings() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ApplyT(func(v *LinuxPatchSettings) *LinuxVMGuestPatchAutomaticByPlatformSettings {
		if v == nil {
			return nil
		}
		return v.AutomaticByPlatformSettings
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
func (o LinuxPatchSettingsPtrOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxPatchSettings) *string {
		if v == nil {
			return nil
		}
		return v.PatchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettingsResponse struct {
	// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode *string `pulumi:"assessmentMode"`
	// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
	AutomaticByPlatformSettings *LinuxVMGuestPatchAutomaticByPlatformSettingsResponse `pulumi:"automaticByPlatformSettings"`
	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
	PatchMode *string `pulumi:"patchMode"`
}

// Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettingsResponseOutput struct{ *pulumi.OutputState }

func (LinuxPatchSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxPatchSettingsResponse)(nil)).Elem()
}

func (o LinuxPatchSettingsResponseOutput) ToLinuxPatchSettingsResponseOutput() LinuxPatchSettingsResponseOutput {
	return o
}

func (o LinuxPatchSettingsResponseOutput) ToLinuxPatchSettingsResponseOutputWithContext(ctx context.Context) LinuxPatchSettingsResponseOutput {
	return o
}

// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o LinuxPatchSettingsResponseOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxPatchSettingsResponse) *string { return v.AssessmentMode }).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
func (o LinuxPatchSettingsResponseOutput) AutomaticByPlatformSettings() LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o.ApplyT(func(v LinuxPatchSettingsResponse) *LinuxVMGuestPatchAutomaticByPlatformSettingsResponse {
		return v.AutomaticByPlatformSettings
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
func (o LinuxPatchSettingsResponseOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxPatchSettingsResponse) *string { return v.PatchMode }).(pulumi.StringPtrOutput)
}

type LinuxPatchSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxPatchSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxPatchSettingsResponse)(nil)).Elem()
}

func (o LinuxPatchSettingsResponsePtrOutput) ToLinuxPatchSettingsResponsePtrOutput() LinuxPatchSettingsResponsePtrOutput {
	return o
}

func (o LinuxPatchSettingsResponsePtrOutput) ToLinuxPatchSettingsResponsePtrOutputWithContext(ctx context.Context) LinuxPatchSettingsResponsePtrOutput {
	return o
}

func (o LinuxPatchSettingsResponsePtrOutput) Elem() LinuxPatchSettingsResponseOutput {
	return o.ApplyT(func(v *LinuxPatchSettingsResponse) LinuxPatchSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LinuxPatchSettingsResponse
		return ret
	}).(LinuxPatchSettingsResponseOutput)
}

// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine. <br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o LinuxPatchSettingsResponsePtrOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxPatchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssessmentMode
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux.
func (o LinuxPatchSettingsResponsePtrOutput) AutomaticByPlatformSettings() LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o.ApplyT(func(v *LinuxPatchSettingsResponse) *LinuxVMGuestPatchAutomaticByPlatformSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AutomaticByPlatformSettings
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - The virtual machine's default patching configuration is used. <br /><br /> **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
func (o LinuxPatchSettingsResponsePtrOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxPatchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PatchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings.
type LinuxVMGuestPatchAutomaticByPlatformSettings struct {
	// Enables customer to schedule patching without accidental upgrades
	BypassPlatformSafetyChecksOnUserSchedule *bool `pulumi:"bypassPlatformSafetyChecksOnUserSchedule"`
	// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
	RebootSetting *string `pulumi:"rebootSetting"`
}

// LinuxVMGuestPatchAutomaticByPlatformSettingsInput is an input type that accepts LinuxVMGuestPatchAutomaticByPlatformSettingsArgs and LinuxVMGuestPatchAutomaticByPlatformSettingsOutput values.
// You can construct a concrete instance of `LinuxVMGuestPatchAutomaticByPlatformSettingsInput` via:
//
//	LinuxVMGuestPatchAutomaticByPlatformSettingsArgs{...}
type LinuxVMGuestPatchAutomaticByPlatformSettingsInput interface {
	pulumi.Input

	ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsOutput
	ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsOutput
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings.
type LinuxVMGuestPatchAutomaticByPlatformSettingsArgs struct {
	// Enables customer to schedule patching without accidental upgrades
	BypassPlatformSafetyChecksOnUserSchedule pulumi.BoolPtrInput `pulumi:"bypassPlatformSafetyChecksOnUserSchedule"`
	// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
	RebootSetting pulumi.StringPtrInput `pulumi:"rebootSetting"`
}

func (LinuxVMGuestPatchAutomaticByPlatformSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (i LinuxVMGuestPatchAutomaticByPlatformSettingsArgs) ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsOutput {
	return i.ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(context.Background())
}

func (i LinuxVMGuestPatchAutomaticByPlatformSettingsArgs) ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVMGuestPatchAutomaticByPlatformSettingsOutput)
}

func (i LinuxVMGuestPatchAutomaticByPlatformSettingsArgs) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return i.ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Background())
}

func (i LinuxVMGuestPatchAutomaticByPlatformSettingsArgs) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVMGuestPatchAutomaticByPlatformSettingsOutput).ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx)
}

// LinuxVMGuestPatchAutomaticByPlatformSettingsPtrInput is an input type that accepts LinuxVMGuestPatchAutomaticByPlatformSettingsArgs, LinuxVMGuestPatchAutomaticByPlatformSettingsPtr and LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput values.
// You can construct a concrete instance of `LinuxVMGuestPatchAutomaticByPlatformSettingsPtrInput` via:
//
//	        LinuxVMGuestPatchAutomaticByPlatformSettingsArgs{...}
//
//	or:
//
//	        nil
type LinuxVMGuestPatchAutomaticByPlatformSettingsPtrInput interface {
	pulumi.Input

	ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput
	ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput
}

type linuxVMGuestPatchAutomaticByPlatformSettingsPtrType LinuxVMGuestPatchAutomaticByPlatformSettingsArgs

func LinuxVMGuestPatchAutomaticByPlatformSettingsPtr(v *LinuxVMGuestPatchAutomaticByPlatformSettingsArgs) LinuxVMGuestPatchAutomaticByPlatformSettingsPtrInput {
	return (*linuxVMGuestPatchAutomaticByPlatformSettingsPtrType)(v)
}

func (*linuxVMGuestPatchAutomaticByPlatformSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (i *linuxVMGuestPatchAutomaticByPlatformSettingsPtrType) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return i.ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Background())
}

func (i *linuxVMGuestPatchAutomaticByPlatformSettingsPtrType) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings.
type LinuxVMGuestPatchAutomaticByPlatformSettingsOutput struct{ *pulumi.OutputState }

func (LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Background())
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxVMGuestPatchAutomaticByPlatformSettings) *LinuxVMGuestPatchAutomaticByPlatformSettings {
		return &v
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Enables customer to schedule patching without accidental upgrades
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxVMGuestPatchAutomaticByPlatformSettings) *bool {
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxVMGuestPatchAutomaticByPlatformSettings) *string { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

type LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput struct{ *pulumi.OutputState }

func (LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput) Elem() LinuxVMGuestPatchAutomaticByPlatformSettingsOutput {
	return o.ApplyT(func(v *LinuxVMGuestPatchAutomaticByPlatformSettings) LinuxVMGuestPatchAutomaticByPlatformSettings {
		if v != nil {
			return *v
		}
		var ret LinuxVMGuestPatchAutomaticByPlatformSettings
		return ret
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsOutput)
}

// Enables customer to schedule patching without accidental upgrades
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxVMGuestPatchAutomaticByPlatformSettings) *bool {
		if v == nil {
			return nil
		}
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxVMGuestPatchAutomaticByPlatformSettings) *string {
		if v == nil {
			return nil
		}
		return v.RebootSetting
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings.
type LinuxVMGuestPatchAutomaticByPlatformSettingsResponse struct {
	// Enables customer to schedule patching without accidental upgrades
	BypassPlatformSafetyChecksOnUserSchedule *bool `pulumi:"bypassPlatformSafetyChecksOnUserSchedule"`
	// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
	RebootSetting *string `pulumi:"rebootSetting"`
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Linux patch settings.
type LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput struct{ *pulumi.OutputState }

func (LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxVMGuestPatchAutomaticByPlatformSettingsResponse)(nil)).Elem()
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput {
	return o
}

// Enables customer to schedule patching without accidental upgrades
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxVMGuestPatchAutomaticByPlatformSettingsResponse) *bool {
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxVMGuestPatchAutomaticByPlatformSettingsResponse) *string { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

type LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxVMGuestPatchAutomaticByPlatformSettingsResponse)(nil)).Elem()
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput() LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) ToLinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutputWithContext(ctx context.Context) LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o
}

func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) Elem() LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput {
	return o.ApplyT(func(v *LinuxVMGuestPatchAutomaticByPlatformSettingsResponse) LinuxVMGuestPatchAutomaticByPlatformSettingsResponse {
		if v != nil {
			return *v
		}
		var ret LinuxVMGuestPatchAutomaticByPlatformSettingsResponse
		return ret
	}).(LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput)
}

// Enables customer to schedule patching without accidental upgrades
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxVMGuestPatchAutomaticByPlatformSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxVMGuestPatchAutomaticByPlatformSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RebootSetting
	}).(pulumi.StringPtrOutput)
}

// Describes the load balancer configuration.
type LoadBalancerConfiguration struct {
	// Resource Id
	Id *string `pulumi:"id"`
	// The name of the Load balancer
	Name string `pulumi:"name"`
	// Properties of the load balancer configuration.
	Properties LoadBalancerConfigurationProperties `pulumi:"properties"`
}

// LoadBalancerConfigurationInput is an input type that accepts LoadBalancerConfigurationArgs and LoadBalancerConfigurationOutput values.
// You can construct a concrete instance of `LoadBalancerConfigurationInput` via:
//
//	LoadBalancerConfigurationArgs{...}
type LoadBalancerConfigurationInput interface {
	pulumi.Input

	ToLoadBalancerConfigurationOutput() LoadBalancerConfigurationOutput
	ToLoadBalancerConfigurationOutputWithContext(context.Context) LoadBalancerConfigurationOutput
}

// Describes the load balancer configuration.
type LoadBalancerConfigurationArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Load balancer
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of the load balancer configuration.
	Properties LoadBalancerConfigurationPropertiesInput `pulumi:"properties"`
}

func (LoadBalancerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerConfiguration)(nil)).Elem()
}

func (i LoadBalancerConfigurationArgs) ToLoadBalancerConfigurationOutput() LoadBalancerConfigurationOutput {
	return i.ToLoadBalancerConfigurationOutputWithContext(context.Background())
}

func (i LoadBalancerConfigurationArgs) ToLoadBalancerConfigurationOutputWithContext(ctx context.Context) LoadBalancerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerConfigurationOutput)
}

// LoadBalancerConfigurationArrayInput is an input type that accepts LoadBalancerConfigurationArray and LoadBalancerConfigurationArrayOutput values.
// You can construct a concrete instance of `LoadBalancerConfigurationArrayInput` via:
//
//	LoadBalancerConfigurationArray{ LoadBalancerConfigurationArgs{...} }
type LoadBalancerConfigurationArrayInput interface {
	pulumi.Input

	ToLoadBalancerConfigurationArrayOutput() LoadBalancerConfigurationArrayOutput
	ToLoadBalancerConfigurationArrayOutputWithContext(context.Context) LoadBalancerConfigurationArrayOutput
}

type LoadBalancerConfigurationArray []LoadBalancerConfigurationInput

func (LoadBalancerConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerConfiguration)(nil)).Elem()
}

func (i LoadBalancerConfigurationArray) ToLoadBalancerConfigurationArrayOutput() LoadBalancerConfigurationArrayOutput {
	return i.ToLoadBalancerConfigurationArrayOutputWithContext(context.Background())
}

func (i LoadBalancerConfigurationArray) ToLoadBalancerConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerConfigurationArrayOutput)
}

// Describes the load balancer configuration.
type LoadBalancerConfigurationOutput struct{ *pulumi.OutputState }

func (LoadBalancerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerConfiguration)(nil)).Elem()
}

func (o LoadBalancerConfigurationOutput) ToLoadBalancerConfigurationOutput() LoadBalancerConfigurationOutput {
	return o
}

func (o LoadBalancerConfigurationOutput) ToLoadBalancerConfigurationOutputWithContext(ctx context.Context) LoadBalancerConfigurationOutput {
	return o
}

// Resource Id
func (o LoadBalancerConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the Load balancer
func (o LoadBalancerConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the load balancer configuration.
func (o LoadBalancerConfigurationOutput) Properties() LoadBalancerConfigurationPropertiesOutput {
	return o.ApplyT(func(v LoadBalancerConfiguration) LoadBalancerConfigurationProperties { return v.Properties }).(LoadBalancerConfigurationPropertiesOutput)
}

type LoadBalancerConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerConfiguration)(nil)).Elem()
}

func (o LoadBalancerConfigurationArrayOutput) ToLoadBalancerConfigurationArrayOutput() LoadBalancerConfigurationArrayOutput {
	return o
}

func (o LoadBalancerConfigurationArrayOutput) ToLoadBalancerConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerConfigurationArrayOutput {
	return o
}

func (o LoadBalancerConfigurationArrayOutput) Index(i pulumi.IntInput) LoadBalancerConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerConfiguration {
		return vs[0].([]LoadBalancerConfiguration)[vs[1].(int)]
	}).(LoadBalancerConfigurationOutput)
}

// Describes the properties of the load balancer configuration.
type LoadBalancerConfigurationProperties struct {
	// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
	FrontendIpConfigurations []LoadBalancerFrontendIpConfiguration `pulumi:"frontendIpConfigurations"`
}

// LoadBalancerConfigurationPropertiesInput is an input type that accepts LoadBalancerConfigurationPropertiesArgs and LoadBalancerConfigurationPropertiesOutput values.
// You can construct a concrete instance of `LoadBalancerConfigurationPropertiesInput` via:
//
//	LoadBalancerConfigurationPropertiesArgs{...}
type LoadBalancerConfigurationPropertiesInput interface {
	pulumi.Input

	ToLoadBalancerConfigurationPropertiesOutput() LoadBalancerConfigurationPropertiesOutput
	ToLoadBalancerConfigurationPropertiesOutputWithContext(context.Context) LoadBalancerConfigurationPropertiesOutput
}

// Describes the properties of the load balancer configuration.
type LoadBalancerConfigurationPropertiesArgs struct {
	// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
	FrontendIpConfigurations LoadBalancerFrontendIpConfigurationArrayInput `pulumi:"frontendIpConfigurations"`
}

func (LoadBalancerConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerConfigurationProperties)(nil)).Elem()
}

func (i LoadBalancerConfigurationPropertiesArgs) ToLoadBalancerConfigurationPropertiesOutput() LoadBalancerConfigurationPropertiesOutput {
	return i.ToLoadBalancerConfigurationPropertiesOutputWithContext(context.Background())
}

func (i LoadBalancerConfigurationPropertiesArgs) ToLoadBalancerConfigurationPropertiesOutputWithContext(ctx context.Context) LoadBalancerConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerConfigurationPropertiesOutput)
}

// Describes the properties of the load balancer configuration.
type LoadBalancerConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (LoadBalancerConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerConfigurationProperties)(nil)).Elem()
}

func (o LoadBalancerConfigurationPropertiesOutput) ToLoadBalancerConfigurationPropertiesOutput() LoadBalancerConfigurationPropertiesOutput {
	return o
}

func (o LoadBalancerConfigurationPropertiesOutput) ToLoadBalancerConfigurationPropertiesOutputWithContext(ctx context.Context) LoadBalancerConfigurationPropertiesOutput {
	return o
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
func (o LoadBalancerConfigurationPropertiesOutput) FrontendIpConfigurations() LoadBalancerFrontendIpConfigurationArrayOutput {
	return o.ApplyT(func(v LoadBalancerConfigurationProperties) []LoadBalancerFrontendIpConfiguration {
		return v.FrontendIpConfigurations
	}).(LoadBalancerFrontendIpConfigurationArrayOutput)
}

// Describes the properties of the load balancer configuration.
type LoadBalancerConfigurationPropertiesResponse struct {
	// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
	FrontendIpConfigurations []LoadBalancerFrontendIpConfigurationResponse `pulumi:"frontendIpConfigurations"`
}

// Describes the properties of the load balancer configuration.
type LoadBalancerConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerConfigurationPropertiesResponse)(nil)).Elem()
}

func (o LoadBalancerConfigurationPropertiesResponseOutput) ToLoadBalancerConfigurationPropertiesResponseOutput() LoadBalancerConfigurationPropertiesResponseOutput {
	return o
}

func (o LoadBalancerConfigurationPropertiesResponseOutput) ToLoadBalancerConfigurationPropertiesResponseOutputWithContext(ctx context.Context) LoadBalancerConfigurationPropertiesResponseOutput {
	return o
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
func (o LoadBalancerConfigurationPropertiesResponseOutput) FrontendIpConfigurations() LoadBalancerFrontendIpConfigurationResponseArrayOutput {
	return o.ApplyT(func(v LoadBalancerConfigurationPropertiesResponse) []LoadBalancerFrontendIpConfigurationResponse {
		return v.FrontendIpConfigurations
	}).(LoadBalancerFrontendIpConfigurationResponseArrayOutput)
}

// Describes the load balancer configuration.
type LoadBalancerConfigurationResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
	// The name of the Load balancer
	Name string `pulumi:"name"`
	// Properties of the load balancer configuration.
	Properties LoadBalancerConfigurationPropertiesResponse `pulumi:"properties"`
}

// Describes the load balancer configuration.
type LoadBalancerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerConfigurationResponse)(nil)).Elem()
}

func (o LoadBalancerConfigurationResponseOutput) ToLoadBalancerConfigurationResponseOutput() LoadBalancerConfigurationResponseOutput {
	return o
}

func (o LoadBalancerConfigurationResponseOutput) ToLoadBalancerConfigurationResponseOutputWithContext(ctx context.Context) LoadBalancerConfigurationResponseOutput {
	return o
}

// Resource Id
func (o LoadBalancerConfigurationResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerConfigurationResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the Load balancer
func (o LoadBalancerConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the load balancer configuration.
func (o LoadBalancerConfigurationResponseOutput) Properties() LoadBalancerConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v LoadBalancerConfigurationResponse) LoadBalancerConfigurationPropertiesResponse {
		return v.Properties
	}).(LoadBalancerConfigurationPropertiesResponseOutput)
}

type LoadBalancerConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerConfigurationResponse)(nil)).Elem()
}

func (o LoadBalancerConfigurationResponseArrayOutput) ToLoadBalancerConfigurationResponseArrayOutput() LoadBalancerConfigurationResponseArrayOutput {
	return o
}

func (o LoadBalancerConfigurationResponseArrayOutput) ToLoadBalancerConfigurationResponseArrayOutputWithContext(ctx context.Context) LoadBalancerConfigurationResponseArrayOutput {
	return o
}

func (o LoadBalancerConfigurationResponseArrayOutput) Index(i pulumi.IntInput) LoadBalancerConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerConfigurationResponse {
		return vs[0].([]LoadBalancerConfigurationResponse)[vs[1].(int)]
	}).(LoadBalancerConfigurationResponseOutput)
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
type LoadBalancerFrontendIpConfiguration struct {
	// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
	Name string `pulumi:"name"`
	// Properties of load balancer frontend ip configuration.
	Properties LoadBalancerFrontendIpConfigurationProperties `pulumi:"properties"`
}

// LoadBalancerFrontendIpConfigurationInput is an input type that accepts LoadBalancerFrontendIpConfigurationArgs and LoadBalancerFrontendIpConfigurationOutput values.
// You can construct a concrete instance of `LoadBalancerFrontendIpConfigurationInput` via:
//
//	LoadBalancerFrontendIpConfigurationArgs{...}
type LoadBalancerFrontendIpConfigurationInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput
	ToLoadBalancerFrontendIpConfigurationOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationOutput
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
type LoadBalancerFrontendIpConfigurationArgs struct {
	// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// Properties of load balancer frontend ip configuration.
	Properties LoadBalancerFrontendIpConfigurationPropertiesInput `pulumi:"properties"`
}

func (LoadBalancerFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationArgs) ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput {
	return i.ToLoadBalancerFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationArgs) ToLoadBalancerFrontendIpConfigurationOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationOutput)
}

// LoadBalancerFrontendIpConfigurationArrayInput is an input type that accepts LoadBalancerFrontendIpConfigurationArray and LoadBalancerFrontendIpConfigurationArrayOutput values.
// You can construct a concrete instance of `LoadBalancerFrontendIpConfigurationArrayInput` via:
//
//	LoadBalancerFrontendIpConfigurationArray{ LoadBalancerFrontendIpConfigurationArgs{...} }
type LoadBalancerFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput
	ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationArrayOutput
}

type LoadBalancerFrontendIpConfigurationArray []LoadBalancerFrontendIpConfigurationInput

func (LoadBalancerFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationArray) ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput {
	return i.ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationArray) ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationArrayOutput)
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
type LoadBalancerFrontendIpConfigurationOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationOutput) ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationOutput) ToLoadBalancerFrontendIpConfigurationOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationOutput {
	return o
}

// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
func (o LoadBalancerFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of load balancer frontend ip configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) Properties() LoadBalancerFrontendIpConfigurationPropertiesOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) LoadBalancerFrontendIpConfigurationProperties {
		return v.Properties
	}).(LoadBalancerFrontendIpConfigurationPropertiesOutput)
}

type LoadBalancerFrontendIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) LoadBalancerFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerFrontendIpConfiguration {
		return vs[0].([]LoadBalancerFrontendIpConfiguration)[vs[1].(int)]
	}).(LoadBalancerFrontendIpConfigurationOutput)
}

// Describes a cloud service IP Configuration
type LoadBalancerFrontendIpConfigurationProperties struct {
	// The virtual network private IP address of the IP configuration.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The reference to the public ip address resource.
	PublicIPAddress *SubResource `pulumi:"publicIPAddress"`
	// The reference to the virtual network subnet resource.
	Subnet *SubResource `pulumi:"subnet"`
}

// LoadBalancerFrontendIpConfigurationPropertiesInput is an input type that accepts LoadBalancerFrontendIpConfigurationPropertiesArgs and LoadBalancerFrontendIpConfigurationPropertiesOutput values.
// You can construct a concrete instance of `LoadBalancerFrontendIpConfigurationPropertiesInput` via:
//
//	LoadBalancerFrontendIpConfigurationPropertiesArgs{...}
type LoadBalancerFrontendIpConfigurationPropertiesInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationPropertiesOutput() LoadBalancerFrontendIpConfigurationPropertiesOutput
	ToLoadBalancerFrontendIpConfigurationPropertiesOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationPropertiesOutput
}

// Describes a cloud service IP Configuration
type LoadBalancerFrontendIpConfigurationPropertiesArgs struct {
	// The virtual network private IP address of the IP configuration.
	PrivateIPAddress pulumi.StringPtrInput `pulumi:"privateIPAddress"`
	// The reference to the public ip address resource.
	PublicIPAddress SubResourcePtrInput `pulumi:"publicIPAddress"`
	// The reference to the virtual network subnet resource.
	Subnet SubResourcePtrInput `pulumi:"subnet"`
}

func (LoadBalancerFrontendIpConfigurationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfigurationProperties)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationPropertiesArgs) ToLoadBalancerFrontendIpConfigurationPropertiesOutput() LoadBalancerFrontendIpConfigurationPropertiesOutput {
	return i.ToLoadBalancerFrontendIpConfigurationPropertiesOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationPropertiesArgs) ToLoadBalancerFrontendIpConfigurationPropertiesOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationPropertiesOutput)
}

// Describes a cloud service IP Configuration
type LoadBalancerFrontendIpConfigurationPropertiesOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfigurationProperties)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationPropertiesOutput) ToLoadBalancerFrontendIpConfigurationPropertiesOutput() LoadBalancerFrontendIpConfigurationPropertiesOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationPropertiesOutput) ToLoadBalancerFrontendIpConfigurationPropertiesOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationPropertiesOutput {
	return o
}

// The virtual network private IP address of the IP configuration.
func (o LoadBalancerFrontendIpConfigurationPropertiesOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationProperties) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The reference to the public ip address resource.
func (o LoadBalancerFrontendIpConfigurationPropertiesOutput) PublicIPAddress() SubResourcePtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationProperties) *SubResource { return v.PublicIPAddress }).(SubResourcePtrOutput)
}

// The reference to the virtual network subnet resource.
func (o LoadBalancerFrontendIpConfigurationPropertiesOutput) Subnet() SubResourcePtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationProperties) *SubResource { return v.Subnet }).(SubResourcePtrOutput)
}

// Describes a cloud service IP Configuration
type LoadBalancerFrontendIpConfigurationPropertiesResponse struct {
	// The virtual network private IP address of the IP configuration.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The reference to the public ip address resource.
	PublicIPAddress *SubResourceResponse `pulumi:"publicIPAddress"`
	// The reference to the virtual network subnet resource.
	Subnet *SubResourceResponse `pulumi:"subnet"`
}

// Describes a cloud service IP Configuration
type LoadBalancerFrontendIpConfigurationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfigurationPropertiesResponse)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationPropertiesResponseOutput) ToLoadBalancerFrontendIpConfigurationPropertiesResponseOutput() LoadBalancerFrontendIpConfigurationPropertiesResponseOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationPropertiesResponseOutput) ToLoadBalancerFrontendIpConfigurationPropertiesResponseOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationPropertiesResponseOutput {
	return o
}

// The virtual network private IP address of the IP configuration.
func (o LoadBalancerFrontendIpConfigurationPropertiesResponseOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationPropertiesResponse) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The reference to the public ip address resource.
func (o LoadBalancerFrontendIpConfigurationPropertiesResponseOutput) PublicIPAddress() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationPropertiesResponse) *SubResourceResponse {
		return v.PublicIPAddress
	}).(SubResourceResponsePtrOutput)
}

// The reference to the virtual network subnet resource.
func (o LoadBalancerFrontendIpConfigurationPropertiesResponseOutput) Subnet() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationPropertiesResponse) *SubResourceResponse { return v.Subnet }).(SubResourceResponsePtrOutput)
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
type LoadBalancerFrontendIpConfigurationResponse struct {
	// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
	Name string `pulumi:"name"`
	// Properties of load balancer frontend ip configuration.
	Properties LoadBalancerFrontendIpConfigurationPropertiesResponse `pulumi:"properties"`
}

// Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
type LoadBalancerFrontendIpConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfigurationResponse)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationResponseOutput) ToLoadBalancerFrontendIpConfigurationResponseOutput() LoadBalancerFrontendIpConfigurationResponseOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationResponseOutput) ToLoadBalancerFrontendIpConfigurationResponseOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationResponseOutput {
	return o
}

// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
func (o LoadBalancerFrontendIpConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of load balancer frontend ip configuration.
func (o LoadBalancerFrontendIpConfigurationResponseOutput) Properties() LoadBalancerFrontendIpConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfigurationResponse) LoadBalancerFrontendIpConfigurationPropertiesResponse {
		return v.Properties
	}).(LoadBalancerFrontendIpConfigurationPropertiesResponseOutput)
}

type LoadBalancerFrontendIpConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfigurationResponse)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationResponseArrayOutput) ToLoadBalancerFrontendIpConfigurationResponseArrayOutput() LoadBalancerFrontendIpConfigurationResponseArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationResponseArrayOutput) ToLoadBalancerFrontendIpConfigurationResponseArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationResponseArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationResponseArrayOutput) Index(i pulumi.IntInput) LoadBalancerFrontendIpConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerFrontendIpConfigurationResponse {
		return vs[0].([]LoadBalancerFrontendIpConfigurationResponse)[vs[1].(int)]
	}).(LoadBalancerFrontendIpConfigurationResponseOutput)
}

// LogAnalytics output properties
type LogAnalyticsOutputResponse struct {
	// Output file Uri path to blob container.
	Output string `pulumi:"output"`
}

// LogAnalytics output properties
type LogAnalyticsOutputResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsOutputResponse)(nil)).Elem()
}

func (o LogAnalyticsOutputResponseOutput) ToLogAnalyticsOutputResponseOutput() LogAnalyticsOutputResponseOutput {
	return o
}

func (o LogAnalyticsOutputResponseOutput) ToLogAnalyticsOutputResponseOutputWithContext(ctx context.Context) LogAnalyticsOutputResponseOutput {
	return o
}

// Output file Uri path to blob container.
func (o LogAnalyticsOutputResponseOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsOutputResponse) string { return v.Output }).(pulumi.StringOutput)
}

// Maintenance Operation Status.
type MaintenanceRedeployStatusResponse struct {
	// True, if customer is allowed to perform Maintenance.
	IsCustomerInitiatedMaintenanceAllowed *bool `pulumi:"isCustomerInitiatedMaintenanceAllowed"`
	// Message returned for the last Maintenance Operation.
	LastOperationMessage *string `pulumi:"lastOperationMessage"`
	// The Last Maintenance Operation Result Code.
	LastOperationResultCode *string `pulumi:"lastOperationResultCode"`
	// End Time for the Maintenance Window.
	MaintenanceWindowEndTime *string `pulumi:"maintenanceWindowEndTime"`
	// Start Time for the Maintenance Window.
	MaintenanceWindowStartTime *string `pulumi:"maintenanceWindowStartTime"`
	// End Time for the Pre Maintenance Window.
	PreMaintenanceWindowEndTime *string `pulumi:"preMaintenanceWindowEndTime"`
	// Start Time for the Pre Maintenance Window.
	PreMaintenanceWindowStartTime *string `pulumi:"preMaintenanceWindowStartTime"`
}

// Maintenance Operation Status.
type MaintenanceRedeployStatusResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceRedeployStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceRedeployStatusResponse)(nil)).Elem()
}

func (o MaintenanceRedeployStatusResponseOutput) ToMaintenanceRedeployStatusResponseOutput() MaintenanceRedeployStatusResponseOutput {
	return o
}

func (o MaintenanceRedeployStatusResponseOutput) ToMaintenanceRedeployStatusResponseOutputWithContext(ctx context.Context) MaintenanceRedeployStatusResponseOutput {
	return o
}

// True, if customer is allowed to perform Maintenance.
func (o MaintenanceRedeployStatusResponseOutput) IsCustomerInitiatedMaintenanceAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *bool { return v.IsCustomerInitiatedMaintenanceAllowed }).(pulumi.BoolPtrOutput)
}

// Message returned for the last Maintenance Operation.
func (o MaintenanceRedeployStatusResponseOutput) LastOperationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.LastOperationMessage }).(pulumi.StringPtrOutput)
}

// The Last Maintenance Operation Result Code.
func (o MaintenanceRedeployStatusResponseOutput) LastOperationResultCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.LastOperationResultCode }).(pulumi.StringPtrOutput)
}

// End Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) MaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.MaintenanceWindowEndTime }).(pulumi.StringPtrOutput)
}

// Start Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) MaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.MaintenanceWindowStartTime }).(pulumi.StringPtrOutput)
}

// End Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) PreMaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.PreMaintenanceWindowEndTime }).(pulumi.StringPtrOutput)
}

// Start Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponseOutput) PreMaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRedeployStatusResponse) *string { return v.PreMaintenanceWindowStartTime }).(pulumi.StringPtrOutput)
}

type MaintenanceRedeployStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceRedeployStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceRedeployStatusResponse)(nil)).Elem()
}

func (o MaintenanceRedeployStatusResponsePtrOutput) ToMaintenanceRedeployStatusResponsePtrOutput() MaintenanceRedeployStatusResponsePtrOutput {
	return o
}

func (o MaintenanceRedeployStatusResponsePtrOutput) ToMaintenanceRedeployStatusResponsePtrOutputWithContext(ctx context.Context) MaintenanceRedeployStatusResponsePtrOutput {
	return o
}

func (o MaintenanceRedeployStatusResponsePtrOutput) Elem() MaintenanceRedeployStatusResponseOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) MaintenanceRedeployStatusResponse {
		if v != nil {
			return *v
		}
		var ret MaintenanceRedeployStatusResponse
		return ret
	}).(MaintenanceRedeployStatusResponseOutput)
}

// True, if customer is allowed to perform Maintenance.
func (o MaintenanceRedeployStatusResponsePtrOutput) IsCustomerInitiatedMaintenanceAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCustomerInitiatedMaintenanceAllowed
	}).(pulumi.BoolPtrOutput)
}

// Message returned for the last Maintenance Operation.
func (o MaintenanceRedeployStatusResponsePtrOutput) LastOperationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastOperationMessage
	}).(pulumi.StringPtrOutput)
}

// The Last Maintenance Operation Result Code.
func (o MaintenanceRedeployStatusResponsePtrOutput) LastOperationResultCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastOperationResultCode
	}).(pulumi.StringPtrOutput)
}

// End Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) MaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindowEndTime
	}).(pulumi.StringPtrOutput)
}

// Start Time for the Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) MaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// End Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) PreMaintenanceWindowEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreMaintenanceWindowEndTime
	}).(pulumi.StringPtrOutput)
}

// Start Time for the Pre Maintenance Window.
func (o MaintenanceRedeployStatusResponsePtrOutput) PreMaintenanceWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceRedeployStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreMaintenanceWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// The parameters of a managed disk.
type ManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the security profile for the managed disk.
	SecurityProfile *VMDiskSecurityProfile `pulumi:"securityProfile"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// ManagedDiskParametersInput is an input type that accepts ManagedDiskParametersArgs and ManagedDiskParametersOutput values.
// You can construct a concrete instance of `ManagedDiskParametersInput` via:
//
//	ManagedDiskParametersArgs{...}
type ManagedDiskParametersInput interface {
	pulumi.Input

	ToManagedDiskParametersOutput() ManagedDiskParametersOutput
	ToManagedDiskParametersOutputWithContext(context.Context) ManagedDiskParametersOutput
}

// The parameters of a managed disk.
type ManagedDiskParametersArgs struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the security profile for the managed disk.
	SecurityProfile VMDiskSecurityProfilePtrInput `pulumi:"securityProfile"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (ManagedDiskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDiskParameters)(nil)).Elem()
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersOutput() ManagedDiskParametersOutput {
	return i.ToManagedDiskParametersOutputWithContext(context.Background())
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersOutputWithContext(ctx context.Context) ManagedDiskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskParametersOutput)
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput {
	return i.ToManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i ManagedDiskParametersArgs) ToManagedDiskParametersPtrOutputWithContext(ctx context.Context) ManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskParametersOutput).ToManagedDiskParametersPtrOutputWithContext(ctx)
}

// ManagedDiskParametersPtrInput is an input type that accepts ManagedDiskParametersArgs, ManagedDiskParametersPtr and ManagedDiskParametersPtrOutput values.
// You can construct a concrete instance of `ManagedDiskParametersPtrInput` via:
//
//	        ManagedDiskParametersArgs{...}
//
//	or:
//
//	        nil
type ManagedDiskParametersPtrInput interface {
	pulumi.Input

	ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput
	ToManagedDiskParametersPtrOutputWithContext(context.Context) ManagedDiskParametersPtrOutput
}

type managedDiskParametersPtrType ManagedDiskParametersArgs

func ManagedDiskParametersPtr(v *ManagedDiskParametersArgs) ManagedDiskParametersPtrInput {
	return (*managedDiskParametersPtrType)(v)
}

func (*managedDiskParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDiskParameters)(nil)).Elem()
}

func (i *managedDiskParametersPtrType) ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput {
	return i.ToManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i *managedDiskParametersPtrType) ToManagedDiskParametersPtrOutputWithContext(ctx context.Context) ManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedDiskParametersPtrOutput)
}

// The parameters of a managed disk.
type ManagedDiskParametersOutput struct{ *pulumi.OutputState }

func (ManagedDiskParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDiskParameters)(nil)).Elem()
}

func (o ManagedDiskParametersOutput) ToManagedDiskParametersOutput() ManagedDiskParametersOutput {
	return o
}

func (o ManagedDiskParametersOutput) ToManagedDiskParametersOutputWithContext(ctx context.Context) ManagedDiskParametersOutput {
	return o
}

func (o ManagedDiskParametersOutput) ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput {
	return o.ToManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (o ManagedDiskParametersOutput) ToManagedDiskParametersPtrOutputWithContext(ctx context.Context) ManagedDiskParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedDiskParameters) *ManagedDiskParameters {
		return &v
	}).(ManagedDiskParametersPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o ManagedDiskParametersOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v ManagedDiskParameters) *DiskEncryptionSetParameters { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersPtrOutput)
}

// Resource Id
func (o ManagedDiskParametersOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedDiskParameters) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the security profile for the managed disk.
func (o ManagedDiskParametersOutput) SecurityProfile() VMDiskSecurityProfilePtrOutput {
	return o.ApplyT(func(v ManagedDiskParameters) *VMDiskSecurityProfile { return v.SecurityProfile }).(VMDiskSecurityProfilePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ManagedDiskParametersOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedDiskParameters) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ManagedDiskParametersPtrOutput struct{ *pulumi.OutputState }

func (ManagedDiskParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDiskParameters)(nil)).Elem()
}

func (o ManagedDiskParametersPtrOutput) ToManagedDiskParametersPtrOutput() ManagedDiskParametersPtrOutput {
	return o
}

func (o ManagedDiskParametersPtrOutput) ToManagedDiskParametersPtrOutputWithContext(ctx context.Context) ManagedDiskParametersPtrOutput {
	return o
}

func (o ManagedDiskParametersPtrOutput) Elem() ManagedDiskParametersOutput {
	return o.ApplyT(func(v *ManagedDiskParameters) ManagedDiskParameters {
		if v != nil {
			return *v
		}
		var ret ManagedDiskParameters
		return ret
	}).(ManagedDiskParametersOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o ManagedDiskParametersPtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParameters) *DiskEncryptionSetParameters {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersPtrOutput)
}

// Resource Id
func (o ManagedDiskParametersPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParameters) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the security profile for the managed disk.
func (o ManagedDiskParametersPtrOutput) SecurityProfile() VMDiskSecurityProfilePtrOutput {
	return o.ApplyT(func(v *ManagedDiskParameters) *VMDiskSecurityProfile {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(VMDiskSecurityProfilePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ManagedDiskParametersPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParameters) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// The parameters of a managed disk.
type ManagedDiskParametersResponse struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the security profile for the managed disk.
	SecurityProfile *VMDiskSecurityProfileResponse `pulumi:"securityProfile"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// The parameters of a managed disk.
type ManagedDiskParametersResponseOutput struct{ *pulumi.OutputState }

func (ManagedDiskParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedDiskParametersResponse)(nil)).Elem()
}

func (o ManagedDiskParametersResponseOutput) ToManagedDiskParametersResponseOutput() ManagedDiskParametersResponseOutput {
	return o
}

func (o ManagedDiskParametersResponseOutput) ToManagedDiskParametersResponseOutputWithContext(ctx context.Context) ManagedDiskParametersResponseOutput {
	return o
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o ManagedDiskParametersResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Resource Id
func (o ManagedDiskParametersResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the security profile for the managed disk.
func (o ManagedDiskParametersResponseOutput) SecurityProfile() VMDiskSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *VMDiskSecurityProfileResponse { return v.SecurityProfile }).(VMDiskSecurityProfileResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ManagedDiskParametersResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedDiskParametersResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ManagedDiskParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedDiskParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedDiskParametersResponse)(nil)).Elem()
}

func (o ManagedDiskParametersResponsePtrOutput) ToManagedDiskParametersResponsePtrOutput() ManagedDiskParametersResponsePtrOutput {
	return o
}

func (o ManagedDiskParametersResponsePtrOutput) ToManagedDiskParametersResponsePtrOutputWithContext(ctx context.Context) ManagedDiskParametersResponsePtrOutput {
	return o
}

func (o ManagedDiskParametersResponsePtrOutput) Elem() ManagedDiskParametersResponseOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) ManagedDiskParametersResponse {
		if v != nil {
			return *v
		}
		var ret ManagedDiskParametersResponse
		return ret
	}).(ManagedDiskParametersResponseOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o ManagedDiskParametersResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Resource Id
func (o ManagedDiskParametersResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the security profile for the managed disk.
func (o ManagedDiskParametersResponsePtrOutput) SecurityProfile() VMDiskSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *VMDiskSecurityProfileResponse {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(VMDiskSecurityProfileResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o ManagedDiskParametersResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedDiskParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes a network interface reference.
type NetworkInterfaceReference struct {
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// NetworkInterfaceReferenceInput is an input type that accepts NetworkInterfaceReferenceArgs and NetworkInterfaceReferenceOutput values.
// You can construct a concrete instance of `NetworkInterfaceReferenceInput` via:
//
//	NetworkInterfaceReferenceArgs{...}
type NetworkInterfaceReferenceInput interface {
	pulumi.Input

	ToNetworkInterfaceReferenceOutput() NetworkInterfaceReferenceOutput
	ToNetworkInterfaceReferenceOutputWithContext(context.Context) NetworkInterfaceReferenceOutput
}

// Describes a network interface reference.
type NetworkInterfaceReferenceArgs struct {
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
}

func (NetworkInterfaceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceReference)(nil)).Elem()
}

func (i NetworkInterfaceReferenceArgs) ToNetworkInterfaceReferenceOutput() NetworkInterfaceReferenceOutput {
	return i.ToNetworkInterfaceReferenceOutputWithContext(context.Background())
}

func (i NetworkInterfaceReferenceArgs) ToNetworkInterfaceReferenceOutputWithContext(ctx context.Context) NetworkInterfaceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceReferenceOutput)
}

// NetworkInterfaceReferenceArrayInput is an input type that accepts NetworkInterfaceReferenceArray and NetworkInterfaceReferenceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceReferenceArrayInput` via:
//
//	NetworkInterfaceReferenceArray{ NetworkInterfaceReferenceArgs{...} }
type NetworkInterfaceReferenceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceReferenceArrayOutput() NetworkInterfaceReferenceArrayOutput
	ToNetworkInterfaceReferenceArrayOutputWithContext(context.Context) NetworkInterfaceReferenceArrayOutput
}

type NetworkInterfaceReferenceArray []NetworkInterfaceReferenceInput

func (NetworkInterfaceReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceReference)(nil)).Elem()
}

func (i NetworkInterfaceReferenceArray) ToNetworkInterfaceReferenceArrayOutput() NetworkInterfaceReferenceArrayOutput {
	return i.ToNetworkInterfaceReferenceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceReferenceArray) ToNetworkInterfaceReferenceArrayOutputWithContext(ctx context.Context) NetworkInterfaceReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceReferenceArrayOutput)
}

// Describes a network interface reference.
type NetworkInterfaceReferenceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceReference)(nil)).Elem()
}

func (o NetworkInterfaceReferenceOutput) ToNetworkInterfaceReferenceOutput() NetworkInterfaceReferenceOutput {
	return o
}

func (o NetworkInterfaceReferenceOutput) ToNetworkInterfaceReferenceOutputWithContext(ctx context.Context) NetworkInterfaceReferenceOutput {
	return o
}

// Specify what happens to the network interface when the VM is deleted
func (o NetworkInterfaceReferenceOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReference) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o NetworkInterfaceReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o NetworkInterfaceReferenceOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReference) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type NetworkInterfaceReferenceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceReference)(nil)).Elem()
}

func (o NetworkInterfaceReferenceArrayOutput) ToNetworkInterfaceReferenceArrayOutput() NetworkInterfaceReferenceArrayOutput {
	return o
}

func (o NetworkInterfaceReferenceArrayOutput) ToNetworkInterfaceReferenceArrayOutputWithContext(ctx context.Context) NetworkInterfaceReferenceArrayOutput {
	return o
}

func (o NetworkInterfaceReferenceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceReference {
		return vs[0].([]NetworkInterfaceReference)[vs[1].(int)]
	}).(NetworkInterfaceReferenceOutput)
}

// Describes a network interface reference.
type NetworkInterfaceReferenceResponse struct {
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// Resource Id
	Id *string `pulumi:"id"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// Describes a network interface reference.
type NetworkInterfaceReferenceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceReferenceResponse)(nil)).Elem()
}

func (o NetworkInterfaceReferenceResponseOutput) ToNetworkInterfaceReferenceResponseOutput() NetworkInterfaceReferenceResponseOutput {
	return o
}

func (o NetworkInterfaceReferenceResponseOutput) ToNetworkInterfaceReferenceResponseOutputWithContext(ctx context.Context) NetworkInterfaceReferenceResponseOutput {
	return o
}

// Specify what happens to the network interface when the VM is deleted
func (o NetworkInterfaceReferenceResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReferenceResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o NetworkInterfaceReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o NetworkInterfaceReferenceResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceReferenceResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type NetworkInterfaceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceReferenceResponse)(nil)).Elem()
}

func (o NetworkInterfaceReferenceResponseArrayOutput) ToNetworkInterfaceReferenceResponseArrayOutput() NetworkInterfaceReferenceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceReferenceResponseArrayOutput) ToNetworkInterfaceReferenceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceReferenceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceReferenceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceReferenceResponse {
		return vs[0].([]NetworkInterfaceReferenceResponse)[vs[1].(int)]
	}).(NetworkInterfaceReferenceResponseOutput)
}

// Specifies the network interfaces or the networking configuration of the virtual machine.
type NetworkProfile struct {
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
	NetworkApiVersion *string `pulumi:"networkApiVersion"`
	// Specifies the networking configurations that will be used to create the virtual machine networking resources.
	NetworkInterfaceConfigurations []VirtualMachineNetworkInterfaceConfiguration `pulumi:"networkInterfaceConfigurations"`
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReference `pulumi:"networkInterfaces"`
}

// NetworkProfileInput is an input type that accepts NetworkProfileArgs and NetworkProfileOutput values.
// You can construct a concrete instance of `NetworkProfileInput` via:
//
//	NetworkProfileArgs{...}
type NetworkProfileInput interface {
	pulumi.Input

	ToNetworkProfileOutput() NetworkProfileOutput
	ToNetworkProfileOutputWithContext(context.Context) NetworkProfileOutput
}

// Specifies the network interfaces or the networking configuration of the virtual machine.
type NetworkProfileArgs struct {
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
	NetworkApiVersion pulumi.StringPtrInput `pulumi:"networkApiVersion"`
	// Specifies the networking configurations that will be used to create the virtual machine networking resources.
	NetworkInterfaceConfigurations VirtualMachineNetworkInterfaceConfigurationArrayInput `pulumi:"networkInterfaceConfigurations"`
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces NetworkInterfaceReferenceArrayInput `pulumi:"networkInterfaces"`
}

func (NetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (i NetworkProfileArgs) ToNetworkProfileOutput() NetworkProfileOutput {
	return i.ToNetworkProfileOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput)
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput).ToNetworkProfilePtrOutputWithContext(ctx)
}

// NetworkProfilePtrInput is an input type that accepts NetworkProfileArgs, NetworkProfilePtr and NetworkProfilePtrOutput values.
// You can construct a concrete instance of `NetworkProfilePtrInput` via:
//
//	        NetworkProfileArgs{...}
//
//	or:
//
//	        nil
type NetworkProfilePtrInput interface {
	pulumi.Input

	ToNetworkProfilePtrOutput() NetworkProfilePtrOutput
	ToNetworkProfilePtrOutputWithContext(context.Context) NetworkProfilePtrOutput
}

type networkProfilePtrType NetworkProfileArgs

func NetworkProfilePtr(v *NetworkProfileArgs) NetworkProfilePtrInput {
	return (*networkProfilePtrType)(v)
}

func (*networkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfilePtrOutput)
}

// Specifies the network interfaces or the networking configuration of the virtual machine.
type NetworkProfileOutput struct{ *pulumi.OutputState }

func (NetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (o NetworkProfileOutput) ToNetworkProfileOutput() NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkProfile) *NetworkProfile {
		return &v
	}).(NetworkProfilePtrOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
func (o NetworkProfileOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.NetworkApiVersion }).(pulumi.StringPtrOutput)
}

// Specifies the networking configurations that will be used to create the virtual machine networking resources.
func (o NetworkProfileOutput) NetworkInterfaceConfigurations() VirtualMachineNetworkInterfaceConfigurationArrayOutput {
	return o.ApplyT(func(v NetworkProfile) []VirtualMachineNetworkInterfaceConfiguration {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineNetworkInterfaceConfigurationArrayOutput)
}

// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
func (o NetworkProfileOutput) NetworkInterfaces() NetworkInterfaceReferenceArrayOutput {
	return o.ApplyT(func(v NetworkProfile) []NetworkInterfaceReference { return v.NetworkInterfaces }).(NetworkInterfaceReferenceArrayOutput)
}

type NetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) Elem() NetworkProfileOutput {
	return o.ApplyT(func(v *NetworkProfile) NetworkProfile {
		if v != nil {
			return *v
		}
		var ret NetworkProfile
		return ret
	}).(NetworkProfileOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
func (o NetworkProfilePtrOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkApiVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the networking configurations that will be used to create the virtual machine networking resources.
func (o NetworkProfilePtrOutput) NetworkInterfaceConfigurations() VirtualMachineNetworkInterfaceConfigurationArrayOutput {
	return o.ApplyT(func(v *NetworkProfile) []VirtualMachineNetworkInterfaceConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineNetworkInterfaceConfigurationArrayOutput)
}

// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
func (o NetworkProfilePtrOutput) NetworkInterfaces() NetworkInterfaceReferenceArrayOutput {
	return o.ApplyT(func(v *NetworkProfile) []NetworkInterfaceReference {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceReferenceArrayOutput)
}

// Specifies the network interfaces or the networking configuration of the virtual machine.
type NetworkProfileResponse struct {
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
	NetworkApiVersion *string `pulumi:"networkApiVersion"`
	// Specifies the networking configurations that will be used to create the virtual machine networking resources.
	NetworkInterfaceConfigurations []VirtualMachineNetworkInterfaceConfigurationResponse `pulumi:"networkInterfaceConfigurations"`
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReferenceResponse `pulumi:"networkInterfaces"`
}

// Specifies the network interfaces or the networking configuration of the virtual machine.
type NetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutput() NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutputWithContext(ctx context.Context) NetworkProfileResponseOutput {
	return o
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
func (o NetworkProfileResponseOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.NetworkApiVersion }).(pulumi.StringPtrOutput)
}

// Specifies the networking configurations that will be used to create the virtual machine networking resources.
func (o NetworkProfileResponseOutput) NetworkInterfaceConfigurations() VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput {
	return o.ApplyT(func(v NetworkProfileResponse) []VirtualMachineNetworkInterfaceConfigurationResponse {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput)
}

// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
func (o NetworkProfileResponseOutput) NetworkInterfaces() NetworkInterfaceReferenceResponseArrayOutput {
	return o.ApplyT(func(v NetworkProfileResponse) []NetworkInterfaceReferenceResponse { return v.NetworkInterfaces }).(NetworkInterfaceReferenceResponseArrayOutput)
}

type NetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutput() NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutputWithContext(ctx context.Context) NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) Elem() NetworkProfileResponseOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) NetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret NetworkProfileResponse
		return ret
	}).(NetworkProfileResponseOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
func (o NetworkProfileResponsePtrOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkApiVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the networking configurations that will be used to create the virtual machine networking resources.
func (o NetworkProfileResponsePtrOutput) NetworkInterfaceConfigurations() VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) []VirtualMachineNetworkInterfaceConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput)
}

// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
func (o NetworkProfileResponsePtrOutput) NetworkInterfaces() NetworkInterfaceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) []NetworkInterfaceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceReferenceResponseArrayOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
type OSDisk struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *CachingTypes `pulumi:"caching"`
	// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettings `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
	EncryptionSettings *DiskEncryptionSettings `pulumi:"encryptionSettings"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDisk `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
	OsType *OperatingSystemTypes `pulumi:"osType"`
	// The virtual hard disk.
	Vhd *VirtualHardDisk `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// OSDiskInput is an input type that accepts OSDiskArgs and OSDiskOutput values.
// You can construct a concrete instance of `OSDiskInput` via:
//
//	OSDiskArgs{...}
type OSDiskInput interface {
	pulumi.Input

	ToOSDiskOutput() OSDiskOutput
	ToOSDiskOutputWithContext(context.Context) OSDiskOutput
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
type OSDiskArgs struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
	Caching CachingTypesPtrInput `pulumi:"caching"`
	// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings DiffDiskSettingsPtrInput `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
	EncryptionSettings DiskEncryptionSettingsPtrInput `pulumi:"encryptionSettings"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image VirtualHardDiskPtrInput `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk ManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
	OsType OperatingSystemTypesPtrInput `pulumi:"osType"`
	// The virtual hard disk.
	Vhd VirtualHardDiskPtrInput `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (OSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDisk)(nil)).Elem()
}

func (i OSDiskArgs) ToOSDiskOutput() OSDiskOutput {
	return i.ToOSDiskOutputWithContext(context.Background())
}

func (i OSDiskArgs) ToOSDiskOutputWithContext(ctx context.Context) OSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskOutput)
}

func (i OSDiskArgs) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return i.ToOSDiskPtrOutputWithContext(context.Background())
}

func (i OSDiskArgs) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskOutput).ToOSDiskPtrOutputWithContext(ctx)
}

// OSDiskPtrInput is an input type that accepts OSDiskArgs, OSDiskPtr and OSDiskPtrOutput values.
// You can construct a concrete instance of `OSDiskPtrInput` via:
//
//	        OSDiskArgs{...}
//
//	or:
//
//	        nil
type OSDiskPtrInput interface {
	pulumi.Input

	ToOSDiskPtrOutput() OSDiskPtrOutput
	ToOSDiskPtrOutputWithContext(context.Context) OSDiskPtrOutput
}

type osdiskPtrType OSDiskArgs

func OSDiskPtr(v *OSDiskArgs) OSDiskPtrInput {
	return (*osdiskPtrType)(v)
}

func (*osdiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDisk)(nil)).Elem()
}

func (i *osdiskPtrType) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return i.ToOSDiskPtrOutputWithContext(context.Background())
}

func (i *osdiskPtrType) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskPtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
type OSDiskOutput struct{ *pulumi.OutputState }

func (OSDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDisk)(nil)).Elem()
}

func (o OSDiskOutput) ToOSDiskOutput() OSDiskOutput {
	return o
}

func (o OSDiskOutput) ToOSDiskOutputWithContext(ctx context.Context) OSDiskOutput {
	return o
}

func (o OSDiskOutput) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return o.ToOSDiskPtrOutputWithContext(context.Background())
}

func (o OSDiskOutput) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSDisk) *OSDisk {
		return &v
	}).(OSDiskPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
func (o OSDiskOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v OSDisk) *CachingTypes { return v.Caching }).(CachingTypesPtrOutput)
}

// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
func (o OSDiskOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v OSDisk) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
func (o OSDiskOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDisk) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
func (o OSDiskOutput) DiffDiskSettings() DiffDiskSettingsPtrOutput {
	return o.ApplyT(func(v OSDisk) *DiffDiskSettings { return v.DiffDiskSettings }).(DiffDiskSettingsPtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o OSDiskOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OSDisk) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
func (o OSDiskOutput) EncryptionSettings() DiskEncryptionSettingsPtrOutput {
	return o.ApplyT(func(v OSDisk) *DiskEncryptionSettings { return v.EncryptionSettings }).(DiskEncryptionSettingsPtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o OSDiskOutput) Image() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v OSDisk) *VirtualHardDisk { return v.Image }).(VirtualHardDiskPtrOutput)
}

// The managed disk parameters.
func (o OSDiskOutput) ManagedDisk() ManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v OSDisk) *ManagedDiskParameters { return v.ManagedDisk }).(ManagedDiskParametersPtrOutput)
}

// The disk name.
func (o OSDiskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDisk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o OSDiskOutput) OsType() OperatingSystemTypesPtrOutput {
	return o.ApplyT(func(v OSDisk) *OperatingSystemTypes { return v.OsType }).(OperatingSystemTypesPtrOutput)
}

// The virtual hard disk.
func (o OSDiskOutput) Vhd() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v OSDisk) *VirtualHardDisk { return v.Vhd }).(VirtualHardDiskPtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o OSDiskOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSDisk) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type OSDiskPtrOutput struct{ *pulumi.OutputState }

func (OSDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDisk)(nil)).Elem()
}

func (o OSDiskPtrOutput) ToOSDiskPtrOutput() OSDiskPtrOutput {
	return o
}

func (o OSDiskPtrOutput) ToOSDiskPtrOutputWithContext(ctx context.Context) OSDiskPtrOutput {
	return o
}

func (o OSDiskPtrOutput) Elem() OSDiskOutput {
	return o.ApplyT(func(v *OSDisk) OSDisk {
		if v != nil {
			return *v
		}
		var ret OSDisk
		return ret
	}).(OSDiskOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
func (o OSDiskPtrOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v *OSDisk) *CachingTypes {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(CachingTypesPtrOutput)
}

// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
func (o OSDiskPtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDisk) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
func (o OSDiskPtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDisk) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
func (o OSDiskPtrOutput) DiffDiskSettings() DiffDiskSettingsPtrOutput {
	return o.ApplyT(func(v *OSDisk) *DiffDiskSettings {
		if v == nil {
			return nil
		}
		return v.DiffDiskSettings
	}).(DiffDiskSettingsPtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o OSDiskPtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OSDisk) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
func (o OSDiskPtrOutput) EncryptionSettings() DiskEncryptionSettingsPtrOutput {
	return o.ApplyT(func(v *OSDisk) *DiskEncryptionSettings {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(DiskEncryptionSettingsPtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o OSDiskPtrOutput) Image() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v *OSDisk) *VirtualHardDisk {
		if v == nil {
			return nil
		}
		return v.Image
	}).(VirtualHardDiskPtrOutput)
}

// The managed disk parameters.
func (o OSDiskPtrOutput) ManagedDisk() ManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v *OSDisk) *ManagedDiskParameters {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(ManagedDiskParametersPtrOutput)
}

// The disk name.
func (o OSDiskPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDisk) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o OSDiskPtrOutput) OsType() OperatingSystemTypesPtrOutput {
	return o.ApplyT(func(v *OSDisk) *OperatingSystemTypes {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(OperatingSystemTypesPtrOutput)
}

// The virtual hard disk.
func (o OSDiskPtrOutput) Vhd() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v *OSDisk) *VirtualHardDisk {
		if v == nil {
			return nil
		}
		return v.Vhd
	}).(VirtualHardDiskPtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o OSDiskPtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSDisk) *bool {
		if v == nil {
			return nil
		}
		return v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryption struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// This property specifies the security profile of an OS disk image.
	SecurityProfile *OSDiskImageSecurityProfile `pulumi:"securityProfile"`
}

// OSDiskImageEncryptionInput is an input type that accepts OSDiskImageEncryptionArgs and OSDiskImageEncryptionOutput values.
// You can construct a concrete instance of `OSDiskImageEncryptionInput` via:
//
//	OSDiskImageEncryptionArgs{...}
type OSDiskImageEncryptionInput interface {
	pulumi.Input

	ToOSDiskImageEncryptionOutput() OSDiskImageEncryptionOutput
	ToOSDiskImageEncryptionOutputWithContext(context.Context) OSDiskImageEncryptionOutput
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionArgs struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId pulumi.StringPtrInput `pulumi:"diskEncryptionSetId"`
	// This property specifies the security profile of an OS disk image.
	SecurityProfile OSDiskImageSecurityProfilePtrInput `pulumi:"securityProfile"`
}

func (OSDiskImageEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageEncryption)(nil)).Elem()
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionOutput() OSDiskImageEncryptionOutput {
	return i.ToOSDiskImageEncryptionOutputWithContext(context.Background())
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionOutputWithContext(ctx context.Context) OSDiskImageEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageEncryptionOutput)
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput {
	return i.ToOSDiskImageEncryptionPtrOutputWithContext(context.Background())
}

func (i OSDiskImageEncryptionArgs) ToOSDiskImageEncryptionPtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageEncryptionOutput).ToOSDiskImageEncryptionPtrOutputWithContext(ctx)
}

// OSDiskImageEncryptionPtrInput is an input type that accepts OSDiskImageEncryptionArgs, OSDiskImageEncryptionPtr and OSDiskImageEncryptionPtrOutput values.
// You can construct a concrete instance of `OSDiskImageEncryptionPtrInput` via:
//
//	        OSDiskImageEncryptionArgs{...}
//
//	or:
//
//	        nil
type OSDiskImageEncryptionPtrInput interface {
	pulumi.Input

	ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput
	ToOSDiskImageEncryptionPtrOutputWithContext(context.Context) OSDiskImageEncryptionPtrOutput
}

type osdiskImageEncryptionPtrType OSDiskImageEncryptionArgs

func OSDiskImageEncryptionPtr(v *OSDiskImageEncryptionArgs) OSDiskImageEncryptionPtrInput {
	return (*osdiskImageEncryptionPtrType)(v)
}

func (*osdiskImageEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageEncryption)(nil)).Elem()
}

func (i *osdiskImageEncryptionPtrType) ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput {
	return i.ToOSDiskImageEncryptionPtrOutputWithContext(context.Background())
}

func (i *osdiskImageEncryptionPtrType) ToOSDiskImageEncryptionPtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageEncryptionPtrOutput)
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionOutput struct{ *pulumi.OutputState }

func (OSDiskImageEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageEncryption)(nil)).Elem()
}

func (o OSDiskImageEncryptionOutput) ToOSDiskImageEncryptionOutput() OSDiskImageEncryptionOutput {
	return o
}

func (o OSDiskImageEncryptionOutput) ToOSDiskImageEncryptionOutputWithContext(ctx context.Context) OSDiskImageEncryptionOutput {
	return o
}

func (o OSDiskImageEncryptionOutput) ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput {
	return o.ToOSDiskImageEncryptionPtrOutputWithContext(context.Background())
}

func (o OSDiskImageEncryptionOutput) ToOSDiskImageEncryptionPtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSDiskImageEncryption) *OSDiskImageEncryption {
		return &v
	}).(OSDiskImageEncryptionPtrOutput)
}

// A relative URI containing the resource ID of the disk encryption set.
func (o OSDiskImageEncryptionOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageEncryption) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// This property specifies the security profile of an OS disk image.
func (o OSDiskImageEncryptionOutput) SecurityProfile() OSDiskImageSecurityProfilePtrOutput {
	return o.ApplyT(func(v OSDiskImageEncryption) *OSDiskImageSecurityProfile { return v.SecurityProfile }).(OSDiskImageSecurityProfilePtrOutput)
}

type OSDiskImageEncryptionPtrOutput struct{ *pulumi.OutputState }

func (OSDiskImageEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageEncryption)(nil)).Elem()
}

func (o OSDiskImageEncryptionPtrOutput) ToOSDiskImageEncryptionPtrOutput() OSDiskImageEncryptionPtrOutput {
	return o
}

func (o OSDiskImageEncryptionPtrOutput) ToOSDiskImageEncryptionPtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionPtrOutput {
	return o
}

func (o OSDiskImageEncryptionPtrOutput) Elem() OSDiskImageEncryptionOutput {
	return o.ApplyT(func(v *OSDiskImageEncryption) OSDiskImageEncryption {
		if v != nil {
			return *v
		}
		var ret OSDiskImageEncryption
		return ret
	}).(OSDiskImageEncryptionOutput)
}

// A relative URI containing the resource ID of the disk encryption set.
func (o OSDiskImageEncryptionPtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageEncryption) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// This property specifies the security profile of an OS disk image.
func (o OSDiskImageEncryptionPtrOutput) SecurityProfile() OSDiskImageSecurityProfilePtrOutput {
	return o.ApplyT(func(v *OSDiskImageEncryption) *OSDiskImageSecurityProfile {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(OSDiskImageSecurityProfilePtrOutput)
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionResponse struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetId *string `pulumi:"diskEncryptionSetId"`
	// This property specifies the security profile of an OS disk image.
	SecurityProfile *OSDiskImageSecurityProfileResponse `pulumi:"securityProfile"`
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryptionResponseOutput struct{ *pulumi.OutputState }

func (OSDiskImageEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageEncryptionResponse)(nil)).Elem()
}

func (o OSDiskImageEncryptionResponseOutput) ToOSDiskImageEncryptionResponseOutput() OSDiskImageEncryptionResponseOutput {
	return o
}

func (o OSDiskImageEncryptionResponseOutput) ToOSDiskImageEncryptionResponseOutputWithContext(ctx context.Context) OSDiskImageEncryptionResponseOutput {
	return o
}

// A relative URI containing the resource ID of the disk encryption set.
func (o OSDiskImageEncryptionResponseOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageEncryptionResponse) *string { return v.DiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

// This property specifies the security profile of an OS disk image.
func (o OSDiskImageEncryptionResponseOutput) SecurityProfile() OSDiskImageSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v OSDiskImageEncryptionResponse) *OSDiskImageSecurityProfileResponse { return v.SecurityProfile }).(OSDiskImageSecurityProfileResponsePtrOutput)
}

type OSDiskImageEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (OSDiskImageEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageEncryptionResponse)(nil)).Elem()
}

func (o OSDiskImageEncryptionResponsePtrOutput) ToOSDiskImageEncryptionResponsePtrOutput() OSDiskImageEncryptionResponsePtrOutput {
	return o
}

func (o OSDiskImageEncryptionResponsePtrOutput) ToOSDiskImageEncryptionResponsePtrOutputWithContext(ctx context.Context) OSDiskImageEncryptionResponsePtrOutput {
	return o
}

func (o OSDiskImageEncryptionResponsePtrOutput) Elem() OSDiskImageEncryptionResponseOutput {
	return o.ApplyT(func(v *OSDiskImageEncryptionResponse) OSDiskImageEncryptionResponse {
		if v != nil {
			return *v
		}
		var ret OSDiskImageEncryptionResponse
		return ret
	}).(OSDiskImageEncryptionResponseOutput)
}

// A relative URI containing the resource ID of the disk encryption set.
func (o OSDiskImageEncryptionResponsePtrOutput) DiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// This property specifies the security profile of an OS disk image.
func (o OSDiskImageEncryptionResponsePtrOutput) SecurityProfile() OSDiskImageSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskImageEncryptionResponse) *OSDiskImageSecurityProfileResponse {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(OSDiskImageSecurityProfileResponsePtrOutput)
}

// Contains security profile for an OS disk image.
type OSDiskImageSecurityProfile struct {
	// confidential VM encryption types
	ConfidentialVMEncryptionType *string `pulumi:"confidentialVMEncryptionType"`
	// secure VM disk encryption set id
	SecureVMDiskEncryptionSetId *string `pulumi:"secureVMDiskEncryptionSetId"`
}

// OSDiskImageSecurityProfileInput is an input type that accepts OSDiskImageSecurityProfileArgs and OSDiskImageSecurityProfileOutput values.
// You can construct a concrete instance of `OSDiskImageSecurityProfileInput` via:
//
//	OSDiskImageSecurityProfileArgs{...}
type OSDiskImageSecurityProfileInput interface {
	pulumi.Input

	ToOSDiskImageSecurityProfileOutput() OSDiskImageSecurityProfileOutput
	ToOSDiskImageSecurityProfileOutputWithContext(context.Context) OSDiskImageSecurityProfileOutput
}

// Contains security profile for an OS disk image.
type OSDiskImageSecurityProfileArgs struct {
	// confidential VM encryption types
	ConfidentialVMEncryptionType pulumi.StringPtrInput `pulumi:"confidentialVMEncryptionType"`
	// secure VM disk encryption set id
	SecureVMDiskEncryptionSetId pulumi.StringPtrInput `pulumi:"secureVMDiskEncryptionSetId"`
}

func (OSDiskImageSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageSecurityProfile)(nil)).Elem()
}

func (i OSDiskImageSecurityProfileArgs) ToOSDiskImageSecurityProfileOutput() OSDiskImageSecurityProfileOutput {
	return i.ToOSDiskImageSecurityProfileOutputWithContext(context.Background())
}

func (i OSDiskImageSecurityProfileArgs) ToOSDiskImageSecurityProfileOutputWithContext(ctx context.Context) OSDiskImageSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageSecurityProfileOutput)
}

func (i OSDiskImageSecurityProfileArgs) ToOSDiskImageSecurityProfilePtrOutput() OSDiskImageSecurityProfilePtrOutput {
	return i.ToOSDiskImageSecurityProfilePtrOutputWithContext(context.Background())
}

func (i OSDiskImageSecurityProfileArgs) ToOSDiskImageSecurityProfilePtrOutputWithContext(ctx context.Context) OSDiskImageSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageSecurityProfileOutput).ToOSDiskImageSecurityProfilePtrOutputWithContext(ctx)
}

// OSDiskImageSecurityProfilePtrInput is an input type that accepts OSDiskImageSecurityProfileArgs, OSDiskImageSecurityProfilePtr and OSDiskImageSecurityProfilePtrOutput values.
// You can construct a concrete instance of `OSDiskImageSecurityProfilePtrInput` via:
//
//	        OSDiskImageSecurityProfileArgs{...}
//
//	or:
//
//	        nil
type OSDiskImageSecurityProfilePtrInput interface {
	pulumi.Input

	ToOSDiskImageSecurityProfilePtrOutput() OSDiskImageSecurityProfilePtrOutput
	ToOSDiskImageSecurityProfilePtrOutputWithContext(context.Context) OSDiskImageSecurityProfilePtrOutput
}

type osdiskImageSecurityProfilePtrType OSDiskImageSecurityProfileArgs

func OSDiskImageSecurityProfilePtr(v *OSDiskImageSecurityProfileArgs) OSDiskImageSecurityProfilePtrInput {
	return (*osdiskImageSecurityProfilePtrType)(v)
}

func (*osdiskImageSecurityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageSecurityProfile)(nil)).Elem()
}

func (i *osdiskImageSecurityProfilePtrType) ToOSDiskImageSecurityProfilePtrOutput() OSDiskImageSecurityProfilePtrOutput {
	return i.ToOSDiskImageSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *osdiskImageSecurityProfilePtrType) ToOSDiskImageSecurityProfilePtrOutputWithContext(ctx context.Context) OSDiskImageSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSDiskImageSecurityProfilePtrOutput)
}

// Contains security profile for an OS disk image.
type OSDiskImageSecurityProfileOutput struct{ *pulumi.OutputState }

func (OSDiskImageSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageSecurityProfile)(nil)).Elem()
}

func (o OSDiskImageSecurityProfileOutput) ToOSDiskImageSecurityProfileOutput() OSDiskImageSecurityProfileOutput {
	return o
}

func (o OSDiskImageSecurityProfileOutput) ToOSDiskImageSecurityProfileOutputWithContext(ctx context.Context) OSDiskImageSecurityProfileOutput {
	return o
}

func (o OSDiskImageSecurityProfileOutput) ToOSDiskImageSecurityProfilePtrOutput() OSDiskImageSecurityProfilePtrOutput {
	return o.ToOSDiskImageSecurityProfilePtrOutputWithContext(context.Background())
}

func (o OSDiskImageSecurityProfileOutput) ToOSDiskImageSecurityProfilePtrOutputWithContext(ctx context.Context) OSDiskImageSecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSDiskImageSecurityProfile) *OSDiskImageSecurityProfile {
		return &v
	}).(OSDiskImageSecurityProfilePtrOutput)
}

// confidential VM encryption types
func (o OSDiskImageSecurityProfileOutput) ConfidentialVMEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageSecurityProfile) *string { return v.ConfidentialVMEncryptionType }).(pulumi.StringPtrOutput)
}

// secure VM disk encryption set id
func (o OSDiskImageSecurityProfileOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageSecurityProfile) *string { return v.SecureVMDiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

type OSDiskImageSecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (OSDiskImageSecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageSecurityProfile)(nil)).Elem()
}

func (o OSDiskImageSecurityProfilePtrOutput) ToOSDiskImageSecurityProfilePtrOutput() OSDiskImageSecurityProfilePtrOutput {
	return o
}

func (o OSDiskImageSecurityProfilePtrOutput) ToOSDiskImageSecurityProfilePtrOutputWithContext(ctx context.Context) OSDiskImageSecurityProfilePtrOutput {
	return o
}

func (o OSDiskImageSecurityProfilePtrOutput) Elem() OSDiskImageSecurityProfileOutput {
	return o.ApplyT(func(v *OSDiskImageSecurityProfile) OSDiskImageSecurityProfile {
		if v != nil {
			return *v
		}
		var ret OSDiskImageSecurityProfile
		return ret
	}).(OSDiskImageSecurityProfileOutput)
}

// confidential VM encryption types
func (o OSDiskImageSecurityProfilePtrOutput) ConfidentialVMEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageSecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.ConfidentialVMEncryptionType
	}).(pulumi.StringPtrOutput)
}

// secure VM disk encryption set id
func (o OSDiskImageSecurityProfilePtrOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageSecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecureVMDiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// Contains security profile for an OS disk image.
type OSDiskImageSecurityProfileResponse struct {
	// confidential VM encryption types
	ConfidentialVMEncryptionType *string `pulumi:"confidentialVMEncryptionType"`
	// secure VM disk encryption set id
	SecureVMDiskEncryptionSetId *string `pulumi:"secureVMDiskEncryptionSetId"`
}

// Contains security profile for an OS disk image.
type OSDiskImageSecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (OSDiskImageSecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskImageSecurityProfileResponse)(nil)).Elem()
}

func (o OSDiskImageSecurityProfileResponseOutput) ToOSDiskImageSecurityProfileResponseOutput() OSDiskImageSecurityProfileResponseOutput {
	return o
}

func (o OSDiskImageSecurityProfileResponseOutput) ToOSDiskImageSecurityProfileResponseOutputWithContext(ctx context.Context) OSDiskImageSecurityProfileResponseOutput {
	return o
}

// confidential VM encryption types
func (o OSDiskImageSecurityProfileResponseOutput) ConfidentialVMEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageSecurityProfileResponse) *string { return v.ConfidentialVMEncryptionType }).(pulumi.StringPtrOutput)
}

// secure VM disk encryption set id
func (o OSDiskImageSecurityProfileResponseOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskImageSecurityProfileResponse) *string { return v.SecureVMDiskEncryptionSetId }).(pulumi.StringPtrOutput)
}

type OSDiskImageSecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OSDiskImageSecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskImageSecurityProfileResponse)(nil)).Elem()
}

func (o OSDiskImageSecurityProfileResponsePtrOutput) ToOSDiskImageSecurityProfileResponsePtrOutput() OSDiskImageSecurityProfileResponsePtrOutput {
	return o
}

func (o OSDiskImageSecurityProfileResponsePtrOutput) ToOSDiskImageSecurityProfileResponsePtrOutputWithContext(ctx context.Context) OSDiskImageSecurityProfileResponsePtrOutput {
	return o
}

func (o OSDiskImageSecurityProfileResponsePtrOutput) Elem() OSDiskImageSecurityProfileResponseOutput {
	return o.ApplyT(func(v *OSDiskImageSecurityProfileResponse) OSDiskImageSecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret OSDiskImageSecurityProfileResponse
		return ret
	}).(OSDiskImageSecurityProfileResponseOutput)
}

// confidential VM encryption types
func (o OSDiskImageSecurityProfileResponsePtrOutput) ConfidentialVMEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageSecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfidentialVMEncryptionType
	}).(pulumi.StringPtrOutput)
}

// secure VM disk encryption set id
func (o OSDiskImageSecurityProfileResponsePtrOutput) SecureVMDiskEncryptionSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskImageSecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecureVMDiskEncryptionSetId
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
type OSDiskResponse struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettingsResponse `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
	EncryptionSettings *DiskEncryptionSettingsResponse `pulumi:"encryptionSettings"`
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
	Image *VirtualHardDiskResponse `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *ManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
	OsType *string `pulumi:"osType"`
	// The virtual hard disk.
	Vhd *VirtualHardDiskResponse `pulumi:"vhd"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
type OSDiskResponseOutput struct{ *pulumi.OutputState }

func (OSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskResponse)(nil)).Elem()
}

func (o OSDiskResponseOutput) ToOSDiskResponseOutput() OSDiskResponseOutput {
	return o
}

func (o OSDiskResponseOutput) ToOSDiskResponseOutputWithContext(ctx context.Context) OSDiskResponseOutput {
	return o
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
func (o OSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
func (o OSDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v OSDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
func (o OSDiskResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
func (o OSDiskResponseOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *DiffDiskSettingsResponse { return v.DiffDiskSettings }).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o OSDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
func (o OSDiskResponseOutput) EncryptionSettings() DiskEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *DiskEncryptionSettingsResponse { return v.EncryptionSettings }).(DiskEncryptionSettingsResponsePtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o OSDiskResponseOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *VirtualHardDiskResponse { return v.Image }).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o OSDiskResponseOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *ManagedDiskParametersResponse { return v.ManagedDisk }).(ManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o OSDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o OSDiskResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The virtual hard disk.
func (o OSDiskResponseOutput) Vhd() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *VirtualHardDiskResponse { return v.Vhd }).(VirtualHardDiskResponsePtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o OSDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type OSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (OSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskResponse)(nil)).Elem()
}

func (o OSDiskResponsePtrOutput) ToOSDiskResponsePtrOutput() OSDiskResponsePtrOutput {
	return o
}

func (o OSDiskResponsePtrOutput) ToOSDiskResponsePtrOutputWithContext(ctx context.Context) OSDiskResponsePtrOutput {
	return o
}

func (o OSDiskResponsePtrOutput) Elem() OSDiskResponseOutput {
	return o.ApplyT(func(v *OSDiskResponse) OSDiskResponse {
		if v != nil {
			return *v
		}
		var ret OSDiskResponse
		return ret
	}).(OSDiskResponseOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**
func (o OSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machine disk should be created. Possible values are **Attach:** This value is used when you are using a specialized disk to create the virtual machine. **FromImage:** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you should also use the imageReference element described above. If you are using a marketplace image, you should also use the plan element previously described.
func (o OSDiskResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot change the delete option for an ephemeral OS Disk.
func (o OSDiskResponsePtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
func (o OSDiskResponsePtrOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *DiffDiskSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DiffDiskSettings
	}).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o OSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15.
func (o OSDiskResponsePtrOutput) EncryptionSettings() DiskEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *DiskEncryptionSettingsResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionSettings
	}).(DiskEncryptionSettingsResponsePtrOutput)
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
func (o OSDiskResponsePtrOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *VirtualHardDiskResponse {
		if v == nil {
			return nil
		}
		return v.Image
	}).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o OSDiskResponsePtrOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *ManagedDiskParametersResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(ManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o OSDiskResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o OSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The virtual hard disk.
func (o OSDiskResponsePtrOutput) Vhd() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *VirtualHardDiskResponse {
		if v == nil {
			return nil
		}
		return v.Vhd
	}).(VirtualHardDiskResponsePtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o OSDiskResponsePtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSDiskResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

type OSImageNotificationProfile struct {
	// Specifies whether the OS Image Scheduled event is enabled or disabled.
	Enable *bool `pulumi:"enable"`
	// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
	NotBeforeTimeout *string `pulumi:"notBeforeTimeout"`
}

// OSImageNotificationProfileInput is an input type that accepts OSImageNotificationProfileArgs and OSImageNotificationProfileOutput values.
// You can construct a concrete instance of `OSImageNotificationProfileInput` via:
//
//	OSImageNotificationProfileArgs{...}
type OSImageNotificationProfileInput interface {
	pulumi.Input

	ToOSImageNotificationProfileOutput() OSImageNotificationProfileOutput
	ToOSImageNotificationProfileOutputWithContext(context.Context) OSImageNotificationProfileOutput
}

type OSImageNotificationProfileArgs struct {
	// Specifies whether the OS Image Scheduled event is enabled or disabled.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
	NotBeforeTimeout pulumi.StringPtrInput `pulumi:"notBeforeTimeout"`
}

func (OSImageNotificationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSImageNotificationProfile)(nil)).Elem()
}

func (i OSImageNotificationProfileArgs) ToOSImageNotificationProfileOutput() OSImageNotificationProfileOutput {
	return i.ToOSImageNotificationProfileOutputWithContext(context.Background())
}

func (i OSImageNotificationProfileArgs) ToOSImageNotificationProfileOutputWithContext(ctx context.Context) OSImageNotificationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSImageNotificationProfileOutput)
}

func (i OSImageNotificationProfileArgs) ToOSImageNotificationProfilePtrOutput() OSImageNotificationProfilePtrOutput {
	return i.ToOSImageNotificationProfilePtrOutputWithContext(context.Background())
}

func (i OSImageNotificationProfileArgs) ToOSImageNotificationProfilePtrOutputWithContext(ctx context.Context) OSImageNotificationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSImageNotificationProfileOutput).ToOSImageNotificationProfilePtrOutputWithContext(ctx)
}

// OSImageNotificationProfilePtrInput is an input type that accepts OSImageNotificationProfileArgs, OSImageNotificationProfilePtr and OSImageNotificationProfilePtrOutput values.
// You can construct a concrete instance of `OSImageNotificationProfilePtrInput` via:
//
//	        OSImageNotificationProfileArgs{...}
//
//	or:
//
//	        nil
type OSImageNotificationProfilePtrInput interface {
	pulumi.Input

	ToOSImageNotificationProfilePtrOutput() OSImageNotificationProfilePtrOutput
	ToOSImageNotificationProfilePtrOutputWithContext(context.Context) OSImageNotificationProfilePtrOutput
}

type osimageNotificationProfilePtrType OSImageNotificationProfileArgs

func OSImageNotificationProfilePtr(v *OSImageNotificationProfileArgs) OSImageNotificationProfilePtrInput {
	return (*osimageNotificationProfilePtrType)(v)
}

func (*osimageNotificationProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSImageNotificationProfile)(nil)).Elem()
}

func (i *osimageNotificationProfilePtrType) ToOSImageNotificationProfilePtrOutput() OSImageNotificationProfilePtrOutput {
	return i.ToOSImageNotificationProfilePtrOutputWithContext(context.Background())
}

func (i *osimageNotificationProfilePtrType) ToOSImageNotificationProfilePtrOutputWithContext(ctx context.Context) OSImageNotificationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSImageNotificationProfilePtrOutput)
}

type OSImageNotificationProfileOutput struct{ *pulumi.OutputState }

func (OSImageNotificationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSImageNotificationProfile)(nil)).Elem()
}

func (o OSImageNotificationProfileOutput) ToOSImageNotificationProfileOutput() OSImageNotificationProfileOutput {
	return o
}

func (o OSImageNotificationProfileOutput) ToOSImageNotificationProfileOutputWithContext(ctx context.Context) OSImageNotificationProfileOutput {
	return o
}

func (o OSImageNotificationProfileOutput) ToOSImageNotificationProfilePtrOutput() OSImageNotificationProfilePtrOutput {
	return o.ToOSImageNotificationProfilePtrOutputWithContext(context.Background())
}

func (o OSImageNotificationProfileOutput) ToOSImageNotificationProfilePtrOutputWithContext(ctx context.Context) OSImageNotificationProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSImageNotificationProfile) *OSImageNotificationProfile {
		return &v
	}).(OSImageNotificationProfilePtrOutput)
}

// Specifies whether the OS Image Scheduled event is enabled or disabled.
func (o OSImageNotificationProfileOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSImageNotificationProfile) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
func (o OSImageNotificationProfileOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSImageNotificationProfile) *string { return v.NotBeforeTimeout }).(pulumi.StringPtrOutput)
}

type OSImageNotificationProfilePtrOutput struct{ *pulumi.OutputState }

func (OSImageNotificationProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSImageNotificationProfile)(nil)).Elem()
}

func (o OSImageNotificationProfilePtrOutput) ToOSImageNotificationProfilePtrOutput() OSImageNotificationProfilePtrOutput {
	return o
}

func (o OSImageNotificationProfilePtrOutput) ToOSImageNotificationProfilePtrOutputWithContext(ctx context.Context) OSImageNotificationProfilePtrOutput {
	return o
}

func (o OSImageNotificationProfilePtrOutput) Elem() OSImageNotificationProfileOutput {
	return o.ApplyT(func(v *OSImageNotificationProfile) OSImageNotificationProfile {
		if v != nil {
			return *v
		}
		var ret OSImageNotificationProfile
		return ret
	}).(OSImageNotificationProfileOutput)
}

// Specifies whether the OS Image Scheduled event is enabled or disabled.
func (o OSImageNotificationProfilePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSImageNotificationProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
func (o OSImageNotificationProfilePtrOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSImageNotificationProfile) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeTimeout
	}).(pulumi.StringPtrOutput)
}

type OSImageNotificationProfileResponse struct {
	// Specifies whether the OS Image Scheduled event is enabled or disabled.
	Enable *bool `pulumi:"enable"`
	// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
	NotBeforeTimeout *string `pulumi:"notBeforeTimeout"`
}

type OSImageNotificationProfileResponseOutput struct{ *pulumi.OutputState }

func (OSImageNotificationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSImageNotificationProfileResponse)(nil)).Elem()
}

func (o OSImageNotificationProfileResponseOutput) ToOSImageNotificationProfileResponseOutput() OSImageNotificationProfileResponseOutput {
	return o
}

func (o OSImageNotificationProfileResponseOutput) ToOSImageNotificationProfileResponseOutputWithContext(ctx context.Context) OSImageNotificationProfileResponseOutput {
	return o
}

// Specifies whether the OS Image Scheduled event is enabled or disabled.
func (o OSImageNotificationProfileResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSImageNotificationProfileResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
func (o OSImageNotificationProfileResponseOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSImageNotificationProfileResponse) *string { return v.NotBeforeTimeout }).(pulumi.StringPtrOutput)
}

type OSImageNotificationProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OSImageNotificationProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSImageNotificationProfileResponse)(nil)).Elem()
}

func (o OSImageNotificationProfileResponsePtrOutput) ToOSImageNotificationProfileResponsePtrOutput() OSImageNotificationProfileResponsePtrOutput {
	return o
}

func (o OSImageNotificationProfileResponsePtrOutput) ToOSImageNotificationProfileResponsePtrOutputWithContext(ctx context.Context) OSImageNotificationProfileResponsePtrOutput {
	return o
}

func (o OSImageNotificationProfileResponsePtrOutput) Elem() OSImageNotificationProfileResponseOutput {
	return o.ApplyT(func(v *OSImageNotificationProfileResponse) OSImageNotificationProfileResponse {
		if v != nil {
			return *v
		}
		var ret OSImageNotificationProfileResponse
		return ret
	}).(OSImageNotificationProfileResponseOutput)
}

// Specifies whether the OS Image Scheduled event is enabled or disabled.
func (o OSImageNotificationProfileResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSImageNotificationProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Length of time a Virtual Machine being reimaged or having its OS upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto approved (timed out). The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)
func (o OSImageNotificationProfileResponsePtrOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSImageNotificationProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
	ComputerName *string `pulumi:"computerName"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
	LinuxConfiguration *LinuxConfiguration `pulumi:"linuxConfiguration"`
	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal *bool `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	Secrets []VaultSecretGroup `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration `pulumi:"windowsConfiguration"`
}

// OSProfileInput is an input type that accepts OSProfileArgs and OSProfileOutput values.
// You can construct a concrete instance of `OSProfileInput` via:
//
//	OSProfileArgs{...}
type OSProfileInput interface {
	pulumi.Input

	ToOSProfileOutput() OSProfileOutput
	ToOSProfileOutputWithContext(context.Context) OSProfileOutput
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations pulumi.BoolPtrInput `pulumi:"allowExtensionOperations"`
	// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
	ComputerName pulumi.StringPtrInput `pulumi:"computerName"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
	CustomData pulumi.StringPtrInput `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
	LinuxConfiguration LinuxConfigurationPtrInput `pulumi:"linuxConfiguration"`
	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal pulumi.BoolPtrInput `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	Secrets VaultSecretGroupArrayInput `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration WindowsConfigurationPtrInput `pulumi:"windowsConfiguration"`
}

func (OSProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfile)(nil)).Elem()
}

func (i OSProfileArgs) ToOSProfileOutput() OSProfileOutput {
	return i.ToOSProfileOutputWithContext(context.Background())
}

func (i OSProfileArgs) ToOSProfileOutputWithContext(ctx context.Context) OSProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfileOutput)
}

func (i OSProfileArgs) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return i.ToOSProfilePtrOutputWithContext(context.Background())
}

func (i OSProfileArgs) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfileOutput).ToOSProfilePtrOutputWithContext(ctx)
}

// OSProfilePtrInput is an input type that accepts OSProfileArgs, OSProfilePtr and OSProfilePtrOutput values.
// You can construct a concrete instance of `OSProfilePtrInput` via:
//
//	        OSProfileArgs{...}
//
//	or:
//
//	        nil
type OSProfilePtrInput interface {
	pulumi.Input

	ToOSProfilePtrOutput() OSProfilePtrOutput
	ToOSProfilePtrOutputWithContext(context.Context) OSProfilePtrOutput
}

type osprofilePtrType OSProfileArgs

func OSProfilePtr(v *OSProfileArgs) OSProfilePtrInput {
	return (*osprofilePtrType)(v)
}

func (*osprofilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfile)(nil)).Elem()
}

func (i *osprofilePtrType) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return i.ToOSProfilePtrOutputWithContext(context.Background())
}

func (i *osprofilePtrType) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfilePtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileOutput struct{ *pulumi.OutputState }

func (OSProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfile)(nil)).Elem()
}

func (o OSProfileOutput) ToOSProfileOutput() OSProfileOutput {
	return o
}

func (o OSProfileOutput) ToOSProfileOutputWithContext(ctx context.Context) OSProfileOutput {
	return o
}

func (o OSProfileOutput) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return o.ToOSProfilePtrOutputWithContext(context.Background())
}

func (o OSProfileOutput) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSProfile) *OSProfile {
		return &v
	}).(OSProfilePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfileOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfile) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfileOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfile) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
func (o OSProfileOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSProfile) *bool { return v.AllowExtensionOperations }).(pulumi.BoolPtrOutput)
}

// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
func (o OSProfileOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfile) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
func (o OSProfileOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfile) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o OSProfileOutput) LinuxConfiguration() LinuxConfigurationPtrOutput {
	return o.ApplyT(func(v OSProfile) *LinuxConfiguration { return v.LinuxConfiguration }).(LinuxConfigurationPtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o OSProfileOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSProfile) *bool { return v.RequireGuestProvisionSignal }).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o OSProfileOutput) Secrets() VaultSecretGroupArrayOutput {
	return o.ApplyT(func(v OSProfile) []VaultSecretGroup { return v.Secrets }).(VaultSecretGroupArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileOutput) WindowsConfiguration() WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v OSProfile) *WindowsConfiguration { return v.WindowsConfiguration }).(WindowsConfigurationPtrOutput)
}

type OSProfilePtrOutput struct{ *pulumi.OutputState }

func (OSProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfile)(nil)).Elem()
}

func (o OSProfilePtrOutput) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return o
}

func (o OSProfilePtrOutput) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return o
}

func (o OSProfilePtrOutput) Elem() OSProfileOutput {
	return o.ApplyT(func(v *OSProfile) OSProfile {
		if v != nil {
			return *v
		}
		var ret OSProfile
		return ret
	}).(OSProfileOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfilePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
func (o OSProfilePtrOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowExtensionOperations
	}).(pulumi.BoolPtrOutput)
}

// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
func (o OSProfilePtrOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfile) *string {
		if v == nil {
			return nil
		}
		return v.ComputerName
	}).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
func (o OSProfilePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfile) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o OSProfilePtrOutput) LinuxConfiguration() LinuxConfigurationPtrOutput {
	return o.ApplyT(func(v *OSProfile) *LinuxConfiguration {
		if v == nil {
			return nil
		}
		return v.LinuxConfiguration
	}).(LinuxConfigurationPtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o OSProfilePtrOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSProfile) *bool {
		if v == nil {
			return nil
		}
		return v.RequireGuestProvisionSignal
	}).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o OSProfilePtrOutput) Secrets() VaultSecretGroupArrayOutput {
	return o.ApplyT(func(v *OSProfile) []VaultSecretGroup {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(VaultSecretGroupArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfilePtrOutput) WindowsConfiguration() WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v *OSProfile) *WindowsConfiguration {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationPtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
	ComputerName *string `pulumi:"computerName"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
	LinuxConfiguration *LinuxConfigurationResponse `pulumi:"linuxConfiguration"`
	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal *bool `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	Secrets []VaultSecretGroupResponse `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfigurationResponse `pulumi:"windowsConfiguration"`
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponseOutput struct{ *pulumi.OutputState }

func (OSProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfileResponse)(nil)).Elem()
}

func (o OSProfileResponseOutput) ToOSProfileResponseOutput() OSProfileResponseOutput {
	return o
}

func (o OSProfileResponseOutput) ToOSProfileResponseOutputWithContext(ctx context.Context) OSProfileResponseOutput {
	return o
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfileResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
func (o OSProfileResponseOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *bool { return v.AllowExtensionOperations }).(pulumi.BoolPtrOutput)
}

// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
func (o OSProfileResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
func (o OSProfileResponseOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o OSProfileResponseOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *LinuxConfigurationResponse { return v.LinuxConfiguration }).(LinuxConfigurationResponsePtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o OSProfileResponseOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *bool { return v.RequireGuestProvisionSignal }).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o OSProfileResponseOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v OSProfileResponse) []VaultSecretGroupResponse { return v.Secrets }).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileResponseOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *WindowsConfigurationResponse { return v.WindowsConfiguration }).(WindowsConfigurationResponsePtrOutput)
}

type OSProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OSProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfileResponse)(nil)).Elem()
}

func (o OSProfileResponsePtrOutput) ToOSProfileResponsePtrOutput() OSProfileResponsePtrOutput {
	return o
}

func (o OSProfileResponsePtrOutput) ToOSProfileResponsePtrOutputWithContext(ctx context.Context) OSProfileResponsePtrOutput {
	return o
}

func (o OSProfileResponsePtrOutput) Elem() OSProfileResponseOutput {
	return o.ApplyT(func(v *OSProfileResponse) OSProfileResponse {
		if v != nil {
			return *v
		}
		var ret OSProfileResponse
		return ret
	}).(OSProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine.
func (o OSProfileResponsePtrOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowExtensionOperations
	}).(pulumi.BoolPtrOutput)
}

// Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).
func (o OSProfileResponsePtrOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputerName
	}).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.** This property cannot be updated after the VM is created. The property 'customData' is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/). For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init).
func (o OSProfileResponsePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o OSProfileResponsePtrOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *LinuxConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LinuxConfiguration
	}).(LinuxConfigurationResponsePtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o OSProfileResponsePtrOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireGuestProvisionSignal
	}).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o OSProfileResponsePtrOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v *OSProfileResponse) []VaultSecretGroupResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileResponsePtrOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *WindowsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

// Specifies settings related to VM Guest Patching on Windows.
type PatchSettings struct {
	// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode *string `pulumi:"assessmentMode"`
	// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
	AutomaticByPlatformSettings *WindowsVMGuestPatchAutomaticByPlatformSettings `pulumi:"automaticByPlatformSettings"`
	// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool `pulumi:"enableHotpatching"`
	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *string `pulumi:"patchMode"`
}

// PatchSettingsInput is an input type that accepts PatchSettingsArgs and PatchSettingsOutput values.
// You can construct a concrete instance of `PatchSettingsInput` via:
//
//	PatchSettingsArgs{...}
type PatchSettingsInput interface {
	pulumi.Input

	ToPatchSettingsOutput() PatchSettingsOutput
	ToPatchSettingsOutputWithContext(context.Context) PatchSettingsOutput
}

// Specifies settings related to VM Guest Patching on Windows.
type PatchSettingsArgs struct {
	// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode pulumi.StringPtrInput `pulumi:"assessmentMode"`
	// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
	AutomaticByPlatformSettings WindowsVMGuestPatchAutomaticByPlatformSettingsPtrInput `pulumi:"automaticByPlatformSettings"`
	// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching pulumi.BoolPtrInput `pulumi:"enableHotpatching"`
	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode pulumi.StringPtrInput `pulumi:"patchMode"`
}

func (PatchSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchSettings)(nil)).Elem()
}

func (i PatchSettingsArgs) ToPatchSettingsOutput() PatchSettingsOutput {
	return i.ToPatchSettingsOutputWithContext(context.Background())
}

func (i PatchSettingsArgs) ToPatchSettingsOutputWithContext(ctx context.Context) PatchSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchSettingsOutput)
}

func (i PatchSettingsArgs) ToPatchSettingsPtrOutput() PatchSettingsPtrOutput {
	return i.ToPatchSettingsPtrOutputWithContext(context.Background())
}

func (i PatchSettingsArgs) ToPatchSettingsPtrOutputWithContext(ctx context.Context) PatchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchSettingsOutput).ToPatchSettingsPtrOutputWithContext(ctx)
}

// PatchSettingsPtrInput is an input type that accepts PatchSettingsArgs, PatchSettingsPtr and PatchSettingsPtrOutput values.
// You can construct a concrete instance of `PatchSettingsPtrInput` via:
//
//	        PatchSettingsArgs{...}
//
//	or:
//
//	        nil
type PatchSettingsPtrInput interface {
	pulumi.Input

	ToPatchSettingsPtrOutput() PatchSettingsPtrOutput
	ToPatchSettingsPtrOutputWithContext(context.Context) PatchSettingsPtrOutput
}

type patchSettingsPtrType PatchSettingsArgs

func PatchSettingsPtr(v *PatchSettingsArgs) PatchSettingsPtrInput {
	return (*patchSettingsPtrType)(v)
}

func (*patchSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchSettings)(nil)).Elem()
}

func (i *patchSettingsPtrType) ToPatchSettingsPtrOutput() PatchSettingsPtrOutput {
	return i.ToPatchSettingsPtrOutputWithContext(context.Background())
}

func (i *patchSettingsPtrType) ToPatchSettingsPtrOutputWithContext(ctx context.Context) PatchSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchSettingsPtrOutput)
}

// Specifies settings related to VM Guest Patching on Windows.
type PatchSettingsOutput struct{ *pulumi.OutputState }

func (PatchSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchSettings)(nil)).Elem()
}

func (o PatchSettingsOutput) ToPatchSettingsOutput() PatchSettingsOutput {
	return o
}

func (o PatchSettingsOutput) ToPatchSettingsOutputWithContext(ctx context.Context) PatchSettingsOutput {
	return o
}

func (o PatchSettingsOutput) ToPatchSettingsPtrOutput() PatchSettingsPtrOutput {
	return o.ToPatchSettingsPtrOutputWithContext(context.Background())
}

func (o PatchSettingsOutput) ToPatchSettingsPtrOutputWithContext(ctx context.Context) PatchSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchSettings) *PatchSettings {
		return &v
	}).(PatchSettingsPtrOutput)
}

// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o PatchSettingsOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchSettings) *string { return v.AssessmentMode }).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
func (o PatchSettingsOutput) AutomaticByPlatformSettings() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ApplyT(func(v PatchSettings) *WindowsVMGuestPatchAutomaticByPlatformSettings {
		return v.AutomaticByPlatformSettings
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
func (o PatchSettingsOutput) EnableHotpatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PatchSettings) *bool { return v.EnableHotpatching }).(pulumi.BoolPtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
func (o PatchSettingsOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchSettings) *string { return v.PatchMode }).(pulumi.StringPtrOutput)
}

type PatchSettingsPtrOutput struct{ *pulumi.OutputState }

func (PatchSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchSettings)(nil)).Elem()
}

func (o PatchSettingsPtrOutput) ToPatchSettingsPtrOutput() PatchSettingsPtrOutput {
	return o
}

func (o PatchSettingsPtrOutput) ToPatchSettingsPtrOutputWithContext(ctx context.Context) PatchSettingsPtrOutput {
	return o
}

func (o PatchSettingsPtrOutput) Elem() PatchSettingsOutput {
	return o.ApplyT(func(v *PatchSettings) PatchSettings {
		if v != nil {
			return *v
		}
		var ret PatchSettings
		return ret
	}).(PatchSettingsOutput)
}

// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o PatchSettingsPtrOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssessmentMode
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
func (o PatchSettingsPtrOutput) AutomaticByPlatformSettings() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ApplyT(func(v *PatchSettings) *WindowsVMGuestPatchAutomaticByPlatformSettings {
		if v == nil {
			return nil
		}
		return v.AutomaticByPlatformSettings
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
func (o PatchSettingsPtrOutput) EnableHotpatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHotpatching
	}).(pulumi.BoolPtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
func (o PatchSettingsPtrOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchSettings) *string {
		if v == nil {
			return nil
		}
		return v.PatchMode
	}).(pulumi.StringPtrOutput)
}

// Specifies settings related to VM Guest Patching on Windows.
type PatchSettingsResponse struct {
	// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode *string `pulumi:"assessmentMode"`
	// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
	AutomaticByPlatformSettings *WindowsVMGuestPatchAutomaticByPlatformSettingsResponse `pulumi:"automaticByPlatformSettings"`
	// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool `pulumi:"enableHotpatching"`
	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *string `pulumi:"patchMode"`
}

// Specifies settings related to VM Guest Patching on Windows.
type PatchSettingsResponseOutput struct{ *pulumi.OutputState }

func (PatchSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchSettingsResponse)(nil)).Elem()
}

func (o PatchSettingsResponseOutput) ToPatchSettingsResponseOutput() PatchSettingsResponseOutput {
	return o
}

func (o PatchSettingsResponseOutput) ToPatchSettingsResponseOutputWithContext(ctx context.Context) PatchSettingsResponseOutput {
	return o
}

// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o PatchSettingsResponseOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchSettingsResponse) *string { return v.AssessmentMode }).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
func (o PatchSettingsResponseOutput) AutomaticByPlatformSettings() WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o.ApplyT(func(v PatchSettingsResponse) *WindowsVMGuestPatchAutomaticByPlatformSettingsResponse {
		return v.AutomaticByPlatformSettings
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput)
}

// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
func (o PatchSettingsResponseOutput) EnableHotpatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PatchSettingsResponse) *bool { return v.EnableHotpatching }).(pulumi.BoolPtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
func (o PatchSettingsResponseOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatchSettingsResponse) *string { return v.PatchMode }).(pulumi.StringPtrOutput)
}

type PatchSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PatchSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchSettingsResponse)(nil)).Elem()
}

func (o PatchSettingsResponsePtrOutput) ToPatchSettingsResponsePtrOutput() PatchSettingsResponsePtrOutput {
	return o
}

func (o PatchSettingsResponsePtrOutput) ToPatchSettingsResponsePtrOutputWithContext(ctx context.Context) PatchSettingsResponsePtrOutput {
	return o
}

func (o PatchSettingsResponsePtrOutput) Elem() PatchSettingsResponseOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) PatchSettingsResponse {
		if v != nil {
			return *v
		}
		var ret PatchSettingsResponse
		return ret
	}).(PatchSettingsResponseOutput)
}

// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.<br /><br /> Possible values are:<br /><br /> **ImageDefault** - You control the timing of patch assessments on a virtual machine.<br /><br /> **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
func (o PatchSettingsResponsePtrOutput) AssessmentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssessmentMode
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows.
func (o PatchSettingsResponsePtrOutput) AutomaticByPlatformSettings() WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) *WindowsVMGuestPatchAutomaticByPlatformSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AutomaticByPlatformSettings
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput)
}

// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
func (o PatchSettingsResponsePtrOutput) EnableHotpatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHotpatching
	}).(pulumi.BoolPtrOutput)
}

// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false<br /><br /> **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. <br /><br /> **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true
func (o PatchSettingsResponsePtrOutput) PatchMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PatchSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PatchMode
	}).(pulumi.StringPtrOutput)
}

// Describes the user-defined constraints for virtual machine hardware placement.
type Placement struct {
	// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
	ExcludeZones []string `pulumi:"excludeZones"`
	// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
	IncludeZones []string `pulumi:"includeZones"`
	// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
	ZonePlacementPolicy *string `pulumi:"zonePlacementPolicy"`
}

// PlacementInput is an input type that accepts PlacementArgs and PlacementOutput values.
// You can construct a concrete instance of `PlacementInput` via:
//
//	PlacementArgs{...}
type PlacementInput interface {
	pulumi.Input

	ToPlacementOutput() PlacementOutput
	ToPlacementOutputWithContext(context.Context) PlacementOutput
}

// Describes the user-defined constraints for virtual machine hardware placement.
type PlacementArgs struct {
	// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
	ExcludeZones pulumi.StringArrayInput `pulumi:"excludeZones"`
	// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
	IncludeZones pulumi.StringArrayInput `pulumi:"includeZones"`
	// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
	ZonePlacementPolicy pulumi.StringPtrInput `pulumi:"zonePlacementPolicy"`
}

func (PlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Placement)(nil)).Elem()
}

func (i PlacementArgs) ToPlacementOutput() PlacementOutput {
	return i.ToPlacementOutputWithContext(context.Background())
}

func (i PlacementArgs) ToPlacementOutputWithContext(ctx context.Context) PlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementOutput)
}

func (i PlacementArgs) ToPlacementPtrOutput() PlacementPtrOutput {
	return i.ToPlacementPtrOutputWithContext(context.Background())
}

func (i PlacementArgs) ToPlacementPtrOutputWithContext(ctx context.Context) PlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementOutput).ToPlacementPtrOutputWithContext(ctx)
}

// PlacementPtrInput is an input type that accepts PlacementArgs, PlacementPtr and PlacementPtrOutput values.
// You can construct a concrete instance of `PlacementPtrInput` via:
//
//	        PlacementArgs{...}
//
//	or:
//
//	        nil
type PlacementPtrInput interface {
	pulumi.Input

	ToPlacementPtrOutput() PlacementPtrOutput
	ToPlacementPtrOutputWithContext(context.Context) PlacementPtrOutput
}

type placementPtrType PlacementArgs

func PlacementPtr(v *PlacementArgs) PlacementPtrInput {
	return (*placementPtrType)(v)
}

func (*placementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Placement)(nil)).Elem()
}

func (i *placementPtrType) ToPlacementPtrOutput() PlacementPtrOutput {
	return i.ToPlacementPtrOutputWithContext(context.Background())
}

func (i *placementPtrType) ToPlacementPtrOutputWithContext(ctx context.Context) PlacementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementPtrOutput)
}

// Describes the user-defined constraints for virtual machine hardware placement.
type PlacementOutput struct{ *pulumi.OutputState }

func (PlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Placement)(nil)).Elem()
}

func (o PlacementOutput) ToPlacementOutput() PlacementOutput {
	return o
}

func (o PlacementOutput) ToPlacementOutputWithContext(ctx context.Context) PlacementOutput {
	return o
}

func (o PlacementOutput) ToPlacementPtrOutput() PlacementPtrOutput {
	return o.ToPlacementPtrOutputWithContext(context.Background())
}

func (o PlacementOutput) ToPlacementPtrOutputWithContext(ctx context.Context) PlacementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Placement) *Placement {
		return &v
	}).(PlacementPtrOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementOutput) ExcludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Placement) []string { return v.ExcludeZones }).(pulumi.StringArrayOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementOutput) IncludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Placement) []string { return v.IncludeZones }).(pulumi.StringArrayOutput)
}

// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
func (o PlacementOutput) ZonePlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Placement) *string { return v.ZonePlacementPolicy }).(pulumi.StringPtrOutput)
}

type PlacementPtrOutput struct{ *pulumi.OutputState }

func (PlacementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Placement)(nil)).Elem()
}

func (o PlacementPtrOutput) ToPlacementPtrOutput() PlacementPtrOutput {
	return o
}

func (o PlacementPtrOutput) ToPlacementPtrOutputWithContext(ctx context.Context) PlacementPtrOutput {
	return o
}

func (o PlacementPtrOutput) Elem() PlacementOutput {
	return o.ApplyT(func(v *Placement) Placement {
		if v != nil {
			return *v
		}
		var ret Placement
		return ret
	}).(PlacementOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementPtrOutput) ExcludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Placement) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeZones
	}).(pulumi.StringArrayOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementPtrOutput) IncludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Placement) []string {
		if v == nil {
			return nil
		}
		return v.IncludeZones
	}).(pulumi.StringArrayOutput)
}

// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
func (o PlacementPtrOutput) ZonePlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Placement) *string {
		if v == nil {
			return nil
		}
		return v.ZonePlacementPolicy
	}).(pulumi.StringPtrOutput)
}

// Describes the user-defined constraints for virtual machine hardware placement.
type PlacementResponse struct {
	// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
	ExcludeZones []string `pulumi:"excludeZones"`
	// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
	IncludeZones []string `pulumi:"includeZones"`
	// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
	ZonePlacementPolicy *string `pulumi:"zonePlacementPolicy"`
}

// Describes the user-defined constraints for virtual machine hardware placement.
type PlacementResponseOutput struct{ *pulumi.OutputState }

func (PlacementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementResponse)(nil)).Elem()
}

func (o PlacementResponseOutput) ToPlacementResponseOutput() PlacementResponseOutput {
	return o
}

func (o PlacementResponseOutput) ToPlacementResponseOutputWithContext(ctx context.Context) PlacementResponseOutput {
	return o
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementResponseOutput) ExcludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlacementResponse) []string { return v.ExcludeZones }).(pulumi.StringArrayOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementResponseOutput) IncludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlacementResponse) []string { return v.IncludeZones }).(pulumi.StringArrayOutput)
}

// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
func (o PlacementResponseOutput) ZonePlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlacementResponse) *string { return v.ZonePlacementPolicy }).(pulumi.StringPtrOutput)
}

type PlacementResponsePtrOutput struct{ *pulumi.OutputState }

func (PlacementResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlacementResponse)(nil)).Elem()
}

func (o PlacementResponsePtrOutput) ToPlacementResponsePtrOutput() PlacementResponsePtrOutput {
	return o
}

func (o PlacementResponsePtrOutput) ToPlacementResponsePtrOutputWithContext(ctx context.Context) PlacementResponsePtrOutput {
	return o
}

func (o PlacementResponsePtrOutput) Elem() PlacementResponseOutput {
	return o.ApplyT(func(v *PlacementResponse) PlacementResponse {
		if v != nil {
			return *v
		}
		var ret PlacementResponse
		return ret
	}).(PlacementResponseOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must not be present in the list of availability zones passed with 'excludeZones'. If 'excludeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementResponsePtrOutput) ExcludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlacementResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeZones
	}).(pulumi.StringArrayOutput)
}

// This property supplements the 'zonePlacementPolicy' property. If 'zonePlacementPolicy' is set to 'Any', availability zone selected by the system must be present in the list of availability zones passed with 'includeZones'. If 'includeZones' is not provided, all availability zones in region will be considered for selection.
func (o PlacementResponsePtrOutput) IncludeZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PlacementResponse) []string {
		if v == nil {
			return nil
		}
		return v.IncludeZones
	}).(pulumi.StringArrayOutput)
}

// Specifies the policy for virtual machine's placement in availability zone. Possible values are: **Any** - An availability zone will be automatically picked by system as part of virtual machine creation.
func (o PlacementResponsePtrOutput) ZonePlacementPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlacementResponse) *string {
		if v == nil {
			return nil
		}
		return v.ZonePlacementPolicy
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type Plan struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//	PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanArgs struct {
	// The plan ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product pulumi.StringPtrInput `pulumi:"product"`
	// The promotion code.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//	        PlanArgs{...}
//
//	or:
//
//	        nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o.ToPlanPtrOutputWithContext(context.Background())
}

func (o PlanOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Plan) *Plan {
		return &v
	}).(PlanPtrOutput)
}

// The plan ID.
func (o PlanOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o PlanOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type PlanPtrOutput struct{ *pulumi.OutputState }

func (PlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanPtrOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) Elem() PlanOutput {
	return o.ApplyT(func(v *Plan) Plan {
		if v != nil {
			return *v
		}
		var ret Plan
		return ret
	}).(PlanOutput)
}

// The plan ID.
func (o PlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o PlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanResponse struct {
	// The plan ID.
	Name *string `pulumi:"name"`
	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `pulumi:"product"`
	// The promotion code.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher ID.
	Publisher *string `pulumi:"publisher"`
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

// The plan ID.
func (o PlanResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o PlanResponseOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Product }).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse {
		if v != nil {
			return *v
		}
		var ret PlanResponse
		return ret
	}).(PlanResponseOutput)
}

// The plan ID.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Product
	}).(pulumi.StringPtrOutput)
}

// The promotion code.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher ID.
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// This is the platform attribute of the image version.
type PlatformAttributeResponse struct {
	// This property specifies the name of the platformAttribute. It is read-only.
	Name string `pulumi:"name"`
	// This property specifies the value of the corresponding name property. It is read-only.
	Value string `pulumi:"value"`
}

// This is the platform attribute of the image version.
type PlatformAttributeResponseOutput struct{ *pulumi.OutputState }

func (PlatformAttributeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformAttributeResponse)(nil)).Elem()
}

func (o PlatformAttributeResponseOutput) ToPlatformAttributeResponseOutput() PlatformAttributeResponseOutput {
	return o
}

func (o PlatformAttributeResponseOutput) ToPlatformAttributeResponseOutputWithContext(ctx context.Context) PlatformAttributeResponseOutput {
	return o
}

// This property specifies the name of the platformAttribute. It is read-only.
func (o PlatformAttributeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformAttributeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// This property specifies the value of the corresponding name property. It is read-only.
func (o PlatformAttributeResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlatformAttributeResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PlatformAttributeResponseArrayOutput struct{ *pulumi.OutputState }

func (PlatformAttributeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformAttributeResponse)(nil)).Elem()
}

func (o PlatformAttributeResponseArrayOutput) ToPlatformAttributeResponseArrayOutput() PlatformAttributeResponseArrayOutput {
	return o
}

func (o PlatformAttributeResponseArrayOutput) ToPlatformAttributeResponseArrayOutputWithContext(ctx context.Context) PlatformAttributeResponseArrayOutput {
	return o
}

func (o PlatformAttributeResponseArrayOutput) Index(i pulumi.IntInput) PlatformAttributeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlatformAttributeResponse {
		return vs[0].([]PlatformAttributeResponse)[vs[1].(int)]
	}).(PlatformAttributeResponseOutput)
}

// A policy violation reported against a gallery artifact.
type PolicyViolationResponse struct {
	// Describes the nature of the policy violation.
	Category *string `pulumi:"category"`
	// Describes specific details about why this policy violation was reported.
	Details *string `pulumi:"details"`
}

// A policy violation reported against a gallery artifact.
type PolicyViolationResponseOutput struct{ *pulumi.OutputState }

func (PolicyViolationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyViolationResponse)(nil)).Elem()
}

func (o PolicyViolationResponseOutput) ToPolicyViolationResponseOutput() PolicyViolationResponseOutput {
	return o
}

func (o PolicyViolationResponseOutput) ToPolicyViolationResponseOutputWithContext(ctx context.Context) PolicyViolationResponseOutput {
	return o
}

// Describes the nature of the policy violation.
func (o PolicyViolationResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyViolationResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Describes specific details about why this policy violation was reported.
func (o PolicyViolationResponseOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyViolationResponse) *string { return v.Details }).(pulumi.StringPtrOutput)
}

type PolicyViolationResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyViolationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyViolationResponse)(nil)).Elem()
}

func (o PolicyViolationResponseArrayOutput) ToPolicyViolationResponseArrayOutput() PolicyViolationResponseArrayOutput {
	return o
}

func (o PolicyViolationResponseArrayOutput) ToPolicyViolationResponseArrayOutputWithContext(ctx context.Context) PolicyViolationResponseArrayOutput {
	return o
}

func (o PolicyViolationResponseArrayOutput) Index(i pulumi.IntInput) PolicyViolationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyViolationResponse {
		return vs[0].([]PolicyViolationResponse)[vs[1].(int)]
	}).(PolicyViolationResponseOutput)
}

// Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible orchestration mode. With this property the customer is able to specify the base number of regular priority VMs created as the VMSS flex instance scales out and the split between Spot and Regular priority VMs after this base target has been reached.
type PriorityMixPolicy struct {
	// The base number of regular priority VMs that will be created in this scale set as it scales out.
	BaseRegularPriorityCount *int `pulumi:"baseRegularPriorityCount"`
	// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
	RegularPriorityPercentageAboveBase *int `pulumi:"regularPriorityPercentageAboveBase"`
}

// PriorityMixPolicyInput is an input type that accepts PriorityMixPolicyArgs and PriorityMixPolicyOutput values.
// You can construct a concrete instance of `PriorityMixPolicyInput` via:
//
//	PriorityMixPolicyArgs{...}
type PriorityMixPolicyInput interface {
	pulumi.Input

	ToPriorityMixPolicyOutput() PriorityMixPolicyOutput
	ToPriorityMixPolicyOutputWithContext(context.Context) PriorityMixPolicyOutput
}

// Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible orchestration mode. With this property the customer is able to specify the base number of regular priority VMs created as the VMSS flex instance scales out and the split between Spot and Regular priority VMs after this base target has been reached.
type PriorityMixPolicyArgs struct {
	// The base number of regular priority VMs that will be created in this scale set as it scales out.
	BaseRegularPriorityCount pulumi.IntPtrInput `pulumi:"baseRegularPriorityCount"`
	// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
	RegularPriorityPercentageAboveBase pulumi.IntPtrInput `pulumi:"regularPriorityPercentageAboveBase"`
}

func (PriorityMixPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityMixPolicy)(nil)).Elem()
}

func (i PriorityMixPolicyArgs) ToPriorityMixPolicyOutput() PriorityMixPolicyOutput {
	return i.ToPriorityMixPolicyOutputWithContext(context.Background())
}

func (i PriorityMixPolicyArgs) ToPriorityMixPolicyOutputWithContext(ctx context.Context) PriorityMixPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityMixPolicyOutput)
}

func (i PriorityMixPolicyArgs) ToPriorityMixPolicyPtrOutput() PriorityMixPolicyPtrOutput {
	return i.ToPriorityMixPolicyPtrOutputWithContext(context.Background())
}

func (i PriorityMixPolicyArgs) ToPriorityMixPolicyPtrOutputWithContext(ctx context.Context) PriorityMixPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityMixPolicyOutput).ToPriorityMixPolicyPtrOutputWithContext(ctx)
}

// PriorityMixPolicyPtrInput is an input type that accepts PriorityMixPolicyArgs, PriorityMixPolicyPtr and PriorityMixPolicyPtrOutput values.
// You can construct a concrete instance of `PriorityMixPolicyPtrInput` via:
//
//	        PriorityMixPolicyArgs{...}
//
//	or:
//
//	        nil
type PriorityMixPolicyPtrInput interface {
	pulumi.Input

	ToPriorityMixPolicyPtrOutput() PriorityMixPolicyPtrOutput
	ToPriorityMixPolicyPtrOutputWithContext(context.Context) PriorityMixPolicyPtrOutput
}

type priorityMixPolicyPtrType PriorityMixPolicyArgs

func PriorityMixPolicyPtr(v *PriorityMixPolicyArgs) PriorityMixPolicyPtrInput {
	return (*priorityMixPolicyPtrType)(v)
}

func (*priorityMixPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityMixPolicy)(nil)).Elem()
}

func (i *priorityMixPolicyPtrType) ToPriorityMixPolicyPtrOutput() PriorityMixPolicyPtrOutput {
	return i.ToPriorityMixPolicyPtrOutputWithContext(context.Background())
}

func (i *priorityMixPolicyPtrType) ToPriorityMixPolicyPtrOutputWithContext(ctx context.Context) PriorityMixPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PriorityMixPolicyPtrOutput)
}

// Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible orchestration mode. With this property the customer is able to specify the base number of regular priority VMs created as the VMSS flex instance scales out and the split between Spot and Regular priority VMs after this base target has been reached.
type PriorityMixPolicyOutput struct{ *pulumi.OutputState }

func (PriorityMixPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityMixPolicy)(nil)).Elem()
}

func (o PriorityMixPolicyOutput) ToPriorityMixPolicyOutput() PriorityMixPolicyOutput {
	return o
}

func (o PriorityMixPolicyOutput) ToPriorityMixPolicyOutputWithContext(ctx context.Context) PriorityMixPolicyOutput {
	return o
}

func (o PriorityMixPolicyOutput) ToPriorityMixPolicyPtrOutput() PriorityMixPolicyPtrOutput {
	return o.ToPriorityMixPolicyPtrOutputWithContext(context.Background())
}

func (o PriorityMixPolicyOutput) ToPriorityMixPolicyPtrOutputWithContext(ctx context.Context) PriorityMixPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PriorityMixPolicy) *PriorityMixPolicy {
		return &v
	}).(PriorityMixPolicyPtrOutput)
}

// The base number of regular priority VMs that will be created in this scale set as it scales out.
func (o PriorityMixPolicyOutput) BaseRegularPriorityCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PriorityMixPolicy) *int { return v.BaseRegularPriorityCount }).(pulumi.IntPtrOutput)
}

// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
func (o PriorityMixPolicyOutput) RegularPriorityPercentageAboveBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PriorityMixPolicy) *int { return v.RegularPriorityPercentageAboveBase }).(pulumi.IntPtrOutput)
}

type PriorityMixPolicyPtrOutput struct{ *pulumi.OutputState }

func (PriorityMixPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityMixPolicy)(nil)).Elem()
}

func (o PriorityMixPolicyPtrOutput) ToPriorityMixPolicyPtrOutput() PriorityMixPolicyPtrOutput {
	return o
}

func (o PriorityMixPolicyPtrOutput) ToPriorityMixPolicyPtrOutputWithContext(ctx context.Context) PriorityMixPolicyPtrOutput {
	return o
}

func (o PriorityMixPolicyPtrOutput) Elem() PriorityMixPolicyOutput {
	return o.ApplyT(func(v *PriorityMixPolicy) PriorityMixPolicy {
		if v != nil {
			return *v
		}
		var ret PriorityMixPolicy
		return ret
	}).(PriorityMixPolicyOutput)
}

// The base number of regular priority VMs that will be created in this scale set as it scales out.
func (o PriorityMixPolicyPtrOutput) BaseRegularPriorityCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PriorityMixPolicy) *int {
		if v == nil {
			return nil
		}
		return v.BaseRegularPriorityCount
	}).(pulumi.IntPtrOutput)
}

// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
func (o PriorityMixPolicyPtrOutput) RegularPriorityPercentageAboveBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PriorityMixPolicy) *int {
		if v == nil {
			return nil
		}
		return v.RegularPriorityPercentageAboveBase
	}).(pulumi.IntPtrOutput)
}

// Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible orchestration mode. With this property the customer is able to specify the base number of regular priority VMs created as the VMSS flex instance scales out and the split between Spot and Regular priority VMs after this base target has been reached.
type PriorityMixPolicyResponse struct {
	// The base number of regular priority VMs that will be created in this scale set as it scales out.
	BaseRegularPriorityCount *int `pulumi:"baseRegularPriorityCount"`
	// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
	RegularPriorityPercentageAboveBase *int `pulumi:"regularPriorityPercentageAboveBase"`
}

// Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible orchestration mode. With this property the customer is able to specify the base number of regular priority VMs created as the VMSS flex instance scales out and the split between Spot and Regular priority VMs after this base target has been reached.
type PriorityMixPolicyResponseOutput struct{ *pulumi.OutputState }

func (PriorityMixPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PriorityMixPolicyResponse)(nil)).Elem()
}

func (o PriorityMixPolicyResponseOutput) ToPriorityMixPolicyResponseOutput() PriorityMixPolicyResponseOutput {
	return o
}

func (o PriorityMixPolicyResponseOutput) ToPriorityMixPolicyResponseOutputWithContext(ctx context.Context) PriorityMixPolicyResponseOutput {
	return o
}

// The base number of regular priority VMs that will be created in this scale set as it scales out.
func (o PriorityMixPolicyResponseOutput) BaseRegularPriorityCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PriorityMixPolicyResponse) *int { return v.BaseRegularPriorityCount }).(pulumi.IntPtrOutput)
}

// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
func (o PriorityMixPolicyResponseOutput) RegularPriorityPercentageAboveBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PriorityMixPolicyResponse) *int { return v.RegularPriorityPercentageAboveBase }).(pulumi.IntPtrOutput)
}

type PriorityMixPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PriorityMixPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PriorityMixPolicyResponse)(nil)).Elem()
}

func (o PriorityMixPolicyResponsePtrOutput) ToPriorityMixPolicyResponsePtrOutput() PriorityMixPolicyResponsePtrOutput {
	return o
}

func (o PriorityMixPolicyResponsePtrOutput) ToPriorityMixPolicyResponsePtrOutputWithContext(ctx context.Context) PriorityMixPolicyResponsePtrOutput {
	return o
}

func (o PriorityMixPolicyResponsePtrOutput) Elem() PriorityMixPolicyResponseOutput {
	return o.ApplyT(func(v *PriorityMixPolicyResponse) PriorityMixPolicyResponse {
		if v != nil {
			return *v
		}
		var ret PriorityMixPolicyResponse
		return ret
	}).(PriorityMixPolicyResponseOutput)
}

// The base number of regular priority VMs that will be created in this scale set as it scales out.
func (o PriorityMixPolicyResponsePtrOutput) BaseRegularPriorityCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PriorityMixPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.BaseRegularPriorityCount
	}).(pulumi.IntPtrOutput)
}

// The percentage of VM instances, after the base regular priority count has been reached, that are expected to use regular priority.
func (o PriorityMixPolicyResponsePtrOutput) RegularPriorityPercentageAboveBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PriorityMixPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.RegularPriorityPercentageAboveBase
	}).(pulumi.IntPtrOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponseOutput)
}

// A collection of information about the state of the connection between DiskAccess and Virtual Network.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Properties of the disk for which update is pending.
type PropertyUpdatesInProgressResponse struct {
	// The target performance tier of the disk if a tier change operation is in progress.
	TargetTier *string `pulumi:"targetTier"`
}

// Properties of the disk for which update is pending.
type PropertyUpdatesInProgressResponseOutput struct{ *pulumi.OutputState }

func (PropertyUpdatesInProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PropertyUpdatesInProgressResponse)(nil)).Elem()
}

func (o PropertyUpdatesInProgressResponseOutput) ToPropertyUpdatesInProgressResponseOutput() PropertyUpdatesInProgressResponseOutput {
	return o
}

func (o PropertyUpdatesInProgressResponseOutput) ToPropertyUpdatesInProgressResponseOutputWithContext(ctx context.Context) PropertyUpdatesInProgressResponseOutput {
	return o
}

// The target performance tier of the disk if a tier change operation is in progress.
func (o PropertyUpdatesInProgressResponseOutput) TargetTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PropertyUpdatesInProgressResponse) *string { return v.TargetTier }).(pulumi.StringPtrOutput)
}

// Specifies the user intent of the proximity placement group.
type ProximityPlacementGroupPropertiesIntent struct {
	// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
	VmSizes []string `pulumi:"vmSizes"`
}

// ProximityPlacementGroupPropertiesIntentInput is an input type that accepts ProximityPlacementGroupPropertiesIntentArgs and ProximityPlacementGroupPropertiesIntentOutput values.
// You can construct a concrete instance of `ProximityPlacementGroupPropertiesIntentInput` via:
//
//	ProximityPlacementGroupPropertiesIntentArgs{...}
type ProximityPlacementGroupPropertiesIntentInput interface {
	pulumi.Input

	ToProximityPlacementGroupPropertiesIntentOutput() ProximityPlacementGroupPropertiesIntentOutput
	ToProximityPlacementGroupPropertiesIntentOutputWithContext(context.Context) ProximityPlacementGroupPropertiesIntentOutput
}

// Specifies the user intent of the proximity placement group.
type ProximityPlacementGroupPropertiesIntentArgs struct {
	// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
	VmSizes pulumi.StringArrayInput `pulumi:"vmSizes"`
}

func (ProximityPlacementGroupPropertiesIntentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProximityPlacementGroupPropertiesIntent)(nil)).Elem()
}

func (i ProximityPlacementGroupPropertiesIntentArgs) ToProximityPlacementGroupPropertiesIntentOutput() ProximityPlacementGroupPropertiesIntentOutput {
	return i.ToProximityPlacementGroupPropertiesIntentOutputWithContext(context.Background())
}

func (i ProximityPlacementGroupPropertiesIntentArgs) ToProximityPlacementGroupPropertiesIntentOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProximityPlacementGroupPropertiesIntentOutput)
}

func (i ProximityPlacementGroupPropertiesIntentArgs) ToProximityPlacementGroupPropertiesIntentPtrOutput() ProximityPlacementGroupPropertiesIntentPtrOutput {
	return i.ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(context.Background())
}

func (i ProximityPlacementGroupPropertiesIntentArgs) ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProximityPlacementGroupPropertiesIntentOutput).ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(ctx)
}

// ProximityPlacementGroupPropertiesIntentPtrInput is an input type that accepts ProximityPlacementGroupPropertiesIntentArgs, ProximityPlacementGroupPropertiesIntentPtr and ProximityPlacementGroupPropertiesIntentPtrOutput values.
// You can construct a concrete instance of `ProximityPlacementGroupPropertiesIntentPtrInput` via:
//
//	        ProximityPlacementGroupPropertiesIntentArgs{...}
//
//	or:
//
//	        nil
type ProximityPlacementGroupPropertiesIntentPtrInput interface {
	pulumi.Input

	ToProximityPlacementGroupPropertiesIntentPtrOutput() ProximityPlacementGroupPropertiesIntentPtrOutput
	ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(context.Context) ProximityPlacementGroupPropertiesIntentPtrOutput
}

type proximityPlacementGroupPropertiesIntentPtrType ProximityPlacementGroupPropertiesIntentArgs

func ProximityPlacementGroupPropertiesIntentPtr(v *ProximityPlacementGroupPropertiesIntentArgs) ProximityPlacementGroupPropertiesIntentPtrInput {
	return (*proximityPlacementGroupPropertiesIntentPtrType)(v)
}

func (*proximityPlacementGroupPropertiesIntentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProximityPlacementGroupPropertiesIntent)(nil)).Elem()
}

func (i *proximityPlacementGroupPropertiesIntentPtrType) ToProximityPlacementGroupPropertiesIntentPtrOutput() ProximityPlacementGroupPropertiesIntentPtrOutput {
	return i.ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(context.Background())
}

func (i *proximityPlacementGroupPropertiesIntentPtrType) ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProximityPlacementGroupPropertiesIntentPtrOutput)
}

// Specifies the user intent of the proximity placement group.
type ProximityPlacementGroupPropertiesIntentOutput struct{ *pulumi.OutputState }

func (ProximityPlacementGroupPropertiesIntentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProximityPlacementGroupPropertiesIntent)(nil)).Elem()
}

func (o ProximityPlacementGroupPropertiesIntentOutput) ToProximityPlacementGroupPropertiesIntentOutput() ProximityPlacementGroupPropertiesIntentOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentOutput) ToProximityPlacementGroupPropertiesIntentOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentOutput) ToProximityPlacementGroupPropertiesIntentPtrOutput() ProximityPlacementGroupPropertiesIntentPtrOutput {
	return o.ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(context.Background())
}

func (o ProximityPlacementGroupPropertiesIntentOutput) ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProximityPlacementGroupPropertiesIntent) *ProximityPlacementGroupPropertiesIntent {
		return &v
	}).(ProximityPlacementGroupPropertiesIntentPtrOutput)
}

// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
func (o ProximityPlacementGroupPropertiesIntentOutput) VmSizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProximityPlacementGroupPropertiesIntent) []string { return v.VmSizes }).(pulumi.StringArrayOutput)
}

type ProximityPlacementGroupPropertiesIntentPtrOutput struct{ *pulumi.OutputState }

func (ProximityPlacementGroupPropertiesIntentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProximityPlacementGroupPropertiesIntent)(nil)).Elem()
}

func (o ProximityPlacementGroupPropertiesIntentPtrOutput) ToProximityPlacementGroupPropertiesIntentPtrOutput() ProximityPlacementGroupPropertiesIntentPtrOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentPtrOutput) ToProximityPlacementGroupPropertiesIntentPtrOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentPtrOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentPtrOutput) Elem() ProximityPlacementGroupPropertiesIntentOutput {
	return o.ApplyT(func(v *ProximityPlacementGroupPropertiesIntent) ProximityPlacementGroupPropertiesIntent {
		if v != nil {
			return *v
		}
		var ret ProximityPlacementGroupPropertiesIntent
		return ret
	}).(ProximityPlacementGroupPropertiesIntentOutput)
}

// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
func (o ProximityPlacementGroupPropertiesIntentPtrOutput) VmSizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProximityPlacementGroupPropertiesIntent) []string {
		if v == nil {
			return nil
		}
		return v.VmSizes
	}).(pulumi.StringArrayOutput)
}

// Specifies the user intent of the proximity placement group.
type ProximityPlacementGroupPropertiesIntentResponse struct {
	// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
	VmSizes []string `pulumi:"vmSizes"`
}

// Specifies the user intent of the proximity placement group.
type ProximityPlacementGroupPropertiesIntentResponseOutput struct{ *pulumi.OutputState }

func (ProximityPlacementGroupPropertiesIntentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProximityPlacementGroupPropertiesIntentResponse)(nil)).Elem()
}

func (o ProximityPlacementGroupPropertiesIntentResponseOutput) ToProximityPlacementGroupPropertiesIntentResponseOutput() ProximityPlacementGroupPropertiesIntentResponseOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentResponseOutput) ToProximityPlacementGroupPropertiesIntentResponseOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentResponseOutput {
	return o
}

// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
func (o ProximityPlacementGroupPropertiesIntentResponseOutput) VmSizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProximityPlacementGroupPropertiesIntentResponse) []string { return v.VmSizes }).(pulumi.StringArrayOutput)
}

type ProximityPlacementGroupPropertiesIntentResponsePtrOutput struct{ *pulumi.OutputState }

func (ProximityPlacementGroupPropertiesIntentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProximityPlacementGroupPropertiesIntentResponse)(nil)).Elem()
}

func (o ProximityPlacementGroupPropertiesIntentResponsePtrOutput) ToProximityPlacementGroupPropertiesIntentResponsePtrOutput() ProximityPlacementGroupPropertiesIntentResponsePtrOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentResponsePtrOutput) ToProximityPlacementGroupPropertiesIntentResponsePtrOutputWithContext(ctx context.Context) ProximityPlacementGroupPropertiesIntentResponsePtrOutput {
	return o
}

func (o ProximityPlacementGroupPropertiesIntentResponsePtrOutput) Elem() ProximityPlacementGroupPropertiesIntentResponseOutput {
	return o.ApplyT(func(v *ProximityPlacementGroupPropertiesIntentResponse) ProximityPlacementGroupPropertiesIntentResponse {
		if v != nil {
			return *v
		}
		var ret ProximityPlacementGroupPropertiesIntentResponse
		return ret
	}).(ProximityPlacementGroupPropertiesIntentResponseOutput)
}

// Specifies possible sizes of virtual machines that can be created in the proximity placement group.
func (o ProximityPlacementGroupPropertiesIntentResponsePtrOutput) VmSizes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProximityPlacementGroupPropertiesIntentResponse) []string {
		if v == nil {
			return nil
		}
		return v.VmSizes
	}).(pulumi.StringArrayOutput)
}

// Specifies ProxyAgent settings for the virtual machine or virtual machine scale set. Minimum api-version: 2023-09-01.
type ProxyAgentSettings struct {
	// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
	Imds *HostEndpointSettings `pulumi:"imds"`
	// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
	KeyIncarnationId *int `pulumi:"keyIncarnationId"`
	// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
	Mode *string `pulumi:"mode"`
	// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
	WireServer *HostEndpointSettings `pulumi:"wireServer"`
}

// ProxyAgentSettingsInput is an input type that accepts ProxyAgentSettingsArgs and ProxyAgentSettingsOutput values.
// You can construct a concrete instance of `ProxyAgentSettingsInput` via:
//
//	ProxyAgentSettingsArgs{...}
type ProxyAgentSettingsInput interface {
	pulumi.Input

	ToProxyAgentSettingsOutput() ProxyAgentSettingsOutput
	ToProxyAgentSettingsOutputWithContext(context.Context) ProxyAgentSettingsOutput
}

// Specifies ProxyAgent settings for the virtual machine or virtual machine scale set. Minimum api-version: 2023-09-01.
type ProxyAgentSettingsArgs struct {
	// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
	Imds HostEndpointSettingsPtrInput `pulumi:"imds"`
	// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
	KeyIncarnationId pulumi.IntPtrInput `pulumi:"keyIncarnationId"`
	// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
	WireServer HostEndpointSettingsPtrInput `pulumi:"wireServer"`
}

func (ProxyAgentSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyAgentSettings)(nil)).Elem()
}

func (i ProxyAgentSettingsArgs) ToProxyAgentSettingsOutput() ProxyAgentSettingsOutput {
	return i.ToProxyAgentSettingsOutputWithContext(context.Background())
}

func (i ProxyAgentSettingsArgs) ToProxyAgentSettingsOutputWithContext(ctx context.Context) ProxyAgentSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyAgentSettingsOutput)
}

func (i ProxyAgentSettingsArgs) ToProxyAgentSettingsPtrOutput() ProxyAgentSettingsPtrOutput {
	return i.ToProxyAgentSettingsPtrOutputWithContext(context.Background())
}

func (i ProxyAgentSettingsArgs) ToProxyAgentSettingsPtrOutputWithContext(ctx context.Context) ProxyAgentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyAgentSettingsOutput).ToProxyAgentSettingsPtrOutputWithContext(ctx)
}

// ProxyAgentSettingsPtrInput is an input type that accepts ProxyAgentSettingsArgs, ProxyAgentSettingsPtr and ProxyAgentSettingsPtrOutput values.
// You can construct a concrete instance of `ProxyAgentSettingsPtrInput` via:
//
//	        ProxyAgentSettingsArgs{...}
//
//	or:
//
//	        nil
type ProxyAgentSettingsPtrInput interface {
	pulumi.Input

	ToProxyAgentSettingsPtrOutput() ProxyAgentSettingsPtrOutput
	ToProxyAgentSettingsPtrOutputWithContext(context.Context) ProxyAgentSettingsPtrOutput
}

type proxyAgentSettingsPtrType ProxyAgentSettingsArgs

func ProxyAgentSettingsPtr(v *ProxyAgentSettingsArgs) ProxyAgentSettingsPtrInput {
	return (*proxyAgentSettingsPtrType)(v)
}

func (*proxyAgentSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyAgentSettings)(nil)).Elem()
}

func (i *proxyAgentSettingsPtrType) ToProxyAgentSettingsPtrOutput() ProxyAgentSettingsPtrOutput {
	return i.ToProxyAgentSettingsPtrOutputWithContext(context.Background())
}

func (i *proxyAgentSettingsPtrType) ToProxyAgentSettingsPtrOutputWithContext(ctx context.Context) ProxyAgentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyAgentSettingsPtrOutput)
}

// Specifies ProxyAgent settings for the virtual machine or virtual machine scale set. Minimum api-version: 2023-09-01.
type ProxyAgentSettingsOutput struct{ *pulumi.OutputState }

func (ProxyAgentSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyAgentSettings)(nil)).Elem()
}

func (o ProxyAgentSettingsOutput) ToProxyAgentSettingsOutput() ProxyAgentSettingsOutput {
	return o
}

func (o ProxyAgentSettingsOutput) ToProxyAgentSettingsOutputWithContext(ctx context.Context) ProxyAgentSettingsOutput {
	return o
}

func (o ProxyAgentSettingsOutput) ToProxyAgentSettingsPtrOutput() ProxyAgentSettingsPtrOutput {
	return o.ToProxyAgentSettingsPtrOutputWithContext(context.Background())
}

func (o ProxyAgentSettingsOutput) ToProxyAgentSettingsPtrOutputWithContext(ctx context.Context) ProxyAgentSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProxyAgentSettings) *ProxyAgentSettings {
		return &v
	}).(ProxyAgentSettingsPtrOutput)
}

// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
func (o ProxyAgentSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsOutput) Imds() HostEndpointSettingsPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettings) *HostEndpointSettings { return v.Imds }).(HostEndpointSettingsPtrOutput)
}

// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
func (o ProxyAgentSettingsOutput) KeyIncarnationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettings) *int { return v.KeyIncarnationId }).(pulumi.IntPtrOutput)
}

// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
func (o ProxyAgentSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsOutput) WireServer() HostEndpointSettingsPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettings) *HostEndpointSettings { return v.WireServer }).(HostEndpointSettingsPtrOutput)
}

type ProxyAgentSettingsPtrOutput struct{ *pulumi.OutputState }

func (ProxyAgentSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyAgentSettings)(nil)).Elem()
}

func (o ProxyAgentSettingsPtrOutput) ToProxyAgentSettingsPtrOutput() ProxyAgentSettingsPtrOutput {
	return o
}

func (o ProxyAgentSettingsPtrOutput) ToProxyAgentSettingsPtrOutputWithContext(ctx context.Context) ProxyAgentSettingsPtrOutput {
	return o
}

func (o ProxyAgentSettingsPtrOutput) Elem() ProxyAgentSettingsOutput {
	return o.ApplyT(func(v *ProxyAgentSettings) ProxyAgentSettings {
		if v != nil {
			return *v
		}
		var ret ProxyAgentSettings
		return ret
	}).(ProxyAgentSettingsOutput)
}

// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
func (o ProxyAgentSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsPtrOutput) Imds() HostEndpointSettingsPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettings) *HostEndpointSettings {
		if v == nil {
			return nil
		}
		return v.Imds
	}).(HostEndpointSettingsPtrOutput)
}

// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
func (o ProxyAgentSettingsPtrOutput) KeyIncarnationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettings) *int {
		if v == nil {
			return nil
		}
		return v.KeyIncarnationId
	}).(pulumi.IntPtrOutput)
}

// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
func (o ProxyAgentSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsPtrOutput) WireServer() HostEndpointSettingsPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettings) *HostEndpointSettings {
		if v == nil {
			return nil
		}
		return v.WireServer
	}).(HostEndpointSettingsPtrOutput)
}

// Specifies ProxyAgent settings for the virtual machine or virtual machine scale set. Minimum api-version: 2023-09-01.
type ProxyAgentSettingsResponse struct {
	// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
	Imds *HostEndpointSettingsResponse `pulumi:"imds"`
	// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
	KeyIncarnationId *int `pulumi:"keyIncarnationId"`
	// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
	Mode *string `pulumi:"mode"`
	// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
	WireServer *HostEndpointSettingsResponse `pulumi:"wireServer"`
}

// Specifies ProxyAgent settings for the virtual machine or virtual machine scale set. Minimum api-version: 2023-09-01.
type ProxyAgentSettingsResponseOutput struct{ *pulumi.OutputState }

func (ProxyAgentSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyAgentSettingsResponse)(nil)).Elem()
}

func (o ProxyAgentSettingsResponseOutput) ToProxyAgentSettingsResponseOutput() ProxyAgentSettingsResponseOutput {
	return o
}

func (o ProxyAgentSettingsResponseOutput) ToProxyAgentSettingsResponseOutputWithContext(ctx context.Context) ProxyAgentSettingsResponseOutput {
	return o
}

// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
func (o ProxyAgentSettingsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettingsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsResponseOutput) Imds() HostEndpointSettingsResponsePtrOutput {
	return o.ApplyT(func(v ProxyAgentSettingsResponse) *HostEndpointSettingsResponse { return v.Imds }).(HostEndpointSettingsResponsePtrOutput)
}

// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
func (o ProxyAgentSettingsResponseOutput) KeyIncarnationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettingsResponse) *int { return v.KeyIncarnationId }).(pulumi.IntPtrOutput)
}

// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
func (o ProxyAgentSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProxyAgentSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsResponseOutput) WireServer() HostEndpointSettingsResponsePtrOutput {
	return o.ApplyT(func(v ProxyAgentSettingsResponse) *HostEndpointSettingsResponse { return v.WireServer }).(HostEndpointSettingsResponsePtrOutput)
}

type ProxyAgentSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ProxyAgentSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyAgentSettingsResponse)(nil)).Elem()
}

func (o ProxyAgentSettingsResponsePtrOutput) ToProxyAgentSettingsResponsePtrOutput() ProxyAgentSettingsResponsePtrOutput {
	return o
}

func (o ProxyAgentSettingsResponsePtrOutput) ToProxyAgentSettingsResponsePtrOutputWithContext(ctx context.Context) ProxyAgentSettingsResponsePtrOutput {
	return o
}

func (o ProxyAgentSettingsResponsePtrOutput) Elem() ProxyAgentSettingsResponseOutput {
	return o.ApplyT(func(v *ProxyAgentSettingsResponse) ProxyAgentSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ProxyAgentSettingsResponse
		return ret
	}).(ProxyAgentSettingsResponseOutput)
}

// Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual machine scale set.
func (o ProxyAgentSettingsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the IMDS endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsResponsePtrOutput) Imds() HostEndpointSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettingsResponse) *HostEndpointSettingsResponse {
		if v == nil {
			return nil
		}
		return v.Imds
	}).(HostEndpointSettingsResponsePtrOutput)
}

// Increase the value of this property allows users to reset the key used for securing communication channel between guest and host.
func (o ProxyAgentSettingsResponsePtrOutput) KeyIncarnationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.KeyIncarnationId
	}).(pulumi.IntPtrOutput)
}

// Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting.
func (o ProxyAgentSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Specifies the Wire Server endpoint settings while creating the virtual machine or virtual machine scale set. Minimum api-version: 2024-03-01.
func (o ProxyAgentSettingsResponsePtrOutput) WireServer() HostEndpointSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ProxyAgentSettingsResponse) *HostEndpointSettingsResponse {
		if v == nil {
			return nil
		}
		return v.WireServer
	}).(HostEndpointSettingsResponsePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
type PublicIPAddressSku struct {
	// Specify public IP sku name
	Name *string `pulumi:"name"`
	// Specify public IP sku tier
	Tier *string `pulumi:"tier"`
}

// PublicIPAddressSkuInput is an input type that accepts PublicIPAddressSkuArgs and PublicIPAddressSkuOutput values.
// You can construct a concrete instance of `PublicIPAddressSkuInput` via:
//
//	PublicIPAddressSkuArgs{...}
type PublicIPAddressSkuInput interface {
	pulumi.Input

	ToPublicIPAddressSkuOutput() PublicIPAddressSkuOutput
	ToPublicIPAddressSkuOutputWithContext(context.Context) PublicIPAddressSkuOutput
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
type PublicIPAddressSkuArgs struct {
	// Specify public IP sku name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify public IP sku tier
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (PublicIPAddressSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressSku)(nil)).Elem()
}

func (i PublicIPAddressSkuArgs) ToPublicIPAddressSkuOutput() PublicIPAddressSkuOutput {
	return i.ToPublicIPAddressSkuOutputWithContext(context.Background())
}

func (i PublicIPAddressSkuArgs) ToPublicIPAddressSkuOutputWithContext(ctx context.Context) PublicIPAddressSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressSkuOutput)
}

func (i PublicIPAddressSkuArgs) ToPublicIPAddressSkuPtrOutput() PublicIPAddressSkuPtrOutput {
	return i.ToPublicIPAddressSkuPtrOutputWithContext(context.Background())
}

func (i PublicIPAddressSkuArgs) ToPublicIPAddressSkuPtrOutputWithContext(ctx context.Context) PublicIPAddressSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressSkuOutput).ToPublicIPAddressSkuPtrOutputWithContext(ctx)
}

// PublicIPAddressSkuPtrInput is an input type that accepts PublicIPAddressSkuArgs, PublicIPAddressSkuPtr and PublicIPAddressSkuPtrOutput values.
// You can construct a concrete instance of `PublicIPAddressSkuPtrInput` via:
//
//	        PublicIPAddressSkuArgs{...}
//
//	or:
//
//	        nil
type PublicIPAddressSkuPtrInput interface {
	pulumi.Input

	ToPublicIPAddressSkuPtrOutput() PublicIPAddressSkuPtrOutput
	ToPublicIPAddressSkuPtrOutputWithContext(context.Context) PublicIPAddressSkuPtrOutput
}

type publicIPAddressSkuPtrType PublicIPAddressSkuArgs

func PublicIPAddressSkuPtr(v *PublicIPAddressSkuArgs) PublicIPAddressSkuPtrInput {
	return (*publicIPAddressSkuPtrType)(v)
}

func (*publicIPAddressSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressSku)(nil)).Elem()
}

func (i *publicIPAddressSkuPtrType) ToPublicIPAddressSkuPtrOutput() PublicIPAddressSkuPtrOutput {
	return i.ToPublicIPAddressSkuPtrOutputWithContext(context.Background())
}

func (i *publicIPAddressSkuPtrType) ToPublicIPAddressSkuPtrOutputWithContext(ctx context.Context) PublicIPAddressSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIPAddressSkuPtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
type PublicIPAddressSkuOutput struct{ *pulumi.OutputState }

func (PublicIPAddressSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressSku)(nil)).Elem()
}

func (o PublicIPAddressSkuOutput) ToPublicIPAddressSkuOutput() PublicIPAddressSkuOutput {
	return o
}

func (o PublicIPAddressSkuOutput) ToPublicIPAddressSkuOutputWithContext(ctx context.Context) PublicIPAddressSkuOutput {
	return o
}

func (o PublicIPAddressSkuOutput) ToPublicIPAddressSkuPtrOutput() PublicIPAddressSkuPtrOutput {
	return o.ToPublicIPAddressSkuPtrOutputWithContext(context.Background())
}

func (o PublicIPAddressSkuOutput) ToPublicIPAddressSkuPtrOutputWithContext(ctx context.Context) PublicIPAddressSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicIPAddressSku) *PublicIPAddressSku {
		return &v
	}).(PublicIPAddressSkuPtrOutput)
}

// Specify public IP sku name
func (o PublicIPAddressSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicIPAddressSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify public IP sku tier
func (o PublicIPAddressSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicIPAddressSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PublicIPAddressSkuPtrOutput struct{ *pulumi.OutputState }

func (PublicIPAddressSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressSku)(nil)).Elem()
}

func (o PublicIPAddressSkuPtrOutput) ToPublicIPAddressSkuPtrOutput() PublicIPAddressSkuPtrOutput {
	return o
}

func (o PublicIPAddressSkuPtrOutput) ToPublicIPAddressSkuPtrOutputWithContext(ctx context.Context) PublicIPAddressSkuPtrOutput {
	return o
}

func (o PublicIPAddressSkuPtrOutput) Elem() PublicIPAddressSkuOutput {
	return o.ApplyT(func(v *PublicIPAddressSku) PublicIPAddressSku {
		if v != nil {
			return *v
		}
		var ret PublicIPAddressSku
		return ret
	}).(PublicIPAddressSkuOutput)
}

// Specify public IP sku name
func (o PublicIPAddressSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicIPAddressSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify public IP sku tier
func (o PublicIPAddressSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicIPAddressSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
type PublicIPAddressSkuResponse struct {
	// Specify public IP sku name
	Name *string `pulumi:"name"`
	// Specify public IP sku tier
	Tier *string `pulumi:"tier"`
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
type PublicIPAddressSkuResponseOutput struct{ *pulumi.OutputState }

func (PublicIPAddressSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicIPAddressSkuResponse)(nil)).Elem()
}

func (o PublicIPAddressSkuResponseOutput) ToPublicIPAddressSkuResponseOutput() PublicIPAddressSkuResponseOutput {
	return o
}

func (o PublicIPAddressSkuResponseOutput) ToPublicIPAddressSkuResponseOutputWithContext(ctx context.Context) PublicIPAddressSkuResponseOutput {
	return o
}

// Specify public IP sku name
func (o PublicIPAddressSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicIPAddressSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify public IP sku tier
func (o PublicIPAddressSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicIPAddressSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type PublicIPAddressSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (PublicIPAddressSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIPAddressSkuResponse)(nil)).Elem()
}

func (o PublicIPAddressSkuResponsePtrOutput) ToPublicIPAddressSkuResponsePtrOutput() PublicIPAddressSkuResponsePtrOutput {
	return o
}

func (o PublicIPAddressSkuResponsePtrOutput) ToPublicIPAddressSkuResponsePtrOutputWithContext(ctx context.Context) PublicIPAddressSkuResponsePtrOutput {
	return o
}

func (o PublicIPAddressSkuResponsePtrOutput) Elem() PublicIPAddressSkuResponseOutput {
	return o.ApplyT(func(v *PublicIPAddressSkuResponse) PublicIPAddressSkuResponse {
		if v != nil {
			return *v
		}
		var ret PublicIPAddressSkuResponse
		return ret
	}).(PublicIPAddressSkuResponseOutput)
}

// Specify public IP sku name
func (o PublicIPAddressSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicIPAddressSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify public IP sku tier
func (o PublicIPAddressSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicIPAddressSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfiguration struct {
	// Describes the resource range.
	Memory *ResourceRange `pulumi:"memory"`
	// Describes the resource range.
	VCPUs *ResourceRange `pulumi:"vCPUs"`
}

// RecommendedMachineConfigurationInput is an input type that accepts RecommendedMachineConfigurationArgs and RecommendedMachineConfigurationOutput values.
// You can construct a concrete instance of `RecommendedMachineConfigurationInput` via:
//
//	RecommendedMachineConfigurationArgs{...}
type RecommendedMachineConfigurationInput interface {
	pulumi.Input

	ToRecommendedMachineConfigurationOutput() RecommendedMachineConfigurationOutput
	ToRecommendedMachineConfigurationOutputWithContext(context.Context) RecommendedMachineConfigurationOutput
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationArgs struct {
	// Describes the resource range.
	Memory ResourceRangePtrInput `pulumi:"memory"`
	// Describes the resource range.
	VCPUs ResourceRangePtrInput `pulumi:"vCPUs"`
}

func (RecommendedMachineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecommendedMachineConfiguration)(nil)).Elem()
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationOutput() RecommendedMachineConfigurationOutput {
	return i.ToRecommendedMachineConfigurationOutputWithContext(context.Background())
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationOutputWithContext(ctx context.Context) RecommendedMachineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendedMachineConfigurationOutput)
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput {
	return i.ToRecommendedMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i RecommendedMachineConfigurationArgs) ToRecommendedMachineConfigurationPtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendedMachineConfigurationOutput).ToRecommendedMachineConfigurationPtrOutputWithContext(ctx)
}

// RecommendedMachineConfigurationPtrInput is an input type that accepts RecommendedMachineConfigurationArgs, RecommendedMachineConfigurationPtr and RecommendedMachineConfigurationPtrOutput values.
// You can construct a concrete instance of `RecommendedMachineConfigurationPtrInput` via:
//
//	        RecommendedMachineConfigurationArgs{...}
//
//	or:
//
//	        nil
type RecommendedMachineConfigurationPtrInput interface {
	pulumi.Input

	ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput
	ToRecommendedMachineConfigurationPtrOutputWithContext(context.Context) RecommendedMachineConfigurationPtrOutput
}

type recommendedMachineConfigurationPtrType RecommendedMachineConfigurationArgs

func RecommendedMachineConfigurationPtr(v *RecommendedMachineConfigurationArgs) RecommendedMachineConfigurationPtrInput {
	return (*recommendedMachineConfigurationPtrType)(v)
}

func (*recommendedMachineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendedMachineConfiguration)(nil)).Elem()
}

func (i *recommendedMachineConfigurationPtrType) ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput {
	return i.ToRecommendedMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i *recommendedMachineConfigurationPtrType) ToRecommendedMachineConfigurationPtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecommendedMachineConfigurationPtrOutput)
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationOutput struct{ *pulumi.OutputState }

func (RecommendedMachineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecommendedMachineConfiguration)(nil)).Elem()
}

func (o RecommendedMachineConfigurationOutput) ToRecommendedMachineConfigurationOutput() RecommendedMachineConfigurationOutput {
	return o
}

func (o RecommendedMachineConfigurationOutput) ToRecommendedMachineConfigurationOutputWithContext(ctx context.Context) RecommendedMachineConfigurationOutput {
	return o
}

func (o RecommendedMachineConfigurationOutput) ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput {
	return o.ToRecommendedMachineConfigurationPtrOutputWithContext(context.Background())
}

func (o RecommendedMachineConfigurationOutput) ToRecommendedMachineConfigurationPtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecommendedMachineConfiguration) *RecommendedMachineConfiguration {
		return &v
	}).(RecommendedMachineConfigurationPtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationOutput) Memory() ResourceRangePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfiguration) *ResourceRange { return v.Memory }).(ResourceRangePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationOutput) VCPUs() ResourceRangePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfiguration) *ResourceRange { return v.VCPUs }).(ResourceRangePtrOutput)
}

type RecommendedMachineConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RecommendedMachineConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendedMachineConfiguration)(nil)).Elem()
}

func (o RecommendedMachineConfigurationPtrOutput) ToRecommendedMachineConfigurationPtrOutput() RecommendedMachineConfigurationPtrOutput {
	return o
}

func (o RecommendedMachineConfigurationPtrOutput) ToRecommendedMachineConfigurationPtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationPtrOutput {
	return o
}

func (o RecommendedMachineConfigurationPtrOutput) Elem() RecommendedMachineConfigurationOutput {
	return o.ApplyT(func(v *RecommendedMachineConfiguration) RecommendedMachineConfiguration {
		if v != nil {
			return *v
		}
		var ret RecommendedMachineConfiguration
		return ret
	}).(RecommendedMachineConfigurationOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationPtrOutput) Memory() ResourceRangePtrOutput {
	return o.ApplyT(func(v *RecommendedMachineConfiguration) *ResourceRange {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(ResourceRangePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationPtrOutput) VCPUs() ResourceRangePtrOutput {
	return o.ApplyT(func(v *RecommendedMachineConfiguration) *ResourceRange {
		if v == nil {
			return nil
		}
		return v.VCPUs
	}).(ResourceRangePtrOutput)
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationResponse struct {
	// Describes the resource range.
	Memory *ResourceRangeResponse `pulumi:"memory"`
	// Describes the resource range.
	VCPUs *ResourceRangeResponse `pulumi:"vCPUs"`
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RecommendedMachineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecommendedMachineConfigurationResponse)(nil)).Elem()
}

func (o RecommendedMachineConfigurationResponseOutput) ToRecommendedMachineConfigurationResponseOutput() RecommendedMachineConfigurationResponseOutput {
	return o
}

func (o RecommendedMachineConfigurationResponseOutput) ToRecommendedMachineConfigurationResponseOutputWithContext(ctx context.Context) RecommendedMachineConfigurationResponseOutput {
	return o
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponseOutput) Memory() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfigurationResponse) *ResourceRangeResponse { return v.Memory }).(ResourceRangeResponsePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponseOutput) VCPUs() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v RecommendedMachineConfigurationResponse) *ResourceRangeResponse { return v.VCPUs }).(ResourceRangeResponsePtrOutput)
}

type RecommendedMachineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RecommendedMachineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecommendedMachineConfigurationResponse)(nil)).Elem()
}

func (o RecommendedMachineConfigurationResponsePtrOutput) ToRecommendedMachineConfigurationResponsePtrOutput() RecommendedMachineConfigurationResponsePtrOutput {
	return o
}

func (o RecommendedMachineConfigurationResponsePtrOutput) ToRecommendedMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) RecommendedMachineConfigurationResponsePtrOutput {
	return o
}

func (o RecommendedMachineConfigurationResponsePtrOutput) Elem() RecommendedMachineConfigurationResponseOutput {
	return o.ApplyT(func(v *RecommendedMachineConfigurationResponse) RecommendedMachineConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret RecommendedMachineConfigurationResponse
		return ret
	}).(RecommendedMachineConfigurationResponseOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponsePtrOutput) Memory() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v *RecommendedMachineConfigurationResponse) *ResourceRangeResponse {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(ResourceRangeResponsePtrOutput)
}

// Describes the resource range.
func (o RecommendedMachineConfigurationResponsePtrOutput) VCPUs() ResourceRangeResponsePtrOutput {
	return o.ApplyT(func(v *RecommendedMachineConfigurationResponse) *ResourceRangeResponse {
		if v == nil {
			return nil
		}
		return v.VCPUs
	}).(ResourceRangeResponsePtrOutput)
}

// This is the regional replication status.
type RegionalReplicationStatusResponse struct {
	// The details of the replication status.
	Details string `pulumi:"details"`
	// It indicates progress of the replication job.
	Progress int `pulumi:"progress"`
	// The region to which the gallery image version is being replicated to.
	Region string `pulumi:"region"`
	// This is the regional replication state.
	State string `pulumi:"state"`
}

// This is the regional replication status.
type RegionalReplicationStatusResponseOutput struct{ *pulumi.OutputState }

func (RegionalReplicationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionalReplicationStatusResponse)(nil)).Elem()
}

func (o RegionalReplicationStatusResponseOutput) ToRegionalReplicationStatusResponseOutput() RegionalReplicationStatusResponseOutput {
	return o
}

func (o RegionalReplicationStatusResponseOutput) ToRegionalReplicationStatusResponseOutputWithContext(ctx context.Context) RegionalReplicationStatusResponseOutput {
	return o
}

// The details of the replication status.
func (o RegionalReplicationStatusResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) string { return v.Details }).(pulumi.StringOutput)
}

// It indicates progress of the replication job.
func (o RegionalReplicationStatusResponseOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) int { return v.Progress }).(pulumi.IntOutput)
}

// The region to which the gallery image version is being replicated to.
func (o RegionalReplicationStatusResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) string { return v.Region }).(pulumi.StringOutput)
}

// This is the regional replication state.
func (o RegionalReplicationStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalReplicationStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

type RegionalReplicationStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (RegionalReplicationStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionalReplicationStatusResponse)(nil)).Elem()
}

func (o RegionalReplicationStatusResponseArrayOutput) ToRegionalReplicationStatusResponseArrayOutput() RegionalReplicationStatusResponseArrayOutput {
	return o
}

func (o RegionalReplicationStatusResponseArrayOutput) ToRegionalReplicationStatusResponseArrayOutputWithContext(ctx context.Context) RegionalReplicationStatusResponseArrayOutput {
	return o
}

func (o RegionalReplicationStatusResponseArrayOutput) Index(i pulumi.IntInput) RegionalReplicationStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionalReplicationStatusResponse {
		return vs[0].([]RegionalReplicationStatusResponse)[vs[1].(int)]
	}).(RegionalReplicationStatusResponseOutput)
}

// Gallery regional sharing status
type RegionalSharingStatusResponse struct {
	// Details of gallery regional sharing failure.
	Details *string `pulumi:"details"`
	// Region name
	Region *string `pulumi:"region"`
	// Gallery sharing state in current region
	State string `pulumi:"state"`
}

// Gallery regional sharing status
type RegionalSharingStatusResponseOutput struct{ *pulumi.OutputState }

func (RegionalSharingStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionalSharingStatusResponse)(nil)).Elem()
}

func (o RegionalSharingStatusResponseOutput) ToRegionalSharingStatusResponseOutput() RegionalSharingStatusResponseOutput {
	return o
}

func (o RegionalSharingStatusResponseOutput) ToRegionalSharingStatusResponseOutputWithContext(ctx context.Context) RegionalSharingStatusResponseOutput {
	return o
}

// Details of gallery regional sharing failure.
func (o RegionalSharingStatusResponseOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionalSharingStatusResponse) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Region name
func (o RegionalSharingStatusResponseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegionalSharingStatusResponse) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Gallery sharing state in current region
func (o RegionalSharingStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v RegionalSharingStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

type RegionalSharingStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (RegionalSharingStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionalSharingStatusResponse)(nil)).Elem()
}

func (o RegionalSharingStatusResponseArrayOutput) ToRegionalSharingStatusResponseArrayOutput() RegionalSharingStatusResponseArrayOutput {
	return o
}

func (o RegionalSharingStatusResponseArrayOutput) ToRegionalSharingStatusResponseArrayOutputWithContext(ctx context.Context) RegionalSharingStatusResponseArrayOutput {
	return o
}

func (o RegionalSharingStatusResponseArrayOutput) Index(i pulumi.IntInput) RegionalSharingStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionalSharingStatusResponse {
		return vs[0].([]RegionalSharingStatusResponse)[vs[1].(int)]
	}).(RegionalSharingStatusResponseOutput)
}

// This is the replication status of the gallery image version.
type ReplicationStatusResponse struct {
	// This is the aggregated replication status based on all the regional replication status flags.
	AggregatedState string `pulumi:"aggregatedState"`
	// This is a summary of replication status for each region.
	Summary []RegionalReplicationStatusResponse `pulumi:"summary"`
}

// This is the replication status of the gallery image version.
type ReplicationStatusResponseOutput struct{ *pulumi.OutputState }

func (ReplicationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationStatusResponse)(nil)).Elem()
}

func (o ReplicationStatusResponseOutput) ToReplicationStatusResponseOutput() ReplicationStatusResponseOutput {
	return o
}

func (o ReplicationStatusResponseOutput) ToReplicationStatusResponseOutputWithContext(ctx context.Context) ReplicationStatusResponseOutput {
	return o
}

// This is the aggregated replication status based on all the regional replication status flags.
func (o ReplicationStatusResponseOutput) AggregatedState() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationStatusResponse) string { return v.AggregatedState }).(pulumi.StringOutput)
}

// This is a summary of replication status for each region.
func (o ReplicationStatusResponseOutput) Summary() RegionalReplicationStatusResponseArrayOutput {
	return o.ApplyT(func(v ReplicationStatusResponse) []RegionalReplicationStatusResponse { return v.Summary }).(RegionalReplicationStatusResponseArrayOutput)
}

// Describes an resiliency policy - AutomaticZoneRebalancingPolicy, ResilientVMCreationPolicy and/or ResilientVMDeletionPolicy.
type ResiliencyPolicy struct {
	// The configuration parameters used while performing automatic AZ balancing.
	AutomaticZoneRebalancingPolicy *AutomaticZoneRebalancingPolicy `pulumi:"automaticZoneRebalancingPolicy"`
	// The configuration parameters used while performing resilient VM creation.
	ResilientVMCreationPolicy *ResilientVMCreationPolicy `pulumi:"resilientVMCreationPolicy"`
	// The configuration parameters used while performing resilient VM deletion.
	ResilientVMDeletionPolicy *ResilientVMDeletionPolicy `pulumi:"resilientVMDeletionPolicy"`
}

// ResiliencyPolicyInput is an input type that accepts ResiliencyPolicyArgs and ResiliencyPolicyOutput values.
// You can construct a concrete instance of `ResiliencyPolicyInput` via:
//
//	ResiliencyPolicyArgs{...}
type ResiliencyPolicyInput interface {
	pulumi.Input

	ToResiliencyPolicyOutput() ResiliencyPolicyOutput
	ToResiliencyPolicyOutputWithContext(context.Context) ResiliencyPolicyOutput
}

// Describes an resiliency policy - AutomaticZoneRebalancingPolicy, ResilientVMCreationPolicy and/or ResilientVMDeletionPolicy.
type ResiliencyPolicyArgs struct {
	// The configuration parameters used while performing automatic AZ balancing.
	AutomaticZoneRebalancingPolicy AutomaticZoneRebalancingPolicyPtrInput `pulumi:"automaticZoneRebalancingPolicy"`
	// The configuration parameters used while performing resilient VM creation.
	ResilientVMCreationPolicy ResilientVMCreationPolicyPtrInput `pulumi:"resilientVMCreationPolicy"`
	// The configuration parameters used while performing resilient VM deletion.
	ResilientVMDeletionPolicy ResilientVMDeletionPolicyPtrInput `pulumi:"resilientVMDeletionPolicy"`
}

func (ResiliencyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicy)(nil)).Elem()
}

func (i ResiliencyPolicyArgs) ToResiliencyPolicyOutput() ResiliencyPolicyOutput {
	return i.ToResiliencyPolicyOutputWithContext(context.Background())
}

func (i ResiliencyPolicyArgs) ToResiliencyPolicyOutputWithContext(ctx context.Context) ResiliencyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyOutput)
}

func (i ResiliencyPolicyArgs) ToResiliencyPolicyPtrOutput() ResiliencyPolicyPtrOutput {
	return i.ToResiliencyPolicyPtrOutputWithContext(context.Background())
}

func (i ResiliencyPolicyArgs) ToResiliencyPolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyOutput).ToResiliencyPolicyPtrOutputWithContext(ctx)
}

// ResiliencyPolicyPtrInput is an input type that accepts ResiliencyPolicyArgs, ResiliencyPolicyPtr and ResiliencyPolicyPtrOutput values.
// You can construct a concrete instance of `ResiliencyPolicyPtrInput` via:
//
//	        ResiliencyPolicyArgs{...}
//
//	or:
//
//	        nil
type ResiliencyPolicyPtrInput interface {
	pulumi.Input

	ToResiliencyPolicyPtrOutput() ResiliencyPolicyPtrOutput
	ToResiliencyPolicyPtrOutputWithContext(context.Context) ResiliencyPolicyPtrOutput
}

type resiliencyPolicyPtrType ResiliencyPolicyArgs

func ResiliencyPolicyPtr(v *ResiliencyPolicyArgs) ResiliencyPolicyPtrInput {
	return (*resiliencyPolicyPtrType)(v)
}

func (*resiliencyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicy)(nil)).Elem()
}

func (i *resiliencyPolicyPtrType) ToResiliencyPolicyPtrOutput() ResiliencyPolicyPtrOutput {
	return i.ToResiliencyPolicyPtrOutputWithContext(context.Background())
}

func (i *resiliencyPolicyPtrType) ToResiliencyPolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResiliencyPolicyPtrOutput)
}

// Describes an resiliency policy - AutomaticZoneRebalancingPolicy, ResilientVMCreationPolicy and/or ResilientVMDeletionPolicy.
type ResiliencyPolicyOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicy)(nil)).Elem()
}

func (o ResiliencyPolicyOutput) ToResiliencyPolicyOutput() ResiliencyPolicyOutput {
	return o
}

func (o ResiliencyPolicyOutput) ToResiliencyPolicyOutputWithContext(ctx context.Context) ResiliencyPolicyOutput {
	return o
}

func (o ResiliencyPolicyOutput) ToResiliencyPolicyPtrOutput() ResiliencyPolicyPtrOutput {
	return o.ToResiliencyPolicyPtrOutputWithContext(context.Background())
}

func (o ResiliencyPolicyOutput) ToResiliencyPolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResiliencyPolicy) *ResiliencyPolicy {
		return &v
	}).(ResiliencyPolicyPtrOutput)
}

// The configuration parameters used while performing automatic AZ balancing.
func (o ResiliencyPolicyOutput) AutomaticZoneRebalancingPolicy() AutomaticZoneRebalancingPolicyPtrOutput {
	return o.ApplyT(func(v ResiliencyPolicy) *AutomaticZoneRebalancingPolicy { return v.AutomaticZoneRebalancingPolicy }).(AutomaticZoneRebalancingPolicyPtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
func (o ResiliencyPolicyOutput) ResilientVMCreationPolicy() ResilientVMCreationPolicyPtrOutput {
	return o.ApplyT(func(v ResiliencyPolicy) *ResilientVMCreationPolicy { return v.ResilientVMCreationPolicy }).(ResilientVMCreationPolicyPtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
func (o ResiliencyPolicyOutput) ResilientVMDeletionPolicy() ResilientVMDeletionPolicyPtrOutput {
	return o.ApplyT(func(v ResiliencyPolicy) *ResilientVMDeletionPolicy { return v.ResilientVMDeletionPolicy }).(ResilientVMDeletionPolicyPtrOutput)
}

type ResiliencyPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicy)(nil)).Elem()
}

func (o ResiliencyPolicyPtrOutput) ToResiliencyPolicyPtrOutput() ResiliencyPolicyPtrOutput {
	return o
}

func (o ResiliencyPolicyPtrOutput) ToResiliencyPolicyPtrOutputWithContext(ctx context.Context) ResiliencyPolicyPtrOutput {
	return o
}

func (o ResiliencyPolicyPtrOutput) Elem() ResiliencyPolicyOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) ResiliencyPolicy {
		if v != nil {
			return *v
		}
		var ret ResiliencyPolicy
		return ret
	}).(ResiliencyPolicyOutput)
}

// The configuration parameters used while performing automatic AZ balancing.
func (o ResiliencyPolicyPtrOutput) AutomaticZoneRebalancingPolicy() AutomaticZoneRebalancingPolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) *AutomaticZoneRebalancingPolicy {
		if v == nil {
			return nil
		}
		return v.AutomaticZoneRebalancingPolicy
	}).(AutomaticZoneRebalancingPolicyPtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
func (o ResiliencyPolicyPtrOutput) ResilientVMCreationPolicy() ResilientVMCreationPolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) *ResilientVMCreationPolicy {
		if v == nil {
			return nil
		}
		return v.ResilientVMCreationPolicy
	}).(ResilientVMCreationPolicyPtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
func (o ResiliencyPolicyPtrOutput) ResilientVMDeletionPolicy() ResilientVMDeletionPolicyPtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicy) *ResilientVMDeletionPolicy {
		if v == nil {
			return nil
		}
		return v.ResilientVMDeletionPolicy
	}).(ResilientVMDeletionPolicyPtrOutput)
}

// Describes an resiliency policy - AutomaticZoneRebalancingPolicy, ResilientVMCreationPolicy and/or ResilientVMDeletionPolicy.
type ResiliencyPolicyResponse struct {
	// The configuration parameters used while performing automatic AZ balancing.
	AutomaticZoneRebalancingPolicy *AutomaticZoneRebalancingPolicyResponse `pulumi:"automaticZoneRebalancingPolicy"`
	// The configuration parameters used while performing resilient VM creation.
	ResilientVMCreationPolicy *ResilientVMCreationPolicyResponse `pulumi:"resilientVMCreationPolicy"`
	// The configuration parameters used while performing resilient VM deletion.
	ResilientVMDeletionPolicy *ResilientVMDeletionPolicyResponse `pulumi:"resilientVMDeletionPolicy"`
}

// Describes an resiliency policy - AutomaticZoneRebalancingPolicy, ResilientVMCreationPolicy and/or ResilientVMDeletionPolicy.
type ResiliencyPolicyResponseOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResiliencyPolicyResponse)(nil)).Elem()
}

func (o ResiliencyPolicyResponseOutput) ToResiliencyPolicyResponseOutput() ResiliencyPolicyResponseOutput {
	return o
}

func (o ResiliencyPolicyResponseOutput) ToResiliencyPolicyResponseOutputWithContext(ctx context.Context) ResiliencyPolicyResponseOutput {
	return o
}

// The configuration parameters used while performing automatic AZ balancing.
func (o ResiliencyPolicyResponseOutput) AutomaticZoneRebalancingPolicy() AutomaticZoneRebalancingPolicyResponsePtrOutput {
	return o.ApplyT(func(v ResiliencyPolicyResponse) *AutomaticZoneRebalancingPolicyResponse {
		return v.AutomaticZoneRebalancingPolicy
	}).(AutomaticZoneRebalancingPolicyResponsePtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
func (o ResiliencyPolicyResponseOutput) ResilientVMCreationPolicy() ResilientVMCreationPolicyResponsePtrOutput {
	return o.ApplyT(func(v ResiliencyPolicyResponse) *ResilientVMCreationPolicyResponse {
		return v.ResilientVMCreationPolicy
	}).(ResilientVMCreationPolicyResponsePtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
func (o ResiliencyPolicyResponseOutput) ResilientVMDeletionPolicy() ResilientVMDeletionPolicyResponsePtrOutput {
	return o.ApplyT(func(v ResiliencyPolicyResponse) *ResilientVMDeletionPolicyResponse {
		return v.ResilientVMDeletionPolicy
	}).(ResilientVMDeletionPolicyResponsePtrOutput)
}

type ResiliencyPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResiliencyPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResiliencyPolicyResponse)(nil)).Elem()
}

func (o ResiliencyPolicyResponsePtrOutput) ToResiliencyPolicyResponsePtrOutput() ResiliencyPolicyResponsePtrOutput {
	return o
}

func (o ResiliencyPolicyResponsePtrOutput) ToResiliencyPolicyResponsePtrOutputWithContext(ctx context.Context) ResiliencyPolicyResponsePtrOutput {
	return o
}

func (o ResiliencyPolicyResponsePtrOutput) Elem() ResiliencyPolicyResponseOutput {
	return o.ApplyT(func(v *ResiliencyPolicyResponse) ResiliencyPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ResiliencyPolicyResponse
		return ret
	}).(ResiliencyPolicyResponseOutput)
}

// The configuration parameters used while performing automatic AZ balancing.
func (o ResiliencyPolicyResponsePtrOutput) AutomaticZoneRebalancingPolicy() AutomaticZoneRebalancingPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyResponse) *AutomaticZoneRebalancingPolicyResponse {
		if v == nil {
			return nil
		}
		return v.AutomaticZoneRebalancingPolicy
	}).(AutomaticZoneRebalancingPolicyResponsePtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
func (o ResiliencyPolicyResponsePtrOutput) ResilientVMCreationPolicy() ResilientVMCreationPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyResponse) *ResilientVMCreationPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ResilientVMCreationPolicy
	}).(ResilientVMCreationPolicyResponsePtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
func (o ResiliencyPolicyResponsePtrOutput) ResilientVMDeletionPolicy() ResilientVMDeletionPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ResiliencyPolicyResponse) *ResilientVMDeletionPolicyResponse {
		if v == nil {
			return nil
		}
		return v.ResilientVMDeletionPolicy
	}).(ResilientVMDeletionPolicyResponsePtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
type ResilientVMCreationPolicy struct {
	// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
}

// ResilientVMCreationPolicyInput is an input type that accepts ResilientVMCreationPolicyArgs and ResilientVMCreationPolicyOutput values.
// You can construct a concrete instance of `ResilientVMCreationPolicyInput` via:
//
//	ResilientVMCreationPolicyArgs{...}
type ResilientVMCreationPolicyInput interface {
	pulumi.Input

	ToResilientVMCreationPolicyOutput() ResilientVMCreationPolicyOutput
	ToResilientVMCreationPolicyOutputWithContext(context.Context) ResilientVMCreationPolicyOutput
}

// The configuration parameters used while performing resilient VM creation.
type ResilientVMCreationPolicyArgs struct {
	// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ResilientVMCreationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResilientVMCreationPolicy)(nil)).Elem()
}

func (i ResilientVMCreationPolicyArgs) ToResilientVMCreationPolicyOutput() ResilientVMCreationPolicyOutput {
	return i.ToResilientVMCreationPolicyOutputWithContext(context.Background())
}

func (i ResilientVMCreationPolicyArgs) ToResilientVMCreationPolicyOutputWithContext(ctx context.Context) ResilientVMCreationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResilientVMCreationPolicyOutput)
}

func (i ResilientVMCreationPolicyArgs) ToResilientVMCreationPolicyPtrOutput() ResilientVMCreationPolicyPtrOutput {
	return i.ToResilientVMCreationPolicyPtrOutputWithContext(context.Background())
}

func (i ResilientVMCreationPolicyArgs) ToResilientVMCreationPolicyPtrOutputWithContext(ctx context.Context) ResilientVMCreationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResilientVMCreationPolicyOutput).ToResilientVMCreationPolicyPtrOutputWithContext(ctx)
}

// ResilientVMCreationPolicyPtrInput is an input type that accepts ResilientVMCreationPolicyArgs, ResilientVMCreationPolicyPtr and ResilientVMCreationPolicyPtrOutput values.
// You can construct a concrete instance of `ResilientVMCreationPolicyPtrInput` via:
//
//	        ResilientVMCreationPolicyArgs{...}
//
//	or:
//
//	        nil
type ResilientVMCreationPolicyPtrInput interface {
	pulumi.Input

	ToResilientVMCreationPolicyPtrOutput() ResilientVMCreationPolicyPtrOutput
	ToResilientVMCreationPolicyPtrOutputWithContext(context.Context) ResilientVMCreationPolicyPtrOutput
}

type resilientVMCreationPolicyPtrType ResilientVMCreationPolicyArgs

func ResilientVMCreationPolicyPtr(v *ResilientVMCreationPolicyArgs) ResilientVMCreationPolicyPtrInput {
	return (*resilientVMCreationPolicyPtrType)(v)
}

func (*resilientVMCreationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResilientVMCreationPolicy)(nil)).Elem()
}

func (i *resilientVMCreationPolicyPtrType) ToResilientVMCreationPolicyPtrOutput() ResilientVMCreationPolicyPtrOutput {
	return i.ToResilientVMCreationPolicyPtrOutputWithContext(context.Background())
}

func (i *resilientVMCreationPolicyPtrType) ToResilientVMCreationPolicyPtrOutputWithContext(ctx context.Context) ResilientVMCreationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResilientVMCreationPolicyPtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
type ResilientVMCreationPolicyOutput struct{ *pulumi.OutputState }

func (ResilientVMCreationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResilientVMCreationPolicy)(nil)).Elem()
}

func (o ResilientVMCreationPolicyOutput) ToResilientVMCreationPolicyOutput() ResilientVMCreationPolicyOutput {
	return o
}

func (o ResilientVMCreationPolicyOutput) ToResilientVMCreationPolicyOutputWithContext(ctx context.Context) ResilientVMCreationPolicyOutput {
	return o
}

func (o ResilientVMCreationPolicyOutput) ToResilientVMCreationPolicyPtrOutput() ResilientVMCreationPolicyPtrOutput {
	return o.ToResilientVMCreationPolicyPtrOutputWithContext(context.Background())
}

func (o ResilientVMCreationPolicyOutput) ToResilientVMCreationPolicyPtrOutputWithContext(ctx context.Context) ResilientVMCreationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResilientVMCreationPolicy) *ResilientVMCreationPolicy {
		return &v
	}).(ResilientVMCreationPolicyPtrOutput)
}

// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMCreationPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResilientVMCreationPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ResilientVMCreationPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResilientVMCreationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResilientVMCreationPolicy)(nil)).Elem()
}

func (o ResilientVMCreationPolicyPtrOutput) ToResilientVMCreationPolicyPtrOutput() ResilientVMCreationPolicyPtrOutput {
	return o
}

func (o ResilientVMCreationPolicyPtrOutput) ToResilientVMCreationPolicyPtrOutputWithContext(ctx context.Context) ResilientVMCreationPolicyPtrOutput {
	return o
}

func (o ResilientVMCreationPolicyPtrOutput) Elem() ResilientVMCreationPolicyOutput {
	return o.ApplyT(func(v *ResilientVMCreationPolicy) ResilientVMCreationPolicy {
		if v != nil {
			return *v
		}
		var ret ResilientVMCreationPolicy
		return ret
	}).(ResilientVMCreationPolicyOutput)
}

// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMCreationPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResilientVMCreationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration parameters used while performing resilient VM creation.
type ResilientVMCreationPolicyResponse struct {
	// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
}

// The configuration parameters used while performing resilient VM creation.
type ResilientVMCreationPolicyResponseOutput struct{ *pulumi.OutputState }

func (ResilientVMCreationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResilientVMCreationPolicyResponse)(nil)).Elem()
}

func (o ResilientVMCreationPolicyResponseOutput) ToResilientVMCreationPolicyResponseOutput() ResilientVMCreationPolicyResponseOutput {
	return o
}

func (o ResilientVMCreationPolicyResponseOutput) ToResilientVMCreationPolicyResponseOutputWithContext(ctx context.Context) ResilientVMCreationPolicyResponseOutput {
	return o
}

// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMCreationPolicyResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResilientVMCreationPolicyResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ResilientVMCreationPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResilientVMCreationPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResilientVMCreationPolicyResponse)(nil)).Elem()
}

func (o ResilientVMCreationPolicyResponsePtrOutput) ToResilientVMCreationPolicyResponsePtrOutput() ResilientVMCreationPolicyResponsePtrOutput {
	return o
}

func (o ResilientVMCreationPolicyResponsePtrOutput) ToResilientVMCreationPolicyResponsePtrOutputWithContext(ctx context.Context) ResilientVMCreationPolicyResponsePtrOutput {
	return o
}

func (o ResilientVMCreationPolicyResponsePtrOutput) Elem() ResilientVMCreationPolicyResponseOutput {
	return o.ApplyT(func(v *ResilientVMCreationPolicyResponse) ResilientVMCreationPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ResilientVMCreationPolicyResponse
		return ret
	}).(ResilientVMCreationPolicyResponseOutput)
}

// Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMCreationPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResilientVMCreationPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
type ResilientVMDeletionPolicy struct {
	// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
}

// ResilientVMDeletionPolicyInput is an input type that accepts ResilientVMDeletionPolicyArgs and ResilientVMDeletionPolicyOutput values.
// You can construct a concrete instance of `ResilientVMDeletionPolicyInput` via:
//
//	ResilientVMDeletionPolicyArgs{...}
type ResilientVMDeletionPolicyInput interface {
	pulumi.Input

	ToResilientVMDeletionPolicyOutput() ResilientVMDeletionPolicyOutput
	ToResilientVMDeletionPolicyOutputWithContext(context.Context) ResilientVMDeletionPolicyOutput
}

// The configuration parameters used while performing resilient VM deletion.
type ResilientVMDeletionPolicyArgs struct {
	// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ResilientVMDeletionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResilientVMDeletionPolicy)(nil)).Elem()
}

func (i ResilientVMDeletionPolicyArgs) ToResilientVMDeletionPolicyOutput() ResilientVMDeletionPolicyOutput {
	return i.ToResilientVMDeletionPolicyOutputWithContext(context.Background())
}

func (i ResilientVMDeletionPolicyArgs) ToResilientVMDeletionPolicyOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResilientVMDeletionPolicyOutput)
}

func (i ResilientVMDeletionPolicyArgs) ToResilientVMDeletionPolicyPtrOutput() ResilientVMDeletionPolicyPtrOutput {
	return i.ToResilientVMDeletionPolicyPtrOutputWithContext(context.Background())
}

func (i ResilientVMDeletionPolicyArgs) ToResilientVMDeletionPolicyPtrOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResilientVMDeletionPolicyOutput).ToResilientVMDeletionPolicyPtrOutputWithContext(ctx)
}

// ResilientVMDeletionPolicyPtrInput is an input type that accepts ResilientVMDeletionPolicyArgs, ResilientVMDeletionPolicyPtr and ResilientVMDeletionPolicyPtrOutput values.
// You can construct a concrete instance of `ResilientVMDeletionPolicyPtrInput` via:
//
//	        ResilientVMDeletionPolicyArgs{...}
//
//	or:
//
//	        nil
type ResilientVMDeletionPolicyPtrInput interface {
	pulumi.Input

	ToResilientVMDeletionPolicyPtrOutput() ResilientVMDeletionPolicyPtrOutput
	ToResilientVMDeletionPolicyPtrOutputWithContext(context.Context) ResilientVMDeletionPolicyPtrOutput
}

type resilientVMDeletionPolicyPtrType ResilientVMDeletionPolicyArgs

func ResilientVMDeletionPolicyPtr(v *ResilientVMDeletionPolicyArgs) ResilientVMDeletionPolicyPtrInput {
	return (*resilientVMDeletionPolicyPtrType)(v)
}

func (*resilientVMDeletionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResilientVMDeletionPolicy)(nil)).Elem()
}

func (i *resilientVMDeletionPolicyPtrType) ToResilientVMDeletionPolicyPtrOutput() ResilientVMDeletionPolicyPtrOutput {
	return i.ToResilientVMDeletionPolicyPtrOutputWithContext(context.Background())
}

func (i *resilientVMDeletionPolicyPtrType) ToResilientVMDeletionPolicyPtrOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResilientVMDeletionPolicyPtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
type ResilientVMDeletionPolicyOutput struct{ *pulumi.OutputState }

func (ResilientVMDeletionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResilientVMDeletionPolicy)(nil)).Elem()
}

func (o ResilientVMDeletionPolicyOutput) ToResilientVMDeletionPolicyOutput() ResilientVMDeletionPolicyOutput {
	return o
}

func (o ResilientVMDeletionPolicyOutput) ToResilientVMDeletionPolicyOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyOutput {
	return o
}

func (o ResilientVMDeletionPolicyOutput) ToResilientVMDeletionPolicyPtrOutput() ResilientVMDeletionPolicyPtrOutput {
	return o.ToResilientVMDeletionPolicyPtrOutputWithContext(context.Background())
}

func (o ResilientVMDeletionPolicyOutput) ToResilientVMDeletionPolicyPtrOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResilientVMDeletionPolicy) *ResilientVMDeletionPolicy {
		return &v
	}).(ResilientVMDeletionPolicyPtrOutput)
}

// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMDeletionPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResilientVMDeletionPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ResilientVMDeletionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResilientVMDeletionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResilientVMDeletionPolicy)(nil)).Elem()
}

func (o ResilientVMDeletionPolicyPtrOutput) ToResilientVMDeletionPolicyPtrOutput() ResilientVMDeletionPolicyPtrOutput {
	return o
}

func (o ResilientVMDeletionPolicyPtrOutput) ToResilientVMDeletionPolicyPtrOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyPtrOutput {
	return o
}

func (o ResilientVMDeletionPolicyPtrOutput) Elem() ResilientVMDeletionPolicyOutput {
	return o.ApplyT(func(v *ResilientVMDeletionPolicy) ResilientVMDeletionPolicy {
		if v != nil {
			return *v
		}
		var ret ResilientVMDeletionPolicy
		return ret
	}).(ResilientVMDeletionPolicyOutput)
}

// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMDeletionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResilientVMDeletionPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration parameters used while performing resilient VM deletion.
type ResilientVMDeletionPolicyResponse struct {
	// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `pulumi:"enabled"`
}

// The configuration parameters used while performing resilient VM deletion.
type ResilientVMDeletionPolicyResponseOutput struct{ *pulumi.OutputState }

func (ResilientVMDeletionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResilientVMDeletionPolicyResponse)(nil)).Elem()
}

func (o ResilientVMDeletionPolicyResponseOutput) ToResilientVMDeletionPolicyResponseOutput() ResilientVMDeletionPolicyResponseOutput {
	return o
}

func (o ResilientVMDeletionPolicyResponseOutput) ToResilientVMDeletionPolicyResponseOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyResponseOutput {
	return o
}

// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMDeletionPolicyResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResilientVMDeletionPolicyResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ResilientVMDeletionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResilientVMDeletionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResilientVMDeletionPolicyResponse)(nil)).Elem()
}

func (o ResilientVMDeletionPolicyResponsePtrOutput) ToResilientVMDeletionPolicyResponsePtrOutput() ResilientVMDeletionPolicyResponsePtrOutput {
	return o
}

func (o ResilientVMDeletionPolicyResponsePtrOutput) ToResilientVMDeletionPolicyResponsePtrOutputWithContext(ctx context.Context) ResilientVMDeletionPolicyResponsePtrOutput {
	return o
}

func (o ResilientVMDeletionPolicyResponsePtrOutput) Elem() ResilientVMDeletionPolicyResponseOutput {
	return o.ApplyT(func(v *ResilientVMDeletionPolicyResponse) ResilientVMDeletionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ResilientVMDeletionPolicyResponse
		return ret
	}).(ResilientVMDeletionPolicyResponseOutput)
}

// Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The default value is false.
func (o ResilientVMDeletionPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResilientVMDeletionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Describes the resource range.
type ResourceRange struct {
	// The maximum number of the resource.
	Max *int `pulumi:"max"`
	// The minimum number of the resource.
	Min *int `pulumi:"min"`
}

// ResourceRangeInput is an input type that accepts ResourceRangeArgs and ResourceRangeOutput values.
// You can construct a concrete instance of `ResourceRangeInput` via:
//
//	ResourceRangeArgs{...}
type ResourceRangeInput interface {
	pulumi.Input

	ToResourceRangeOutput() ResourceRangeOutput
	ToResourceRangeOutputWithContext(context.Context) ResourceRangeOutput
}

// Describes the resource range.
type ResourceRangeArgs struct {
	// The maximum number of the resource.
	Max pulumi.IntPtrInput `pulumi:"max"`
	// The minimum number of the resource.
	Min pulumi.IntPtrInput `pulumi:"min"`
}

func (ResourceRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRange)(nil)).Elem()
}

func (i ResourceRangeArgs) ToResourceRangeOutput() ResourceRangeOutput {
	return i.ToResourceRangeOutputWithContext(context.Background())
}

func (i ResourceRangeArgs) ToResourceRangeOutputWithContext(ctx context.Context) ResourceRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRangeOutput)
}

func (i ResourceRangeArgs) ToResourceRangePtrOutput() ResourceRangePtrOutput {
	return i.ToResourceRangePtrOutputWithContext(context.Background())
}

func (i ResourceRangeArgs) ToResourceRangePtrOutputWithContext(ctx context.Context) ResourceRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRangeOutput).ToResourceRangePtrOutputWithContext(ctx)
}

// ResourceRangePtrInput is an input type that accepts ResourceRangeArgs, ResourceRangePtr and ResourceRangePtrOutput values.
// You can construct a concrete instance of `ResourceRangePtrInput` via:
//
//	        ResourceRangeArgs{...}
//
//	or:
//
//	        nil
type ResourceRangePtrInput interface {
	pulumi.Input

	ToResourceRangePtrOutput() ResourceRangePtrOutput
	ToResourceRangePtrOutputWithContext(context.Context) ResourceRangePtrOutput
}

type resourceRangePtrType ResourceRangeArgs

func ResourceRangePtr(v *ResourceRangeArgs) ResourceRangePtrInput {
	return (*resourceRangePtrType)(v)
}

func (*resourceRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRange)(nil)).Elem()
}

func (i *resourceRangePtrType) ToResourceRangePtrOutput() ResourceRangePtrOutput {
	return i.ToResourceRangePtrOutputWithContext(context.Background())
}

func (i *resourceRangePtrType) ToResourceRangePtrOutputWithContext(ctx context.Context) ResourceRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRangePtrOutput)
}

// Describes the resource range.
type ResourceRangeOutput struct{ *pulumi.OutputState }

func (ResourceRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRange)(nil)).Elem()
}

func (o ResourceRangeOutput) ToResourceRangeOutput() ResourceRangeOutput {
	return o
}

func (o ResourceRangeOutput) ToResourceRangeOutputWithContext(ctx context.Context) ResourceRangeOutput {
	return o
}

func (o ResourceRangeOutput) ToResourceRangePtrOutput() ResourceRangePtrOutput {
	return o.ToResourceRangePtrOutputWithContext(context.Background())
}

func (o ResourceRangeOutput) ToResourceRangePtrOutputWithContext(ctx context.Context) ResourceRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRange) *ResourceRange {
		return &v
	}).(ResourceRangePtrOutput)
}

// The maximum number of the resource.
func (o ResourceRangeOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRange) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum number of the resource.
func (o ResourceRangeOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRange) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type ResourceRangePtrOutput struct{ *pulumi.OutputState }

func (ResourceRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRange)(nil)).Elem()
}

func (o ResourceRangePtrOutput) ToResourceRangePtrOutput() ResourceRangePtrOutput {
	return o
}

func (o ResourceRangePtrOutput) ToResourceRangePtrOutputWithContext(ctx context.Context) ResourceRangePtrOutput {
	return o
}

func (o ResourceRangePtrOutput) Elem() ResourceRangeOutput {
	return o.ApplyT(func(v *ResourceRange) ResourceRange {
		if v != nil {
			return *v
		}
		var ret ResourceRange
		return ret
	}).(ResourceRangeOutput)
}

// The maximum number of the resource.
func (o ResourceRangePtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRange) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum number of the resource.
func (o ResourceRangePtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRange) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

// Describes the resource range.
type ResourceRangeResponse struct {
	// The maximum number of the resource.
	Max *int `pulumi:"max"`
	// The minimum number of the resource.
	Min *int `pulumi:"min"`
}

// Describes the resource range.
type ResourceRangeResponseOutput struct{ *pulumi.OutputState }

func (ResourceRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRangeResponse)(nil)).Elem()
}

func (o ResourceRangeResponseOutput) ToResourceRangeResponseOutput() ResourceRangeResponseOutput {
	return o
}

func (o ResourceRangeResponseOutput) ToResourceRangeResponseOutputWithContext(ctx context.Context) ResourceRangeResponseOutput {
	return o
}

// The maximum number of the resource.
func (o ResourceRangeResponseOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRangeResponse) *int { return v.Max }).(pulumi.IntPtrOutput)
}

// The minimum number of the resource.
func (o ResourceRangeResponseOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRangeResponse) *int { return v.Min }).(pulumi.IntPtrOutput)
}

type ResourceRangeResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceRangeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRangeResponse)(nil)).Elem()
}

func (o ResourceRangeResponsePtrOutput) ToResourceRangeResponsePtrOutput() ResourceRangeResponsePtrOutput {
	return o
}

func (o ResourceRangeResponsePtrOutput) ToResourceRangeResponsePtrOutputWithContext(ctx context.Context) ResourceRangeResponsePtrOutput {
	return o
}

func (o ResourceRangeResponsePtrOutput) Elem() ResourceRangeResponseOutput {
	return o.ApplyT(func(v *ResourceRangeResponse) ResourceRangeResponse {
		if v != nil {
			return *v
		}
		var ret ResourceRangeResponse
		return ret
	}).(ResourceRangeResponseOutput)
}

// The maximum number of the resource.
func (o ResourceRangeResponsePtrOutput) Max() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Max
	}).(pulumi.IntPtrOutput)
}

// The minimum number of the resource.
func (o ResourceRangeResponsePtrOutput) Min() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRangeResponse) *int {
		if v == nil {
			return nil
		}
		return v.Min
	}).(pulumi.IntPtrOutput)
}

type ResourceSharingProfile struct {
	// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
	SubscriptionIds []SubResource `pulumi:"subscriptionIds"`
}

// ResourceSharingProfileInput is an input type that accepts ResourceSharingProfileArgs and ResourceSharingProfileOutput values.
// You can construct a concrete instance of `ResourceSharingProfileInput` via:
//
//	ResourceSharingProfileArgs{...}
type ResourceSharingProfileInput interface {
	pulumi.Input

	ToResourceSharingProfileOutput() ResourceSharingProfileOutput
	ToResourceSharingProfileOutputWithContext(context.Context) ResourceSharingProfileOutput
}

type ResourceSharingProfileArgs struct {
	// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
	SubscriptionIds SubResourceArrayInput `pulumi:"subscriptionIds"`
}

func (ResourceSharingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSharingProfile)(nil)).Elem()
}

func (i ResourceSharingProfileArgs) ToResourceSharingProfileOutput() ResourceSharingProfileOutput {
	return i.ToResourceSharingProfileOutputWithContext(context.Background())
}

func (i ResourceSharingProfileArgs) ToResourceSharingProfileOutputWithContext(ctx context.Context) ResourceSharingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSharingProfileOutput)
}

func (i ResourceSharingProfileArgs) ToResourceSharingProfilePtrOutput() ResourceSharingProfilePtrOutput {
	return i.ToResourceSharingProfilePtrOutputWithContext(context.Background())
}

func (i ResourceSharingProfileArgs) ToResourceSharingProfilePtrOutputWithContext(ctx context.Context) ResourceSharingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSharingProfileOutput).ToResourceSharingProfilePtrOutputWithContext(ctx)
}

// ResourceSharingProfilePtrInput is an input type that accepts ResourceSharingProfileArgs, ResourceSharingProfilePtr and ResourceSharingProfilePtrOutput values.
// You can construct a concrete instance of `ResourceSharingProfilePtrInput` via:
//
//	        ResourceSharingProfileArgs{...}
//
//	or:
//
//	        nil
type ResourceSharingProfilePtrInput interface {
	pulumi.Input

	ToResourceSharingProfilePtrOutput() ResourceSharingProfilePtrOutput
	ToResourceSharingProfilePtrOutputWithContext(context.Context) ResourceSharingProfilePtrOutput
}

type resourceSharingProfilePtrType ResourceSharingProfileArgs

func ResourceSharingProfilePtr(v *ResourceSharingProfileArgs) ResourceSharingProfilePtrInput {
	return (*resourceSharingProfilePtrType)(v)
}

func (*resourceSharingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSharingProfile)(nil)).Elem()
}

func (i *resourceSharingProfilePtrType) ToResourceSharingProfilePtrOutput() ResourceSharingProfilePtrOutput {
	return i.ToResourceSharingProfilePtrOutputWithContext(context.Background())
}

func (i *resourceSharingProfilePtrType) ToResourceSharingProfilePtrOutputWithContext(ctx context.Context) ResourceSharingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSharingProfilePtrOutput)
}

type ResourceSharingProfileOutput struct{ *pulumi.OutputState }

func (ResourceSharingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSharingProfile)(nil)).Elem()
}

func (o ResourceSharingProfileOutput) ToResourceSharingProfileOutput() ResourceSharingProfileOutput {
	return o
}

func (o ResourceSharingProfileOutput) ToResourceSharingProfileOutputWithContext(ctx context.Context) ResourceSharingProfileOutput {
	return o
}

func (o ResourceSharingProfileOutput) ToResourceSharingProfilePtrOutput() ResourceSharingProfilePtrOutput {
	return o.ToResourceSharingProfilePtrOutputWithContext(context.Background())
}

func (o ResourceSharingProfileOutput) ToResourceSharingProfilePtrOutputWithContext(ctx context.Context) ResourceSharingProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSharingProfile) *ResourceSharingProfile {
		return &v
	}).(ResourceSharingProfilePtrOutput)
}

// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
func (o ResourceSharingProfileOutput) SubscriptionIds() SubResourceArrayOutput {
	return o.ApplyT(func(v ResourceSharingProfile) []SubResource { return v.SubscriptionIds }).(SubResourceArrayOutput)
}

type ResourceSharingProfilePtrOutput struct{ *pulumi.OutputState }

func (ResourceSharingProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSharingProfile)(nil)).Elem()
}

func (o ResourceSharingProfilePtrOutput) ToResourceSharingProfilePtrOutput() ResourceSharingProfilePtrOutput {
	return o
}

func (o ResourceSharingProfilePtrOutput) ToResourceSharingProfilePtrOutputWithContext(ctx context.Context) ResourceSharingProfilePtrOutput {
	return o
}

func (o ResourceSharingProfilePtrOutput) Elem() ResourceSharingProfileOutput {
	return o.ApplyT(func(v *ResourceSharingProfile) ResourceSharingProfile {
		if v != nil {
			return *v
		}
		var ret ResourceSharingProfile
		return ret
	}).(ResourceSharingProfileOutput)
}

// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
func (o ResourceSharingProfilePtrOutput) SubscriptionIds() SubResourceArrayOutput {
	return o.ApplyT(func(v *ResourceSharingProfile) []SubResource {
		if v == nil {
			return nil
		}
		return v.SubscriptionIds
	}).(SubResourceArrayOutput)
}

type ResourceSharingProfileResponse struct {
	// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
	SubscriptionIds []SubResourceResponse `pulumi:"subscriptionIds"`
}

type ResourceSharingProfileResponseOutput struct{ *pulumi.OutputState }

func (ResourceSharingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSharingProfileResponse)(nil)).Elem()
}

func (o ResourceSharingProfileResponseOutput) ToResourceSharingProfileResponseOutput() ResourceSharingProfileResponseOutput {
	return o
}

func (o ResourceSharingProfileResponseOutput) ToResourceSharingProfileResponseOutputWithContext(ctx context.Context) ResourceSharingProfileResponseOutput {
	return o
}

// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
func (o ResourceSharingProfileResponseOutput) SubscriptionIds() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v ResourceSharingProfileResponse) []SubResourceResponse { return v.SubscriptionIds }).(SubResourceResponseArrayOutput)
}

type ResourceSharingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSharingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSharingProfileResponse)(nil)).Elem()
}

func (o ResourceSharingProfileResponsePtrOutput) ToResourceSharingProfileResponsePtrOutput() ResourceSharingProfileResponsePtrOutput {
	return o
}

func (o ResourceSharingProfileResponsePtrOutput) ToResourceSharingProfileResponsePtrOutputWithContext(ctx context.Context) ResourceSharingProfileResponsePtrOutput {
	return o
}

func (o ResourceSharingProfileResponsePtrOutput) Elem() ResourceSharingProfileResponseOutput {
	return o.ApplyT(func(v *ResourceSharingProfileResponse) ResourceSharingProfileResponse {
		if v != nil {
			return *v
		}
		var ret ResourceSharingProfileResponse
		return ret
	}).(ResourceSharingProfileResponseOutput)
}

// Specifies an array of subscription resource IDs that capacity reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details.
func (o ResourceSharingProfileResponsePtrOutput) SubscriptionIds() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v *ResourceSharingProfileResponse) []SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.SubscriptionIds
	}).(SubResourceResponseArrayOutput)
}

// The properties of the source resource that this restore point collection is created from.
type RestorePointCollectionSourceProperties struct {
	// Resource Id of the source resource used to create this restore point collection
	Id *string `pulumi:"id"`
}

// RestorePointCollectionSourcePropertiesInput is an input type that accepts RestorePointCollectionSourcePropertiesArgs and RestorePointCollectionSourcePropertiesOutput values.
// You can construct a concrete instance of `RestorePointCollectionSourcePropertiesInput` via:
//
//	RestorePointCollectionSourcePropertiesArgs{...}
type RestorePointCollectionSourcePropertiesInput interface {
	pulumi.Input

	ToRestorePointCollectionSourcePropertiesOutput() RestorePointCollectionSourcePropertiesOutput
	ToRestorePointCollectionSourcePropertiesOutputWithContext(context.Context) RestorePointCollectionSourcePropertiesOutput
}

// The properties of the source resource that this restore point collection is created from.
type RestorePointCollectionSourcePropertiesArgs struct {
	// Resource Id of the source resource used to create this restore point collection
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (RestorePointCollectionSourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointCollectionSourceProperties)(nil)).Elem()
}

func (i RestorePointCollectionSourcePropertiesArgs) ToRestorePointCollectionSourcePropertiesOutput() RestorePointCollectionSourcePropertiesOutput {
	return i.ToRestorePointCollectionSourcePropertiesOutputWithContext(context.Background())
}

func (i RestorePointCollectionSourcePropertiesArgs) ToRestorePointCollectionSourcePropertiesOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointCollectionSourcePropertiesOutput)
}

func (i RestorePointCollectionSourcePropertiesArgs) ToRestorePointCollectionSourcePropertiesPtrOutput() RestorePointCollectionSourcePropertiesPtrOutput {
	return i.ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i RestorePointCollectionSourcePropertiesArgs) ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointCollectionSourcePropertiesOutput).ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(ctx)
}

// RestorePointCollectionSourcePropertiesPtrInput is an input type that accepts RestorePointCollectionSourcePropertiesArgs, RestorePointCollectionSourcePropertiesPtr and RestorePointCollectionSourcePropertiesPtrOutput values.
// You can construct a concrete instance of `RestorePointCollectionSourcePropertiesPtrInput` via:
//
//	        RestorePointCollectionSourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type RestorePointCollectionSourcePropertiesPtrInput interface {
	pulumi.Input

	ToRestorePointCollectionSourcePropertiesPtrOutput() RestorePointCollectionSourcePropertiesPtrOutput
	ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(context.Context) RestorePointCollectionSourcePropertiesPtrOutput
}

type restorePointCollectionSourcePropertiesPtrType RestorePointCollectionSourcePropertiesArgs

func RestorePointCollectionSourcePropertiesPtr(v *RestorePointCollectionSourcePropertiesArgs) RestorePointCollectionSourcePropertiesPtrInput {
	return (*restorePointCollectionSourcePropertiesPtrType)(v)
}

func (*restorePointCollectionSourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointCollectionSourceProperties)(nil)).Elem()
}

func (i *restorePointCollectionSourcePropertiesPtrType) ToRestorePointCollectionSourcePropertiesPtrOutput() RestorePointCollectionSourcePropertiesPtrOutput {
	return i.ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *restorePointCollectionSourcePropertiesPtrType) ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointCollectionSourcePropertiesPtrOutput)
}

// The properties of the source resource that this restore point collection is created from.
type RestorePointCollectionSourcePropertiesOutput struct{ *pulumi.OutputState }

func (RestorePointCollectionSourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointCollectionSourceProperties)(nil)).Elem()
}

func (o RestorePointCollectionSourcePropertiesOutput) ToRestorePointCollectionSourcePropertiesOutput() RestorePointCollectionSourcePropertiesOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesOutput) ToRestorePointCollectionSourcePropertiesOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesOutput) ToRestorePointCollectionSourcePropertiesPtrOutput() RestorePointCollectionSourcePropertiesPtrOutput {
	return o.ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(context.Background())
}

func (o RestorePointCollectionSourcePropertiesOutput) ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestorePointCollectionSourceProperties) *RestorePointCollectionSourceProperties {
		return &v
	}).(RestorePointCollectionSourcePropertiesPtrOutput)
}

// Resource Id of the source resource used to create this restore point collection
func (o RestorePointCollectionSourcePropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestorePointCollectionSourceProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type RestorePointCollectionSourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RestorePointCollectionSourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointCollectionSourceProperties)(nil)).Elem()
}

func (o RestorePointCollectionSourcePropertiesPtrOutput) ToRestorePointCollectionSourcePropertiesPtrOutput() RestorePointCollectionSourcePropertiesPtrOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesPtrOutput) ToRestorePointCollectionSourcePropertiesPtrOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesPtrOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesPtrOutput) Elem() RestorePointCollectionSourcePropertiesOutput {
	return o.ApplyT(func(v *RestorePointCollectionSourceProperties) RestorePointCollectionSourceProperties {
		if v != nil {
			return *v
		}
		var ret RestorePointCollectionSourceProperties
		return ret
	}).(RestorePointCollectionSourcePropertiesOutput)
}

// Resource Id of the source resource used to create this restore point collection
func (o RestorePointCollectionSourcePropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointCollectionSourceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The properties of the source resource that this restore point collection is created from.
type RestorePointCollectionSourcePropertiesResponse struct {
	// Resource Id of the source resource used to create this restore point collection
	Id *string `pulumi:"id"`
	// Location of the source resource used to create this restore point collection.
	Location string `pulumi:"location"`
}

// The properties of the source resource that this restore point collection is created from.
type RestorePointCollectionSourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (RestorePointCollectionSourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointCollectionSourcePropertiesResponse)(nil)).Elem()
}

func (o RestorePointCollectionSourcePropertiesResponseOutput) ToRestorePointCollectionSourcePropertiesResponseOutput() RestorePointCollectionSourcePropertiesResponseOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesResponseOutput) ToRestorePointCollectionSourcePropertiesResponseOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesResponseOutput {
	return o
}

// Resource Id of the source resource used to create this restore point collection
func (o RestorePointCollectionSourcePropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestorePointCollectionSourcePropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Location of the source resource used to create this restore point collection.
func (o RestorePointCollectionSourcePropertiesResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointCollectionSourcePropertiesResponse) string { return v.Location }).(pulumi.StringOutput)
}

type RestorePointCollectionSourcePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RestorePointCollectionSourcePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointCollectionSourcePropertiesResponse)(nil)).Elem()
}

func (o RestorePointCollectionSourcePropertiesResponsePtrOutput) ToRestorePointCollectionSourcePropertiesResponsePtrOutput() RestorePointCollectionSourcePropertiesResponsePtrOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesResponsePtrOutput) ToRestorePointCollectionSourcePropertiesResponsePtrOutputWithContext(ctx context.Context) RestorePointCollectionSourcePropertiesResponsePtrOutput {
	return o
}

func (o RestorePointCollectionSourcePropertiesResponsePtrOutput) Elem() RestorePointCollectionSourcePropertiesResponseOutput {
	return o.ApplyT(func(v *RestorePointCollectionSourcePropertiesResponse) RestorePointCollectionSourcePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret RestorePointCollectionSourcePropertiesResponse
		return ret
	}).(RestorePointCollectionSourcePropertiesResponseOutput)
}

// Resource Id of the source resource used to create this restore point collection
func (o RestorePointCollectionSourcePropertiesResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointCollectionSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Location of the source resource used to create this restore point collection.
func (o RestorePointCollectionSourcePropertiesResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointCollectionSourcePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
type RestorePointEncryption struct {
	// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// The type of key used to encrypt the data of the disk restore point.
	Type *string `pulumi:"type"`
}

// RestorePointEncryptionInput is an input type that accepts RestorePointEncryptionArgs and RestorePointEncryptionOutput values.
// You can construct a concrete instance of `RestorePointEncryptionInput` via:
//
//	RestorePointEncryptionArgs{...}
type RestorePointEncryptionInput interface {
	pulumi.Input

	ToRestorePointEncryptionOutput() RestorePointEncryptionOutput
	ToRestorePointEncryptionOutputWithContext(context.Context) RestorePointEncryptionOutput
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
type RestorePointEncryptionArgs struct {
	// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// The type of key used to encrypt the data of the disk restore point.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RestorePointEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointEncryption)(nil)).Elem()
}

func (i RestorePointEncryptionArgs) ToRestorePointEncryptionOutput() RestorePointEncryptionOutput {
	return i.ToRestorePointEncryptionOutputWithContext(context.Background())
}

func (i RestorePointEncryptionArgs) ToRestorePointEncryptionOutputWithContext(ctx context.Context) RestorePointEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointEncryptionOutput)
}

func (i RestorePointEncryptionArgs) ToRestorePointEncryptionPtrOutput() RestorePointEncryptionPtrOutput {
	return i.ToRestorePointEncryptionPtrOutputWithContext(context.Background())
}

func (i RestorePointEncryptionArgs) ToRestorePointEncryptionPtrOutputWithContext(ctx context.Context) RestorePointEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointEncryptionOutput).ToRestorePointEncryptionPtrOutputWithContext(ctx)
}

// RestorePointEncryptionPtrInput is an input type that accepts RestorePointEncryptionArgs, RestorePointEncryptionPtr and RestorePointEncryptionPtrOutput values.
// You can construct a concrete instance of `RestorePointEncryptionPtrInput` via:
//
//	        RestorePointEncryptionArgs{...}
//
//	or:
//
//	        nil
type RestorePointEncryptionPtrInput interface {
	pulumi.Input

	ToRestorePointEncryptionPtrOutput() RestorePointEncryptionPtrOutput
	ToRestorePointEncryptionPtrOutputWithContext(context.Context) RestorePointEncryptionPtrOutput
}

type restorePointEncryptionPtrType RestorePointEncryptionArgs

func RestorePointEncryptionPtr(v *RestorePointEncryptionArgs) RestorePointEncryptionPtrInput {
	return (*restorePointEncryptionPtrType)(v)
}

func (*restorePointEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointEncryption)(nil)).Elem()
}

func (i *restorePointEncryptionPtrType) ToRestorePointEncryptionPtrOutput() RestorePointEncryptionPtrOutput {
	return i.ToRestorePointEncryptionPtrOutputWithContext(context.Background())
}

func (i *restorePointEncryptionPtrType) ToRestorePointEncryptionPtrOutputWithContext(ctx context.Context) RestorePointEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointEncryptionPtrOutput)
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
type RestorePointEncryptionOutput struct{ *pulumi.OutputState }

func (RestorePointEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointEncryption)(nil)).Elem()
}

func (o RestorePointEncryptionOutput) ToRestorePointEncryptionOutput() RestorePointEncryptionOutput {
	return o
}

func (o RestorePointEncryptionOutput) ToRestorePointEncryptionOutputWithContext(ctx context.Context) RestorePointEncryptionOutput {
	return o
}

func (o RestorePointEncryptionOutput) ToRestorePointEncryptionPtrOutput() RestorePointEncryptionPtrOutput {
	return o.ToRestorePointEncryptionPtrOutputWithContext(context.Background())
}

func (o RestorePointEncryptionOutput) ToRestorePointEncryptionPtrOutputWithContext(ctx context.Context) RestorePointEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestorePointEncryption) *RestorePointEncryption {
		return &v
	}).(RestorePointEncryptionPtrOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
func (o RestorePointEncryptionOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v RestorePointEncryption) *DiskEncryptionSetParameters { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersPtrOutput)
}

// The type of key used to encrypt the data of the disk restore point.
func (o RestorePointEncryptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestorePointEncryption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RestorePointEncryptionPtrOutput struct{ *pulumi.OutputState }

func (RestorePointEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointEncryption)(nil)).Elem()
}

func (o RestorePointEncryptionPtrOutput) ToRestorePointEncryptionPtrOutput() RestorePointEncryptionPtrOutput {
	return o
}

func (o RestorePointEncryptionPtrOutput) ToRestorePointEncryptionPtrOutputWithContext(ctx context.Context) RestorePointEncryptionPtrOutput {
	return o
}

func (o RestorePointEncryptionPtrOutput) Elem() RestorePointEncryptionOutput {
	return o.ApplyT(func(v *RestorePointEncryption) RestorePointEncryption {
		if v != nil {
			return *v
		}
		var ret RestorePointEncryption
		return ret
	}).(RestorePointEncryptionOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
func (o RestorePointEncryptionPtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v *RestorePointEncryption) *DiskEncryptionSetParameters {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersPtrOutput)
}

// The type of key used to encrypt the data of the disk restore point.
func (o RestorePointEncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
type RestorePointEncryptionResponse struct {
	// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// The type of key used to encrypt the data of the disk restore point.
	Type *string `pulumi:"type"`
}

// Encryption at rest settings for disk restore point. It is an optional property that can be specified in the input while creating a restore point.
type RestorePointEncryptionResponseOutput struct{ *pulumi.OutputState }

func (RestorePointEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointEncryptionResponse)(nil)).Elem()
}

func (o RestorePointEncryptionResponseOutput) ToRestorePointEncryptionResponseOutput() RestorePointEncryptionResponseOutput {
	return o
}

func (o RestorePointEncryptionResponseOutput) ToRestorePointEncryptionResponseOutputWithContext(ctx context.Context) RestorePointEncryptionResponseOutput {
	return o
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
func (o RestorePointEncryptionResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v RestorePointEncryptionResponse) *DiskEncryptionSetParametersResponse {
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// The type of key used to encrypt the data of the disk restore point.
func (o RestorePointEncryptionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestorePointEncryptionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RestorePointEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (RestorePointEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointEncryptionResponse)(nil)).Elem()
}

func (o RestorePointEncryptionResponsePtrOutput) ToRestorePointEncryptionResponsePtrOutput() RestorePointEncryptionResponsePtrOutput {
	return o
}

func (o RestorePointEncryptionResponsePtrOutput) ToRestorePointEncryptionResponsePtrOutputWithContext(ctx context.Context) RestorePointEncryptionResponsePtrOutput {
	return o
}

func (o RestorePointEncryptionResponsePtrOutput) Elem() RestorePointEncryptionResponseOutput {
	return o.ApplyT(func(v *RestorePointEncryptionResponse) RestorePointEncryptionResponse {
		if v != nil {
			return *v
		}
		var ret RestorePointEncryptionResponse
		return ret
	}).(RestorePointEncryptionResponseOutput)
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk. **Note:** The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
func (o RestorePointEncryptionResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointEncryptionResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// The type of key used to encrypt the data of the disk restore point.
func (o RestorePointEncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The instance view of a restore point.
type RestorePointInstanceViewResponse struct {
	// The disk restore points information.
	DiskRestorePoints []DiskRestorePointInstanceViewResponse `pulumi:"diskRestorePoints"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of a restore point.
type RestorePointInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (RestorePointInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointInstanceViewResponse)(nil)).Elem()
}

func (o RestorePointInstanceViewResponseOutput) ToRestorePointInstanceViewResponseOutput() RestorePointInstanceViewResponseOutput {
	return o
}

func (o RestorePointInstanceViewResponseOutput) ToRestorePointInstanceViewResponseOutputWithContext(ctx context.Context) RestorePointInstanceViewResponseOutput {
	return o
}

// The disk restore points information.
func (o RestorePointInstanceViewResponseOutput) DiskRestorePoints() DiskRestorePointInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v RestorePointInstanceViewResponse) []DiskRestorePointInstanceViewResponse {
		return v.DiskRestorePoints
	}).(DiskRestorePointInstanceViewResponseArrayOutput)
}

// The resource status information.
func (o RestorePointInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v RestorePointInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// Restore Point details.
type RestorePointResponse struct {
	// ConsistencyMode of the RestorePoint. Can be specified in the input while creating a restore point. For now, only CrashConsistent is accepted as a valid input. Please refer to https://aka.ms/RestorePoints for more details.
	ConsistencyMode *string `pulumi:"consistencyMode"`
	// List of disk resource ids that the customer wishes to exclude from the restore point. If no disks are specified, all disks will be included.
	ExcludeDisks []ApiEntityReferenceResponse `pulumi:"excludeDisks"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The restore point instance view.
	InstanceView RestorePointInstanceViewResponse `pulumi:"instanceView"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Gets the provisioning state of the restore point.
	ProvisioningState string `pulumi:"provisioningState"`
	// Gets the details of the VM captured at the time of the restore point creation.
	SourceMetadata *RestorePointSourceMetadataResponse `pulumi:"sourceMetadata"`
	// Resource Id of the source restore point from which a copy needs to be created.
	SourceRestorePoint *ApiEntityReferenceResponse `pulumi:"sourceRestorePoint"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Gets the creation time of the restore point.
	TimeCreated *string `pulumi:"timeCreated"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Restore Point details.
type RestorePointResponseOutput struct{ *pulumi.OutputState }

func (RestorePointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointResponse)(nil)).Elem()
}

func (o RestorePointResponseOutput) ToRestorePointResponseOutput() RestorePointResponseOutput {
	return o
}

func (o RestorePointResponseOutput) ToRestorePointResponseOutputWithContext(ctx context.Context) RestorePointResponseOutput {
	return o
}

// ConsistencyMode of the RestorePoint. Can be specified in the input while creating a restore point. For now, only CrashConsistent is accepted as a valid input. Please refer to https://aka.ms/RestorePoints for more details.
func (o RestorePointResponseOutput) ConsistencyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestorePointResponse) *string { return v.ConsistencyMode }).(pulumi.StringPtrOutput)
}

// List of disk resource ids that the customer wishes to exclude from the restore point. If no disks are specified, all disks will be included.
func (o RestorePointResponseOutput) ExcludeDisks() ApiEntityReferenceResponseArrayOutput {
	return o.ApplyT(func(v RestorePointResponse) []ApiEntityReferenceResponse { return v.ExcludeDisks }).(ApiEntityReferenceResponseArrayOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o RestorePointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The restore point instance view.
func (o RestorePointResponseOutput) InstanceView() RestorePointInstanceViewResponseOutput {
	return o.ApplyT(func(v RestorePointResponse) RestorePointInstanceViewResponse { return v.InstanceView }).(RestorePointInstanceViewResponseOutput)
}

// The name of the resource
func (o RestorePointResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the provisioning state of the restore point.
func (o RestorePointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Gets the details of the VM captured at the time of the restore point creation.
func (o RestorePointResponseOutput) SourceMetadata() RestorePointSourceMetadataResponsePtrOutput {
	return o.ApplyT(func(v RestorePointResponse) *RestorePointSourceMetadataResponse { return v.SourceMetadata }).(RestorePointSourceMetadataResponsePtrOutput)
}

// Resource Id of the source restore point from which a copy needs to be created.
func (o RestorePointResponseOutput) SourceRestorePoint() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v RestorePointResponse) *ApiEntityReferenceResponse { return v.SourceRestorePoint }).(ApiEntityReferenceResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o RestorePointResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v RestorePointResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Gets the creation time of the restore point.
func (o RestorePointResponseOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestorePointResponse) *string { return v.TimeCreated }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o RestorePointResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RestorePointResponseArrayOutput struct{ *pulumi.OutputState }

func (RestorePointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestorePointResponse)(nil)).Elem()
}

func (o RestorePointResponseArrayOutput) ToRestorePointResponseArrayOutput() RestorePointResponseArrayOutput {
	return o
}

func (o RestorePointResponseArrayOutput) ToRestorePointResponseArrayOutputWithContext(ctx context.Context) RestorePointResponseArrayOutput {
	return o
}

func (o RestorePointResponseArrayOutput) Index(i pulumi.IntInput) RestorePointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestorePointResponse {
		return vs[0].([]RestorePointResponse)[vs[1].(int)]
	}).(RestorePointResponseOutput)
}

// Describes the properties of the Virtual Machine for which the restore point was created. The properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the time of the restore point creation.
type RestorePointSourceMetadata struct {
	// Gets the storage profile.
	StorageProfile *RestorePointSourceVMStorageProfile `pulumi:"storageProfile"`
}

// RestorePointSourceMetadataInput is an input type that accepts RestorePointSourceMetadataArgs and RestorePointSourceMetadataOutput values.
// You can construct a concrete instance of `RestorePointSourceMetadataInput` via:
//
//	RestorePointSourceMetadataArgs{...}
type RestorePointSourceMetadataInput interface {
	pulumi.Input

	ToRestorePointSourceMetadataOutput() RestorePointSourceMetadataOutput
	ToRestorePointSourceMetadataOutputWithContext(context.Context) RestorePointSourceMetadataOutput
}

// Describes the properties of the Virtual Machine for which the restore point was created. The properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the time of the restore point creation.
type RestorePointSourceMetadataArgs struct {
	// Gets the storage profile.
	StorageProfile RestorePointSourceVMStorageProfilePtrInput `pulumi:"storageProfile"`
}

func (RestorePointSourceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceMetadata)(nil)).Elem()
}

func (i RestorePointSourceMetadataArgs) ToRestorePointSourceMetadataOutput() RestorePointSourceMetadataOutput {
	return i.ToRestorePointSourceMetadataOutputWithContext(context.Background())
}

func (i RestorePointSourceMetadataArgs) ToRestorePointSourceMetadataOutputWithContext(ctx context.Context) RestorePointSourceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceMetadataOutput)
}

func (i RestorePointSourceMetadataArgs) ToRestorePointSourceMetadataPtrOutput() RestorePointSourceMetadataPtrOutput {
	return i.ToRestorePointSourceMetadataPtrOutputWithContext(context.Background())
}

func (i RestorePointSourceMetadataArgs) ToRestorePointSourceMetadataPtrOutputWithContext(ctx context.Context) RestorePointSourceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceMetadataOutput).ToRestorePointSourceMetadataPtrOutputWithContext(ctx)
}

// RestorePointSourceMetadataPtrInput is an input type that accepts RestorePointSourceMetadataArgs, RestorePointSourceMetadataPtr and RestorePointSourceMetadataPtrOutput values.
// You can construct a concrete instance of `RestorePointSourceMetadataPtrInput` via:
//
//	        RestorePointSourceMetadataArgs{...}
//
//	or:
//
//	        nil
type RestorePointSourceMetadataPtrInput interface {
	pulumi.Input

	ToRestorePointSourceMetadataPtrOutput() RestorePointSourceMetadataPtrOutput
	ToRestorePointSourceMetadataPtrOutputWithContext(context.Context) RestorePointSourceMetadataPtrOutput
}

type restorePointSourceMetadataPtrType RestorePointSourceMetadataArgs

func RestorePointSourceMetadataPtr(v *RestorePointSourceMetadataArgs) RestorePointSourceMetadataPtrInput {
	return (*restorePointSourceMetadataPtrType)(v)
}

func (*restorePointSourceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceMetadata)(nil)).Elem()
}

func (i *restorePointSourceMetadataPtrType) ToRestorePointSourceMetadataPtrOutput() RestorePointSourceMetadataPtrOutput {
	return i.ToRestorePointSourceMetadataPtrOutputWithContext(context.Background())
}

func (i *restorePointSourceMetadataPtrType) ToRestorePointSourceMetadataPtrOutputWithContext(ctx context.Context) RestorePointSourceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceMetadataPtrOutput)
}

// Describes the properties of the Virtual Machine for which the restore point was created. The properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the time of the restore point creation.
type RestorePointSourceMetadataOutput struct{ *pulumi.OutputState }

func (RestorePointSourceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceMetadata)(nil)).Elem()
}

func (o RestorePointSourceMetadataOutput) ToRestorePointSourceMetadataOutput() RestorePointSourceMetadataOutput {
	return o
}

func (o RestorePointSourceMetadataOutput) ToRestorePointSourceMetadataOutputWithContext(ctx context.Context) RestorePointSourceMetadataOutput {
	return o
}

func (o RestorePointSourceMetadataOutput) ToRestorePointSourceMetadataPtrOutput() RestorePointSourceMetadataPtrOutput {
	return o.ToRestorePointSourceMetadataPtrOutputWithContext(context.Background())
}

func (o RestorePointSourceMetadataOutput) ToRestorePointSourceMetadataPtrOutputWithContext(ctx context.Context) RestorePointSourceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestorePointSourceMetadata) *RestorePointSourceMetadata {
		return &v
	}).(RestorePointSourceMetadataPtrOutput)
}

// Gets the storage profile.
func (o RestorePointSourceMetadataOutput) StorageProfile() RestorePointSourceVMStorageProfilePtrOutput {
	return o.ApplyT(func(v RestorePointSourceMetadata) *RestorePointSourceVMStorageProfile { return v.StorageProfile }).(RestorePointSourceVMStorageProfilePtrOutput)
}

type RestorePointSourceMetadataPtrOutput struct{ *pulumi.OutputState }

func (RestorePointSourceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceMetadata)(nil)).Elem()
}

func (o RestorePointSourceMetadataPtrOutput) ToRestorePointSourceMetadataPtrOutput() RestorePointSourceMetadataPtrOutput {
	return o
}

func (o RestorePointSourceMetadataPtrOutput) ToRestorePointSourceMetadataPtrOutputWithContext(ctx context.Context) RestorePointSourceMetadataPtrOutput {
	return o
}

func (o RestorePointSourceMetadataPtrOutput) Elem() RestorePointSourceMetadataOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadata) RestorePointSourceMetadata {
		if v != nil {
			return *v
		}
		var ret RestorePointSourceMetadata
		return ret
	}).(RestorePointSourceMetadataOutput)
}

// Gets the storage profile.
func (o RestorePointSourceMetadataPtrOutput) StorageProfile() RestorePointSourceVMStorageProfilePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadata) *RestorePointSourceVMStorageProfile {
		if v == nil {
			return nil
		}
		return v.StorageProfile
	}).(RestorePointSourceVMStorageProfilePtrOutput)
}

// Describes the properties of the Virtual Machine for which the restore point was created. The properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the time of the restore point creation.
type RestorePointSourceMetadataResponse struct {
	// Gets the diagnostics profile.
	DiagnosticsProfile DiagnosticsProfileResponse `pulumi:"diagnosticsProfile"`
	// Gets the hardware profile.
	HardwareProfile HardwareProfileResponse `pulumi:"hardwareProfile"`
	// HyperVGeneration of the source VM for which restore point is captured.
	HyperVGeneration string `pulumi:"hyperVGeneration"`
	// Gets the license type, which is for bring your own license scenario.
	LicenseType string `pulumi:"licenseType"`
	// Location of the VM from which the restore point was created.
	Location string `pulumi:"location"`
	// Gets the OS profile.
	OsProfile OSProfileResponse `pulumi:"osProfile"`
	// Gets the security profile.
	SecurityProfile SecurityProfileResponse `pulumi:"securityProfile"`
	// Gets the storage profile.
	StorageProfile *RestorePointSourceVMStorageProfileResponse `pulumi:"storageProfile"`
	// UserData associated with the source VM for which restore point is captured, which is a base-64 encoded value.
	UserData string `pulumi:"userData"`
	// Gets the virtual machine unique id.
	VmId string `pulumi:"vmId"`
}

// Describes the properties of the Virtual Machine for which the restore point was created. The properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the time of the restore point creation.
type RestorePointSourceMetadataResponseOutput struct{ *pulumi.OutputState }

func (RestorePointSourceMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceMetadataResponse)(nil)).Elem()
}

func (o RestorePointSourceMetadataResponseOutput) ToRestorePointSourceMetadataResponseOutput() RestorePointSourceMetadataResponseOutput {
	return o
}

func (o RestorePointSourceMetadataResponseOutput) ToRestorePointSourceMetadataResponseOutputWithContext(ctx context.Context) RestorePointSourceMetadataResponseOutput {
	return o
}

// Gets the diagnostics profile.
func (o RestorePointSourceMetadataResponseOutput) DiagnosticsProfile() DiagnosticsProfileResponseOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) DiagnosticsProfileResponse { return v.DiagnosticsProfile }).(DiagnosticsProfileResponseOutput)
}

// Gets the hardware profile.
func (o RestorePointSourceMetadataResponseOutput) HardwareProfile() HardwareProfileResponseOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) HardwareProfileResponse { return v.HardwareProfile }).(HardwareProfileResponseOutput)
}

// HyperVGeneration of the source VM for which restore point is captured.
func (o RestorePointSourceMetadataResponseOutput) HyperVGeneration() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) string { return v.HyperVGeneration }).(pulumi.StringOutput)
}

// Gets the license type, which is for bring your own license scenario.
func (o RestorePointSourceMetadataResponseOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) string { return v.LicenseType }).(pulumi.StringOutput)
}

// Location of the VM from which the restore point was created.
func (o RestorePointSourceMetadataResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Gets the OS profile.
func (o RestorePointSourceMetadataResponseOutput) OsProfile() OSProfileResponseOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) OSProfileResponse { return v.OsProfile }).(OSProfileResponseOutput)
}

// Gets the security profile.
func (o RestorePointSourceMetadataResponseOutput) SecurityProfile() SecurityProfileResponseOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) SecurityProfileResponse { return v.SecurityProfile }).(SecurityProfileResponseOutput)
}

// Gets the storage profile.
func (o RestorePointSourceMetadataResponseOutput) StorageProfile() RestorePointSourceVMStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) *RestorePointSourceVMStorageProfileResponse {
		return v.StorageProfile
	}).(RestorePointSourceVMStorageProfileResponsePtrOutput)
}

// UserData associated with the source VM for which restore point is captured, which is a base-64 encoded value.
func (o RestorePointSourceMetadataResponseOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) string { return v.UserData }).(pulumi.StringOutput)
}

// Gets the virtual machine unique id.
func (o RestorePointSourceMetadataResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceMetadataResponse) string { return v.VmId }).(pulumi.StringOutput)
}

type RestorePointSourceMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (RestorePointSourceMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceMetadataResponse)(nil)).Elem()
}

func (o RestorePointSourceMetadataResponsePtrOutput) ToRestorePointSourceMetadataResponsePtrOutput() RestorePointSourceMetadataResponsePtrOutput {
	return o
}

func (o RestorePointSourceMetadataResponsePtrOutput) ToRestorePointSourceMetadataResponsePtrOutputWithContext(ctx context.Context) RestorePointSourceMetadataResponsePtrOutput {
	return o
}

func (o RestorePointSourceMetadataResponsePtrOutput) Elem() RestorePointSourceMetadataResponseOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) RestorePointSourceMetadataResponse {
		if v != nil {
			return *v
		}
		var ret RestorePointSourceMetadataResponse
		return ret
	}).(RestorePointSourceMetadataResponseOutput)
}

// Gets the diagnostics profile.
func (o RestorePointSourceMetadataResponsePtrOutput) DiagnosticsProfile() DiagnosticsProfileResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *DiagnosticsProfileResponse {
		if v == nil {
			return nil
		}
		return &v.DiagnosticsProfile
	}).(DiagnosticsProfileResponsePtrOutput)
}

// Gets the hardware profile.
func (o RestorePointSourceMetadataResponsePtrOutput) HardwareProfile() HardwareProfileResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *HardwareProfileResponse {
		if v == nil {
			return nil
		}
		return &v.HardwareProfile
	}).(HardwareProfileResponsePtrOutput)
}

// HyperVGeneration of the source VM for which restore point is captured.
func (o RestorePointSourceMetadataResponsePtrOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HyperVGeneration
	}).(pulumi.StringPtrOutput)
}

// Gets the license type, which is for bring your own license scenario.
func (o RestorePointSourceMetadataResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Location of the VM from which the restore point was created.
func (o RestorePointSourceMetadataResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Gets the OS profile.
func (o RestorePointSourceMetadataResponsePtrOutput) OsProfile() OSProfileResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *OSProfileResponse {
		if v == nil {
			return nil
		}
		return &v.OsProfile
	}).(OSProfileResponsePtrOutput)
}

// Gets the security profile.
func (o RestorePointSourceMetadataResponsePtrOutput) SecurityProfile() SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *SecurityProfileResponse {
		if v == nil {
			return nil
		}
		return &v.SecurityProfile
	}).(SecurityProfileResponsePtrOutput)
}

// Gets the storage profile.
func (o RestorePointSourceMetadataResponsePtrOutput) StorageProfile() RestorePointSourceVMStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *RestorePointSourceVMStorageProfileResponse {
		if v == nil {
			return nil
		}
		return v.StorageProfile
	}).(RestorePointSourceVMStorageProfileResponsePtrOutput)
}

// UserData associated with the source VM for which restore point is captured, which is a base-64 encoded value.
func (o RestorePointSourceMetadataResponsePtrOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserData
	}).(pulumi.StringPtrOutput)
}

// Gets the virtual machine unique id.
func (o RestorePointSourceMetadataResponsePtrOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VmId
	}).(pulumi.StringPtrOutput)
}

// Describes a data disk.
type RestorePointSourceVMDataDisk struct {
	// Contains Disk Restore Point properties.
	DiskRestorePoint *DiskRestorePointAttributes `pulumi:"diskRestorePoint"`
	// Contains the managed disk details.
	ManagedDisk *ManagedDiskParameters `pulumi:"managedDisk"`
}

// RestorePointSourceVMDataDiskInput is an input type that accepts RestorePointSourceVMDataDiskArgs and RestorePointSourceVMDataDiskOutput values.
// You can construct a concrete instance of `RestorePointSourceVMDataDiskInput` via:
//
//	RestorePointSourceVMDataDiskArgs{...}
type RestorePointSourceVMDataDiskInput interface {
	pulumi.Input

	ToRestorePointSourceVMDataDiskOutput() RestorePointSourceVMDataDiskOutput
	ToRestorePointSourceVMDataDiskOutputWithContext(context.Context) RestorePointSourceVMDataDiskOutput
}

// Describes a data disk.
type RestorePointSourceVMDataDiskArgs struct {
	// Contains Disk Restore Point properties.
	DiskRestorePoint DiskRestorePointAttributesPtrInput `pulumi:"diskRestorePoint"`
	// Contains the managed disk details.
	ManagedDisk ManagedDiskParametersPtrInput `pulumi:"managedDisk"`
}

func (RestorePointSourceVMDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMDataDisk)(nil)).Elem()
}

func (i RestorePointSourceVMDataDiskArgs) ToRestorePointSourceVMDataDiskOutput() RestorePointSourceVMDataDiskOutput {
	return i.ToRestorePointSourceVMDataDiskOutputWithContext(context.Background())
}

func (i RestorePointSourceVMDataDiskArgs) ToRestorePointSourceVMDataDiskOutputWithContext(ctx context.Context) RestorePointSourceVMDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMDataDiskOutput)
}

// RestorePointSourceVMDataDiskArrayInput is an input type that accepts RestorePointSourceVMDataDiskArray and RestorePointSourceVMDataDiskArrayOutput values.
// You can construct a concrete instance of `RestorePointSourceVMDataDiskArrayInput` via:
//
//	RestorePointSourceVMDataDiskArray{ RestorePointSourceVMDataDiskArgs{...} }
type RestorePointSourceVMDataDiskArrayInput interface {
	pulumi.Input

	ToRestorePointSourceVMDataDiskArrayOutput() RestorePointSourceVMDataDiskArrayOutput
	ToRestorePointSourceVMDataDiskArrayOutputWithContext(context.Context) RestorePointSourceVMDataDiskArrayOutput
}

type RestorePointSourceVMDataDiskArray []RestorePointSourceVMDataDiskInput

func (RestorePointSourceVMDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestorePointSourceVMDataDisk)(nil)).Elem()
}

func (i RestorePointSourceVMDataDiskArray) ToRestorePointSourceVMDataDiskArrayOutput() RestorePointSourceVMDataDiskArrayOutput {
	return i.ToRestorePointSourceVMDataDiskArrayOutputWithContext(context.Background())
}

func (i RestorePointSourceVMDataDiskArray) ToRestorePointSourceVMDataDiskArrayOutputWithContext(ctx context.Context) RestorePointSourceVMDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMDataDiskArrayOutput)
}

// Describes a data disk.
type RestorePointSourceVMDataDiskOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMDataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMDataDisk)(nil)).Elem()
}

func (o RestorePointSourceVMDataDiskOutput) ToRestorePointSourceVMDataDiskOutput() RestorePointSourceVMDataDiskOutput {
	return o
}

func (o RestorePointSourceVMDataDiskOutput) ToRestorePointSourceVMDataDiskOutputWithContext(ctx context.Context) RestorePointSourceVMDataDiskOutput {
	return o
}

// Contains Disk Restore Point properties.
func (o RestorePointSourceVMDataDiskOutput) DiskRestorePoint() DiskRestorePointAttributesPtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDisk) *DiskRestorePointAttributes { return v.DiskRestorePoint }).(DiskRestorePointAttributesPtrOutput)
}

// Contains the managed disk details.
func (o RestorePointSourceVMDataDiskOutput) ManagedDisk() ManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDisk) *ManagedDiskParameters { return v.ManagedDisk }).(ManagedDiskParametersPtrOutput)
}

type RestorePointSourceVMDataDiskArrayOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMDataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestorePointSourceVMDataDisk)(nil)).Elem()
}

func (o RestorePointSourceVMDataDiskArrayOutput) ToRestorePointSourceVMDataDiskArrayOutput() RestorePointSourceVMDataDiskArrayOutput {
	return o
}

func (o RestorePointSourceVMDataDiskArrayOutput) ToRestorePointSourceVMDataDiskArrayOutputWithContext(ctx context.Context) RestorePointSourceVMDataDiskArrayOutput {
	return o
}

func (o RestorePointSourceVMDataDiskArrayOutput) Index(i pulumi.IntInput) RestorePointSourceVMDataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestorePointSourceVMDataDisk {
		return vs[0].([]RestorePointSourceVMDataDisk)[vs[1].(int)]
	}).(RestorePointSourceVMDataDiskOutput)
}

// Describes a data disk.
type RestorePointSourceVMDataDiskResponse struct {
	// Gets the caching type.
	Caching string `pulumi:"caching"`
	// Contains Disk Restore Point properties.
	DiskRestorePoint *DiskRestorePointAttributesResponse `pulumi:"diskRestorePoint"`
	// Gets the initial disk size in GB for blank data disks, and the new desired size for existing OS and Data disks.
	DiskSizeGB int `pulumi:"diskSizeGB"`
	// Gets the logical unit number.
	Lun int `pulumi:"lun"`
	// Contains the managed disk details.
	ManagedDisk *ManagedDiskParametersResponse `pulumi:"managedDisk"`
	// Gets the disk name.
	Name string `pulumi:"name"`
	// Shows true if the disk is write-accelerator enabled.
	WriteAcceleratorEnabled bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a data disk.
type RestorePointSourceVMDataDiskResponseOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMDataDiskResponse)(nil)).Elem()
}

func (o RestorePointSourceVMDataDiskResponseOutput) ToRestorePointSourceVMDataDiskResponseOutput() RestorePointSourceVMDataDiskResponseOutput {
	return o
}

func (o RestorePointSourceVMDataDiskResponseOutput) ToRestorePointSourceVMDataDiskResponseOutputWithContext(ctx context.Context) RestorePointSourceVMDataDiskResponseOutput {
	return o
}

// Gets the caching type.
func (o RestorePointSourceVMDataDiskResponseOutput) Caching() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) string { return v.Caching }).(pulumi.StringOutput)
}

// Contains Disk Restore Point properties.
func (o RestorePointSourceVMDataDiskResponseOutput) DiskRestorePoint() DiskRestorePointAttributesResponsePtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) *DiskRestorePointAttributesResponse {
		return v.DiskRestorePoint
	}).(DiskRestorePointAttributesResponsePtrOutput)
}

// Gets the initial disk size in GB for blank data disks, and the new desired size for existing OS and Data disks.
func (o RestorePointSourceVMDataDiskResponseOutput) DiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) int { return v.DiskSizeGB }).(pulumi.IntOutput)
}

// Gets the logical unit number.
func (o RestorePointSourceVMDataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// Contains the managed disk details.
func (o RestorePointSourceVMDataDiskResponseOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) *ManagedDiskParametersResponse { return v.ManagedDisk }).(ManagedDiskParametersResponsePtrOutput)
}

// Gets the disk name.
func (o RestorePointSourceVMDataDiskResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Shows true if the disk is write-accelerator enabled.
func (o RestorePointSourceVMDataDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RestorePointSourceVMDataDiskResponse) bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolOutput)
}

type RestorePointSourceVMDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestorePointSourceVMDataDiskResponse)(nil)).Elem()
}

func (o RestorePointSourceVMDataDiskResponseArrayOutput) ToRestorePointSourceVMDataDiskResponseArrayOutput() RestorePointSourceVMDataDiskResponseArrayOutput {
	return o
}

func (o RestorePointSourceVMDataDiskResponseArrayOutput) ToRestorePointSourceVMDataDiskResponseArrayOutputWithContext(ctx context.Context) RestorePointSourceVMDataDiskResponseArrayOutput {
	return o
}

func (o RestorePointSourceVMDataDiskResponseArrayOutput) Index(i pulumi.IntInput) RestorePointSourceVMDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestorePointSourceVMDataDiskResponse {
		return vs[0].([]RestorePointSourceVMDataDiskResponse)[vs[1].(int)]
	}).(RestorePointSourceVMDataDiskResponseOutput)
}

// Describes an Operating System disk.
type RestorePointSourceVMOSDisk struct {
	// Contains Disk Restore Point properties.
	DiskRestorePoint *DiskRestorePointAttributes `pulumi:"diskRestorePoint"`
	// Gets the managed disk details
	ManagedDisk *ManagedDiskParameters `pulumi:"managedDisk"`
}

// RestorePointSourceVMOSDiskInput is an input type that accepts RestorePointSourceVMOSDiskArgs and RestorePointSourceVMOSDiskOutput values.
// You can construct a concrete instance of `RestorePointSourceVMOSDiskInput` via:
//
//	RestorePointSourceVMOSDiskArgs{...}
type RestorePointSourceVMOSDiskInput interface {
	pulumi.Input

	ToRestorePointSourceVMOSDiskOutput() RestorePointSourceVMOSDiskOutput
	ToRestorePointSourceVMOSDiskOutputWithContext(context.Context) RestorePointSourceVMOSDiskOutput
}

// Describes an Operating System disk.
type RestorePointSourceVMOSDiskArgs struct {
	// Contains Disk Restore Point properties.
	DiskRestorePoint DiskRestorePointAttributesPtrInput `pulumi:"diskRestorePoint"`
	// Gets the managed disk details
	ManagedDisk ManagedDiskParametersPtrInput `pulumi:"managedDisk"`
}

func (RestorePointSourceVMOSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMOSDisk)(nil)).Elem()
}

func (i RestorePointSourceVMOSDiskArgs) ToRestorePointSourceVMOSDiskOutput() RestorePointSourceVMOSDiskOutput {
	return i.ToRestorePointSourceVMOSDiskOutputWithContext(context.Background())
}

func (i RestorePointSourceVMOSDiskArgs) ToRestorePointSourceVMOSDiskOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMOSDiskOutput)
}

func (i RestorePointSourceVMOSDiskArgs) ToRestorePointSourceVMOSDiskPtrOutput() RestorePointSourceVMOSDiskPtrOutput {
	return i.ToRestorePointSourceVMOSDiskPtrOutputWithContext(context.Background())
}

func (i RestorePointSourceVMOSDiskArgs) ToRestorePointSourceVMOSDiskPtrOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMOSDiskOutput).ToRestorePointSourceVMOSDiskPtrOutputWithContext(ctx)
}

// RestorePointSourceVMOSDiskPtrInput is an input type that accepts RestorePointSourceVMOSDiskArgs, RestorePointSourceVMOSDiskPtr and RestorePointSourceVMOSDiskPtrOutput values.
// You can construct a concrete instance of `RestorePointSourceVMOSDiskPtrInput` via:
//
//	        RestorePointSourceVMOSDiskArgs{...}
//
//	or:
//
//	        nil
type RestorePointSourceVMOSDiskPtrInput interface {
	pulumi.Input

	ToRestorePointSourceVMOSDiskPtrOutput() RestorePointSourceVMOSDiskPtrOutput
	ToRestorePointSourceVMOSDiskPtrOutputWithContext(context.Context) RestorePointSourceVMOSDiskPtrOutput
}

type restorePointSourceVMOSDiskPtrType RestorePointSourceVMOSDiskArgs

func RestorePointSourceVMOSDiskPtr(v *RestorePointSourceVMOSDiskArgs) RestorePointSourceVMOSDiskPtrInput {
	return (*restorePointSourceVMOSDiskPtrType)(v)
}

func (*restorePointSourceVMOSDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceVMOSDisk)(nil)).Elem()
}

func (i *restorePointSourceVMOSDiskPtrType) ToRestorePointSourceVMOSDiskPtrOutput() RestorePointSourceVMOSDiskPtrOutput {
	return i.ToRestorePointSourceVMOSDiskPtrOutputWithContext(context.Background())
}

func (i *restorePointSourceVMOSDiskPtrType) ToRestorePointSourceVMOSDiskPtrOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMOSDiskPtrOutput)
}

// Describes an Operating System disk.
type RestorePointSourceVMOSDiskOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMOSDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMOSDisk)(nil)).Elem()
}

func (o RestorePointSourceVMOSDiskOutput) ToRestorePointSourceVMOSDiskOutput() RestorePointSourceVMOSDiskOutput {
	return o
}

func (o RestorePointSourceVMOSDiskOutput) ToRestorePointSourceVMOSDiskOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskOutput {
	return o
}

func (o RestorePointSourceVMOSDiskOutput) ToRestorePointSourceVMOSDiskPtrOutput() RestorePointSourceVMOSDiskPtrOutput {
	return o.ToRestorePointSourceVMOSDiskPtrOutputWithContext(context.Background())
}

func (o RestorePointSourceVMOSDiskOutput) ToRestorePointSourceVMOSDiskPtrOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestorePointSourceVMOSDisk) *RestorePointSourceVMOSDisk {
		return &v
	}).(RestorePointSourceVMOSDiskPtrOutput)
}

// Contains Disk Restore Point properties.
func (o RestorePointSourceVMOSDiskOutput) DiskRestorePoint() DiskRestorePointAttributesPtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDisk) *DiskRestorePointAttributes { return v.DiskRestorePoint }).(DiskRestorePointAttributesPtrOutput)
}

// Gets the managed disk details
func (o RestorePointSourceVMOSDiskOutput) ManagedDisk() ManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDisk) *ManagedDiskParameters { return v.ManagedDisk }).(ManagedDiskParametersPtrOutput)
}

type RestorePointSourceVMOSDiskPtrOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMOSDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceVMOSDisk)(nil)).Elem()
}

func (o RestorePointSourceVMOSDiskPtrOutput) ToRestorePointSourceVMOSDiskPtrOutput() RestorePointSourceVMOSDiskPtrOutput {
	return o
}

func (o RestorePointSourceVMOSDiskPtrOutput) ToRestorePointSourceVMOSDiskPtrOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskPtrOutput {
	return o
}

func (o RestorePointSourceVMOSDiskPtrOutput) Elem() RestorePointSourceVMOSDiskOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDisk) RestorePointSourceVMOSDisk {
		if v != nil {
			return *v
		}
		var ret RestorePointSourceVMOSDisk
		return ret
	}).(RestorePointSourceVMOSDiskOutput)
}

// Contains Disk Restore Point properties.
func (o RestorePointSourceVMOSDiskPtrOutput) DiskRestorePoint() DiskRestorePointAttributesPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDisk) *DiskRestorePointAttributes {
		if v == nil {
			return nil
		}
		return v.DiskRestorePoint
	}).(DiskRestorePointAttributesPtrOutput)
}

// Gets the managed disk details
func (o RestorePointSourceVMOSDiskPtrOutput) ManagedDisk() ManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDisk) *ManagedDiskParameters {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(ManagedDiskParametersPtrOutput)
}

// Describes an Operating System disk.
type RestorePointSourceVMOSDiskResponse struct {
	// Gets the caching type.
	Caching string `pulumi:"caching"`
	// Contains Disk Restore Point properties.
	DiskRestorePoint *DiskRestorePointAttributesResponse `pulumi:"diskRestorePoint"`
	// Gets the disk size in GB.
	DiskSizeGB int `pulumi:"diskSizeGB"`
	// Gets the disk encryption settings.
	EncryptionSettings DiskEncryptionSettingsResponse `pulumi:"encryptionSettings"`
	// Gets the managed disk details
	ManagedDisk *ManagedDiskParametersResponse `pulumi:"managedDisk"`
	// Gets the disk name.
	Name string `pulumi:"name"`
	// Gets the Operating System type.
	OsType string `pulumi:"osType"`
	// Shows true if the disk is write-accelerator enabled.
	WriteAcceleratorEnabled bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes an Operating System disk.
type RestorePointSourceVMOSDiskResponseOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMOSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMOSDiskResponse)(nil)).Elem()
}

func (o RestorePointSourceVMOSDiskResponseOutput) ToRestorePointSourceVMOSDiskResponseOutput() RestorePointSourceVMOSDiskResponseOutput {
	return o
}

func (o RestorePointSourceVMOSDiskResponseOutput) ToRestorePointSourceVMOSDiskResponseOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskResponseOutput {
	return o
}

// Gets the caching type.
func (o RestorePointSourceVMOSDiskResponseOutput) Caching() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) string { return v.Caching }).(pulumi.StringOutput)
}

// Contains Disk Restore Point properties.
func (o RestorePointSourceVMOSDiskResponseOutput) DiskRestorePoint() DiskRestorePointAttributesResponsePtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) *DiskRestorePointAttributesResponse {
		return v.DiskRestorePoint
	}).(DiskRestorePointAttributesResponsePtrOutput)
}

// Gets the disk size in GB.
func (o RestorePointSourceVMOSDiskResponseOutput) DiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) int { return v.DiskSizeGB }).(pulumi.IntOutput)
}

// Gets the disk encryption settings.
func (o RestorePointSourceVMOSDiskResponseOutput) EncryptionSettings() DiskEncryptionSettingsResponseOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) DiskEncryptionSettingsResponse { return v.EncryptionSettings }).(DiskEncryptionSettingsResponseOutput)
}

// Gets the managed disk details
func (o RestorePointSourceVMOSDiskResponseOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) *ManagedDiskParametersResponse { return v.ManagedDisk }).(ManagedDiskParametersResponsePtrOutput)
}

// Gets the disk name.
func (o RestorePointSourceVMOSDiskResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the Operating System type.
func (o RestorePointSourceVMOSDiskResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// Shows true if the disk is write-accelerator enabled.
func (o RestorePointSourceVMOSDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RestorePointSourceVMOSDiskResponse) bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolOutput)
}

type RestorePointSourceVMOSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMOSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceVMOSDiskResponse)(nil)).Elem()
}

func (o RestorePointSourceVMOSDiskResponsePtrOutput) ToRestorePointSourceVMOSDiskResponsePtrOutput() RestorePointSourceVMOSDiskResponsePtrOutput {
	return o
}

func (o RestorePointSourceVMOSDiskResponsePtrOutput) ToRestorePointSourceVMOSDiskResponsePtrOutputWithContext(ctx context.Context) RestorePointSourceVMOSDiskResponsePtrOutput {
	return o
}

func (o RestorePointSourceVMOSDiskResponsePtrOutput) Elem() RestorePointSourceVMOSDiskResponseOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) RestorePointSourceVMOSDiskResponse {
		if v != nil {
			return *v
		}
		var ret RestorePointSourceVMOSDiskResponse
		return ret
	}).(RestorePointSourceVMOSDiskResponseOutput)
}

// Gets the caching type.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Caching
	}).(pulumi.StringPtrOutput)
}

// Contains Disk Restore Point properties.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) DiskRestorePoint() DiskRestorePointAttributesResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *DiskRestorePointAttributesResponse {
		if v == nil {
			return nil
		}
		return v.DiskRestorePoint
	}).(DiskRestorePointAttributesResponsePtrOutput)
}

// Gets the disk size in GB.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Gets the disk encryption settings.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) EncryptionSettings() DiskEncryptionSettingsResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *DiskEncryptionSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.EncryptionSettings
	}).(DiskEncryptionSettingsResponsePtrOutput)
}

// Gets the managed disk details
func (o RestorePointSourceVMOSDiskResponsePtrOutput) ManagedDisk() ManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *ManagedDiskParametersResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(ManagedDiskParametersResponsePtrOutput)
}

// Gets the disk name.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Gets the Operating System type.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// Shows true if the disk is write-accelerator enabled.
func (o RestorePointSourceVMOSDiskResponsePtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMOSDiskResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes the storage profile.
type RestorePointSourceVMStorageProfile struct {
	// Gets the data disks of the VM captured at the time of the restore point creation.
	DataDisks []RestorePointSourceVMDataDisk `pulumi:"dataDisks"`
	// Gets the OS disk of the VM captured at the time of the restore point creation.
	OsDisk *RestorePointSourceVMOSDisk `pulumi:"osDisk"`
}

// RestorePointSourceVMStorageProfileInput is an input type that accepts RestorePointSourceVMStorageProfileArgs and RestorePointSourceVMStorageProfileOutput values.
// You can construct a concrete instance of `RestorePointSourceVMStorageProfileInput` via:
//
//	RestorePointSourceVMStorageProfileArgs{...}
type RestorePointSourceVMStorageProfileInput interface {
	pulumi.Input

	ToRestorePointSourceVMStorageProfileOutput() RestorePointSourceVMStorageProfileOutput
	ToRestorePointSourceVMStorageProfileOutputWithContext(context.Context) RestorePointSourceVMStorageProfileOutput
}

// Describes the storage profile.
type RestorePointSourceVMStorageProfileArgs struct {
	// Gets the data disks of the VM captured at the time of the restore point creation.
	DataDisks RestorePointSourceVMDataDiskArrayInput `pulumi:"dataDisks"`
	// Gets the OS disk of the VM captured at the time of the restore point creation.
	OsDisk RestorePointSourceVMOSDiskPtrInput `pulumi:"osDisk"`
}

func (RestorePointSourceVMStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMStorageProfile)(nil)).Elem()
}

func (i RestorePointSourceVMStorageProfileArgs) ToRestorePointSourceVMStorageProfileOutput() RestorePointSourceVMStorageProfileOutput {
	return i.ToRestorePointSourceVMStorageProfileOutputWithContext(context.Background())
}

func (i RestorePointSourceVMStorageProfileArgs) ToRestorePointSourceVMStorageProfileOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMStorageProfileOutput)
}

func (i RestorePointSourceVMStorageProfileArgs) ToRestorePointSourceVMStorageProfilePtrOutput() RestorePointSourceVMStorageProfilePtrOutput {
	return i.ToRestorePointSourceVMStorageProfilePtrOutputWithContext(context.Background())
}

func (i RestorePointSourceVMStorageProfileArgs) ToRestorePointSourceVMStorageProfilePtrOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMStorageProfileOutput).ToRestorePointSourceVMStorageProfilePtrOutputWithContext(ctx)
}

// RestorePointSourceVMStorageProfilePtrInput is an input type that accepts RestorePointSourceVMStorageProfileArgs, RestorePointSourceVMStorageProfilePtr and RestorePointSourceVMStorageProfilePtrOutput values.
// You can construct a concrete instance of `RestorePointSourceVMStorageProfilePtrInput` via:
//
//	        RestorePointSourceVMStorageProfileArgs{...}
//
//	or:
//
//	        nil
type RestorePointSourceVMStorageProfilePtrInput interface {
	pulumi.Input

	ToRestorePointSourceVMStorageProfilePtrOutput() RestorePointSourceVMStorageProfilePtrOutput
	ToRestorePointSourceVMStorageProfilePtrOutputWithContext(context.Context) RestorePointSourceVMStorageProfilePtrOutput
}

type restorePointSourceVMStorageProfilePtrType RestorePointSourceVMStorageProfileArgs

func RestorePointSourceVMStorageProfilePtr(v *RestorePointSourceVMStorageProfileArgs) RestorePointSourceVMStorageProfilePtrInput {
	return (*restorePointSourceVMStorageProfilePtrType)(v)
}

func (*restorePointSourceVMStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceVMStorageProfile)(nil)).Elem()
}

func (i *restorePointSourceVMStorageProfilePtrType) ToRestorePointSourceVMStorageProfilePtrOutput() RestorePointSourceVMStorageProfilePtrOutput {
	return i.ToRestorePointSourceVMStorageProfilePtrOutputWithContext(context.Background())
}

func (i *restorePointSourceVMStorageProfilePtrType) ToRestorePointSourceVMStorageProfilePtrOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePointSourceVMStorageProfilePtrOutput)
}

// Describes the storage profile.
type RestorePointSourceVMStorageProfileOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMStorageProfile)(nil)).Elem()
}

func (o RestorePointSourceVMStorageProfileOutput) ToRestorePointSourceVMStorageProfileOutput() RestorePointSourceVMStorageProfileOutput {
	return o
}

func (o RestorePointSourceVMStorageProfileOutput) ToRestorePointSourceVMStorageProfileOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfileOutput {
	return o
}

func (o RestorePointSourceVMStorageProfileOutput) ToRestorePointSourceVMStorageProfilePtrOutput() RestorePointSourceVMStorageProfilePtrOutput {
	return o.ToRestorePointSourceVMStorageProfilePtrOutputWithContext(context.Background())
}

func (o RestorePointSourceVMStorageProfileOutput) ToRestorePointSourceVMStorageProfilePtrOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestorePointSourceVMStorageProfile) *RestorePointSourceVMStorageProfile {
		return &v
	}).(RestorePointSourceVMStorageProfilePtrOutput)
}

// Gets the data disks of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileOutput) DataDisks() RestorePointSourceVMDataDiskArrayOutput {
	return o.ApplyT(func(v RestorePointSourceVMStorageProfile) []RestorePointSourceVMDataDisk { return v.DataDisks }).(RestorePointSourceVMDataDiskArrayOutput)
}

// Gets the OS disk of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileOutput) OsDisk() RestorePointSourceVMOSDiskPtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMStorageProfile) *RestorePointSourceVMOSDisk { return v.OsDisk }).(RestorePointSourceVMOSDiskPtrOutput)
}

type RestorePointSourceVMStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceVMStorageProfile)(nil)).Elem()
}

func (o RestorePointSourceVMStorageProfilePtrOutput) ToRestorePointSourceVMStorageProfilePtrOutput() RestorePointSourceVMStorageProfilePtrOutput {
	return o
}

func (o RestorePointSourceVMStorageProfilePtrOutput) ToRestorePointSourceVMStorageProfilePtrOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfilePtrOutput {
	return o
}

func (o RestorePointSourceVMStorageProfilePtrOutput) Elem() RestorePointSourceVMStorageProfileOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfile) RestorePointSourceVMStorageProfile {
		if v != nil {
			return *v
		}
		var ret RestorePointSourceVMStorageProfile
		return ret
	}).(RestorePointSourceVMStorageProfileOutput)
}

// Gets the data disks of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfilePtrOutput) DataDisks() RestorePointSourceVMDataDiskArrayOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfile) []RestorePointSourceVMDataDisk {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(RestorePointSourceVMDataDiskArrayOutput)
}

// Gets the OS disk of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfilePtrOutput) OsDisk() RestorePointSourceVMOSDiskPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfile) *RestorePointSourceVMOSDisk {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(RestorePointSourceVMOSDiskPtrOutput)
}

// Describes the storage profile.
type RestorePointSourceVMStorageProfileResponse struct {
	// Gets the data disks of the VM captured at the time of the restore point creation.
	DataDisks []RestorePointSourceVMDataDiskResponse `pulumi:"dataDisks"`
	// Gets the disk controller type of the VM captured at the time of the restore point creation.
	DiskControllerType string `pulumi:"diskControllerType"`
	// Gets the OS disk of the VM captured at the time of the restore point creation.
	OsDisk *RestorePointSourceVMOSDiskResponse `pulumi:"osDisk"`
}

// Describes the storage profile.
type RestorePointSourceVMStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestorePointSourceVMStorageProfileResponse)(nil)).Elem()
}

func (o RestorePointSourceVMStorageProfileResponseOutput) ToRestorePointSourceVMStorageProfileResponseOutput() RestorePointSourceVMStorageProfileResponseOutput {
	return o
}

func (o RestorePointSourceVMStorageProfileResponseOutput) ToRestorePointSourceVMStorageProfileResponseOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfileResponseOutput {
	return o
}

// Gets the data disks of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileResponseOutput) DataDisks() RestorePointSourceVMDataDiskResponseArrayOutput {
	return o.ApplyT(func(v RestorePointSourceVMStorageProfileResponse) []RestorePointSourceVMDataDiskResponse {
		return v.DataDisks
	}).(RestorePointSourceVMDataDiskResponseArrayOutput)
}

// Gets the disk controller type of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileResponseOutput) DiskControllerType() pulumi.StringOutput {
	return o.ApplyT(func(v RestorePointSourceVMStorageProfileResponse) string { return v.DiskControllerType }).(pulumi.StringOutput)
}

// Gets the OS disk of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileResponseOutput) OsDisk() RestorePointSourceVMOSDiskResponsePtrOutput {
	return o.ApplyT(func(v RestorePointSourceVMStorageProfileResponse) *RestorePointSourceVMOSDiskResponse {
		return v.OsDisk
	}).(RestorePointSourceVMOSDiskResponsePtrOutput)
}

type RestorePointSourceVMStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (RestorePointSourceVMStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePointSourceVMStorageProfileResponse)(nil)).Elem()
}

func (o RestorePointSourceVMStorageProfileResponsePtrOutput) ToRestorePointSourceVMStorageProfileResponsePtrOutput() RestorePointSourceVMStorageProfileResponsePtrOutput {
	return o
}

func (o RestorePointSourceVMStorageProfileResponsePtrOutput) ToRestorePointSourceVMStorageProfileResponsePtrOutputWithContext(ctx context.Context) RestorePointSourceVMStorageProfileResponsePtrOutput {
	return o
}

func (o RestorePointSourceVMStorageProfileResponsePtrOutput) Elem() RestorePointSourceVMStorageProfileResponseOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfileResponse) RestorePointSourceVMStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret RestorePointSourceVMStorageProfileResponse
		return ret
	}).(RestorePointSourceVMStorageProfileResponseOutput)
}

// Gets the data disks of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileResponsePtrOutput) DataDisks() RestorePointSourceVMDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfileResponse) []RestorePointSourceVMDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(RestorePointSourceVMDataDiskResponseArrayOutput)
}

// Gets the disk controller type of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileResponsePtrOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DiskControllerType
	}).(pulumi.StringPtrOutput)
}

// Gets the OS disk of the VM captured at the time of the restore point creation.
func (o RestorePointSourceVMStorageProfileResponsePtrOutput) OsDisk() RestorePointSourceVMOSDiskResponsePtrOutput {
	return o.ApplyT(func(v *RestorePointSourceVMStorageProfileResponse) *RestorePointSourceVMOSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(RestorePointSourceVMOSDiskResponsePtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicy struct {
	// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
	EnableCrossZoneUpgrade *bool `pulumi:"enableCrossZoneUpgrade"`
	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent *int `pulumi:"maxBatchInstancePercent"`
	// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
	MaxSurge *bool `pulumi:"maxSurge"`
	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent *int `pulumi:"maxUnhealthyInstancePercent"`
	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int `pulumi:"maxUnhealthyUpgradedInstancePercent"`
	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches *string `pulumi:"pauseTimeBetweenBatches"`
	// Upgrade all unhealthy instances in a scale set before any healthy instances.
	PrioritizeUnhealthyInstances *bool `pulumi:"prioritizeUnhealthyInstances"`
	// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
	RollbackFailedInstancesOnPolicyBreach *bool `pulumi:"rollbackFailedInstancesOnPolicyBreach"`
}

// RollingUpgradePolicyInput is an input type that accepts RollingUpgradePolicyArgs and RollingUpgradePolicyOutput values.
// You can construct a concrete instance of `RollingUpgradePolicyInput` via:
//
//	RollingUpgradePolicyArgs{...}
type RollingUpgradePolicyInput interface {
	pulumi.Input

	ToRollingUpgradePolicyOutput() RollingUpgradePolicyOutput
	ToRollingUpgradePolicyOutputWithContext(context.Context) RollingUpgradePolicyOutput
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyArgs struct {
	// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
	EnableCrossZoneUpgrade pulumi.BoolPtrInput `pulumi:"enableCrossZoneUpgrade"`
	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent pulumi.IntPtrInput `pulumi:"maxBatchInstancePercent"`
	// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
	MaxSurge pulumi.BoolPtrInput `pulumi:"maxSurge"`
	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent pulumi.IntPtrInput `pulumi:"maxUnhealthyInstancePercent"`
	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent pulumi.IntPtrInput `pulumi:"maxUnhealthyUpgradedInstancePercent"`
	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches pulumi.StringPtrInput `pulumi:"pauseTimeBetweenBatches"`
	// Upgrade all unhealthy instances in a scale set before any healthy instances.
	PrioritizeUnhealthyInstances pulumi.BoolPtrInput `pulumi:"prioritizeUnhealthyInstances"`
	// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
	RollbackFailedInstancesOnPolicyBreach pulumi.BoolPtrInput `pulumi:"rollbackFailedInstancesOnPolicyBreach"`
}

func (RollingUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpgradePolicy)(nil)).Elem()
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyOutput() RollingUpgradePolicyOutput {
	return i.ToRollingUpgradePolicyOutputWithContext(context.Background())
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyOutputWithContext(ctx context.Context) RollingUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpgradePolicyOutput)
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput {
	return i.ToRollingUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i RollingUpgradePolicyArgs) ToRollingUpgradePolicyPtrOutputWithContext(ctx context.Context) RollingUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpgradePolicyOutput).ToRollingUpgradePolicyPtrOutputWithContext(ctx)
}

// RollingUpgradePolicyPtrInput is an input type that accepts RollingUpgradePolicyArgs, RollingUpgradePolicyPtr and RollingUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `RollingUpgradePolicyPtrInput` via:
//
//	        RollingUpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type RollingUpgradePolicyPtrInput interface {
	pulumi.Input

	ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput
	ToRollingUpgradePolicyPtrOutputWithContext(context.Context) RollingUpgradePolicyPtrOutput
}

type rollingUpgradePolicyPtrType RollingUpgradePolicyArgs

func RollingUpgradePolicyPtr(v *RollingUpgradePolicyArgs) RollingUpgradePolicyPtrInput {
	return (*rollingUpgradePolicyPtrType)(v)
}

func (*rollingUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpgradePolicy)(nil)).Elem()
}

func (i *rollingUpgradePolicyPtrType) ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput {
	return i.ToRollingUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *rollingUpgradePolicyPtrType) ToRollingUpgradePolicyPtrOutputWithContext(ctx context.Context) RollingUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingUpgradePolicyPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyOutput struct{ *pulumi.OutputState }

func (RollingUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpgradePolicy)(nil)).Elem()
}

func (o RollingUpgradePolicyOutput) ToRollingUpgradePolicyOutput() RollingUpgradePolicyOutput {
	return o
}

func (o RollingUpgradePolicyOutput) ToRollingUpgradePolicyOutputWithContext(ctx context.Context) RollingUpgradePolicyOutput {
	return o
}

func (o RollingUpgradePolicyOutput) ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput {
	return o.ToRollingUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o RollingUpgradePolicyOutput) ToRollingUpgradePolicyPtrOutputWithContext(ctx context.Context) RollingUpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RollingUpgradePolicy) *RollingUpgradePolicy {
		return &v
	}).(RollingUpgradePolicyPtrOutput)
}

// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
func (o RollingUpgradePolicyOutput) EnableCrossZoneUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *bool { return v.EnableCrossZoneUpgrade }).(pulumi.BoolPtrOutput)
}

// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
func (o RollingUpgradePolicyOutput) MaxBatchInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *int { return v.MaxBatchInstancePercent }).(pulumi.IntPtrOutput)
}

// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
func (o RollingUpgradePolicyOutput) MaxSurge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *bool { return v.MaxSurge }).(pulumi.BoolPtrOutput)
}

// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
func (o RollingUpgradePolicyOutput) MaxUnhealthyInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *int { return v.MaxUnhealthyInstancePercent }).(pulumi.IntPtrOutput)
}

// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
func (o RollingUpgradePolicyOutput) MaxUnhealthyUpgradedInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *int { return v.MaxUnhealthyUpgradedInstancePercent }).(pulumi.IntPtrOutput)
}

// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
func (o RollingUpgradePolicyOutput) PauseTimeBetweenBatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *string { return v.PauseTimeBetweenBatches }).(pulumi.StringPtrOutput)
}

// Upgrade all unhealthy instances in a scale set before any healthy instances.
func (o RollingUpgradePolicyOutput) PrioritizeUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *bool { return v.PrioritizeUnhealthyInstances }).(pulumi.BoolPtrOutput)
}

// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
func (o RollingUpgradePolicyOutput) RollbackFailedInstancesOnPolicyBreach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicy) *bool { return v.RollbackFailedInstancesOnPolicyBreach }).(pulumi.BoolPtrOutput)
}

type RollingUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (RollingUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpgradePolicy)(nil)).Elem()
}

func (o RollingUpgradePolicyPtrOutput) ToRollingUpgradePolicyPtrOutput() RollingUpgradePolicyPtrOutput {
	return o
}

func (o RollingUpgradePolicyPtrOutput) ToRollingUpgradePolicyPtrOutputWithContext(ctx context.Context) RollingUpgradePolicyPtrOutput {
	return o
}

func (o RollingUpgradePolicyPtrOutput) Elem() RollingUpgradePolicyOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) RollingUpgradePolicy {
		if v != nil {
			return *v
		}
		var ret RollingUpgradePolicy
		return ret
	}).(RollingUpgradePolicyOutput)
}

// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
func (o RollingUpgradePolicyPtrOutput) EnableCrossZoneUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCrossZoneUpgrade
	}).(pulumi.BoolPtrOutput)
}

// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
func (o RollingUpgradePolicyPtrOutput) MaxBatchInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxBatchInstancePercent
	}).(pulumi.IntPtrOutput)
}

// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
func (o RollingUpgradePolicyPtrOutput) MaxSurge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.BoolPtrOutput)
}

// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
func (o RollingUpgradePolicyPtrOutput) MaxUnhealthyInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
func (o RollingUpgradePolicyPtrOutput) MaxUnhealthyUpgradedInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyUpgradedInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
func (o RollingUpgradePolicyPtrOutput) PauseTimeBetweenBatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.PauseTimeBetweenBatches
	}).(pulumi.StringPtrOutput)
}

// Upgrade all unhealthy instances in a scale set before any healthy instances.
func (o RollingUpgradePolicyPtrOutput) PrioritizeUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.PrioritizeUnhealthyInstances
	}).(pulumi.BoolPtrOutput)
}

// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
func (o RollingUpgradePolicyPtrOutput) RollbackFailedInstancesOnPolicyBreach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.RollbackFailedInstancesOnPolicyBreach
	}).(pulumi.BoolPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyResponse struct {
	// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
	EnableCrossZoneUpgrade *bool `pulumi:"enableCrossZoneUpgrade"`
	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent *int `pulumi:"maxBatchInstancePercent"`
	// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
	MaxSurge *bool `pulumi:"maxSurge"`
	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent *int `pulumi:"maxUnhealthyInstancePercent"`
	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int `pulumi:"maxUnhealthyUpgradedInstancePercent"`
	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
	PauseTimeBetweenBatches *string `pulumi:"pauseTimeBetweenBatches"`
	// Upgrade all unhealthy instances in a scale set before any healthy instances.
	PrioritizeUnhealthyInstances *bool `pulumi:"prioritizeUnhealthyInstances"`
	// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
	RollbackFailedInstancesOnPolicyBreach *bool `pulumi:"rollbackFailedInstancesOnPolicyBreach"`
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (RollingUpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingUpgradePolicyResponse)(nil)).Elem()
}

func (o RollingUpgradePolicyResponseOutput) ToRollingUpgradePolicyResponseOutput() RollingUpgradePolicyResponseOutput {
	return o
}

func (o RollingUpgradePolicyResponseOutput) ToRollingUpgradePolicyResponseOutputWithContext(ctx context.Context) RollingUpgradePolicyResponseOutput {
	return o
}

// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
func (o RollingUpgradePolicyResponseOutput) EnableCrossZoneUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *bool { return v.EnableCrossZoneUpgrade }).(pulumi.BoolPtrOutput)
}

// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponseOutput) MaxBatchInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *int { return v.MaxBatchInstancePercent }).(pulumi.IntPtrOutput)
}

// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
func (o RollingUpgradePolicyResponseOutput) MaxSurge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *bool { return v.MaxSurge }).(pulumi.BoolPtrOutput)
}

// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponseOutput) MaxUnhealthyInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *int { return v.MaxUnhealthyInstancePercent }).(pulumi.IntPtrOutput)
}

// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponseOutput) MaxUnhealthyUpgradedInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *int { return v.MaxUnhealthyUpgradedInstancePercent }).(pulumi.IntPtrOutput)
}

// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
func (o RollingUpgradePolicyResponseOutput) PauseTimeBetweenBatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *string { return v.PauseTimeBetweenBatches }).(pulumi.StringPtrOutput)
}

// Upgrade all unhealthy instances in a scale set before any healthy instances.
func (o RollingUpgradePolicyResponseOutput) PrioritizeUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *bool { return v.PrioritizeUnhealthyInstances }).(pulumi.BoolPtrOutput)
}

// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
func (o RollingUpgradePolicyResponseOutput) RollbackFailedInstancesOnPolicyBreach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RollingUpgradePolicyResponse) *bool { return v.RollbackFailedInstancesOnPolicyBreach }).(pulumi.BoolPtrOutput)
}

type RollingUpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RollingUpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollingUpgradePolicyResponse)(nil)).Elem()
}

func (o RollingUpgradePolicyResponsePtrOutput) ToRollingUpgradePolicyResponsePtrOutput() RollingUpgradePolicyResponsePtrOutput {
	return o
}

func (o RollingUpgradePolicyResponsePtrOutput) ToRollingUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) RollingUpgradePolicyResponsePtrOutput {
	return o
}

func (o RollingUpgradePolicyResponsePtrOutput) Elem() RollingUpgradePolicyResponseOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) RollingUpgradePolicyResponse {
		if v != nil {
			return *v
		}
		var ret RollingUpgradePolicyResponse
		return ret
	}).(RollingUpgradePolicyResponseOutput)
}

// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size.
func (o RollingUpgradePolicyResponsePtrOutput) EnableCrossZoneUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCrossZoneUpgrade
	}).(pulumi.BoolPtrOutput)
}

// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponsePtrOutput) MaxBatchInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxBatchInstancePercent
	}).(pulumi.IntPtrOutput)
}

// Create new virtual machines to upgrade the scale set, rather than updating the existing virtual machines. Existing virtual machines will be deleted once the new virtual machines are created for each batch.
func (o RollingUpgradePolicyResponsePtrOutput) MaxSurge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.BoolPtrOutput)
}

// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponsePtrOutput) MaxUnhealthyInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%.
func (o RollingUpgradePolicyResponsePtrOutput) MaxUnhealthyUpgradedInstancePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyUpgradedInstancePercent
	}).(pulumi.IntPtrOutput)
}

// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S).
func (o RollingUpgradePolicyResponsePtrOutput) PauseTimeBetweenBatches() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.PauseTimeBetweenBatches
	}).(pulumi.StringPtrOutput)
}

// Upgrade all unhealthy instances in a scale set before any healthy instances.
func (o RollingUpgradePolicyResponsePtrOutput) PrioritizeUnhealthyInstances() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PrioritizeUnhealthyInstances
	}).(pulumi.BoolPtrOutput)
}

// Rollback failed instances to previous model if the Rolling Upgrade policy is violated.
func (o RollingUpgradePolicyResponsePtrOutput) RollbackFailedInstancesOnPolicyBreach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RollingUpgradePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RollbackFailedInstancesOnPolicyBreach
	}).(pulumi.BoolPtrOutput)
}

// Describes the properties of a run command parameter.
type RunCommandInputParameter struct {
	// The run command parameter name.
	Name string `pulumi:"name"`
	// The run command parameter value.
	Value string `pulumi:"value"`
}

// RunCommandInputParameterInput is an input type that accepts RunCommandInputParameterArgs and RunCommandInputParameterOutput values.
// You can construct a concrete instance of `RunCommandInputParameterInput` via:
//
//	RunCommandInputParameterArgs{...}
type RunCommandInputParameterInput interface {
	pulumi.Input

	ToRunCommandInputParameterOutput() RunCommandInputParameterOutput
	ToRunCommandInputParameterOutputWithContext(context.Context) RunCommandInputParameterOutput
}

// Describes the properties of a run command parameter.
type RunCommandInputParameterArgs struct {
	// The run command parameter name.
	Name pulumi.StringInput `pulumi:"name"`
	// The run command parameter value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RunCommandInputParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunCommandInputParameter)(nil)).Elem()
}

func (i RunCommandInputParameterArgs) ToRunCommandInputParameterOutput() RunCommandInputParameterOutput {
	return i.ToRunCommandInputParameterOutputWithContext(context.Background())
}

func (i RunCommandInputParameterArgs) ToRunCommandInputParameterOutputWithContext(ctx context.Context) RunCommandInputParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandInputParameterOutput)
}

// RunCommandInputParameterArrayInput is an input type that accepts RunCommandInputParameterArray and RunCommandInputParameterArrayOutput values.
// You can construct a concrete instance of `RunCommandInputParameterArrayInput` via:
//
//	RunCommandInputParameterArray{ RunCommandInputParameterArgs{...} }
type RunCommandInputParameterArrayInput interface {
	pulumi.Input

	ToRunCommandInputParameterArrayOutput() RunCommandInputParameterArrayOutput
	ToRunCommandInputParameterArrayOutputWithContext(context.Context) RunCommandInputParameterArrayOutput
}

type RunCommandInputParameterArray []RunCommandInputParameterInput

func (RunCommandInputParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunCommandInputParameter)(nil)).Elem()
}

func (i RunCommandInputParameterArray) ToRunCommandInputParameterArrayOutput() RunCommandInputParameterArrayOutput {
	return i.ToRunCommandInputParameterArrayOutputWithContext(context.Background())
}

func (i RunCommandInputParameterArray) ToRunCommandInputParameterArrayOutputWithContext(ctx context.Context) RunCommandInputParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandInputParameterArrayOutput)
}

// Describes the properties of a run command parameter.
type RunCommandInputParameterOutput struct{ *pulumi.OutputState }

func (RunCommandInputParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunCommandInputParameter)(nil)).Elem()
}

func (o RunCommandInputParameterOutput) ToRunCommandInputParameterOutput() RunCommandInputParameterOutput {
	return o
}

func (o RunCommandInputParameterOutput) ToRunCommandInputParameterOutputWithContext(ctx context.Context) RunCommandInputParameterOutput {
	return o
}

// The run command parameter name.
func (o RunCommandInputParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RunCommandInputParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The run command parameter value.
func (o RunCommandInputParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RunCommandInputParameter) string { return v.Value }).(pulumi.StringOutput)
}

type RunCommandInputParameterArrayOutput struct{ *pulumi.OutputState }

func (RunCommandInputParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunCommandInputParameter)(nil)).Elem()
}

func (o RunCommandInputParameterArrayOutput) ToRunCommandInputParameterArrayOutput() RunCommandInputParameterArrayOutput {
	return o
}

func (o RunCommandInputParameterArrayOutput) ToRunCommandInputParameterArrayOutputWithContext(ctx context.Context) RunCommandInputParameterArrayOutput {
	return o
}

func (o RunCommandInputParameterArrayOutput) Index(i pulumi.IntInput) RunCommandInputParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RunCommandInputParameter {
		return vs[0].([]RunCommandInputParameter)[vs[1].(int)]
	}).(RunCommandInputParameterOutput)
}

// Describes the properties of a run command parameter.
type RunCommandInputParameterResponse struct {
	// The run command parameter name.
	Name string `pulumi:"name"`
	// The run command parameter value.
	Value string `pulumi:"value"`
}

// Describes the properties of a run command parameter.
type RunCommandInputParameterResponseOutput struct{ *pulumi.OutputState }

func (RunCommandInputParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunCommandInputParameterResponse)(nil)).Elem()
}

func (o RunCommandInputParameterResponseOutput) ToRunCommandInputParameterResponseOutput() RunCommandInputParameterResponseOutput {
	return o
}

func (o RunCommandInputParameterResponseOutput) ToRunCommandInputParameterResponseOutputWithContext(ctx context.Context) RunCommandInputParameterResponseOutput {
	return o
}

// The run command parameter name.
func (o RunCommandInputParameterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RunCommandInputParameterResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The run command parameter value.
func (o RunCommandInputParameterResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RunCommandInputParameterResponse) string { return v.Value }).(pulumi.StringOutput)
}

type RunCommandInputParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (RunCommandInputParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunCommandInputParameterResponse)(nil)).Elem()
}

func (o RunCommandInputParameterResponseArrayOutput) ToRunCommandInputParameterResponseArrayOutput() RunCommandInputParameterResponseArrayOutput {
	return o
}

func (o RunCommandInputParameterResponseArrayOutput) ToRunCommandInputParameterResponseArrayOutputWithContext(ctx context.Context) RunCommandInputParameterResponseArrayOutput {
	return o
}

func (o RunCommandInputParameterResponseArrayOutput) Index(i pulumi.IntInput) RunCommandInputParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RunCommandInputParameterResponse {
		return vs[0].([]RunCommandInputParameterResponse)[vs[1].(int)]
	}).(RunCommandInputParameterResponseOutput)
}

// Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object in case of system-assigned identity. Make sure the Azure storage blob exists in case of scriptUri, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
type RunCommandManagedIdentity struct {
	// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
	ClientId *string `pulumi:"clientId"`
	// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
	ObjectId *string `pulumi:"objectId"`
}

// RunCommandManagedIdentityInput is an input type that accepts RunCommandManagedIdentityArgs and RunCommandManagedIdentityOutput values.
// You can construct a concrete instance of `RunCommandManagedIdentityInput` via:
//
//	RunCommandManagedIdentityArgs{...}
type RunCommandManagedIdentityInput interface {
	pulumi.Input

	ToRunCommandManagedIdentityOutput() RunCommandManagedIdentityOutput
	ToRunCommandManagedIdentityOutputWithContext(context.Context) RunCommandManagedIdentityOutput
}

// Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object in case of system-assigned identity. Make sure the Azure storage blob exists in case of scriptUri, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
type RunCommandManagedIdentityArgs struct {
	// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
}

func (RunCommandManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunCommandManagedIdentity)(nil)).Elem()
}

func (i RunCommandManagedIdentityArgs) ToRunCommandManagedIdentityOutput() RunCommandManagedIdentityOutput {
	return i.ToRunCommandManagedIdentityOutputWithContext(context.Background())
}

func (i RunCommandManagedIdentityArgs) ToRunCommandManagedIdentityOutputWithContext(ctx context.Context) RunCommandManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandManagedIdentityOutput)
}

func (i RunCommandManagedIdentityArgs) ToRunCommandManagedIdentityPtrOutput() RunCommandManagedIdentityPtrOutput {
	return i.ToRunCommandManagedIdentityPtrOutputWithContext(context.Background())
}

func (i RunCommandManagedIdentityArgs) ToRunCommandManagedIdentityPtrOutputWithContext(ctx context.Context) RunCommandManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandManagedIdentityOutput).ToRunCommandManagedIdentityPtrOutputWithContext(ctx)
}

// RunCommandManagedIdentityPtrInput is an input type that accepts RunCommandManagedIdentityArgs, RunCommandManagedIdentityPtr and RunCommandManagedIdentityPtrOutput values.
// You can construct a concrete instance of `RunCommandManagedIdentityPtrInput` via:
//
//	        RunCommandManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type RunCommandManagedIdentityPtrInput interface {
	pulumi.Input

	ToRunCommandManagedIdentityPtrOutput() RunCommandManagedIdentityPtrOutput
	ToRunCommandManagedIdentityPtrOutputWithContext(context.Context) RunCommandManagedIdentityPtrOutput
}

type runCommandManagedIdentityPtrType RunCommandManagedIdentityArgs

func RunCommandManagedIdentityPtr(v *RunCommandManagedIdentityArgs) RunCommandManagedIdentityPtrInput {
	return (*runCommandManagedIdentityPtrType)(v)
}

func (*runCommandManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCommandManagedIdentity)(nil)).Elem()
}

func (i *runCommandManagedIdentityPtrType) ToRunCommandManagedIdentityPtrOutput() RunCommandManagedIdentityPtrOutput {
	return i.ToRunCommandManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *runCommandManagedIdentityPtrType) ToRunCommandManagedIdentityPtrOutputWithContext(ctx context.Context) RunCommandManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCommandManagedIdentityPtrOutput)
}

// Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object in case of system-assigned identity. Make sure the Azure storage blob exists in case of scriptUri, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
type RunCommandManagedIdentityOutput struct{ *pulumi.OutputState }

func (RunCommandManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunCommandManagedIdentity)(nil)).Elem()
}

func (o RunCommandManagedIdentityOutput) ToRunCommandManagedIdentityOutput() RunCommandManagedIdentityOutput {
	return o
}

func (o RunCommandManagedIdentityOutput) ToRunCommandManagedIdentityOutputWithContext(ctx context.Context) RunCommandManagedIdentityOutput {
	return o
}

func (o RunCommandManagedIdentityOutput) ToRunCommandManagedIdentityPtrOutput() RunCommandManagedIdentityPtrOutput {
	return o.ToRunCommandManagedIdentityPtrOutputWithContext(context.Background())
}

func (o RunCommandManagedIdentityOutput) ToRunCommandManagedIdentityPtrOutputWithContext(ctx context.Context) RunCommandManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunCommandManagedIdentity) *RunCommandManagedIdentity {
		return &v
	}).(RunCommandManagedIdentityPtrOutput)
}

// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
func (o RunCommandManagedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunCommandManagedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
func (o RunCommandManagedIdentityOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunCommandManagedIdentity) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type RunCommandManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (RunCommandManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCommandManagedIdentity)(nil)).Elem()
}

func (o RunCommandManagedIdentityPtrOutput) ToRunCommandManagedIdentityPtrOutput() RunCommandManagedIdentityPtrOutput {
	return o
}

func (o RunCommandManagedIdentityPtrOutput) ToRunCommandManagedIdentityPtrOutputWithContext(ctx context.Context) RunCommandManagedIdentityPtrOutput {
	return o
}

func (o RunCommandManagedIdentityPtrOutput) Elem() RunCommandManagedIdentityOutput {
	return o.ApplyT(func(v *RunCommandManagedIdentity) RunCommandManagedIdentity {
		if v != nil {
			return *v
		}
		var ret RunCommandManagedIdentity
		return ret
	}).(RunCommandManagedIdentityOutput)
}

// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
func (o RunCommandManagedIdentityPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommandManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
func (o RunCommandManagedIdentityPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommandManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object in case of system-assigned identity. Make sure the Azure storage blob exists in case of scriptUri, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
type RunCommandManagedIdentityResponse struct {
	// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
	ClientId *string `pulumi:"clientId"`
	// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
	ObjectId *string `pulumi:"objectId"`
}

// Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object in case of system-assigned identity. Make sure the Azure storage blob exists in case of scriptUri, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
type RunCommandManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (RunCommandManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunCommandManagedIdentityResponse)(nil)).Elem()
}

func (o RunCommandManagedIdentityResponseOutput) ToRunCommandManagedIdentityResponseOutput() RunCommandManagedIdentityResponseOutput {
	return o
}

func (o RunCommandManagedIdentityResponseOutput) ToRunCommandManagedIdentityResponseOutputWithContext(ctx context.Context) RunCommandManagedIdentityResponseOutput {
	return o
}

// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
func (o RunCommandManagedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunCommandManagedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
func (o RunCommandManagedIdentityResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RunCommandManagedIdentityResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type RunCommandManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (RunCommandManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCommandManagedIdentityResponse)(nil)).Elem()
}

func (o RunCommandManagedIdentityResponsePtrOutput) ToRunCommandManagedIdentityResponsePtrOutput() RunCommandManagedIdentityResponsePtrOutput {
	return o
}

func (o RunCommandManagedIdentityResponsePtrOutput) ToRunCommandManagedIdentityResponsePtrOutputWithContext(ctx context.Context) RunCommandManagedIdentityResponsePtrOutput {
	return o
}

func (o RunCommandManagedIdentityResponsePtrOutput) Elem() RunCommandManagedIdentityResponseOutput {
	return o.ApplyT(func(v *RunCommandManagedIdentityResponse) RunCommandManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret RunCommandManagedIdentityResponse
		return ret
	}).(RunCommandManagedIdentityResponseOutput)
}

// Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided.
func (o RunCommandManagedIdentityResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommandManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided.
func (o RunCommandManagedIdentityResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCommandManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicy struct {
	// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
	ForceDeletion *bool `pulumi:"forceDeletion"`
	// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
	PrioritizeUnhealthyVMs *bool `pulumi:"prioritizeUnhealthyVMs"`
	// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
	Rules []string `pulumi:"rules"`
}

// ScaleInPolicyInput is an input type that accepts ScaleInPolicyArgs and ScaleInPolicyOutput values.
// You can construct a concrete instance of `ScaleInPolicyInput` via:
//
//	ScaleInPolicyArgs{...}
type ScaleInPolicyInput interface {
	pulumi.Input

	ToScaleInPolicyOutput() ScaleInPolicyOutput
	ToScaleInPolicyOutputWithContext(context.Context) ScaleInPolicyOutput
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyArgs struct {
	// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
	ForceDeletion pulumi.BoolPtrInput `pulumi:"forceDeletion"`
	// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
	PrioritizeUnhealthyVMs pulumi.BoolPtrInput `pulumi:"prioritizeUnhealthyVMs"`
	// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
	Rules pulumi.StringArrayInput `pulumi:"rules"`
}

func (ScaleInPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleInPolicy)(nil)).Elem()
}

func (i ScaleInPolicyArgs) ToScaleInPolicyOutput() ScaleInPolicyOutput {
	return i.ToScaleInPolicyOutputWithContext(context.Background())
}

func (i ScaleInPolicyArgs) ToScaleInPolicyOutputWithContext(ctx context.Context) ScaleInPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleInPolicyOutput)
}

func (i ScaleInPolicyArgs) ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput {
	return i.ToScaleInPolicyPtrOutputWithContext(context.Background())
}

func (i ScaleInPolicyArgs) ToScaleInPolicyPtrOutputWithContext(ctx context.Context) ScaleInPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleInPolicyOutput).ToScaleInPolicyPtrOutputWithContext(ctx)
}

// ScaleInPolicyPtrInput is an input type that accepts ScaleInPolicyArgs, ScaleInPolicyPtr and ScaleInPolicyPtrOutput values.
// You can construct a concrete instance of `ScaleInPolicyPtrInput` via:
//
//	        ScaleInPolicyArgs{...}
//
//	or:
//
//	        nil
type ScaleInPolicyPtrInput interface {
	pulumi.Input

	ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput
	ToScaleInPolicyPtrOutputWithContext(context.Context) ScaleInPolicyPtrOutput
}

type scaleInPolicyPtrType ScaleInPolicyArgs

func ScaleInPolicyPtr(v *ScaleInPolicyArgs) ScaleInPolicyPtrInput {
	return (*scaleInPolicyPtrType)(v)
}

func (*scaleInPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleInPolicy)(nil)).Elem()
}

func (i *scaleInPolicyPtrType) ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput {
	return i.ToScaleInPolicyPtrOutputWithContext(context.Background())
}

func (i *scaleInPolicyPtrType) ToScaleInPolicyPtrOutputWithContext(ctx context.Context) ScaleInPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleInPolicyPtrOutput)
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyOutput struct{ *pulumi.OutputState }

func (ScaleInPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleInPolicy)(nil)).Elem()
}

func (o ScaleInPolicyOutput) ToScaleInPolicyOutput() ScaleInPolicyOutput {
	return o
}

func (o ScaleInPolicyOutput) ToScaleInPolicyOutputWithContext(ctx context.Context) ScaleInPolicyOutput {
	return o
}

func (o ScaleInPolicyOutput) ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput {
	return o.ToScaleInPolicyPtrOutputWithContext(context.Background())
}

func (o ScaleInPolicyOutput) ToScaleInPolicyPtrOutputWithContext(ctx context.Context) ScaleInPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleInPolicy) *ScaleInPolicy {
		return &v
	}).(ScaleInPolicyPtrOutput)
}

// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyOutput) ForceDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleInPolicy) *bool { return v.ForceDeletion }).(pulumi.BoolPtrOutput)
}

// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyOutput) PrioritizeUnhealthyVMs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleInPolicy) *bool { return v.PrioritizeUnhealthyVMs }).(pulumi.BoolPtrOutput)
}

// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
func (o ScaleInPolicyOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScaleInPolicy) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type ScaleInPolicyPtrOutput struct{ *pulumi.OutputState }

func (ScaleInPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleInPolicy)(nil)).Elem()
}

func (o ScaleInPolicyPtrOutput) ToScaleInPolicyPtrOutput() ScaleInPolicyPtrOutput {
	return o
}

func (o ScaleInPolicyPtrOutput) ToScaleInPolicyPtrOutputWithContext(ctx context.Context) ScaleInPolicyPtrOutput {
	return o
}

func (o ScaleInPolicyPtrOutput) Elem() ScaleInPolicyOutput {
	return o.ApplyT(func(v *ScaleInPolicy) ScaleInPolicy {
		if v != nil {
			return *v
		}
		var ret ScaleInPolicy
		return ret
	}).(ScaleInPolicyOutput)
}

// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyPtrOutput) ForceDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleInPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ForceDeletion
	}).(pulumi.BoolPtrOutput)
}

// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyPtrOutput) PrioritizeUnhealthyVMs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleInPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.PrioritizeUnhealthyVMs
	}).(pulumi.BoolPtrOutput)
}

// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
func (o ScaleInPolicyPtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScaleInPolicy) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyResponse struct {
	// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
	ForceDeletion *bool `pulumi:"forceDeletion"`
	// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
	PrioritizeUnhealthyVMs *bool `pulumi:"prioritizeUnhealthyVMs"`
	// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
	Rules []string `pulumi:"rules"`
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicyResponseOutput struct{ *pulumi.OutputState }

func (ScaleInPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleInPolicyResponse)(nil)).Elem()
}

func (o ScaleInPolicyResponseOutput) ToScaleInPolicyResponseOutput() ScaleInPolicyResponseOutput {
	return o
}

func (o ScaleInPolicyResponseOutput) ToScaleInPolicyResponseOutputWithContext(ctx context.Context) ScaleInPolicyResponseOutput {
	return o
}

// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyResponseOutput) ForceDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleInPolicyResponse) *bool { return v.ForceDeletion }).(pulumi.BoolPtrOutput)
}

// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyResponseOutput) PrioritizeUnhealthyVMs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScaleInPolicyResponse) *bool { return v.PrioritizeUnhealthyVMs }).(pulumi.BoolPtrOutput)
}

// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
func (o ScaleInPolicyResponseOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScaleInPolicyResponse) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type ScaleInPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleInPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleInPolicyResponse)(nil)).Elem()
}

func (o ScaleInPolicyResponsePtrOutput) ToScaleInPolicyResponsePtrOutput() ScaleInPolicyResponsePtrOutput {
	return o
}

func (o ScaleInPolicyResponsePtrOutput) ToScaleInPolicyResponsePtrOutputWithContext(ctx context.Context) ScaleInPolicyResponsePtrOutput {
	return o
}

func (o ScaleInPolicyResponsePtrOutput) Elem() ScaleInPolicyResponseOutput {
	return o.ApplyT(func(v *ScaleInPolicyResponse) ScaleInPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ScaleInPolicyResponse
		return ret
	}).(ScaleInPolicyResponseOutput)
}

// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyResponsePtrOutput) ForceDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleInPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceDeletion
	}).(pulumi.BoolPtrOutput)
}

// This property allows you to prioritize the deletion of unhealthy and inactive VMs when a virtual machine scale set is being scaled-in.(Feature in Preview)
func (o ScaleInPolicyResponsePtrOutput) PrioritizeUnhealthyVMs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScaleInPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PrioritizeUnhealthyVMs
	}).(pulumi.BoolPtrOutput)
}

// The rules to be followed when scaling-in a virtual machine scale set. <br><br> Possible values are: <br><br> **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. <br><br> **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. <br><br> **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. <br><br>
func (o ScaleInPolicyResponsePtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScaleInPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type ScheduledEventsAdditionalPublishingTargets struct {
	// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
	EventGridAndResourceGraph *EventGridAndResourceGraph `pulumi:"eventGridAndResourceGraph"`
}

// ScheduledEventsAdditionalPublishingTargetsInput is an input type that accepts ScheduledEventsAdditionalPublishingTargetsArgs and ScheduledEventsAdditionalPublishingTargetsOutput values.
// You can construct a concrete instance of `ScheduledEventsAdditionalPublishingTargetsInput` via:
//
//	ScheduledEventsAdditionalPublishingTargetsArgs{...}
type ScheduledEventsAdditionalPublishingTargetsInput interface {
	pulumi.Input

	ToScheduledEventsAdditionalPublishingTargetsOutput() ScheduledEventsAdditionalPublishingTargetsOutput
	ToScheduledEventsAdditionalPublishingTargetsOutputWithContext(context.Context) ScheduledEventsAdditionalPublishingTargetsOutput
}

type ScheduledEventsAdditionalPublishingTargetsArgs struct {
	// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
	EventGridAndResourceGraph EventGridAndResourceGraphPtrInput `pulumi:"eventGridAndResourceGraph"`
}

func (ScheduledEventsAdditionalPublishingTargetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsAdditionalPublishingTargets)(nil)).Elem()
}

func (i ScheduledEventsAdditionalPublishingTargetsArgs) ToScheduledEventsAdditionalPublishingTargetsOutput() ScheduledEventsAdditionalPublishingTargetsOutput {
	return i.ToScheduledEventsAdditionalPublishingTargetsOutputWithContext(context.Background())
}

func (i ScheduledEventsAdditionalPublishingTargetsArgs) ToScheduledEventsAdditionalPublishingTargetsOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsAdditionalPublishingTargetsOutput)
}

func (i ScheduledEventsAdditionalPublishingTargetsArgs) ToScheduledEventsAdditionalPublishingTargetsPtrOutput() ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return i.ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(context.Background())
}

func (i ScheduledEventsAdditionalPublishingTargetsArgs) ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsAdditionalPublishingTargetsOutput).ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(ctx)
}

// ScheduledEventsAdditionalPublishingTargetsPtrInput is an input type that accepts ScheduledEventsAdditionalPublishingTargetsArgs, ScheduledEventsAdditionalPublishingTargetsPtr and ScheduledEventsAdditionalPublishingTargetsPtrOutput values.
// You can construct a concrete instance of `ScheduledEventsAdditionalPublishingTargetsPtrInput` via:
//
//	        ScheduledEventsAdditionalPublishingTargetsArgs{...}
//
//	or:
//
//	        nil
type ScheduledEventsAdditionalPublishingTargetsPtrInput interface {
	pulumi.Input

	ToScheduledEventsAdditionalPublishingTargetsPtrOutput() ScheduledEventsAdditionalPublishingTargetsPtrOutput
	ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(context.Context) ScheduledEventsAdditionalPublishingTargetsPtrOutput
}

type scheduledEventsAdditionalPublishingTargetsPtrType ScheduledEventsAdditionalPublishingTargetsArgs

func ScheduledEventsAdditionalPublishingTargetsPtr(v *ScheduledEventsAdditionalPublishingTargetsArgs) ScheduledEventsAdditionalPublishingTargetsPtrInput {
	return (*scheduledEventsAdditionalPublishingTargetsPtrType)(v)
}

func (*scheduledEventsAdditionalPublishingTargetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsAdditionalPublishingTargets)(nil)).Elem()
}

func (i *scheduledEventsAdditionalPublishingTargetsPtrType) ToScheduledEventsAdditionalPublishingTargetsPtrOutput() ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return i.ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(context.Background())
}

func (i *scheduledEventsAdditionalPublishingTargetsPtrType) ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsAdditionalPublishingTargetsPtrOutput)
}

type ScheduledEventsAdditionalPublishingTargetsOutput struct{ *pulumi.OutputState }

func (ScheduledEventsAdditionalPublishingTargetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsAdditionalPublishingTargets)(nil)).Elem()
}

func (o ScheduledEventsAdditionalPublishingTargetsOutput) ToScheduledEventsAdditionalPublishingTargetsOutput() ScheduledEventsAdditionalPublishingTargetsOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsOutput) ToScheduledEventsAdditionalPublishingTargetsOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsOutput) ToScheduledEventsAdditionalPublishingTargetsPtrOutput() ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return o.ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(context.Background())
}

func (o ScheduledEventsAdditionalPublishingTargetsOutput) ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledEventsAdditionalPublishingTargets) *ScheduledEventsAdditionalPublishingTargets {
		return &v
	}).(ScheduledEventsAdditionalPublishingTargetsPtrOutput)
}

// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
func (o ScheduledEventsAdditionalPublishingTargetsOutput) EventGridAndResourceGraph() EventGridAndResourceGraphPtrOutput {
	return o.ApplyT(func(v ScheduledEventsAdditionalPublishingTargets) *EventGridAndResourceGraph {
		return v.EventGridAndResourceGraph
	}).(EventGridAndResourceGraphPtrOutput)
}

type ScheduledEventsAdditionalPublishingTargetsPtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsAdditionalPublishingTargetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsAdditionalPublishingTargets)(nil)).Elem()
}

func (o ScheduledEventsAdditionalPublishingTargetsPtrOutput) ToScheduledEventsAdditionalPublishingTargetsPtrOutput() ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsPtrOutput) ToScheduledEventsAdditionalPublishingTargetsPtrOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsPtrOutput) Elem() ScheduledEventsAdditionalPublishingTargetsOutput {
	return o.ApplyT(func(v *ScheduledEventsAdditionalPublishingTargets) ScheduledEventsAdditionalPublishingTargets {
		if v != nil {
			return *v
		}
		var ret ScheduledEventsAdditionalPublishingTargets
		return ret
	}).(ScheduledEventsAdditionalPublishingTargetsOutput)
}

// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
func (o ScheduledEventsAdditionalPublishingTargetsPtrOutput) EventGridAndResourceGraph() EventGridAndResourceGraphPtrOutput {
	return o.ApplyT(func(v *ScheduledEventsAdditionalPublishingTargets) *EventGridAndResourceGraph {
		if v == nil {
			return nil
		}
		return v.EventGridAndResourceGraph
	}).(EventGridAndResourceGraphPtrOutput)
}

type ScheduledEventsAdditionalPublishingTargetsResponse struct {
	// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
	EventGridAndResourceGraph *EventGridAndResourceGraphResponse `pulumi:"eventGridAndResourceGraph"`
}

type ScheduledEventsAdditionalPublishingTargetsResponseOutput struct{ *pulumi.OutputState }

func (ScheduledEventsAdditionalPublishingTargetsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsAdditionalPublishingTargetsResponse)(nil)).Elem()
}

func (o ScheduledEventsAdditionalPublishingTargetsResponseOutput) ToScheduledEventsAdditionalPublishingTargetsResponseOutput() ScheduledEventsAdditionalPublishingTargetsResponseOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsResponseOutput) ToScheduledEventsAdditionalPublishingTargetsResponseOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsResponseOutput {
	return o
}

// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
func (o ScheduledEventsAdditionalPublishingTargetsResponseOutput) EventGridAndResourceGraph() EventGridAndResourceGraphResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsAdditionalPublishingTargetsResponse) *EventGridAndResourceGraphResponse {
		return v.EventGridAndResourceGraph
	}).(EventGridAndResourceGraphResponsePtrOutput)
}

type ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsAdditionalPublishingTargetsResponse)(nil)).Elem()
}

func (o ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput) ToScheduledEventsAdditionalPublishingTargetsResponsePtrOutput() ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput) ToScheduledEventsAdditionalPublishingTargetsResponsePtrOutputWithContext(ctx context.Context) ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput {
	return o
}

func (o ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput) Elem() ScheduledEventsAdditionalPublishingTargetsResponseOutput {
	return o.ApplyT(func(v *ScheduledEventsAdditionalPublishingTargetsResponse) ScheduledEventsAdditionalPublishingTargetsResponse {
		if v != nil {
			return *v
		}
		var ret ScheduledEventsAdditionalPublishingTargetsResponse
		return ret
	}).(ScheduledEventsAdditionalPublishingTargetsResponseOutput)
}

// The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event setting.
func (o ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput) EventGridAndResourceGraph() EventGridAndResourceGraphResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsAdditionalPublishingTargetsResponse) *EventGridAndResourceGraphResponse {
		if v == nil {
			return nil
		}
		return v.EventGridAndResourceGraph
	}).(EventGridAndResourceGraphResponsePtrOutput)
}

// Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations.
type ScheduledEventsPolicy struct {
	// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
	ScheduledEventsAdditionalPublishingTargets *ScheduledEventsAdditionalPublishingTargets `pulumi:"scheduledEventsAdditionalPublishingTargets"`
	// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
	UserInitiatedReboot *UserInitiatedReboot `pulumi:"userInitiatedReboot"`
	// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
	UserInitiatedRedeploy *UserInitiatedRedeploy `pulumi:"userInitiatedRedeploy"`
}

// ScheduledEventsPolicyInput is an input type that accepts ScheduledEventsPolicyArgs and ScheduledEventsPolicyOutput values.
// You can construct a concrete instance of `ScheduledEventsPolicyInput` via:
//
//	ScheduledEventsPolicyArgs{...}
type ScheduledEventsPolicyInput interface {
	pulumi.Input

	ToScheduledEventsPolicyOutput() ScheduledEventsPolicyOutput
	ToScheduledEventsPolicyOutputWithContext(context.Context) ScheduledEventsPolicyOutput
}

// Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations.
type ScheduledEventsPolicyArgs struct {
	// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
	ScheduledEventsAdditionalPublishingTargets ScheduledEventsAdditionalPublishingTargetsPtrInput `pulumi:"scheduledEventsAdditionalPublishingTargets"`
	// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
	UserInitiatedReboot UserInitiatedRebootPtrInput `pulumi:"userInitiatedReboot"`
	// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
	UserInitiatedRedeploy UserInitiatedRedeployPtrInput `pulumi:"userInitiatedRedeploy"`
}

func (ScheduledEventsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsPolicy)(nil)).Elem()
}

func (i ScheduledEventsPolicyArgs) ToScheduledEventsPolicyOutput() ScheduledEventsPolicyOutput {
	return i.ToScheduledEventsPolicyOutputWithContext(context.Background())
}

func (i ScheduledEventsPolicyArgs) ToScheduledEventsPolicyOutputWithContext(ctx context.Context) ScheduledEventsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsPolicyOutput)
}

func (i ScheduledEventsPolicyArgs) ToScheduledEventsPolicyPtrOutput() ScheduledEventsPolicyPtrOutput {
	return i.ToScheduledEventsPolicyPtrOutputWithContext(context.Background())
}

func (i ScheduledEventsPolicyArgs) ToScheduledEventsPolicyPtrOutputWithContext(ctx context.Context) ScheduledEventsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsPolicyOutput).ToScheduledEventsPolicyPtrOutputWithContext(ctx)
}

// ScheduledEventsPolicyPtrInput is an input type that accepts ScheduledEventsPolicyArgs, ScheduledEventsPolicyPtr and ScheduledEventsPolicyPtrOutput values.
// You can construct a concrete instance of `ScheduledEventsPolicyPtrInput` via:
//
//	        ScheduledEventsPolicyArgs{...}
//
//	or:
//
//	        nil
type ScheduledEventsPolicyPtrInput interface {
	pulumi.Input

	ToScheduledEventsPolicyPtrOutput() ScheduledEventsPolicyPtrOutput
	ToScheduledEventsPolicyPtrOutputWithContext(context.Context) ScheduledEventsPolicyPtrOutput
}

type scheduledEventsPolicyPtrType ScheduledEventsPolicyArgs

func ScheduledEventsPolicyPtr(v *ScheduledEventsPolicyArgs) ScheduledEventsPolicyPtrInput {
	return (*scheduledEventsPolicyPtrType)(v)
}

func (*scheduledEventsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsPolicy)(nil)).Elem()
}

func (i *scheduledEventsPolicyPtrType) ToScheduledEventsPolicyPtrOutput() ScheduledEventsPolicyPtrOutput {
	return i.ToScheduledEventsPolicyPtrOutputWithContext(context.Background())
}

func (i *scheduledEventsPolicyPtrType) ToScheduledEventsPolicyPtrOutputWithContext(ctx context.Context) ScheduledEventsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsPolicyPtrOutput)
}

// Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations.
type ScheduledEventsPolicyOutput struct{ *pulumi.OutputState }

func (ScheduledEventsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsPolicy)(nil)).Elem()
}

func (o ScheduledEventsPolicyOutput) ToScheduledEventsPolicyOutput() ScheduledEventsPolicyOutput {
	return o
}

func (o ScheduledEventsPolicyOutput) ToScheduledEventsPolicyOutputWithContext(ctx context.Context) ScheduledEventsPolicyOutput {
	return o
}

func (o ScheduledEventsPolicyOutput) ToScheduledEventsPolicyPtrOutput() ScheduledEventsPolicyPtrOutput {
	return o.ToScheduledEventsPolicyPtrOutputWithContext(context.Background())
}

func (o ScheduledEventsPolicyOutput) ToScheduledEventsPolicyPtrOutputWithContext(ctx context.Context) ScheduledEventsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledEventsPolicy) *ScheduledEventsPolicy {
		return &v
	}).(ScheduledEventsPolicyPtrOutput)
}

// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
func (o ScheduledEventsPolicyOutput) ScheduledEventsAdditionalPublishingTargets() ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return o.ApplyT(func(v ScheduledEventsPolicy) *ScheduledEventsAdditionalPublishingTargets {
		return v.ScheduledEventsAdditionalPublishingTargets
	}).(ScheduledEventsAdditionalPublishingTargetsPtrOutput)
}

// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
func (o ScheduledEventsPolicyOutput) UserInitiatedReboot() UserInitiatedRebootPtrOutput {
	return o.ApplyT(func(v ScheduledEventsPolicy) *UserInitiatedReboot { return v.UserInitiatedReboot }).(UserInitiatedRebootPtrOutput)
}

// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
func (o ScheduledEventsPolicyOutput) UserInitiatedRedeploy() UserInitiatedRedeployPtrOutput {
	return o.ApplyT(func(v ScheduledEventsPolicy) *UserInitiatedRedeploy { return v.UserInitiatedRedeploy }).(UserInitiatedRedeployPtrOutput)
}

type ScheduledEventsPolicyPtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsPolicy)(nil)).Elem()
}

func (o ScheduledEventsPolicyPtrOutput) ToScheduledEventsPolicyPtrOutput() ScheduledEventsPolicyPtrOutput {
	return o
}

func (o ScheduledEventsPolicyPtrOutput) ToScheduledEventsPolicyPtrOutputWithContext(ctx context.Context) ScheduledEventsPolicyPtrOutput {
	return o
}

func (o ScheduledEventsPolicyPtrOutput) Elem() ScheduledEventsPolicyOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicy) ScheduledEventsPolicy {
		if v != nil {
			return *v
		}
		var ret ScheduledEventsPolicy
		return ret
	}).(ScheduledEventsPolicyOutput)
}

// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
func (o ScheduledEventsPolicyPtrOutput) ScheduledEventsAdditionalPublishingTargets() ScheduledEventsAdditionalPublishingTargetsPtrOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicy) *ScheduledEventsAdditionalPublishingTargets {
		if v == nil {
			return nil
		}
		return v.ScheduledEventsAdditionalPublishingTargets
	}).(ScheduledEventsAdditionalPublishingTargetsPtrOutput)
}

// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
func (o ScheduledEventsPolicyPtrOutput) UserInitiatedReboot() UserInitiatedRebootPtrOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicy) *UserInitiatedReboot {
		if v == nil {
			return nil
		}
		return v.UserInitiatedReboot
	}).(UserInitiatedRebootPtrOutput)
}

// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
func (o ScheduledEventsPolicyPtrOutput) UserInitiatedRedeploy() UserInitiatedRedeployPtrOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicy) *UserInitiatedRedeploy {
		if v == nil {
			return nil
		}
		return v.UserInitiatedRedeploy
	}).(UserInitiatedRedeployPtrOutput)
}

// Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations.
type ScheduledEventsPolicyResponse struct {
	// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
	ScheduledEventsAdditionalPublishingTargets *ScheduledEventsAdditionalPublishingTargetsResponse `pulumi:"scheduledEventsAdditionalPublishingTargets"`
	// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
	UserInitiatedReboot *UserInitiatedRebootResponse `pulumi:"userInitiatedReboot"`
	// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
	UserInitiatedRedeploy *UserInitiatedRedeployResponse `pulumi:"userInitiatedRedeploy"`
}

// Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations.
type ScheduledEventsPolicyResponseOutput struct{ *pulumi.OutputState }

func (ScheduledEventsPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsPolicyResponse)(nil)).Elem()
}

func (o ScheduledEventsPolicyResponseOutput) ToScheduledEventsPolicyResponseOutput() ScheduledEventsPolicyResponseOutput {
	return o
}

func (o ScheduledEventsPolicyResponseOutput) ToScheduledEventsPolicyResponseOutputWithContext(ctx context.Context) ScheduledEventsPolicyResponseOutput {
	return o
}

// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
func (o ScheduledEventsPolicyResponseOutput) ScheduledEventsAdditionalPublishingTargets() ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsPolicyResponse) *ScheduledEventsAdditionalPublishingTargetsResponse {
		return v.ScheduledEventsAdditionalPublishingTargets
	}).(ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput)
}

// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
func (o ScheduledEventsPolicyResponseOutput) UserInitiatedReboot() UserInitiatedRebootResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsPolicyResponse) *UserInitiatedRebootResponse { return v.UserInitiatedReboot }).(UserInitiatedRebootResponsePtrOutput)
}

// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
func (o ScheduledEventsPolicyResponseOutput) UserInitiatedRedeploy() UserInitiatedRedeployResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsPolicyResponse) *UserInitiatedRedeployResponse { return v.UserInitiatedRedeploy }).(UserInitiatedRedeployResponsePtrOutput)
}

type ScheduledEventsPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsPolicyResponse)(nil)).Elem()
}

func (o ScheduledEventsPolicyResponsePtrOutput) ToScheduledEventsPolicyResponsePtrOutput() ScheduledEventsPolicyResponsePtrOutput {
	return o
}

func (o ScheduledEventsPolicyResponsePtrOutput) ToScheduledEventsPolicyResponsePtrOutputWithContext(ctx context.Context) ScheduledEventsPolicyResponsePtrOutput {
	return o
}

func (o ScheduledEventsPolicyResponsePtrOutput) Elem() ScheduledEventsPolicyResponseOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicyResponse) ScheduledEventsPolicyResponse {
		if v != nil {
			return *v
		}
		var ret ScheduledEventsPolicyResponse
		return ret
	}).(ScheduledEventsPolicyResponseOutput)
}

// The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets.
func (o ScheduledEventsPolicyResponsePtrOutput) ScheduledEventsAdditionalPublishingTargets() ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicyResponse) *ScheduledEventsAdditionalPublishingTargetsResponse {
		if v == nil {
			return nil
		}
		return v.ScheduledEventsAdditionalPublishingTargets
	}).(ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput)
}

// The configuration parameters used while creating userInitiatedReboot scheduled event setting creation.
func (o ScheduledEventsPolicyResponsePtrOutput) UserInitiatedReboot() UserInitiatedRebootResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicyResponse) *UserInitiatedRebootResponse {
		if v == nil {
			return nil
		}
		return v.UserInitiatedReboot
	}).(UserInitiatedRebootResponsePtrOutput)
}

// The configuration parameters used while creating userInitiatedRedeploy scheduled event setting creation.
func (o ScheduledEventsPolicyResponsePtrOutput) UserInitiatedRedeploy() UserInitiatedRedeployResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsPolicyResponse) *UserInitiatedRedeployResponse {
		if v == nil {
			return nil
		}
		return v.UserInitiatedRedeploy
	}).(UserInitiatedRedeployResponsePtrOutput)
}

type ScheduledEventsProfile struct {
	// Specifies OS Image Scheduled Event related configurations.
	OsImageNotificationProfile *OSImageNotificationProfile `pulumi:"osImageNotificationProfile"`
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile *TerminateNotificationProfile `pulumi:"terminateNotificationProfile"`
}

// ScheduledEventsProfileInput is an input type that accepts ScheduledEventsProfileArgs and ScheduledEventsProfileOutput values.
// You can construct a concrete instance of `ScheduledEventsProfileInput` via:
//
//	ScheduledEventsProfileArgs{...}
type ScheduledEventsProfileInput interface {
	pulumi.Input

	ToScheduledEventsProfileOutput() ScheduledEventsProfileOutput
	ToScheduledEventsProfileOutputWithContext(context.Context) ScheduledEventsProfileOutput
}

type ScheduledEventsProfileArgs struct {
	// Specifies OS Image Scheduled Event related configurations.
	OsImageNotificationProfile OSImageNotificationProfilePtrInput `pulumi:"osImageNotificationProfile"`
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile TerminateNotificationProfilePtrInput `pulumi:"terminateNotificationProfile"`
}

func (ScheduledEventsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsProfile)(nil)).Elem()
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfileOutput() ScheduledEventsProfileOutput {
	return i.ToScheduledEventsProfileOutputWithContext(context.Background())
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfileOutputWithContext(ctx context.Context) ScheduledEventsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsProfileOutput)
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput {
	return i.ToScheduledEventsProfilePtrOutputWithContext(context.Background())
}

func (i ScheduledEventsProfileArgs) ToScheduledEventsProfilePtrOutputWithContext(ctx context.Context) ScheduledEventsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsProfileOutput).ToScheduledEventsProfilePtrOutputWithContext(ctx)
}

// ScheduledEventsProfilePtrInput is an input type that accepts ScheduledEventsProfileArgs, ScheduledEventsProfilePtr and ScheduledEventsProfilePtrOutput values.
// You can construct a concrete instance of `ScheduledEventsProfilePtrInput` via:
//
//	        ScheduledEventsProfileArgs{...}
//
//	or:
//
//	        nil
type ScheduledEventsProfilePtrInput interface {
	pulumi.Input

	ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput
	ToScheduledEventsProfilePtrOutputWithContext(context.Context) ScheduledEventsProfilePtrOutput
}

type scheduledEventsProfilePtrType ScheduledEventsProfileArgs

func ScheduledEventsProfilePtr(v *ScheduledEventsProfileArgs) ScheduledEventsProfilePtrInput {
	return (*scheduledEventsProfilePtrType)(v)
}

func (*scheduledEventsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsProfile)(nil)).Elem()
}

func (i *scheduledEventsProfilePtrType) ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput {
	return i.ToScheduledEventsProfilePtrOutputWithContext(context.Background())
}

func (i *scheduledEventsProfilePtrType) ToScheduledEventsProfilePtrOutputWithContext(ctx context.Context) ScheduledEventsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledEventsProfilePtrOutput)
}

type ScheduledEventsProfileOutput struct{ *pulumi.OutputState }

func (ScheduledEventsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsProfile)(nil)).Elem()
}

func (o ScheduledEventsProfileOutput) ToScheduledEventsProfileOutput() ScheduledEventsProfileOutput {
	return o
}

func (o ScheduledEventsProfileOutput) ToScheduledEventsProfileOutputWithContext(ctx context.Context) ScheduledEventsProfileOutput {
	return o
}

func (o ScheduledEventsProfileOutput) ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput {
	return o.ToScheduledEventsProfilePtrOutputWithContext(context.Background())
}

func (o ScheduledEventsProfileOutput) ToScheduledEventsProfilePtrOutputWithContext(ctx context.Context) ScheduledEventsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledEventsProfile) *ScheduledEventsProfile {
		return &v
	}).(ScheduledEventsProfilePtrOutput)
}

// Specifies OS Image Scheduled Event related configurations.
func (o ScheduledEventsProfileOutput) OsImageNotificationProfile() OSImageNotificationProfilePtrOutput {
	return o.ApplyT(func(v ScheduledEventsProfile) *OSImageNotificationProfile { return v.OsImageNotificationProfile }).(OSImageNotificationProfilePtrOutput)
}

// Specifies Terminate Scheduled Event related configurations.
func (o ScheduledEventsProfileOutput) TerminateNotificationProfile() TerminateNotificationProfilePtrOutput {
	return o.ApplyT(func(v ScheduledEventsProfile) *TerminateNotificationProfile { return v.TerminateNotificationProfile }).(TerminateNotificationProfilePtrOutput)
}

type ScheduledEventsProfilePtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsProfile)(nil)).Elem()
}

func (o ScheduledEventsProfilePtrOutput) ToScheduledEventsProfilePtrOutput() ScheduledEventsProfilePtrOutput {
	return o
}

func (o ScheduledEventsProfilePtrOutput) ToScheduledEventsProfilePtrOutputWithContext(ctx context.Context) ScheduledEventsProfilePtrOutput {
	return o
}

func (o ScheduledEventsProfilePtrOutput) Elem() ScheduledEventsProfileOutput {
	return o.ApplyT(func(v *ScheduledEventsProfile) ScheduledEventsProfile {
		if v != nil {
			return *v
		}
		var ret ScheduledEventsProfile
		return ret
	}).(ScheduledEventsProfileOutput)
}

// Specifies OS Image Scheduled Event related configurations.
func (o ScheduledEventsProfilePtrOutput) OsImageNotificationProfile() OSImageNotificationProfilePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsProfile) *OSImageNotificationProfile {
		if v == nil {
			return nil
		}
		return v.OsImageNotificationProfile
	}).(OSImageNotificationProfilePtrOutput)
}

// Specifies Terminate Scheduled Event related configurations.
func (o ScheduledEventsProfilePtrOutput) TerminateNotificationProfile() TerminateNotificationProfilePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsProfile) *TerminateNotificationProfile {
		if v == nil {
			return nil
		}
		return v.TerminateNotificationProfile
	}).(TerminateNotificationProfilePtrOutput)
}

type ScheduledEventsProfileResponse struct {
	// Specifies OS Image Scheduled Event related configurations.
	OsImageNotificationProfile *OSImageNotificationProfileResponse `pulumi:"osImageNotificationProfile"`
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile *TerminateNotificationProfileResponse `pulumi:"terminateNotificationProfile"`
}

type ScheduledEventsProfileResponseOutput struct{ *pulumi.OutputState }

func (ScheduledEventsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledEventsProfileResponse)(nil)).Elem()
}

func (o ScheduledEventsProfileResponseOutput) ToScheduledEventsProfileResponseOutput() ScheduledEventsProfileResponseOutput {
	return o
}

func (o ScheduledEventsProfileResponseOutput) ToScheduledEventsProfileResponseOutputWithContext(ctx context.Context) ScheduledEventsProfileResponseOutput {
	return o
}

// Specifies OS Image Scheduled Event related configurations.
func (o ScheduledEventsProfileResponseOutput) OsImageNotificationProfile() OSImageNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsProfileResponse) *OSImageNotificationProfileResponse {
		return v.OsImageNotificationProfile
	}).(OSImageNotificationProfileResponsePtrOutput)
}

// Specifies Terminate Scheduled Event related configurations.
func (o ScheduledEventsProfileResponseOutput) TerminateNotificationProfile() TerminateNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v ScheduledEventsProfileResponse) *TerminateNotificationProfileResponse {
		return v.TerminateNotificationProfile
	}).(TerminateNotificationProfileResponsePtrOutput)
}

type ScheduledEventsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduledEventsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledEventsProfileResponse)(nil)).Elem()
}

func (o ScheduledEventsProfileResponsePtrOutput) ToScheduledEventsProfileResponsePtrOutput() ScheduledEventsProfileResponsePtrOutput {
	return o
}

func (o ScheduledEventsProfileResponsePtrOutput) ToScheduledEventsProfileResponsePtrOutputWithContext(ctx context.Context) ScheduledEventsProfileResponsePtrOutput {
	return o
}

func (o ScheduledEventsProfileResponsePtrOutput) Elem() ScheduledEventsProfileResponseOutput {
	return o.ApplyT(func(v *ScheduledEventsProfileResponse) ScheduledEventsProfileResponse {
		if v != nil {
			return *v
		}
		var ret ScheduledEventsProfileResponse
		return ret
	}).(ScheduledEventsProfileResponseOutput)
}

// Specifies OS Image Scheduled Event related configurations.
func (o ScheduledEventsProfileResponsePtrOutput) OsImageNotificationProfile() OSImageNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsProfileResponse) *OSImageNotificationProfileResponse {
		if v == nil {
			return nil
		}
		return v.OsImageNotificationProfile
	}).(OSImageNotificationProfileResponsePtrOutput)
}

// Specifies Terminate Scheduled Event related configurations.
func (o ScheduledEventsProfileResponsePtrOutput) TerminateNotificationProfile() TerminateNotificationProfileResponsePtrOutput {
	return o.ApplyT(func(v *ScheduledEventsProfileResponse) *TerminateNotificationProfileResponse {
		if v == nil {
			return nil
		}
		return v.TerminateNotificationProfile
	}).(TerminateNotificationProfileResponsePtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
type SecurityPostureReference struct {
	// The list of virtual machine extension names to exclude when applying the security posture.
	ExcludeExtensions []string `pulumi:"excludeExtensions"`
	// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
	Id string `pulumi:"id"`
	// Whether the security posture can be overridden by the user.
	IsOverridable *bool `pulumi:"isOverridable"`
}

// SecurityPostureReferenceInput is an input type that accepts SecurityPostureReferenceArgs and SecurityPostureReferenceOutput values.
// You can construct a concrete instance of `SecurityPostureReferenceInput` via:
//
//	SecurityPostureReferenceArgs{...}
type SecurityPostureReferenceInput interface {
	pulumi.Input

	ToSecurityPostureReferenceOutput() SecurityPostureReferenceOutput
	ToSecurityPostureReferenceOutputWithContext(context.Context) SecurityPostureReferenceOutput
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
type SecurityPostureReferenceArgs struct {
	// The list of virtual machine extension names to exclude when applying the security posture.
	ExcludeExtensions pulumi.StringArrayInput `pulumi:"excludeExtensions"`
	// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
	Id pulumi.StringInput `pulumi:"id"`
	// Whether the security posture can be overridden by the user.
	IsOverridable pulumi.BoolPtrInput `pulumi:"isOverridable"`
}

func (SecurityPostureReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureReference)(nil)).Elem()
}

func (i SecurityPostureReferenceArgs) ToSecurityPostureReferenceOutput() SecurityPostureReferenceOutput {
	return i.ToSecurityPostureReferenceOutputWithContext(context.Background())
}

func (i SecurityPostureReferenceArgs) ToSecurityPostureReferenceOutputWithContext(ctx context.Context) SecurityPostureReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureReferenceOutput)
}

func (i SecurityPostureReferenceArgs) ToSecurityPostureReferencePtrOutput() SecurityPostureReferencePtrOutput {
	return i.ToSecurityPostureReferencePtrOutputWithContext(context.Background())
}

func (i SecurityPostureReferenceArgs) ToSecurityPostureReferencePtrOutputWithContext(ctx context.Context) SecurityPostureReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureReferenceOutput).ToSecurityPostureReferencePtrOutputWithContext(ctx)
}

// SecurityPostureReferencePtrInput is an input type that accepts SecurityPostureReferenceArgs, SecurityPostureReferencePtr and SecurityPostureReferencePtrOutput values.
// You can construct a concrete instance of `SecurityPostureReferencePtrInput` via:
//
//	        SecurityPostureReferenceArgs{...}
//
//	or:
//
//	        nil
type SecurityPostureReferencePtrInput interface {
	pulumi.Input

	ToSecurityPostureReferencePtrOutput() SecurityPostureReferencePtrOutput
	ToSecurityPostureReferencePtrOutputWithContext(context.Context) SecurityPostureReferencePtrOutput
}

type securityPostureReferencePtrType SecurityPostureReferenceArgs

func SecurityPostureReferencePtr(v *SecurityPostureReferenceArgs) SecurityPostureReferencePtrInput {
	return (*securityPostureReferencePtrType)(v)
}

func (*securityPostureReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureReference)(nil)).Elem()
}

func (i *securityPostureReferencePtrType) ToSecurityPostureReferencePtrOutput() SecurityPostureReferencePtrOutput {
	return i.ToSecurityPostureReferencePtrOutputWithContext(context.Background())
}

func (i *securityPostureReferencePtrType) ToSecurityPostureReferencePtrOutputWithContext(ctx context.Context) SecurityPostureReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureReferencePtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
type SecurityPostureReferenceOutput struct{ *pulumi.OutputState }

func (SecurityPostureReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureReference)(nil)).Elem()
}

func (o SecurityPostureReferenceOutput) ToSecurityPostureReferenceOutput() SecurityPostureReferenceOutput {
	return o
}

func (o SecurityPostureReferenceOutput) ToSecurityPostureReferenceOutputWithContext(ctx context.Context) SecurityPostureReferenceOutput {
	return o
}

func (o SecurityPostureReferenceOutput) ToSecurityPostureReferencePtrOutput() SecurityPostureReferencePtrOutput {
	return o.ToSecurityPostureReferencePtrOutputWithContext(context.Background())
}

func (o SecurityPostureReferenceOutput) ToSecurityPostureReferencePtrOutputWithContext(ctx context.Context) SecurityPostureReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityPostureReference) *SecurityPostureReference {
		return &v
	}).(SecurityPostureReferencePtrOutput)
}

// The list of virtual machine extension names to exclude when applying the security posture.
func (o SecurityPostureReferenceOutput) ExcludeExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityPostureReference) []string { return v.ExcludeExtensions }).(pulumi.StringArrayOutput)
}

// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
func (o SecurityPostureReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPostureReference) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the security posture can be overridden by the user.
func (o SecurityPostureReferenceOutput) IsOverridable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityPostureReference) *bool { return v.IsOverridable }).(pulumi.BoolPtrOutput)
}

type SecurityPostureReferencePtrOutput struct{ *pulumi.OutputState }

func (SecurityPostureReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureReference)(nil)).Elem()
}

func (o SecurityPostureReferencePtrOutput) ToSecurityPostureReferencePtrOutput() SecurityPostureReferencePtrOutput {
	return o
}

func (o SecurityPostureReferencePtrOutput) ToSecurityPostureReferencePtrOutputWithContext(ctx context.Context) SecurityPostureReferencePtrOutput {
	return o
}

func (o SecurityPostureReferencePtrOutput) Elem() SecurityPostureReferenceOutput {
	return o.ApplyT(func(v *SecurityPostureReference) SecurityPostureReference {
		if v != nil {
			return *v
		}
		var ret SecurityPostureReference
		return ret
	}).(SecurityPostureReferenceOutput)
}

// The list of virtual machine extension names to exclude when applying the security posture.
func (o SecurityPostureReferencePtrOutput) ExcludeExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPostureReference) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeExtensions
	}).(pulumi.StringArrayOutput)
}

// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
func (o SecurityPostureReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPostureReference) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Whether the security posture can be overridden by the user.
func (o SecurityPostureReferencePtrOutput) IsOverridable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPostureReference) *bool {
		if v == nil {
			return nil
		}
		return v.IsOverridable
	}).(pulumi.BoolPtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
type SecurityPostureReferenceResponse struct {
	// The list of virtual machine extension names to exclude when applying the security posture.
	ExcludeExtensions []string `pulumi:"excludeExtensions"`
	// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
	Id string `pulumi:"id"`
	// Whether the security posture can be overridden by the user.
	IsOverridable *bool `pulumi:"isOverridable"`
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
type SecurityPostureReferenceResponseOutput struct{ *pulumi.OutputState }

func (SecurityPostureReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureReferenceResponse)(nil)).Elem()
}

func (o SecurityPostureReferenceResponseOutput) ToSecurityPostureReferenceResponseOutput() SecurityPostureReferenceResponseOutput {
	return o
}

func (o SecurityPostureReferenceResponseOutput) ToSecurityPostureReferenceResponseOutputWithContext(ctx context.Context) SecurityPostureReferenceResponseOutput {
	return o
}

// The list of virtual machine extension names to exclude when applying the security posture.
func (o SecurityPostureReferenceResponseOutput) ExcludeExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityPostureReferenceResponse) []string { return v.ExcludeExtensions }).(pulumi.StringArrayOutput)
}

// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
func (o SecurityPostureReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPostureReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the security posture can be overridden by the user.
func (o SecurityPostureReferenceResponseOutput) IsOverridable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityPostureReferenceResponse) *bool { return v.IsOverridable }).(pulumi.BoolPtrOutput)
}

type SecurityPostureReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityPostureReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureReferenceResponse)(nil)).Elem()
}

func (o SecurityPostureReferenceResponsePtrOutput) ToSecurityPostureReferenceResponsePtrOutput() SecurityPostureReferenceResponsePtrOutput {
	return o
}

func (o SecurityPostureReferenceResponsePtrOutput) ToSecurityPostureReferenceResponsePtrOutputWithContext(ctx context.Context) SecurityPostureReferenceResponsePtrOutput {
	return o
}

func (o SecurityPostureReferenceResponsePtrOutput) Elem() SecurityPostureReferenceResponseOutput {
	return o.ApplyT(func(v *SecurityPostureReferenceResponse) SecurityPostureReferenceResponse {
		if v != nil {
			return *v
		}
		var ret SecurityPostureReferenceResponse
		return ret
	}).(SecurityPostureReferenceResponseOutput)
}

// The list of virtual machine extension names to exclude when applying the security posture.
func (o SecurityPostureReferenceResponsePtrOutput) ExcludeExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPostureReferenceResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeExtensions
	}).(pulumi.StringArrayOutput)
}

// The security posture reference id in the form of /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest
func (o SecurityPostureReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPostureReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Whether the security posture can be overridden by the user.
func (o SecurityPostureReferenceResponsePtrOutput) IsOverridable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPostureReferenceResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsOverridable
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfile struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost *bool `pulumi:"encryptionAtHost"`
	// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
	EncryptionIdentity *EncryptionIdentity `pulumi:"encryptionIdentity"`
	// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
	ProxyAgentSettings *ProxyAgentSettings `pulumi:"proxyAgentSettings"`
	// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
	SecurityType *string `pulumi:"securityType"`
	// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
	UefiSettings *UefiSettings `pulumi:"uefiSettings"`
}

// SecurityProfileInput is an input type that accepts SecurityProfileArgs and SecurityProfileOutput values.
// You can construct a concrete instance of `SecurityProfileInput` via:
//
//	SecurityProfileArgs{...}
type SecurityProfileInput interface {
	pulumi.Input

	ToSecurityProfileOutput() SecurityProfileOutput
	ToSecurityProfileOutputWithContext(context.Context) SecurityProfileOutput
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileArgs struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost pulumi.BoolPtrInput `pulumi:"encryptionAtHost"`
	// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
	EncryptionIdentity EncryptionIdentityPtrInput `pulumi:"encryptionIdentity"`
	// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
	ProxyAgentSettings ProxyAgentSettingsPtrInput `pulumi:"proxyAgentSettings"`
	// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
	SecurityType pulumi.StringPtrInput `pulumi:"securityType"`
	// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
	UefiSettings UefiSettingsPtrInput `pulumi:"uefiSettings"`
}

func (SecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfile)(nil)).Elem()
}

func (i SecurityProfileArgs) ToSecurityProfileOutput() SecurityProfileOutput {
	return i.ToSecurityProfileOutputWithContext(context.Background())
}

func (i SecurityProfileArgs) ToSecurityProfileOutputWithContext(ctx context.Context) SecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileOutput)
}

func (i SecurityProfileArgs) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return i.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (i SecurityProfileArgs) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileOutput).ToSecurityProfilePtrOutputWithContext(ctx)
}

// SecurityProfilePtrInput is an input type that accepts SecurityProfileArgs, SecurityProfilePtr and SecurityProfilePtrOutput values.
// You can construct a concrete instance of `SecurityProfilePtrInput` via:
//
//	        SecurityProfileArgs{...}
//
//	or:
//
//	        nil
type SecurityProfilePtrInput interface {
	pulumi.Input

	ToSecurityProfilePtrOutput() SecurityProfilePtrOutput
	ToSecurityProfilePtrOutputWithContext(context.Context) SecurityProfilePtrOutput
}

type securityProfilePtrType SecurityProfileArgs

func SecurityProfilePtr(v *SecurityProfileArgs) SecurityProfilePtrInput {
	return (*securityProfilePtrType)(v)
}

func (*securityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfile)(nil)).Elem()
}

func (i *securityProfilePtrType) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return i.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *securityProfilePtrType) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfilePtrOutput)
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileOutput struct{ *pulumi.OutputState }

func (SecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfile)(nil)).Elem()
}

func (o SecurityProfileOutput) ToSecurityProfileOutput() SecurityProfileOutput {
	return o
}

func (o SecurityProfileOutput) ToSecurityProfileOutputWithContext(ctx context.Context) SecurityProfileOutput {
	return o
}

func (o SecurityProfileOutput) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return o.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (o SecurityProfileOutput) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityProfile) *SecurityProfile {
		return &v
	}).(SecurityProfilePtrOutput)
}

// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
func (o SecurityProfileOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *bool { return v.EncryptionAtHost }).(pulumi.BoolPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
func (o SecurityProfileOutput) EncryptionIdentity() EncryptionIdentityPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *EncryptionIdentity { return v.EncryptionIdentity }).(EncryptionIdentityPtrOutput)
}

// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
func (o SecurityProfileOutput) ProxyAgentSettings() ProxyAgentSettingsPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *ProxyAgentSettings { return v.ProxyAgentSettings }).(ProxyAgentSettingsPtrOutput)
}

// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
func (o SecurityProfileOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.SecurityType }).(pulumi.StringPtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
func (o SecurityProfileOutput) UefiSettings() UefiSettingsPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *UefiSettings { return v.UefiSettings }).(UefiSettingsPtrOutput)
}

type SecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfile)(nil)).Elem()
}

func (o SecurityProfilePtrOutput) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return o
}

func (o SecurityProfilePtrOutput) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return o
}

func (o SecurityProfilePtrOutput) Elem() SecurityProfileOutput {
	return o.ApplyT(func(v *SecurityProfile) SecurityProfile {
		if v != nil {
			return *v
		}
		var ret SecurityProfile
		return ret
	}).(SecurityProfileOutput)
}

// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
func (o SecurityProfilePtrOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionAtHost
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
func (o SecurityProfilePtrOutput) EncryptionIdentity() EncryptionIdentityPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *EncryptionIdentity {
		if v == nil {
			return nil
		}
		return v.EncryptionIdentity
	}).(EncryptionIdentityPtrOutput)
}

// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
func (o SecurityProfilePtrOutput) ProxyAgentSettings() ProxyAgentSettingsPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *ProxyAgentSettings {
		if v == nil {
			return nil
		}
		return v.ProxyAgentSettings
	}).(ProxyAgentSettingsPtrOutput)
}

// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
func (o SecurityProfilePtrOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecurityType
	}).(pulumi.StringPtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
func (o SecurityProfilePtrOutput) UefiSettings() UefiSettingsPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *UefiSettings {
		if v == nil {
			return nil
		}
		return v.UefiSettings
	}).(UefiSettingsPtrOutput)
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileResponse struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost *bool `pulumi:"encryptionAtHost"`
	// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
	EncryptionIdentity *EncryptionIdentityResponse `pulumi:"encryptionIdentity"`
	// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
	ProxyAgentSettings *ProxyAgentSettingsResponse `pulumi:"proxyAgentSettings"`
	// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
	SecurityType *string `pulumi:"securityType"`
	// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
	UefiSettings *UefiSettingsResponse `pulumi:"uefiSettings"`
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (SecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileResponse)(nil)).Elem()
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponseOutput() SecurityProfileResponseOutput {
	return o
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponseOutputWithContext(ctx context.Context) SecurityProfileResponseOutput {
	return o
}

// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
func (o SecurityProfileResponseOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *bool { return v.EncryptionAtHost }).(pulumi.BoolPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
func (o SecurityProfileResponseOutput) EncryptionIdentity() EncryptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *EncryptionIdentityResponse { return v.EncryptionIdentity }).(EncryptionIdentityResponsePtrOutput)
}

// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
func (o SecurityProfileResponseOutput) ProxyAgentSettings() ProxyAgentSettingsResponsePtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *ProxyAgentSettingsResponse { return v.ProxyAgentSettings }).(ProxyAgentSettingsResponsePtrOutput)
}

// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
func (o SecurityProfileResponseOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.SecurityType }).(pulumi.StringPtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
func (o SecurityProfileResponseOutput) UefiSettings() UefiSettingsResponsePtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *UefiSettingsResponse { return v.UefiSettings }).(UefiSettingsResponsePtrOutput)
}

type SecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileResponse)(nil)).Elem()
}

func (o SecurityProfileResponsePtrOutput) ToSecurityProfileResponsePtrOutput() SecurityProfileResponsePtrOutput {
	return o
}

func (o SecurityProfileResponsePtrOutput) ToSecurityProfileResponsePtrOutputWithContext(ctx context.Context) SecurityProfileResponsePtrOutput {
	return o
}

func (o SecurityProfileResponsePtrOutput) Elem() SecurityProfileResponseOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) SecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret SecurityProfileResponse
		return ret
	}).(SecurityProfileResponseOutput)
}

// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at host will be disabled unless this property is set to true for the resource.
func (o SecurityProfileResponsePtrOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionAtHost
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Managed Identity used by ADE to get access token for keyvault operations.
func (o SecurityProfileResponsePtrOutput) EncryptionIdentity() EncryptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *EncryptionIdentityResponse {
		if v == nil {
			return nil
		}
		return v.EncryptionIdentity
	}).(EncryptionIdentityResponsePtrOutput)
}

// Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version: 2023-09-01.
func (o SecurityProfileResponsePtrOutput) ProxyAgentSettings() ProxyAgentSettingsResponsePtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *ProxyAgentSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ProxyAgentSettings
	}).(ProxyAgentSettingsResponsePtrOutput)
}

// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set.
func (o SecurityProfileResponsePtrOutput) SecurityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecurityType
	}).(pulumi.StringPtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
func (o SecurityProfileResponsePtrOutput) UefiSettings() UefiSettingsResponsePtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *UefiSettingsResponse {
		if v == nil {
			return nil
		}
		return v.UefiSettings
	}).(UefiSettingsResponsePtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
type ServiceArtifactReference struct {
	// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
	Id *string `pulumi:"id"`
}

// ServiceArtifactReferenceInput is an input type that accepts ServiceArtifactReferenceArgs and ServiceArtifactReferenceOutput values.
// You can construct a concrete instance of `ServiceArtifactReferenceInput` via:
//
//	ServiceArtifactReferenceArgs{...}
type ServiceArtifactReferenceInput interface {
	pulumi.Input

	ToServiceArtifactReferenceOutput() ServiceArtifactReferenceOutput
	ToServiceArtifactReferenceOutputWithContext(context.Context) ServiceArtifactReferenceOutput
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
type ServiceArtifactReferenceArgs struct {
	// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ServiceArtifactReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceArtifactReference)(nil)).Elem()
}

func (i ServiceArtifactReferenceArgs) ToServiceArtifactReferenceOutput() ServiceArtifactReferenceOutput {
	return i.ToServiceArtifactReferenceOutputWithContext(context.Background())
}

func (i ServiceArtifactReferenceArgs) ToServiceArtifactReferenceOutputWithContext(ctx context.Context) ServiceArtifactReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArtifactReferenceOutput)
}

func (i ServiceArtifactReferenceArgs) ToServiceArtifactReferencePtrOutput() ServiceArtifactReferencePtrOutput {
	return i.ToServiceArtifactReferencePtrOutputWithContext(context.Background())
}

func (i ServiceArtifactReferenceArgs) ToServiceArtifactReferencePtrOutputWithContext(ctx context.Context) ServiceArtifactReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArtifactReferenceOutput).ToServiceArtifactReferencePtrOutputWithContext(ctx)
}

// ServiceArtifactReferencePtrInput is an input type that accepts ServiceArtifactReferenceArgs, ServiceArtifactReferencePtr and ServiceArtifactReferencePtrOutput values.
// You can construct a concrete instance of `ServiceArtifactReferencePtrInput` via:
//
//	        ServiceArtifactReferenceArgs{...}
//
//	or:
//
//	        nil
type ServiceArtifactReferencePtrInput interface {
	pulumi.Input

	ToServiceArtifactReferencePtrOutput() ServiceArtifactReferencePtrOutput
	ToServiceArtifactReferencePtrOutputWithContext(context.Context) ServiceArtifactReferencePtrOutput
}

type serviceArtifactReferencePtrType ServiceArtifactReferenceArgs

func ServiceArtifactReferencePtr(v *ServiceArtifactReferenceArgs) ServiceArtifactReferencePtrInput {
	return (*serviceArtifactReferencePtrType)(v)
}

func (*serviceArtifactReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceArtifactReference)(nil)).Elem()
}

func (i *serviceArtifactReferencePtrType) ToServiceArtifactReferencePtrOutput() ServiceArtifactReferencePtrOutput {
	return i.ToServiceArtifactReferencePtrOutputWithContext(context.Background())
}

func (i *serviceArtifactReferencePtrType) ToServiceArtifactReferencePtrOutputWithContext(ctx context.Context) ServiceArtifactReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArtifactReferencePtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
type ServiceArtifactReferenceOutput struct{ *pulumi.OutputState }

func (ServiceArtifactReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceArtifactReference)(nil)).Elem()
}

func (o ServiceArtifactReferenceOutput) ToServiceArtifactReferenceOutput() ServiceArtifactReferenceOutput {
	return o
}

func (o ServiceArtifactReferenceOutput) ToServiceArtifactReferenceOutputWithContext(ctx context.Context) ServiceArtifactReferenceOutput {
	return o
}

func (o ServiceArtifactReferenceOutput) ToServiceArtifactReferencePtrOutput() ServiceArtifactReferencePtrOutput {
	return o.ToServiceArtifactReferencePtrOutputWithContext(context.Background())
}

func (o ServiceArtifactReferenceOutput) ToServiceArtifactReferencePtrOutputWithContext(ctx context.Context) ServiceArtifactReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceArtifactReference) *ServiceArtifactReference {
		return &v
	}).(ServiceArtifactReferencePtrOutput)
}

// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
func (o ServiceArtifactReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceArtifactReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ServiceArtifactReferencePtrOutput struct{ *pulumi.OutputState }

func (ServiceArtifactReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceArtifactReference)(nil)).Elem()
}

func (o ServiceArtifactReferencePtrOutput) ToServiceArtifactReferencePtrOutput() ServiceArtifactReferencePtrOutput {
	return o
}

func (o ServiceArtifactReferencePtrOutput) ToServiceArtifactReferencePtrOutputWithContext(ctx context.Context) ServiceArtifactReferencePtrOutput {
	return o
}

func (o ServiceArtifactReferencePtrOutput) Elem() ServiceArtifactReferenceOutput {
	return o.ApplyT(func(v *ServiceArtifactReference) ServiceArtifactReference {
		if v != nil {
			return *v
		}
		var ret ServiceArtifactReference
		return ret
	}).(ServiceArtifactReferenceOutput)
}

// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
func (o ServiceArtifactReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceArtifactReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
type ServiceArtifactReferenceResponse struct {
	// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
	Id *string `pulumi:"id"`
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
type ServiceArtifactReferenceResponseOutput struct{ *pulumi.OutputState }

func (ServiceArtifactReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceArtifactReferenceResponse)(nil)).Elem()
}

func (o ServiceArtifactReferenceResponseOutput) ToServiceArtifactReferenceResponseOutput() ServiceArtifactReferenceResponseOutput {
	return o
}

func (o ServiceArtifactReferenceResponseOutput) ToServiceArtifactReferenceResponseOutputWithContext(ctx context.Context) ServiceArtifactReferenceResponseOutput {
	return o
}

// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
func (o ServiceArtifactReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceArtifactReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ServiceArtifactReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceArtifactReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceArtifactReferenceResponse)(nil)).Elem()
}

func (o ServiceArtifactReferenceResponsePtrOutput) ToServiceArtifactReferenceResponsePtrOutput() ServiceArtifactReferenceResponsePtrOutput {
	return o
}

func (o ServiceArtifactReferenceResponsePtrOutput) ToServiceArtifactReferenceResponsePtrOutputWithContext(ctx context.Context) ServiceArtifactReferenceResponsePtrOutput {
	return o
}

func (o ServiceArtifactReferenceResponsePtrOutput) Elem() ServiceArtifactReferenceResponseOutput {
	return o.ApplyT(func(v *ServiceArtifactReferenceResponse) ServiceArtifactReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ServiceArtifactReferenceResponse
		return ret
	}).(ServiceArtifactReferenceResponseOutput)
}

// The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}
func (o ServiceArtifactReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceArtifactReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type ShareInfoElementResponse struct {
	// A relative URI containing the ID of the VM that has the disk attached.
	VmUri string `pulumi:"vmUri"`
}

type ShareInfoElementResponseOutput struct{ *pulumi.OutputState }

func (ShareInfoElementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareInfoElementResponse)(nil)).Elem()
}

func (o ShareInfoElementResponseOutput) ToShareInfoElementResponseOutput() ShareInfoElementResponseOutput {
	return o
}

func (o ShareInfoElementResponseOutput) ToShareInfoElementResponseOutputWithContext(ctx context.Context) ShareInfoElementResponseOutput {
	return o
}

// A relative URI containing the ID of the VM that has the disk attached.
func (o ShareInfoElementResponseOutput) VmUri() pulumi.StringOutput {
	return o.ApplyT(func(v ShareInfoElementResponse) string { return v.VmUri }).(pulumi.StringOutput)
}

type ShareInfoElementResponseArrayOutput struct{ *pulumi.OutputState }

func (ShareInfoElementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ShareInfoElementResponse)(nil)).Elem()
}

func (o ShareInfoElementResponseArrayOutput) ToShareInfoElementResponseArrayOutput() ShareInfoElementResponseArrayOutput {
	return o
}

func (o ShareInfoElementResponseArrayOutput) ToShareInfoElementResponseArrayOutputWithContext(ctx context.Context) ShareInfoElementResponseArrayOutput {
	return o
}

func (o ShareInfoElementResponseArrayOutput) Index(i pulumi.IntInput) ShareInfoElementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ShareInfoElementResponse {
		return vs[0].([]ShareInfoElementResponse)[vs[1].(int)]
	}).(ShareInfoElementResponseOutput)
}

// Profile for gallery sharing to subscription or tenant
type SharingProfile struct {
	// Information of community gallery if current gallery is shared to community.
	CommunityGalleryInfo *CommunityGalleryInfo `pulumi:"communityGalleryInfo"`
	// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
	Permissions *string `pulumi:"permissions"`
}

// SharingProfileInput is an input type that accepts SharingProfileArgs and SharingProfileOutput values.
// You can construct a concrete instance of `SharingProfileInput` via:
//
//	SharingProfileArgs{...}
type SharingProfileInput interface {
	pulumi.Input

	ToSharingProfileOutput() SharingProfileOutput
	ToSharingProfileOutputWithContext(context.Context) SharingProfileOutput
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileArgs struct {
	// Information of community gallery if current gallery is shared to community.
	CommunityGalleryInfo CommunityGalleryInfoPtrInput `pulumi:"communityGalleryInfo"`
	// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
}

func (SharingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfile)(nil)).Elem()
}

func (i SharingProfileArgs) ToSharingProfileOutput() SharingProfileOutput {
	return i.ToSharingProfileOutputWithContext(context.Background())
}

func (i SharingProfileArgs) ToSharingProfileOutputWithContext(ctx context.Context) SharingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingProfileOutput)
}

func (i SharingProfileArgs) ToSharingProfilePtrOutput() SharingProfilePtrOutput {
	return i.ToSharingProfilePtrOutputWithContext(context.Background())
}

func (i SharingProfileArgs) ToSharingProfilePtrOutputWithContext(ctx context.Context) SharingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingProfileOutput).ToSharingProfilePtrOutputWithContext(ctx)
}

// SharingProfilePtrInput is an input type that accepts SharingProfileArgs, SharingProfilePtr and SharingProfilePtrOutput values.
// You can construct a concrete instance of `SharingProfilePtrInput` via:
//
//	        SharingProfileArgs{...}
//
//	or:
//
//	        nil
type SharingProfilePtrInput interface {
	pulumi.Input

	ToSharingProfilePtrOutput() SharingProfilePtrOutput
	ToSharingProfilePtrOutputWithContext(context.Context) SharingProfilePtrOutput
}

type sharingProfilePtrType SharingProfileArgs

func SharingProfilePtr(v *SharingProfileArgs) SharingProfilePtrInput {
	return (*sharingProfilePtrType)(v)
}

func (*sharingProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingProfile)(nil)).Elem()
}

func (i *sharingProfilePtrType) ToSharingProfilePtrOutput() SharingProfilePtrOutput {
	return i.ToSharingProfilePtrOutputWithContext(context.Background())
}

func (i *sharingProfilePtrType) ToSharingProfilePtrOutputWithContext(ctx context.Context) SharingProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharingProfilePtrOutput)
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileOutput struct{ *pulumi.OutputState }

func (SharingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfile)(nil)).Elem()
}

func (o SharingProfileOutput) ToSharingProfileOutput() SharingProfileOutput {
	return o
}

func (o SharingProfileOutput) ToSharingProfileOutputWithContext(ctx context.Context) SharingProfileOutput {
	return o
}

func (o SharingProfileOutput) ToSharingProfilePtrOutput() SharingProfilePtrOutput {
	return o.ToSharingProfilePtrOutputWithContext(context.Background())
}

func (o SharingProfileOutput) ToSharingProfilePtrOutputWithContext(ctx context.Context) SharingProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharingProfile) *SharingProfile {
		return &v
	}).(SharingProfilePtrOutput)
}

// Information of community gallery if current gallery is shared to community.
func (o SharingProfileOutput) CommunityGalleryInfo() CommunityGalleryInfoPtrOutput {
	return o.ApplyT(func(v SharingProfile) *CommunityGalleryInfo { return v.CommunityGalleryInfo }).(CommunityGalleryInfoPtrOutput)
}

// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
func (o SharingProfileOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharingProfile) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

type SharingProfilePtrOutput struct{ *pulumi.OutputState }

func (SharingProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingProfile)(nil)).Elem()
}

func (o SharingProfilePtrOutput) ToSharingProfilePtrOutput() SharingProfilePtrOutput {
	return o
}

func (o SharingProfilePtrOutput) ToSharingProfilePtrOutputWithContext(ctx context.Context) SharingProfilePtrOutput {
	return o
}

func (o SharingProfilePtrOutput) Elem() SharingProfileOutput {
	return o.ApplyT(func(v *SharingProfile) SharingProfile {
		if v != nil {
			return *v
		}
		var ret SharingProfile
		return ret
	}).(SharingProfileOutput)
}

// Information of community gallery if current gallery is shared to community.
func (o SharingProfilePtrOutput) CommunityGalleryInfo() CommunityGalleryInfoPtrOutput {
	return o.ApplyT(func(v *SharingProfile) *CommunityGalleryInfo {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryInfo
	}).(CommunityGalleryInfoPtrOutput)
}

// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
func (o SharingProfilePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharingProfile) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// Group of the gallery sharing profile
type SharingProfileGroupResponse struct {
	// A list of subscription/tenant ids the gallery is aimed to be shared to.
	Ids []string `pulumi:"ids"`
	// This property allows you to specify the type of sharing group. Possible values are: **Subscriptions,** **AADTenants.**
	Type *string `pulumi:"type"`
}

// Group of the gallery sharing profile
type SharingProfileGroupResponseOutput struct{ *pulumi.OutputState }

func (SharingProfileGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfileGroupResponse)(nil)).Elem()
}

func (o SharingProfileGroupResponseOutput) ToSharingProfileGroupResponseOutput() SharingProfileGroupResponseOutput {
	return o
}

func (o SharingProfileGroupResponseOutput) ToSharingProfileGroupResponseOutputWithContext(ctx context.Context) SharingProfileGroupResponseOutput {
	return o
}

// A list of subscription/tenant ids the gallery is aimed to be shared to.
func (o SharingProfileGroupResponseOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SharingProfileGroupResponse) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// This property allows you to specify the type of sharing group. Possible values are: **Subscriptions,** **AADTenants.**
func (o SharingProfileGroupResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharingProfileGroupResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SharingProfileGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (SharingProfileGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharingProfileGroupResponse)(nil)).Elem()
}

func (o SharingProfileGroupResponseArrayOutput) ToSharingProfileGroupResponseArrayOutput() SharingProfileGroupResponseArrayOutput {
	return o
}

func (o SharingProfileGroupResponseArrayOutput) ToSharingProfileGroupResponseArrayOutputWithContext(ctx context.Context) SharingProfileGroupResponseArrayOutput {
	return o
}

func (o SharingProfileGroupResponseArrayOutput) Index(i pulumi.IntInput) SharingProfileGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharingProfileGroupResponse {
		return vs[0].([]SharingProfileGroupResponse)[vs[1].(int)]
	}).(SharingProfileGroupResponseOutput)
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileResponse struct {
	// Information of community gallery if current gallery is shared to community.
	CommunityGalleryInfo *CommunityGalleryInfoResponse `pulumi:"communityGalleryInfo"`
	// A list of sharing profile groups.
	Groups []SharingProfileGroupResponse `pulumi:"groups"`
	// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
	Permissions *string `pulumi:"permissions"`
}

// Profile for gallery sharing to subscription or tenant
type SharingProfileResponseOutput struct{ *pulumi.OutputState }

func (SharingProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingProfileResponse)(nil)).Elem()
}

func (o SharingProfileResponseOutput) ToSharingProfileResponseOutput() SharingProfileResponseOutput {
	return o
}

func (o SharingProfileResponseOutput) ToSharingProfileResponseOutputWithContext(ctx context.Context) SharingProfileResponseOutput {
	return o
}

// Information of community gallery if current gallery is shared to community.
func (o SharingProfileResponseOutput) CommunityGalleryInfo() CommunityGalleryInfoResponsePtrOutput {
	return o.ApplyT(func(v SharingProfileResponse) *CommunityGalleryInfoResponse { return v.CommunityGalleryInfo }).(CommunityGalleryInfoResponsePtrOutput)
}

// A list of sharing profile groups.
func (o SharingProfileResponseOutput) Groups() SharingProfileGroupResponseArrayOutput {
	return o.ApplyT(func(v SharingProfileResponse) []SharingProfileGroupResponse { return v.Groups }).(SharingProfileGroupResponseArrayOutput)
}

// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
func (o SharingProfileResponseOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharingProfileResponse) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

type SharingProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SharingProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharingProfileResponse)(nil)).Elem()
}

func (o SharingProfileResponsePtrOutput) ToSharingProfileResponsePtrOutput() SharingProfileResponsePtrOutput {
	return o
}

func (o SharingProfileResponsePtrOutput) ToSharingProfileResponsePtrOutputWithContext(ctx context.Context) SharingProfileResponsePtrOutput {
	return o
}

func (o SharingProfileResponsePtrOutput) Elem() SharingProfileResponseOutput {
	return o.ApplyT(func(v *SharingProfileResponse) SharingProfileResponse {
		if v != nil {
			return *v
		}
		var ret SharingProfileResponse
		return ret
	}).(SharingProfileResponseOutput)
}

// Information of community gallery if current gallery is shared to community.
func (o SharingProfileResponsePtrOutput) CommunityGalleryInfo() CommunityGalleryInfoResponsePtrOutput {
	return o.ApplyT(func(v *SharingProfileResponse) *CommunityGalleryInfoResponse {
		if v == nil {
			return nil
		}
		return v.CommunityGalleryInfo
	}).(CommunityGalleryInfoResponsePtrOutput)
}

// A list of sharing profile groups.
func (o SharingProfileResponsePtrOutput) Groups() SharingProfileGroupResponseArrayOutput {
	return o.ApplyT(func(v *SharingProfileResponse) []SharingProfileGroupResponse {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(SharingProfileGroupResponseArrayOutput)
}

// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
func (o SharingProfileResponsePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharingProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// Sharing status of current gallery.
type SharingStatusResponse struct {
	// Aggregated sharing state of current gallery.
	AggregatedState string `pulumi:"aggregatedState"`
	// Summary of all regional sharing status.
	Summary []RegionalSharingStatusResponse `pulumi:"summary"`
}

// Sharing status of current gallery.
type SharingStatusResponseOutput struct{ *pulumi.OutputState }

func (SharingStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharingStatusResponse)(nil)).Elem()
}

func (o SharingStatusResponseOutput) ToSharingStatusResponseOutput() SharingStatusResponseOutput {
	return o
}

func (o SharingStatusResponseOutput) ToSharingStatusResponseOutputWithContext(ctx context.Context) SharingStatusResponseOutput {
	return o
}

// Aggregated sharing state of current gallery.
func (o SharingStatusResponseOutput) AggregatedState() pulumi.StringOutput {
	return o.ApplyT(func(v SharingStatusResponse) string { return v.AggregatedState }).(pulumi.StringOutput)
}

// Summary of all regional sharing status.
func (o SharingStatusResponseOutput) Summary() RegionalSharingStatusResponseArrayOutput {
	return o.ApplyT(func(v SharingStatusResponse) []RegionalSharingStatusResponse { return v.Summary }).(RegionalSharingStatusResponseArrayOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type Sku struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *float64 `pulumi:"capacity"`
	// The sku name.
	Name *string `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuArgs struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity pulumi.Float64PtrInput `pulumi:"capacity"`
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// Specifies the number of virtual machines in the scale set.
func (o SkuOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Sku) *float64 { return v.Capacity }).(pulumi.Float64PtrOutput)
}

// The sku name.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// Specifies the number of virtual machines in the scale set.
func (o SkuPtrOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Sku) *float64 {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.Float64PtrOutput)
}

// The sku name.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Specifies the sku profile for the virtual machine scale set. With this property the customer is able to specify a list of VM sizes and an allocation strategy.
type SkuProfile struct {
	// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Specifies the VM sizes for the virtual machine scale set.
	VmSizes []SkuProfileVMSize `pulumi:"vmSizes"`
}

// SkuProfileInput is an input type that accepts SkuProfileArgs and SkuProfileOutput values.
// You can construct a concrete instance of `SkuProfileInput` via:
//
//	SkuProfileArgs{...}
type SkuProfileInput interface {
	pulumi.Input

	ToSkuProfileOutput() SkuProfileOutput
	ToSkuProfileOutputWithContext(context.Context) SkuProfileOutput
}

// Specifies the sku profile for the virtual machine scale set. With this property the customer is able to specify a list of VM sizes and an allocation strategy.
type SkuProfileArgs struct {
	// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
	AllocationStrategy pulumi.StringPtrInput `pulumi:"allocationStrategy"`
	// Specifies the VM sizes for the virtual machine scale set.
	VmSizes SkuProfileVMSizeArrayInput `pulumi:"vmSizes"`
}

func (SkuProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuProfile)(nil)).Elem()
}

func (i SkuProfileArgs) ToSkuProfileOutput() SkuProfileOutput {
	return i.ToSkuProfileOutputWithContext(context.Background())
}

func (i SkuProfileArgs) ToSkuProfileOutputWithContext(ctx context.Context) SkuProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuProfileOutput)
}

func (i SkuProfileArgs) ToSkuProfilePtrOutput() SkuProfilePtrOutput {
	return i.ToSkuProfilePtrOutputWithContext(context.Background())
}

func (i SkuProfileArgs) ToSkuProfilePtrOutputWithContext(ctx context.Context) SkuProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuProfileOutput).ToSkuProfilePtrOutputWithContext(ctx)
}

// SkuProfilePtrInput is an input type that accepts SkuProfileArgs, SkuProfilePtr and SkuProfilePtrOutput values.
// You can construct a concrete instance of `SkuProfilePtrInput` via:
//
//	        SkuProfileArgs{...}
//
//	or:
//
//	        nil
type SkuProfilePtrInput interface {
	pulumi.Input

	ToSkuProfilePtrOutput() SkuProfilePtrOutput
	ToSkuProfilePtrOutputWithContext(context.Context) SkuProfilePtrOutput
}

type skuProfilePtrType SkuProfileArgs

func SkuProfilePtr(v *SkuProfileArgs) SkuProfilePtrInput {
	return (*skuProfilePtrType)(v)
}

func (*skuProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuProfile)(nil)).Elem()
}

func (i *skuProfilePtrType) ToSkuProfilePtrOutput() SkuProfilePtrOutput {
	return i.ToSkuProfilePtrOutputWithContext(context.Background())
}

func (i *skuProfilePtrType) ToSkuProfilePtrOutputWithContext(ctx context.Context) SkuProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuProfilePtrOutput)
}

// Specifies the sku profile for the virtual machine scale set. With this property the customer is able to specify a list of VM sizes and an allocation strategy.
type SkuProfileOutput struct{ *pulumi.OutputState }

func (SkuProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuProfile)(nil)).Elem()
}

func (o SkuProfileOutput) ToSkuProfileOutput() SkuProfileOutput {
	return o
}

func (o SkuProfileOutput) ToSkuProfileOutputWithContext(ctx context.Context) SkuProfileOutput {
	return o
}

func (o SkuProfileOutput) ToSkuProfilePtrOutput() SkuProfilePtrOutput {
	return o.ToSkuProfilePtrOutputWithContext(context.Background())
}

func (o SkuProfileOutput) ToSkuProfilePtrOutputWithContext(ctx context.Context) SkuProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuProfile) *SkuProfile {
		return &v
	}).(SkuProfilePtrOutput)
}

// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
func (o SkuProfileOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuProfile) *string { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// Specifies the VM sizes for the virtual machine scale set.
func (o SkuProfileOutput) VmSizes() SkuProfileVMSizeArrayOutput {
	return o.ApplyT(func(v SkuProfile) []SkuProfileVMSize { return v.VmSizes }).(SkuProfileVMSizeArrayOutput)
}

type SkuProfilePtrOutput struct{ *pulumi.OutputState }

func (SkuProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuProfile)(nil)).Elem()
}

func (o SkuProfilePtrOutput) ToSkuProfilePtrOutput() SkuProfilePtrOutput {
	return o
}

func (o SkuProfilePtrOutput) ToSkuProfilePtrOutputWithContext(ctx context.Context) SkuProfilePtrOutput {
	return o
}

func (o SkuProfilePtrOutput) Elem() SkuProfileOutput {
	return o.ApplyT(func(v *SkuProfile) SkuProfile {
		if v != nil {
			return *v
		}
		var ret SkuProfile
		return ret
	}).(SkuProfileOutput)
}

// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
func (o SkuProfilePtrOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuProfile) *string {
		if v == nil {
			return nil
		}
		return v.AllocationStrategy
	}).(pulumi.StringPtrOutput)
}

// Specifies the VM sizes for the virtual machine scale set.
func (o SkuProfilePtrOutput) VmSizes() SkuProfileVMSizeArrayOutput {
	return o.ApplyT(func(v *SkuProfile) []SkuProfileVMSize {
		if v == nil {
			return nil
		}
		return v.VmSizes
	}).(SkuProfileVMSizeArrayOutput)
}

// Specifies the sku profile for the virtual machine scale set. With this property the customer is able to specify a list of VM sizes and an allocation strategy.
type SkuProfileResponse struct {
	// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
	AllocationStrategy *string `pulumi:"allocationStrategy"`
	// Specifies the VM sizes for the virtual machine scale set.
	VmSizes []SkuProfileVMSizeResponse `pulumi:"vmSizes"`
}

// Specifies the sku profile for the virtual machine scale set. With this property the customer is able to specify a list of VM sizes and an allocation strategy.
type SkuProfileResponseOutput struct{ *pulumi.OutputState }

func (SkuProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuProfileResponse)(nil)).Elem()
}

func (o SkuProfileResponseOutput) ToSkuProfileResponseOutput() SkuProfileResponseOutput {
	return o
}

func (o SkuProfileResponseOutput) ToSkuProfileResponseOutputWithContext(ctx context.Context) SkuProfileResponseOutput {
	return o
}

// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
func (o SkuProfileResponseOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuProfileResponse) *string { return v.AllocationStrategy }).(pulumi.StringPtrOutput)
}

// Specifies the VM sizes for the virtual machine scale set.
func (o SkuProfileResponseOutput) VmSizes() SkuProfileVMSizeResponseArrayOutput {
	return o.ApplyT(func(v SkuProfileResponse) []SkuProfileVMSizeResponse { return v.VmSizes }).(SkuProfileVMSizeResponseArrayOutput)
}

type SkuProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuProfileResponse)(nil)).Elem()
}

func (o SkuProfileResponsePtrOutput) ToSkuProfileResponsePtrOutput() SkuProfileResponsePtrOutput {
	return o
}

func (o SkuProfileResponsePtrOutput) ToSkuProfileResponsePtrOutputWithContext(ctx context.Context) SkuProfileResponsePtrOutput {
	return o
}

func (o SkuProfileResponsePtrOutput) Elem() SkuProfileResponseOutput {
	return o.ApplyT(func(v *SkuProfileResponse) SkuProfileResponse {
		if v != nil {
			return *v
		}
		var ret SkuProfileResponse
		return ret
	}).(SkuProfileResponseOutput)
}

// Specifies the allocation strategy for the virtual machine scale set based on which the VMs will be allocated.
func (o SkuProfileResponsePtrOutput) AllocationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AllocationStrategy
	}).(pulumi.StringPtrOutput)
}

// Specifies the VM sizes for the virtual machine scale set.
func (o SkuProfileResponsePtrOutput) VmSizes() SkuProfileVMSizeResponseArrayOutput {
	return o.ApplyT(func(v *SkuProfileResponse) []SkuProfileVMSizeResponse {
		if v == nil {
			return nil
		}
		return v.VmSizes
	}).(SkuProfileVMSizeResponseArrayOutput)
}

// Specifies the VM Size.
type SkuProfileVMSize struct {
	// Specifies the name of the VM Size.
	Name *string `pulumi:"name"`
	// Specifies the rank (a.k.a priority) associated with the VM Size.
	Rank *int `pulumi:"rank"`
}

// SkuProfileVMSizeInput is an input type that accepts SkuProfileVMSizeArgs and SkuProfileVMSizeOutput values.
// You can construct a concrete instance of `SkuProfileVMSizeInput` via:
//
//	SkuProfileVMSizeArgs{...}
type SkuProfileVMSizeInput interface {
	pulumi.Input

	ToSkuProfileVMSizeOutput() SkuProfileVMSizeOutput
	ToSkuProfileVMSizeOutputWithContext(context.Context) SkuProfileVMSizeOutput
}

// Specifies the VM Size.
type SkuProfileVMSizeArgs struct {
	// Specifies the name of the VM Size.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the rank (a.k.a priority) associated with the VM Size.
	Rank pulumi.IntPtrInput `pulumi:"rank"`
}

func (SkuProfileVMSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuProfileVMSize)(nil)).Elem()
}

func (i SkuProfileVMSizeArgs) ToSkuProfileVMSizeOutput() SkuProfileVMSizeOutput {
	return i.ToSkuProfileVMSizeOutputWithContext(context.Background())
}

func (i SkuProfileVMSizeArgs) ToSkuProfileVMSizeOutputWithContext(ctx context.Context) SkuProfileVMSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuProfileVMSizeOutput)
}

// SkuProfileVMSizeArrayInput is an input type that accepts SkuProfileVMSizeArray and SkuProfileVMSizeArrayOutput values.
// You can construct a concrete instance of `SkuProfileVMSizeArrayInput` via:
//
//	SkuProfileVMSizeArray{ SkuProfileVMSizeArgs{...} }
type SkuProfileVMSizeArrayInput interface {
	pulumi.Input

	ToSkuProfileVMSizeArrayOutput() SkuProfileVMSizeArrayOutput
	ToSkuProfileVMSizeArrayOutputWithContext(context.Context) SkuProfileVMSizeArrayOutput
}

type SkuProfileVMSizeArray []SkuProfileVMSizeInput

func (SkuProfileVMSizeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkuProfileVMSize)(nil)).Elem()
}

func (i SkuProfileVMSizeArray) ToSkuProfileVMSizeArrayOutput() SkuProfileVMSizeArrayOutput {
	return i.ToSkuProfileVMSizeArrayOutputWithContext(context.Background())
}

func (i SkuProfileVMSizeArray) ToSkuProfileVMSizeArrayOutputWithContext(ctx context.Context) SkuProfileVMSizeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuProfileVMSizeArrayOutput)
}

// Specifies the VM Size.
type SkuProfileVMSizeOutput struct{ *pulumi.OutputState }

func (SkuProfileVMSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuProfileVMSize)(nil)).Elem()
}

func (o SkuProfileVMSizeOutput) ToSkuProfileVMSizeOutput() SkuProfileVMSizeOutput {
	return o
}

func (o SkuProfileVMSizeOutput) ToSkuProfileVMSizeOutputWithContext(ctx context.Context) SkuProfileVMSizeOutput {
	return o
}

// Specifies the name of the VM Size.
func (o SkuProfileVMSizeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuProfileVMSize) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the rank (a.k.a priority) associated with the VM Size.
func (o SkuProfileVMSizeOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuProfileVMSize) *int { return v.Rank }).(pulumi.IntPtrOutput)
}

type SkuProfileVMSizeArrayOutput struct{ *pulumi.OutputState }

func (SkuProfileVMSizeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkuProfileVMSize)(nil)).Elem()
}

func (o SkuProfileVMSizeArrayOutput) ToSkuProfileVMSizeArrayOutput() SkuProfileVMSizeArrayOutput {
	return o
}

func (o SkuProfileVMSizeArrayOutput) ToSkuProfileVMSizeArrayOutputWithContext(ctx context.Context) SkuProfileVMSizeArrayOutput {
	return o
}

func (o SkuProfileVMSizeArrayOutput) Index(i pulumi.IntInput) SkuProfileVMSizeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SkuProfileVMSize {
		return vs[0].([]SkuProfileVMSize)[vs[1].(int)]
	}).(SkuProfileVMSizeOutput)
}

// Specifies the VM Size.
type SkuProfileVMSizeResponse struct {
	// Specifies the name of the VM Size.
	Name *string `pulumi:"name"`
	// Specifies the rank (a.k.a priority) associated with the VM Size.
	Rank *int `pulumi:"rank"`
}

// Specifies the VM Size.
type SkuProfileVMSizeResponseOutput struct{ *pulumi.OutputState }

func (SkuProfileVMSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuProfileVMSizeResponse)(nil)).Elem()
}

func (o SkuProfileVMSizeResponseOutput) ToSkuProfileVMSizeResponseOutput() SkuProfileVMSizeResponseOutput {
	return o
}

func (o SkuProfileVMSizeResponseOutput) ToSkuProfileVMSizeResponseOutputWithContext(ctx context.Context) SkuProfileVMSizeResponseOutput {
	return o
}

// Specifies the name of the VM Size.
func (o SkuProfileVMSizeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuProfileVMSizeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the rank (a.k.a priority) associated with the VM Size.
func (o SkuProfileVMSizeResponseOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuProfileVMSizeResponse) *int { return v.Rank }).(pulumi.IntPtrOutput)
}

type SkuProfileVMSizeResponseArrayOutput struct{ *pulumi.OutputState }

func (SkuProfileVMSizeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SkuProfileVMSizeResponse)(nil)).Elem()
}

func (o SkuProfileVMSizeResponseArrayOutput) ToSkuProfileVMSizeResponseArrayOutput() SkuProfileVMSizeResponseArrayOutput {
	return o
}

func (o SkuProfileVMSizeResponseArrayOutput) ToSkuProfileVMSizeResponseArrayOutputWithContext(ctx context.Context) SkuProfileVMSizeResponseArrayOutput {
	return o
}

func (o SkuProfileVMSizeResponseArrayOutput) Index(i pulumi.IntInput) SkuProfileVMSizeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SkuProfileVMSizeResponse {
		return vs[0].([]SkuProfileVMSizeResponse)[vs[1].(int)]
	}).(SkuProfileVMSizeResponseOutput)
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuResponse struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *float64 `pulumi:"capacity"`
	// The sku name.
	Name *string `pulumi:"name"`
	// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
	Tier *string `pulumi:"tier"`
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// Specifies the number of virtual machines in the scale set.
func (o SkuResponseOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SkuResponse) *float64 { return v.Capacity }).(pulumi.Float64PtrOutput)
}

// The sku name.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// Specifies the number of virtual machines in the scale set.
func (o SkuResponsePtrOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SkuResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.Float64PtrOutput)
}

// The sku name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
type SnapshotSku struct {
	// The sku name.
	Name *string `pulumi:"name"`
}

// SnapshotSkuInput is an input type that accepts SnapshotSkuArgs and SnapshotSkuOutput values.
// You can construct a concrete instance of `SnapshotSkuInput` via:
//
//	SnapshotSkuArgs{...}
type SnapshotSkuInput interface {
	pulumi.Input

	ToSnapshotSkuOutput() SnapshotSkuOutput
	ToSnapshotSkuOutputWithContext(context.Context) SnapshotSkuOutput
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
type SnapshotSkuArgs struct {
	// The sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SnapshotSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return i.ToSnapshotSkuOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput)
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i SnapshotSkuArgs) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuOutput).ToSnapshotSkuPtrOutputWithContext(ctx)
}

// SnapshotSkuPtrInput is an input type that accepts SnapshotSkuArgs, SnapshotSkuPtr and SnapshotSkuPtrOutput values.
// You can construct a concrete instance of `SnapshotSkuPtrInput` via:
//
//	        SnapshotSkuArgs{...}
//
//	or:
//
//	        nil
type SnapshotSkuPtrInput interface {
	pulumi.Input

	ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput
	ToSnapshotSkuPtrOutputWithContext(context.Context) SnapshotSkuPtrOutput
}

type snapshotSkuPtrType SnapshotSkuArgs

func SnapshotSkuPtr(v *SnapshotSkuArgs) SnapshotSkuPtrInput {
	return (*snapshotSkuPtrType)(v)
}

func (*snapshotSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return i.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (i *snapshotSkuPtrType) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotSkuPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
type SnapshotSkuOutput struct{ *pulumi.OutputState }

func (SnapshotSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSku)(nil)).Elem()
}

func (o SnapshotSkuOutput) ToSnapshotSkuOutput() SnapshotSkuOutput {
	return o
}

func (o SnapshotSkuOutput) ToSnapshotSkuOutputWithContext(ctx context.Context) SnapshotSkuOutput {
	return o
}

func (o SnapshotSkuOutput) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return o.ToSnapshotSkuPtrOutputWithContext(context.Background())
}

func (o SnapshotSkuOutput) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotSku) *SnapshotSku {
		return &v
	}).(SnapshotSkuPtrOutput)
}

// The sku name.
func (o SnapshotSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SnapshotSkuPtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSku)(nil)).Elem()
}

func (o SnapshotSkuPtrOutput) ToSnapshotSkuPtrOutput() SnapshotSkuPtrOutput {
	return o
}

func (o SnapshotSkuPtrOutput) ToSnapshotSkuPtrOutputWithContext(ctx context.Context) SnapshotSkuPtrOutput {
	return o
}

func (o SnapshotSkuPtrOutput) Elem() SnapshotSkuOutput {
	return o.ApplyT(func(v *SnapshotSku) SnapshotSku {
		if v != nil {
			return *v
		}
		var ret SnapshotSku
		return ret
	}).(SnapshotSkuOutput)
}

// The sku name.
func (o SnapshotSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
type SnapshotSkuResponse struct {
	// The sku name.
	Name *string `pulumi:"name"`
	// The sku tier.
	Tier string `pulumi:"tier"`
}

// The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
type SnapshotSkuResponseOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutput() SnapshotSkuResponseOutput {
	return o
}

func (o SnapshotSkuResponseOutput) ToSnapshotSkuResponseOutputWithContext(ctx context.Context) SnapshotSkuResponseOutput {
	return o
}

// The sku name.
func (o SnapshotSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotSkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SnapshotSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SnapshotSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotSkuResponse)(nil)).Elem()
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutput() SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) ToSnapshotSkuResponsePtrOutputWithContext(ctx context.Context) SnapshotSkuResponsePtrOutput {
	return o
}

func (o SnapshotSkuResponsePtrOutput) Elem() SnapshotSkuResponseOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) SnapshotSkuResponse {
		if v != nil {
			return *v
		}
		var ret SnapshotSkuResponse
		return ret
	}).(SnapshotSkuResponseOutput)
}

// The sku name.
func (o SnapshotSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The sku tier.
func (o SnapshotSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Contains information about the soft deletion policy of the gallery.
type SoftDeletePolicy struct {
	// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
	IsSoftDeleteEnabled *bool `pulumi:"isSoftDeleteEnabled"`
}

// SoftDeletePolicyInput is an input type that accepts SoftDeletePolicyArgs and SoftDeletePolicyOutput values.
// You can construct a concrete instance of `SoftDeletePolicyInput` via:
//
//	SoftDeletePolicyArgs{...}
type SoftDeletePolicyInput interface {
	pulumi.Input

	ToSoftDeletePolicyOutput() SoftDeletePolicyOutput
	ToSoftDeletePolicyOutputWithContext(context.Context) SoftDeletePolicyOutput
}

// Contains information about the soft deletion policy of the gallery.
type SoftDeletePolicyArgs struct {
	// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
	IsSoftDeleteEnabled pulumi.BoolPtrInput `pulumi:"isSoftDeleteEnabled"`
}

func (SoftDeletePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftDeletePolicy)(nil)).Elem()
}

func (i SoftDeletePolicyArgs) ToSoftDeletePolicyOutput() SoftDeletePolicyOutput {
	return i.ToSoftDeletePolicyOutputWithContext(context.Background())
}

func (i SoftDeletePolicyArgs) ToSoftDeletePolicyOutputWithContext(ctx context.Context) SoftDeletePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftDeletePolicyOutput)
}

func (i SoftDeletePolicyArgs) ToSoftDeletePolicyPtrOutput() SoftDeletePolicyPtrOutput {
	return i.ToSoftDeletePolicyPtrOutputWithContext(context.Background())
}

func (i SoftDeletePolicyArgs) ToSoftDeletePolicyPtrOutputWithContext(ctx context.Context) SoftDeletePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftDeletePolicyOutput).ToSoftDeletePolicyPtrOutputWithContext(ctx)
}

// SoftDeletePolicyPtrInput is an input type that accepts SoftDeletePolicyArgs, SoftDeletePolicyPtr and SoftDeletePolicyPtrOutput values.
// You can construct a concrete instance of `SoftDeletePolicyPtrInput` via:
//
//	        SoftDeletePolicyArgs{...}
//
//	or:
//
//	        nil
type SoftDeletePolicyPtrInput interface {
	pulumi.Input

	ToSoftDeletePolicyPtrOutput() SoftDeletePolicyPtrOutput
	ToSoftDeletePolicyPtrOutputWithContext(context.Context) SoftDeletePolicyPtrOutput
}

type softDeletePolicyPtrType SoftDeletePolicyArgs

func SoftDeletePolicyPtr(v *SoftDeletePolicyArgs) SoftDeletePolicyPtrInput {
	return (*softDeletePolicyPtrType)(v)
}

func (*softDeletePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftDeletePolicy)(nil)).Elem()
}

func (i *softDeletePolicyPtrType) ToSoftDeletePolicyPtrOutput() SoftDeletePolicyPtrOutput {
	return i.ToSoftDeletePolicyPtrOutputWithContext(context.Background())
}

func (i *softDeletePolicyPtrType) ToSoftDeletePolicyPtrOutputWithContext(ctx context.Context) SoftDeletePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SoftDeletePolicyPtrOutput)
}

// Contains information about the soft deletion policy of the gallery.
type SoftDeletePolicyOutput struct{ *pulumi.OutputState }

func (SoftDeletePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftDeletePolicy)(nil)).Elem()
}

func (o SoftDeletePolicyOutput) ToSoftDeletePolicyOutput() SoftDeletePolicyOutput {
	return o
}

func (o SoftDeletePolicyOutput) ToSoftDeletePolicyOutputWithContext(ctx context.Context) SoftDeletePolicyOutput {
	return o
}

func (o SoftDeletePolicyOutput) ToSoftDeletePolicyPtrOutput() SoftDeletePolicyPtrOutput {
	return o.ToSoftDeletePolicyPtrOutputWithContext(context.Background())
}

func (o SoftDeletePolicyOutput) ToSoftDeletePolicyPtrOutputWithContext(ctx context.Context) SoftDeletePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoftDeletePolicy) *SoftDeletePolicy {
		return &v
	}).(SoftDeletePolicyPtrOutput)
}

// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
func (o SoftDeletePolicyOutput) IsSoftDeleteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SoftDeletePolicy) *bool { return v.IsSoftDeleteEnabled }).(pulumi.BoolPtrOutput)
}

type SoftDeletePolicyPtrOutput struct{ *pulumi.OutputState }

func (SoftDeletePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftDeletePolicy)(nil)).Elem()
}

func (o SoftDeletePolicyPtrOutput) ToSoftDeletePolicyPtrOutput() SoftDeletePolicyPtrOutput {
	return o
}

func (o SoftDeletePolicyPtrOutput) ToSoftDeletePolicyPtrOutputWithContext(ctx context.Context) SoftDeletePolicyPtrOutput {
	return o
}

func (o SoftDeletePolicyPtrOutput) Elem() SoftDeletePolicyOutput {
	return o.ApplyT(func(v *SoftDeletePolicy) SoftDeletePolicy {
		if v != nil {
			return *v
		}
		var ret SoftDeletePolicy
		return ret
	}).(SoftDeletePolicyOutput)
}

// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
func (o SoftDeletePolicyPtrOutput) IsSoftDeleteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SoftDeletePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IsSoftDeleteEnabled
	}).(pulumi.BoolPtrOutput)
}

// Contains information about the soft deletion policy of the gallery.
type SoftDeletePolicyResponse struct {
	// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
	IsSoftDeleteEnabled *bool `pulumi:"isSoftDeleteEnabled"`
}

// Contains information about the soft deletion policy of the gallery.
type SoftDeletePolicyResponseOutput struct{ *pulumi.OutputState }

func (SoftDeletePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftDeletePolicyResponse)(nil)).Elem()
}

func (o SoftDeletePolicyResponseOutput) ToSoftDeletePolicyResponseOutput() SoftDeletePolicyResponseOutput {
	return o
}

func (o SoftDeletePolicyResponseOutput) ToSoftDeletePolicyResponseOutputWithContext(ctx context.Context) SoftDeletePolicyResponseOutput {
	return o
}

// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
func (o SoftDeletePolicyResponseOutput) IsSoftDeleteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SoftDeletePolicyResponse) *bool { return v.IsSoftDeleteEnabled }).(pulumi.BoolPtrOutput)
}

type SoftDeletePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (SoftDeletePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftDeletePolicyResponse)(nil)).Elem()
}

func (o SoftDeletePolicyResponsePtrOutput) ToSoftDeletePolicyResponsePtrOutput() SoftDeletePolicyResponsePtrOutput {
	return o
}

func (o SoftDeletePolicyResponsePtrOutput) ToSoftDeletePolicyResponsePtrOutputWithContext(ctx context.Context) SoftDeletePolicyResponsePtrOutput {
	return o
}

func (o SoftDeletePolicyResponsePtrOutput) Elem() SoftDeletePolicyResponseOutput {
	return o.ApplyT(func(v *SoftDeletePolicyResponse) SoftDeletePolicyResponse {
		if v != nil {
			return *v
		}
		var ret SoftDeletePolicyResponse
		return ret
	}).(SoftDeletePolicyResponseOutput)
}

// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
func (o SoftDeletePolicyResponsePtrOutput) IsSoftDeleteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SoftDeletePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSoftDeleteEnabled
	}).(pulumi.BoolPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// SourceVaultInput is an input type that accepts SourceVaultArgs and SourceVaultOutput values.
// You can construct a concrete instance of `SourceVaultInput` via:
//
//	SourceVaultArgs{...}
type SourceVaultInput interface {
	pulumi.Input

	ToSourceVaultOutput() SourceVaultOutput
	ToSourceVaultOutputWithContext(context.Context) SourceVaultOutput
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultArgs struct {
	// Resource Id
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SourceVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (i SourceVaultArgs) ToSourceVaultOutput() SourceVaultOutput {
	return i.ToSourceVaultOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput)
}

func (i SourceVaultArgs) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i SourceVaultArgs) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultOutput).ToSourceVaultPtrOutputWithContext(ctx)
}

// SourceVaultPtrInput is an input type that accepts SourceVaultArgs, SourceVaultPtr and SourceVaultPtrOutput values.
// You can construct a concrete instance of `SourceVaultPtrInput` via:
//
//	        SourceVaultArgs{...}
//
//	or:
//
//	        nil
type SourceVaultPtrInput interface {
	pulumi.Input

	ToSourceVaultPtrOutput() SourceVaultPtrOutput
	ToSourceVaultPtrOutputWithContext(context.Context) SourceVaultPtrOutput
}

type sourceVaultPtrType SourceVaultArgs

func SourceVaultPtr(v *SourceVaultArgs) SourceVaultPtrInput {
	return (*sourceVaultPtrType)(v)
}

func (*sourceVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return i.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (i *sourceVaultPtrType) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceVaultPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultOutput struct{ *pulumi.OutputState }

func (SourceVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVault)(nil)).Elem()
}

func (o SourceVaultOutput) ToSourceVaultOutput() SourceVaultOutput {
	return o
}

func (o SourceVaultOutput) ToSourceVaultOutputWithContext(ctx context.Context) SourceVaultOutput {
	return o
}

func (o SourceVaultOutput) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return o.ToSourceVaultPtrOutputWithContext(context.Background())
}

func (o SourceVaultOutput) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceVault) *SourceVault {
		return &v
	}).(SourceVaultPtrOutput)
}

// Resource Id
func (o SourceVaultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVault) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultPtrOutput struct{ *pulumi.OutputState }

func (SourceVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVault)(nil)).Elem()
}

func (o SourceVaultPtrOutput) ToSourceVaultPtrOutput() SourceVaultPtrOutput {
	return o
}

func (o SourceVaultPtrOutput) ToSourceVaultPtrOutputWithContext(ctx context.Context) SourceVaultPtrOutput {
	return o
}

func (o SourceVaultPtrOutput) Elem() SourceVaultOutput {
	return o.ApplyT(func(v *SourceVault) SourceVault {
		if v != nil {
			return *v
		}
		var ret SourceVault
		return ret
	}).(SourceVaultOutput)
}

// Resource Id
func (o SourceVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVault) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVaultResponseOutput struct{ *pulumi.OutputState }

func (SourceVaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutput() SourceVaultResponseOutput {
	return o
}

func (o SourceVaultResponseOutput) ToSourceVaultResponseOutputWithContext(ctx context.Context) SourceVaultResponseOutput {
	return o
}

// Resource Id
func (o SourceVaultResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceVaultResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SourceVaultResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceVaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceVaultResponse)(nil)).Elem()
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutput() SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) ToSourceVaultResponsePtrOutputWithContext(ctx context.Context) SourceVaultResponsePtrOutput {
	return o
}

func (o SourceVaultResponsePtrOutput) Elem() SourceVaultResponseOutput {
	return o.ApplyT(func(v *SourceVaultResponse) SourceVaultResponse {
		if v != nil {
			return *v
		}
		var ret SourceVaultResponse
		return ret
	}).(SourceVaultResponseOutput)
}

// Resource Id
func (o SourceVaultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceVaultResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the Spot-Try-Restore properties for the virtual machine scale set. With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically based on capacity availability and pricing constraint.
type SpotRestorePolicy struct {
	// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
	Enabled *bool `pulumi:"enabled"`
	// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
	RestoreTimeout *string `pulumi:"restoreTimeout"`
}

// SpotRestorePolicyInput is an input type that accepts SpotRestorePolicyArgs and SpotRestorePolicyOutput values.
// You can construct a concrete instance of `SpotRestorePolicyInput` via:
//
//	SpotRestorePolicyArgs{...}
type SpotRestorePolicyInput interface {
	pulumi.Input

	ToSpotRestorePolicyOutput() SpotRestorePolicyOutput
	ToSpotRestorePolicyOutputWithContext(context.Context) SpotRestorePolicyOutput
}

// Specifies the Spot-Try-Restore properties for the virtual machine scale set. With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically based on capacity availability and pricing constraint.
type SpotRestorePolicyArgs struct {
	// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
	RestoreTimeout pulumi.StringPtrInput `pulumi:"restoreTimeout"`
}

func (SpotRestorePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpotRestorePolicy)(nil)).Elem()
}

func (i SpotRestorePolicyArgs) ToSpotRestorePolicyOutput() SpotRestorePolicyOutput {
	return i.ToSpotRestorePolicyOutputWithContext(context.Background())
}

func (i SpotRestorePolicyArgs) ToSpotRestorePolicyOutputWithContext(ctx context.Context) SpotRestorePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotRestorePolicyOutput)
}

func (i SpotRestorePolicyArgs) ToSpotRestorePolicyPtrOutput() SpotRestorePolicyPtrOutput {
	return i.ToSpotRestorePolicyPtrOutputWithContext(context.Background())
}

func (i SpotRestorePolicyArgs) ToSpotRestorePolicyPtrOutputWithContext(ctx context.Context) SpotRestorePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotRestorePolicyOutput).ToSpotRestorePolicyPtrOutputWithContext(ctx)
}

// SpotRestorePolicyPtrInput is an input type that accepts SpotRestorePolicyArgs, SpotRestorePolicyPtr and SpotRestorePolicyPtrOutput values.
// You can construct a concrete instance of `SpotRestorePolicyPtrInput` via:
//
//	        SpotRestorePolicyArgs{...}
//
//	or:
//
//	        nil
type SpotRestorePolicyPtrInput interface {
	pulumi.Input

	ToSpotRestorePolicyPtrOutput() SpotRestorePolicyPtrOutput
	ToSpotRestorePolicyPtrOutputWithContext(context.Context) SpotRestorePolicyPtrOutput
}

type spotRestorePolicyPtrType SpotRestorePolicyArgs

func SpotRestorePolicyPtr(v *SpotRestorePolicyArgs) SpotRestorePolicyPtrInput {
	return (*spotRestorePolicyPtrType)(v)
}

func (*spotRestorePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SpotRestorePolicy)(nil)).Elem()
}

func (i *spotRestorePolicyPtrType) ToSpotRestorePolicyPtrOutput() SpotRestorePolicyPtrOutput {
	return i.ToSpotRestorePolicyPtrOutputWithContext(context.Background())
}

func (i *spotRestorePolicyPtrType) ToSpotRestorePolicyPtrOutputWithContext(ctx context.Context) SpotRestorePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotRestorePolicyPtrOutput)
}

// Specifies the Spot-Try-Restore properties for the virtual machine scale set. With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically based on capacity availability and pricing constraint.
type SpotRestorePolicyOutput struct{ *pulumi.OutputState }

func (SpotRestorePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpotRestorePolicy)(nil)).Elem()
}

func (o SpotRestorePolicyOutput) ToSpotRestorePolicyOutput() SpotRestorePolicyOutput {
	return o
}

func (o SpotRestorePolicyOutput) ToSpotRestorePolicyOutputWithContext(ctx context.Context) SpotRestorePolicyOutput {
	return o
}

func (o SpotRestorePolicyOutput) ToSpotRestorePolicyPtrOutput() SpotRestorePolicyPtrOutput {
	return o.ToSpotRestorePolicyPtrOutputWithContext(context.Background())
}

func (o SpotRestorePolicyOutput) ToSpotRestorePolicyPtrOutputWithContext(ctx context.Context) SpotRestorePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SpotRestorePolicy) *SpotRestorePolicy {
		return &v
	}).(SpotRestorePolicyPtrOutput)
}

// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
func (o SpotRestorePolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpotRestorePolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
func (o SpotRestorePolicyOutput) RestoreTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpotRestorePolicy) *string { return v.RestoreTimeout }).(pulumi.StringPtrOutput)
}

type SpotRestorePolicyPtrOutput struct{ *pulumi.OutputState }

func (SpotRestorePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpotRestorePolicy)(nil)).Elem()
}

func (o SpotRestorePolicyPtrOutput) ToSpotRestorePolicyPtrOutput() SpotRestorePolicyPtrOutput {
	return o
}

func (o SpotRestorePolicyPtrOutput) ToSpotRestorePolicyPtrOutputWithContext(ctx context.Context) SpotRestorePolicyPtrOutput {
	return o
}

func (o SpotRestorePolicyPtrOutput) Elem() SpotRestorePolicyOutput {
	return o.ApplyT(func(v *SpotRestorePolicy) SpotRestorePolicy {
		if v != nil {
			return *v
		}
		var ret SpotRestorePolicy
		return ret
	}).(SpotRestorePolicyOutput)
}

// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
func (o SpotRestorePolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpotRestorePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
func (o SpotRestorePolicyPtrOutput) RestoreTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotRestorePolicy) *string {
		if v == nil {
			return nil
		}
		return v.RestoreTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the Spot-Try-Restore properties for the virtual machine scale set. With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically based on capacity availability and pricing constraint.
type SpotRestorePolicyResponse struct {
	// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
	Enabled *bool `pulumi:"enabled"`
	// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
	RestoreTimeout *string `pulumi:"restoreTimeout"`
}

// Specifies the Spot-Try-Restore properties for the virtual machine scale set. With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically based on capacity availability and pricing constraint.
type SpotRestorePolicyResponseOutput struct{ *pulumi.OutputState }

func (SpotRestorePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpotRestorePolicyResponse)(nil)).Elem()
}

func (o SpotRestorePolicyResponseOutput) ToSpotRestorePolicyResponseOutput() SpotRestorePolicyResponseOutput {
	return o
}

func (o SpotRestorePolicyResponseOutput) ToSpotRestorePolicyResponseOutputWithContext(ctx context.Context) SpotRestorePolicyResponseOutput {
	return o
}

// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
func (o SpotRestorePolicyResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SpotRestorePolicyResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
func (o SpotRestorePolicyResponseOutput) RestoreTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpotRestorePolicyResponse) *string { return v.RestoreTimeout }).(pulumi.StringPtrOutput)
}

type SpotRestorePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (SpotRestorePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpotRestorePolicyResponse)(nil)).Elem()
}

func (o SpotRestorePolicyResponsePtrOutput) ToSpotRestorePolicyResponsePtrOutput() SpotRestorePolicyResponsePtrOutput {
	return o
}

func (o SpotRestorePolicyResponsePtrOutput) ToSpotRestorePolicyResponsePtrOutputWithContext(ctx context.Context) SpotRestorePolicyResponsePtrOutput {
	return o
}

func (o SpotRestorePolicyResponsePtrOutput) Elem() SpotRestorePolicyResponseOutput {
	return o.ApplyT(func(v *SpotRestorePolicyResponse) SpotRestorePolicyResponse {
		if v != nil {
			return *v
		}
		var ret SpotRestorePolicyResponse
		return ret
	}).(SpotRestorePolicyResponseOutput)
}

// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints
func (o SpotRestorePolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpotRestorePolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
func (o SpotRestorePolicyResponsePtrOutput) RestoreTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpotRestorePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.RestoreTimeout
	}).(pulumi.StringPtrOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKeyType `pulumi:"publicKeys"`
}

// SshConfigurationInput is an input type that accepts SshConfigurationArgs and SshConfigurationOutput values.
// You can construct a concrete instance of `SshConfigurationInput` via:
//
//	SshConfigurationArgs{...}
type SshConfigurationInput interface {
	pulumi.Input

	ToSshConfigurationOutput() SshConfigurationOutput
	ToSshConfigurationOutputWithContext(context.Context) SshConfigurationOutput
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationArgs struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys SshPublicKeyTypeArrayInput `pulumi:"publicKeys"`
}

func (SshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (i SshConfigurationArgs) ToSshConfigurationOutput() SshConfigurationOutput {
	return i.ToSshConfigurationOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput)
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput).ToSshConfigurationPtrOutputWithContext(ctx)
}

// SshConfigurationPtrInput is an input type that accepts SshConfigurationArgs, SshConfigurationPtr and SshConfigurationPtrOutput values.
// You can construct a concrete instance of `SshConfigurationPtrInput` via:
//
//	        SshConfigurationArgs{...}
//
//	or:
//
//	        nil
type SshConfigurationPtrInput interface {
	pulumi.Input

	ToSshConfigurationPtrOutput() SshConfigurationPtrOutput
	ToSshConfigurationPtrOutputWithContext(context.Context) SshConfigurationPtrOutput
}

type sshConfigurationPtrType SshConfigurationArgs

func SshConfigurationPtr(v *SshConfigurationArgs) SshConfigurationPtrInput {
	return (*sshConfigurationPtrType)(v)
}

func (*sshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationPtrOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationOutput struct{ *pulumi.OutputState }

func (SshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (o SshConfigurationOutput) ToSshConfigurationOutput() SshConfigurationOutput {
	return o
}

func (o SshConfigurationOutput) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return o
}

func (o SshConfigurationOutput) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return o.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (o SshConfigurationOutput) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshConfiguration) *SshConfiguration {
		return &v
	}).(SshConfigurationPtrOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationOutput) PublicKeys() SshPublicKeyTypeArrayOutput {
	return o.ApplyT(func(v SshConfiguration) []SshPublicKeyType { return v.PublicKeys }).(SshPublicKeyTypeArrayOutput)
}

type SshConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (o SshConfigurationPtrOutput) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return o
}

func (o SshConfigurationPtrOutput) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return o
}

func (o SshConfigurationPtrOutput) Elem() SshConfigurationOutput {
	return o.ApplyT(func(v *SshConfiguration) SshConfiguration {
		if v != nil {
			return *v
		}
		var ret SshConfiguration
		return ret
	}).(SshConfigurationOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationPtrOutput) PublicKeys() SshPublicKeyTypeArrayOutput {
	return o.ApplyT(func(v *SshConfiguration) []SshPublicKeyType {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyTypeArrayOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponse struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKeyResponse `pulumi:"publicKeys"`
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutput() SshConfigurationResponseOutput {
	return o
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutputWithContext(ctx context.Context) SshConfigurationResponseOutput {
	return o
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationResponseOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v SshConfigurationResponse) []SshPublicKeyResponse { return v.PublicKeys }).(SshPublicKeyResponseArrayOutput)
}

type SshConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) Elem() SshConfigurationResponseOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) SshConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SshConfigurationResponse
		return ret
	}).(SshConfigurationResponseOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationResponsePtrOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) []SshPublicKeyResponse {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyResponseArrayOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyType struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData *string `pulumi:"keyData"`
	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path *string `pulumi:"path"`
}

// SshPublicKeyTypeInput is an input type that accepts SshPublicKeyTypeArgs and SshPublicKeyTypeOutput values.
// You can construct a concrete instance of `SshPublicKeyTypeInput` via:
//
//	SshPublicKeyTypeArgs{...}
type SshPublicKeyTypeInput interface {
	pulumi.Input

	ToSshPublicKeyTypeOutput() SshPublicKeyTypeOutput
	ToSshPublicKeyTypeOutputWithContext(context.Context) SshPublicKeyTypeOutput
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyTypeArgs struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData pulumi.StringPtrInput `pulumi:"keyData"`
	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (SshPublicKeyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyType)(nil)).Elem()
}

func (i SshPublicKeyTypeArgs) ToSshPublicKeyTypeOutput() SshPublicKeyTypeOutput {
	return i.ToSshPublicKeyTypeOutputWithContext(context.Background())
}

func (i SshPublicKeyTypeArgs) ToSshPublicKeyTypeOutputWithContext(ctx context.Context) SshPublicKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyTypeOutput)
}

// SshPublicKeyTypeArrayInput is an input type that accepts SshPublicKeyTypeArray and SshPublicKeyTypeArrayOutput values.
// You can construct a concrete instance of `SshPublicKeyTypeArrayInput` via:
//
//	SshPublicKeyTypeArray{ SshPublicKeyTypeArgs{...} }
type SshPublicKeyTypeArrayInput interface {
	pulumi.Input

	ToSshPublicKeyTypeArrayOutput() SshPublicKeyTypeArrayOutput
	ToSshPublicKeyTypeArrayOutputWithContext(context.Context) SshPublicKeyTypeArrayOutput
}

type SshPublicKeyTypeArray []SshPublicKeyTypeInput

func (SshPublicKeyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyType)(nil)).Elem()
}

func (i SshPublicKeyTypeArray) ToSshPublicKeyTypeArrayOutput() SshPublicKeyTypeArrayOutput {
	return i.ToSshPublicKeyTypeArrayOutputWithContext(context.Background())
}

func (i SshPublicKeyTypeArray) ToSshPublicKeyTypeArrayOutputWithContext(ctx context.Context) SshPublicKeyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyTypeArrayOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyTypeOutput struct{ *pulumi.OutputState }

func (SshPublicKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyType)(nil)).Elem()
}

func (o SshPublicKeyTypeOutput) ToSshPublicKeyTypeOutput() SshPublicKeyTypeOutput {
	return o
}

func (o SshPublicKeyTypeOutput) ToSshPublicKeyTypeOutputWithContext(ctx context.Context) SshPublicKeyTypeOutput {
	return o
}

// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
func (o SshPublicKeyTypeOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyType) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
func (o SshPublicKeyTypeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyType) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type SshPublicKeyTypeArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyType)(nil)).Elem()
}

func (o SshPublicKeyTypeArrayOutput) ToSshPublicKeyTypeArrayOutput() SshPublicKeyTypeArrayOutput {
	return o
}

func (o SshPublicKeyTypeArrayOutput) ToSshPublicKeyTypeArrayOutputWithContext(ctx context.Context) SshPublicKeyTypeArrayOutput {
	return o
}

func (o SshPublicKeyTypeArrayOutput) Index(i pulumi.IntInput) SshPublicKeyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKeyType {
		return vs[0].([]SshPublicKeyType)[vs[1].(int)]
	}).(SshPublicKeyTypeOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponse struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData *string `pulumi:"keyData"`
	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path *string `pulumi:"path"`
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
func (o SshPublicKeyResponseOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys
func (o SshPublicKeyResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type SshPublicKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutput() SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutputWithContext(ctx context.Context) SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) Index(i pulumi.IntInput) SshPublicKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKeyResponse {
		return vs[0].([]SshPublicKeyResponse)[vs[1].(int)]
	}).(SshPublicKeyResponseOutput)
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfile struct {
	// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
	AlignRegionalDisksToVMZone *bool `pulumi:"alignRegionalDisksToVMZone"`
	// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks []DataDisk `pulumi:"dataDisks"`
	// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
	DiskControllerType *string `pulumi:"diskControllerType"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk *OSDisk `pulumi:"osDisk"`
}

// StorageProfileInput is an input type that accepts StorageProfileArgs and StorageProfileOutput values.
// You can construct a concrete instance of `StorageProfileInput` via:
//
//	StorageProfileArgs{...}
type StorageProfileInput interface {
	pulumi.Input

	ToStorageProfileOutput() StorageProfileOutput
	ToStorageProfileOutputWithContext(context.Context) StorageProfileOutput
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileArgs struct {
	// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
	AlignRegionalDisksToVMZone pulumi.BoolPtrInput `pulumi:"alignRegionalDisksToVMZone"`
	// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks DataDiskArrayInput `pulumi:"dataDisks"`
	// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
	DiskControllerType pulumi.StringPtrInput `pulumi:"diskControllerType"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference ImageReferencePtrInput `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk OSDiskPtrInput `pulumi:"osDisk"`
}

func (StorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (i StorageProfileArgs) ToStorageProfileOutput() StorageProfileOutput {
	return i.ToStorageProfileOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput)
}

func (i StorageProfileArgs) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput).ToStorageProfilePtrOutputWithContext(ctx)
}

// StorageProfilePtrInput is an input type that accepts StorageProfileArgs, StorageProfilePtr and StorageProfilePtrOutput values.
// You can construct a concrete instance of `StorageProfilePtrInput` via:
//
//	        StorageProfileArgs{...}
//
//	or:
//
//	        nil
type StorageProfilePtrInput interface {
	pulumi.Input

	ToStorageProfilePtrOutput() StorageProfilePtrOutput
	ToStorageProfilePtrOutputWithContext(context.Context) StorageProfilePtrOutput
}

type storageProfilePtrType StorageProfileArgs

func StorageProfilePtr(v *StorageProfileArgs) StorageProfilePtrInput {
	return (*storageProfilePtrType)(v)
}

func (*storageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfilePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileOutput struct{ *pulumi.OutputState }

func (StorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (o StorageProfileOutput) ToStorageProfileOutput() StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return o.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (o StorageProfileOutput) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageProfile) *StorageProfile {
		return &v
	}).(StorageProfilePtrOutput)
}

// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
func (o StorageProfileOutput) AlignRegionalDisksToVMZone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageProfile) *bool { return v.AlignRegionalDisksToVMZone }).(pulumi.BoolPtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfileOutput) DataDisks() DataDiskArrayOutput {
	return o.ApplyT(func(v StorageProfile) []DataDisk { return v.DataDisks }).(DataDiskArrayOutput)
}

// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
func (o StorageProfileOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageProfile) *string { return v.DiskControllerType }).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o StorageProfileOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v StorageProfile) *ImageReference { return v.ImageReference }).(ImageReferencePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfileOutput) OsDisk() OSDiskPtrOutput {
	return o.ApplyT(func(v StorageProfile) *OSDisk { return v.OsDisk }).(OSDiskPtrOutput)
}

type StorageProfilePtrOutput struct{ *pulumi.OutputState }

func (StorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (o StorageProfilePtrOutput) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return o
}

func (o StorageProfilePtrOutput) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return o
}

func (o StorageProfilePtrOutput) Elem() StorageProfileOutput {
	return o.ApplyT(func(v *StorageProfile) StorageProfile {
		if v != nil {
			return *v
		}
		var ret StorageProfile
		return ret
	}).(StorageProfileOutput)
}

// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
func (o StorageProfilePtrOutput) AlignRegionalDisksToVMZone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AlignRegionalDisksToVMZone
	}).(pulumi.BoolPtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfilePtrOutput) DataDisks() DataDiskArrayOutput {
	return o.ApplyT(func(v *StorageProfile) []DataDisk {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskArrayOutput)
}

// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
func (o StorageProfilePtrOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfile) *string {
		if v == nil {
			return nil
		}
		return v.DiskControllerType
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o StorageProfilePtrOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v *StorageProfile) *ImageReference {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferencePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfilePtrOutput) OsDisk() OSDiskPtrOutput {
	return o.ApplyT(func(v *StorageProfile) *OSDisk {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(OSDiskPtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileResponse struct {
	// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
	AlignRegionalDisksToVMZone *bool `pulumi:"alignRegionalDisksToVMZone"`
	// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks []DataDiskResponse `pulumi:"dataDisks"`
	// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
	DiskControllerType *string `pulumi:"diskControllerType"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReferenceResponse `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk *OSDiskResponse `pulumi:"osDisk"`
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfileResponseOutput struct{ *pulumi.OutputState }

func (StorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutput() StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutputWithContext(ctx context.Context) StorageProfileResponseOutput {
	return o
}

// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
func (o StorageProfileResponseOutput) AlignRegionalDisksToVMZone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *bool { return v.AlignRegionalDisksToVMZone }).(pulumi.BoolPtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfileResponseOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v StorageProfileResponse) []DataDiskResponse { return v.DataDisks }).(DataDiskResponseArrayOutput)
}

// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
func (o StorageProfileResponseOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *string { return v.DiskControllerType }).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o StorageProfileResponseOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfileResponseOutput) OsDisk() OSDiskResponsePtrOutput {
	return o.ApplyT(func(v StorageProfileResponse) *OSDiskResponse { return v.OsDisk }).(OSDiskResponsePtrOutput)
}

type StorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutput() StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutputWithContext(ctx context.Context) StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) Elem() StorageProfileResponseOutput {
	return o.ApplyT(func(v *StorageProfileResponse) StorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret StorageProfileResponse
		return ret
	}).(StorageProfileResponseOutput)
}

// Specifies whether the regional disks should be aligned/moved to the VM zone. This is applicable only for VMs with placement property set. Please note that this change is irreversible. Minimum api-version: 2024-11-01.
func (o StorageProfileResponsePtrOutput) AlignRegionalDisksToVMZone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AlignRegionalDisksToVMZone
	}).(pulumi.BoolPtrOutput)
}

// Specifies the parameters that are used to add a data disk to a virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfileResponsePtrOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v *StorageProfileResponse) []DataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskResponseArrayOutput)
}

// Specifies the disk controller type configured for the VM. **Note:** This property will be set to the default disk controller type if not specified provided virtual machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM size from the the specified minimum api version. You need to deallocate the VM before updating its disk controller type unless you are updating the VM size in the VM configuration which implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01.
func (o StorageProfileResponsePtrOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskControllerType
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o StorageProfileResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machine. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o StorageProfileResponsePtrOutput) OsDisk() OSDiskResponsePtrOutput {
	return o.ApplyT(func(v *StorageProfileResponse) *OSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(OSDiskResponsePtrOutput)
}

type SubResource struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id *string `pulumi:"id"`
}

// SubResourceInput is an input type that accepts SubResourceArgs and SubResourceOutput values.
// You can construct a concrete instance of `SubResourceInput` via:
//
//	SubResourceArgs{...}
type SubResourceInput interface {
	pulumi.Input

	ToSubResourceOutput() SubResourceOutput
	ToSubResourceOutputWithContext(context.Context) SubResourceOutput
}

type SubResourceArgs struct {
	// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
	// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
	// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
	// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (SubResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (i SubResourceArgs) ToSubResourceOutput() SubResourceOutput {
	return i.ToSubResourceOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput)
}

func (i SubResourceArgs) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i SubResourceArgs) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceOutput).ToSubResourcePtrOutputWithContext(ctx)
}

// SubResourcePtrInput is an input type that accepts SubResourceArgs, SubResourcePtr and SubResourcePtrOutput values.
// You can construct a concrete instance of `SubResourcePtrInput` via:
//
//	        SubResourceArgs{...}
//
//	or:
//
//	        nil
type SubResourcePtrInput interface {
	pulumi.Input

	ToSubResourcePtrOutput() SubResourcePtrOutput
	ToSubResourcePtrOutputWithContext(context.Context) SubResourcePtrOutput
}

type subResourcePtrType SubResourceArgs

func SubResourcePtr(v *SubResourceArgs) SubResourcePtrInput {
	return (*subResourcePtrType)(v)
}

func (*subResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (i *subResourcePtrType) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return i.ToSubResourcePtrOutputWithContext(context.Background())
}

func (i *subResourcePtrType) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourcePtrOutput)
}

// SubResourceArrayInput is an input type that accepts SubResourceArray and SubResourceArrayOutput values.
// You can construct a concrete instance of `SubResourceArrayInput` via:
//
//	SubResourceArray{ SubResourceArgs{...} }
type SubResourceArrayInput interface {
	pulumi.Input

	ToSubResourceArrayOutput() SubResourceArrayOutput
	ToSubResourceArrayOutputWithContext(context.Context) SubResourceArrayOutput
}

type SubResourceArray []SubResourceInput

func (SubResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (i SubResourceArray) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return i.ToSubResourceArrayOutputWithContext(context.Background())
}

func (i SubResourceArray) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubResourceArrayOutput)
}

type SubResourceOutput struct{ *pulumi.OutputState }

func (SubResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResource)(nil)).Elem()
}

func (o SubResourceOutput) ToSubResourceOutput() SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourceOutputWithContext(ctx context.Context) SubResourceOutput {
	return o
}

func (o SubResourceOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o.ToSubResourcePtrOutputWithContext(context.Background())
}

func (o SubResourceOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubResource) *SubResource {
		return &v
	}).(SubResourcePtrOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourcePtrOutput struct{ *pulumi.OutputState }

func (SubResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResource)(nil)).Elem()
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutput() SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) ToSubResourcePtrOutputWithContext(ctx context.Context) SubResourcePtrOutput {
	return o
}

func (o SubResourcePtrOutput) Elem() SubResourceOutput {
	return o.ApplyT(func(v *SubResource) SubResource {
		if v != nil {
			return *v
		}
		var ret SubResource
		return ret
	}).(SubResourceOutput)
}

// Sub-resource ID. Both absolute resource ID and a relative resource ID are accepted.
// An absolute ID starts with /subscriptions/ and contains the entire ID of the parent resource and the ID of the sub-resource in the end.
// A relative ID replaces the ID of the parent resource with a token '$self', followed by the sub-resource ID itself.
// Example of a relative ID: $self/frontEndConfigurations/my-frontend.
func (o SubResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceArrayOutput struct{ *pulumi.OutputState }

func (SubResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResource)(nil)).Elem()
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutput() SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) ToSubResourceArrayOutputWithContext(ctx context.Context) SubResourceArrayOutput {
	return o
}

func (o SubResourceArrayOutput) Index(i pulumi.IntInput) SubResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResource {
		return vs[0].([]SubResource)[vs[1].(int)]
	}).(SubResourceOutput)
}

type SubResourceReadOnlyResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
}

type SubResourceReadOnlyResponseOutput struct{ *pulumi.OutputState }

func (SubResourceReadOnlyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceReadOnlyResponse)(nil)).Elem()
}

func (o SubResourceReadOnlyResponseOutput) ToSubResourceReadOnlyResponseOutput() SubResourceReadOnlyResponseOutput {
	return o
}

func (o SubResourceReadOnlyResponseOutput) ToSubResourceReadOnlyResponseOutputWithContext(ctx context.Context) SubResourceReadOnlyResponseOutput {
	return o
}

// Resource Id
func (o SubResourceReadOnlyResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SubResourceReadOnlyResponse) string { return v.Id }).(pulumi.StringOutput)
}

type SubResourceReadOnlyResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceReadOnlyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceReadOnlyResponse)(nil)).Elem()
}

func (o SubResourceReadOnlyResponseArrayOutput) ToSubResourceReadOnlyResponseArrayOutput() SubResourceReadOnlyResponseArrayOutput {
	return o
}

func (o SubResourceReadOnlyResponseArrayOutput) ToSubResourceReadOnlyResponseArrayOutputWithContext(ctx context.Context) SubResourceReadOnlyResponseArrayOutput {
	return o
}

func (o SubResourceReadOnlyResponseArrayOutput) Index(i pulumi.IntInput) SubResourceReadOnlyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceReadOnlyResponse {
		return vs[0].([]SubResourceReadOnlyResponse)[vs[1].(int)]
	}).(SubResourceReadOnlyResponseOutput)
}

type SubResourceResponse struct {
	// Resource Id
	Id *string `pulumi:"id"`
}

type SubResourceResponseOutput struct{ *pulumi.OutputState }

func (SubResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutput() SubResourceResponseOutput {
	return o
}

func (o SubResourceResponseOutput) ToSubResourceResponseOutputWithContext(ctx context.Context) SubResourceResponseOutput {
	return o
}

// Resource Id
func (o SubResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SubResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutput() SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) ToSubResourceResponsePtrOutputWithContext(ctx context.Context) SubResourceResponsePtrOutput {
	return o
}

func (o SubResourceResponsePtrOutput) Elem() SubResourceResponseOutput {
	return o.ApplyT(func(v *SubResourceResponse) SubResourceResponse {
		if v != nil {
			return *v
		}
		var ret SubResourceResponse
		return ret
	}).(SubResourceResponseOutput)
}

// Resource Id
func (o SubResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type SubResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceResponse)(nil)).Elem()
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutput() SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) ToSubResourceResponseArrayOutputWithContext(ctx context.Context) SubResourceResponseArrayOutput {
	return o
}

func (o SubResourceResponseArrayOutput) Index(i pulumi.IntInput) SubResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceResponse {
		return vs[0].([]SubResourceResponse)[vs[1].(int)]
	}).(SubResourceResponseOutput)
}

type SubResourceWithColocationStatusResponse struct {
	// Describes colocation status of a resource in the Proximity Placement Group.
	ColocationStatus *InstanceViewStatusResponse `pulumi:"colocationStatus"`
	// Resource Id
	Id *string `pulumi:"id"`
}

type SubResourceWithColocationStatusResponseOutput struct{ *pulumi.OutputState }

func (SubResourceWithColocationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubResourceWithColocationStatusResponse)(nil)).Elem()
}

func (o SubResourceWithColocationStatusResponseOutput) ToSubResourceWithColocationStatusResponseOutput() SubResourceWithColocationStatusResponseOutput {
	return o
}

func (o SubResourceWithColocationStatusResponseOutput) ToSubResourceWithColocationStatusResponseOutputWithContext(ctx context.Context) SubResourceWithColocationStatusResponseOutput {
	return o
}

// Describes colocation status of a resource in the Proximity Placement Group.
func (o SubResourceWithColocationStatusResponseOutput) ColocationStatus() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v SubResourceWithColocationStatusResponse) *InstanceViewStatusResponse { return v.ColocationStatus }).(InstanceViewStatusResponsePtrOutput)
}

// Resource Id
func (o SubResourceWithColocationStatusResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubResourceWithColocationStatusResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type SubResourceWithColocationStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (SubResourceWithColocationStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubResourceWithColocationStatusResponse)(nil)).Elem()
}

func (o SubResourceWithColocationStatusResponseArrayOutput) ToSubResourceWithColocationStatusResponseArrayOutput() SubResourceWithColocationStatusResponseArrayOutput {
	return o
}

func (o SubResourceWithColocationStatusResponseArrayOutput) ToSubResourceWithColocationStatusResponseArrayOutputWithContext(ctx context.Context) SubResourceWithColocationStatusResponseArrayOutput {
	return o
}

func (o SubResourceWithColocationStatusResponseArrayOutput) Index(i pulumi.IntInput) SubResourceWithColocationStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubResourceWithColocationStatusResponse {
		return vs[0].([]SubResourceWithColocationStatusResponse)[vs[1].(int)]
	}).(SubResourceWithColocationStatusResponseOutput)
}

// List of supported capabilities persisted on the disk resource for VM use.
type SupportedCapabilities struct {
	// True if the image from which the OS disk is created supports accelerated networking.
	AcceleratedNetwork *bool `pulumi:"acceleratedNetwork"`
	// CPU architecture supported by an OS disk.
	Architecture *string `pulumi:"architecture"`
	// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
	DiskControllerTypes *string `pulumi:"diskControllerTypes"`
}

// SupportedCapabilitiesInput is an input type that accepts SupportedCapabilitiesArgs and SupportedCapabilitiesOutput values.
// You can construct a concrete instance of `SupportedCapabilitiesInput` via:
//
//	SupportedCapabilitiesArgs{...}
type SupportedCapabilitiesInput interface {
	pulumi.Input

	ToSupportedCapabilitiesOutput() SupportedCapabilitiesOutput
	ToSupportedCapabilitiesOutputWithContext(context.Context) SupportedCapabilitiesOutput
}

// List of supported capabilities persisted on the disk resource for VM use.
type SupportedCapabilitiesArgs struct {
	// True if the image from which the OS disk is created supports accelerated networking.
	AcceleratedNetwork pulumi.BoolPtrInput `pulumi:"acceleratedNetwork"`
	// CPU architecture supported by an OS disk.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
	DiskControllerTypes pulumi.StringPtrInput `pulumi:"diskControllerTypes"`
}

func (SupportedCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportedCapabilities)(nil)).Elem()
}

func (i SupportedCapabilitiesArgs) ToSupportedCapabilitiesOutput() SupportedCapabilitiesOutput {
	return i.ToSupportedCapabilitiesOutputWithContext(context.Background())
}

func (i SupportedCapabilitiesArgs) ToSupportedCapabilitiesOutputWithContext(ctx context.Context) SupportedCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportedCapabilitiesOutput)
}

func (i SupportedCapabilitiesArgs) ToSupportedCapabilitiesPtrOutput() SupportedCapabilitiesPtrOutput {
	return i.ToSupportedCapabilitiesPtrOutputWithContext(context.Background())
}

func (i SupportedCapabilitiesArgs) ToSupportedCapabilitiesPtrOutputWithContext(ctx context.Context) SupportedCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportedCapabilitiesOutput).ToSupportedCapabilitiesPtrOutputWithContext(ctx)
}

// SupportedCapabilitiesPtrInput is an input type that accepts SupportedCapabilitiesArgs, SupportedCapabilitiesPtr and SupportedCapabilitiesPtrOutput values.
// You can construct a concrete instance of `SupportedCapabilitiesPtrInput` via:
//
//	        SupportedCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type SupportedCapabilitiesPtrInput interface {
	pulumi.Input

	ToSupportedCapabilitiesPtrOutput() SupportedCapabilitiesPtrOutput
	ToSupportedCapabilitiesPtrOutputWithContext(context.Context) SupportedCapabilitiesPtrOutput
}

type supportedCapabilitiesPtrType SupportedCapabilitiesArgs

func SupportedCapabilitiesPtr(v *SupportedCapabilitiesArgs) SupportedCapabilitiesPtrInput {
	return (*supportedCapabilitiesPtrType)(v)
}

func (*supportedCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportedCapabilities)(nil)).Elem()
}

func (i *supportedCapabilitiesPtrType) ToSupportedCapabilitiesPtrOutput() SupportedCapabilitiesPtrOutput {
	return i.ToSupportedCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *supportedCapabilitiesPtrType) ToSupportedCapabilitiesPtrOutputWithContext(ctx context.Context) SupportedCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SupportedCapabilitiesPtrOutput)
}

// List of supported capabilities persisted on the disk resource for VM use.
type SupportedCapabilitiesOutput struct{ *pulumi.OutputState }

func (SupportedCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportedCapabilities)(nil)).Elem()
}

func (o SupportedCapabilitiesOutput) ToSupportedCapabilitiesOutput() SupportedCapabilitiesOutput {
	return o
}

func (o SupportedCapabilitiesOutput) ToSupportedCapabilitiesOutputWithContext(ctx context.Context) SupportedCapabilitiesOutput {
	return o
}

func (o SupportedCapabilitiesOutput) ToSupportedCapabilitiesPtrOutput() SupportedCapabilitiesPtrOutput {
	return o.ToSupportedCapabilitiesPtrOutputWithContext(context.Background())
}

func (o SupportedCapabilitiesOutput) ToSupportedCapabilitiesPtrOutputWithContext(ctx context.Context) SupportedCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SupportedCapabilities) *SupportedCapabilities {
		return &v
	}).(SupportedCapabilitiesPtrOutput)
}

// True if the image from which the OS disk is created supports accelerated networking.
func (o SupportedCapabilitiesOutput) AcceleratedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SupportedCapabilities) *bool { return v.AcceleratedNetwork }).(pulumi.BoolPtrOutput)
}

// CPU architecture supported by an OS disk.
func (o SupportedCapabilitiesOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportedCapabilities) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
func (o SupportedCapabilitiesOutput) DiskControllerTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportedCapabilities) *string { return v.DiskControllerTypes }).(pulumi.StringPtrOutput)
}

type SupportedCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (SupportedCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportedCapabilities)(nil)).Elem()
}

func (o SupportedCapabilitiesPtrOutput) ToSupportedCapabilitiesPtrOutput() SupportedCapabilitiesPtrOutput {
	return o
}

func (o SupportedCapabilitiesPtrOutput) ToSupportedCapabilitiesPtrOutputWithContext(ctx context.Context) SupportedCapabilitiesPtrOutput {
	return o
}

func (o SupportedCapabilitiesPtrOutput) Elem() SupportedCapabilitiesOutput {
	return o.ApplyT(func(v *SupportedCapabilities) SupportedCapabilities {
		if v != nil {
			return *v
		}
		var ret SupportedCapabilities
		return ret
	}).(SupportedCapabilitiesOutput)
}

// True if the image from which the OS disk is created supports accelerated networking.
func (o SupportedCapabilitiesPtrOutput) AcceleratedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SupportedCapabilities) *bool {
		if v == nil {
			return nil
		}
		return v.AcceleratedNetwork
	}).(pulumi.BoolPtrOutput)
}

// CPU architecture supported by an OS disk.
func (o SupportedCapabilitiesPtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportedCapabilities) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
func (o SupportedCapabilitiesPtrOutput) DiskControllerTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportedCapabilities) *string {
		if v == nil {
			return nil
		}
		return v.DiskControllerTypes
	}).(pulumi.StringPtrOutput)
}

// List of supported capabilities persisted on the disk resource for VM use.
type SupportedCapabilitiesResponse struct {
	// True if the image from which the OS disk is created supports accelerated networking.
	AcceleratedNetwork *bool `pulumi:"acceleratedNetwork"`
	// CPU architecture supported by an OS disk.
	Architecture *string `pulumi:"architecture"`
	// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
	DiskControllerTypes *string `pulumi:"diskControllerTypes"`
}

// List of supported capabilities persisted on the disk resource for VM use.
type SupportedCapabilitiesResponseOutput struct{ *pulumi.OutputState }

func (SupportedCapabilitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportedCapabilitiesResponse)(nil)).Elem()
}

func (o SupportedCapabilitiesResponseOutput) ToSupportedCapabilitiesResponseOutput() SupportedCapabilitiesResponseOutput {
	return o
}

func (o SupportedCapabilitiesResponseOutput) ToSupportedCapabilitiesResponseOutputWithContext(ctx context.Context) SupportedCapabilitiesResponseOutput {
	return o
}

// True if the image from which the OS disk is created supports accelerated networking.
func (o SupportedCapabilitiesResponseOutput) AcceleratedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SupportedCapabilitiesResponse) *bool { return v.AcceleratedNetwork }).(pulumi.BoolPtrOutput)
}

// CPU architecture supported by an OS disk.
func (o SupportedCapabilitiesResponseOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportedCapabilitiesResponse) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
func (o SupportedCapabilitiesResponseOutput) DiskControllerTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportedCapabilitiesResponse) *string { return v.DiskControllerTypes }).(pulumi.StringPtrOutput)
}

type SupportedCapabilitiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SupportedCapabilitiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SupportedCapabilitiesResponse)(nil)).Elem()
}

func (o SupportedCapabilitiesResponsePtrOutput) ToSupportedCapabilitiesResponsePtrOutput() SupportedCapabilitiesResponsePtrOutput {
	return o
}

func (o SupportedCapabilitiesResponsePtrOutput) ToSupportedCapabilitiesResponsePtrOutputWithContext(ctx context.Context) SupportedCapabilitiesResponsePtrOutput {
	return o
}

func (o SupportedCapabilitiesResponsePtrOutput) Elem() SupportedCapabilitiesResponseOutput {
	return o.ApplyT(func(v *SupportedCapabilitiesResponse) SupportedCapabilitiesResponse {
		if v != nil {
			return *v
		}
		var ret SupportedCapabilitiesResponse
		return ret
	}).(SupportedCapabilitiesResponseOutput)
}

// True if the image from which the OS disk is created supports accelerated networking.
func (o SupportedCapabilitiesResponsePtrOutput) AcceleratedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SupportedCapabilitiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AcceleratedNetwork
	}).(pulumi.BoolPtrOutput)
}

// CPU architecture supported by an OS disk.
func (o SupportedCapabilitiesResponsePtrOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportedCapabilitiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Architecture
	}).(pulumi.StringPtrOutput)
}

// The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
func (o SupportedCapabilitiesResponsePtrOutput) DiskControllerTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SupportedCapabilitiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskControllerTypes
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type SystemDataResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) Elem() SystemDataResponseOutput {
	return o.ApplyT(func(v *SystemDataResponse) SystemDataResponse {
		if v != nil {
			return *v
		}
		var ret SystemDataResponse
		return ret
	}).(SystemDataResponseOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// Describes the target region information.
type TargetRegion struct {
	// List of storage sku with replica count to create direct drive replicas.
	AdditionalReplicaSets []AdditionalReplicaSet `pulumi:"additionalReplicaSets"`
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImages `pulumi:"encryption"`
	// Contains the flag setting to hide an image when users specify version='latest'
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The name of the region.
	Name string `pulumi:"name"`
	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount *int `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// TargetRegionInput is an input type that accepts TargetRegionArgs and TargetRegionOutput values.
// You can construct a concrete instance of `TargetRegionInput` via:
//
//	TargetRegionArgs{...}
type TargetRegionInput interface {
	pulumi.Input

	ToTargetRegionOutput() TargetRegionOutput
	ToTargetRegionOutputWithContext(context.Context) TargetRegionOutput
}

// Describes the target region information.
type TargetRegionArgs struct {
	// List of storage sku with replica count to create direct drive replicas.
	AdditionalReplicaSets AdditionalReplicaSetArrayInput `pulumi:"additionalReplicaSets"`
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption EncryptionImagesPtrInput `pulumi:"encryption"`
	// Contains the flag setting to hide an image when users specify version='latest'
	ExcludeFromLatest pulumi.BoolPtrInput `pulumi:"excludeFromLatest"`
	// The name of the region.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount pulumi.IntPtrInput `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (TargetRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetRegion)(nil)).Elem()
}

func (i TargetRegionArgs) ToTargetRegionOutput() TargetRegionOutput {
	return i.ToTargetRegionOutputWithContext(context.Background())
}

func (i TargetRegionArgs) ToTargetRegionOutputWithContext(ctx context.Context) TargetRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetRegionOutput)
}

// TargetRegionArrayInput is an input type that accepts TargetRegionArray and TargetRegionArrayOutput values.
// You can construct a concrete instance of `TargetRegionArrayInput` via:
//
//	TargetRegionArray{ TargetRegionArgs{...} }
type TargetRegionArrayInput interface {
	pulumi.Input

	ToTargetRegionArrayOutput() TargetRegionArrayOutput
	ToTargetRegionArrayOutputWithContext(context.Context) TargetRegionArrayOutput
}

type TargetRegionArray []TargetRegionInput

func (TargetRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetRegion)(nil)).Elem()
}

func (i TargetRegionArray) ToTargetRegionArrayOutput() TargetRegionArrayOutput {
	return i.ToTargetRegionArrayOutputWithContext(context.Background())
}

func (i TargetRegionArray) ToTargetRegionArrayOutputWithContext(ctx context.Context) TargetRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetRegionArrayOutput)
}

// Describes the target region information.
type TargetRegionOutput struct{ *pulumi.OutputState }

func (TargetRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetRegion)(nil)).Elem()
}

func (o TargetRegionOutput) ToTargetRegionOutput() TargetRegionOutput {
	return o
}

func (o TargetRegionOutput) ToTargetRegionOutputWithContext(ctx context.Context) TargetRegionOutput {
	return o
}

// List of storage sku with replica count to create direct drive replicas.
func (o TargetRegionOutput) AdditionalReplicaSets() AdditionalReplicaSetArrayOutput {
	return o.ApplyT(func(v TargetRegion) []AdditionalReplicaSet { return v.AdditionalReplicaSets }).(AdditionalReplicaSetArrayOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
func (o TargetRegionOutput) Encryption() EncryptionImagesPtrOutput {
	return o.ApplyT(func(v TargetRegion) *EncryptionImages { return v.Encryption }).(EncryptionImagesPtrOutput)
}

// Contains the flag setting to hide an image when users specify version='latest'
func (o TargetRegionOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TargetRegion) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

// The name of the region.
func (o TargetRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRegion) string { return v.Name }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property is updatable.
func (o TargetRegionOutput) RegionalReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetRegion) *int { return v.RegionalReplicaCount }).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o TargetRegionOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetRegion) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type TargetRegionArrayOutput struct{ *pulumi.OutputState }

func (TargetRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetRegion)(nil)).Elem()
}

func (o TargetRegionArrayOutput) ToTargetRegionArrayOutput() TargetRegionArrayOutput {
	return o
}

func (o TargetRegionArrayOutput) ToTargetRegionArrayOutputWithContext(ctx context.Context) TargetRegionArrayOutput {
	return o
}

func (o TargetRegionArrayOutput) Index(i pulumi.IntInput) TargetRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetRegion {
		return vs[0].([]TargetRegion)[vs[1].(int)]
	}).(TargetRegionOutput)
}

// Describes the target region information.
type TargetRegionResponse struct {
	// List of storage sku with replica count to create direct drive replicas.
	AdditionalReplicaSets []AdditionalReplicaSetResponse `pulumi:"additionalReplicaSets"`
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImagesResponse `pulumi:"encryption"`
	// Contains the flag setting to hide an image when users specify version='latest'
	ExcludeFromLatest *bool `pulumi:"excludeFromLatest"`
	// The name of the region.
	Name string `pulumi:"name"`
	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount *int `pulumi:"regionalReplicaCount"`
	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes the target region information.
type TargetRegionResponseOutput struct{ *pulumi.OutputState }

func (TargetRegionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetRegionResponse)(nil)).Elem()
}

func (o TargetRegionResponseOutput) ToTargetRegionResponseOutput() TargetRegionResponseOutput {
	return o
}

func (o TargetRegionResponseOutput) ToTargetRegionResponseOutputWithContext(ctx context.Context) TargetRegionResponseOutput {
	return o
}

// List of storage sku with replica count to create direct drive replicas.
func (o TargetRegionResponseOutput) AdditionalReplicaSets() AdditionalReplicaSetResponseArrayOutput {
	return o.ApplyT(func(v TargetRegionResponse) []AdditionalReplicaSetResponse { return v.AdditionalReplicaSets }).(AdditionalReplicaSetResponseArrayOutput)
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
func (o TargetRegionResponseOutput) Encryption() EncryptionImagesResponsePtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *EncryptionImagesResponse { return v.Encryption }).(EncryptionImagesResponsePtrOutput)
}

// Contains the flag setting to hide an image when users specify version='latest'
func (o TargetRegionResponseOutput) ExcludeFromLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *bool { return v.ExcludeFromLatest }).(pulumi.BoolPtrOutput)
}

// The name of the region.
func (o TargetRegionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TargetRegionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The number of replicas of the Image Version to be created per region. This property is updatable.
func (o TargetRegionResponseOutput) RegionalReplicaCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *int { return v.RegionalReplicaCount }).(pulumi.IntPtrOutput)
}

// Specifies the storage account type to be used to store the image. This property is not updatable.
func (o TargetRegionResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetRegionResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type TargetRegionResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetRegionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetRegionResponse)(nil)).Elem()
}

func (o TargetRegionResponseArrayOutput) ToTargetRegionResponseArrayOutput() TargetRegionResponseArrayOutput {
	return o
}

func (o TargetRegionResponseArrayOutput) ToTargetRegionResponseArrayOutputWithContext(ctx context.Context) TargetRegionResponseArrayOutput {
	return o
}

func (o TargetRegionResponseArrayOutput) Index(i pulumi.IntInput) TargetRegionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetRegionResponse {
		return vs[0].([]TargetRegionResponse)[vs[1].(int)]
	}).(TargetRegionResponseOutput)
}

type TerminateNotificationProfile struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool `pulumi:"enable"`
	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string `pulumi:"notBeforeTimeout"`
}

// TerminateNotificationProfileInput is an input type that accepts TerminateNotificationProfileArgs and TerminateNotificationProfileOutput values.
// You can construct a concrete instance of `TerminateNotificationProfileInput` via:
//
//	TerminateNotificationProfileArgs{...}
type TerminateNotificationProfileInput interface {
	pulumi.Input

	ToTerminateNotificationProfileOutput() TerminateNotificationProfileOutput
	ToTerminateNotificationProfileOutputWithContext(context.Context) TerminateNotificationProfileOutput
}

type TerminateNotificationProfileArgs struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout pulumi.StringPtrInput `pulumi:"notBeforeTimeout"`
}

func (TerminateNotificationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminateNotificationProfile)(nil)).Elem()
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfileOutput() TerminateNotificationProfileOutput {
	return i.ToTerminateNotificationProfileOutputWithContext(context.Background())
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfileOutputWithContext(ctx context.Context) TerminateNotificationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminateNotificationProfileOutput)
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput {
	return i.ToTerminateNotificationProfilePtrOutputWithContext(context.Background())
}

func (i TerminateNotificationProfileArgs) ToTerminateNotificationProfilePtrOutputWithContext(ctx context.Context) TerminateNotificationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminateNotificationProfileOutput).ToTerminateNotificationProfilePtrOutputWithContext(ctx)
}

// TerminateNotificationProfilePtrInput is an input type that accepts TerminateNotificationProfileArgs, TerminateNotificationProfilePtr and TerminateNotificationProfilePtrOutput values.
// You can construct a concrete instance of `TerminateNotificationProfilePtrInput` via:
//
//	        TerminateNotificationProfileArgs{...}
//
//	or:
//
//	        nil
type TerminateNotificationProfilePtrInput interface {
	pulumi.Input

	ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput
	ToTerminateNotificationProfilePtrOutputWithContext(context.Context) TerminateNotificationProfilePtrOutput
}

type terminateNotificationProfilePtrType TerminateNotificationProfileArgs

func TerminateNotificationProfilePtr(v *TerminateNotificationProfileArgs) TerminateNotificationProfilePtrInput {
	return (*terminateNotificationProfilePtrType)(v)
}

func (*terminateNotificationProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TerminateNotificationProfile)(nil)).Elem()
}

func (i *terminateNotificationProfilePtrType) ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput {
	return i.ToTerminateNotificationProfilePtrOutputWithContext(context.Background())
}

func (i *terminateNotificationProfilePtrType) ToTerminateNotificationProfilePtrOutputWithContext(ctx context.Context) TerminateNotificationProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TerminateNotificationProfilePtrOutput)
}

type TerminateNotificationProfileOutput struct{ *pulumi.OutputState }

func (TerminateNotificationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminateNotificationProfile)(nil)).Elem()
}

func (o TerminateNotificationProfileOutput) ToTerminateNotificationProfileOutput() TerminateNotificationProfileOutput {
	return o
}

func (o TerminateNotificationProfileOutput) ToTerminateNotificationProfileOutputWithContext(ctx context.Context) TerminateNotificationProfileOutput {
	return o
}

func (o TerminateNotificationProfileOutput) ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput {
	return o.ToTerminateNotificationProfilePtrOutputWithContext(context.Background())
}

func (o TerminateNotificationProfileOutput) ToTerminateNotificationProfilePtrOutputWithContext(ctx context.Context) TerminateNotificationProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TerminateNotificationProfile) *TerminateNotificationProfile {
		return &v
	}).(TerminateNotificationProfilePtrOutput)
}

// Specifies whether the Terminate Scheduled event is enabled or disabled.
func (o TerminateNotificationProfileOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfile) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
func (o TerminateNotificationProfileOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfile) *string { return v.NotBeforeTimeout }).(pulumi.StringPtrOutput)
}

type TerminateNotificationProfilePtrOutput struct{ *pulumi.OutputState }

func (TerminateNotificationProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TerminateNotificationProfile)(nil)).Elem()
}

func (o TerminateNotificationProfilePtrOutput) ToTerminateNotificationProfilePtrOutput() TerminateNotificationProfilePtrOutput {
	return o
}

func (o TerminateNotificationProfilePtrOutput) ToTerminateNotificationProfilePtrOutputWithContext(ctx context.Context) TerminateNotificationProfilePtrOutput {
	return o
}

func (o TerminateNotificationProfilePtrOutput) Elem() TerminateNotificationProfileOutput {
	return o.ApplyT(func(v *TerminateNotificationProfile) TerminateNotificationProfile {
		if v != nil {
			return *v
		}
		var ret TerminateNotificationProfile
		return ret
	}).(TerminateNotificationProfileOutput)
}

// Specifies whether the Terminate Scheduled event is enabled or disabled.
func (o TerminateNotificationProfilePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TerminateNotificationProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
func (o TerminateNotificationProfilePtrOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TerminateNotificationProfile) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeTimeout
	}).(pulumi.StringPtrOutput)
}

type TerminateNotificationProfileResponse struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool `pulumi:"enable"`
	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string `pulumi:"notBeforeTimeout"`
}

type TerminateNotificationProfileResponseOutput struct{ *pulumi.OutputState }

func (TerminateNotificationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TerminateNotificationProfileResponse)(nil)).Elem()
}

func (o TerminateNotificationProfileResponseOutput) ToTerminateNotificationProfileResponseOutput() TerminateNotificationProfileResponseOutput {
	return o
}

func (o TerminateNotificationProfileResponseOutput) ToTerminateNotificationProfileResponseOutputWithContext(ctx context.Context) TerminateNotificationProfileResponseOutput {
	return o
}

// Specifies whether the Terminate Scheduled event is enabled or disabled.
func (o TerminateNotificationProfileResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfileResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
func (o TerminateNotificationProfileResponseOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TerminateNotificationProfileResponse) *string { return v.NotBeforeTimeout }).(pulumi.StringPtrOutput)
}

type TerminateNotificationProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (TerminateNotificationProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TerminateNotificationProfileResponse)(nil)).Elem()
}

func (o TerminateNotificationProfileResponsePtrOutput) ToTerminateNotificationProfileResponsePtrOutput() TerminateNotificationProfileResponsePtrOutput {
	return o
}

func (o TerminateNotificationProfileResponsePtrOutput) ToTerminateNotificationProfileResponsePtrOutputWithContext(ctx context.Context) TerminateNotificationProfileResponsePtrOutput {
	return o
}

func (o TerminateNotificationProfileResponsePtrOutput) Elem() TerminateNotificationProfileResponseOutput {
	return o.ApplyT(func(v *TerminateNotificationProfileResponse) TerminateNotificationProfileResponse {
		if v != nil {
			return *v
		}
		var ret TerminateNotificationProfileResponse
		return ret
	}).(TerminateNotificationProfileResponseOutput)
}

// Specifies whether the Terminate Scheduled event is enabled or disabled.
func (o TerminateNotificationProfileResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TerminateNotificationProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)
func (o TerminateNotificationProfileResponsePtrOutput) NotBeforeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TerminateNotificationProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeTimeout
	}).(pulumi.StringPtrOutput)
}

// A UEFI key signature.
type UefiKey struct {
	// The type of key signature.
	Type *string `pulumi:"type"`
	// The value of the key signature.
	Value []string `pulumi:"value"`
}

// UefiKeyInput is an input type that accepts UefiKeyArgs and UefiKeyOutput values.
// You can construct a concrete instance of `UefiKeyInput` via:
//
//	UefiKeyArgs{...}
type UefiKeyInput interface {
	pulumi.Input

	ToUefiKeyOutput() UefiKeyOutput
	ToUefiKeyOutputWithContext(context.Context) UefiKeyOutput
}

// A UEFI key signature.
type UefiKeyArgs struct {
	// The type of key signature.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the key signature.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (UefiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiKey)(nil)).Elem()
}

func (i UefiKeyArgs) ToUefiKeyOutput() UefiKeyOutput {
	return i.ToUefiKeyOutputWithContext(context.Background())
}

func (i UefiKeyArgs) ToUefiKeyOutputWithContext(ctx context.Context) UefiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeyOutput)
}

func (i UefiKeyArgs) ToUefiKeyPtrOutput() UefiKeyPtrOutput {
	return i.ToUefiKeyPtrOutputWithContext(context.Background())
}

func (i UefiKeyArgs) ToUefiKeyPtrOutputWithContext(ctx context.Context) UefiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeyOutput).ToUefiKeyPtrOutputWithContext(ctx)
}

// UefiKeyPtrInput is an input type that accepts UefiKeyArgs, UefiKeyPtr and UefiKeyPtrOutput values.
// You can construct a concrete instance of `UefiKeyPtrInput` via:
//
//	        UefiKeyArgs{...}
//
//	or:
//
//	        nil
type UefiKeyPtrInput interface {
	pulumi.Input

	ToUefiKeyPtrOutput() UefiKeyPtrOutput
	ToUefiKeyPtrOutputWithContext(context.Context) UefiKeyPtrOutput
}

type uefiKeyPtrType UefiKeyArgs

func UefiKeyPtr(v *UefiKeyArgs) UefiKeyPtrInput {
	return (*uefiKeyPtrType)(v)
}

func (*uefiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiKey)(nil)).Elem()
}

func (i *uefiKeyPtrType) ToUefiKeyPtrOutput() UefiKeyPtrOutput {
	return i.ToUefiKeyPtrOutputWithContext(context.Background())
}

func (i *uefiKeyPtrType) ToUefiKeyPtrOutputWithContext(ctx context.Context) UefiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeyPtrOutput)
}

// UefiKeyArrayInput is an input type that accepts UefiKeyArray and UefiKeyArrayOutput values.
// You can construct a concrete instance of `UefiKeyArrayInput` via:
//
//	UefiKeyArray{ UefiKeyArgs{...} }
type UefiKeyArrayInput interface {
	pulumi.Input

	ToUefiKeyArrayOutput() UefiKeyArrayOutput
	ToUefiKeyArrayOutputWithContext(context.Context) UefiKeyArrayOutput
}

type UefiKeyArray []UefiKeyInput

func (UefiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UefiKey)(nil)).Elem()
}

func (i UefiKeyArray) ToUefiKeyArrayOutput() UefiKeyArrayOutput {
	return i.ToUefiKeyArrayOutputWithContext(context.Background())
}

func (i UefiKeyArray) ToUefiKeyArrayOutputWithContext(ctx context.Context) UefiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeyArrayOutput)
}

// A UEFI key signature.
type UefiKeyOutput struct{ *pulumi.OutputState }

func (UefiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiKey)(nil)).Elem()
}

func (o UefiKeyOutput) ToUefiKeyOutput() UefiKeyOutput {
	return o
}

func (o UefiKeyOutput) ToUefiKeyOutputWithContext(ctx context.Context) UefiKeyOutput {
	return o
}

func (o UefiKeyOutput) ToUefiKeyPtrOutput() UefiKeyPtrOutput {
	return o.ToUefiKeyPtrOutputWithContext(context.Background())
}

func (o UefiKeyOutput) ToUefiKeyPtrOutputWithContext(ctx context.Context) UefiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UefiKey) *UefiKey {
		return &v
	}).(UefiKeyPtrOutput)
}

// The type of key signature.
func (o UefiKeyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UefiKey) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the key signature.
func (o UefiKeyOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UefiKey) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type UefiKeyPtrOutput struct{ *pulumi.OutputState }

func (UefiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiKey)(nil)).Elem()
}

func (o UefiKeyPtrOutput) ToUefiKeyPtrOutput() UefiKeyPtrOutput {
	return o
}

func (o UefiKeyPtrOutput) ToUefiKeyPtrOutputWithContext(ctx context.Context) UefiKeyPtrOutput {
	return o
}

func (o UefiKeyPtrOutput) Elem() UefiKeyOutput {
	return o.ApplyT(func(v *UefiKey) UefiKey {
		if v != nil {
			return *v
		}
		var ret UefiKey
		return ret
	}).(UefiKeyOutput)
}

// The type of key signature.
func (o UefiKeyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UefiKey) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The value of the key signature.
func (o UefiKeyPtrOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UefiKey) []string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringArrayOutput)
}

type UefiKeyArrayOutput struct{ *pulumi.OutputState }

func (UefiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UefiKey)(nil)).Elem()
}

func (o UefiKeyArrayOutput) ToUefiKeyArrayOutput() UefiKeyArrayOutput {
	return o
}

func (o UefiKeyArrayOutput) ToUefiKeyArrayOutputWithContext(ctx context.Context) UefiKeyArrayOutput {
	return o
}

func (o UefiKeyArrayOutput) Index(i pulumi.IntInput) UefiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UefiKey {
		return vs[0].([]UefiKey)[vs[1].(int)]
	}).(UefiKeyOutput)
}

// A UEFI key signature.
type UefiKeyResponse struct {
	// The type of key signature.
	Type *string `pulumi:"type"`
	// The value of the key signature.
	Value []string `pulumi:"value"`
}

// A UEFI key signature.
type UefiKeyResponseOutput struct{ *pulumi.OutputState }

func (UefiKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiKeyResponse)(nil)).Elem()
}

func (o UefiKeyResponseOutput) ToUefiKeyResponseOutput() UefiKeyResponseOutput {
	return o
}

func (o UefiKeyResponseOutput) ToUefiKeyResponseOutputWithContext(ctx context.Context) UefiKeyResponseOutput {
	return o
}

// The type of key signature.
func (o UefiKeyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UefiKeyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the key signature.
func (o UefiKeyResponseOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UefiKeyResponse) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type UefiKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (UefiKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiKeyResponse)(nil)).Elem()
}

func (o UefiKeyResponsePtrOutput) ToUefiKeyResponsePtrOutput() UefiKeyResponsePtrOutput {
	return o
}

func (o UefiKeyResponsePtrOutput) ToUefiKeyResponsePtrOutputWithContext(ctx context.Context) UefiKeyResponsePtrOutput {
	return o
}

func (o UefiKeyResponsePtrOutput) Elem() UefiKeyResponseOutput {
	return o.ApplyT(func(v *UefiKeyResponse) UefiKeyResponse {
		if v != nil {
			return *v
		}
		var ret UefiKeyResponse
		return ret
	}).(UefiKeyResponseOutput)
}

// The type of key signature.
func (o UefiKeyResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UefiKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The value of the key signature.
func (o UefiKeyResponsePtrOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UefiKeyResponse) []string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringArrayOutput)
}

type UefiKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (UefiKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UefiKeyResponse)(nil)).Elem()
}

func (o UefiKeyResponseArrayOutput) ToUefiKeyResponseArrayOutput() UefiKeyResponseArrayOutput {
	return o
}

func (o UefiKeyResponseArrayOutput) ToUefiKeyResponseArrayOutputWithContext(ctx context.Context) UefiKeyResponseArrayOutput {
	return o
}

func (o UefiKeyResponseArrayOutput) Index(i pulumi.IntInput) UefiKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UefiKeyResponse {
		return vs[0].([]UefiKeyResponse)[vs[1].(int)]
	}).(UefiKeyResponseOutput)
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
type UefiKeySignatures struct {
	// The database of UEFI keys for this image version.
	Db []UefiKey `pulumi:"db"`
	// The database of revoked UEFI keys for this image version.
	Dbx []UefiKey `pulumi:"dbx"`
	// The Key Encryption Keys of this image version.
	Kek []UefiKey `pulumi:"kek"`
	// The Platform Key of this image version.
	Pk *UefiKey `pulumi:"pk"`
}

// UefiKeySignaturesInput is an input type that accepts UefiKeySignaturesArgs and UefiKeySignaturesOutput values.
// You can construct a concrete instance of `UefiKeySignaturesInput` via:
//
//	UefiKeySignaturesArgs{...}
type UefiKeySignaturesInput interface {
	pulumi.Input

	ToUefiKeySignaturesOutput() UefiKeySignaturesOutput
	ToUefiKeySignaturesOutputWithContext(context.Context) UefiKeySignaturesOutput
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
type UefiKeySignaturesArgs struct {
	// The database of UEFI keys for this image version.
	Db UefiKeyArrayInput `pulumi:"db"`
	// The database of revoked UEFI keys for this image version.
	Dbx UefiKeyArrayInput `pulumi:"dbx"`
	// The Key Encryption Keys of this image version.
	Kek UefiKeyArrayInput `pulumi:"kek"`
	// The Platform Key of this image version.
	Pk UefiKeyPtrInput `pulumi:"pk"`
}

func (UefiKeySignaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiKeySignatures)(nil)).Elem()
}

func (i UefiKeySignaturesArgs) ToUefiKeySignaturesOutput() UefiKeySignaturesOutput {
	return i.ToUefiKeySignaturesOutputWithContext(context.Background())
}

func (i UefiKeySignaturesArgs) ToUefiKeySignaturesOutputWithContext(ctx context.Context) UefiKeySignaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeySignaturesOutput)
}

func (i UefiKeySignaturesArgs) ToUefiKeySignaturesPtrOutput() UefiKeySignaturesPtrOutput {
	return i.ToUefiKeySignaturesPtrOutputWithContext(context.Background())
}

func (i UefiKeySignaturesArgs) ToUefiKeySignaturesPtrOutputWithContext(ctx context.Context) UefiKeySignaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeySignaturesOutput).ToUefiKeySignaturesPtrOutputWithContext(ctx)
}

// UefiKeySignaturesPtrInput is an input type that accepts UefiKeySignaturesArgs, UefiKeySignaturesPtr and UefiKeySignaturesPtrOutput values.
// You can construct a concrete instance of `UefiKeySignaturesPtrInput` via:
//
//	        UefiKeySignaturesArgs{...}
//
//	or:
//
//	        nil
type UefiKeySignaturesPtrInput interface {
	pulumi.Input

	ToUefiKeySignaturesPtrOutput() UefiKeySignaturesPtrOutput
	ToUefiKeySignaturesPtrOutputWithContext(context.Context) UefiKeySignaturesPtrOutput
}

type uefiKeySignaturesPtrType UefiKeySignaturesArgs

func UefiKeySignaturesPtr(v *UefiKeySignaturesArgs) UefiKeySignaturesPtrInput {
	return (*uefiKeySignaturesPtrType)(v)
}

func (*uefiKeySignaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiKeySignatures)(nil)).Elem()
}

func (i *uefiKeySignaturesPtrType) ToUefiKeySignaturesPtrOutput() UefiKeySignaturesPtrOutput {
	return i.ToUefiKeySignaturesPtrOutputWithContext(context.Background())
}

func (i *uefiKeySignaturesPtrType) ToUefiKeySignaturesPtrOutputWithContext(ctx context.Context) UefiKeySignaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiKeySignaturesPtrOutput)
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
type UefiKeySignaturesOutput struct{ *pulumi.OutputState }

func (UefiKeySignaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiKeySignatures)(nil)).Elem()
}

func (o UefiKeySignaturesOutput) ToUefiKeySignaturesOutput() UefiKeySignaturesOutput {
	return o
}

func (o UefiKeySignaturesOutput) ToUefiKeySignaturesOutputWithContext(ctx context.Context) UefiKeySignaturesOutput {
	return o
}

func (o UefiKeySignaturesOutput) ToUefiKeySignaturesPtrOutput() UefiKeySignaturesPtrOutput {
	return o.ToUefiKeySignaturesPtrOutputWithContext(context.Background())
}

func (o UefiKeySignaturesOutput) ToUefiKeySignaturesPtrOutputWithContext(ctx context.Context) UefiKeySignaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UefiKeySignatures) *UefiKeySignatures {
		return &v
	}).(UefiKeySignaturesPtrOutput)
}

// The database of UEFI keys for this image version.
func (o UefiKeySignaturesOutput) Db() UefiKeyArrayOutput {
	return o.ApplyT(func(v UefiKeySignatures) []UefiKey { return v.Db }).(UefiKeyArrayOutput)
}

// The database of revoked UEFI keys for this image version.
func (o UefiKeySignaturesOutput) Dbx() UefiKeyArrayOutput {
	return o.ApplyT(func(v UefiKeySignatures) []UefiKey { return v.Dbx }).(UefiKeyArrayOutput)
}

// The Key Encryption Keys of this image version.
func (o UefiKeySignaturesOutput) Kek() UefiKeyArrayOutput {
	return o.ApplyT(func(v UefiKeySignatures) []UefiKey { return v.Kek }).(UefiKeyArrayOutput)
}

// The Platform Key of this image version.
func (o UefiKeySignaturesOutput) Pk() UefiKeyPtrOutput {
	return o.ApplyT(func(v UefiKeySignatures) *UefiKey { return v.Pk }).(UefiKeyPtrOutput)
}

type UefiKeySignaturesPtrOutput struct{ *pulumi.OutputState }

func (UefiKeySignaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiKeySignatures)(nil)).Elem()
}

func (o UefiKeySignaturesPtrOutput) ToUefiKeySignaturesPtrOutput() UefiKeySignaturesPtrOutput {
	return o
}

func (o UefiKeySignaturesPtrOutput) ToUefiKeySignaturesPtrOutputWithContext(ctx context.Context) UefiKeySignaturesPtrOutput {
	return o
}

func (o UefiKeySignaturesPtrOutput) Elem() UefiKeySignaturesOutput {
	return o.ApplyT(func(v *UefiKeySignatures) UefiKeySignatures {
		if v != nil {
			return *v
		}
		var ret UefiKeySignatures
		return ret
	}).(UefiKeySignaturesOutput)
}

// The database of UEFI keys for this image version.
func (o UefiKeySignaturesPtrOutput) Db() UefiKeyArrayOutput {
	return o.ApplyT(func(v *UefiKeySignatures) []UefiKey {
		if v == nil {
			return nil
		}
		return v.Db
	}).(UefiKeyArrayOutput)
}

// The database of revoked UEFI keys for this image version.
func (o UefiKeySignaturesPtrOutput) Dbx() UefiKeyArrayOutput {
	return o.ApplyT(func(v *UefiKeySignatures) []UefiKey {
		if v == nil {
			return nil
		}
		return v.Dbx
	}).(UefiKeyArrayOutput)
}

// The Key Encryption Keys of this image version.
func (o UefiKeySignaturesPtrOutput) Kek() UefiKeyArrayOutput {
	return o.ApplyT(func(v *UefiKeySignatures) []UefiKey {
		if v == nil {
			return nil
		}
		return v.Kek
	}).(UefiKeyArrayOutput)
}

// The Platform Key of this image version.
func (o UefiKeySignaturesPtrOutput) Pk() UefiKeyPtrOutput {
	return o.ApplyT(func(v *UefiKeySignatures) *UefiKey {
		if v == nil {
			return nil
		}
		return v.Pk
	}).(UefiKeyPtrOutput)
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
type UefiKeySignaturesResponse struct {
	// The database of UEFI keys for this image version.
	Db []UefiKeyResponse `pulumi:"db"`
	// The database of revoked UEFI keys for this image version.
	Dbx []UefiKeyResponse `pulumi:"dbx"`
	// The Key Encryption Keys of this image version.
	Kek []UefiKeyResponse `pulumi:"kek"`
	// The Platform Key of this image version.
	Pk *UefiKeyResponse `pulumi:"pk"`
}

// Additional UEFI key signatures that will be added to the image in addition to the signature templates
type UefiKeySignaturesResponseOutput struct{ *pulumi.OutputState }

func (UefiKeySignaturesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiKeySignaturesResponse)(nil)).Elem()
}

func (o UefiKeySignaturesResponseOutput) ToUefiKeySignaturesResponseOutput() UefiKeySignaturesResponseOutput {
	return o
}

func (o UefiKeySignaturesResponseOutput) ToUefiKeySignaturesResponseOutputWithContext(ctx context.Context) UefiKeySignaturesResponseOutput {
	return o
}

// The database of UEFI keys for this image version.
func (o UefiKeySignaturesResponseOutput) Db() UefiKeyResponseArrayOutput {
	return o.ApplyT(func(v UefiKeySignaturesResponse) []UefiKeyResponse { return v.Db }).(UefiKeyResponseArrayOutput)
}

// The database of revoked UEFI keys for this image version.
func (o UefiKeySignaturesResponseOutput) Dbx() UefiKeyResponseArrayOutput {
	return o.ApplyT(func(v UefiKeySignaturesResponse) []UefiKeyResponse { return v.Dbx }).(UefiKeyResponseArrayOutput)
}

// The Key Encryption Keys of this image version.
func (o UefiKeySignaturesResponseOutput) Kek() UefiKeyResponseArrayOutput {
	return o.ApplyT(func(v UefiKeySignaturesResponse) []UefiKeyResponse { return v.Kek }).(UefiKeyResponseArrayOutput)
}

// The Platform Key of this image version.
func (o UefiKeySignaturesResponseOutput) Pk() UefiKeyResponsePtrOutput {
	return o.ApplyT(func(v UefiKeySignaturesResponse) *UefiKeyResponse { return v.Pk }).(UefiKeyResponsePtrOutput)
}

type UefiKeySignaturesResponsePtrOutput struct{ *pulumi.OutputState }

func (UefiKeySignaturesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiKeySignaturesResponse)(nil)).Elem()
}

func (o UefiKeySignaturesResponsePtrOutput) ToUefiKeySignaturesResponsePtrOutput() UefiKeySignaturesResponsePtrOutput {
	return o
}

func (o UefiKeySignaturesResponsePtrOutput) ToUefiKeySignaturesResponsePtrOutputWithContext(ctx context.Context) UefiKeySignaturesResponsePtrOutput {
	return o
}

func (o UefiKeySignaturesResponsePtrOutput) Elem() UefiKeySignaturesResponseOutput {
	return o.ApplyT(func(v *UefiKeySignaturesResponse) UefiKeySignaturesResponse {
		if v != nil {
			return *v
		}
		var ret UefiKeySignaturesResponse
		return ret
	}).(UefiKeySignaturesResponseOutput)
}

// The database of UEFI keys for this image version.
func (o UefiKeySignaturesResponsePtrOutput) Db() UefiKeyResponseArrayOutput {
	return o.ApplyT(func(v *UefiKeySignaturesResponse) []UefiKeyResponse {
		if v == nil {
			return nil
		}
		return v.Db
	}).(UefiKeyResponseArrayOutput)
}

// The database of revoked UEFI keys for this image version.
func (o UefiKeySignaturesResponsePtrOutput) Dbx() UefiKeyResponseArrayOutput {
	return o.ApplyT(func(v *UefiKeySignaturesResponse) []UefiKeyResponse {
		if v == nil {
			return nil
		}
		return v.Dbx
	}).(UefiKeyResponseArrayOutput)
}

// The Key Encryption Keys of this image version.
func (o UefiKeySignaturesResponsePtrOutput) Kek() UefiKeyResponseArrayOutput {
	return o.ApplyT(func(v *UefiKeySignaturesResponse) []UefiKeyResponse {
		if v == nil {
			return nil
		}
		return v.Kek
	}).(UefiKeyResponseArrayOutput)
}

// The Platform Key of this image version.
func (o UefiKeySignaturesResponsePtrOutput) Pk() UefiKeyResponsePtrOutput {
	return o.ApplyT(func(v *UefiKeySignaturesResponse) *UefiKeyResponse {
		if v == nil {
			return nil
		}
		return v.Pk
	}).(UefiKeyResponsePtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
type UefiSettings struct {
	// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
	SecureBootEnabled *bool `pulumi:"secureBootEnabled"`
	// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
	VTpmEnabled *bool `pulumi:"vTpmEnabled"`
}

// UefiSettingsInput is an input type that accepts UefiSettingsArgs and UefiSettingsOutput values.
// You can construct a concrete instance of `UefiSettingsInput` via:
//
//	UefiSettingsArgs{...}
type UefiSettingsInput interface {
	pulumi.Input

	ToUefiSettingsOutput() UefiSettingsOutput
	ToUefiSettingsOutputWithContext(context.Context) UefiSettingsOutput
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
type UefiSettingsArgs struct {
	// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
	SecureBootEnabled pulumi.BoolPtrInput `pulumi:"secureBootEnabled"`
	// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
	VTpmEnabled pulumi.BoolPtrInput `pulumi:"vTpmEnabled"`
}

func (UefiSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiSettings)(nil)).Elem()
}

func (i UefiSettingsArgs) ToUefiSettingsOutput() UefiSettingsOutput {
	return i.ToUefiSettingsOutputWithContext(context.Background())
}

func (i UefiSettingsArgs) ToUefiSettingsOutputWithContext(ctx context.Context) UefiSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiSettingsOutput)
}

func (i UefiSettingsArgs) ToUefiSettingsPtrOutput() UefiSettingsPtrOutput {
	return i.ToUefiSettingsPtrOutputWithContext(context.Background())
}

func (i UefiSettingsArgs) ToUefiSettingsPtrOutputWithContext(ctx context.Context) UefiSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiSettingsOutput).ToUefiSettingsPtrOutputWithContext(ctx)
}

// UefiSettingsPtrInput is an input type that accepts UefiSettingsArgs, UefiSettingsPtr and UefiSettingsPtrOutput values.
// You can construct a concrete instance of `UefiSettingsPtrInput` via:
//
//	        UefiSettingsArgs{...}
//
//	or:
//
//	        nil
type UefiSettingsPtrInput interface {
	pulumi.Input

	ToUefiSettingsPtrOutput() UefiSettingsPtrOutput
	ToUefiSettingsPtrOutputWithContext(context.Context) UefiSettingsPtrOutput
}

type uefiSettingsPtrType UefiSettingsArgs

func UefiSettingsPtr(v *UefiSettingsArgs) UefiSettingsPtrInput {
	return (*uefiSettingsPtrType)(v)
}

func (*uefiSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiSettings)(nil)).Elem()
}

func (i *uefiSettingsPtrType) ToUefiSettingsPtrOutput() UefiSettingsPtrOutput {
	return i.ToUefiSettingsPtrOutputWithContext(context.Background())
}

func (i *uefiSettingsPtrType) ToUefiSettingsPtrOutputWithContext(ctx context.Context) UefiSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UefiSettingsPtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
type UefiSettingsOutput struct{ *pulumi.OutputState }

func (UefiSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiSettings)(nil)).Elem()
}

func (o UefiSettingsOutput) ToUefiSettingsOutput() UefiSettingsOutput {
	return o
}

func (o UefiSettingsOutput) ToUefiSettingsOutputWithContext(ctx context.Context) UefiSettingsOutput {
	return o
}

func (o UefiSettingsOutput) ToUefiSettingsPtrOutput() UefiSettingsPtrOutput {
	return o.ToUefiSettingsPtrOutputWithContext(context.Background())
}

func (o UefiSettingsOutput) ToUefiSettingsPtrOutputWithContext(ctx context.Context) UefiSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UefiSettings) *UefiSettings {
		return &v
	}).(UefiSettingsPtrOutput)
}

// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsOutput) SecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UefiSettings) *bool { return v.SecureBootEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsOutput) VTpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UefiSettings) *bool { return v.VTpmEnabled }).(pulumi.BoolPtrOutput)
}

type UefiSettingsPtrOutput struct{ *pulumi.OutputState }

func (UefiSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiSettings)(nil)).Elem()
}

func (o UefiSettingsPtrOutput) ToUefiSettingsPtrOutput() UefiSettingsPtrOutput {
	return o
}

func (o UefiSettingsPtrOutput) ToUefiSettingsPtrOutputWithContext(ctx context.Context) UefiSettingsPtrOutput {
	return o
}

func (o UefiSettingsPtrOutput) Elem() UefiSettingsOutput {
	return o.ApplyT(func(v *UefiSettings) UefiSettings {
		if v != nil {
			return *v
		}
		var ret UefiSettings
		return ret
	}).(UefiSettingsOutput)
}

// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsPtrOutput) SecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UefiSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBootEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsPtrOutput) VTpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UefiSettings) *bool {
		if v == nil {
			return nil
		}
		return v.VTpmEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
type UefiSettingsResponse struct {
	// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
	SecureBootEnabled *bool `pulumi:"secureBootEnabled"`
	// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
	VTpmEnabled *bool `pulumi:"vTpmEnabled"`
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine. Minimum api-version: 2020-12-01.
type UefiSettingsResponseOutput struct{ *pulumi.OutputState }

func (UefiSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UefiSettingsResponse)(nil)).Elem()
}

func (o UefiSettingsResponseOutput) ToUefiSettingsResponseOutput() UefiSettingsResponseOutput {
	return o
}

func (o UefiSettingsResponseOutput) ToUefiSettingsResponseOutputWithContext(ctx context.Context) UefiSettingsResponseOutput {
	return o
}

// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsResponseOutput) SecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UefiSettingsResponse) *bool { return v.SecureBootEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsResponseOutput) VTpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UefiSettingsResponse) *bool { return v.VTpmEnabled }).(pulumi.BoolPtrOutput)
}

type UefiSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UefiSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UefiSettingsResponse)(nil)).Elem()
}

func (o UefiSettingsResponsePtrOutput) ToUefiSettingsResponsePtrOutput() UefiSettingsResponsePtrOutput {
	return o
}

func (o UefiSettingsResponsePtrOutput) ToUefiSettingsResponsePtrOutputWithContext(ctx context.Context) UefiSettingsResponsePtrOutput {
	return o
}

func (o UefiSettingsResponsePtrOutput) Elem() UefiSettingsResponseOutput {
	return o.ApplyT(func(v *UefiSettingsResponse) UefiSettingsResponse {
		if v != nil {
			return *v
		}
		var ret UefiSettingsResponse
		return ret
	}).(UefiSettingsResponseOutput)
}

// Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsResponsePtrOutput) SecureBootEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UefiSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SecureBootEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version: 2020-12-01.
func (o UefiSettingsResponsePtrOutput) VTpmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UefiSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.VTpmEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicy struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicy `pulumi:"automaticOSUpgradePolicy"`
	// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
	Mode *UpgradeMode `pulumi:"mode"`
	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicy `pulumi:"rollingUpgradePolicy"`
}

// UpgradePolicyInput is an input type that accepts UpgradePolicyArgs and UpgradePolicyOutput values.
// You can construct a concrete instance of `UpgradePolicyInput` via:
//
//	UpgradePolicyArgs{...}
type UpgradePolicyInput interface {
	pulumi.Input

	ToUpgradePolicyOutput() UpgradePolicyOutput
	ToUpgradePolicyOutputWithContext(context.Context) UpgradePolicyOutput
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyArgs struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy AutomaticOSUpgradePolicyPtrInput `pulumi:"automaticOSUpgradePolicy"`
	// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
	Mode UpgradeModePtrInput `pulumi:"mode"`
	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy RollingUpgradePolicyPtrInput `pulumi:"rollingUpgradePolicy"`
}

func (UpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradePolicy)(nil)).Elem()
}

func (i UpgradePolicyArgs) ToUpgradePolicyOutput() UpgradePolicyOutput {
	return i.ToUpgradePolicyOutputWithContext(context.Background())
}

func (i UpgradePolicyArgs) ToUpgradePolicyOutputWithContext(ctx context.Context) UpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradePolicyOutput)
}

func (i UpgradePolicyArgs) ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput {
	return i.ToUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i UpgradePolicyArgs) ToUpgradePolicyPtrOutputWithContext(ctx context.Context) UpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradePolicyOutput).ToUpgradePolicyPtrOutputWithContext(ctx)
}

// UpgradePolicyPtrInput is an input type that accepts UpgradePolicyArgs, UpgradePolicyPtr and UpgradePolicyPtrOutput values.
// You can construct a concrete instance of `UpgradePolicyPtrInput` via:
//
//	        UpgradePolicyArgs{...}
//
//	or:
//
//	        nil
type UpgradePolicyPtrInput interface {
	pulumi.Input

	ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput
	ToUpgradePolicyPtrOutputWithContext(context.Context) UpgradePolicyPtrOutput
}

type upgradePolicyPtrType UpgradePolicyArgs

func UpgradePolicyPtr(v *UpgradePolicyArgs) UpgradePolicyPtrInput {
	return (*upgradePolicyPtrType)(v)
}

func (*upgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradePolicy)(nil)).Elem()
}

func (i *upgradePolicyPtrType) ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput {
	return i.ToUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *upgradePolicyPtrType) ToUpgradePolicyPtrOutputWithContext(ctx context.Context) UpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradePolicyPtrOutput)
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyOutput struct{ *pulumi.OutputState }

func (UpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradePolicy)(nil)).Elem()
}

func (o UpgradePolicyOutput) ToUpgradePolicyOutput() UpgradePolicyOutput {
	return o
}

func (o UpgradePolicyOutput) ToUpgradePolicyOutputWithContext(ctx context.Context) UpgradePolicyOutput {
	return o
}

func (o UpgradePolicyOutput) ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput {
	return o.ToUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o UpgradePolicyOutput) ToUpgradePolicyPtrOutputWithContext(ctx context.Context) UpgradePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradePolicy) *UpgradePolicy {
		return &v
	}).(UpgradePolicyPtrOutput)
}

// Configuration parameters used for performing automatic OS Upgrade.
func (o UpgradePolicyOutput) AutomaticOSUpgradePolicy() AutomaticOSUpgradePolicyPtrOutput {
	return o.ApplyT(func(v UpgradePolicy) *AutomaticOSUpgradePolicy { return v.AutomaticOSUpgradePolicy }).(AutomaticOSUpgradePolicyPtrOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
func (o UpgradePolicyOutput) Mode() UpgradeModePtrOutput {
	return o.ApplyT(func(v UpgradePolicy) *UpgradeMode { return v.Mode }).(UpgradeModePtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
func (o UpgradePolicyOutput) RollingUpgradePolicy() RollingUpgradePolicyPtrOutput {
	return o.ApplyT(func(v UpgradePolicy) *RollingUpgradePolicy { return v.RollingUpgradePolicy }).(RollingUpgradePolicyPtrOutput)
}

type UpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (UpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradePolicy)(nil)).Elem()
}

func (o UpgradePolicyPtrOutput) ToUpgradePolicyPtrOutput() UpgradePolicyPtrOutput {
	return o
}

func (o UpgradePolicyPtrOutput) ToUpgradePolicyPtrOutputWithContext(ctx context.Context) UpgradePolicyPtrOutput {
	return o
}

func (o UpgradePolicyPtrOutput) Elem() UpgradePolicyOutput {
	return o.ApplyT(func(v *UpgradePolicy) UpgradePolicy {
		if v != nil {
			return *v
		}
		var ret UpgradePolicy
		return ret
	}).(UpgradePolicyOutput)
}

// Configuration parameters used for performing automatic OS Upgrade.
func (o UpgradePolicyPtrOutput) AutomaticOSUpgradePolicy() AutomaticOSUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *UpgradePolicy) *AutomaticOSUpgradePolicy {
		if v == nil {
			return nil
		}
		return v.AutomaticOSUpgradePolicy
	}).(AutomaticOSUpgradePolicyPtrOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
func (o UpgradePolicyPtrOutput) Mode() UpgradeModePtrOutput {
	return o.ApplyT(func(v *UpgradePolicy) *UpgradeMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(UpgradeModePtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
func (o UpgradePolicyPtrOutput) RollingUpgradePolicy() RollingUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *UpgradePolicy) *RollingUpgradePolicy {
		if v == nil {
			return nil
		}
		return v.RollingUpgradePolicy
	}).(RollingUpgradePolicyPtrOutput)
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyResponse struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicyResponse `pulumi:"automaticOSUpgradePolicy"`
	// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
	Mode *string `pulumi:"mode"`
	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicyResponse `pulumi:"rollingUpgradePolicy"`
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicyResponseOutput struct{ *pulumi.OutputState }

func (UpgradePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradePolicyResponse)(nil)).Elem()
}

func (o UpgradePolicyResponseOutput) ToUpgradePolicyResponseOutput() UpgradePolicyResponseOutput {
	return o
}

func (o UpgradePolicyResponseOutput) ToUpgradePolicyResponseOutputWithContext(ctx context.Context) UpgradePolicyResponseOutput {
	return o
}

// Configuration parameters used for performing automatic OS Upgrade.
func (o UpgradePolicyResponseOutput) AutomaticOSUpgradePolicy() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *AutomaticOSUpgradePolicyResponse { return v.AutomaticOSUpgradePolicy }).(AutomaticOSUpgradePolicyResponsePtrOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
func (o UpgradePolicyResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
func (o UpgradePolicyResponseOutput) RollingUpgradePolicy() RollingUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v UpgradePolicyResponse) *RollingUpgradePolicyResponse { return v.RollingUpgradePolicy }).(RollingUpgradePolicyResponsePtrOutput)
}

type UpgradePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (UpgradePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradePolicyResponse)(nil)).Elem()
}

func (o UpgradePolicyResponsePtrOutput) ToUpgradePolicyResponsePtrOutput() UpgradePolicyResponsePtrOutput {
	return o
}

func (o UpgradePolicyResponsePtrOutput) ToUpgradePolicyResponsePtrOutputWithContext(ctx context.Context) UpgradePolicyResponsePtrOutput {
	return o
}

func (o UpgradePolicyResponsePtrOutput) Elem() UpgradePolicyResponseOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) UpgradePolicyResponse {
		if v != nil {
			return *v
		}
		var ret UpgradePolicyResponse
		return ret
	}).(UpgradePolicyResponseOutput)
}

// Configuration parameters used for performing automatic OS Upgrade.
func (o UpgradePolicyResponsePtrOutput) AutomaticOSUpgradePolicy() AutomaticOSUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) *AutomaticOSUpgradePolicyResponse {
		if v == nil {
			return nil
		}
		return v.AutomaticOSUpgradePolicy
	}).(AutomaticOSUpgradePolicyResponsePtrOutput)
}

// Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
func (o UpgradePolicyResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The configuration parameters used while performing a rolling upgrade.
func (o UpgradePolicyResponsePtrOutput) RollingUpgradePolicy() RollingUpgradePolicyResponsePtrOutput {
	return o.ApplyT(func(v *UpgradePolicyResponse) *RollingUpgradePolicyResponse {
		if v == nil {
			return nil
		}
		return v.RollingUpgradePolicy
	}).(RollingUpgradePolicyResponsePtrOutput)
}

type UserArtifactManage struct {
	// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
	Install string `pulumi:"install"`
	// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
	Remove string `pulumi:"remove"`
	// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
	Update *string `pulumi:"update"`
}

// UserArtifactManageInput is an input type that accepts UserArtifactManageArgs and UserArtifactManageOutput values.
// You can construct a concrete instance of `UserArtifactManageInput` via:
//
//	UserArtifactManageArgs{...}
type UserArtifactManageInput interface {
	pulumi.Input

	ToUserArtifactManageOutput() UserArtifactManageOutput
	ToUserArtifactManageOutputWithContext(context.Context) UserArtifactManageOutput
}

type UserArtifactManageArgs struct {
	// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
	Install pulumi.StringInput `pulumi:"install"`
	// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
	Remove pulumi.StringInput `pulumi:"remove"`
	// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
	Update pulumi.StringPtrInput `pulumi:"update"`
}

func (UserArtifactManageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactManage)(nil)).Elem()
}

func (i UserArtifactManageArgs) ToUserArtifactManageOutput() UserArtifactManageOutput {
	return i.ToUserArtifactManageOutputWithContext(context.Background())
}

func (i UserArtifactManageArgs) ToUserArtifactManageOutputWithContext(ctx context.Context) UserArtifactManageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactManageOutput)
}

func (i UserArtifactManageArgs) ToUserArtifactManagePtrOutput() UserArtifactManagePtrOutput {
	return i.ToUserArtifactManagePtrOutputWithContext(context.Background())
}

func (i UserArtifactManageArgs) ToUserArtifactManagePtrOutputWithContext(ctx context.Context) UserArtifactManagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactManageOutput).ToUserArtifactManagePtrOutputWithContext(ctx)
}

// UserArtifactManagePtrInput is an input type that accepts UserArtifactManageArgs, UserArtifactManagePtr and UserArtifactManagePtrOutput values.
// You can construct a concrete instance of `UserArtifactManagePtrInput` via:
//
//	        UserArtifactManageArgs{...}
//
//	or:
//
//	        nil
type UserArtifactManagePtrInput interface {
	pulumi.Input

	ToUserArtifactManagePtrOutput() UserArtifactManagePtrOutput
	ToUserArtifactManagePtrOutputWithContext(context.Context) UserArtifactManagePtrOutput
}

type userArtifactManagePtrType UserArtifactManageArgs

func UserArtifactManagePtr(v *UserArtifactManageArgs) UserArtifactManagePtrInput {
	return (*userArtifactManagePtrType)(v)
}

func (*userArtifactManagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactManage)(nil)).Elem()
}

func (i *userArtifactManagePtrType) ToUserArtifactManagePtrOutput() UserArtifactManagePtrOutput {
	return i.ToUserArtifactManagePtrOutputWithContext(context.Background())
}

func (i *userArtifactManagePtrType) ToUserArtifactManagePtrOutputWithContext(ctx context.Context) UserArtifactManagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactManagePtrOutput)
}

type UserArtifactManageOutput struct{ *pulumi.OutputState }

func (UserArtifactManageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactManage)(nil)).Elem()
}

func (o UserArtifactManageOutput) ToUserArtifactManageOutput() UserArtifactManageOutput {
	return o
}

func (o UserArtifactManageOutput) ToUserArtifactManageOutputWithContext(ctx context.Context) UserArtifactManageOutput {
	return o
}

func (o UserArtifactManageOutput) ToUserArtifactManagePtrOutput() UserArtifactManagePtrOutput {
	return o.ToUserArtifactManagePtrOutputWithContext(context.Background())
}

func (o UserArtifactManageOutput) ToUserArtifactManagePtrOutputWithContext(ctx context.Context) UserArtifactManagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserArtifactManage) *UserArtifactManage {
		return &v
	}).(UserArtifactManagePtrOutput)
}

// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageOutput) Install() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactManage) string { return v.Install }).(pulumi.StringOutput)
}

// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageOutput) Remove() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactManage) string { return v.Remove }).(pulumi.StringOutput)
}

// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactManage) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type UserArtifactManagePtrOutput struct{ *pulumi.OutputState }

func (UserArtifactManagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactManage)(nil)).Elem()
}

func (o UserArtifactManagePtrOutput) ToUserArtifactManagePtrOutput() UserArtifactManagePtrOutput {
	return o
}

func (o UserArtifactManagePtrOutput) ToUserArtifactManagePtrOutputWithContext(ctx context.Context) UserArtifactManagePtrOutput {
	return o
}

func (o UserArtifactManagePtrOutput) Elem() UserArtifactManageOutput {
	return o.ApplyT(func(v *UserArtifactManage) UserArtifactManage {
		if v != nil {
			return *v
		}
		var ret UserArtifactManage
		return ret
	}).(UserArtifactManageOutput)
}

// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
func (o UserArtifactManagePtrOutput) Install() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactManage) *string {
		if v == nil {
			return nil
		}
		return &v.Install
	}).(pulumi.StringPtrOutput)
}

// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
func (o UserArtifactManagePtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactManage) *string {
		if v == nil {
			return nil
		}
		return &v.Remove
	}).(pulumi.StringPtrOutput)
}

// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
func (o UserArtifactManagePtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactManage) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

type UserArtifactManageResponse struct {
	// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
	Install string `pulumi:"install"`
	// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
	Remove string `pulumi:"remove"`
	// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
	Update *string `pulumi:"update"`
}

type UserArtifactManageResponseOutput struct{ *pulumi.OutputState }

func (UserArtifactManageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactManageResponse)(nil)).Elem()
}

func (o UserArtifactManageResponseOutput) ToUserArtifactManageResponseOutput() UserArtifactManageResponseOutput {
	return o
}

func (o UserArtifactManageResponseOutput) ToUserArtifactManageResponseOutputWithContext(ctx context.Context) UserArtifactManageResponseOutput {
	return o
}

// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageResponseOutput) Install() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactManageResponse) string { return v.Install }).(pulumi.StringOutput)
}

// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageResponseOutput) Remove() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactManageResponse) string { return v.Remove }).(pulumi.StringOutput)
}

// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageResponseOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactManageResponse) *string { return v.Update }).(pulumi.StringPtrOutput)
}

type UserArtifactManageResponsePtrOutput struct{ *pulumi.OutputState }

func (UserArtifactManageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactManageResponse)(nil)).Elem()
}

func (o UserArtifactManageResponsePtrOutput) ToUserArtifactManageResponsePtrOutput() UserArtifactManageResponsePtrOutput {
	return o
}

func (o UserArtifactManageResponsePtrOutput) ToUserArtifactManageResponsePtrOutputWithContext(ctx context.Context) UserArtifactManageResponsePtrOutput {
	return o
}

func (o UserArtifactManageResponsePtrOutput) Elem() UserArtifactManageResponseOutput {
	return o.ApplyT(func(v *UserArtifactManageResponse) UserArtifactManageResponse {
		if v != nil {
			return *v
		}
		var ret UserArtifactManageResponse
		return ret
	}).(UserArtifactManageResponseOutput)
}

// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageResponsePtrOutput) Install() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactManageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Install
	}).(pulumi.StringPtrOutput)
}

// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageResponsePtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactManageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Remove
	}).(pulumi.StringPtrOutput)
}

// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
func (o UserArtifactManageResponsePtrOutput) Update() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactManageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Update
	}).(pulumi.StringPtrOutput)
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
type UserArtifactSettings struct {
	// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
	ConfigFileName *string `pulumi:"configFileName"`
	// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
	PackageFileName *string `pulumi:"packageFileName"`
	// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
	ScriptBehaviorAfterReboot *string `pulumi:"scriptBehaviorAfterReboot"`
}

// UserArtifactSettingsInput is an input type that accepts UserArtifactSettingsArgs and UserArtifactSettingsOutput values.
// You can construct a concrete instance of `UserArtifactSettingsInput` via:
//
//	UserArtifactSettingsArgs{...}
type UserArtifactSettingsInput interface {
	pulumi.Input

	ToUserArtifactSettingsOutput() UserArtifactSettingsOutput
	ToUserArtifactSettingsOutputWithContext(context.Context) UserArtifactSettingsOutput
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
type UserArtifactSettingsArgs struct {
	// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
	ConfigFileName pulumi.StringPtrInput `pulumi:"configFileName"`
	// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
	PackageFileName pulumi.StringPtrInput `pulumi:"packageFileName"`
	// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
	ScriptBehaviorAfterReboot pulumi.StringPtrInput `pulumi:"scriptBehaviorAfterReboot"`
}

func (UserArtifactSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSettings)(nil)).Elem()
}

func (i UserArtifactSettingsArgs) ToUserArtifactSettingsOutput() UserArtifactSettingsOutput {
	return i.ToUserArtifactSettingsOutputWithContext(context.Background())
}

func (i UserArtifactSettingsArgs) ToUserArtifactSettingsOutputWithContext(ctx context.Context) UserArtifactSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSettingsOutput)
}

func (i UserArtifactSettingsArgs) ToUserArtifactSettingsPtrOutput() UserArtifactSettingsPtrOutput {
	return i.ToUserArtifactSettingsPtrOutputWithContext(context.Background())
}

func (i UserArtifactSettingsArgs) ToUserArtifactSettingsPtrOutputWithContext(ctx context.Context) UserArtifactSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSettingsOutput).ToUserArtifactSettingsPtrOutputWithContext(ctx)
}

// UserArtifactSettingsPtrInput is an input type that accepts UserArtifactSettingsArgs, UserArtifactSettingsPtr and UserArtifactSettingsPtrOutput values.
// You can construct a concrete instance of `UserArtifactSettingsPtrInput` via:
//
//	        UserArtifactSettingsArgs{...}
//
//	or:
//
//	        nil
type UserArtifactSettingsPtrInput interface {
	pulumi.Input

	ToUserArtifactSettingsPtrOutput() UserArtifactSettingsPtrOutput
	ToUserArtifactSettingsPtrOutputWithContext(context.Context) UserArtifactSettingsPtrOutput
}

type userArtifactSettingsPtrType UserArtifactSettingsArgs

func UserArtifactSettingsPtr(v *UserArtifactSettingsArgs) UserArtifactSettingsPtrInput {
	return (*userArtifactSettingsPtrType)(v)
}

func (*userArtifactSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactSettings)(nil)).Elem()
}

func (i *userArtifactSettingsPtrType) ToUserArtifactSettingsPtrOutput() UserArtifactSettingsPtrOutput {
	return i.ToUserArtifactSettingsPtrOutputWithContext(context.Background())
}

func (i *userArtifactSettingsPtrType) ToUserArtifactSettingsPtrOutputWithContext(ctx context.Context) UserArtifactSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSettingsPtrOutput)
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
type UserArtifactSettingsOutput struct{ *pulumi.OutputState }

func (UserArtifactSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSettings)(nil)).Elem()
}

func (o UserArtifactSettingsOutput) ToUserArtifactSettingsOutput() UserArtifactSettingsOutput {
	return o
}

func (o UserArtifactSettingsOutput) ToUserArtifactSettingsOutputWithContext(ctx context.Context) UserArtifactSettingsOutput {
	return o
}

func (o UserArtifactSettingsOutput) ToUserArtifactSettingsPtrOutput() UserArtifactSettingsPtrOutput {
	return o.ToUserArtifactSettingsPtrOutputWithContext(context.Background())
}

func (o UserArtifactSettingsOutput) ToUserArtifactSettingsPtrOutputWithContext(ctx context.Context) UserArtifactSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserArtifactSettings) *UserArtifactSettings {
		return &v
	}).(UserArtifactSettingsPtrOutput)
}

// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
func (o UserArtifactSettingsOutput) ConfigFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSettings) *string { return v.ConfigFileName }).(pulumi.StringPtrOutput)
}

// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
func (o UserArtifactSettingsOutput) PackageFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSettings) *string { return v.PackageFileName }).(pulumi.StringPtrOutput)
}

// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
func (o UserArtifactSettingsOutput) ScriptBehaviorAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSettings) *string { return v.ScriptBehaviorAfterReboot }).(pulumi.StringPtrOutput)
}

type UserArtifactSettingsPtrOutput struct{ *pulumi.OutputState }

func (UserArtifactSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactSettings)(nil)).Elem()
}

func (o UserArtifactSettingsPtrOutput) ToUserArtifactSettingsPtrOutput() UserArtifactSettingsPtrOutput {
	return o
}

func (o UserArtifactSettingsPtrOutput) ToUserArtifactSettingsPtrOutputWithContext(ctx context.Context) UserArtifactSettingsPtrOutput {
	return o
}

func (o UserArtifactSettingsPtrOutput) Elem() UserArtifactSettingsOutput {
	return o.ApplyT(func(v *UserArtifactSettings) UserArtifactSettings {
		if v != nil {
			return *v
		}
		var ret UserArtifactSettings
		return ret
	}).(UserArtifactSettingsOutput)
}

// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
func (o UserArtifactSettingsPtrOutput) ConfigFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSettings) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFileName
	}).(pulumi.StringPtrOutput)
}

// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
func (o UserArtifactSettingsPtrOutput) PackageFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSettings) *string {
		if v == nil {
			return nil
		}
		return v.PackageFileName
	}).(pulumi.StringPtrOutput)
}

// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
func (o UserArtifactSettingsPtrOutput) ScriptBehaviorAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSettings) *string {
		if v == nil {
			return nil
		}
		return v.ScriptBehaviorAfterReboot
	}).(pulumi.StringPtrOutput)
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
type UserArtifactSettingsResponse struct {
	// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
	ConfigFileName *string `pulumi:"configFileName"`
	// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
	PackageFileName *string `pulumi:"packageFileName"`
	// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
	ScriptBehaviorAfterReboot *string `pulumi:"scriptBehaviorAfterReboot"`
}

// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
type UserArtifactSettingsResponseOutput struct{ *pulumi.OutputState }

func (UserArtifactSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSettingsResponse)(nil)).Elem()
}

func (o UserArtifactSettingsResponseOutput) ToUserArtifactSettingsResponseOutput() UserArtifactSettingsResponseOutput {
	return o
}

func (o UserArtifactSettingsResponseOutput) ToUserArtifactSettingsResponseOutputWithContext(ctx context.Context) UserArtifactSettingsResponseOutput {
	return o
}

// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
func (o UserArtifactSettingsResponseOutput) ConfigFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSettingsResponse) *string { return v.ConfigFileName }).(pulumi.StringPtrOutput)
}

// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
func (o UserArtifactSettingsResponseOutput) PackageFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSettingsResponse) *string { return v.PackageFileName }).(pulumi.StringPtrOutput)
}

// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
func (o UserArtifactSettingsResponseOutput) ScriptBehaviorAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSettingsResponse) *string { return v.ScriptBehaviorAfterReboot }).(pulumi.StringPtrOutput)
}

type UserArtifactSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UserArtifactSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserArtifactSettingsResponse)(nil)).Elem()
}

func (o UserArtifactSettingsResponsePtrOutput) ToUserArtifactSettingsResponsePtrOutput() UserArtifactSettingsResponsePtrOutput {
	return o
}

func (o UserArtifactSettingsResponsePtrOutput) ToUserArtifactSettingsResponsePtrOutputWithContext(ctx context.Context) UserArtifactSettingsResponsePtrOutput {
	return o
}

func (o UserArtifactSettingsResponsePtrOutput) Elem() UserArtifactSettingsResponseOutput {
	return o.ApplyT(func(v *UserArtifactSettingsResponse) UserArtifactSettingsResponse {
		if v != nil {
			return *v
		}
		var ret UserArtifactSettingsResponse
		return ret
	}).(UserArtifactSettingsResponseOutput)
}

// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
func (o UserArtifactSettingsResponsePtrOutput) ConfigFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConfigFileName
	}).(pulumi.StringPtrOutput)
}

// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
func (o UserArtifactSettingsResponsePtrOutput) PackageFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PackageFileName
	}).(pulumi.StringPtrOutput)
}

// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
func (o UserArtifactSettingsResponsePtrOutput) ScriptBehaviorAfterReboot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserArtifactSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptBehaviorAfterReboot
	}).(pulumi.StringPtrOutput)
}

// The source image from which the Image Version is going to be created.
type UserArtifactSource struct {
	// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
	DefaultConfigurationLink *string `pulumi:"defaultConfigurationLink"`
	// Required. The mediaLink of the artifact, must be a readable storage page blob.
	MediaLink string `pulumi:"mediaLink"`
}

// UserArtifactSourceInput is an input type that accepts UserArtifactSourceArgs and UserArtifactSourceOutput values.
// You can construct a concrete instance of `UserArtifactSourceInput` via:
//
//	UserArtifactSourceArgs{...}
type UserArtifactSourceInput interface {
	pulumi.Input

	ToUserArtifactSourceOutput() UserArtifactSourceOutput
	ToUserArtifactSourceOutputWithContext(context.Context) UserArtifactSourceOutput
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceArgs struct {
	// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
	DefaultConfigurationLink pulumi.StringPtrInput `pulumi:"defaultConfigurationLink"`
	// Required. The mediaLink of the artifact, must be a readable storage page blob.
	MediaLink pulumi.StringInput `pulumi:"mediaLink"`
}

func (UserArtifactSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSource)(nil)).Elem()
}

func (i UserArtifactSourceArgs) ToUserArtifactSourceOutput() UserArtifactSourceOutput {
	return i.ToUserArtifactSourceOutputWithContext(context.Background())
}

func (i UserArtifactSourceArgs) ToUserArtifactSourceOutputWithContext(ctx context.Context) UserArtifactSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArtifactSourceOutput)
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceOutput struct{ *pulumi.OutputState }

func (UserArtifactSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSource)(nil)).Elem()
}

func (o UserArtifactSourceOutput) ToUserArtifactSourceOutput() UserArtifactSourceOutput {
	return o
}

func (o UserArtifactSourceOutput) ToUserArtifactSourceOutputWithContext(ctx context.Context) UserArtifactSourceOutput {
	return o
}

// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
func (o UserArtifactSourceOutput) DefaultConfigurationLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSource) *string { return v.DefaultConfigurationLink }).(pulumi.StringPtrOutput)
}

// Required. The mediaLink of the artifact, must be a readable storage page blob.
func (o UserArtifactSourceOutput) MediaLink() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactSource) string { return v.MediaLink }).(pulumi.StringOutput)
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceResponse struct {
	// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
	DefaultConfigurationLink *string `pulumi:"defaultConfigurationLink"`
	// Required. The mediaLink of the artifact, must be a readable storage page blob.
	MediaLink string `pulumi:"mediaLink"`
}

// The source image from which the Image Version is going to be created.
type UserArtifactSourceResponseOutput struct{ *pulumi.OutputState }

func (UserArtifactSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserArtifactSourceResponse)(nil)).Elem()
}

func (o UserArtifactSourceResponseOutput) ToUserArtifactSourceResponseOutput() UserArtifactSourceResponseOutput {
	return o
}

func (o UserArtifactSourceResponseOutput) ToUserArtifactSourceResponseOutputWithContext(ctx context.Context) UserArtifactSourceResponseOutput {
	return o
}

// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
func (o UserArtifactSourceResponseOutput) DefaultConfigurationLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserArtifactSourceResponse) *string { return v.DefaultConfigurationLink }).(pulumi.StringPtrOutput)
}

// Required. The mediaLink of the artifact, must be a readable storage page blob.
func (o UserArtifactSourceResponseOutput) MediaLink() pulumi.StringOutput {
	return o.ApplyT(func(v UserArtifactSourceResponse) string { return v.MediaLink }).(pulumi.StringOutput)
}

type UserAssignedIdentitiesValueResponse struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type UserAssignedIdentitiesValueResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentitiesValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentitiesValueResponse)(nil)).Elem()
}

func (o UserAssignedIdentitiesValueResponseOutput) ToUserAssignedIdentitiesValueResponseOutput() UserAssignedIdentitiesValueResponseOutput {
	return o
}

func (o UserAssignedIdentitiesValueResponseOutput) ToUserAssignedIdentitiesValueResponseOutputWithContext(ctx context.Context) UserAssignedIdentitiesValueResponseOutput {
	return o
}

// The client id of user assigned identity.
func (o UserAssignedIdentitiesValueResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentitiesValueResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o UserAssignedIdentitiesValueResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentitiesValueResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentitiesValueResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentitiesValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentitiesValueResponse)(nil)).Elem()
}

func (o UserAssignedIdentitiesValueResponseMapOutput) ToUserAssignedIdentitiesValueResponseMapOutput() UserAssignedIdentitiesValueResponseMapOutput {
	return o
}

func (o UserAssignedIdentitiesValueResponseMapOutput) ToUserAssignedIdentitiesValueResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentitiesValueResponseMapOutput {
	return o
}

func (o UserAssignedIdentitiesValueResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentitiesValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentitiesValueResponse {
		return vs[0].(map[string]UserAssignedIdentitiesValueResponse)[vs[1].(string)]
	}).(UserAssignedIdentitiesValueResponseOutput)
}

// Specifies Reboot related Scheduled Event related configurations.
type UserInitiatedReboot struct {
	// Specifies Reboot Scheduled Event related configurations.
	AutomaticallyApprove *bool `pulumi:"automaticallyApprove"`
}

// UserInitiatedRebootInput is an input type that accepts UserInitiatedRebootArgs and UserInitiatedRebootOutput values.
// You can construct a concrete instance of `UserInitiatedRebootInput` via:
//
//	UserInitiatedRebootArgs{...}
type UserInitiatedRebootInput interface {
	pulumi.Input

	ToUserInitiatedRebootOutput() UserInitiatedRebootOutput
	ToUserInitiatedRebootOutputWithContext(context.Context) UserInitiatedRebootOutput
}

// Specifies Reboot related Scheduled Event related configurations.
type UserInitiatedRebootArgs struct {
	// Specifies Reboot Scheduled Event related configurations.
	AutomaticallyApprove pulumi.BoolPtrInput `pulumi:"automaticallyApprove"`
}

func (UserInitiatedRebootArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitiatedReboot)(nil)).Elem()
}

func (i UserInitiatedRebootArgs) ToUserInitiatedRebootOutput() UserInitiatedRebootOutput {
	return i.ToUserInitiatedRebootOutputWithContext(context.Background())
}

func (i UserInitiatedRebootArgs) ToUserInitiatedRebootOutputWithContext(ctx context.Context) UserInitiatedRebootOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitiatedRebootOutput)
}

func (i UserInitiatedRebootArgs) ToUserInitiatedRebootPtrOutput() UserInitiatedRebootPtrOutput {
	return i.ToUserInitiatedRebootPtrOutputWithContext(context.Background())
}

func (i UserInitiatedRebootArgs) ToUserInitiatedRebootPtrOutputWithContext(ctx context.Context) UserInitiatedRebootPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitiatedRebootOutput).ToUserInitiatedRebootPtrOutputWithContext(ctx)
}

// UserInitiatedRebootPtrInput is an input type that accepts UserInitiatedRebootArgs, UserInitiatedRebootPtr and UserInitiatedRebootPtrOutput values.
// You can construct a concrete instance of `UserInitiatedRebootPtrInput` via:
//
//	        UserInitiatedRebootArgs{...}
//
//	or:
//
//	        nil
type UserInitiatedRebootPtrInput interface {
	pulumi.Input

	ToUserInitiatedRebootPtrOutput() UserInitiatedRebootPtrOutput
	ToUserInitiatedRebootPtrOutputWithContext(context.Context) UserInitiatedRebootPtrOutput
}

type userInitiatedRebootPtrType UserInitiatedRebootArgs

func UserInitiatedRebootPtr(v *UserInitiatedRebootArgs) UserInitiatedRebootPtrInput {
	return (*userInitiatedRebootPtrType)(v)
}

func (*userInitiatedRebootPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitiatedReboot)(nil)).Elem()
}

func (i *userInitiatedRebootPtrType) ToUserInitiatedRebootPtrOutput() UserInitiatedRebootPtrOutput {
	return i.ToUserInitiatedRebootPtrOutputWithContext(context.Background())
}

func (i *userInitiatedRebootPtrType) ToUserInitiatedRebootPtrOutputWithContext(ctx context.Context) UserInitiatedRebootPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitiatedRebootPtrOutput)
}

// Specifies Reboot related Scheduled Event related configurations.
type UserInitiatedRebootOutput struct{ *pulumi.OutputState }

func (UserInitiatedRebootOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitiatedReboot)(nil)).Elem()
}

func (o UserInitiatedRebootOutput) ToUserInitiatedRebootOutput() UserInitiatedRebootOutput {
	return o
}

func (o UserInitiatedRebootOutput) ToUserInitiatedRebootOutputWithContext(ctx context.Context) UserInitiatedRebootOutput {
	return o
}

func (o UserInitiatedRebootOutput) ToUserInitiatedRebootPtrOutput() UserInitiatedRebootPtrOutput {
	return o.ToUserInitiatedRebootPtrOutputWithContext(context.Background())
}

func (o UserInitiatedRebootOutput) ToUserInitiatedRebootPtrOutputWithContext(ctx context.Context) UserInitiatedRebootPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInitiatedReboot) *UserInitiatedReboot {
		return &v
	}).(UserInitiatedRebootPtrOutput)
}

// Specifies Reboot Scheduled Event related configurations.
func (o UserInitiatedRebootOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserInitiatedReboot) *bool { return v.AutomaticallyApprove }).(pulumi.BoolPtrOutput)
}

type UserInitiatedRebootPtrOutput struct{ *pulumi.OutputState }

func (UserInitiatedRebootPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitiatedReboot)(nil)).Elem()
}

func (o UserInitiatedRebootPtrOutput) ToUserInitiatedRebootPtrOutput() UserInitiatedRebootPtrOutput {
	return o
}

func (o UserInitiatedRebootPtrOutput) ToUserInitiatedRebootPtrOutputWithContext(ctx context.Context) UserInitiatedRebootPtrOutput {
	return o
}

func (o UserInitiatedRebootPtrOutput) Elem() UserInitiatedRebootOutput {
	return o.ApplyT(func(v *UserInitiatedReboot) UserInitiatedReboot {
		if v != nil {
			return *v
		}
		var ret UserInitiatedReboot
		return ret
	}).(UserInitiatedRebootOutput)
}

// Specifies Reboot Scheduled Event related configurations.
func (o UserInitiatedRebootPtrOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserInitiatedReboot) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticallyApprove
	}).(pulumi.BoolPtrOutput)
}

// Specifies Reboot related Scheduled Event related configurations.
type UserInitiatedRebootResponse struct {
	// Specifies Reboot Scheduled Event related configurations.
	AutomaticallyApprove *bool `pulumi:"automaticallyApprove"`
}

// Specifies Reboot related Scheduled Event related configurations.
type UserInitiatedRebootResponseOutput struct{ *pulumi.OutputState }

func (UserInitiatedRebootResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitiatedRebootResponse)(nil)).Elem()
}

func (o UserInitiatedRebootResponseOutput) ToUserInitiatedRebootResponseOutput() UserInitiatedRebootResponseOutput {
	return o
}

func (o UserInitiatedRebootResponseOutput) ToUserInitiatedRebootResponseOutputWithContext(ctx context.Context) UserInitiatedRebootResponseOutput {
	return o
}

// Specifies Reboot Scheduled Event related configurations.
func (o UserInitiatedRebootResponseOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserInitiatedRebootResponse) *bool { return v.AutomaticallyApprove }).(pulumi.BoolPtrOutput)
}

type UserInitiatedRebootResponsePtrOutput struct{ *pulumi.OutputState }

func (UserInitiatedRebootResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitiatedRebootResponse)(nil)).Elem()
}

func (o UserInitiatedRebootResponsePtrOutput) ToUserInitiatedRebootResponsePtrOutput() UserInitiatedRebootResponsePtrOutput {
	return o
}

func (o UserInitiatedRebootResponsePtrOutput) ToUserInitiatedRebootResponsePtrOutputWithContext(ctx context.Context) UserInitiatedRebootResponsePtrOutput {
	return o
}

func (o UserInitiatedRebootResponsePtrOutput) Elem() UserInitiatedRebootResponseOutput {
	return o.ApplyT(func(v *UserInitiatedRebootResponse) UserInitiatedRebootResponse {
		if v != nil {
			return *v
		}
		var ret UserInitiatedRebootResponse
		return ret
	}).(UserInitiatedRebootResponseOutput)
}

// Specifies Reboot Scheduled Event related configurations.
func (o UserInitiatedRebootResponsePtrOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserInitiatedRebootResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticallyApprove
	}).(pulumi.BoolPtrOutput)
}

// Specifies Redeploy related Scheduled Event related configurations.
type UserInitiatedRedeploy struct {
	// Specifies Redeploy Scheduled Event related configurations.
	AutomaticallyApprove *bool `pulumi:"automaticallyApprove"`
}

// UserInitiatedRedeployInput is an input type that accepts UserInitiatedRedeployArgs and UserInitiatedRedeployOutput values.
// You can construct a concrete instance of `UserInitiatedRedeployInput` via:
//
//	UserInitiatedRedeployArgs{...}
type UserInitiatedRedeployInput interface {
	pulumi.Input

	ToUserInitiatedRedeployOutput() UserInitiatedRedeployOutput
	ToUserInitiatedRedeployOutputWithContext(context.Context) UserInitiatedRedeployOutput
}

// Specifies Redeploy related Scheduled Event related configurations.
type UserInitiatedRedeployArgs struct {
	// Specifies Redeploy Scheduled Event related configurations.
	AutomaticallyApprove pulumi.BoolPtrInput `pulumi:"automaticallyApprove"`
}

func (UserInitiatedRedeployArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitiatedRedeploy)(nil)).Elem()
}

func (i UserInitiatedRedeployArgs) ToUserInitiatedRedeployOutput() UserInitiatedRedeployOutput {
	return i.ToUserInitiatedRedeployOutputWithContext(context.Background())
}

func (i UserInitiatedRedeployArgs) ToUserInitiatedRedeployOutputWithContext(ctx context.Context) UserInitiatedRedeployOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitiatedRedeployOutput)
}

func (i UserInitiatedRedeployArgs) ToUserInitiatedRedeployPtrOutput() UserInitiatedRedeployPtrOutput {
	return i.ToUserInitiatedRedeployPtrOutputWithContext(context.Background())
}

func (i UserInitiatedRedeployArgs) ToUserInitiatedRedeployPtrOutputWithContext(ctx context.Context) UserInitiatedRedeployPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitiatedRedeployOutput).ToUserInitiatedRedeployPtrOutputWithContext(ctx)
}

// UserInitiatedRedeployPtrInput is an input type that accepts UserInitiatedRedeployArgs, UserInitiatedRedeployPtr and UserInitiatedRedeployPtrOutput values.
// You can construct a concrete instance of `UserInitiatedRedeployPtrInput` via:
//
//	        UserInitiatedRedeployArgs{...}
//
//	or:
//
//	        nil
type UserInitiatedRedeployPtrInput interface {
	pulumi.Input

	ToUserInitiatedRedeployPtrOutput() UserInitiatedRedeployPtrOutput
	ToUserInitiatedRedeployPtrOutputWithContext(context.Context) UserInitiatedRedeployPtrOutput
}

type userInitiatedRedeployPtrType UserInitiatedRedeployArgs

func UserInitiatedRedeployPtr(v *UserInitiatedRedeployArgs) UserInitiatedRedeployPtrInput {
	return (*userInitiatedRedeployPtrType)(v)
}

func (*userInitiatedRedeployPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitiatedRedeploy)(nil)).Elem()
}

func (i *userInitiatedRedeployPtrType) ToUserInitiatedRedeployPtrOutput() UserInitiatedRedeployPtrOutput {
	return i.ToUserInitiatedRedeployPtrOutputWithContext(context.Background())
}

func (i *userInitiatedRedeployPtrType) ToUserInitiatedRedeployPtrOutputWithContext(ctx context.Context) UserInitiatedRedeployPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInitiatedRedeployPtrOutput)
}

// Specifies Redeploy related Scheduled Event related configurations.
type UserInitiatedRedeployOutput struct{ *pulumi.OutputState }

func (UserInitiatedRedeployOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitiatedRedeploy)(nil)).Elem()
}

func (o UserInitiatedRedeployOutput) ToUserInitiatedRedeployOutput() UserInitiatedRedeployOutput {
	return o
}

func (o UserInitiatedRedeployOutput) ToUserInitiatedRedeployOutputWithContext(ctx context.Context) UserInitiatedRedeployOutput {
	return o
}

func (o UserInitiatedRedeployOutput) ToUserInitiatedRedeployPtrOutput() UserInitiatedRedeployPtrOutput {
	return o.ToUserInitiatedRedeployPtrOutputWithContext(context.Background())
}

func (o UserInitiatedRedeployOutput) ToUserInitiatedRedeployPtrOutputWithContext(ctx context.Context) UserInitiatedRedeployPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInitiatedRedeploy) *UserInitiatedRedeploy {
		return &v
	}).(UserInitiatedRedeployPtrOutput)
}

// Specifies Redeploy Scheduled Event related configurations.
func (o UserInitiatedRedeployOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserInitiatedRedeploy) *bool { return v.AutomaticallyApprove }).(pulumi.BoolPtrOutput)
}

type UserInitiatedRedeployPtrOutput struct{ *pulumi.OutputState }

func (UserInitiatedRedeployPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitiatedRedeploy)(nil)).Elem()
}

func (o UserInitiatedRedeployPtrOutput) ToUserInitiatedRedeployPtrOutput() UserInitiatedRedeployPtrOutput {
	return o
}

func (o UserInitiatedRedeployPtrOutput) ToUserInitiatedRedeployPtrOutputWithContext(ctx context.Context) UserInitiatedRedeployPtrOutput {
	return o
}

func (o UserInitiatedRedeployPtrOutput) Elem() UserInitiatedRedeployOutput {
	return o.ApplyT(func(v *UserInitiatedRedeploy) UserInitiatedRedeploy {
		if v != nil {
			return *v
		}
		var ret UserInitiatedRedeploy
		return ret
	}).(UserInitiatedRedeployOutput)
}

// Specifies Redeploy Scheduled Event related configurations.
func (o UserInitiatedRedeployPtrOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserInitiatedRedeploy) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticallyApprove
	}).(pulumi.BoolPtrOutput)
}

// Specifies Redeploy related Scheduled Event related configurations.
type UserInitiatedRedeployResponse struct {
	// Specifies Redeploy Scheduled Event related configurations.
	AutomaticallyApprove *bool `pulumi:"automaticallyApprove"`
}

// Specifies Redeploy related Scheduled Event related configurations.
type UserInitiatedRedeployResponseOutput struct{ *pulumi.OutputState }

func (UserInitiatedRedeployResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInitiatedRedeployResponse)(nil)).Elem()
}

func (o UserInitiatedRedeployResponseOutput) ToUserInitiatedRedeployResponseOutput() UserInitiatedRedeployResponseOutput {
	return o
}

func (o UserInitiatedRedeployResponseOutput) ToUserInitiatedRedeployResponseOutputWithContext(ctx context.Context) UserInitiatedRedeployResponseOutput {
	return o
}

// Specifies Redeploy Scheduled Event related configurations.
func (o UserInitiatedRedeployResponseOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserInitiatedRedeployResponse) *bool { return v.AutomaticallyApprove }).(pulumi.BoolPtrOutput)
}

type UserInitiatedRedeployResponsePtrOutput struct{ *pulumi.OutputState }

func (UserInitiatedRedeployResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInitiatedRedeployResponse)(nil)).Elem()
}

func (o UserInitiatedRedeployResponsePtrOutput) ToUserInitiatedRedeployResponsePtrOutput() UserInitiatedRedeployResponsePtrOutput {
	return o
}

func (o UserInitiatedRedeployResponsePtrOutput) ToUserInitiatedRedeployResponsePtrOutputWithContext(ctx context.Context) UserInitiatedRedeployResponsePtrOutput {
	return o
}

func (o UserInitiatedRedeployResponsePtrOutput) Elem() UserInitiatedRedeployResponseOutput {
	return o.ApplyT(func(v *UserInitiatedRedeployResponse) UserInitiatedRedeployResponse {
		if v != nil {
			return *v
		}
		var ret UserInitiatedRedeployResponse
		return ret
	}).(UserInitiatedRedeployResponseOutput)
}

// Specifies Redeploy Scheduled Event related configurations.
func (o UserInitiatedRedeployResponsePtrOutput) AutomaticallyApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserInitiatedRedeployResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticallyApprove
	}).(pulumi.BoolPtrOutput)
}

// Specifies the security profile settings for the managed disk. **Note:** It can only be set for Confidential VMs.
type VMDiskSecurityProfile struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
	SecurityEncryptionType *string `pulumi:"securityEncryptionType"`
}

// VMDiskSecurityProfileInput is an input type that accepts VMDiskSecurityProfileArgs and VMDiskSecurityProfileOutput values.
// You can construct a concrete instance of `VMDiskSecurityProfileInput` via:
//
//	VMDiskSecurityProfileArgs{...}
type VMDiskSecurityProfileInput interface {
	pulumi.Input

	ToVMDiskSecurityProfileOutput() VMDiskSecurityProfileOutput
	ToVMDiskSecurityProfileOutputWithContext(context.Context) VMDiskSecurityProfileOutput
}

// Specifies the security profile settings for the managed disk. **Note:** It can only be set for Confidential VMs.
type VMDiskSecurityProfileArgs struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
	SecurityEncryptionType pulumi.StringPtrInput `pulumi:"securityEncryptionType"`
}

func (VMDiskSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VMDiskSecurityProfile)(nil)).Elem()
}

func (i VMDiskSecurityProfileArgs) ToVMDiskSecurityProfileOutput() VMDiskSecurityProfileOutput {
	return i.ToVMDiskSecurityProfileOutputWithContext(context.Background())
}

func (i VMDiskSecurityProfileArgs) ToVMDiskSecurityProfileOutputWithContext(ctx context.Context) VMDiskSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMDiskSecurityProfileOutput)
}

func (i VMDiskSecurityProfileArgs) ToVMDiskSecurityProfilePtrOutput() VMDiskSecurityProfilePtrOutput {
	return i.ToVMDiskSecurityProfilePtrOutputWithContext(context.Background())
}

func (i VMDiskSecurityProfileArgs) ToVMDiskSecurityProfilePtrOutputWithContext(ctx context.Context) VMDiskSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMDiskSecurityProfileOutput).ToVMDiskSecurityProfilePtrOutputWithContext(ctx)
}

// VMDiskSecurityProfilePtrInput is an input type that accepts VMDiskSecurityProfileArgs, VMDiskSecurityProfilePtr and VMDiskSecurityProfilePtrOutput values.
// You can construct a concrete instance of `VMDiskSecurityProfilePtrInput` via:
//
//	        VMDiskSecurityProfileArgs{...}
//
//	or:
//
//	        nil
type VMDiskSecurityProfilePtrInput interface {
	pulumi.Input

	ToVMDiskSecurityProfilePtrOutput() VMDiskSecurityProfilePtrOutput
	ToVMDiskSecurityProfilePtrOutputWithContext(context.Context) VMDiskSecurityProfilePtrOutput
}

type vmdiskSecurityProfilePtrType VMDiskSecurityProfileArgs

func VMDiskSecurityProfilePtr(v *VMDiskSecurityProfileArgs) VMDiskSecurityProfilePtrInput {
	return (*vmdiskSecurityProfilePtrType)(v)
}

func (*vmdiskSecurityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VMDiskSecurityProfile)(nil)).Elem()
}

func (i *vmdiskSecurityProfilePtrType) ToVMDiskSecurityProfilePtrOutput() VMDiskSecurityProfilePtrOutput {
	return i.ToVMDiskSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *vmdiskSecurityProfilePtrType) ToVMDiskSecurityProfilePtrOutputWithContext(ctx context.Context) VMDiskSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMDiskSecurityProfilePtrOutput)
}

// Specifies the security profile settings for the managed disk. **Note:** It can only be set for Confidential VMs.
type VMDiskSecurityProfileOutput struct{ *pulumi.OutputState }

func (VMDiskSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMDiskSecurityProfile)(nil)).Elem()
}

func (o VMDiskSecurityProfileOutput) ToVMDiskSecurityProfileOutput() VMDiskSecurityProfileOutput {
	return o
}

func (o VMDiskSecurityProfileOutput) ToVMDiskSecurityProfileOutputWithContext(ctx context.Context) VMDiskSecurityProfileOutput {
	return o
}

func (o VMDiskSecurityProfileOutput) ToVMDiskSecurityProfilePtrOutput() VMDiskSecurityProfilePtrOutput {
	return o.ToVMDiskSecurityProfilePtrOutputWithContext(context.Background())
}

func (o VMDiskSecurityProfileOutput) ToVMDiskSecurityProfilePtrOutputWithContext(ctx context.Context) VMDiskSecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VMDiskSecurityProfile) *VMDiskSecurityProfile {
		return &v
	}).(VMDiskSecurityProfilePtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
func (o VMDiskSecurityProfileOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v VMDiskSecurityProfile) *DiskEncryptionSetParameters { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
func (o VMDiskSecurityProfileOutput) SecurityEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMDiskSecurityProfile) *string { return v.SecurityEncryptionType }).(pulumi.StringPtrOutput)
}

type VMDiskSecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (VMDiskSecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMDiskSecurityProfile)(nil)).Elem()
}

func (o VMDiskSecurityProfilePtrOutput) ToVMDiskSecurityProfilePtrOutput() VMDiskSecurityProfilePtrOutput {
	return o
}

func (o VMDiskSecurityProfilePtrOutput) ToVMDiskSecurityProfilePtrOutputWithContext(ctx context.Context) VMDiskSecurityProfilePtrOutput {
	return o
}

func (o VMDiskSecurityProfilePtrOutput) Elem() VMDiskSecurityProfileOutput {
	return o.ApplyT(func(v *VMDiskSecurityProfile) VMDiskSecurityProfile {
		if v != nil {
			return *v
		}
		var ret VMDiskSecurityProfile
		return ret
	}).(VMDiskSecurityProfileOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
func (o VMDiskSecurityProfilePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v *VMDiskSecurityProfile) *DiskEncryptionSetParameters {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
func (o VMDiskSecurityProfilePtrOutput) SecurityEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMDiskSecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecurityEncryptionType
	}).(pulumi.StringPtrOutput)
}

// Specifies the security profile settings for the managed disk. **Note:** It can only be set for Confidential VMs.
type VMDiskSecurityProfileResponse struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
	SecurityEncryptionType *string `pulumi:"securityEncryptionType"`
}

// Specifies the security profile settings for the managed disk. **Note:** It can only be set for Confidential VMs.
type VMDiskSecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (VMDiskSecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMDiskSecurityProfileResponse)(nil)).Elem()
}

func (o VMDiskSecurityProfileResponseOutput) ToVMDiskSecurityProfileResponseOutput() VMDiskSecurityProfileResponseOutput {
	return o
}

func (o VMDiskSecurityProfileResponseOutput) ToVMDiskSecurityProfileResponseOutputWithContext(ctx context.Context) VMDiskSecurityProfileResponseOutput {
	return o
}

// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
func (o VMDiskSecurityProfileResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v VMDiskSecurityProfileResponse) *DiskEncryptionSetParametersResponse { return v.DiskEncryptionSet }).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
func (o VMDiskSecurityProfileResponseOutput) SecurityEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMDiskSecurityProfileResponse) *string { return v.SecurityEncryptionType }).(pulumi.StringPtrOutput)
}

type VMDiskSecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VMDiskSecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMDiskSecurityProfileResponse)(nil)).Elem()
}

func (o VMDiskSecurityProfileResponsePtrOutput) ToVMDiskSecurityProfileResponsePtrOutput() VMDiskSecurityProfileResponsePtrOutput {
	return o
}

func (o VMDiskSecurityProfileResponsePtrOutput) ToVMDiskSecurityProfileResponsePtrOutputWithContext(ctx context.Context) VMDiskSecurityProfileResponsePtrOutput {
	return o
}

func (o VMDiskSecurityProfileResponsePtrOutput) Elem() VMDiskSecurityProfileResponseOutput {
	return o.ApplyT(func(v *VMDiskSecurityProfileResponse) VMDiskSecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret VMDiskSecurityProfileResponse
		return ret
	}).(VMDiskSecurityProfileResponseOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob.
func (o VMDiskSecurityProfileResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *VMDiskSecurityProfileResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only Confidential VMs.
func (o VMDiskSecurityProfileResponsePtrOutput) SecurityEncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMDiskSecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecurityEncryptionType
	}).(pulumi.StringPtrOutput)
}

// Specifies the required information to reference a compute gallery application version
type VMGalleryApplication struct {
	// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
	ConfigurationReference *string `pulumi:"configurationReference"`
	// If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// Optional, Specifies the order in which the packages have to be installed
	Order *int `pulumi:"order"`
	// Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
	PackageReferenceId string `pulumi:"packageReferenceId"`
	// Optional, Specifies a passthrough value for more generic context.
	Tags *string `pulumi:"tags"`
	// Optional, If true, any failure for any operation in the VmApplication will fail the deployment
	TreatFailureAsDeploymentFailure *bool `pulumi:"treatFailureAsDeploymentFailure"`
}

// VMGalleryApplicationInput is an input type that accepts VMGalleryApplicationArgs and VMGalleryApplicationOutput values.
// You can construct a concrete instance of `VMGalleryApplicationInput` via:
//
//	VMGalleryApplicationArgs{...}
type VMGalleryApplicationInput interface {
	pulumi.Input

	ToVMGalleryApplicationOutput() VMGalleryApplicationOutput
	ToVMGalleryApplicationOutputWithContext(context.Context) VMGalleryApplicationOutput
}

// Specifies the required information to reference a compute gallery application version
type VMGalleryApplicationArgs struct {
	// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
	ConfigurationReference pulumi.StringPtrInput `pulumi:"configurationReference"`
	// If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS
	EnableAutomaticUpgrade pulumi.BoolPtrInput `pulumi:"enableAutomaticUpgrade"`
	// Optional, Specifies the order in which the packages have to be installed
	Order pulumi.IntPtrInput `pulumi:"order"`
	// Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
	PackageReferenceId pulumi.StringInput `pulumi:"packageReferenceId"`
	// Optional, Specifies a passthrough value for more generic context.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
	// Optional, If true, any failure for any operation in the VmApplication will fail the deployment
	TreatFailureAsDeploymentFailure pulumi.BoolPtrInput `pulumi:"treatFailureAsDeploymentFailure"`
}

func (VMGalleryApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VMGalleryApplication)(nil)).Elem()
}

func (i VMGalleryApplicationArgs) ToVMGalleryApplicationOutput() VMGalleryApplicationOutput {
	return i.ToVMGalleryApplicationOutputWithContext(context.Background())
}

func (i VMGalleryApplicationArgs) ToVMGalleryApplicationOutputWithContext(ctx context.Context) VMGalleryApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMGalleryApplicationOutput)
}

// VMGalleryApplicationArrayInput is an input type that accepts VMGalleryApplicationArray and VMGalleryApplicationArrayOutput values.
// You can construct a concrete instance of `VMGalleryApplicationArrayInput` via:
//
//	VMGalleryApplicationArray{ VMGalleryApplicationArgs{...} }
type VMGalleryApplicationArrayInput interface {
	pulumi.Input

	ToVMGalleryApplicationArrayOutput() VMGalleryApplicationArrayOutput
	ToVMGalleryApplicationArrayOutputWithContext(context.Context) VMGalleryApplicationArrayOutput
}

type VMGalleryApplicationArray []VMGalleryApplicationInput

func (VMGalleryApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VMGalleryApplication)(nil)).Elem()
}

func (i VMGalleryApplicationArray) ToVMGalleryApplicationArrayOutput() VMGalleryApplicationArrayOutput {
	return i.ToVMGalleryApplicationArrayOutputWithContext(context.Background())
}

func (i VMGalleryApplicationArray) ToVMGalleryApplicationArrayOutputWithContext(ctx context.Context) VMGalleryApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMGalleryApplicationArrayOutput)
}

// Specifies the required information to reference a compute gallery application version
type VMGalleryApplicationOutput struct{ *pulumi.OutputState }

func (VMGalleryApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMGalleryApplication)(nil)).Elem()
}

func (o VMGalleryApplicationOutput) ToVMGalleryApplicationOutput() VMGalleryApplicationOutput {
	return o
}

func (o VMGalleryApplicationOutput) ToVMGalleryApplicationOutputWithContext(ctx context.Context) VMGalleryApplicationOutput {
	return o
}

// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
func (o VMGalleryApplicationOutput) ConfigurationReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMGalleryApplication) *string { return v.ConfigurationReference }).(pulumi.StringPtrOutput)
}

// If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS
func (o VMGalleryApplicationOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VMGalleryApplication) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// Optional, Specifies the order in which the packages have to be installed
func (o VMGalleryApplicationOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMGalleryApplication) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
func (o VMGalleryApplicationOutput) PackageReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v VMGalleryApplication) string { return v.PackageReferenceId }).(pulumi.StringOutput)
}

// Optional, Specifies a passthrough value for more generic context.
func (o VMGalleryApplicationOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMGalleryApplication) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

// Optional, If true, any failure for any operation in the VmApplication will fail the deployment
func (o VMGalleryApplicationOutput) TreatFailureAsDeploymentFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VMGalleryApplication) *bool { return v.TreatFailureAsDeploymentFailure }).(pulumi.BoolPtrOutput)
}

type VMGalleryApplicationArrayOutput struct{ *pulumi.OutputState }

func (VMGalleryApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VMGalleryApplication)(nil)).Elem()
}

func (o VMGalleryApplicationArrayOutput) ToVMGalleryApplicationArrayOutput() VMGalleryApplicationArrayOutput {
	return o
}

func (o VMGalleryApplicationArrayOutput) ToVMGalleryApplicationArrayOutputWithContext(ctx context.Context) VMGalleryApplicationArrayOutput {
	return o
}

func (o VMGalleryApplicationArrayOutput) Index(i pulumi.IntInput) VMGalleryApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VMGalleryApplication {
		return vs[0].([]VMGalleryApplication)[vs[1].(int)]
	}).(VMGalleryApplicationOutput)
}

// Specifies the required information to reference a compute gallery application version
type VMGalleryApplicationResponse struct {
	// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
	ConfigurationReference *string `pulumi:"configurationReference"`
	// If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// Optional, Specifies the order in which the packages have to be installed
	Order *int `pulumi:"order"`
	// Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
	PackageReferenceId string `pulumi:"packageReferenceId"`
	// Optional, Specifies a passthrough value for more generic context.
	Tags *string `pulumi:"tags"`
	// Optional, If true, any failure for any operation in the VmApplication will fail the deployment
	TreatFailureAsDeploymentFailure *bool `pulumi:"treatFailureAsDeploymentFailure"`
}

// Specifies the required information to reference a compute gallery application version
type VMGalleryApplicationResponseOutput struct{ *pulumi.OutputState }

func (VMGalleryApplicationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMGalleryApplicationResponse)(nil)).Elem()
}

func (o VMGalleryApplicationResponseOutput) ToVMGalleryApplicationResponseOutput() VMGalleryApplicationResponseOutput {
	return o
}

func (o VMGalleryApplicationResponseOutput) ToVMGalleryApplicationResponseOutputWithContext(ctx context.Context) VMGalleryApplicationResponseOutput {
	return o
}

// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
func (o VMGalleryApplicationResponseOutput) ConfigurationReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMGalleryApplicationResponse) *string { return v.ConfigurationReference }).(pulumi.StringPtrOutput)
}

// If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS
func (o VMGalleryApplicationResponseOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VMGalleryApplicationResponse) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// Optional, Specifies the order in which the packages have to be installed
func (o VMGalleryApplicationResponseOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMGalleryApplicationResponse) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
func (o VMGalleryApplicationResponseOutput) PackageReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v VMGalleryApplicationResponse) string { return v.PackageReferenceId }).(pulumi.StringOutput)
}

// Optional, Specifies a passthrough value for more generic context.
func (o VMGalleryApplicationResponseOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMGalleryApplicationResponse) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

// Optional, If true, any failure for any operation in the VmApplication will fail the deployment
func (o VMGalleryApplicationResponseOutput) TreatFailureAsDeploymentFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VMGalleryApplicationResponse) *bool { return v.TreatFailureAsDeploymentFailure }).(pulumi.BoolPtrOutput)
}

type VMGalleryApplicationResponseArrayOutput struct{ *pulumi.OutputState }

func (VMGalleryApplicationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VMGalleryApplicationResponse)(nil)).Elem()
}

func (o VMGalleryApplicationResponseArrayOutput) ToVMGalleryApplicationResponseArrayOutput() VMGalleryApplicationResponseArrayOutput {
	return o
}

func (o VMGalleryApplicationResponseArrayOutput) ToVMGalleryApplicationResponseArrayOutputWithContext(ctx context.Context) VMGalleryApplicationResponseArrayOutput {
	return o
}

func (o VMGalleryApplicationResponseArrayOutput) Index(i pulumi.IntInput) VMGalleryApplicationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VMGalleryApplicationResponse {
		return vs[0].([]VMGalleryApplicationResponse)[vs[1].(int)]
	}).(VMGalleryApplicationResponseOutput)
}

// Specifies VM Size Property settings on the virtual machine.
type VMSizeProperties struct {
	// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
	VCPUsAvailable *int `pulumi:"vCPUsAvailable"`
	// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
	VCPUsPerCore *int `pulumi:"vCPUsPerCore"`
}

// VMSizePropertiesInput is an input type that accepts VMSizePropertiesArgs and VMSizePropertiesOutput values.
// You can construct a concrete instance of `VMSizePropertiesInput` via:
//
//	VMSizePropertiesArgs{...}
type VMSizePropertiesInput interface {
	pulumi.Input

	ToVMSizePropertiesOutput() VMSizePropertiesOutput
	ToVMSizePropertiesOutputWithContext(context.Context) VMSizePropertiesOutput
}

// Specifies VM Size Property settings on the virtual machine.
type VMSizePropertiesArgs struct {
	// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
	VCPUsAvailable pulumi.IntPtrInput `pulumi:"vCPUsAvailable"`
	// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
	VCPUsPerCore pulumi.IntPtrInput `pulumi:"vCPUsPerCore"`
}

func (VMSizePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VMSizeProperties)(nil)).Elem()
}

func (i VMSizePropertiesArgs) ToVMSizePropertiesOutput() VMSizePropertiesOutput {
	return i.ToVMSizePropertiesOutputWithContext(context.Background())
}

func (i VMSizePropertiesArgs) ToVMSizePropertiesOutputWithContext(ctx context.Context) VMSizePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSizePropertiesOutput)
}

func (i VMSizePropertiesArgs) ToVMSizePropertiesPtrOutput() VMSizePropertiesPtrOutput {
	return i.ToVMSizePropertiesPtrOutputWithContext(context.Background())
}

func (i VMSizePropertiesArgs) ToVMSizePropertiesPtrOutputWithContext(ctx context.Context) VMSizePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSizePropertiesOutput).ToVMSizePropertiesPtrOutputWithContext(ctx)
}

// VMSizePropertiesPtrInput is an input type that accepts VMSizePropertiesArgs, VMSizePropertiesPtr and VMSizePropertiesPtrOutput values.
// You can construct a concrete instance of `VMSizePropertiesPtrInput` via:
//
//	        VMSizePropertiesArgs{...}
//
//	or:
//
//	        nil
type VMSizePropertiesPtrInput interface {
	pulumi.Input

	ToVMSizePropertiesPtrOutput() VMSizePropertiesPtrOutput
	ToVMSizePropertiesPtrOutputWithContext(context.Context) VMSizePropertiesPtrOutput
}

type vmsizePropertiesPtrType VMSizePropertiesArgs

func VMSizePropertiesPtr(v *VMSizePropertiesArgs) VMSizePropertiesPtrInput {
	return (*vmsizePropertiesPtrType)(v)
}

func (*vmsizePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSizeProperties)(nil)).Elem()
}

func (i *vmsizePropertiesPtrType) ToVMSizePropertiesPtrOutput() VMSizePropertiesPtrOutput {
	return i.ToVMSizePropertiesPtrOutputWithContext(context.Background())
}

func (i *vmsizePropertiesPtrType) ToVMSizePropertiesPtrOutputWithContext(ctx context.Context) VMSizePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSizePropertiesPtrOutput)
}

// Specifies VM Size Property settings on the virtual machine.
type VMSizePropertiesOutput struct{ *pulumi.OutputState }

func (VMSizePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMSizeProperties)(nil)).Elem()
}

func (o VMSizePropertiesOutput) ToVMSizePropertiesOutput() VMSizePropertiesOutput {
	return o
}

func (o VMSizePropertiesOutput) ToVMSizePropertiesOutputWithContext(ctx context.Context) VMSizePropertiesOutput {
	return o
}

func (o VMSizePropertiesOutput) ToVMSizePropertiesPtrOutput() VMSizePropertiesPtrOutput {
	return o.ToVMSizePropertiesPtrOutputWithContext(context.Background())
}

func (o VMSizePropertiesOutput) ToVMSizePropertiesPtrOutputWithContext(ctx context.Context) VMSizePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VMSizeProperties) *VMSizeProperties {
		return &v
	}).(VMSizePropertiesPtrOutput)
}

// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
func (o VMSizePropertiesOutput) VCPUsAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMSizeProperties) *int { return v.VCPUsAvailable }).(pulumi.IntPtrOutput)
}

// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
func (o VMSizePropertiesOutput) VCPUsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMSizeProperties) *int { return v.VCPUsPerCore }).(pulumi.IntPtrOutput)
}

type VMSizePropertiesPtrOutput struct{ *pulumi.OutputState }

func (VMSizePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSizeProperties)(nil)).Elem()
}

func (o VMSizePropertiesPtrOutput) ToVMSizePropertiesPtrOutput() VMSizePropertiesPtrOutput {
	return o
}

func (o VMSizePropertiesPtrOutput) ToVMSizePropertiesPtrOutputWithContext(ctx context.Context) VMSizePropertiesPtrOutput {
	return o
}

func (o VMSizePropertiesPtrOutput) Elem() VMSizePropertiesOutput {
	return o.ApplyT(func(v *VMSizeProperties) VMSizeProperties {
		if v != nil {
			return *v
		}
		var ret VMSizeProperties
		return ret
	}).(VMSizePropertiesOutput)
}

// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
func (o VMSizePropertiesPtrOutput) VCPUsAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMSizeProperties) *int {
		if v == nil {
			return nil
		}
		return v.VCPUsAvailable
	}).(pulumi.IntPtrOutput)
}

// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
func (o VMSizePropertiesPtrOutput) VCPUsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMSizeProperties) *int {
		if v == nil {
			return nil
		}
		return v.VCPUsPerCore
	}).(pulumi.IntPtrOutput)
}

// Specifies VM Size Property settings on the virtual machine.
type VMSizePropertiesResponse struct {
	// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
	VCPUsAvailable *int `pulumi:"vCPUsAvailable"`
	// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
	VCPUsPerCore *int `pulumi:"vCPUsPerCore"`
}

// Specifies VM Size Property settings on the virtual machine.
type VMSizePropertiesResponseOutput struct{ *pulumi.OutputState }

func (VMSizePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMSizePropertiesResponse)(nil)).Elem()
}

func (o VMSizePropertiesResponseOutput) ToVMSizePropertiesResponseOutput() VMSizePropertiesResponseOutput {
	return o
}

func (o VMSizePropertiesResponseOutput) ToVMSizePropertiesResponseOutputWithContext(ctx context.Context) VMSizePropertiesResponseOutput {
	return o
}

// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
func (o VMSizePropertiesResponseOutput) VCPUsAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMSizePropertiesResponse) *int { return v.VCPUsAvailable }).(pulumi.IntPtrOutput)
}

// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
func (o VMSizePropertiesResponseOutput) VCPUsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMSizePropertiesResponse) *int { return v.VCPUsPerCore }).(pulumi.IntPtrOutput)
}

type VMSizePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (VMSizePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSizePropertiesResponse)(nil)).Elem()
}

func (o VMSizePropertiesResponsePtrOutput) ToVMSizePropertiesResponsePtrOutput() VMSizePropertiesResponsePtrOutput {
	return o
}

func (o VMSizePropertiesResponsePtrOutput) ToVMSizePropertiesResponsePtrOutputWithContext(ctx context.Context) VMSizePropertiesResponsePtrOutput {
	return o
}

func (o VMSizePropertiesResponsePtrOutput) Elem() VMSizePropertiesResponseOutput {
	return o.ApplyT(func(v *VMSizePropertiesResponse) VMSizePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret VMSizePropertiesResponse
		return ret
	}).(VMSizePropertiesResponseOutput)
}

// Specifies the number of vCPUs available for the VM. When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list).
func (o VMSizePropertiesResponsePtrOutput) VCPUsAvailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMSizePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.VCPUsAvailable
	}).(pulumi.IntPtrOutput)
}

// Specifies the vCPU to physical core ratio. When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list). **Setting this property to 1 also means that hyper-threading is disabled.**
func (o VMSizePropertiesResponsePtrOutput) VCPUsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMSizePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.VCPUsPerCore
	}).(pulumi.IntPtrOutput)
}

// This is the validations profile of a Gallery Image Version.
type ValidationsProfileResponse struct {
	ExecutedValidations []ExecutedValidationResponse `pulumi:"executedValidations"`
	// This specifies the pub, offer, sku and version of the image version metadata
	PlatformAttributes []PlatformAttributeResponse `pulumi:"platformAttributes"`
	// The published time of the image version
	ValidationEtag *string `pulumi:"validationEtag"`
}

// This is the validations profile of a Gallery Image Version.
type ValidationsProfileResponseOutput struct{ *pulumi.OutputState }

func (ValidationsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationsProfileResponse)(nil)).Elem()
}

func (o ValidationsProfileResponseOutput) ToValidationsProfileResponseOutput() ValidationsProfileResponseOutput {
	return o
}

func (o ValidationsProfileResponseOutput) ToValidationsProfileResponseOutputWithContext(ctx context.Context) ValidationsProfileResponseOutput {
	return o
}

func (o ValidationsProfileResponseOutput) ExecutedValidations() ExecutedValidationResponseArrayOutput {
	return o.ApplyT(func(v ValidationsProfileResponse) []ExecutedValidationResponse { return v.ExecutedValidations }).(ExecutedValidationResponseArrayOutput)
}

// This specifies the pub, offer, sku and version of the image version metadata
func (o ValidationsProfileResponseOutput) PlatformAttributes() PlatformAttributeResponseArrayOutput {
	return o.ApplyT(func(v ValidationsProfileResponse) []PlatformAttributeResponse { return v.PlatformAttributes }).(PlatformAttributeResponseArrayOutput)
}

// The published time of the image version
func (o ValidationsProfileResponseOutput) ValidationEtag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationsProfileResponse) *string { return v.ValidationEtag }).(pulumi.StringPtrOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificate struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
	CertificateStore *string `pulumi:"certificateStore"`
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	CertificateUrl *string `pulumi:"certificateUrl"`
}

// VaultCertificateInput is an input type that accepts VaultCertificateArgs and VaultCertificateOutput values.
// You can construct a concrete instance of `VaultCertificateInput` via:
//
//	VaultCertificateArgs{...}
type VaultCertificateInput interface {
	pulumi.Input

	ToVaultCertificateOutput() VaultCertificateOutput
	ToVaultCertificateOutputWithContext(context.Context) VaultCertificateOutput
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateArgs struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
	CertificateStore pulumi.StringPtrInput `pulumi:"certificateStore"`
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	CertificateUrl pulumi.StringPtrInput `pulumi:"certificateUrl"`
}

func (VaultCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultCertificate)(nil)).Elem()
}

func (i VaultCertificateArgs) ToVaultCertificateOutput() VaultCertificateOutput {
	return i.ToVaultCertificateOutputWithContext(context.Background())
}

func (i VaultCertificateArgs) ToVaultCertificateOutputWithContext(ctx context.Context) VaultCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultCertificateOutput)
}

// VaultCertificateArrayInput is an input type that accepts VaultCertificateArray and VaultCertificateArrayOutput values.
// You can construct a concrete instance of `VaultCertificateArrayInput` via:
//
//	VaultCertificateArray{ VaultCertificateArgs{...} }
type VaultCertificateArrayInput interface {
	pulumi.Input

	ToVaultCertificateArrayOutput() VaultCertificateArrayOutput
	ToVaultCertificateArrayOutputWithContext(context.Context) VaultCertificateArrayOutput
}

type VaultCertificateArray []VaultCertificateInput

func (VaultCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultCertificate)(nil)).Elem()
}

func (i VaultCertificateArray) ToVaultCertificateArrayOutput() VaultCertificateArrayOutput {
	return i.ToVaultCertificateArrayOutputWithContext(context.Background())
}

func (i VaultCertificateArray) ToVaultCertificateArrayOutputWithContext(ctx context.Context) VaultCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultCertificateArrayOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateOutput struct{ *pulumi.OutputState }

func (VaultCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultCertificate)(nil)).Elem()
}

func (o VaultCertificateOutput) ToVaultCertificateOutput() VaultCertificateOutput {
	return o
}

func (o VaultCertificateOutput) ToVaultCertificateOutputWithContext(ctx context.Context) VaultCertificateOutput {
	return o
}

// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
func (o VaultCertificateOutput) CertificateStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultCertificate) *string { return v.CertificateStore }).(pulumi.StringPtrOutput)
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o VaultCertificateOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultCertificate) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

type VaultCertificateArrayOutput struct{ *pulumi.OutputState }

func (VaultCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultCertificate)(nil)).Elem()
}

func (o VaultCertificateArrayOutput) ToVaultCertificateArrayOutput() VaultCertificateArrayOutput {
	return o
}

func (o VaultCertificateArrayOutput) ToVaultCertificateArrayOutputWithContext(ctx context.Context) VaultCertificateArrayOutput {
	return o
}

func (o VaultCertificateArrayOutput) Index(i pulumi.IntInput) VaultCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultCertificate {
		return vs[0].([]VaultCertificate)[vs[1].(int)]
	}).(VaultCertificateOutput)
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateResponse struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
	CertificateStore *string `pulumi:"certificateStore"`
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	CertificateUrl *string `pulumi:"certificateUrl"`
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificateResponseOutput struct{ *pulumi.OutputState }

func (VaultCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultCertificateResponse)(nil)).Elem()
}

func (o VaultCertificateResponseOutput) ToVaultCertificateResponseOutput() VaultCertificateResponseOutput {
	return o
}

func (o VaultCertificateResponseOutput) ToVaultCertificateResponseOutputWithContext(ctx context.Context) VaultCertificateResponseOutput {
	return o
}

// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted.
func (o VaultCertificateResponseOutput) CertificateStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultCertificateResponse) *string { return v.CertificateStore }).(pulumi.StringPtrOutput)
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o VaultCertificateResponseOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultCertificateResponse) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

type VaultCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (VaultCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultCertificateResponse)(nil)).Elem()
}

func (o VaultCertificateResponseArrayOutput) ToVaultCertificateResponseArrayOutput() VaultCertificateResponseArrayOutput {
	return o
}

func (o VaultCertificateResponseArrayOutput) ToVaultCertificateResponseArrayOutputWithContext(ctx context.Context) VaultCertificateResponseArrayOutput {
	return o
}

func (o VaultCertificateResponseArrayOutput) Index(i pulumi.IntInput) VaultCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultCertificateResponse {
		return vs[0].([]VaultCertificateResponse)[vs[1].(int)]
	}).(VaultCertificateResponseOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroup struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []VaultCertificate `pulumi:"vaultCertificates"`
}

// VaultSecretGroupInput is an input type that accepts VaultSecretGroupArgs and VaultSecretGroupOutput values.
// You can construct a concrete instance of `VaultSecretGroupInput` via:
//
//	VaultSecretGroupArgs{...}
type VaultSecretGroupInput interface {
	pulumi.Input

	ToVaultSecretGroupOutput() VaultSecretGroupOutput
	ToVaultSecretGroupOutputWithContext(context.Context) VaultSecretGroupOutput
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupArgs struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault SubResourcePtrInput `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates VaultCertificateArrayInput `pulumi:"vaultCertificates"`
}

func (VaultSecretGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecretGroup)(nil)).Elem()
}

func (i VaultSecretGroupArgs) ToVaultSecretGroupOutput() VaultSecretGroupOutput {
	return i.ToVaultSecretGroupOutputWithContext(context.Background())
}

func (i VaultSecretGroupArgs) ToVaultSecretGroupOutputWithContext(ctx context.Context) VaultSecretGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretGroupOutput)
}

// VaultSecretGroupArrayInput is an input type that accepts VaultSecretGroupArray and VaultSecretGroupArrayOutput values.
// You can construct a concrete instance of `VaultSecretGroupArrayInput` via:
//
//	VaultSecretGroupArray{ VaultSecretGroupArgs{...} }
type VaultSecretGroupArrayInput interface {
	pulumi.Input

	ToVaultSecretGroupArrayOutput() VaultSecretGroupArrayOutput
	ToVaultSecretGroupArrayOutputWithContext(context.Context) VaultSecretGroupArrayOutput
}

type VaultSecretGroupArray []VaultSecretGroupInput

func (VaultSecretGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultSecretGroup)(nil)).Elem()
}

func (i VaultSecretGroupArray) ToVaultSecretGroupArrayOutput() VaultSecretGroupArrayOutput {
	return i.ToVaultSecretGroupArrayOutputWithContext(context.Background())
}

func (i VaultSecretGroupArray) ToVaultSecretGroupArrayOutputWithContext(ctx context.Context) VaultSecretGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultSecretGroupArrayOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupOutput struct{ *pulumi.OutputState }

func (VaultSecretGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecretGroup)(nil)).Elem()
}

func (o VaultSecretGroupOutput) ToVaultSecretGroupOutput() VaultSecretGroupOutput {
	return o
}

func (o VaultSecretGroupOutput) ToVaultSecretGroupOutputWithContext(ctx context.Context) VaultSecretGroupOutput {
	return o
}

// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
func (o VaultSecretGroupOutput) SourceVault() SubResourcePtrOutput {
	return o.ApplyT(func(v VaultSecretGroup) *SubResource { return v.SourceVault }).(SubResourcePtrOutput)
}

// The list of key vault references in SourceVault which contain certificates.
func (o VaultSecretGroupOutput) VaultCertificates() VaultCertificateArrayOutput {
	return o.ApplyT(func(v VaultSecretGroup) []VaultCertificate { return v.VaultCertificates }).(VaultCertificateArrayOutput)
}

type VaultSecretGroupArrayOutput struct{ *pulumi.OutputState }

func (VaultSecretGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultSecretGroup)(nil)).Elem()
}

func (o VaultSecretGroupArrayOutput) ToVaultSecretGroupArrayOutput() VaultSecretGroupArrayOutput {
	return o
}

func (o VaultSecretGroupArrayOutput) ToVaultSecretGroupArrayOutputWithContext(ctx context.Context) VaultSecretGroupArrayOutput {
	return o
}

func (o VaultSecretGroupArrayOutput) Index(i pulumi.IntInput) VaultSecretGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultSecretGroup {
		return vs[0].([]VaultSecretGroup)[vs[1].(int)]
	}).(VaultSecretGroupOutput)
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupResponse struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResourceResponse `pulumi:"sourceVault"`
	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []VaultCertificateResponse `pulumi:"vaultCertificates"`
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroupResponseOutput struct{ *pulumi.OutputState }

func (VaultSecretGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultSecretGroupResponse)(nil)).Elem()
}

func (o VaultSecretGroupResponseOutput) ToVaultSecretGroupResponseOutput() VaultSecretGroupResponseOutput {
	return o
}

func (o VaultSecretGroupResponseOutput) ToVaultSecretGroupResponseOutputWithContext(ctx context.Context) VaultSecretGroupResponseOutput {
	return o
}

// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
func (o VaultSecretGroupResponseOutput) SourceVault() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VaultSecretGroupResponse) *SubResourceResponse { return v.SourceVault }).(SubResourceResponsePtrOutput)
}

// The list of key vault references in SourceVault which contain certificates.
func (o VaultSecretGroupResponseOutput) VaultCertificates() VaultCertificateResponseArrayOutput {
	return o.ApplyT(func(v VaultSecretGroupResponse) []VaultCertificateResponse { return v.VaultCertificates }).(VaultCertificateResponseArrayOutput)
}

type VaultSecretGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (VaultSecretGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultSecretGroupResponse)(nil)).Elem()
}

func (o VaultSecretGroupResponseArrayOutput) ToVaultSecretGroupResponseArrayOutput() VaultSecretGroupResponseArrayOutput {
	return o
}

func (o VaultSecretGroupResponseArrayOutput) ToVaultSecretGroupResponseArrayOutputWithContext(ctx context.Context) VaultSecretGroupResponseArrayOutput {
	return o
}

func (o VaultSecretGroupResponseArrayOutput) Index(i pulumi.IntInput) VaultSecretGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultSecretGroupResponse {
		return vs[0].([]VaultSecretGroupResponse)[vs[1].(int)]
	}).(VaultSecretGroupResponseOutput)
}

// Describes the uri of a disk.
type VirtualHardDisk struct {
	// Specifies the virtual hard disk's uri.
	Uri *string `pulumi:"uri"`
}

// VirtualHardDiskInput is an input type that accepts VirtualHardDiskArgs and VirtualHardDiskOutput values.
// You can construct a concrete instance of `VirtualHardDiskInput` via:
//
//	VirtualHardDiskArgs{...}
type VirtualHardDiskInput interface {
	pulumi.Input

	ToVirtualHardDiskOutput() VirtualHardDiskOutput
	ToVirtualHardDiskOutputWithContext(context.Context) VirtualHardDiskOutput
}

// Describes the uri of a disk.
type VirtualHardDiskArgs struct {
	// Specifies the virtual hard disk's uri.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (VirtualHardDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHardDisk)(nil)).Elem()
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskOutput() VirtualHardDiskOutput {
	return i.ToVirtualHardDiskOutputWithContext(context.Background())
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskOutputWithContext(ctx context.Context) VirtualHardDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHardDiskOutput)
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput {
	return i.ToVirtualHardDiskPtrOutputWithContext(context.Background())
}

func (i VirtualHardDiskArgs) ToVirtualHardDiskPtrOutputWithContext(ctx context.Context) VirtualHardDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHardDiskOutput).ToVirtualHardDiskPtrOutputWithContext(ctx)
}

// VirtualHardDiskPtrInput is an input type that accepts VirtualHardDiskArgs, VirtualHardDiskPtr and VirtualHardDiskPtrOutput values.
// You can construct a concrete instance of `VirtualHardDiskPtrInput` via:
//
//	        VirtualHardDiskArgs{...}
//
//	or:
//
//	        nil
type VirtualHardDiskPtrInput interface {
	pulumi.Input

	ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput
	ToVirtualHardDiskPtrOutputWithContext(context.Context) VirtualHardDiskPtrOutput
}

type virtualHardDiskPtrType VirtualHardDiskArgs

func VirtualHardDiskPtr(v *VirtualHardDiskArgs) VirtualHardDiskPtrInput {
	return (*virtualHardDiskPtrType)(v)
}

func (*virtualHardDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHardDisk)(nil)).Elem()
}

func (i *virtualHardDiskPtrType) ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput {
	return i.ToVirtualHardDiskPtrOutputWithContext(context.Background())
}

func (i *virtualHardDiskPtrType) ToVirtualHardDiskPtrOutputWithContext(ctx context.Context) VirtualHardDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualHardDiskPtrOutput)
}

// Describes the uri of a disk.
type VirtualHardDiskOutput struct{ *pulumi.OutputState }

func (VirtualHardDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHardDisk)(nil)).Elem()
}

func (o VirtualHardDiskOutput) ToVirtualHardDiskOutput() VirtualHardDiskOutput {
	return o
}

func (o VirtualHardDiskOutput) ToVirtualHardDiskOutputWithContext(ctx context.Context) VirtualHardDiskOutput {
	return o
}

func (o VirtualHardDiskOutput) ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput {
	return o.ToVirtualHardDiskPtrOutputWithContext(context.Background())
}

func (o VirtualHardDiskOutput) ToVirtualHardDiskPtrOutputWithContext(ctx context.Context) VirtualHardDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualHardDisk) *VirtualHardDisk {
		return &v
	}).(VirtualHardDiskPtrOutput)
}

// Specifies the virtual hard disk's uri.
func (o VirtualHardDiskOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualHardDisk) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type VirtualHardDiskPtrOutput struct{ *pulumi.OutputState }

func (VirtualHardDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHardDisk)(nil)).Elem()
}

func (o VirtualHardDiskPtrOutput) ToVirtualHardDiskPtrOutput() VirtualHardDiskPtrOutput {
	return o
}

func (o VirtualHardDiskPtrOutput) ToVirtualHardDiskPtrOutputWithContext(ctx context.Context) VirtualHardDiskPtrOutput {
	return o
}

func (o VirtualHardDiskPtrOutput) Elem() VirtualHardDiskOutput {
	return o.ApplyT(func(v *VirtualHardDisk) VirtualHardDisk {
		if v != nil {
			return *v
		}
		var ret VirtualHardDisk
		return ret
	}).(VirtualHardDiskOutput)
}

// Specifies the virtual hard disk's uri.
func (o VirtualHardDiskPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualHardDisk) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Describes the uri of a disk.
type VirtualHardDiskResponse struct {
	// Specifies the virtual hard disk's uri.
	Uri *string `pulumi:"uri"`
}

// Describes the uri of a disk.
type VirtualHardDiskResponseOutput struct{ *pulumi.OutputState }

func (VirtualHardDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualHardDiskResponse)(nil)).Elem()
}

func (o VirtualHardDiskResponseOutput) ToVirtualHardDiskResponseOutput() VirtualHardDiskResponseOutput {
	return o
}

func (o VirtualHardDiskResponseOutput) ToVirtualHardDiskResponseOutputWithContext(ctx context.Context) VirtualHardDiskResponseOutput {
	return o
}

// Specifies the virtual hard disk's uri.
func (o VirtualHardDiskResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualHardDiskResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type VirtualHardDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualHardDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualHardDiskResponse)(nil)).Elem()
}

func (o VirtualHardDiskResponsePtrOutput) ToVirtualHardDiskResponsePtrOutput() VirtualHardDiskResponsePtrOutput {
	return o
}

func (o VirtualHardDiskResponsePtrOutput) ToVirtualHardDiskResponsePtrOutputWithContext(ctx context.Context) VirtualHardDiskResponsePtrOutput {
	return o
}

func (o VirtualHardDiskResponsePtrOutput) Elem() VirtualHardDiskResponseOutput {
	return o.ApplyT(func(v *VirtualHardDiskResponse) VirtualHardDiskResponse {
		if v != nil {
			return *v
		}
		var ret VirtualHardDiskResponse
		return ret
	}).(VirtualHardDiskResponseOutput)
}

// Specifies the virtual hard disk's uri.
func (o VirtualHardDiskResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualHardDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceViewResponse struct {
	// The virtual machine extension handler instance view.
	ExtensionHandlers []VirtualMachineExtensionHandlerInstanceViewResponse `pulumi:"extensionHandlers"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The VM Agent full version.
	VmAgentVersion *string `pulumi:"vmAgentVersion"`
}

// The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineAgentInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineAgentInstanceViewResponseOutput) ToVirtualMachineAgentInstanceViewResponseOutput() VirtualMachineAgentInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponseOutput) ToVirtualMachineAgentInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineAgentInstanceViewResponseOutput {
	return o
}

// The virtual machine extension handler instance view.
func (o VirtualMachineAgentInstanceViewResponseOutput) ExtensionHandlers() VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) []VirtualMachineExtensionHandlerInstanceViewResponse {
		return v.ExtensionHandlers
	}).(VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineAgentInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent full version.
func (o VirtualMachineAgentInstanceViewResponseOutput) VmAgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineAgentInstanceViewResponse) *string { return v.VmAgentVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineAgentInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineAgentInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineAgentInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineAgentInstanceViewResponsePtrOutput) ToVirtualMachineAgentInstanceViewResponsePtrOutput() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponsePtrOutput) ToVirtualMachineAgentInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineAgentInstanceViewResponsePtrOutput) Elem() VirtualMachineAgentInstanceViewResponseOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) VirtualMachineAgentInstanceViewResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineAgentInstanceViewResponse
		return ret
	}).(VirtualMachineAgentInstanceViewResponseOutput)
}

// The virtual machine extension handler instance view.
func (o VirtualMachineAgentInstanceViewResponsePtrOutput) ExtensionHandlers() VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) []VirtualMachineExtensionHandlerInstanceViewResponse {
		if v == nil {
			return nil
		}
		return v.ExtensionHandlers
	}).(VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineAgentInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent full version.
func (o VirtualMachineAgentInstanceViewResponsePtrOutput) VmAgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineAgentInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmAgentVersion
	}).(pulumi.StringPtrOutput)
}

// The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceViewResponse struct {
	// The extension handler status.
	Status *InstanceViewStatusResponse `pulumi:"status"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionHandlerInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionHandlerInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseOutput() VirtualMachineExtensionHandlerInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineExtensionHandlerInstanceViewResponseOutput {
	return o
}

// The extension handler status.
func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) Status() InstanceViewStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionHandlerInstanceViewResponse) *InstanceViewStatusResponse {
		return v.Status
	}).(InstanceViewStatusResponsePtrOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionHandlerInstanceViewResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionHandlerInstanceViewResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionHandlerInstanceViewResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineExtensionHandlerInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseArrayOutput() VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) ToVirtualMachineExtensionHandlerInstanceViewResponseArrayOutputWithContext(ctx context.Context) VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineExtensionHandlerInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineExtensionHandlerInstanceViewResponse {
		return vs[0].([]VirtualMachineExtensionHandlerInstanceViewResponse)[vs[1].(int)]
	}).(VirtualMachineExtensionHandlerInstanceViewResponseOutput)
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceView struct {
	// The virtual machine extension name.
	Name *string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatus `pulumi:"statuses"`
	// The resource status information.
	Substatuses []InstanceViewStatus `pulumi:"substatuses"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// VirtualMachineExtensionInstanceViewInput is an input type that accepts VirtualMachineExtensionInstanceViewArgs and VirtualMachineExtensionInstanceViewOutput values.
// You can construct a concrete instance of `VirtualMachineExtensionInstanceViewInput` via:
//
//	VirtualMachineExtensionInstanceViewArgs{...}
type VirtualMachineExtensionInstanceViewInput interface {
	pulumi.Input

	ToVirtualMachineExtensionInstanceViewOutput() VirtualMachineExtensionInstanceViewOutput
	ToVirtualMachineExtensionInstanceViewOutputWithContext(context.Context) VirtualMachineExtensionInstanceViewOutput
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewArgs struct {
	// The virtual machine extension name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource status information.
	Statuses InstanceViewStatusArrayInput `pulumi:"statuses"`
	// The resource status information.
	Substatuses InstanceViewStatusArrayInput `pulumi:"substatuses"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion pulumi.StringPtrInput `pulumi:"typeHandlerVersion"`
}

func (VirtualMachineExtensionInstanceViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionInstanceView)(nil)).Elem()
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewOutput() VirtualMachineExtensionInstanceViewOutput {
	return i.ToVirtualMachineExtensionInstanceViewOutputWithContext(context.Background())
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineExtensionInstanceViewOutput)
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput {
	return i.ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Background())
}

func (i VirtualMachineExtensionInstanceViewArgs) ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineExtensionInstanceViewOutput).ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx)
}

// VirtualMachineExtensionInstanceViewPtrInput is an input type that accepts VirtualMachineExtensionInstanceViewArgs, VirtualMachineExtensionInstanceViewPtr and VirtualMachineExtensionInstanceViewPtrOutput values.
// You can construct a concrete instance of `VirtualMachineExtensionInstanceViewPtrInput` via:
//
//	        VirtualMachineExtensionInstanceViewArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineExtensionInstanceViewPtrInput interface {
	pulumi.Input

	ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput
	ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Context) VirtualMachineExtensionInstanceViewPtrOutput
}

type virtualMachineExtensionInstanceViewPtrType VirtualMachineExtensionInstanceViewArgs

func VirtualMachineExtensionInstanceViewPtr(v *VirtualMachineExtensionInstanceViewArgs) VirtualMachineExtensionInstanceViewPtrInput {
	return (*virtualMachineExtensionInstanceViewPtrType)(v)
}

func (*virtualMachineExtensionInstanceViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineExtensionInstanceView)(nil)).Elem()
}

func (i *virtualMachineExtensionInstanceViewPtrType) ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput {
	return i.ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Background())
}

func (i *virtualMachineExtensionInstanceViewPtrType) ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineExtensionInstanceViewPtrOutput)
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionInstanceView)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewOutput) ToVirtualMachineExtensionInstanceViewOutput() VirtualMachineExtensionInstanceViewOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewOutput) ToVirtualMachineExtensionInstanceViewOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewOutput) ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput {
	return o.ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(context.Background())
}

func (o VirtualMachineExtensionInstanceViewOutput) ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineExtensionInstanceView) *VirtualMachineExtensionInstanceView {
		return &v
	}).(VirtualMachineExtensionInstanceViewPtrOutput)
}

// The virtual machine extension name.
func (o VirtualMachineExtensionInstanceViewOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceView) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewOutput) Statuses() InstanceViewStatusArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceView) []InstanceViewStatus { return v.Statuses }).(InstanceViewStatusArrayOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewOutput) Substatuses() InstanceViewStatusArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceView) []InstanceViewStatus { return v.Substatuses }).(InstanceViewStatusArrayOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionInstanceViewOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceView) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionInstanceViewOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceView) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionInstanceViewPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineExtensionInstanceView)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewPtrOutput) ToVirtualMachineExtensionInstanceViewPtrOutput() VirtualMachineExtensionInstanceViewPtrOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewPtrOutput) ToVirtualMachineExtensionInstanceViewPtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewPtrOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewPtrOutput) Elem() VirtualMachineExtensionInstanceViewOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceView) VirtualMachineExtensionInstanceView {
		if v != nil {
			return *v
		}
		var ret VirtualMachineExtensionInstanceView
		return ret
	}).(VirtualMachineExtensionInstanceViewOutput)
}

// The virtual machine extension name.
func (o VirtualMachineExtensionInstanceViewPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceView) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewPtrOutput) Statuses() InstanceViewStatusArrayOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceView) []InstanceViewStatus {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusArrayOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewPtrOutput) Substatuses() InstanceViewStatusArrayOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceView) []InstanceViewStatus {
		if v == nil {
			return nil
		}
		return v.Substatuses
	}).(InstanceViewStatusArrayOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionInstanceViewPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceView) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionInstanceViewPtrOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceView) *string {
		if v == nil {
			return nil
		}
		return v.TypeHandlerVersion
	}).(pulumi.StringPtrOutput)
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewResponse struct {
	// The virtual machine extension name.
	Name *string `pulumi:"name"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The resource status information.
	Substatuses []InstanceViewStatusResponse `pulumi:"substatuses"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewResponseOutput) ToVirtualMachineExtensionInstanceViewResponseOutput() VirtualMachineExtensionInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseOutput) ToVirtualMachineExtensionInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponseOutput {
	return o
}

// The virtual machine extension name.
func (o VirtualMachineExtensionInstanceViewResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponseOutput) Substatuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse { return v.Substatuses }).(InstanceViewStatusResponseArrayOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionInstanceViewResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionInstanceViewResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionInstanceViewResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionInstanceViewResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineExtensionInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) ToVirtualMachineExtensionInstanceViewResponsePtrOutput() VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) ToVirtualMachineExtensionInstanceViewResponsePtrOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Elem() VirtualMachineExtensionInstanceViewResponseOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) VirtualMachineExtensionInstanceViewResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineExtensionInstanceViewResponse
		return ret
	}).(VirtualMachineExtensionInstanceViewResponseOutput)
}

// The virtual machine extension name.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The resource status information.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Substatuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.Substatuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionInstanceViewResponsePtrOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineExtensionInstanceViewResponse) *string {
		if v == nil {
			return nil
		}
		return v.TypeHandlerVersion
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionInstanceViewResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionInstanceViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineExtensionInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionInstanceViewResponseArrayOutput) ToVirtualMachineExtensionInstanceViewResponseArrayOutput() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseArrayOutput) ToVirtualMachineExtensionInstanceViewResponseArrayOutputWithContext(ctx context.Context) VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionInstanceViewResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineExtensionInstanceViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineExtensionInstanceViewResponse {
		return vs[0].([]VirtualMachineExtensionInstanceViewResponse)[vs[1].(int)]
	}).(VirtualMachineExtensionInstanceViewResponseOutput)
}

// Describes a Virtual Machine Extension.
type VirtualMachineExtensionResponse struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// How the extension handler should be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The virtual machine extension instance view.
	InstanceView *VirtualMachineExtensionInstanceViewResponse `pulumi:"instanceView"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault *KeyVaultSecretReferenceResponse `pulumi:"protectedSettingsFromKeyVault"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string `pulumi:"provisionAfterExtensions"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool `pulumi:"suppressFailures"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// Describes a Virtual Machine Extension.
type VirtualMachineExtensionResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionResponseOutput) ToVirtualMachineExtensionResponseOutput() VirtualMachineExtensionResponseOutput {
	return o
}

func (o VirtualMachineExtensionResponseOutput) ToVirtualMachineExtensionResponseOutputWithContext(ctx context.Context) VirtualMachineExtensionResponseOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o VirtualMachineExtensionResponseOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
func (o VirtualMachineExtensionResponseOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// How the extension handler should be forced to update even if the extension configuration has not changed.
func (o VirtualMachineExtensionResponseOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o VirtualMachineExtensionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The virtual machine extension instance view.
func (o VirtualMachineExtensionResponseOutput) InstanceView() VirtualMachineExtensionInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *VirtualMachineExtensionInstanceViewResponse {
		return v.InstanceView
	}).(VirtualMachineExtensionInstanceViewResponsePtrOutput)
}

// The geo-location where the resource lives
func (o VirtualMachineExtensionResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o VirtualMachineExtensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o VirtualMachineExtensionResponseOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// The extensions protected settings that are passed by reference, and consumed from key vault
func (o VirtualMachineExtensionResponseOutput) ProtectedSettingsFromKeyVault() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *KeyVaultSecretReferenceResponse {
		return v.ProtectedSettingsFromKeyVault
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Collection of extension names after which this extension needs to be provisioned.
func (o VirtualMachineExtensionResponseOutput) ProvisionAfterExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) []string { return v.ProvisionAfterExtensions }).(pulumi.StringArrayOutput)
}

// The provisioning state, which only appears in the response.
func (o VirtualMachineExtensionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o VirtualMachineExtensionResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o VirtualMachineExtensionResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
func (o VirtualMachineExtensionResponseOutput) SuppressFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *bool { return v.SuppressFailures }).(pulumi.BoolPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o VirtualMachineExtensionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o VirtualMachineExtensionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VirtualMachineExtensionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineExtensionResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineExtensionResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineExtensionResponseArrayOutput) ToVirtualMachineExtensionResponseArrayOutput() VirtualMachineExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionResponseArrayOutput) ToVirtualMachineExtensionResponseArrayOutputWithContext(ctx context.Context) VirtualMachineExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineExtensionResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineExtensionResponse {
		return vs[0].([]VirtualMachineExtensionResponse)[vs[1].(int)]
	}).(VirtualMachineExtensionResponseOutput)
}

// The health status of the VM.
type VirtualMachineHealthStatusResponse struct {
	// The health status information for the VM.
	Status InstanceViewStatusResponse `pulumi:"status"`
}

// The health status of the VM.
type VirtualMachineHealthStatusResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineHealthStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineHealthStatusResponse)(nil)).Elem()
}

func (o VirtualMachineHealthStatusResponseOutput) ToVirtualMachineHealthStatusResponseOutput() VirtualMachineHealthStatusResponseOutput {
	return o
}

func (o VirtualMachineHealthStatusResponseOutput) ToVirtualMachineHealthStatusResponseOutputWithContext(ctx context.Context) VirtualMachineHealthStatusResponseOutput {
	return o
}

// The health status information for the VM.
func (o VirtualMachineHealthStatusResponseOutput) Status() InstanceViewStatusResponseOutput {
	return o.ApplyT(func(v VirtualMachineHealthStatusResponse) InstanceViewStatusResponse { return v.Status }).(InstanceViewStatusResponseOutput)
}

// Identity for the virtual machine.
type VirtualMachineIdentity struct {
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// VirtualMachineIdentityInput is an input type that accepts VirtualMachineIdentityArgs and VirtualMachineIdentityOutput values.
// You can construct a concrete instance of `VirtualMachineIdentityInput` via:
//
//	VirtualMachineIdentityArgs{...}
type VirtualMachineIdentityInput interface {
	pulumi.Input

	ToVirtualMachineIdentityOutput() VirtualMachineIdentityOutput
	ToVirtualMachineIdentityOutputWithContext(context.Context) VirtualMachineIdentityOutput
}

// Identity for the virtual machine.
type VirtualMachineIdentityArgs struct {
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (VirtualMachineIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIdentity)(nil)).Elem()
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityOutput() VirtualMachineIdentityOutput {
	return i.ToVirtualMachineIdentityOutputWithContext(context.Background())
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityOutputWithContext(ctx context.Context) VirtualMachineIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIdentityOutput)
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput {
	return i.ToVirtualMachineIdentityPtrOutputWithContext(context.Background())
}

func (i VirtualMachineIdentityArgs) ToVirtualMachineIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIdentityOutput).ToVirtualMachineIdentityPtrOutputWithContext(ctx)
}

// VirtualMachineIdentityPtrInput is an input type that accepts VirtualMachineIdentityArgs, VirtualMachineIdentityPtr and VirtualMachineIdentityPtrOutput values.
// You can construct a concrete instance of `VirtualMachineIdentityPtrInput` via:
//
//	        VirtualMachineIdentityArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineIdentityPtrInput interface {
	pulumi.Input

	ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput
	ToVirtualMachineIdentityPtrOutputWithContext(context.Context) VirtualMachineIdentityPtrOutput
}

type virtualMachineIdentityPtrType VirtualMachineIdentityArgs

func VirtualMachineIdentityPtr(v *VirtualMachineIdentityArgs) VirtualMachineIdentityPtrInput {
	return (*virtualMachineIdentityPtrType)(v)
}

func (*virtualMachineIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineIdentity)(nil)).Elem()
}

func (i *virtualMachineIdentityPtrType) ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput {
	return i.ToVirtualMachineIdentityPtrOutputWithContext(context.Background())
}

func (i *virtualMachineIdentityPtrType) ToVirtualMachineIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIdentityPtrOutput)
}

// Identity for the virtual machine.
type VirtualMachineIdentityOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIdentity)(nil)).Elem()
}

func (o VirtualMachineIdentityOutput) ToVirtualMachineIdentityOutput() VirtualMachineIdentityOutput {
	return o
}

func (o VirtualMachineIdentityOutput) ToVirtualMachineIdentityOutputWithContext(ctx context.Context) VirtualMachineIdentityOutput {
	return o
}

func (o VirtualMachineIdentityOutput) ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput {
	return o.ToVirtualMachineIdentityPtrOutputWithContext(context.Background())
}

func (o VirtualMachineIdentityOutput) ToVirtualMachineIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineIdentity) *VirtualMachineIdentity {
		return &v
	}).(VirtualMachineIdentityPtrOutput)
}

// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o VirtualMachineIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v VirtualMachineIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type VirtualMachineIdentityPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineIdentity)(nil)).Elem()
}

func (o VirtualMachineIdentityPtrOutput) ToVirtualMachineIdentityPtrOutput() VirtualMachineIdentityPtrOutput {
	return o
}

func (o VirtualMachineIdentityPtrOutput) ToVirtualMachineIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineIdentityPtrOutput {
	return o
}

func (o VirtualMachineIdentityPtrOutput) Elem() VirtualMachineIdentityOutput {
	return o.ApplyT(func(v *VirtualMachineIdentity) VirtualMachineIdentity {
		if v != nil {
			return *v
		}
		var ret VirtualMachineIdentity
		return ret
	}).(VirtualMachineIdentityOutput)
}

// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o VirtualMachineIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the virtual machine.
type VirtualMachineIdentityResponse struct {
	// The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentitiesValueResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the virtual machine.
type VirtualMachineIdentityResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineIdentityResponseOutput) ToVirtualMachineIdentityResponseOutput() VirtualMachineIdentityResponseOutput {
	return o
}

func (o VirtualMachineIdentityResponseOutput) ToVirtualMachineIdentityResponseOutputWithContext(ctx context.Context) VirtualMachineIdentityResponseOutput {
	return o
}

// The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o VirtualMachineIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v VirtualMachineIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

type VirtualMachineIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineIdentityResponsePtrOutput) ToVirtualMachineIdentityResponsePtrOutput() VirtualMachineIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineIdentityResponsePtrOutput) ToVirtualMachineIdentityResponsePtrOutputWithContext(ctx context.Context) VirtualMachineIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineIdentityResponsePtrOutput) Elem() VirtualMachineIdentityResponseOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) VirtualMachineIdentityResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineIdentityResponse
		return ret
	}).(VirtualMachineIdentityResponseOutput)
}

// The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
func (o VirtualMachineIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
func (o VirtualMachineIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v *VirtualMachineIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

// The instance view of a virtual machine.
type VirtualMachineInstanceViewResponse struct {
	// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
	AssignedHost string `pulumi:"assignedHost"`
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceViewResponse `pulumi:"bootDiagnostics"`
	// The computer name assigned to the virtual machine.
	ComputerName *string `pulumi:"computerName"`
	// The virtual machine disk information.
	Disks []DiskInstanceViewResponse `pulumi:"disks"`
	// The extensions information.
	Extensions []VirtualMachineExtensionInstanceViewResponse `pulumi:"extensions"`
	// Specifies the HyperVGeneration Type associated with a resource
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// [Preview Feature] Specifies whether the VM is currently in or out of the Standby Pool.
	IsVMInStandbyPool bool `pulumi:"isVMInStandbyPool"`
	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatusResponse `pulumi:"maintenanceRedeployStatus"`
	// The Operating System running on the virtual machine.
	OsName *string `pulumi:"osName"`
	// The version of Operating System running on the virtual machine.
	OsVersion *string `pulumi:"osVersion"`
	// [Preview Feature] The status of virtual machine patch operations.
	PatchStatus *VirtualMachinePatchStatusResponse `pulumi:"patchStatus"`
	// Specifies the fault domain of the virtual machine.
	PlatformFaultDomain *int `pulumi:"platformFaultDomain"`
	// Specifies the update domain of the virtual machine.
	PlatformUpdateDomain *int `pulumi:"platformUpdateDomain"`
	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `pulumi:"rdpThumbPrint"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The VM Agent running on the virtual machine.
	VmAgent *VirtualMachineAgentInstanceViewResponse `pulumi:"vmAgent"`
	// The health status for the VM.
	VmHealth VirtualMachineHealthStatusResponse `pulumi:"vmHealth"`
}

// The instance view of a virtual machine.
type VirtualMachineInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineInstanceViewResponseOutput) ToVirtualMachineInstanceViewResponseOutput() VirtualMachineInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineInstanceViewResponseOutput) ToVirtualMachineInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineInstanceViewResponseOutput {
	return o
}

// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
func (o VirtualMachineInstanceViewResponseOutput) AssignedHost() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) string { return v.AssignedHost }).(pulumi.StringOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o VirtualMachineInstanceViewResponseOutput) BootDiagnostics() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		return v.BootDiagnostics
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// The computer name assigned to the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// The virtual machine disk information.
func (o VirtualMachineInstanceViewResponseOutput) Disks() DiskInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) []DiskInstanceViewResponse { return v.Disks }).(DiskInstanceViewResponseArrayOutput)
}

// The extensions information.
func (o VirtualMachineInstanceViewResponseOutput) Extensions() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) []VirtualMachineExtensionInstanceViewResponse {
		return v.Extensions
	}).(VirtualMachineExtensionInstanceViewResponseArrayOutput)
}

// Specifies the HyperVGeneration Type associated with a resource
func (o VirtualMachineInstanceViewResponseOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// [Preview Feature] Specifies whether the VM is currently in or out of the Standby Pool.
func (o VirtualMachineInstanceViewResponseOutput) IsVMInStandbyPool() pulumi.BoolOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) bool { return v.IsVMInStandbyPool }).(pulumi.BoolOutput)
}

// The Maintenance Operation status on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) MaintenanceRedeployStatus() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *MaintenanceRedeployStatusResponse {
		return v.MaintenanceRedeployStatus
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// The Operating System running on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

// The version of Operating System running on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// [Preview Feature] The status of virtual machine patch operations.
func (o VirtualMachineInstanceViewResponseOutput) PatchStatus() VirtualMachinePatchStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *VirtualMachinePatchStatusResponse { return v.PatchStatus }).(VirtualMachinePatchStatusResponsePtrOutput)
}

// Specifies the fault domain of the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *int { return v.PlatformFaultDomain }).(pulumi.IntPtrOutput)
}

// Specifies the update domain of the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) PlatformUpdateDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *int { return v.PlatformUpdateDomain }).(pulumi.IntPtrOutput)
}

// The Remote desktop certificate thumbprint.
func (o VirtualMachineInstanceViewResponseOutput) RdpThumbPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *string { return v.RdpThumbPrint }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent running on the virtual machine.
func (o VirtualMachineInstanceViewResponseOutput) VmAgent() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse { return v.VmAgent }).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The health status for the VM.
func (o VirtualMachineInstanceViewResponseOutput) VmHealth() VirtualMachineHealthStatusResponseOutput {
	return o.ApplyT(func(v VirtualMachineInstanceViewResponse) VirtualMachineHealthStatusResponse { return v.VmHealth }).(VirtualMachineHealthStatusResponseOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineIpTag struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType *string `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `pulumi:"tag"`
}

// VirtualMachineIpTagInput is an input type that accepts VirtualMachineIpTagArgs and VirtualMachineIpTagOutput values.
// You can construct a concrete instance of `VirtualMachineIpTagInput` via:
//
//	VirtualMachineIpTagArgs{...}
type VirtualMachineIpTagInput interface {
	pulumi.Input

	ToVirtualMachineIpTagOutput() VirtualMachineIpTagOutput
	ToVirtualMachineIpTagOutputWithContext(context.Context) VirtualMachineIpTagOutput
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineIpTagArgs struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType pulumi.StringPtrInput `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (VirtualMachineIpTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIpTag)(nil)).Elem()
}

func (i VirtualMachineIpTagArgs) ToVirtualMachineIpTagOutput() VirtualMachineIpTagOutput {
	return i.ToVirtualMachineIpTagOutputWithContext(context.Background())
}

func (i VirtualMachineIpTagArgs) ToVirtualMachineIpTagOutputWithContext(ctx context.Context) VirtualMachineIpTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIpTagOutput)
}

// VirtualMachineIpTagArrayInput is an input type that accepts VirtualMachineIpTagArray and VirtualMachineIpTagArrayOutput values.
// You can construct a concrete instance of `VirtualMachineIpTagArrayInput` via:
//
//	VirtualMachineIpTagArray{ VirtualMachineIpTagArgs{...} }
type VirtualMachineIpTagArrayInput interface {
	pulumi.Input

	ToVirtualMachineIpTagArrayOutput() VirtualMachineIpTagArrayOutput
	ToVirtualMachineIpTagArrayOutputWithContext(context.Context) VirtualMachineIpTagArrayOutput
}

type VirtualMachineIpTagArray []VirtualMachineIpTagInput

func (VirtualMachineIpTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineIpTag)(nil)).Elem()
}

func (i VirtualMachineIpTagArray) ToVirtualMachineIpTagArrayOutput() VirtualMachineIpTagArrayOutput {
	return i.ToVirtualMachineIpTagArrayOutputWithContext(context.Background())
}

func (i VirtualMachineIpTagArray) ToVirtualMachineIpTagArrayOutputWithContext(ctx context.Context) VirtualMachineIpTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineIpTagArrayOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineIpTagOutput struct{ *pulumi.OutputState }

func (VirtualMachineIpTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIpTag)(nil)).Elem()
}

func (o VirtualMachineIpTagOutput) ToVirtualMachineIpTagOutput() VirtualMachineIpTagOutput {
	return o
}

func (o VirtualMachineIpTagOutput) ToVirtualMachineIpTagOutputWithContext(ctx context.Context) VirtualMachineIpTagOutput {
	return o
}

// IP tag type. Example: FirstPartyUsage.
func (o VirtualMachineIpTagOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineIpTag) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// IP tag associated with the public IP. Example: SQL, Storage etc.
func (o VirtualMachineIpTagOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineIpTag) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type VirtualMachineIpTagArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineIpTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineIpTag)(nil)).Elem()
}

func (o VirtualMachineIpTagArrayOutput) ToVirtualMachineIpTagArrayOutput() VirtualMachineIpTagArrayOutput {
	return o
}

func (o VirtualMachineIpTagArrayOutput) ToVirtualMachineIpTagArrayOutputWithContext(ctx context.Context) VirtualMachineIpTagArrayOutput {
	return o
}

func (o VirtualMachineIpTagArrayOutput) Index(i pulumi.IntInput) VirtualMachineIpTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineIpTag {
		return vs[0].([]VirtualMachineIpTag)[vs[1].(int)]
	}).(VirtualMachineIpTagOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineIpTagResponse struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType *string `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `pulumi:"tag"`
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineIpTagResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineIpTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineIpTagResponse)(nil)).Elem()
}

func (o VirtualMachineIpTagResponseOutput) ToVirtualMachineIpTagResponseOutput() VirtualMachineIpTagResponseOutput {
	return o
}

func (o VirtualMachineIpTagResponseOutput) ToVirtualMachineIpTagResponseOutputWithContext(ctx context.Context) VirtualMachineIpTagResponseOutput {
	return o
}

// IP tag type. Example: FirstPartyUsage.
func (o VirtualMachineIpTagResponseOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineIpTagResponse) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// IP tag associated with the public IP. Example: SQL, Storage etc.
func (o VirtualMachineIpTagResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineIpTagResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type VirtualMachineIpTagResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineIpTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineIpTagResponse)(nil)).Elem()
}

func (o VirtualMachineIpTagResponseArrayOutput) ToVirtualMachineIpTagResponseArrayOutput() VirtualMachineIpTagResponseArrayOutput {
	return o
}

func (o VirtualMachineIpTagResponseArrayOutput) ToVirtualMachineIpTagResponseArrayOutputWithContext(ctx context.Context) VirtualMachineIpTagResponseArrayOutput {
	return o
}

func (o VirtualMachineIpTagResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineIpTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineIpTagResponse {
		return vs[0].([]VirtualMachineIpTagResponse)[vs[1].(int)]
	}).(VirtualMachineIpTagResponseOutput)
}

// Describes a virtual machine network interface configurations.
type VirtualMachineNetworkInterfaceConfiguration struct {
	// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
	AuxiliaryMode *string `pulumi:"auxiliaryMode"`
	// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
	AuxiliarySku *string `pulumi:"auxiliarySku"`
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies whether the network interface is disabled for tcp state tracking.
	DisableTcpStateTracking *bool `pulumi:"disableTcpStateTracking"`
	// The dns settings to be applied on the network interfaces.
	DnsSettings       *VirtualMachineNetworkInterfaceDnsSettingsConfiguration `pulumi:"dnsSettings"`
	DscpConfiguration *SubResource                                            `pulumi:"dscpConfiguration"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `pulumi:"enableFpga"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `pulumi:"enableIPForwarding"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations []VirtualMachineNetworkInterfaceIPConfiguration `pulumi:"ipConfigurations"`
	// The network interface configuration name.
	Name string `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup *SubResource `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// VirtualMachineNetworkInterfaceConfigurationInput is an input type that accepts VirtualMachineNetworkInterfaceConfigurationArgs and VirtualMachineNetworkInterfaceConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceConfigurationInput` via:
//
//	VirtualMachineNetworkInterfaceConfigurationArgs{...}
type VirtualMachineNetworkInterfaceConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceConfigurationOutput() VirtualMachineNetworkInterfaceConfigurationOutput
	ToVirtualMachineNetworkInterfaceConfigurationOutputWithContext(context.Context) VirtualMachineNetworkInterfaceConfigurationOutput
}

// Describes a virtual machine network interface configurations.
type VirtualMachineNetworkInterfaceConfigurationArgs struct {
	// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
	AuxiliaryMode pulumi.StringPtrInput `pulumi:"auxiliaryMode"`
	// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
	AuxiliarySku pulumi.StringPtrInput `pulumi:"auxiliarySku"`
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Specifies whether the network interface is disabled for tcp state tracking.
	DisableTcpStateTracking pulumi.BoolPtrInput `pulumi:"disableTcpStateTracking"`
	// The dns settings to be applied on the network interfaces.
	DnsSettings       VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrInput `pulumi:"dnsSettings"`
	DscpConfiguration SubResourcePtrInput                                            `pulumi:"dscpConfiguration"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking pulumi.BoolPtrInput `pulumi:"enableAcceleratedNetworking"`
	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga pulumi.BoolPtrInput `pulumi:"enableFpga"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding pulumi.BoolPtrInput `pulumi:"enableIPForwarding"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations VirtualMachineNetworkInterfaceIPConfigurationArrayInput `pulumi:"ipConfigurations"`
	// The network interface configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup SubResourcePtrInput `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
}

func (VirtualMachineNetworkInterfaceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceConfiguration)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceConfigurationArgs) ToVirtualMachineNetworkInterfaceConfigurationOutput() VirtualMachineNetworkInterfaceConfigurationOutput {
	return i.ToVirtualMachineNetworkInterfaceConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceConfigurationArgs) ToVirtualMachineNetworkInterfaceConfigurationOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceConfigurationOutput)
}

// VirtualMachineNetworkInterfaceConfigurationArrayInput is an input type that accepts VirtualMachineNetworkInterfaceConfigurationArray and VirtualMachineNetworkInterfaceConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceConfigurationArrayInput` via:
//
//	VirtualMachineNetworkInterfaceConfigurationArray{ VirtualMachineNetworkInterfaceConfigurationArgs{...} }
type VirtualMachineNetworkInterfaceConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceConfigurationArrayOutput() VirtualMachineNetworkInterfaceConfigurationArrayOutput
	ToVirtualMachineNetworkInterfaceConfigurationArrayOutputWithContext(context.Context) VirtualMachineNetworkInterfaceConfigurationArrayOutput
}

type VirtualMachineNetworkInterfaceConfigurationArray []VirtualMachineNetworkInterfaceConfigurationInput

func (VirtualMachineNetworkInterfaceConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterfaceConfiguration)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceConfigurationArray) ToVirtualMachineNetworkInterfaceConfigurationArrayOutput() VirtualMachineNetworkInterfaceConfigurationArrayOutput {
	return i.ToVirtualMachineNetworkInterfaceConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceConfigurationArray) ToVirtualMachineNetworkInterfaceConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceConfigurationArrayOutput)
}

// Describes a virtual machine network interface configurations.
type VirtualMachineNetworkInterfaceConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceConfiguration)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceConfigurationOutput) ToVirtualMachineNetworkInterfaceConfigurationOutput() VirtualMachineNetworkInterfaceConfigurationOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceConfigurationOutput) ToVirtualMachineNetworkInterfaceConfigurationOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceConfigurationOutput {
	return o
}

// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) AuxiliaryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *string { return v.AuxiliaryMode }).(pulumi.StringPtrOutput)
}

// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) AuxiliarySku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *string { return v.AuxiliarySku }).(pulumi.StringPtrOutput)
}

// Specify what happens to the network interface when the VM is deleted
func (o VirtualMachineNetworkInterfaceConfigurationOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies whether the network interface is disabled for tcp state tracking.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) DisableTcpStateTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *bool { return v.DisableTcpStateTracking }).(pulumi.BoolPtrOutput)
}

// The dns settings to be applied on the network interfaces.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) DnsSettings() VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *VirtualMachineNetworkInterfaceDnsSettingsConfiguration {
		return v.DnsSettings
	}).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput)
}

func (o VirtualMachineNetworkInterfaceConfigurationOutput) DscpConfiguration() SubResourcePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *SubResource { return v.DscpConfiguration }).(SubResourcePtrOutput)
}

// Specifies whether the network interface is accelerated networking-enabled.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) EnableAcceleratedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *bool { return v.EnableAcceleratedNetworking }).(pulumi.BoolPtrOutput)
}

// Specifies whether the network interface is FPGA networking-enabled.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) EnableFpga() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *bool { return v.EnableFpga }).(pulumi.BoolPtrOutput)
}

// Whether IP forwarding enabled on this NIC.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) EnableIPForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *bool { return v.EnableIPForwarding }).(pulumi.BoolPtrOutput)
}

// Specifies the IP configurations of the network interface.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) IpConfigurations() VirtualMachineNetworkInterfaceIPConfigurationArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) []VirtualMachineNetworkInterfaceIPConfiguration {
		return v.IpConfigurations
	}).(VirtualMachineNetworkInterfaceIPConfigurationArrayOutput)
}

// The network interface configuration name.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// The network security group.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) NetworkSecurityGroup() SubResourcePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *SubResource { return v.NetworkSecurityGroup }).(SubResourcePtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineNetworkInterfaceConfigurationOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfiguration) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type VirtualMachineNetworkInterfaceConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterfaceConfiguration)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceConfigurationArrayOutput) ToVirtualMachineNetworkInterfaceConfigurationArrayOutput() VirtualMachineNetworkInterfaceConfigurationArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceConfigurationArrayOutput) ToVirtualMachineNetworkInterfaceConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceConfigurationArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceConfigurationArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkInterfaceConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkInterfaceConfiguration {
		return vs[0].([]VirtualMachineNetworkInterfaceConfiguration)[vs[1].(int)]
	}).(VirtualMachineNetworkInterfaceConfigurationOutput)
}

// Describes a virtual machine network interface configurations.
type VirtualMachineNetworkInterfaceConfigurationResponse struct {
	// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
	AuxiliaryMode *string `pulumi:"auxiliaryMode"`
	// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
	AuxiliarySku *string `pulumi:"auxiliarySku"`
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies whether the network interface is disabled for tcp state tracking.
	DisableTcpStateTracking *bool `pulumi:"disableTcpStateTracking"`
	// The dns settings to be applied on the network interfaces.
	DnsSettings       *VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse `pulumi:"dnsSettings"`
	DscpConfiguration *SubResourceResponse                                            `pulumi:"dscpConfiguration"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `pulumi:"enableFpga"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `pulumi:"enableIPForwarding"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations []VirtualMachineNetworkInterfaceIPConfigurationResponse `pulumi:"ipConfigurations"`
	// The network interface configuration name.
	Name string `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup *SubResourceResponse `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// Describes a virtual machine network interface configurations.
type VirtualMachineNetworkInterfaceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) ToVirtualMachineNetworkInterfaceConfigurationResponseOutput() VirtualMachineNetworkInterfaceConfigurationResponseOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) ToVirtualMachineNetworkInterfaceConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceConfigurationResponseOutput {
	return o
}

// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) AuxiliaryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *string { return v.AuxiliaryMode }).(pulumi.StringPtrOutput)
}

// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) AuxiliarySku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *string { return v.AuxiliarySku }).(pulumi.StringPtrOutput)
}

// Specify what happens to the network interface when the VM is deleted
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies whether the network interface is disabled for tcp state tracking.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) DisableTcpStateTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *bool { return v.DisableTcpStateTracking }).(pulumi.BoolPtrOutput)
}

// The dns settings to be applied on the network interfaces.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) DnsSettings() VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse {
		return v.DnsSettings
	}).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput)
}

func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) DscpConfiguration() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *SubResourceResponse {
		return v.DscpConfiguration
	}).(SubResourceResponsePtrOutput)
}

// Specifies whether the network interface is accelerated networking-enabled.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) EnableAcceleratedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *bool {
		return v.EnableAcceleratedNetworking
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the network interface is FPGA networking-enabled.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) EnableFpga() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *bool { return v.EnableFpga }).(pulumi.BoolPtrOutput)
}

// Whether IP forwarding enabled on this NIC.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) EnableIPForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *bool { return v.EnableIPForwarding }).(pulumi.BoolPtrOutput)
}

// Specifies the IP configurations of the network interface.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) IpConfigurations() VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) []VirtualMachineNetworkInterfaceIPConfigurationResponse {
		return v.IpConfigurations
	}).(VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput)
}

// The network interface configuration name.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The network security group.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) NetworkSecurityGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *SubResourceResponse {
		return v.NetworkSecurityGroup
	}).(SubResourceResponsePtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineNetworkInterfaceConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterfaceConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput) ToVirtualMachineNetworkInterfaceConfigurationResponseArrayOutput() VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput) ToVirtualMachineNetworkInterfaceConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkInterfaceConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkInterfaceConfigurationResponse {
		return vs[0].([]VirtualMachineNetworkInterfaceConfigurationResponse)[vs[1].(int)]
	}).(VirtualMachineNetworkInterfaceConfigurationResponseOutput)
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachineNetworkInterfaceDnsSettingsConfiguration struct {
	// List of DNS servers IP addresses
	DnsServers []string `pulumi:"dnsServers"`
}

// VirtualMachineNetworkInterfaceDnsSettingsConfigurationInput is an input type that accepts VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs and VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceDnsSettingsConfigurationInput` via:
//
//	VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs{...}
type VirtualMachineNetworkInterfaceDnsSettingsConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput
	ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutputWithContext(context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs struct {
	// List of DNS servers IP addresses
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
}

func (VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceDnsSettingsConfiguration)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput {
	return i.ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput)
}

func (i VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return i.ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput).ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrInput is an input type that accepts VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs, VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtr and VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrInput` via:
//
//	        VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput
	ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput
}

type virtualMachineNetworkInterfaceDnsSettingsConfigurationPtrType VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs

func VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtr(v *VirtualMachineNetworkInterfaceDnsSettingsConfigurationArgs) VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrInput {
	return (*virtualMachineNetworkInterfaceDnsSettingsConfigurationPtrType)(v)
}

func (*virtualMachineNetworkInterfaceDnsSettingsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineNetworkInterfaceDnsSettingsConfiguration)(nil)).Elem()
}

func (i *virtualMachineNetworkInterfaceDnsSettingsConfigurationPtrType) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return i.ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineNetworkInterfaceDnsSettingsConfigurationPtrType) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput)
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceDnsSettingsConfiguration)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return o.ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineNetworkInterfaceDnsSettingsConfiguration) *VirtualMachineNetworkInterfaceDnsSettingsConfiguration {
		return &v
	}).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceDnsSettingsConfiguration) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

type VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineNetworkInterfaceDnsSettingsConfiguration)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput) Elem() VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachineNetworkInterfaceDnsSettingsConfiguration) VirtualMachineNetworkInterfaceDnsSettingsConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualMachineNetworkInterfaceDnsSettingsConfiguration
		return ret
	}).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineNetworkInterfaceDnsSettingsConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse struct {
	// List of DNS servers IP addresses
	DnsServers []string `pulumi:"dnsServers"`
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput {
	return o
}

// List of DNS servers IP addresses
func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

type VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput() VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput) ToVirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput) Elem() VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse) VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse
		return ret
	}).(VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceIPConfiguration struct {
	// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResource `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResource `pulumi:"applicationSecurityGroups"`
	// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
	LoadBalancerBackendAddressPools []SubResource `pulumi:"loadBalancerBackendAddressPools"`
	// The IP configuration name.
	Name string `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *string `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachinePublicIPAddressConfiguration `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet *SubResource `pulumi:"subnet"`
}

// VirtualMachineNetworkInterfaceIPConfigurationInput is an input type that accepts VirtualMachineNetworkInterfaceIPConfigurationArgs and VirtualMachineNetworkInterfaceIPConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceIPConfigurationInput` via:
//
//	VirtualMachineNetworkInterfaceIPConfigurationArgs{...}
type VirtualMachineNetworkInterfaceIPConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceIPConfigurationOutput() VirtualMachineNetworkInterfaceIPConfigurationOutput
	ToVirtualMachineNetworkInterfaceIPConfigurationOutputWithContext(context.Context) VirtualMachineNetworkInterfaceIPConfigurationOutput
}

// Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceIPConfigurationArgs struct {
	// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools SubResourceArrayInput `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups SubResourceArrayInput `pulumi:"applicationSecurityGroups"`
	// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
	LoadBalancerBackendAddressPools SubResourceArrayInput `pulumi:"loadBalancerBackendAddressPools"`
	// The IP configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion pulumi.StringPtrInput `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration VirtualMachinePublicIPAddressConfigurationPtrInput `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet SubResourcePtrInput `pulumi:"subnet"`
}

func (VirtualMachineNetworkInterfaceIPConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceIPConfigurationArgs) ToVirtualMachineNetworkInterfaceIPConfigurationOutput() VirtualMachineNetworkInterfaceIPConfigurationOutput {
	return i.ToVirtualMachineNetworkInterfaceIPConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceIPConfigurationArgs) ToVirtualMachineNetworkInterfaceIPConfigurationOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceIPConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceIPConfigurationOutput)
}

// VirtualMachineNetworkInterfaceIPConfigurationArrayInput is an input type that accepts VirtualMachineNetworkInterfaceIPConfigurationArray and VirtualMachineNetworkInterfaceIPConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualMachineNetworkInterfaceIPConfigurationArrayInput` via:
//
//	VirtualMachineNetworkInterfaceIPConfigurationArray{ VirtualMachineNetworkInterfaceIPConfigurationArgs{...} }
type VirtualMachineNetworkInterfaceIPConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutput() VirtualMachineNetworkInterfaceIPConfigurationArrayOutput
	ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutputWithContext(context.Context) VirtualMachineNetworkInterfaceIPConfigurationArrayOutput
}

type VirtualMachineNetworkInterfaceIPConfigurationArray []VirtualMachineNetworkInterfaceIPConfigurationInput

func (VirtualMachineNetworkInterfaceIPConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (i VirtualMachineNetworkInterfaceIPConfigurationArray) ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutput() VirtualMachineNetworkInterfaceIPConfigurationArrayOutput {
	return i.ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualMachineNetworkInterfaceIPConfigurationArray) ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceIPConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineNetworkInterfaceIPConfigurationArrayOutput)
}

// Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceIPConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceIPConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) ToVirtualMachineNetworkInterfaceIPConfigurationOutput() VirtualMachineNetworkInterfaceIPConfigurationOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) ToVirtualMachineNetworkInterfaceIPConfigurationOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceIPConfigurationOutput {
	return o
}

// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) ApplicationGatewayBackendAddressPools() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) []SubResource {
		return v.ApplicationGatewayBackendAddressPools
	}).(SubResourceArrayOutput)
}

// Specifies an array of references to application security group.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) ApplicationSecurityGroups() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) []SubResource {
		return v.ApplicationSecurityGroups
	}).(SubResourceArrayOutput)
}

// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) LoadBalancerBackendAddressPools() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) []SubResource {
		return v.LoadBalancerBackendAddressPools
	}).(SubResourceArrayOutput)
}

// The IP configuration name.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) PrivateIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) *string { return v.PrivateIPAddressVersion }).(pulumi.StringPtrOutput)
}

// The publicIPAddressConfiguration.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) PublicIPAddressConfiguration() VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) *VirtualMachinePublicIPAddressConfiguration {
		return v.PublicIPAddressConfiguration
	}).(VirtualMachinePublicIPAddressConfigurationPtrOutput)
}

// Specifies the identifier of the subnet.
func (o VirtualMachineNetworkInterfaceIPConfigurationOutput) Subnet() SubResourcePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfiguration) *SubResource { return v.Subnet }).(SubResourcePtrOutput)
}

type VirtualMachineNetworkInterfaceIPConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceIPConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterfaceIPConfiguration)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceIPConfigurationArrayOutput) ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutput() VirtualMachineNetworkInterfaceIPConfigurationArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceIPConfigurationArrayOutput) ToVirtualMachineNetworkInterfaceIPConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceIPConfigurationArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceIPConfigurationArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkInterfaceIPConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkInterfaceIPConfiguration {
		return vs[0].([]VirtualMachineNetworkInterfaceIPConfiguration)[vs[1].(int)]
	}).(VirtualMachineNetworkInterfaceIPConfigurationOutput)
}

// Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceIPConfigurationResponse struct {
	// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResourceResponse `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResourceResponse `pulumi:"applicationSecurityGroups"`
	// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
	LoadBalancerBackendAddressPools []SubResourceResponse `pulumi:"loadBalancerBackendAddressPools"`
	// The IP configuration name.
	Name string `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *string `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachinePublicIPAddressConfigurationResponse `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet *SubResourceResponse `pulumi:"subnet"`
}

// Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceIPConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineNetworkInterfaceIPConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) ToVirtualMachineNetworkInterfaceIPConfigurationResponseOutput() VirtualMachineNetworkInterfaceIPConfigurationResponseOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) ToVirtualMachineNetworkInterfaceIPConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceIPConfigurationResponseOutput {
	return o
}

// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) ApplicationGatewayBackendAddressPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) []SubResourceResponse {
		return v.ApplicationGatewayBackendAddressPools
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to application security group.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) ApplicationSecurityGroups() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) []SubResourceResponse {
		return v.ApplicationSecurityGroups
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) LoadBalancerBackendAddressPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) []SubResourceResponse {
		return v.LoadBalancerBackendAddressPools
	}).(SubResourceResponseArrayOutput)
}

// The IP configuration name.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) PrivateIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) *string {
		return v.PrivateIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// The publicIPAddressConfiguration.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) PublicIPAddressConfiguration() VirtualMachinePublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) *VirtualMachinePublicIPAddressConfigurationResponse {
		return v.PublicIPAddressConfiguration
	}).(VirtualMachinePublicIPAddressConfigurationResponsePtrOutput)
}

// Specifies the identifier of the subnet.
func (o VirtualMachineNetworkInterfaceIPConfigurationResponseOutput) Subnet() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineNetworkInterfaceIPConfigurationResponse) *SubResourceResponse { return v.Subnet }).(SubResourceResponsePtrOutput)
}

type VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineNetworkInterfaceIPConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput) ToVirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput() VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput) ToVirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineNetworkInterfaceIPConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineNetworkInterfaceIPConfigurationResponse {
		return vs[0].([]VirtualMachineNetworkInterfaceIPConfigurationResponse)[vs[1].(int)]
	}).(VirtualMachineNetworkInterfaceIPConfigurationResponseOutput)
}

// The status of virtual machine patch operations.
type VirtualMachinePatchStatusResponse struct {
	// The available patch summary of the latest assessment operation for the virtual machine.
	AvailablePatchSummary *AvailablePatchSummaryResponse `pulumi:"availablePatchSummary"`
	// The enablement status of the specified patchMode
	ConfigurationStatuses []InstanceViewStatusResponse `pulumi:"configurationStatuses"`
	// The installation summary of the latest installation operation for the virtual machine.
	LastPatchInstallationSummary *LastPatchInstallationSummaryResponse `pulumi:"lastPatchInstallationSummary"`
}

// The status of virtual machine patch operations.
type VirtualMachinePatchStatusResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachinePatchStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePatchStatusResponse)(nil)).Elem()
}

func (o VirtualMachinePatchStatusResponseOutput) ToVirtualMachinePatchStatusResponseOutput() VirtualMachinePatchStatusResponseOutput {
	return o
}

func (o VirtualMachinePatchStatusResponseOutput) ToVirtualMachinePatchStatusResponseOutputWithContext(ctx context.Context) VirtualMachinePatchStatusResponseOutput {
	return o
}

// The available patch summary of the latest assessment operation for the virtual machine.
func (o VirtualMachinePatchStatusResponseOutput) AvailablePatchSummary() AvailablePatchSummaryResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePatchStatusResponse) *AvailablePatchSummaryResponse {
		return v.AvailablePatchSummary
	}).(AvailablePatchSummaryResponsePtrOutput)
}

// The enablement status of the specified patchMode
func (o VirtualMachinePatchStatusResponseOutput) ConfigurationStatuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachinePatchStatusResponse) []InstanceViewStatusResponse { return v.ConfigurationStatuses }).(InstanceViewStatusResponseArrayOutput)
}

// The installation summary of the latest installation operation for the virtual machine.
func (o VirtualMachinePatchStatusResponseOutput) LastPatchInstallationSummary() LastPatchInstallationSummaryResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePatchStatusResponse) *LastPatchInstallationSummaryResponse {
		return v.LastPatchInstallationSummary
	}).(LastPatchInstallationSummaryResponsePtrOutput)
}

type VirtualMachinePatchStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePatchStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePatchStatusResponse)(nil)).Elem()
}

func (o VirtualMachinePatchStatusResponsePtrOutput) ToVirtualMachinePatchStatusResponsePtrOutput() VirtualMachinePatchStatusResponsePtrOutput {
	return o
}

func (o VirtualMachinePatchStatusResponsePtrOutput) ToVirtualMachinePatchStatusResponsePtrOutputWithContext(ctx context.Context) VirtualMachinePatchStatusResponsePtrOutput {
	return o
}

func (o VirtualMachinePatchStatusResponsePtrOutput) Elem() VirtualMachinePatchStatusResponseOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) VirtualMachinePatchStatusResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachinePatchStatusResponse
		return ret
	}).(VirtualMachinePatchStatusResponseOutput)
}

// The available patch summary of the latest assessment operation for the virtual machine.
func (o VirtualMachinePatchStatusResponsePtrOutput) AvailablePatchSummary() AvailablePatchSummaryResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) *AvailablePatchSummaryResponse {
		if v == nil {
			return nil
		}
		return v.AvailablePatchSummary
	}).(AvailablePatchSummaryResponsePtrOutput)
}

// The enablement status of the specified patchMode
func (o VirtualMachinePatchStatusResponsePtrOutput) ConfigurationStatuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) []InstanceViewStatusResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationStatuses
	}).(InstanceViewStatusResponseArrayOutput)
}

// The installation summary of the latest installation operation for the virtual machine.
func (o VirtualMachinePatchStatusResponsePtrOutput) LastPatchInstallationSummary() LastPatchInstallationSummaryResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePatchStatusResponse) *LastPatchInstallationSummaryResponse {
		if v == nil {
			return nil
		}
		return v.LastPatchInstallationSummary
	}).(LastPatchInstallationSummaryResponsePtrOutput)
}

// Describes a virtual machines IP Configuration's PublicIPAddress configuration
type VirtualMachinePublicIPAddressConfiguration struct {
	// Specify what happens to the public IP address when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings *VirtualMachinePublicIPAddressDnsSettingsConfiguration `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineIpTag `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name string `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *string `pulumi:"publicIPAddressVersion"`
	// Specify the public IP allocation type
	PublicIPAllocationMethod *string `pulumi:"publicIPAllocationMethod"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource `pulumi:"publicIPPrefix"`
	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	Sku *PublicIPAddressSku `pulumi:"sku"`
}

// VirtualMachinePublicIPAddressConfigurationInput is an input type that accepts VirtualMachinePublicIPAddressConfigurationArgs and VirtualMachinePublicIPAddressConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachinePublicIPAddressConfigurationInput` via:
//
//	VirtualMachinePublicIPAddressConfigurationArgs{...}
type VirtualMachinePublicIPAddressConfigurationInput interface {
	pulumi.Input

	ToVirtualMachinePublicIPAddressConfigurationOutput() VirtualMachinePublicIPAddressConfigurationOutput
	ToVirtualMachinePublicIPAddressConfigurationOutputWithContext(context.Context) VirtualMachinePublicIPAddressConfigurationOutput
}

// Describes a virtual machines IP Configuration's PublicIPAddress configuration
type VirtualMachinePublicIPAddressConfigurationArgs struct {
	// Specify what happens to the public IP address when the VM is deleted
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrInput `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes pulumi.IntPtrInput `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags VirtualMachineIpTagArrayInput `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion pulumi.StringPtrInput `pulumi:"publicIPAddressVersion"`
	// Specify the public IP allocation type
	PublicIPAllocationMethod pulumi.StringPtrInput `pulumi:"publicIPAllocationMethod"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix SubResourcePtrInput `pulumi:"publicIPPrefix"`
	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	Sku PublicIPAddressSkuPtrInput `pulumi:"sku"`
}

func (VirtualMachinePublicIPAddressConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePublicIPAddressConfiguration)(nil)).Elem()
}

func (i VirtualMachinePublicIPAddressConfigurationArgs) ToVirtualMachinePublicIPAddressConfigurationOutput() VirtualMachinePublicIPAddressConfigurationOutput {
	return i.ToVirtualMachinePublicIPAddressConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachinePublicIPAddressConfigurationArgs) ToVirtualMachinePublicIPAddressConfigurationOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePublicIPAddressConfigurationOutput)
}

func (i VirtualMachinePublicIPAddressConfigurationArgs) ToVirtualMachinePublicIPAddressConfigurationPtrOutput() VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return i.ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachinePublicIPAddressConfigurationArgs) ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePublicIPAddressConfigurationOutput).ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachinePublicIPAddressConfigurationPtrInput is an input type that accepts VirtualMachinePublicIPAddressConfigurationArgs, VirtualMachinePublicIPAddressConfigurationPtr and VirtualMachinePublicIPAddressConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachinePublicIPAddressConfigurationPtrInput` via:
//
//	        VirtualMachinePublicIPAddressConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachinePublicIPAddressConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachinePublicIPAddressConfigurationPtrOutput() VirtualMachinePublicIPAddressConfigurationPtrOutput
	ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(context.Context) VirtualMachinePublicIPAddressConfigurationPtrOutput
}

type virtualMachinePublicIPAddressConfigurationPtrType VirtualMachinePublicIPAddressConfigurationArgs

func VirtualMachinePublicIPAddressConfigurationPtr(v *VirtualMachinePublicIPAddressConfigurationArgs) VirtualMachinePublicIPAddressConfigurationPtrInput {
	return (*virtualMachinePublicIPAddressConfigurationPtrType)(v)
}

func (*virtualMachinePublicIPAddressConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePublicIPAddressConfiguration)(nil)).Elem()
}

func (i *virtualMachinePublicIPAddressConfigurationPtrType) ToVirtualMachinePublicIPAddressConfigurationPtrOutput() VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return i.ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachinePublicIPAddressConfigurationPtrType) ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePublicIPAddressConfigurationPtrOutput)
}

// Describes a virtual machines IP Configuration's PublicIPAddress configuration
type VirtualMachinePublicIPAddressConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePublicIPAddressConfiguration)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressConfigurationOutput) ToVirtualMachinePublicIPAddressConfigurationOutput() VirtualMachinePublicIPAddressConfigurationOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationOutput) ToVirtualMachinePublicIPAddressConfigurationOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationOutput) ToVirtualMachinePublicIPAddressConfigurationPtrOutput() VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return o.ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachinePublicIPAddressConfigurationOutput) ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachinePublicIPAddressConfiguration) *VirtualMachinePublicIPAddressConfiguration {
		return &v
	}).(VirtualMachinePublicIPAddressConfigurationPtrOutput)
}

// Specify what happens to the public IP address when the VM is deleted
func (o VirtualMachinePublicIPAddressConfigurationOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachinePublicIPAddressConfigurationOutput) DnsSettings() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *VirtualMachinePublicIPAddressDnsSettingsConfiguration {
		return v.DnsSettings
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationOutput) IpTags() VirtualMachineIpTagArrayOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) []VirtualMachineIpTag { return v.IpTags }).(VirtualMachineIpTagArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachinePublicIPAddressConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachinePublicIPAddressConfigurationOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *string { return v.PublicIPAddressVersion }).(pulumi.StringPtrOutput)
}

// Specify the public IP allocation type
func (o VirtualMachinePublicIPAddressConfigurationOutput) PublicIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *string { return v.PublicIPAllocationMethod }).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachinePublicIPAddressConfigurationOutput) PublicIPPrefix() SubResourcePtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *SubResource { return v.PublicIPPrefix }).(SubResourcePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachinePublicIPAddressConfigurationOutput) Sku() PublicIPAddressSkuPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfiguration) *PublicIPAddressSku { return v.Sku }).(PublicIPAddressSkuPtrOutput)
}

type VirtualMachinePublicIPAddressConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePublicIPAddressConfiguration)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) ToVirtualMachinePublicIPAddressConfigurationPtrOutput() VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) ToVirtualMachinePublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationPtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) Elem() VirtualMachinePublicIPAddressConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) VirtualMachinePublicIPAddressConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualMachinePublicIPAddressConfiguration
		return ret
	}).(VirtualMachinePublicIPAddressConfigurationOutput)
}

// Specify what happens to the public IP address when the VM is deleted
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) DnsSettings() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *VirtualMachinePublicIPAddressDnsSettingsConfiguration {
		if v == nil {
			return nil
		}
		return v.DnsSettings
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) IpTags() VirtualMachineIpTagArrayOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) []VirtualMachineIpTag {
		if v == nil {
			return nil
		}
		return v.IpTags
	}).(VirtualMachineIpTagArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// Specify the public IP allocation type
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) PublicIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAllocationMethod
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) PublicIPPrefix() SubResourcePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *SubResource {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefix
	}).(SubResourcePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachinePublicIPAddressConfigurationPtrOutput) Sku() PublicIPAddressSkuPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfiguration) *PublicIPAddressSku {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(PublicIPAddressSkuPtrOutput)
}

// Describes a virtual machines IP Configuration's PublicIPAddress configuration
type VirtualMachinePublicIPAddressConfigurationResponse struct {
	// Specify what happens to the public IP address when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings *VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineIpTagResponse `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name string `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *string `pulumi:"publicIPAddressVersion"`
	// Specify the public IP allocation type
	PublicIPAllocationMethod *string `pulumi:"publicIPAllocationMethod"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResourceResponse `pulumi:"publicIPPrefix"`
	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	Sku *PublicIPAddressSkuResponse `pulumi:"sku"`
}

// Describes a virtual machines IP Configuration's PublicIPAddress configuration
type VirtualMachinePublicIPAddressConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) ToVirtualMachinePublicIPAddressConfigurationResponseOutput() VirtualMachinePublicIPAddressConfigurationResponseOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) ToVirtualMachinePublicIPAddressConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationResponseOutput {
	return o
}

// Specify what happens to the public IP address when the VM is deleted
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) DnsSettings() VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse {
		return v.DnsSettings
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) IpTags() VirtualMachineIpTagResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) []VirtualMachineIpTagResponse {
		return v.IpTags
	}).(VirtualMachineIpTagResponseArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *string { return v.PublicIPAddressVersion }).(pulumi.StringPtrOutput)
}

// Specify the public IP allocation type
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) PublicIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *string { return v.PublicIPAllocationMethod }).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) PublicIPPrefix() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *SubResourceResponse {
		return v.PublicIPPrefix
	}).(SubResourceResponsePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachinePublicIPAddressConfigurationResponseOutput) Sku() PublicIPAddressSkuResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressConfigurationResponse) *PublicIPAddressSkuResponse { return v.Sku }).(PublicIPAddressSkuResponsePtrOutput)
}

type VirtualMachinePublicIPAddressConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) ToVirtualMachinePublicIPAddressConfigurationResponsePtrOutput() VirtualMachinePublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) ToVirtualMachinePublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) Elem() VirtualMachinePublicIPAddressConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) VirtualMachinePublicIPAddressConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachinePublicIPAddressConfigurationResponse
		return ret
	}).(VirtualMachinePublicIPAddressConfigurationResponseOutput)
}

// Specify what happens to the public IP address when the VM is deleted
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) DnsSettings() VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.DnsSettings
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) IpTags() VirtualMachineIpTagResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) []VirtualMachineIpTagResponse {
		if v == nil {
			return nil
		}
		return v.IpTags
	}).(VirtualMachineIpTagResponseArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// Specify the public IP allocation type
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) PublicIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAllocationMethod
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) PublicIPPrefix() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefix
	}).(SubResourceResponsePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachinePublicIPAddressConfigurationResponsePtrOutput) Sku() PublicIPAddressSkuResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressConfigurationResponse) *PublicIPAddressSkuResponse {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(PublicIPAddressSkuResponsePtrOutput)
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachinePublicIPAddressDnsSettingsConfiguration struct {
	// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
	DomainNameLabel string `pulumi:"domainNameLabel"`
	// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
	DomainNameLabelScope *string `pulumi:"domainNameLabelScope"`
}

// VirtualMachinePublicIPAddressDnsSettingsConfigurationInput is an input type that accepts VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs and VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachinePublicIPAddressDnsSettingsConfigurationInput` via:
//
//	VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs{...}
type VirtualMachinePublicIPAddressDnsSettingsConfigurationInput interface {
	pulumi.Input

	ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput
	ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutputWithContext(context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs struct {
	// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
	DomainNameLabel pulumi.StringInput `pulumi:"domainNameLabel"`
	// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
	DomainNameLabelScope pulumi.StringPtrInput `pulumi:"domainNameLabelScope"`
}

func (VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePublicIPAddressDnsSettingsConfiguration)(nil)).Elem()
}

func (i VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput {
	return i.ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput)
}

func (i VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return i.ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput).ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrInput is an input type that accepts VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs, VirtualMachinePublicIPAddressDnsSettingsConfigurationPtr and VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrInput` via:
//
//	        VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput
	ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput
}

type virtualMachinePublicIPAddressDnsSettingsConfigurationPtrType VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs

func VirtualMachinePublicIPAddressDnsSettingsConfigurationPtr(v *VirtualMachinePublicIPAddressDnsSettingsConfigurationArgs) VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrInput {
	return (*virtualMachinePublicIPAddressDnsSettingsConfigurationPtrType)(v)
}

func (*virtualMachinePublicIPAddressDnsSettingsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePublicIPAddressDnsSettingsConfiguration)(nil)).Elem()
}

func (i *virtualMachinePublicIPAddressDnsSettingsConfigurationPtrType) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return i.ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachinePublicIPAddressDnsSettingsConfigurationPtrType) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput)
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePublicIPAddressDnsSettingsConfiguration)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return o.ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachinePublicIPAddressDnsSettingsConfiguration) *VirtualMachinePublicIPAddressDnsSettingsConfiguration {
		return &v
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput)
}

// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) DomainNameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressDnsSettingsConfiguration) string { return v.DomainNameLabel }).(pulumi.StringOutput)
}

// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressDnsSettingsConfiguration) *string { return v.DomainNameLabelScope }).(pulumi.StringPtrOutput)
}

type VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePublicIPAddressDnsSettingsConfiguration)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput) Elem() VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressDnsSettingsConfiguration) VirtualMachinePublicIPAddressDnsSettingsConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualMachinePublicIPAddressDnsSettingsConfiguration
		return ret
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput)
}

// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput) DomainNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressDnsSettingsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNameLabel
	}).(pulumi.StringPtrOutput)
}

// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressDnsSettingsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse struct {
	// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
	DomainNameLabel string `pulumi:"domainNameLabel"`
	// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
	DomainNameLabelScope *string `pulumi:"domainNameLabelScope"`
}

// Describes a virtual machines network configuration's DNS settings.
type VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput {
	return o
}

// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput) DomainNameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse) string { return v.DomainNameLabel }).(pulumi.StringOutput)
}

// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse) *string {
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

type VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput() VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput) ToVirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput) Elem() VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse) VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse
		return ret
	}).(VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput)
}

// The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the domain name label and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput) DomainNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNameLabel
	}).(pulumi.StringPtrOutput)
}

// The Domain name label scope of the PublicIPAddress resources that will be created. The generated name label is the concatenation of the hashed domain name label with policy according to the domain name label scope and vm network profile unique ID.
func (o VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachinePublicIPAddressDnsSettingsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

// The instance view of a virtual machine run command.
type VirtualMachineRunCommandInstanceViewResponse struct {
	// Script end time.
	EndTime *string `pulumi:"endTime"`
	// Script error stream.
	Error *string `pulumi:"error"`
	// Communicate script configuration errors or execution messages.
	ExecutionMessage *string `pulumi:"executionMessage"`
	// Script execution status.
	ExecutionState *string `pulumi:"executionState"`
	// Exit code returned from script execution.
	ExitCode *int `pulumi:"exitCode"`
	// Script output stream.
	Output *string `pulumi:"output"`
	// Script start time.
	StartTime *string `pulumi:"startTime"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
}

// The instance view of a virtual machine run command.
type VirtualMachineRunCommandInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineRunCommandInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineRunCommandInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineRunCommandInstanceViewResponseOutput) ToVirtualMachineRunCommandInstanceViewResponseOutput() VirtualMachineRunCommandInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineRunCommandInstanceViewResponseOutput) ToVirtualMachineRunCommandInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineRunCommandInstanceViewResponseOutput {
	return o
}

// Script end time.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Script error stream.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Communicate script configuration errors or execution messages.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) ExecutionMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *string { return v.ExecutionMessage }).(pulumi.StringPtrOutput)
}

// Script execution status.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) ExecutionState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *string { return v.ExecutionState }).(pulumi.StringPtrOutput)
}

// Exit code returned from script execution.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// Script output stream.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *string { return v.Output }).(pulumi.StringPtrOutput)
}

// Script start time.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineRunCommandInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// Describes the script sources for run command. Use only one of script, scriptUri, commandId.
type VirtualMachineRunCommandScriptSource struct {
	// Specifies a commandId of predefined built-in script.
	CommandId *string `pulumi:"commandId"`
	// Specifies the script content to be executed on the VM.
	Script *string `pulumi:"script"`
	// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
	ScriptUri *string `pulumi:"scriptUri"`
	// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
	ScriptUriManagedIdentity *RunCommandManagedIdentity `pulumi:"scriptUriManagedIdentity"`
}

// VirtualMachineRunCommandScriptSourceInput is an input type that accepts VirtualMachineRunCommandScriptSourceArgs and VirtualMachineRunCommandScriptSourceOutput values.
// You can construct a concrete instance of `VirtualMachineRunCommandScriptSourceInput` via:
//
//	VirtualMachineRunCommandScriptSourceArgs{...}
type VirtualMachineRunCommandScriptSourceInput interface {
	pulumi.Input

	ToVirtualMachineRunCommandScriptSourceOutput() VirtualMachineRunCommandScriptSourceOutput
	ToVirtualMachineRunCommandScriptSourceOutputWithContext(context.Context) VirtualMachineRunCommandScriptSourceOutput
}

// Describes the script sources for run command. Use only one of script, scriptUri, commandId.
type VirtualMachineRunCommandScriptSourceArgs struct {
	// Specifies a commandId of predefined built-in script.
	CommandId pulumi.StringPtrInput `pulumi:"commandId"`
	// Specifies the script content to be executed on the VM.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
	ScriptUri pulumi.StringPtrInput `pulumi:"scriptUri"`
	// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
	ScriptUriManagedIdentity RunCommandManagedIdentityPtrInput `pulumi:"scriptUriManagedIdentity"`
}

func (VirtualMachineRunCommandScriptSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineRunCommandScriptSource)(nil)).Elem()
}

func (i VirtualMachineRunCommandScriptSourceArgs) ToVirtualMachineRunCommandScriptSourceOutput() VirtualMachineRunCommandScriptSourceOutput {
	return i.ToVirtualMachineRunCommandScriptSourceOutputWithContext(context.Background())
}

func (i VirtualMachineRunCommandScriptSourceArgs) ToVirtualMachineRunCommandScriptSourceOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineRunCommandScriptSourceOutput)
}

func (i VirtualMachineRunCommandScriptSourceArgs) ToVirtualMachineRunCommandScriptSourcePtrOutput() VirtualMachineRunCommandScriptSourcePtrOutput {
	return i.ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(context.Background())
}

func (i VirtualMachineRunCommandScriptSourceArgs) ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineRunCommandScriptSourceOutput).ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(ctx)
}

// VirtualMachineRunCommandScriptSourcePtrInput is an input type that accepts VirtualMachineRunCommandScriptSourceArgs, VirtualMachineRunCommandScriptSourcePtr and VirtualMachineRunCommandScriptSourcePtrOutput values.
// You can construct a concrete instance of `VirtualMachineRunCommandScriptSourcePtrInput` via:
//
//	        VirtualMachineRunCommandScriptSourceArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineRunCommandScriptSourcePtrInput interface {
	pulumi.Input

	ToVirtualMachineRunCommandScriptSourcePtrOutput() VirtualMachineRunCommandScriptSourcePtrOutput
	ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(context.Context) VirtualMachineRunCommandScriptSourcePtrOutput
}

type virtualMachineRunCommandScriptSourcePtrType VirtualMachineRunCommandScriptSourceArgs

func VirtualMachineRunCommandScriptSourcePtr(v *VirtualMachineRunCommandScriptSourceArgs) VirtualMachineRunCommandScriptSourcePtrInput {
	return (*virtualMachineRunCommandScriptSourcePtrType)(v)
}

func (*virtualMachineRunCommandScriptSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineRunCommandScriptSource)(nil)).Elem()
}

func (i *virtualMachineRunCommandScriptSourcePtrType) ToVirtualMachineRunCommandScriptSourcePtrOutput() VirtualMachineRunCommandScriptSourcePtrOutput {
	return i.ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(context.Background())
}

func (i *virtualMachineRunCommandScriptSourcePtrType) ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineRunCommandScriptSourcePtrOutput)
}

// Describes the script sources for run command. Use only one of script, scriptUri, commandId.
type VirtualMachineRunCommandScriptSourceOutput struct{ *pulumi.OutputState }

func (VirtualMachineRunCommandScriptSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineRunCommandScriptSource)(nil)).Elem()
}

func (o VirtualMachineRunCommandScriptSourceOutput) ToVirtualMachineRunCommandScriptSourceOutput() VirtualMachineRunCommandScriptSourceOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourceOutput) ToVirtualMachineRunCommandScriptSourceOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourceOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourceOutput) ToVirtualMachineRunCommandScriptSourcePtrOutput() VirtualMachineRunCommandScriptSourcePtrOutput {
	return o.ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(context.Background())
}

func (o VirtualMachineRunCommandScriptSourceOutput) ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineRunCommandScriptSource) *VirtualMachineRunCommandScriptSource {
		return &v
	}).(VirtualMachineRunCommandScriptSourcePtrOutput)
}

// Specifies a commandId of predefined built-in script.
func (o VirtualMachineRunCommandScriptSourceOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSource) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// Specifies the script content to be executed on the VM.
func (o VirtualMachineRunCommandScriptSourceOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSource) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
func (o VirtualMachineRunCommandScriptSourceOutput) ScriptUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSource) *string { return v.ScriptUri }).(pulumi.StringPtrOutput)
}

// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
func (o VirtualMachineRunCommandScriptSourceOutput) ScriptUriManagedIdentity() RunCommandManagedIdentityPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSource) *RunCommandManagedIdentity {
		return v.ScriptUriManagedIdentity
	}).(RunCommandManagedIdentityPtrOutput)
}

type VirtualMachineRunCommandScriptSourcePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineRunCommandScriptSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineRunCommandScriptSource)(nil)).Elem()
}

func (o VirtualMachineRunCommandScriptSourcePtrOutput) ToVirtualMachineRunCommandScriptSourcePtrOutput() VirtualMachineRunCommandScriptSourcePtrOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourcePtrOutput) ToVirtualMachineRunCommandScriptSourcePtrOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourcePtrOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourcePtrOutput) Elem() VirtualMachineRunCommandScriptSourceOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSource) VirtualMachineRunCommandScriptSource {
		if v != nil {
			return *v
		}
		var ret VirtualMachineRunCommandScriptSource
		return ret
	}).(VirtualMachineRunCommandScriptSourceOutput)
}

// Specifies a commandId of predefined built-in script.
func (o VirtualMachineRunCommandScriptSourcePtrOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSource) *string {
		if v == nil {
			return nil
		}
		return v.CommandId
	}).(pulumi.StringPtrOutput)
}

// Specifies the script content to be executed on the VM.
func (o VirtualMachineRunCommandScriptSourcePtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSource) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
func (o VirtualMachineRunCommandScriptSourcePtrOutput) ScriptUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSource) *string {
		if v == nil {
			return nil
		}
		return v.ScriptUri
	}).(pulumi.StringPtrOutput)
}

// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
func (o VirtualMachineRunCommandScriptSourcePtrOutput) ScriptUriManagedIdentity() RunCommandManagedIdentityPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSource) *RunCommandManagedIdentity {
		if v == nil {
			return nil
		}
		return v.ScriptUriManagedIdentity
	}).(RunCommandManagedIdentityPtrOutput)
}

// Describes the script sources for run command. Use only one of script, scriptUri, commandId.
type VirtualMachineRunCommandScriptSourceResponse struct {
	// Specifies a commandId of predefined built-in script.
	CommandId *string `pulumi:"commandId"`
	// Specifies the script content to be executed on the VM.
	Script *string `pulumi:"script"`
	// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
	ScriptUri *string `pulumi:"scriptUri"`
	// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
	ScriptUriManagedIdentity *RunCommandManagedIdentityResponse `pulumi:"scriptUriManagedIdentity"`
}

// Describes the script sources for run command. Use only one of script, scriptUri, commandId.
type VirtualMachineRunCommandScriptSourceResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineRunCommandScriptSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineRunCommandScriptSourceResponse)(nil)).Elem()
}

func (o VirtualMachineRunCommandScriptSourceResponseOutput) ToVirtualMachineRunCommandScriptSourceResponseOutput() VirtualMachineRunCommandScriptSourceResponseOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourceResponseOutput) ToVirtualMachineRunCommandScriptSourceResponseOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourceResponseOutput {
	return o
}

// Specifies a commandId of predefined built-in script.
func (o VirtualMachineRunCommandScriptSourceResponseOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSourceResponse) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// Specifies the script content to be executed on the VM.
func (o VirtualMachineRunCommandScriptSourceResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSourceResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
func (o VirtualMachineRunCommandScriptSourceResponseOutput) ScriptUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSourceResponse) *string { return v.ScriptUri }).(pulumi.StringPtrOutput)
}

// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
func (o VirtualMachineRunCommandScriptSourceResponseOutput) ScriptUriManagedIdentity() RunCommandManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineRunCommandScriptSourceResponse) *RunCommandManagedIdentityResponse {
		return v.ScriptUriManagedIdentity
	}).(RunCommandManagedIdentityResponsePtrOutput)
}

type VirtualMachineRunCommandScriptSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineRunCommandScriptSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineRunCommandScriptSourceResponse)(nil)).Elem()
}

func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) ToVirtualMachineRunCommandScriptSourceResponsePtrOutput() VirtualMachineRunCommandScriptSourceResponsePtrOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) ToVirtualMachineRunCommandScriptSourceResponsePtrOutputWithContext(ctx context.Context) VirtualMachineRunCommandScriptSourceResponsePtrOutput {
	return o
}

func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) Elem() VirtualMachineRunCommandScriptSourceResponseOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSourceResponse) VirtualMachineRunCommandScriptSourceResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineRunCommandScriptSourceResponse
		return ret
	}).(VirtualMachineRunCommandScriptSourceResponseOutput)
}

// Specifies a commandId of predefined built-in script.
func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.CommandId
	}).(pulumi.StringPtrOutput)
}

// Specifies the script content to be executed on the VM.
func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI.
func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) ScriptUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptUri
	}).(pulumi.StringPtrOutput)
}

// User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
func (o VirtualMachineRunCommandScriptSourceResponsePtrOutput) ScriptUriManagedIdentity() RunCommandManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineRunCommandScriptSourceResponse) *RunCommandManagedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.ScriptUriManagedIdentity
	}).(RunCommandManagedIdentityResponsePtrOutput)
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDisk struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *CachingTypes `pulumi:"caching"`
	// The create option.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.<br><br> The default value is set to **Delete**.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite *float64 `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *float64 `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// VirtualMachineScaleSetDataDiskInput is an input type that accepts VirtualMachineScaleSetDataDiskArgs and VirtualMachineScaleSetDataDiskOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetDataDiskInput` via:
//
//	VirtualMachineScaleSetDataDiskArgs{...}
type VirtualMachineScaleSetDataDiskInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetDataDiskOutput() VirtualMachineScaleSetDataDiskOutput
	ToVirtualMachineScaleSetDataDiskOutputWithContext(context.Context) VirtualMachineScaleSetDataDiskOutput
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskArgs struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching CachingTypesPtrInput `pulumi:"caching"`
	// The create option.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.<br><br> The default value is set to **Delete**.
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite pulumi.Float64PtrInput `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite pulumi.Float64PtrInput `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk VirtualMachineScaleSetManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (VirtualMachineScaleSetDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetDataDisk)(nil)).Elem()
}

func (i VirtualMachineScaleSetDataDiskArgs) ToVirtualMachineScaleSetDataDiskOutput() VirtualMachineScaleSetDataDiskOutput {
	return i.ToVirtualMachineScaleSetDataDiskOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetDataDiskArgs) ToVirtualMachineScaleSetDataDiskOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetDataDiskOutput)
}

// VirtualMachineScaleSetDataDiskArrayInput is an input type that accepts VirtualMachineScaleSetDataDiskArray and VirtualMachineScaleSetDataDiskArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetDataDiskArrayInput` via:
//
//	VirtualMachineScaleSetDataDiskArray{ VirtualMachineScaleSetDataDiskArgs{...} }
type VirtualMachineScaleSetDataDiskArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetDataDiskArrayOutput() VirtualMachineScaleSetDataDiskArrayOutput
	ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(context.Context) VirtualMachineScaleSetDataDiskArrayOutput
}

type VirtualMachineScaleSetDataDiskArray []VirtualMachineScaleSetDataDiskInput

func (VirtualMachineScaleSetDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetDataDisk)(nil)).Elem()
}

func (i VirtualMachineScaleSetDataDiskArray) ToVirtualMachineScaleSetDataDiskArrayOutput() VirtualMachineScaleSetDataDiskArrayOutput {
	return i.ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetDataDiskArray) ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetDataDiskArrayOutput)
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetDataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetDataDisk)(nil)).Elem()
}

func (o VirtualMachineScaleSetDataDiskOutput) ToVirtualMachineScaleSetDataDiskOutput() VirtualMachineScaleSetDataDiskOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskOutput) ToVirtualMachineScaleSetDataDiskOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskOutput {
	return o
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o VirtualMachineScaleSetDataDiskOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *CachingTypes { return v.Caching }).(CachingTypesPtrOutput)
}

// The create option.
func (o VirtualMachineScaleSetDataDiskOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.<br><br> The default value is set to **Delete**.
func (o VirtualMachineScaleSetDataDiskOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
func (o VirtualMachineScaleSetDataDiskOutput) DiskIOPSReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *float64 { return v.DiskIOPSReadWrite }).(pulumi.Float64PtrOutput)
}

// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
func (o VirtualMachineScaleSetDataDiskOutput) DiskMBpsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *float64 { return v.DiskMBpsReadWrite }).(pulumi.Float64PtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o VirtualMachineScaleSetDataDiskOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o VirtualMachineScaleSetDataDiskOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) int { return v.Lun }).(pulumi.IntOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetDataDiskOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *VirtualMachineScaleSetManagedDiskParameters {
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersPtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetDataDiskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetDataDiskOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDisk) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetDataDiskArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetDataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetDataDisk)(nil)).Elem()
}

func (o VirtualMachineScaleSetDataDiskArrayOutput) ToVirtualMachineScaleSetDataDiskArrayOutput() VirtualMachineScaleSetDataDiskArrayOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskArrayOutput) ToVirtualMachineScaleSetDataDiskArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskArrayOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetDataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetDataDisk {
		return vs[0].([]VirtualMachineScaleSetDataDisk)[vs[1].(int)]
	}).(VirtualMachineScaleSetDataDiskOutput)
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskResponse struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *string `pulumi:"caching"`
	// The create option.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.<br><br> The default value is set to **Delete**.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite *float64 `pulumi:"diskIOPSReadWrite"`
	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *float64 `pulumi:"diskMBpsReadWrite"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
	Lun int `pulumi:"lun"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDiskResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetDataDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetDataDiskResponseOutput) ToVirtualMachineScaleSetDataDiskResponseOutput() VirtualMachineScaleSetDataDiskResponseOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskResponseOutput) ToVirtualMachineScaleSetDataDiskResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskResponseOutput {
	return o
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o VirtualMachineScaleSetDataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// The create option.
func (o VirtualMachineScaleSetDataDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).<br><br> Possible values: <br><br> **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.<br><br> The default value is set to **Delete**.
func (o VirtualMachineScaleSetDataDiskResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
func (o VirtualMachineScaleSetDataDiskResponseOutput) DiskIOPSReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *float64 { return v.DiskIOPSReadWrite }).(pulumi.Float64PtrOutput)
}

// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
func (o VirtualMachineScaleSetDataDiskResponseOutput) DiskMBpsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *float64 { return v.DiskMBpsReadWrite }).(pulumi.Float64PtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o VirtualMachineScaleSetDataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
func (o VirtualMachineScaleSetDataDiskResponseOutput) Lun() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) int { return v.Lun }).(pulumi.IntOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetDataDiskResponseOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetDataDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetDataDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetDataDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetDataDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetDataDiskResponseArrayOutput) ToVirtualMachineScaleSetDataDiskResponseArrayOutput() VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskResponseArrayOutput) ToVirtualMachineScaleSetDataDiskResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetDataDiskResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetDataDiskResponse {
		return vs[0].([]VirtualMachineScaleSetDataDiskResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetDataDiskResponseOutput)
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionType struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Resource name
	Name *string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault *KeyVaultSecretReference `pulumi:"protectedSettingsFromKeyVault"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string `pulumi:"provisionAfterExtensions"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool `pulumi:"suppressFailures"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// VirtualMachineScaleSetExtensionTypeInput is an input type that accepts VirtualMachineScaleSetExtensionTypeArgs and VirtualMachineScaleSetExtensionTypeOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionTypeInput` via:
//
//	VirtualMachineScaleSetExtensionTypeArgs{...}
type VirtualMachineScaleSetExtensionTypeInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionTypeOutput() VirtualMachineScaleSetExtensionTypeOutput
	ToVirtualMachineScaleSetExtensionTypeOutputWithContext(context.Context) VirtualMachineScaleSetExtensionTypeOutput
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionTypeArgs struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion pulumi.BoolPtrInput `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade pulumi.BoolPtrInput `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag pulumi.StringPtrInput `pulumi:"forceUpdateTag"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings pulumi.Input `pulumi:"protectedSettings"`
	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault KeyVaultSecretReferencePtrInput `pulumi:"protectedSettingsFromKeyVault"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions pulumi.StringArrayInput `pulumi:"provisionAfterExtensions"`
	// The name of the extension handler publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings pulumi.Input `pulumi:"settings"`
	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures pulumi.BoolPtrInput `pulumi:"suppressFailures"`
	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion pulumi.StringPtrInput `pulumi:"typeHandlerVersion"`
}

func (VirtualMachineScaleSetExtensionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionType)(nil)).Elem()
}

func (i VirtualMachineScaleSetExtensionTypeArgs) ToVirtualMachineScaleSetExtensionTypeOutput() VirtualMachineScaleSetExtensionTypeOutput {
	return i.ToVirtualMachineScaleSetExtensionTypeOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionTypeArgs) ToVirtualMachineScaleSetExtensionTypeOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionTypeOutput)
}

// VirtualMachineScaleSetExtensionTypeArrayInput is an input type that accepts VirtualMachineScaleSetExtensionTypeArray and VirtualMachineScaleSetExtensionTypeArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionTypeArrayInput` via:
//
//	VirtualMachineScaleSetExtensionTypeArray{ VirtualMachineScaleSetExtensionTypeArgs{...} }
type VirtualMachineScaleSetExtensionTypeArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionTypeArrayOutput() VirtualMachineScaleSetExtensionTypeArrayOutput
	ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(context.Context) VirtualMachineScaleSetExtensionTypeArrayOutput
}

type VirtualMachineScaleSetExtensionTypeArray []VirtualMachineScaleSetExtensionTypeInput

func (VirtualMachineScaleSetExtensionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetExtensionType)(nil)).Elem()
}

func (i VirtualMachineScaleSetExtensionTypeArray) ToVirtualMachineScaleSetExtensionTypeArrayOutput() VirtualMachineScaleSetExtensionTypeArrayOutput {
	return i.ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionTypeArray) ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionTypeArrayOutput)
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionTypeOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionType)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionTypeOutput) ToVirtualMachineScaleSetExtensionTypeOutput() VirtualMachineScaleSetExtensionTypeOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionTypeOutput) ToVirtualMachineScaleSetExtensionTypeOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionTypeOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o VirtualMachineScaleSetExtensionTypeOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
func (o VirtualMachineScaleSetExtensionTypeOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
func (o VirtualMachineScaleSetExtensionTypeOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Resource name
func (o VirtualMachineScaleSetExtensionTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o VirtualMachineScaleSetExtensionTypeOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// The extensions protected settings that are passed by reference, and consumed from key vault
func (o VirtualMachineScaleSetExtensionTypeOutput) ProtectedSettingsFromKeyVault() KeyVaultSecretReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *KeyVaultSecretReference {
		return v.ProtectedSettingsFromKeyVault
	}).(KeyVaultSecretReferencePtrOutput)
}

// Collection of extension names after which this extension needs to be provisioned.
func (o VirtualMachineScaleSetExtensionTypeOutput) ProvisionAfterExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) []string { return v.ProvisionAfterExtensions }).(pulumi.StringArrayOutput)
}

// The name of the extension handler publisher.
func (o VirtualMachineScaleSetExtensionTypeOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o VirtualMachineScaleSetExtensionTypeOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
func (o VirtualMachineScaleSetExtensionTypeOutput) SuppressFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *bool { return v.SuppressFailures }).(pulumi.BoolPtrOutput)
}

// Specifies the type of the extension; an example is "CustomScriptExtension".
func (o VirtualMachineScaleSetExtensionTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineScaleSetExtensionTypeOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionType) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetExtensionTypeArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetExtensionType)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionTypeArrayOutput) ToVirtualMachineScaleSetExtensionTypeArrayOutput() VirtualMachineScaleSetExtensionTypeArrayOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionTypeArrayOutput) ToVirtualMachineScaleSetExtensionTypeArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionTypeArrayOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionTypeArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetExtensionTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetExtensionType {
		return vs[0].([]VirtualMachineScaleSetExtensionType)[vs[1].(int)]
	}).(VirtualMachineScaleSetExtensionTypeOutput)
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfile struct {
	// The virtual machine scale set child extension resources.
	Extensions []VirtualMachineScaleSetExtensionType `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
}

// VirtualMachineScaleSetExtensionProfileInput is an input type that accepts VirtualMachineScaleSetExtensionProfileArgs and VirtualMachineScaleSetExtensionProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionProfileInput` via:
//
//	VirtualMachineScaleSetExtensionProfileArgs{...}
type VirtualMachineScaleSetExtensionProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionProfileOutput() VirtualMachineScaleSetExtensionProfileOutput
	ToVirtualMachineScaleSetExtensionProfileOutputWithContext(context.Context) VirtualMachineScaleSetExtensionProfileOutput
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileArgs struct {
	// The virtual machine scale set child extension resources.
	Extensions VirtualMachineScaleSetExtensionTypeArrayInput `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
	ExtensionsTimeBudget pulumi.StringPtrInput `pulumi:"extensionsTimeBudget"`
}

func (VirtualMachineScaleSetExtensionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfileOutput() VirtualMachineScaleSetExtensionProfileOutput {
	return i.ToVirtualMachineScaleSetExtensionProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionProfileOutput)
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return i.ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetExtensionProfileArgs) ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionProfileOutput).ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetExtensionProfilePtrInput is an input type that accepts VirtualMachineScaleSetExtensionProfileArgs, VirtualMachineScaleSetExtensionProfilePtr and VirtualMachineScaleSetExtensionProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetExtensionProfilePtrInput` via:
//
//	        VirtualMachineScaleSetExtensionProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetExtensionProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput
	ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput
}

type virtualMachineScaleSetExtensionProfilePtrType VirtualMachineScaleSetExtensionProfileArgs

func VirtualMachineScaleSetExtensionProfilePtr(v *VirtualMachineScaleSetExtensionProfileArgs) VirtualMachineScaleSetExtensionProfilePtrInput {
	return (*virtualMachineScaleSetExtensionProfilePtrType)(v)
}

func (*virtualMachineScaleSetExtensionProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetExtensionProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetExtensionProfilePtrType) ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return i.ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetExtensionProfilePtrType) ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetExtensionProfilePtrOutput)
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionProfileOutput) ToVirtualMachineScaleSetExtensionProfileOutput() VirtualMachineScaleSetExtensionProfileOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileOutput) ToVirtualMachineScaleSetExtensionProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileOutput) ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return o.ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetExtensionProfileOutput) ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetExtensionProfile) *VirtualMachineScaleSetExtensionProfile {
		return &v
	}).(VirtualMachineScaleSetExtensionProfilePtrOutput)
}

// The virtual machine scale set child extension resources.
func (o VirtualMachineScaleSetExtensionProfileOutput) Extensions() VirtualMachineScaleSetExtensionTypeArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfile) []VirtualMachineScaleSetExtensionType {
		return v.Extensions
	}).(VirtualMachineScaleSetExtensionTypeArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetExtensionProfileOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfile) *string { return v.ExtensionsTimeBudget }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetExtensionProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetExtensionProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionProfilePtrOutput) ToVirtualMachineScaleSetExtensionProfilePtrOutput() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfilePtrOutput) ToVirtualMachineScaleSetExtensionProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfilePtrOutput) Elem() VirtualMachineScaleSetExtensionProfileOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfile) VirtualMachineScaleSetExtensionProfile {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetExtensionProfile
		return ret
	}).(VirtualMachineScaleSetExtensionProfileOutput)
}

// The virtual machine scale set child extension resources.
func (o VirtualMachineScaleSetExtensionProfilePtrOutput) Extensions() VirtualMachineScaleSetExtensionTypeArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfile) []VirtualMachineScaleSetExtensionType {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(VirtualMachineScaleSetExtensionTypeArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetExtensionProfilePtrOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfile) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionsTimeBudget
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileResponse struct {
	// The virtual machine scale set child extension resources.
	Extensions []VirtualMachineScaleSetExtensionResponse `pulumi:"extensions"`
	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
	ExtensionsTimeBudget *string `pulumi:"extensionsTimeBudget"`
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ToVirtualMachineScaleSetExtensionProfileResponseOutput() VirtualMachineScaleSetExtensionProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ToVirtualMachineScaleSetExtensionProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileResponseOutput {
	return o
}

// The virtual machine scale set child extension resources.
func (o VirtualMachineScaleSetExtensionProfileResponseOutput) Extensions() VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfileResponse) []VirtualMachineScaleSetExtensionResponse {
		return v.Extensions
	}).(VirtualMachineScaleSetExtensionResponseArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetExtensionProfileResponseOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionProfileResponse) *string { return v.ExtensionsTimeBudget }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetExtensionProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetExtensionProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ToVirtualMachineScaleSetExtensionProfileResponsePtrOutput() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ToVirtualMachineScaleSetExtensionProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) Elem() VirtualMachineScaleSetExtensionProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfileResponse) VirtualMachineScaleSetExtensionProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetExtensionProfileResponse
		return ret
	}).(VirtualMachineScaleSetExtensionProfileResponseOutput)
}

// The virtual machine scale set child extension resources.
func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) Extensions() VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfileResponse) []VirtualMachineScaleSetExtensionResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(VirtualMachineScaleSetExtensionResponseArrayOutput)
}

// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetExtensionProfileResponsePtrOutput) ExtensionsTimeBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetExtensionProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionsTimeBudget
	}).(pulumi.StringPtrOutput)
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionResponse struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault *KeyVaultSecretReferenceResponse `pulumi:"protectedSettingsFromKeyVault"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string `pulumi:"provisionAfterExtensions"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool `pulumi:"suppressFailures"`
	// Resource type
	Type string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionResponseOutput) ToVirtualMachineScaleSetExtensionResponseOutput() VirtualMachineScaleSetExtensionResponseOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionResponseOutput) ToVirtualMachineScaleSetExtensionResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionResponseOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o VirtualMachineScaleSetExtensionResponseOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
func (o VirtualMachineScaleSetExtensionResponseOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
func (o VirtualMachineScaleSetExtensionResponseOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o VirtualMachineScaleSetExtensionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o VirtualMachineScaleSetExtensionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o VirtualMachineScaleSetExtensionResponseOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// The extensions protected settings that are passed by reference, and consumed from key vault
func (o VirtualMachineScaleSetExtensionResponseOutput) ProtectedSettingsFromKeyVault() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *KeyVaultSecretReferenceResponse {
		return v.ProtectedSettingsFromKeyVault
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Collection of extension names after which this extension needs to be provisioned.
func (o VirtualMachineScaleSetExtensionResponseOutput) ProvisionAfterExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) []string { return v.ProvisionAfterExtensions }).(pulumi.StringArrayOutput)
}

// The provisioning state, which only appears in the response.
func (o VirtualMachineScaleSetExtensionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o VirtualMachineScaleSetExtensionResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o VirtualMachineScaleSetExtensionResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
func (o VirtualMachineScaleSetExtensionResponseOutput) SuppressFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *bool { return v.SuppressFailures }).(pulumi.BoolPtrOutput)
}

// Resource type
func (o VirtualMachineScaleSetExtensionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the version of the script handler.
func (o VirtualMachineScaleSetExtensionResponseOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetExtensionResponse) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetExtensionResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetExtensionResponseArrayOutput) ToVirtualMachineScaleSetExtensionResponseArrayOutput() VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionResponseArrayOutput) ToVirtualMachineScaleSetExtensionResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetExtensionResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetExtensionResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetExtensionResponse {
		return vs[0].([]VirtualMachineScaleSetExtensionResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetExtensionResponseOutput)
}

// Specifies the hardware settings for the virtual machine scale set.
type VirtualMachineScaleSetHardwareProfile struct {
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
	VmSizeProperties *VMSizeProperties `pulumi:"vmSizeProperties"`
}

// VirtualMachineScaleSetHardwareProfileInput is an input type that accepts VirtualMachineScaleSetHardwareProfileArgs and VirtualMachineScaleSetHardwareProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetHardwareProfileInput` via:
//
//	VirtualMachineScaleSetHardwareProfileArgs{...}
type VirtualMachineScaleSetHardwareProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetHardwareProfileOutput() VirtualMachineScaleSetHardwareProfileOutput
	ToVirtualMachineScaleSetHardwareProfileOutputWithContext(context.Context) VirtualMachineScaleSetHardwareProfileOutput
}

// Specifies the hardware settings for the virtual machine scale set.
type VirtualMachineScaleSetHardwareProfileArgs struct {
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
	VmSizeProperties VMSizePropertiesPtrInput `pulumi:"vmSizeProperties"`
}

func (VirtualMachineScaleSetHardwareProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetHardwareProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetHardwareProfileArgs) ToVirtualMachineScaleSetHardwareProfileOutput() VirtualMachineScaleSetHardwareProfileOutput {
	return i.ToVirtualMachineScaleSetHardwareProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetHardwareProfileArgs) ToVirtualMachineScaleSetHardwareProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetHardwareProfileOutput)
}

func (i VirtualMachineScaleSetHardwareProfileArgs) ToVirtualMachineScaleSetHardwareProfilePtrOutput() VirtualMachineScaleSetHardwareProfilePtrOutput {
	return i.ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetHardwareProfileArgs) ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetHardwareProfileOutput).ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetHardwareProfilePtrInput is an input type that accepts VirtualMachineScaleSetHardwareProfileArgs, VirtualMachineScaleSetHardwareProfilePtr and VirtualMachineScaleSetHardwareProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetHardwareProfilePtrInput` via:
//
//	        VirtualMachineScaleSetHardwareProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetHardwareProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetHardwareProfilePtrOutput() VirtualMachineScaleSetHardwareProfilePtrOutput
	ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetHardwareProfilePtrOutput
}

type virtualMachineScaleSetHardwareProfilePtrType VirtualMachineScaleSetHardwareProfileArgs

func VirtualMachineScaleSetHardwareProfilePtr(v *VirtualMachineScaleSetHardwareProfileArgs) VirtualMachineScaleSetHardwareProfilePtrInput {
	return (*virtualMachineScaleSetHardwareProfilePtrType)(v)
}

func (*virtualMachineScaleSetHardwareProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetHardwareProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetHardwareProfilePtrType) ToVirtualMachineScaleSetHardwareProfilePtrOutput() VirtualMachineScaleSetHardwareProfilePtrOutput {
	return i.ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetHardwareProfilePtrType) ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetHardwareProfilePtrOutput)
}

// Specifies the hardware settings for the virtual machine scale set.
type VirtualMachineScaleSetHardwareProfileOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetHardwareProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetHardwareProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetHardwareProfileOutput) ToVirtualMachineScaleSetHardwareProfileOutput() VirtualMachineScaleSetHardwareProfileOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfileOutput) ToVirtualMachineScaleSetHardwareProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfileOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfileOutput) ToVirtualMachineScaleSetHardwareProfilePtrOutput() VirtualMachineScaleSetHardwareProfilePtrOutput {
	return o.ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetHardwareProfileOutput) ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetHardwareProfile) *VirtualMachineScaleSetHardwareProfile {
		return &v
	}).(VirtualMachineScaleSetHardwareProfilePtrOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o VirtualMachineScaleSetHardwareProfileOutput) VmSizeProperties() VMSizePropertiesPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetHardwareProfile) *VMSizeProperties { return v.VmSizeProperties }).(VMSizePropertiesPtrOutput)
}

type VirtualMachineScaleSetHardwareProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetHardwareProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetHardwareProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetHardwareProfilePtrOutput) ToVirtualMachineScaleSetHardwareProfilePtrOutput() VirtualMachineScaleSetHardwareProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfilePtrOutput) ToVirtualMachineScaleSetHardwareProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfilePtrOutput) Elem() VirtualMachineScaleSetHardwareProfileOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetHardwareProfile) VirtualMachineScaleSetHardwareProfile {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetHardwareProfile
		return ret
	}).(VirtualMachineScaleSetHardwareProfileOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o VirtualMachineScaleSetHardwareProfilePtrOutput) VmSizeProperties() VMSizePropertiesPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetHardwareProfile) *VMSizeProperties {
		if v == nil {
			return nil
		}
		return v.VmSizeProperties
	}).(VMSizePropertiesPtrOutput)
}

// Specifies the hardware settings for the virtual machine scale set.
type VirtualMachineScaleSetHardwareProfileResponse struct {
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
	VmSizeProperties *VMSizePropertiesResponse `pulumi:"vmSizeProperties"`
}

// Specifies the hardware settings for the virtual machine scale set.
type VirtualMachineScaleSetHardwareProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetHardwareProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetHardwareProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetHardwareProfileResponseOutput) ToVirtualMachineScaleSetHardwareProfileResponseOutput() VirtualMachineScaleSetHardwareProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfileResponseOutput) ToVirtualMachineScaleSetHardwareProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfileResponseOutput {
	return o
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o VirtualMachineScaleSetHardwareProfileResponseOutput) VmSizeProperties() VMSizePropertiesResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetHardwareProfileResponse) *VMSizePropertiesResponse {
		return v.VmSizeProperties
	}).(VMSizePropertiesResponsePtrOutput)
}

type VirtualMachineScaleSetHardwareProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetHardwareProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetHardwareProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetHardwareProfileResponsePtrOutput) ToVirtualMachineScaleSetHardwareProfileResponsePtrOutput() VirtualMachineScaleSetHardwareProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfileResponsePtrOutput) ToVirtualMachineScaleSetHardwareProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetHardwareProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetHardwareProfileResponsePtrOutput) Elem() VirtualMachineScaleSetHardwareProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetHardwareProfileResponse) VirtualMachineScaleSetHardwareProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetHardwareProfileResponse
		return ret
	}).(VirtualMachineScaleSetHardwareProfileResponseOutput)
}

// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01. Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details.
func (o VirtualMachineScaleSetHardwareProfileResponsePtrOutput) VmSizeProperties() VMSizePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetHardwareProfileResponse) *VMSizePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.VmSizeProperties
	}).(VMSizePropertiesResponsePtrOutput)
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfiguration struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResource `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResource `pulumi:"applicationSecurityGroups"`
	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerBackendAddressPools []SubResource `pulumi:"loadBalancerBackendAddressPools"`
	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerInboundNatPools []SubResource `pulumi:"loadBalancerInboundNatPools"`
	// The IP configuration name.
	Name string `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *string `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetPublicIPAddressConfiguration `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet *ApiEntityReference `pulumi:"subnet"`
}

// VirtualMachineScaleSetIPConfigurationInput is an input type that accepts VirtualMachineScaleSetIPConfigurationArgs and VirtualMachineScaleSetIPConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIPConfigurationInput` via:
//
//	VirtualMachineScaleSetIPConfigurationArgs{...}
type VirtualMachineScaleSetIPConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIPConfigurationOutput() VirtualMachineScaleSetIPConfigurationOutput
	ToVirtualMachineScaleSetIPConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetIPConfigurationOutput
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationArgs struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools SubResourceArrayInput `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups SubResourceArrayInput `pulumi:"applicationSecurityGroups"`
	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerBackendAddressPools SubResourceArrayInput `pulumi:"loadBalancerBackendAddressPools"`
	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerInboundNatPools SubResourceArrayInput `pulumi:"loadBalancerInboundNatPools"`
	// The IP configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion pulumi.StringPtrInput `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet ApiEntityReferencePtrInput `pulumi:"subnet"`
}

func (VirtualMachineScaleSetIPConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIPConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetIPConfigurationArgs) ToVirtualMachineScaleSetIPConfigurationOutput() VirtualMachineScaleSetIPConfigurationOutput {
	return i.ToVirtualMachineScaleSetIPConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIPConfigurationArgs) ToVirtualMachineScaleSetIPConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIPConfigurationOutput)
}

// VirtualMachineScaleSetIPConfigurationArrayInput is an input type that accepts VirtualMachineScaleSetIPConfigurationArray and VirtualMachineScaleSetIPConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIPConfigurationArrayInput` via:
//
//	VirtualMachineScaleSetIPConfigurationArray{ VirtualMachineScaleSetIPConfigurationArgs{...} }
type VirtualMachineScaleSetIPConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIPConfigurationArrayOutput() VirtualMachineScaleSetIPConfigurationArrayOutput
	ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(context.Context) VirtualMachineScaleSetIPConfigurationArrayOutput
}

type VirtualMachineScaleSetIPConfigurationArray []VirtualMachineScaleSetIPConfigurationInput

func (VirtualMachineScaleSetIPConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIPConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetIPConfigurationArray) ToVirtualMachineScaleSetIPConfigurationArrayOutput() VirtualMachineScaleSetIPConfigurationArrayOutput {
	return i.ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIPConfigurationArray) ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIPConfigurationArrayOutput)
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIPConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIPConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetIPConfigurationOutput) ToVirtualMachineScaleSetIPConfigurationOutput() VirtualMachineScaleSetIPConfigurationOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationOutput) ToVirtualMachineScaleSetIPConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationOutput {
	return o
}

// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
func (o VirtualMachineScaleSetIPConfigurationOutput) ApplicationGatewayBackendAddressPools() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) []SubResource {
		return v.ApplicationGatewayBackendAddressPools
	}).(SubResourceArrayOutput)
}

// Specifies an array of references to application security group.
func (o VirtualMachineScaleSetIPConfigurationOutput) ApplicationSecurityGroups() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) []SubResource { return v.ApplicationSecurityGroups }).(SubResourceArrayOutput)
}

// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
func (o VirtualMachineScaleSetIPConfigurationOutput) LoadBalancerBackendAddressPools() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) []SubResource { return v.LoadBalancerBackendAddressPools }).(SubResourceArrayOutput)
}

// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
func (o VirtualMachineScaleSetIPConfigurationOutput) LoadBalancerInboundNatPools() SubResourceArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) []SubResource { return v.LoadBalancerInboundNatPools }).(SubResourceArrayOutput)
}

// The IP configuration name.
func (o VirtualMachineScaleSetIPConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineScaleSetIPConfigurationOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetIPConfigurationOutput) PrivateIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) *string { return v.PrivateIPAddressVersion }).(pulumi.StringPtrOutput)
}

// The publicIPAddressConfiguration.
func (o VirtualMachineScaleSetIPConfigurationOutput) PublicIPAddressConfiguration() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) *VirtualMachineScaleSetPublicIPAddressConfiguration {
		return v.PublicIPAddressConfiguration
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput)
}

// Specifies the identifier of the subnet.
func (o VirtualMachineScaleSetIPConfigurationOutput) Subnet() ApiEntityReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfiguration) *ApiEntityReference { return v.Subnet }).(ApiEntityReferencePtrOutput)
}

type VirtualMachineScaleSetIPConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIPConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIPConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetIPConfigurationArrayOutput) ToVirtualMachineScaleSetIPConfigurationArrayOutput() VirtualMachineScaleSetIPConfigurationArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationArrayOutput) ToVirtualMachineScaleSetIPConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetIPConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIPConfiguration {
		return vs[0].([]VirtualMachineScaleSetIPConfiguration)[vs[1].(int)]
	}).(VirtualMachineScaleSetIPConfigurationOutput)
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationResponse struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResourceResponse `pulumi:"applicationGatewayBackendAddressPools"`
	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResourceResponse `pulumi:"applicationSecurityGroups"`
	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerBackendAddressPools []SubResourceResponse `pulumi:"loadBalancerBackendAddressPools"`
	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
	LoadBalancerInboundNatPools []SubResourceResponse `pulumi:"loadBalancerInboundNatPools"`
	// The IP configuration name.
	Name string `pulumi:"name"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *string `pulumi:"privateIPAddressVersion"`
	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetPublicIPAddressConfigurationResponse `pulumi:"publicIPAddressConfiguration"`
	// Specifies the identifier of the subnet.
	Subnet *ApiEntityReferenceResponse `pulumi:"subnet"`
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIPConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIPConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ToVirtualMachineScaleSetIPConfigurationResponseOutput() VirtualMachineScaleSetIPConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ToVirtualMachineScaleSetIPConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationResponseOutput {
	return o
}

// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ApplicationGatewayBackendAddressPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.ApplicationGatewayBackendAddressPools
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to application security group.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) ApplicationSecurityGroups() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.ApplicationSecurityGroups
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) LoadBalancerBackendAddressPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.LoadBalancerBackendAddressPools
	}).(SubResourceResponseArrayOutput)
}

// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) LoadBalancerInboundNatPools() SubResourceResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) []SubResourceResponse {
		return v.LoadBalancerInboundNatPools
	}).(SubResourceResponseArrayOutput)
}

// The IP configuration name.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) PrivateIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *string { return v.PrivateIPAddressVersion }).(pulumi.StringPtrOutput)
}

// The publicIPAddressConfiguration.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) PublicIPAddressConfiguration() VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationResponse {
		return v.PublicIPAddressConfiguration
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput)
}

// Specifies the identifier of the subnet.
func (o VirtualMachineScaleSetIPConfigurationResponseOutput) Subnet() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIPConfigurationResponse) *ApiEntityReferenceResponse { return v.Subnet }).(ApiEntityReferenceResponsePtrOutput)
}

type VirtualMachineScaleSetIPConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIPConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIPConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIPConfigurationResponseArrayOutput) ToVirtualMachineScaleSetIPConfigurationResponseArrayOutput() VirtualMachineScaleSetIPConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationResponseArrayOutput) ToVirtualMachineScaleSetIPConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIPConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIPConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetIPConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIPConfigurationResponse {
		return vs[0].([]VirtualMachineScaleSetIPConfigurationResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetIPConfigurationResponseOutput)
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentity struct {
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// VirtualMachineScaleSetIdentityInput is an input type that accepts VirtualMachineScaleSetIdentityArgs and VirtualMachineScaleSetIdentityOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIdentityInput` via:
//
//	VirtualMachineScaleSetIdentityArgs{...}
type VirtualMachineScaleSetIdentityInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIdentityOutput() VirtualMachineScaleSetIdentityOutput
	ToVirtualMachineScaleSetIdentityOutputWithContext(context.Context) VirtualMachineScaleSetIdentityOutput
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityArgs struct {
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (VirtualMachineScaleSetIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIdentity)(nil)).Elem()
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityOutput() VirtualMachineScaleSetIdentityOutput {
	return i.ToVirtualMachineScaleSetIdentityOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIdentityOutput)
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput {
	return i.ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIdentityArgs) ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIdentityOutput).ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetIdentityPtrInput is an input type that accepts VirtualMachineScaleSetIdentityArgs, VirtualMachineScaleSetIdentityPtr and VirtualMachineScaleSetIdentityPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIdentityPtrInput` via:
//
//	        VirtualMachineScaleSetIdentityArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetIdentityPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput
	ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Context) VirtualMachineScaleSetIdentityPtrOutput
}

type virtualMachineScaleSetIdentityPtrType VirtualMachineScaleSetIdentityArgs

func VirtualMachineScaleSetIdentityPtr(v *VirtualMachineScaleSetIdentityArgs) VirtualMachineScaleSetIdentityPtrInput {
	return (*virtualMachineScaleSetIdentityPtrType)(v)
}

func (*virtualMachineScaleSetIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetIdentity)(nil)).Elem()
}

func (i *virtualMachineScaleSetIdentityPtrType) ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput {
	return i.ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetIdentityPtrType) ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIdentityPtrOutput)
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIdentity)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityOutput) ToVirtualMachineScaleSetIdentityOutput() VirtualMachineScaleSetIdentityOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityOutput) ToVirtualMachineScaleSetIdentityOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityOutput) ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput {
	return o.ToVirtualMachineScaleSetIdentityPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetIdentityOutput) ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetIdentity) *VirtualMachineScaleSetIdentity {
		return &v
	}).(VirtualMachineScaleSetIdentityPtrOutput)
}

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
func (o VirtualMachineScaleSetIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineScaleSetIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type VirtualMachineScaleSetIdentityPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetIdentity)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityPtrOutput) ToVirtualMachineScaleSetIdentityPtrOutput() VirtualMachineScaleSetIdentityPtrOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityPtrOutput) ToVirtualMachineScaleSetIdentityPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityPtrOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityPtrOutput) Elem() VirtualMachineScaleSetIdentityOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentity) VirtualMachineScaleSetIdentity {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetIdentity
		return ret
	}).(VirtualMachineScaleSetIdentityOutput)
}

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
func (o VirtualMachineScaleSetIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineScaleSetIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityResponse struct {
	// The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentitiesValueResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentityResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityResponseOutput) ToVirtualMachineScaleSetIdentityResponseOutput() VirtualMachineScaleSetIdentityResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponseOutput) ToVirtualMachineScaleSetIdentityResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponseOutput {
	return o
}

// The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
func (o VirtualMachineScaleSetIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineScaleSetIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

type VirtualMachineScaleSetIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetIdentityResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIdentityResponsePtrOutput) ToVirtualMachineScaleSetIdentityResponsePtrOutput() VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponsePtrOutput) ToVirtualMachineScaleSetIdentityResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetIdentityResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetIdentityResponsePtrOutput) Elem() VirtualMachineScaleSetIdentityResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) VirtualMachineScaleSetIdentityResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetIdentityResponse
		return ret
	}).(VirtualMachineScaleSetIdentityResponseOutput)
}

// The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine scale set.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o VirtualMachineScaleSetIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentitiesValueResponseMapOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetIdentityResponse) map[string]UserAssignedIdentitiesValueResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesValueResponseMapOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTag struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType *string `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `pulumi:"tag"`
}

// VirtualMachineScaleSetIpTagInput is an input type that accepts VirtualMachineScaleSetIpTagArgs and VirtualMachineScaleSetIpTagOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIpTagInput` via:
//
//	VirtualMachineScaleSetIpTagArgs{...}
type VirtualMachineScaleSetIpTagInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIpTagOutput() VirtualMachineScaleSetIpTagOutput
	ToVirtualMachineScaleSetIpTagOutputWithContext(context.Context) VirtualMachineScaleSetIpTagOutput
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagArgs struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType pulumi.StringPtrInput `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (VirtualMachineScaleSetIpTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIpTag)(nil)).Elem()
}

func (i VirtualMachineScaleSetIpTagArgs) ToVirtualMachineScaleSetIpTagOutput() VirtualMachineScaleSetIpTagOutput {
	return i.ToVirtualMachineScaleSetIpTagOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIpTagArgs) ToVirtualMachineScaleSetIpTagOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIpTagOutput)
}

// VirtualMachineScaleSetIpTagArrayInput is an input type that accepts VirtualMachineScaleSetIpTagArray and VirtualMachineScaleSetIpTagArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetIpTagArrayInput` via:
//
//	VirtualMachineScaleSetIpTagArray{ VirtualMachineScaleSetIpTagArgs{...} }
type VirtualMachineScaleSetIpTagArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetIpTagArrayOutput() VirtualMachineScaleSetIpTagArrayOutput
	ToVirtualMachineScaleSetIpTagArrayOutputWithContext(context.Context) VirtualMachineScaleSetIpTagArrayOutput
}

type VirtualMachineScaleSetIpTagArray []VirtualMachineScaleSetIpTagInput

func (VirtualMachineScaleSetIpTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIpTag)(nil)).Elem()
}

func (i VirtualMachineScaleSetIpTagArray) ToVirtualMachineScaleSetIpTagArrayOutput() VirtualMachineScaleSetIpTagArrayOutput {
	return i.ToVirtualMachineScaleSetIpTagArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetIpTagArray) ToVirtualMachineScaleSetIpTagArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetIpTagArrayOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIpTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIpTag)(nil)).Elem()
}

func (o VirtualMachineScaleSetIpTagOutput) ToVirtualMachineScaleSetIpTagOutput() VirtualMachineScaleSetIpTagOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagOutput) ToVirtualMachineScaleSetIpTagOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagOutput {
	return o
}

// IP tag type. Example: FirstPartyUsage.
func (o VirtualMachineScaleSetIpTagOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIpTag) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// IP tag associated with the public IP. Example: SQL, Storage etc.
func (o VirtualMachineScaleSetIpTagOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIpTag) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetIpTagArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIpTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIpTag)(nil)).Elem()
}

func (o VirtualMachineScaleSetIpTagArrayOutput) ToVirtualMachineScaleSetIpTagArrayOutput() VirtualMachineScaleSetIpTagArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagArrayOutput) ToVirtualMachineScaleSetIpTagArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetIpTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIpTag {
		return vs[0].([]VirtualMachineScaleSetIpTag)[vs[1].(int)]
	}).(VirtualMachineScaleSetIpTagOutput)
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagResponse struct {
	// IP tag type. Example: FirstPartyUsage.
	IpTagType *string `pulumi:"ipTagType"`
	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `pulumi:"tag"`
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIpTagResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIpTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetIpTagResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIpTagResponseOutput) ToVirtualMachineScaleSetIpTagResponseOutput() VirtualMachineScaleSetIpTagResponseOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagResponseOutput) ToVirtualMachineScaleSetIpTagResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagResponseOutput {
	return o
}

// IP tag type. Example: FirstPartyUsage.
func (o VirtualMachineScaleSetIpTagResponseOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIpTagResponse) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// IP tag associated with the public IP. Example: SQL, Storage etc.
func (o VirtualMachineScaleSetIpTagResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetIpTagResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetIpTagResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetIpTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetIpTagResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetIpTagResponseArrayOutput) ToVirtualMachineScaleSetIpTagResponseArrayOutput() VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagResponseArrayOutput) ToVirtualMachineScaleSetIpTagResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetIpTagResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetIpTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetIpTagResponse {
		return vs[0].([]VirtualMachineScaleSetIpTagResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetIpTagResponseOutput)
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `pulumi:"diskEncryptionSet"`
	// Specifies the security profile for the managed disk.
	SecurityProfile *VMDiskSecurityProfile `pulumi:"securityProfile"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// VirtualMachineScaleSetManagedDiskParametersInput is an input type that accepts VirtualMachineScaleSetManagedDiskParametersArgs and VirtualMachineScaleSetManagedDiskParametersOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetManagedDiskParametersInput` via:
//
//	VirtualMachineScaleSetManagedDiskParametersArgs{...}
type VirtualMachineScaleSetManagedDiskParametersInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetManagedDiskParametersOutput() VirtualMachineScaleSetManagedDiskParametersOutput
	ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(context.Context) VirtualMachineScaleSetManagedDiskParametersOutput
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersArgs struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet DiskEncryptionSetParametersPtrInput `pulumi:"diskEncryptionSet"`
	// Specifies the security profile for the managed disk.
	SecurityProfile VMDiskSecurityProfilePtrInput `pulumi:"securityProfile"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (VirtualMachineScaleSetManagedDiskParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetManagedDiskParameters)(nil)).Elem()
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersOutput() VirtualMachineScaleSetManagedDiskParametersOutput {
	return i.ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetManagedDiskParametersOutput)
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return i.ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetManagedDiskParametersArgs) ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetManagedDiskParametersOutput).ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetManagedDiskParametersPtrInput is an input type that accepts VirtualMachineScaleSetManagedDiskParametersArgs, VirtualMachineScaleSetManagedDiskParametersPtr and VirtualMachineScaleSetManagedDiskParametersPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetManagedDiskParametersPtrInput` via:
//
//	        VirtualMachineScaleSetManagedDiskParametersArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetManagedDiskParametersPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput
	ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput
}

type virtualMachineScaleSetManagedDiskParametersPtrType VirtualMachineScaleSetManagedDiskParametersArgs

func VirtualMachineScaleSetManagedDiskParametersPtr(v *VirtualMachineScaleSetManagedDiskParametersArgs) VirtualMachineScaleSetManagedDiskParametersPtrInput {
	return (*virtualMachineScaleSetManagedDiskParametersPtrType)(v)
}

func (*virtualMachineScaleSetManagedDiskParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetManagedDiskParameters)(nil)).Elem()
}

func (i *virtualMachineScaleSetManagedDiskParametersPtrType) ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return i.ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetManagedDiskParametersPtrType) ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetManagedDiskParametersPtrOutput)
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetManagedDiskParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetManagedDiskParameters)(nil)).Elem()
}

func (o VirtualMachineScaleSetManagedDiskParametersOutput) ToVirtualMachineScaleSetManagedDiskParametersOutput() VirtualMachineScaleSetManagedDiskParametersOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersOutput) ToVirtualMachineScaleSetManagedDiskParametersOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersOutput) ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o.ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetManagedDiskParametersOutput) ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetManagedDiskParameters) *VirtualMachineScaleSetManagedDiskParameters {
		return &v
	}).(VirtualMachineScaleSetManagedDiskParametersPtrOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParameters) *DiskEncryptionSetParameters {
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the security profile for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersOutput) SecurityProfile() VMDiskSecurityProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParameters) *VMDiskSecurityProfile { return v.SecurityProfile }).(VMDiskSecurityProfilePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o VirtualMachineScaleSetManagedDiskParametersOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParameters) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetManagedDiskParametersPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetManagedDiskParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetManagedDiskParameters)(nil)).Elem()
}

func (o VirtualMachineScaleSetManagedDiskParametersPtrOutput) ToVirtualMachineScaleSetManagedDiskParametersPtrOutput() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersPtrOutput) ToVirtualMachineScaleSetManagedDiskParametersPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersPtrOutput) Elem() VirtualMachineScaleSetManagedDiskParametersOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParameters) VirtualMachineScaleSetManagedDiskParameters {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetManagedDiskParameters
		return ret
	}).(VirtualMachineScaleSetManagedDiskParametersOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersPtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParameters) *DiskEncryptionSetParameters {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersPtrOutput)
}

// Specifies the security profile for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersPtrOutput) SecurityProfile() VMDiskSecurityProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParameters) *VMDiskSecurityProfile {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(VMDiskSecurityProfilePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o VirtualMachineScaleSetManagedDiskParametersPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParameters) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersResponse struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParametersResponse `pulumi:"diskEncryptionSet"`
	// Specifies the security profile for the managed disk.
	SecurityProfile *VMDiskSecurityProfileResponse `pulumi:"securityProfile"`
	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParametersResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetManagedDiskParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetManagedDiskParametersResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) ToVirtualMachineScaleSetManagedDiskParametersResponseOutput() VirtualMachineScaleSetManagedDiskParametersResponseOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) ToVirtualMachineScaleSetManagedDiskParametersResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersResponseOutput {
	return o
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse {
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the security profile for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) SecurityProfile() VMDiskSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParametersResponse) *VMDiskSecurityProfileResponse {
		return v.SecurityProfile
	}).(VMDiskSecurityProfileResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetManagedDiskParametersResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetManagedDiskParametersResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutput() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) ToVirtualMachineScaleSetManagedDiskParametersResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) Elem() VirtualMachineScaleSetManagedDiskParametersResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) VirtualMachineScaleSetManagedDiskParametersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetManagedDiskParametersResponse
		return ret
	}).(VirtualMachineScaleSetManagedDiskParametersResponseOutput)
}

// Specifies the customer managed disk encryption set resource id for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) DiskEncryptionSet() DiskEncryptionSetParametersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) *DiskEncryptionSetParametersResponse {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionSet
	}).(DiskEncryptionSetParametersResponsePtrOutput)
}

// Specifies the security profile for the managed disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) SecurityProfile() VMDiskSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) *VMDiskSecurityProfileResponse {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(VMDiskSecurityProfileResponsePtrOutput)
}

// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
func (o VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetManagedDiskParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Describes the Availability Set properties related to migration to Flexible Virtual Machine Scale Set.
type VirtualMachineScaleSetMigrationInfoResponse struct {
	// Indicates the target Virtual Machine ScaleSet properties upon triggering a seamless migration without downtime of the VMs via the ConvertToVirtualMachineScaleSet API.
	DefaultVirtualMachineScaleSetInfo DefaultVirtualMachineScaleSetInfoResponse `pulumi:"defaultVirtualMachineScaleSetInfo"`
	// Specifies the Virtual Machine Scale Set that the Availability Set is migrated to.
	MigrateToVirtualMachineScaleSet SubResourceResponse `pulumi:"migrateToVirtualMachineScaleSet"`
}

// Describes the Availability Set properties related to migration to Flexible Virtual Machine Scale Set.
type VirtualMachineScaleSetMigrationInfoResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetMigrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetMigrationInfoResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetMigrationInfoResponseOutput) ToVirtualMachineScaleSetMigrationInfoResponseOutput() VirtualMachineScaleSetMigrationInfoResponseOutput {
	return o
}

func (o VirtualMachineScaleSetMigrationInfoResponseOutput) ToVirtualMachineScaleSetMigrationInfoResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetMigrationInfoResponseOutput {
	return o
}

// Indicates the target Virtual Machine ScaleSet properties upon triggering a seamless migration without downtime of the VMs via the ConvertToVirtualMachineScaleSet API.
func (o VirtualMachineScaleSetMigrationInfoResponseOutput) DefaultVirtualMachineScaleSetInfo() DefaultVirtualMachineScaleSetInfoResponseOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetMigrationInfoResponse) DefaultVirtualMachineScaleSetInfoResponse {
		return v.DefaultVirtualMachineScaleSetInfo
	}).(DefaultVirtualMachineScaleSetInfoResponseOutput)
}

// Specifies the Virtual Machine Scale Set that the Availability Set is migrated to.
func (o VirtualMachineScaleSetMigrationInfoResponseOutput) MigrateToVirtualMachineScaleSet() SubResourceResponseOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetMigrationInfoResponse) SubResourceResponse {
		return v.MigrateToVirtualMachineScaleSet
	}).(SubResourceResponseOutput)
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfiguration struct {
	// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
	AuxiliaryMode *string `pulumi:"auxiliaryMode"`
	// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
	AuxiliarySku *string `pulumi:"auxiliarySku"`
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies whether the network interface is disabled for tcp state tracking.
	DisableTcpStateTracking *bool `pulumi:"disableTcpStateTracking"`
	// The dns settings to be applied on the network interfaces.
	DnsSettings *VirtualMachineScaleSetNetworkConfigurationDnsSettings `pulumi:"dnsSettings"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `pulumi:"enableFpga"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `pulumi:"enableIPForwarding"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations []VirtualMachineScaleSetIPConfiguration `pulumi:"ipConfigurations"`
	// The network configuration name.
	Name string `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup *SubResource `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// VirtualMachineScaleSetNetworkConfigurationInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationArgs and VirtualMachineScaleSetNetworkConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationInput` via:
//
//	VirtualMachineScaleSetNetworkConfigurationArgs{...}
type VirtualMachineScaleSetNetworkConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationOutput() VirtualMachineScaleSetNetworkConfigurationOutput
	ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationOutput
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationArgs struct {
	// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
	AuxiliaryMode pulumi.StringPtrInput `pulumi:"auxiliaryMode"`
	// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
	AuxiliarySku pulumi.StringPtrInput `pulumi:"auxiliarySku"`
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Specifies whether the network interface is disabled for tcp state tracking.
	DisableTcpStateTracking pulumi.BoolPtrInput `pulumi:"disableTcpStateTracking"`
	// The dns settings to be applied on the network interfaces.
	DnsSettings VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput `pulumi:"dnsSettings"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking pulumi.BoolPtrInput `pulumi:"enableAcceleratedNetworking"`
	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga pulumi.BoolPtrInput `pulumi:"enableFpga"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding pulumi.BoolPtrInput `pulumi:"enableIPForwarding"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations VirtualMachineScaleSetIPConfigurationArrayInput `pulumi:"ipConfigurations"`
	// The network configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup SubResourcePtrInput `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
}

func (VirtualMachineScaleSetNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkConfigurationArgs) ToVirtualMachineScaleSetNetworkConfigurationOutput() VirtualMachineScaleSetNetworkConfigurationOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationArgs) ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationOutput)
}

// VirtualMachineScaleSetNetworkConfigurationArrayInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationArray and VirtualMachineScaleSetNetworkConfigurationArrayOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationArrayInput` via:
//
//	VirtualMachineScaleSetNetworkConfigurationArray{ VirtualMachineScaleSetNetworkConfigurationArgs{...} }
type VirtualMachineScaleSetNetworkConfigurationArrayInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationArrayOutput() VirtualMachineScaleSetNetworkConfigurationArrayOutput
	ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationArrayOutput
}

type VirtualMachineScaleSetNetworkConfigurationArray []VirtualMachineScaleSetNetworkConfigurationInput

func (VirtualMachineScaleSetNetworkConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetNetworkConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkConfigurationArray) ToVirtualMachineScaleSetNetworkConfigurationArrayOutput() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationArray) ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationArrayOutput)
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationOutput) ToVirtualMachineScaleSetNetworkConfigurationOutput() VirtualMachineScaleSetNetworkConfigurationOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationOutput) ToVirtualMachineScaleSetNetworkConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationOutput {
	return o
}

// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) AuxiliaryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *string { return v.AuxiliaryMode }).(pulumi.StringPtrOutput)
}

// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) AuxiliarySku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *string { return v.AuxiliarySku }).(pulumi.StringPtrOutput)
}

// Specify what happens to the network interface when the VM is deleted
func (o VirtualMachineScaleSetNetworkConfigurationOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies whether the network interface is disabled for tcp state tracking.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) DisableTcpStateTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *bool { return v.DisableTcpStateTracking }).(pulumi.BoolPtrOutput)
}

// The dns settings to be applied on the network interfaces.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) DnsSettings() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *VirtualMachineScaleSetNetworkConfigurationDnsSettings {
		return v.DnsSettings
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput)
}

// Specifies whether the network interface is accelerated networking-enabled.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) EnableAcceleratedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *bool { return v.EnableAcceleratedNetworking }).(pulumi.BoolPtrOutput)
}

// Specifies whether the network interface is FPGA networking-enabled.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) EnableFpga() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *bool { return v.EnableFpga }).(pulumi.BoolPtrOutput)
}

// Whether IP forwarding enabled on this NIC.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) EnableIPForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *bool { return v.EnableIPForwarding }).(pulumi.BoolPtrOutput)
}

// Specifies the IP configurations of the network interface.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) IpConfigurations() VirtualMachineScaleSetIPConfigurationArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) []VirtualMachineScaleSetIPConfiguration {
		return v.IpConfigurations
	}).(VirtualMachineScaleSetIPConfigurationArrayOutput)
}

// The network configuration name.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// The network security group.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) NetworkSecurityGroup() SubResourcePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *SubResource { return v.NetworkSecurityGroup }).(SubResourcePtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineScaleSetNetworkConfigurationOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfiguration) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetNetworkConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetNetworkConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationArrayOutput) ToVirtualMachineScaleSetNetworkConfigurationArrayOutput() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationArrayOutput) ToVirtualMachineScaleSetNetworkConfigurationArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetNetworkConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetNetworkConfiguration {
		return vs[0].([]VirtualMachineScaleSetNetworkConfiguration)[vs[1].(int)]
	}).(VirtualMachineScaleSetNetworkConfigurationOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettings struct {
	// List of DNS servers IP addresses
	DnsServers []string `pulumi:"dnsServers"`
}

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs and VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationDnsSettingsInput` via:
//
//	VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs{...}
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput
	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs struct {
	// List of DNS servers IP addresses
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
}

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationDnsSettings)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput)
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput).ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput is an input type that accepts VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs, VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtr and VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput` via:
//
//	        VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput
	ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput
}

type virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs

func VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtr(v *VirtualMachineScaleSetNetworkConfigurationDnsSettingsArgs) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrInput {
	return (*virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType)(v)
}

func (*virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkConfigurationDnsSettings)(nil)).Elem()
}

func (i *virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetNetworkConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationDnsSettings)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return o.ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetNetworkConfigurationDnsSettings) *VirtualMachineScaleSetNetworkConfigurationDnsSettings {
		return &v
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationDnsSettings) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

type VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkConfigurationDnsSettings)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput) Elem() VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkConfigurationDnsSettings) VirtualMachineScaleSetNetworkConfigurationDnsSettings {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetNetworkConfigurationDnsSettings
		return ret
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkConfigurationDnsSettings) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse struct {
	// List of DNS servers IP addresses
	DnsServers []string `pulumi:"dnsServers"`
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput {
	return o
}

// List of DNS servers IP addresses
func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

type VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) Elem() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse
		return ret
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput)
}

// List of DNS servers IP addresses
func (o VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationResponse struct {
	// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
	AuxiliaryMode *string `pulumi:"auxiliaryMode"`
	// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
	AuxiliarySku *string `pulumi:"auxiliarySku"`
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies whether the network interface is disabled for tcp state tracking.
	DisableTcpStateTracking *bool `pulumi:"disableTcpStateTracking"`
	// The dns settings to be applied on the network interfaces.
	DnsSettings *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse `pulumi:"dnsSettings"`
	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `pulumi:"enableAcceleratedNetworking"`
	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `pulumi:"enableFpga"`
	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `pulumi:"enableIPForwarding"`
	// Specifies the IP configurations of the network interface.
	IpConfigurations []VirtualMachineScaleSetIPConfigurationResponse `pulumi:"ipConfigurations"`
	// The network configuration name.
	Name string `pulumi:"name"`
	// The network security group.
	NetworkSecurityGroup *SubResourceResponse `pulumi:"networkSecurityGroup"`
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `pulumi:"primary"`
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseOutput() VirtualMachineScaleSetNetworkConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationResponseOutput {
	return o
}

// Specifies whether the Auxiliary mode is enabled for the Network Interface resource.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) AuxiliaryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *string { return v.AuxiliaryMode }).(pulumi.StringPtrOutput)
}

// Specifies whether the Auxiliary sku is enabled for the Network Interface resource.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) AuxiliarySku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *string { return v.AuxiliarySku }).(pulumi.StringPtrOutput)
}

// Specify what happens to the network interface when the VM is deleted
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies whether the network interface is disabled for tcp state tracking.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) DisableTcpStateTracking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.DisableTcpStateTracking }).(pulumi.BoolPtrOutput)
}

// The dns settings to be applied on the network interfaces.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) DnsSettings() VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponse {
		return v.DnsSettings
	}).(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput)
}

// Specifies whether the network interface is accelerated networking-enabled.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) EnableAcceleratedNetworking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.EnableAcceleratedNetworking }).(pulumi.BoolPtrOutput)
}

// Specifies whether the network interface is FPGA networking-enabled.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) EnableFpga() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.EnableFpga }).(pulumi.BoolPtrOutput)
}

// Whether IP forwarding enabled on this NIC.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) EnableIPForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.EnableIPForwarding }).(pulumi.BoolPtrOutput)
}

// Specifies the IP configurations of the network interface.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) IpConfigurations() VirtualMachineScaleSetIPConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) []VirtualMachineScaleSetIPConfigurationResponse {
		return v.IpConfigurations
	}).(VirtualMachineScaleSetIPConfigurationResponseArrayOutput)
}

// The network configuration name.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The network security group.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) NetworkSecurityGroup() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *SubResourceResponse {
		return v.NetworkSecurityGroup
	}).(SubResourceResponsePtrOutput)
}

// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
func (o VirtualMachineScaleSetNetworkConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineScaleSetNetworkConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseArrayOutput() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) ToVirtualMachineScaleSetNetworkConfigurationResponseArrayOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineScaleSetNetworkConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineScaleSetNetworkConfigurationResponse {
		return vs[0].([]VirtualMachineScaleSetNetworkConfigurationResponse)[vs[1].(int)]
	}).(VirtualMachineScaleSetNetworkConfigurationResponseOutput)
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfile struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *ApiEntityReference `pulumi:"healthProbe"`
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
	NetworkApiVersion *string `pulumi:"networkApiVersion"`
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfiguration `pulumi:"networkInterfaceConfigurations"`
}

// VirtualMachineScaleSetNetworkProfileInput is an input type that accepts VirtualMachineScaleSetNetworkProfileArgs and VirtualMachineScaleSetNetworkProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkProfileInput` via:
//
//	VirtualMachineScaleSetNetworkProfileArgs{...}
type VirtualMachineScaleSetNetworkProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkProfileOutput() VirtualMachineScaleSetNetworkProfileOutput
	ToVirtualMachineScaleSetNetworkProfileOutputWithContext(context.Context) VirtualMachineScaleSetNetworkProfileOutput
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileArgs struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe ApiEntityReferencePtrInput `pulumi:"healthProbe"`
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
	NetworkApiVersion pulumi.StringPtrInput `pulumi:"networkApiVersion"`
	// The list of network configurations.
	NetworkInterfaceConfigurations VirtualMachineScaleSetNetworkConfigurationArrayInput `pulumi:"networkInterfaceConfigurations"`
}

func (VirtualMachineScaleSetNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfileOutput() VirtualMachineScaleSetNetworkProfileOutput {
	return i.ToVirtualMachineScaleSetNetworkProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkProfileOutput)
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return i.ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetNetworkProfileArgs) ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkProfileOutput).ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetNetworkProfilePtrInput is an input type that accepts VirtualMachineScaleSetNetworkProfileArgs, VirtualMachineScaleSetNetworkProfilePtr and VirtualMachineScaleSetNetworkProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetNetworkProfilePtrInput` via:
//
//	        VirtualMachineScaleSetNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetNetworkProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput
	ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput
}

type virtualMachineScaleSetNetworkProfilePtrType VirtualMachineScaleSetNetworkProfileArgs

func VirtualMachineScaleSetNetworkProfilePtr(v *VirtualMachineScaleSetNetworkProfileArgs) VirtualMachineScaleSetNetworkProfilePtrInput {
	return (*virtualMachineScaleSetNetworkProfilePtrType)(v)
}

func (*virtualMachineScaleSetNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetNetworkProfilePtrType) ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return i.ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetNetworkProfilePtrType) ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetNetworkProfilePtrOutput)
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkProfileOutput) ToVirtualMachineScaleSetNetworkProfileOutput() VirtualMachineScaleSetNetworkProfileOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileOutput) ToVirtualMachineScaleSetNetworkProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileOutput) ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return o.ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetNetworkProfileOutput) ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetNetworkProfile) *VirtualMachineScaleSetNetworkProfile {
		return &v
	}).(VirtualMachineScaleSetNetworkProfilePtrOutput)
}

// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
func (o VirtualMachineScaleSetNetworkProfileOutput) HealthProbe() ApiEntityReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfile) *ApiEntityReference { return v.HealthProbe }).(ApiEntityReferencePtrOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
func (o VirtualMachineScaleSetNetworkProfileOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfile) *string { return v.NetworkApiVersion }).(pulumi.StringPtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetNetworkProfileOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfile) []VirtualMachineScaleSetNetworkConfiguration {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationArrayOutput)
}

type VirtualMachineScaleSetNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkProfilePtrOutput) ToVirtualMachineScaleSetNetworkProfilePtrOutput() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfilePtrOutput) ToVirtualMachineScaleSetNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfilePtrOutput) Elem() VirtualMachineScaleSetNetworkProfileOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfile) VirtualMachineScaleSetNetworkProfile {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetNetworkProfile
		return ret
	}).(VirtualMachineScaleSetNetworkProfileOutput)
}

// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
func (o VirtualMachineScaleSetNetworkProfilePtrOutput) HealthProbe() ApiEntityReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfile) *ApiEntityReference {
		if v == nil {
			return nil
		}
		return v.HealthProbe
	}).(ApiEntityReferencePtrOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
func (o VirtualMachineScaleSetNetworkProfilePtrOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkApiVersion
	}).(pulumi.StringPtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetNetworkProfilePtrOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfile) []VirtualMachineScaleSetNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationArrayOutput)
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileResponse struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *ApiEntityReferenceResponse `pulumi:"healthProbe"`
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
	NetworkApiVersion *string `pulumi:"networkApiVersion"`
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfigurationResponse `pulumi:"networkInterfaceConfigurations"`
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetNetworkProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkProfileResponseOutput) ToVirtualMachineScaleSetNetworkProfileResponseOutput() VirtualMachineScaleSetNetworkProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponseOutput) ToVirtualMachineScaleSetNetworkProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileResponseOutput {
	return o
}

// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
func (o VirtualMachineScaleSetNetworkProfileResponseOutput) HealthProbe() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfileResponse) *ApiEntityReferenceResponse { return v.HealthProbe }).(ApiEntityReferenceResponsePtrOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
func (o VirtualMachineScaleSetNetworkProfileResponseOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfileResponse) *string { return v.NetworkApiVersion }).(pulumi.StringPtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetNetworkProfileResponseOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetNetworkProfileResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

type VirtualMachineScaleSetNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetNetworkProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) ToVirtualMachineScaleSetNetworkProfileResponsePtrOutput() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) ToVirtualMachineScaleSetNetworkProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) Elem() VirtualMachineScaleSetNetworkProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) VirtualMachineScaleSetNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetNetworkProfileResponse
		return ret
	}).(VirtualMachineScaleSetNetworkProfileResponseOutput)
}

// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) HealthProbe() ApiEntityReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) *ApiEntityReferenceResponse {
		if v == nil {
			return nil
		}
		return v.HealthProbe
	}).(ApiEntityReferenceResponsePtrOutput)
}

// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode 'Flexible'
func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) NetworkApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkApiVersion
	}).(pulumi.StringPtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetNetworkProfileResponsePtrOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetNetworkProfileResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDisk struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *CachingTypes `pulumi:"caching"`
	// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings *DiffDiskSettings `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies information about the unmanaged user image to base the scale set on.
	Image *VirtualHardDisk `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
	OsType *OperatingSystemTypes `pulumi:"osType"`
	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers []string `pulumi:"vhdContainers"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// VirtualMachineScaleSetOSDiskInput is an input type that accepts VirtualMachineScaleSetOSDiskArgs and VirtualMachineScaleSetOSDiskOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSDiskInput` via:
//
//	VirtualMachineScaleSetOSDiskArgs{...}
type VirtualMachineScaleSetOSDiskInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSDiskOutput() VirtualMachineScaleSetOSDiskOutput
	ToVirtualMachineScaleSetOSDiskOutputWithContext(context.Context) VirtualMachineScaleSetOSDiskOutput
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskArgs struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching CachingTypesPtrInput `pulumi:"caching"`
	// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings DiffDiskSettingsPtrInput `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB pulumi.IntPtrInput `pulumi:"diskSizeGB"`
	// Specifies information about the unmanaged user image to base the scale set on.
	Image VirtualHardDiskPtrInput `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk VirtualMachineScaleSetManagedDiskParametersPtrInput `pulumi:"managedDisk"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
	OsType OperatingSystemTypesPtrInput `pulumi:"osType"`
	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers pulumi.StringArrayInput `pulumi:"vhdContainers"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled pulumi.BoolPtrInput `pulumi:"writeAcceleratorEnabled"`
}

func (VirtualMachineScaleSetOSDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSDisk)(nil)).Elem()
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskOutput() VirtualMachineScaleSetOSDiskOutput {
	return i.ToVirtualMachineScaleSetOSDiskOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSDiskOutput)
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput {
	return i.ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSDiskArgs) ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSDiskOutput).ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetOSDiskPtrInput is an input type that accepts VirtualMachineScaleSetOSDiskArgs, VirtualMachineScaleSetOSDiskPtr and VirtualMachineScaleSetOSDiskPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSDiskPtrInput` via:
//
//	        VirtualMachineScaleSetOSDiskArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetOSDiskPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput
	ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Context) VirtualMachineScaleSetOSDiskPtrOutput
}

type virtualMachineScaleSetOSDiskPtrType VirtualMachineScaleSetOSDiskArgs

func VirtualMachineScaleSetOSDiskPtr(v *VirtualMachineScaleSetOSDiskArgs) VirtualMachineScaleSetOSDiskPtrInput {
	return (*virtualMachineScaleSetOSDiskPtrType)(v)
}

func (*virtualMachineScaleSetOSDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSDisk)(nil)).Elem()
}

func (i *virtualMachineScaleSetOSDiskPtrType) ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput {
	return i.ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetOSDiskPtrType) ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSDiskPtrOutput)
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSDisk)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSDiskOutput) ToVirtualMachineScaleSetOSDiskOutput() VirtualMachineScaleSetOSDiskOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskOutput) ToVirtualMachineScaleSetOSDiskOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskOutput) ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput {
	return o.ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetOSDiskOutput) ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetOSDisk) *VirtualMachineScaleSetOSDisk {
		return &v
	}).(VirtualMachineScaleSetOSDiskPtrOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o VirtualMachineScaleSetOSDiskOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *CachingTypes { return v.Caching }).(CachingTypesPtrOutput)
}

// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o VirtualMachineScaleSetOSDiskOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
func (o VirtualMachineScaleSetOSDiskOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
func (o VirtualMachineScaleSetOSDiskOutput) DiffDiskSettings() DiffDiskSettingsPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *DiffDiskSettings { return v.DiffDiskSettings }).(DiffDiskSettingsPtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o VirtualMachineScaleSetOSDiskOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies information about the unmanaged user image to base the scale set on.
func (o VirtualMachineScaleSetOSDiskOutput) Image() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *VirtualHardDisk { return v.Image }).(VirtualHardDiskPtrOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetOSDiskOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *VirtualMachineScaleSetManagedDiskParameters {
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersPtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetOSDiskOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o VirtualMachineScaleSetOSDiskOutput) OsType() OperatingSystemTypesPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *OperatingSystemTypes { return v.OsType }).(OperatingSystemTypesPtrOutput)
}

// Specifies the container urls that are used to store operating system disks for the scale set.
func (o VirtualMachineScaleSetOSDiskOutput) VhdContainers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) []string { return v.VhdContainers }).(pulumi.StringArrayOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetOSDiskOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDisk) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetOSDiskPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSDisk)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSDiskPtrOutput) ToVirtualMachineScaleSetOSDiskPtrOutput() VirtualMachineScaleSetOSDiskPtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskPtrOutput) ToVirtualMachineScaleSetOSDiskPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskPtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskPtrOutput) Elem() VirtualMachineScaleSetOSDiskOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) VirtualMachineScaleSetOSDisk {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetOSDisk
		return ret
	}).(VirtualMachineScaleSetOSDiskOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o VirtualMachineScaleSetOSDiskPtrOutput) Caching() CachingTypesPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *CachingTypes {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(CachingTypesPtrOutput)
}

// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o VirtualMachineScaleSetOSDiskPtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
func (o VirtualMachineScaleSetOSDiskPtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
func (o VirtualMachineScaleSetOSDiskPtrOutput) DiffDiskSettings() DiffDiskSettingsPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *DiffDiskSettings {
		if v == nil {
			return nil
		}
		return v.DiffDiskSettings
	}).(DiffDiskSettingsPtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o VirtualMachineScaleSetOSDiskPtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Specifies information about the unmanaged user image to base the scale set on.
func (o VirtualMachineScaleSetOSDiskPtrOutput) Image() VirtualHardDiskPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *VirtualHardDisk {
		if v == nil {
			return nil
		}
		return v.Image
	}).(VirtualHardDiskPtrOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetOSDiskPtrOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *VirtualMachineScaleSetManagedDiskParameters {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersPtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetOSDiskPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o VirtualMachineScaleSetOSDiskPtrOutput) OsType() OperatingSystemTypesPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *OperatingSystemTypes {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(OperatingSystemTypesPtrOutput)
}

// Specifies the container urls that are used to store operating system disks for the scale set.
func (o VirtualMachineScaleSetOSDiskPtrOutput) VhdContainers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) []string {
		if v == nil {
			return nil
		}
		return v.VhdContainers
	}).(pulumi.StringArrayOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetOSDiskPtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDisk) *bool {
		if v == nil {
			return nil
		}
		return v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskResponse struct {
	// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
	Caching *string `pulumi:"caching"`
	// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
	CreateOption string `pulumi:"createOption"`
	// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
	DeleteOption *string `pulumi:"deleteOption"`
	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings *DiffDiskSettingsResponse `pulumi:"diffDiskSettings"`
	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// Specifies information about the unmanaged user image to base the scale set on.
	Image *VirtualHardDiskResponse `pulumi:"image"`
	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParametersResponse `pulumi:"managedDisk"`
	// The disk name.
	Name *string `pulumi:"name"`
	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
	OsType *string `pulumi:"osType"`
	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers []string `pulumi:"vhdContainers"`
	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `pulumi:"writeAcceleratorEnabled"`
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDiskResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSDiskResponseOutput) ToVirtualMachineScaleSetOSDiskResponseOutput() VirtualMachineScaleSetOSDiskResponseOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponseOutput) ToVirtualMachineScaleSetOSDiskResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskResponseOutput {
	return o
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o VirtualMachineScaleSetOSDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o VirtualMachineScaleSetOSDiskResponseOutput) CreateOption() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) string { return v.CreateOption }).(pulumi.StringOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
func (o VirtualMachineScaleSetOSDiskResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
func (o VirtualMachineScaleSetOSDiskResponseOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *DiffDiskSettingsResponse { return v.DiffDiskSettings }).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o VirtualMachineScaleSetOSDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// Specifies information about the unmanaged user image to base the scale set on.
func (o VirtualMachineScaleSetOSDiskResponseOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *VirtualHardDiskResponse { return v.Image }).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetOSDiskResponseOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetOSDiskResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o VirtualMachineScaleSetOSDiskResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// Specifies the container urls that are used to store operating system disks for the scale set.
func (o VirtualMachineScaleSetOSDiskResponseOutput) VhdContainers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) []string { return v.VhdContainers }).(pulumi.StringArrayOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetOSDiskResponseOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSDiskResponse) *bool { return v.WriteAcceleratorEnabled }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetOSDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSDiskResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) ToVirtualMachineScaleSetOSDiskResponsePtrOutput() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) ToVirtualMachineScaleSetOSDiskResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Elem() VirtualMachineScaleSetOSDiskResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) VirtualMachineScaleSetOSDiskResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetOSDiskResponse
		return ret
	}).(VirtualMachineScaleSetOSDiskResponseOutput)
}

// Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium storage.**
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caching
	}).(pulumi.StringPtrOutput)
}

// Specifies how the virtual machines in the scale set should be created. The only allowed value is: **FromImage.** This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CreateOption
	}).(pulumi.StringPtrOutput)
}

// Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). <br><br> Possible values: <br><br> **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.<br><br> **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. <br><br> The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) DiffDiskSettings() DiffDiskSettingsResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *DiffDiskSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DiffDiskSettings
	}).(DiffDiskSettingsResponsePtrOutput)
}

// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGB
	}).(pulumi.IntPtrOutput)
}

// Specifies information about the unmanaged user image to base the scale set on.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Image() VirtualHardDiskResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *VirtualHardDiskResponse {
		if v == nil {
			return nil
		}
		return v.Image
	}).(VirtualHardDiskResponsePtrOutput)
}

// The managed disk parameters.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) ManagedDisk() VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *VirtualMachineScaleSetManagedDiskParametersResponse {
		if v == nil {
			return nil
		}
		return v.ManagedDisk
	}).(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput)
}

// The disk name.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// Specifies the container urls that are used to store operating system disks for the scale set.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) VhdContainers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) []string {
		if v == nil {
			return nil
		}
		return v.VhdContainers
	}).(pulumi.StringArrayOutput)
}

// Specifies whether writeAccelerator should be enabled or disabled on the disk.
func (o VirtualMachineScaleSetOSDiskResponsePtrOutput) WriteAcceleratorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSDiskResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WriteAcceleratorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
	LinuxConfiguration *LinuxConfiguration `pulumi:"linuxConfiguration"`
	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal *bool `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	Secrets []VaultSecretGroup `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration `pulumi:"windowsConfiguration"`
}

// VirtualMachineScaleSetOSProfileInput is an input type that accepts VirtualMachineScaleSetOSProfileArgs and VirtualMachineScaleSetOSProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSProfileInput` via:
//
//	VirtualMachineScaleSetOSProfileArgs{...}
type VirtualMachineScaleSetOSProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSProfileOutput() VirtualMachineScaleSetOSProfileOutput
	ToVirtualMachineScaleSetOSProfileOutputWithContext(context.Context) VirtualMachineScaleSetOSProfileOutput
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
	AllowExtensionOperations pulumi.BoolPtrInput `pulumi:"allowExtensionOperations"`
	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix pulumi.StringPtrInput `pulumi:"computerNamePrefix"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
	CustomData pulumi.StringPtrInput `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
	LinuxConfiguration LinuxConfigurationPtrInput `pulumi:"linuxConfiguration"`
	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal pulumi.BoolPtrInput `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	Secrets VaultSecretGroupArrayInput `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration WindowsConfigurationPtrInput `pulumi:"windowsConfiguration"`
}

func (VirtualMachineScaleSetOSProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfileOutput() VirtualMachineScaleSetOSProfileOutput {
	return i.ToVirtualMachineScaleSetOSProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSProfileOutput)
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput {
	return i.ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetOSProfileArgs) ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSProfileOutput).ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetOSProfilePtrInput is an input type that accepts VirtualMachineScaleSetOSProfileArgs, VirtualMachineScaleSetOSProfilePtr and VirtualMachineScaleSetOSProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetOSProfilePtrInput` via:
//
//	        VirtualMachineScaleSetOSProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetOSProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput
	ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetOSProfilePtrOutput
}

type virtualMachineScaleSetOSProfilePtrType VirtualMachineScaleSetOSProfileArgs

func VirtualMachineScaleSetOSProfilePtr(v *VirtualMachineScaleSetOSProfileArgs) VirtualMachineScaleSetOSProfilePtrInput {
	return (*virtualMachineScaleSetOSProfilePtrType)(v)
}

func (*virtualMachineScaleSetOSProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetOSProfilePtrType) ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput {
	return i.ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetOSProfilePtrType) ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetOSProfilePtrOutput)
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSProfileOutput) ToVirtualMachineScaleSetOSProfileOutput() VirtualMachineScaleSetOSProfileOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileOutput) ToVirtualMachineScaleSetOSProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileOutput) ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput {
	return o.ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetOSProfileOutput) ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetOSProfile) *VirtualMachineScaleSetOSProfile {
		return &v
	}).(VirtualMachineScaleSetOSProfilePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o VirtualMachineScaleSetOSProfileOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
func (o VirtualMachineScaleSetOSProfileOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
func (o VirtualMachineScaleSetOSProfileOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *bool { return v.AllowExtensionOperations }).(pulumi.BoolPtrOutput)
}

// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
func (o VirtualMachineScaleSetOSProfileOutput) ComputerNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *string { return v.ComputerNamePrefix }).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
func (o VirtualMachineScaleSetOSProfileOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o VirtualMachineScaleSetOSProfileOutput) LinuxConfiguration() LinuxConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *LinuxConfiguration { return v.LinuxConfiguration }).(LinuxConfigurationPtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o VirtualMachineScaleSetOSProfileOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *bool { return v.RequireGuestProvisionSignal }).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o VirtualMachineScaleSetOSProfileOutput) Secrets() VaultSecretGroupArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) []VaultSecretGroup { return v.Secrets }).(VaultSecretGroupArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o VirtualMachineScaleSetOSProfileOutput) WindowsConfiguration() WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfile) *WindowsConfiguration { return v.WindowsConfiguration }).(WindowsConfigurationPtrOutput)
}

type VirtualMachineScaleSetOSProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSProfilePtrOutput) ToVirtualMachineScaleSetOSProfilePtrOutput() VirtualMachineScaleSetOSProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfilePtrOutput) ToVirtualMachineScaleSetOSProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfilePtrOutput) Elem() VirtualMachineScaleSetOSProfileOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) VirtualMachineScaleSetOSProfile {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetOSProfile
		return ret
	}).(VirtualMachineScaleSetOSProfileOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o VirtualMachineScaleSetOSProfilePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
func (o VirtualMachineScaleSetOSProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
func (o VirtualMachineScaleSetOSProfilePtrOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowExtensionOperations
	}).(pulumi.BoolPtrOutput)
}

// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
func (o VirtualMachineScaleSetOSProfilePtrOutput) ComputerNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *string {
		if v == nil {
			return nil
		}
		return v.ComputerNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
func (o VirtualMachineScaleSetOSProfilePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o VirtualMachineScaleSetOSProfilePtrOutput) LinuxConfiguration() LinuxConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *LinuxConfiguration {
		if v == nil {
			return nil
		}
		return v.LinuxConfiguration
	}).(LinuxConfigurationPtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o VirtualMachineScaleSetOSProfilePtrOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *bool {
		if v == nil {
			return nil
		}
		return v.RequireGuestProvisionSignal
	}).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o VirtualMachineScaleSetOSProfilePtrOutput) Secrets() VaultSecretGroupArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) []VaultSecretGroup {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(VaultSecretGroupArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o VirtualMachineScaleSetOSProfilePtrOutput) WindowsConfiguration() WindowsConfigurationPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfile) *WindowsConfiguration {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationPtrOutput)
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
	AllowExtensionOperations *bool `pulumi:"allowExtensionOperations"`
	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix *string `pulumi:"computerNamePrefix"`
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
	CustomData *string `pulumi:"customData"`
	// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
	LinuxConfiguration *LinuxConfigurationResponse `pulumi:"linuxConfiguration"`
	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal *bool `pulumi:"requireGuestProvisionSignal"`
	// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	Secrets []VaultSecretGroupResponse `pulumi:"secrets"`
	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfigurationResponse `pulumi:"windowsConfiguration"`
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetOSProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSProfileResponseOutput) ToVirtualMachineScaleSetOSProfileResponseOutput() VirtualMachineScaleSetOSProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponseOutput) ToVirtualMachineScaleSetOSProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileResponseOutput {
	return o
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o VirtualMachineScaleSetOSProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
func (o VirtualMachineScaleSetOSProfileResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
func (o VirtualMachineScaleSetOSProfileResponseOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *bool { return v.AllowExtensionOperations }).(pulumi.BoolPtrOutput)
}

// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
func (o VirtualMachineScaleSetOSProfileResponseOutput) ComputerNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.ComputerNamePrefix }).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
func (o VirtualMachineScaleSetOSProfileResponseOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o VirtualMachineScaleSetOSProfileResponseOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *LinuxConfigurationResponse {
		return v.LinuxConfiguration
	}).(LinuxConfigurationResponsePtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o VirtualMachineScaleSetOSProfileResponseOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *bool { return v.RequireGuestProvisionSignal }).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o VirtualMachineScaleSetOSProfileResponseOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) []VaultSecretGroupResponse { return v.Secrets }).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o VirtualMachineScaleSetOSProfileResponseOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetOSProfileResponse) *WindowsConfigurationResponse {
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

type VirtualMachineScaleSetOSProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetOSProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetOSProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) ToVirtualMachineScaleSetOSProfileResponsePtrOutput() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) ToVirtualMachineScaleSetOSProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) Elem() VirtualMachineScaleSetOSProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) VirtualMachineScaleSetOSProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetOSProfileResponse
		return ret
	}).(VirtualMachineScaleSetOSProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies whether extension operations should be allowed on the virtual machine scale set. This may only be set to False when no extensions are present on the virtual machine scale set.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) AllowExtensionOperations() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowExtensionOperations
	}).(pulumi.BoolPtrOutput)
}

// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) ComputerNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputerNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) LinuxConfiguration() LinuxConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *LinuxConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LinuxConfiguration
	}).(LinuxConfigurationResponsePtrOutput)
}

// Optional property which must either be set to True or omitted.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) RequireGuestProvisionSignal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireGuestProvisionSignal
	}).(pulumi.BoolPtrOutput)
}

// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) Secrets() VaultSecretGroupResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) []VaultSecretGroupResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(VaultSecretGroupResponseArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o VirtualMachineScaleSetOSProfileResponsePtrOutput) WindowsConfiguration() WindowsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetOSProfileResponse) *WindowsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WindowsConfiguration
	}).(WindowsConfigurationResponsePtrOutput)
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfiguration struct {
	// Specify what happens to the public IP when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineScaleSetIpTag `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name string `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *string `pulumi:"publicIPAddressVersion"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource `pulumi:"publicIPPrefix"`
	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	Sku *PublicIPAddressSku `pulumi:"sku"`
}

// VirtualMachineScaleSetPublicIPAddressConfigurationInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationArgs and VirtualMachineScaleSetPublicIPAddressConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationInput` via:
//
//	VirtualMachineScaleSetPublicIPAddressConfigurationArgs{...}
type VirtualMachineScaleSetPublicIPAddressConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationOutput() VirtualMachineScaleSetPublicIPAddressConfigurationOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationOutput
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationArgs struct {
	// Specify what happens to the public IP when the VM is deleted
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes pulumi.IntPtrInput `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags VirtualMachineScaleSetIpTagArrayInput `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name pulumi.StringInput `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion pulumi.StringPtrInput `pulumi:"publicIPAddressVersion"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix SubResourcePtrInput `pulumi:"publicIPPrefix"`
	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	Sku PublicIPAddressSkuPtrInput `pulumi:"sku"`
}

func (VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationOutput() VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationOutput)
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationOutput).ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationArgs, VirtualMachineScaleSetPublicIPAddressConfigurationPtr and VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput` via:
//
//	        VirtualMachineScaleSetPublicIPAddressConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput
}

type virtualMachineScaleSetPublicIPAddressConfigurationPtrType VirtualMachineScaleSetPublicIPAddressConfigurationArgs

func VirtualMachineScaleSetPublicIPAddressConfigurationPtr(v *VirtualMachineScaleSetPublicIPAddressConfigurationArgs) VirtualMachineScaleSetPublicIPAddressConfigurationPtrInput {
	return (*virtualMachineScaleSetPublicIPAddressConfigurationPtrType)(v)
}

func (*virtualMachineScaleSetPublicIPAddressConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfiguration)(nil)).Elem()
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput)
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationOutput() VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return o.ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetPublicIPAddressConfiguration) *VirtualMachineScaleSetPublicIPAddressConfiguration {
		return &v
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput)
}

// Specify what happens to the public IP when the VM is deleted
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) DnsSettings() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings {
		return v.DnsSettings
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) IpTags() VirtualMachineScaleSetIpTagArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) []VirtualMachineScaleSetIpTag {
		return v.IpTags
	}).(VirtualMachineScaleSetIpTagArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) *string { return v.PublicIPAddressVersion }).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) PublicIPPrefix() SubResourcePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) *SubResource { return v.PublicIPPrefix }).(SubResourcePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationOutput) Sku() PublicIPAddressSkuPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfiguration) *PublicIPAddressSku { return v.Sku }).(PublicIPAddressSkuPtrOutput)
}

type VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) Elem() VirtualMachineScaleSetPublicIPAddressConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) VirtualMachineScaleSetPublicIPAddressConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetPublicIPAddressConfiguration
		return ret
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationOutput)
}

// Specify what happens to the public IP when the VM is deleted
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) DnsSettings() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings {
		if v == nil {
			return nil
		}
		return v.DnsSettings
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) IpTags() VirtualMachineScaleSetIpTagArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) []VirtualMachineScaleSetIpTag {
		if v == nil {
			return nil
		}
		return v.IpTags
	}).(VirtualMachineScaleSetIpTagArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) PublicIPPrefix() SubResourcePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *SubResource {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefix
	}).(SubResourcePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput) Sku() PublicIPAddressSkuPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfiguration) *PublicIPAddressSku {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(PublicIPAddressSkuPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabel string `pulumi:"domainNameLabel"`
	// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabelScope *string `pulumi:"domainNameLabelScope"`
}

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs and VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsInput` via:
//
//	VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs{...}
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabel pulumi.StringInput `pulumi:"domainNameLabel"`
	// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabelScope pulumi.StringPtrInput `pulumi:"domainNameLabelScope"`
}

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings)(nil)).Elem()
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput)
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput).ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput is an input type that accepts VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs, VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtr and VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput` via:
//
//	        VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput
	ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput
}

type virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs

func VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtr(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsArgs) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrInput {
	return (*virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType)(v)
}

func (*virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings)(nil)).Elem()
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return i.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrType) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return o.ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings {
		return &v
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput)
}

// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) DomainNameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings) string { return v.DomainNameLabel }).(pulumi.StringOutput)
}

// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings) *string {
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput) Elem() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
		return ret
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput)
}

// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput) DomainNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNameLabel
	}).(pulumi.StringPtrOutput)
}

// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings) *string {
		if v == nil {
			return nil
		}
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabel string `pulumi:"domainNameLabel"`
	// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
	DomainNameLabelScope *string `pulumi:"domainNameLabelScope"`
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput {
	return o
}

// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) DomainNameLabel() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) string {
		return v.DomainNameLabel
	}).(pulumi.StringOutput)
}

// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) *string {
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) Elem() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse
		return ret
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput)
}

// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) DomainNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DomainNameLabel
	}).(pulumi.StringPtrOutput)
}

// The Domain name label scope.The concatenation of the hashed domain name label that generated according to the policy from domain name label scope and vm index will be the domain name labels of the PublicIPAddress resources that will be created
func (o VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput) DomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationResponse struct {
	// Specify what happens to the public IP when the VM is deleted
	DeleteOption *string `pulumi:"deleteOption"`
	// The dns settings to be applied on the publicIP addresses .
	DnsSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse `pulumi:"dnsSettings"`
	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The list of IP tags associated with the public IP address.
	IpTags []VirtualMachineScaleSetIpTagResponse `pulumi:"ipTags"`
	// The publicIP address configuration name.
	Name string `pulumi:"name"`
	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *string `pulumi:"publicIPAddressVersion"`
	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResourceResponse `pulumi:"publicIPPrefix"`
	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	Sku *PublicIPAddressSkuResponse `pulumi:"sku"`
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetPublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput() VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput {
	return o
}

// Specify what happens to the public IP when the VM is deleted
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) DnsSettings() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		return v.DnsSettings
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) IpTags() VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) []VirtualMachineScaleSetIpTagResponse {
		return v.IpTags
	}).(VirtualMachineScaleSetIpTagResponseArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) PublicIPPrefix() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *SubResourceResponse {
		return v.PublicIPPrefix
	}).(SubResourceResponsePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput) Sku() PublicIPAddressSkuResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *PublicIPAddressSkuResponse {
		return v.Sku
	}).(PublicIPAddressSkuResponsePtrOutput)
}

type VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetPublicIPAddressConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput() VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) ToVirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) Elem() VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) VirtualMachineScaleSetPublicIPAddressConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetPublicIPAddressConfigurationResponse
		return ret
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput)
}

// Specify what happens to the public IP when the VM is deleted
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOption
	}).(pulumi.StringPtrOutput)
}

// The dns settings to be applied on the publicIP addresses .
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) DnsSettings() VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponse {
		if v == nil {
			return nil
		}
		return v.DnsSettings
	}).(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput)
}

// The idle timeout of the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// The list of IP tags associated with the public IP address.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) IpTags() VirtualMachineScaleSetIpTagResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) []VirtualMachineScaleSetIpTagResponse {
		if v == nil {
			return nil
		}
		return v.IpTags
	}).(VirtualMachineScaleSetIpTagResponseArrayOutput)
}

// The publicIP address configuration name.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) PublicIPAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicIPAddressVersion
	}).(pulumi.StringPtrOutput)
}

// The PublicIPPrefix from which to allocate publicIP addresses.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) PublicIPPrefix() SubResourceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *SubResourceResponse {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefix
	}).(SubResourceResponsePtrOutput)
}

// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
func (o VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput) Sku() PublicIPAddressSkuResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetPublicIPAddressConfigurationResponse) *PublicIPAddressSkuResponse {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(PublicIPAddressSkuResponsePtrOutput)
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfile struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks []VirtualMachineScaleSetDataDisk `pulumi:"dataDisks"`
	// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
	DiskControllerType *string `pulumi:"diskControllerType"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk *VirtualMachineScaleSetOSDisk `pulumi:"osDisk"`
}

// VirtualMachineScaleSetStorageProfileInput is an input type that accepts VirtualMachineScaleSetStorageProfileArgs and VirtualMachineScaleSetStorageProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetStorageProfileInput` via:
//
//	VirtualMachineScaleSetStorageProfileArgs{...}
type VirtualMachineScaleSetStorageProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetStorageProfileOutput() VirtualMachineScaleSetStorageProfileOutput
	ToVirtualMachineScaleSetStorageProfileOutputWithContext(context.Context) VirtualMachineScaleSetStorageProfileOutput
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileArgs struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks VirtualMachineScaleSetDataDiskArrayInput `pulumi:"dataDisks"`
	// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
	DiskControllerType pulumi.StringPtrInput `pulumi:"diskControllerType"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference ImageReferencePtrInput `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk VirtualMachineScaleSetOSDiskPtrInput `pulumi:"osDisk"`
}

func (VirtualMachineScaleSetStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetStorageProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfileOutput() VirtualMachineScaleSetStorageProfileOutput {
	return i.ToVirtualMachineScaleSetStorageProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetStorageProfileOutput)
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput {
	return i.ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetStorageProfileArgs) ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetStorageProfileOutput).ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetStorageProfilePtrInput is an input type that accepts VirtualMachineScaleSetStorageProfileArgs, VirtualMachineScaleSetStorageProfilePtr and VirtualMachineScaleSetStorageProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetStorageProfilePtrInput` via:
//
//	        VirtualMachineScaleSetStorageProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetStorageProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput
	ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetStorageProfilePtrOutput
}

type virtualMachineScaleSetStorageProfilePtrType VirtualMachineScaleSetStorageProfileArgs

func VirtualMachineScaleSetStorageProfilePtr(v *VirtualMachineScaleSetStorageProfileArgs) VirtualMachineScaleSetStorageProfilePtrInput {
	return (*virtualMachineScaleSetStorageProfilePtrType)(v)
}

func (*virtualMachineScaleSetStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetStorageProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetStorageProfilePtrType) ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput {
	return i.ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetStorageProfilePtrType) ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetStorageProfilePtrOutput)
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetStorageProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetStorageProfileOutput) ToVirtualMachineScaleSetStorageProfileOutput() VirtualMachineScaleSetStorageProfileOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileOutput) ToVirtualMachineScaleSetStorageProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileOutput) ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput {
	return o.ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetStorageProfileOutput) ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetStorageProfile) *VirtualMachineScaleSetStorageProfile {
		return &v
	}).(VirtualMachineScaleSetStorageProfilePtrOutput)
}

// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfileOutput) DataDisks() VirtualMachineScaleSetDataDiskArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfile) []VirtualMachineScaleSetDataDisk { return v.DataDisks }).(VirtualMachineScaleSetDataDiskArrayOutput)
}

// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
func (o VirtualMachineScaleSetStorageProfileOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfile) *string { return v.DiskControllerType }).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o VirtualMachineScaleSetStorageProfileOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfile) *ImageReference { return v.ImageReference }).(ImageReferencePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfileOutput) OsDisk() VirtualMachineScaleSetOSDiskPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfile) *VirtualMachineScaleSetOSDisk { return v.OsDisk }).(VirtualMachineScaleSetOSDiskPtrOutput)
}

type VirtualMachineScaleSetStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetStorageProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetStorageProfilePtrOutput) ToVirtualMachineScaleSetStorageProfilePtrOutput() VirtualMachineScaleSetStorageProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfilePtrOutput) ToVirtualMachineScaleSetStorageProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfilePtrOutput) Elem() VirtualMachineScaleSetStorageProfileOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfile) VirtualMachineScaleSetStorageProfile {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetStorageProfile
		return ret
	}).(VirtualMachineScaleSetStorageProfileOutput)
}

// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfilePtrOutput) DataDisks() VirtualMachineScaleSetDataDiskArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfile) []VirtualMachineScaleSetDataDisk {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(VirtualMachineScaleSetDataDiskArrayOutput)
}

// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
func (o VirtualMachineScaleSetStorageProfilePtrOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfile) *string {
		if v == nil {
			return nil
		}
		return v.DiskControllerType
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o VirtualMachineScaleSetStorageProfilePtrOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfile) *ImageReference {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferencePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfilePtrOutput) OsDisk() VirtualMachineScaleSetOSDiskPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfile) *VirtualMachineScaleSetOSDisk {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(VirtualMachineScaleSetOSDiskPtrOutput)
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileResponse struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	DataDisks []VirtualMachineScaleSetDataDiskResponse `pulumi:"dataDisks"`
	// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
	DiskControllerType *string `pulumi:"diskControllerType"`
	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReferenceResponse `pulumi:"imageReference"`
	// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
	OsDisk *VirtualMachineScaleSetOSDiskResponse `pulumi:"osDisk"`
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetStorageProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetStorageProfileResponseOutput) ToVirtualMachineScaleSetStorageProfileResponseOutput() VirtualMachineScaleSetStorageProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponseOutput) ToVirtualMachineScaleSetStorageProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileResponseOutput {
	return o
}

// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfileResponseOutput) DataDisks() VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) []VirtualMachineScaleSetDataDiskResponse {
		return v.DataDisks
	}).(VirtualMachineScaleSetDataDiskResponseArrayOutput)
}

// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
func (o VirtualMachineScaleSetStorageProfileResponseOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) *string { return v.DiskControllerType }).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o VirtualMachineScaleSetStorageProfileResponseOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) *ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfileResponseOutput) OsDisk() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetStorageProfileResponse) *VirtualMachineScaleSetOSDiskResponse {
		return v.OsDisk
	}).(VirtualMachineScaleSetOSDiskResponsePtrOutput)
}

type VirtualMachineScaleSetStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetStorageProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) ToVirtualMachineScaleSetStorageProfileResponsePtrOutput() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) ToVirtualMachineScaleSetStorageProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) Elem() VirtualMachineScaleSetStorageProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) VirtualMachineScaleSetStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetStorageProfileResponse
		return ret
	}).(VirtualMachineScaleSetStorageProfileResponseOutput)
}

// Specifies the parameters that are used to add data disks to the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) DataDisks() VirtualMachineScaleSetDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) []VirtualMachineScaleSetDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(VirtualMachineScaleSetDataDiskResponseArrayOutput)
}

// Specifies the disk controller type configured for the virtual machines in the scale set. Minimum api-version: 2022-08-01
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) DiskControllerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DiskControllerType
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations.
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// Specifies information about the operating system disk used by the virtual machines in the scale set. For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
func (o VirtualMachineScaleSetStorageProfileResponsePtrOutput) OsDisk() VirtualMachineScaleSetOSDiskResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetStorageProfileResponse) *VirtualMachineScaleSetOSDiskResponse {
		if v == nil {
			return nil
		}
		return v.OsDisk
	}).(VirtualMachineScaleSetOSDiskResponsePtrOutput)
}

// The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceViewResponse struct {
	// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
	AssignedHost string `pulumi:"assignedHost"`
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceViewResponse `pulumi:"bootDiagnostics"`
	// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
	ComputerName *string `pulumi:"computerName"`
	// The disks information.
	Disks []DiskInstanceViewResponse `pulumi:"disks"`
	// The extensions information.
	Extensions []VirtualMachineExtensionInstanceViewResponse `pulumi:"extensions"`
	// The hypervisor generation of the Virtual Machine [V1, V2]
	HyperVGeneration *string `pulumi:"hyperVGeneration"`
	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatusResponse `pulumi:"maintenanceRedeployStatus"`
	// The Operating System running on the hybrid machine.
	OsName *string `pulumi:"osName"`
	// The version of Operating System running on the hybrid machine.
	OsVersion *string `pulumi:"osVersion"`
	// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
	PlacementGroupId *string `pulumi:"placementGroupId"`
	// The Fault Domain count.
	PlatformFaultDomain *int `pulumi:"platformFaultDomain"`
	// The Update Domain count.
	PlatformUpdateDomain *int `pulumi:"platformUpdateDomain"`
	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `pulumi:"rdpThumbPrint"`
	// The resource status information.
	Statuses []InstanceViewStatusResponse `pulumi:"statuses"`
	// The VM Agent running on the virtual machine.
	VmAgent *VirtualMachineAgentInstanceViewResponse `pulumi:"vmAgent"`
	// The health status for the VM.
	VmHealth VirtualMachineHealthStatusResponse `pulumi:"vmHealth"`
}

// The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceViewResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMInstanceViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMInstanceViewResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ToVirtualMachineScaleSetVMInstanceViewResponseOutput() VirtualMachineScaleSetVMInstanceViewResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ToVirtualMachineScaleSetVMInstanceViewResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMInstanceViewResponseOutput {
	return o
}

// Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) AssignedHost() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) string { return v.AssignedHost }).(pulumi.StringOutput)
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. You can easily view the output of your console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) BootDiagnostics() BootDiagnosticsInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *BootDiagnosticsInstanceViewResponse {
		return v.BootDiagnostics
	}).(BootDiagnosticsInstanceViewResponsePtrOutput)
}

// Specifies the host OS name of the virtual machine. <br><br> This name cannot be updated after the VM is created. <br><br> **Max-length (Windows):** 15 characters <br><br> **Max-length (Linux):** 64 characters. <br><br> For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) ComputerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.ComputerName }).(pulumi.StringPtrOutput)
}

// The disks information.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) Disks() DiskInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) []DiskInstanceViewResponse { return v.Disks }).(DiskInstanceViewResponseArrayOutput)
}

// The extensions information.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) Extensions() VirtualMachineExtensionInstanceViewResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) []VirtualMachineExtensionInstanceViewResponse {
		return v.Extensions
	}).(VirtualMachineExtensionInstanceViewResponseArrayOutput)
}

// The hypervisor generation of the Virtual Machine [V1, V2]
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) HyperVGeneration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.HyperVGeneration }).(pulumi.StringPtrOutput)
}

// The Maintenance Operation status on the virtual machine.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) MaintenanceRedeployStatus() MaintenanceRedeployStatusResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *MaintenanceRedeployStatusResponse {
		return v.MaintenanceRedeployStatus
	}).(MaintenanceRedeployStatusResponsePtrOutput)
}

// The Operating System running on the hybrid machine.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

// The version of Operating System running on the hybrid machine.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) PlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.PlacementGroupId }).(pulumi.StringPtrOutput)
}

// The Fault Domain count.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) PlatformFaultDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *int { return v.PlatformFaultDomain }).(pulumi.IntPtrOutput)
}

// The Update Domain count.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) PlatformUpdateDomain() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *int { return v.PlatformUpdateDomain }).(pulumi.IntPtrOutput)
}

// The Remote desktop certificate thumbprint.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) RdpThumbPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *string { return v.RdpThumbPrint }).(pulumi.StringPtrOutput)
}

// The resource status information.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) Statuses() InstanceViewStatusResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) []InstanceViewStatusResponse { return v.Statuses }).(InstanceViewStatusResponseArrayOutput)
}

// The VM Agent running on the virtual machine.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) VmAgent() VirtualMachineAgentInstanceViewResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) *VirtualMachineAgentInstanceViewResponse {
		return v.VmAgent
	}).(VirtualMachineAgentInstanceViewResponsePtrOutput)
}

// The health status for the VM.
func (o VirtualMachineScaleSetVMInstanceViewResponseOutput) VmHealth() VirtualMachineHealthStatusResponseOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMInstanceViewResponse) VirtualMachineHealthStatusResponse {
		return v.VmHealth
	}).(VirtualMachineHealthStatusResponseOutput)
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfiguration struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfiguration `pulumi:"networkInterfaceConfigurations"`
}

// VirtualMachineScaleSetVMNetworkProfileConfigurationInput is an input type that accepts VirtualMachineScaleSetVMNetworkProfileConfigurationArgs and VirtualMachineScaleSetVMNetworkProfileConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMNetworkProfileConfigurationInput` via:
//
//	VirtualMachineScaleSetVMNetworkProfileConfigurationArgs{...}
type VirtualMachineScaleSetVMNetworkProfileConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationOutput
	ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationOutput
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationArgs struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations VirtualMachineScaleSetNetworkConfigurationArrayInput `pulumi:"networkInterfaceConfigurations"`
}

func (VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMNetworkProfileConfiguration)(nil)).Elem()
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return i.ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput)
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput).ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput is an input type that accepts VirtualMachineScaleSetVMNetworkProfileConfigurationArgs, VirtualMachineScaleSetVMNetworkProfileConfigurationPtr and VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput` via:
//
//	        VirtualMachineScaleSetVMNetworkProfileConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput
	ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput
}

type virtualMachineScaleSetVMNetworkProfileConfigurationPtrType VirtualMachineScaleSetVMNetworkProfileConfigurationArgs

func VirtualMachineScaleSetVMNetworkProfileConfigurationPtr(v *VirtualMachineScaleSetVMNetworkProfileConfigurationArgs) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrInput {
	return (*virtualMachineScaleSetVMNetworkProfileConfigurationPtrType)(v)
}

func (*virtualMachineScaleSetVMNetworkProfileConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMNetworkProfileConfiguration)(nil)).Elem()
}

func (i *virtualMachineScaleSetVMNetworkProfileConfigurationPtrType) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return i.ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetVMNetworkProfileConfigurationPtrType) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput)
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMNetworkProfileConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMNetworkProfileConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return o.ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetVMNetworkProfileConfiguration) *VirtualMachineScaleSetVMNetworkProfileConfiguration {
		return &v
	}).(VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetVMNetworkProfileConfigurationOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMNetworkProfileConfiguration) []VirtualMachineScaleSetNetworkConfiguration {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationArrayOutput)
}

type VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMNetworkProfileConfiguration)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput) Elem() VirtualMachineScaleSetVMNetworkProfileConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMNetworkProfileConfiguration) VirtualMachineScaleSetVMNetworkProfileConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetVMNetworkProfileConfiguration
		return ret
	}).(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMNetworkProfileConfiguration) []VirtualMachineScaleSetNetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationArrayOutput)
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationResponse struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfigurationResponse `pulumi:"networkInterfaceConfigurations"`
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMNetworkProfileConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput {
	return o
}

// The list of network configurations.
func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

type VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMNetworkProfileConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput() VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) ToVirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) Elem() VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) VirtualMachineScaleSetVMNetworkProfileConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetVMNetworkProfileConfigurationResponse
		return ret
	}).(VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput)
}

// The list of network configurations.
func (o VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput) NetworkInterfaceConfigurations() VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMNetworkProfileConfigurationResponse) []VirtualMachineScaleSetNetworkConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaceConfigurations
	}).(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput)
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfile struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	ApplicationProfile *ApplicationProfile `pulumi:"applicationProfile"`
	// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile `pulumi:"billingProfile"`
	// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
	CapacityReservation *CapacityReservationProfile `pulumi:"capacityReservation"`
	// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile `pulumi:"diagnosticsProfile"`
	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfile `pulumi:"extensionProfile"`
	// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
	HardwareProfile *VirtualMachineScaleSetHardwareProfile `pulumi:"hardwareProfile"`
	// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
	LicenseType *string `pulumi:"licenseType"`
	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile *VirtualMachineScaleSetNetworkProfile `pulumi:"networkProfile"`
	// Specifies the operating system settings for the virtual machines in the scale set.
	OsProfile *VirtualMachineScaleSetOSProfile `pulumi:"osProfile"`
	// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
	Priority *string `pulumi:"priority"`
	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile `pulumi:"scheduledEventsProfile"`
	// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
	SecurityPostureReference *SecurityPostureReference `pulumi:"securityPostureReference"`
	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile *SecurityProfile `pulumi:"securityProfile"`
	// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
	ServiceArtifactReference *ServiceArtifactReference `pulumi:"serviceArtifactReference"`
	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *VirtualMachineScaleSetStorageProfile `pulumi:"storageProfile"`
	// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
	UserData *string `pulumi:"userData"`
}

// VirtualMachineScaleSetVMProfileInput is an input type that accepts VirtualMachineScaleSetVMProfileArgs and VirtualMachineScaleSetVMProfileOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProfileInput` via:
//
//	VirtualMachineScaleSetVMProfileArgs{...}
type VirtualMachineScaleSetVMProfileInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProfileOutput() VirtualMachineScaleSetVMProfileOutput
	ToVirtualMachineScaleSetVMProfileOutputWithContext(context.Context) VirtualMachineScaleSetVMProfileOutput
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileArgs struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	ApplicationProfile ApplicationProfilePtrInput `pulumi:"applicationProfile"`
	// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
	BillingProfile BillingProfilePtrInput `pulumi:"billingProfile"`
	// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
	CapacityReservation CapacityReservationProfilePtrInput `pulumi:"capacityReservation"`
	// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
	DiagnosticsProfile DiagnosticsProfilePtrInput `pulumi:"diagnosticsProfile"`
	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy pulumi.StringPtrInput `pulumi:"evictionPolicy"`
	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile VirtualMachineScaleSetExtensionProfilePtrInput `pulumi:"extensionProfile"`
	// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
	HardwareProfile VirtualMachineScaleSetHardwareProfilePtrInput `pulumi:"hardwareProfile"`
	// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile VirtualMachineScaleSetNetworkProfilePtrInput `pulumi:"networkProfile"`
	// Specifies the operating system settings for the virtual machines in the scale set.
	OsProfile VirtualMachineScaleSetOSProfilePtrInput `pulumi:"osProfile"`
	// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile ScheduledEventsProfilePtrInput `pulumi:"scheduledEventsProfile"`
	// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
	SecurityPostureReference SecurityPostureReferencePtrInput `pulumi:"securityPostureReference"`
	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile SecurityProfilePtrInput `pulumi:"securityProfile"`
	// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
	ServiceArtifactReference ServiceArtifactReferencePtrInput `pulumi:"serviceArtifactReference"`
	// Specifies the storage settings for the virtual machine disks.
	StorageProfile VirtualMachineScaleSetStorageProfilePtrInput `pulumi:"storageProfile"`
	// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
	UserData pulumi.StringPtrInput `pulumi:"userData"`
}

func (VirtualMachineScaleSetVMProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProfile)(nil)).Elem()
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfileOutput() VirtualMachineScaleSetVMProfileOutput {
	return i.ToVirtualMachineScaleSetVMProfileOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProfileOutput)
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput {
	return i.ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProfileArgs) ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProfileOutput).ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetVMProfilePtrInput is an input type that accepts VirtualMachineScaleSetVMProfileArgs, VirtualMachineScaleSetVMProfilePtr and VirtualMachineScaleSetVMProfilePtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProfilePtrInput` via:
//
//	        VirtualMachineScaleSetVMProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetVMProfilePtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput
	ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Context) VirtualMachineScaleSetVMProfilePtrOutput
}

type virtualMachineScaleSetVMProfilePtrType VirtualMachineScaleSetVMProfileArgs

func VirtualMachineScaleSetVMProfilePtr(v *VirtualMachineScaleSetVMProfileArgs) VirtualMachineScaleSetVMProfilePtrInput {
	return (*virtualMachineScaleSetVMProfilePtrType)(v)
}

func (*virtualMachineScaleSetVMProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProfile)(nil)).Elem()
}

func (i *virtualMachineScaleSetVMProfilePtrType) ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput {
	return i.ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetVMProfilePtrType) ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProfilePtrOutput)
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProfileOutput) ToVirtualMachineScaleSetVMProfileOutput() VirtualMachineScaleSetVMProfileOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileOutput) ToVirtualMachineScaleSetVMProfileOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileOutput) ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput {
	return o.ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMProfileOutput) ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetVMProfile {
		return &v
	}).(VirtualMachineScaleSetVMProfilePtrOutput)
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o VirtualMachineScaleSetVMProfileOutput) ApplicationProfile() ApplicationProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *ApplicationProfile { return v.ApplicationProfile }).(ApplicationProfilePtrOutput)
}

// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
func (o VirtualMachineScaleSetVMProfileOutput) BillingProfile() BillingProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *BillingProfile { return v.BillingProfile }).(BillingProfilePtrOutput)
}

// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
func (o VirtualMachineScaleSetVMProfileOutput) CapacityReservation() CapacityReservationProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *CapacityReservationProfile { return v.CapacityReservation }).(CapacityReservationProfilePtrOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
func (o VirtualMachineScaleSetVMProfileOutput) DiagnosticsProfile() DiagnosticsProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *DiagnosticsProfile { return v.DiagnosticsProfile }).(DiagnosticsProfilePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *string { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileOutput) ExtensionProfile() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetExtensionProfile {
		return v.ExtensionProfile
	}).(VirtualMachineScaleSetExtensionProfilePtrOutput)
}

// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
func (o VirtualMachineScaleSetVMProfileOutput) HardwareProfile() VirtualMachineScaleSetHardwareProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetHardwareProfile {
		return v.HardwareProfile
	}).(VirtualMachineScaleSetHardwareProfilePtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
func (o VirtualMachineScaleSetVMProfileOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Specifies properties of the network interfaces of the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileOutput) NetworkProfile() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetNetworkProfile { return v.NetworkProfile }).(VirtualMachineScaleSetNetworkProfilePtrOutput)
}

// Specifies the operating system settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileOutput) OsProfile() VirtualMachineScaleSetOSProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetOSProfile { return v.OsProfile }).(VirtualMachineScaleSetOSProfilePtrOutput)
}

// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// Specifies Scheduled Event related configurations.
func (o VirtualMachineScaleSetVMProfileOutput) ScheduledEventsProfile() ScheduledEventsProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *ScheduledEventsProfile { return v.ScheduledEventsProfile }).(ScheduledEventsProfilePtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
func (o VirtualMachineScaleSetVMProfileOutput) SecurityPostureReference() SecurityPostureReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *SecurityPostureReference { return v.SecurityPostureReference }).(SecurityPostureReferencePtrOutput)
}

// Specifies the Security related profile settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileOutput) SecurityProfile() SecurityProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *SecurityProfile { return v.SecurityProfile }).(SecurityProfilePtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
func (o VirtualMachineScaleSetVMProfileOutput) ServiceArtifactReference() ServiceArtifactReferencePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *ServiceArtifactReference { return v.ServiceArtifactReference }).(ServiceArtifactReferencePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
func (o VirtualMachineScaleSetVMProfileOutput) StorageProfile() VirtualMachineScaleSetStorageProfilePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetStorageProfile { return v.StorageProfile }).(VirtualMachineScaleSetStorageProfilePtrOutput)
}

// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
func (o VirtualMachineScaleSetVMProfileOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfile) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetVMProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProfile)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProfilePtrOutput) ToVirtualMachineScaleSetVMProfilePtrOutput() VirtualMachineScaleSetVMProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfilePtrOutput) ToVirtualMachineScaleSetVMProfilePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfilePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfilePtrOutput) Elem() VirtualMachineScaleSetVMProfileOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) VirtualMachineScaleSetVMProfile {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetVMProfile
		return ret
	}).(VirtualMachineScaleSetVMProfileOutput)
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o VirtualMachineScaleSetVMProfilePtrOutput) ApplicationProfile() ApplicationProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *ApplicationProfile {
		if v == nil {
			return nil
		}
		return v.ApplicationProfile
	}).(ApplicationProfilePtrOutput)
}

// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
func (o VirtualMachineScaleSetVMProfilePtrOutput) BillingProfile() BillingProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *BillingProfile {
		if v == nil {
			return nil
		}
		return v.BillingProfile
	}).(BillingProfilePtrOutput)
}

// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
func (o VirtualMachineScaleSetVMProfilePtrOutput) CapacityReservation() CapacityReservationProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *CapacityReservationProfile {
		if v == nil {
			return nil
		}
		return v.CapacityReservation
	}).(CapacityReservationProfilePtrOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
func (o VirtualMachineScaleSetVMProfilePtrOutput) DiagnosticsProfile() DiagnosticsProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *DiagnosticsProfile {
		if v == nil {
			return nil
		}
		return v.DiagnosticsProfile
	}).(DiagnosticsProfilePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfilePtrOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *string {
		if v == nil {
			return nil
		}
		return v.EvictionPolicy
	}).(pulumi.StringPtrOutput)
}

// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfilePtrOutput) ExtensionProfile() VirtualMachineScaleSetExtensionProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetExtensionProfile {
		if v == nil {
			return nil
		}
		return v.ExtensionProfile
	}).(VirtualMachineScaleSetExtensionProfilePtrOutput)
}

// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
func (o VirtualMachineScaleSetVMProfilePtrOutput) HardwareProfile() VirtualMachineScaleSetHardwareProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetHardwareProfile {
		if v == nil {
			return nil
		}
		return v.HardwareProfile
	}).(VirtualMachineScaleSetHardwareProfilePtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
func (o VirtualMachineScaleSetVMProfilePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Specifies properties of the network interfaces of the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfilePtrOutput) NetworkProfile() VirtualMachineScaleSetNetworkProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetNetworkProfile {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(VirtualMachineScaleSetNetworkProfilePtrOutput)
}

// Specifies the operating system settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfilePtrOutput) OsProfile() VirtualMachineScaleSetOSProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetOSProfile {
		if v == nil {
			return nil
		}
		return v.OsProfile
	}).(VirtualMachineScaleSetOSProfilePtrOutput)
}

// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfilePtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// Specifies Scheduled Event related configurations.
func (o VirtualMachineScaleSetVMProfilePtrOutput) ScheduledEventsProfile() ScheduledEventsProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *ScheduledEventsProfile {
		if v == nil {
			return nil
		}
		return v.ScheduledEventsProfile
	}).(ScheduledEventsProfilePtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
func (o VirtualMachineScaleSetVMProfilePtrOutput) SecurityPostureReference() SecurityPostureReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *SecurityPostureReference {
		if v == nil {
			return nil
		}
		return v.SecurityPostureReference
	}).(SecurityPostureReferencePtrOutput)
}

// Specifies the Security related profile settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfilePtrOutput) SecurityProfile() SecurityProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *SecurityProfile {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(SecurityProfilePtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
func (o VirtualMachineScaleSetVMProfilePtrOutput) ServiceArtifactReference() ServiceArtifactReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *ServiceArtifactReference {
		if v == nil {
			return nil
		}
		return v.ServiceArtifactReference
	}).(ServiceArtifactReferencePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
func (o VirtualMachineScaleSetVMProfilePtrOutput) StorageProfile() VirtualMachineScaleSetStorageProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *VirtualMachineScaleSetStorageProfile {
		if v == nil {
			return nil
		}
		return v.StorageProfile
	}).(VirtualMachineScaleSetStorageProfilePtrOutput)
}

// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
func (o VirtualMachineScaleSetVMProfilePtrOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfile) *string {
		if v == nil {
			return nil
		}
		return v.UserData
	}).(pulumi.StringPtrOutput)
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileResponse struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	ApplicationProfile *ApplicationProfileResponse `pulumi:"applicationProfile"`
	// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfileResponse `pulumi:"billingProfile"`
	// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
	CapacityReservation *CapacityReservationProfileResponse `pulumi:"capacityReservation"`
	// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfileResponse `pulumi:"diagnosticsProfile"`
	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfileResponse `pulumi:"extensionProfile"`
	// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
	HardwareProfile *VirtualMachineScaleSetHardwareProfileResponse `pulumi:"hardwareProfile"`
	// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
	LicenseType *string `pulumi:"licenseType"`
	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile *VirtualMachineScaleSetNetworkProfileResponse `pulumi:"networkProfile"`
	// Specifies the operating system settings for the virtual machines in the scale set.
	OsProfile *VirtualMachineScaleSetOSProfileResponse `pulumi:"osProfile"`
	// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
	Priority *string `pulumi:"priority"`
	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfileResponse `pulumi:"scheduledEventsProfile"`
	// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
	SecurityPostureReference *SecurityPostureReferenceResponse `pulumi:"securityPostureReference"`
	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile *SecurityProfileResponse `pulumi:"securityProfile"`
	// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
	ServiceArtifactReference *ServiceArtifactReferenceResponse `pulumi:"serviceArtifactReference"`
	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *VirtualMachineScaleSetStorageProfileResponse `pulumi:"storageProfile"`
	// Specifies the time in which this VM profile for the Virtual Machine Scale Set was created. This value will be added to VMSS Flex VM tags when creating/updating the VMSS VM Profile. Minimum API version for this property is 2023-09-01.
	TimeCreated string `pulumi:"timeCreated"`
	// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
	UserData *string `pulumi:"userData"`
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProfileResponseOutput) ToVirtualMachineScaleSetVMProfileResponseOutput() VirtualMachineScaleSetVMProfileResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponseOutput) ToVirtualMachineScaleSetVMProfileResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileResponseOutput {
	return o
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o VirtualMachineScaleSetVMProfileResponseOutput) ApplicationProfile() ApplicationProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *ApplicationProfileResponse {
		return v.ApplicationProfile
	}).(ApplicationProfileResponsePtrOutput)
}

// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
func (o VirtualMachineScaleSetVMProfileResponseOutput) BillingProfile() BillingProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *BillingProfileResponse { return v.BillingProfile }).(BillingProfileResponsePtrOutput)
}

// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
func (o VirtualMachineScaleSetVMProfileResponseOutput) CapacityReservation() CapacityReservationProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *CapacityReservationProfileResponse {
		return v.CapacityReservation
	}).(CapacityReservationProfileResponsePtrOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
func (o VirtualMachineScaleSetVMProfileResponseOutput) DiagnosticsProfile() DiagnosticsProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *DiagnosticsProfileResponse {
		return v.DiagnosticsProfile
	}).(DiagnosticsProfileResponsePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileResponseOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) ExtensionProfile() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetExtensionProfileResponse {
		return v.ExtensionProfile
	}).(VirtualMachineScaleSetExtensionProfileResponsePtrOutput)
}

// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
func (o VirtualMachineScaleSetVMProfileResponseOutput) HardwareProfile() VirtualMachineScaleSetHardwareProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetHardwareProfileResponse {
		return v.HardwareProfile
	}).(VirtualMachineScaleSetHardwareProfileResponsePtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
func (o VirtualMachineScaleSetVMProfileResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Specifies properties of the network interfaces of the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) NetworkProfile() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetNetworkProfileResponse {
		return v.NetworkProfile
	}).(VirtualMachineScaleSetNetworkProfileResponsePtrOutput)
}

// Specifies the operating system settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) OsProfile() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetOSProfileResponse {
		return v.OsProfile
	}).(VirtualMachineScaleSetOSProfileResponsePtrOutput)
}

// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileResponseOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// Specifies Scheduled Event related configurations.
func (o VirtualMachineScaleSetVMProfileResponseOutput) ScheduledEventsProfile() ScheduledEventsProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *ScheduledEventsProfileResponse {
		return v.ScheduledEventsProfile
	}).(ScheduledEventsProfileResponsePtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
func (o VirtualMachineScaleSetVMProfileResponseOutput) SecurityPostureReference() SecurityPostureReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *SecurityPostureReferenceResponse {
		return v.SecurityPostureReference
	}).(SecurityPostureReferenceResponsePtrOutput)
}

// Specifies the Security related profile settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponseOutput) SecurityProfile() SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *SecurityProfileResponse { return v.SecurityProfile }).(SecurityProfileResponsePtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
func (o VirtualMachineScaleSetVMProfileResponseOutput) ServiceArtifactReference() ServiceArtifactReferenceResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *ServiceArtifactReferenceResponse {
		return v.ServiceArtifactReference
	}).(ServiceArtifactReferenceResponsePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
func (o VirtualMachineScaleSetVMProfileResponseOutput) StorageProfile() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetStorageProfileResponse {
		return v.StorageProfile
	}).(VirtualMachineScaleSetStorageProfileResponsePtrOutput)
}

// Specifies the time in which this VM profile for the Virtual Machine Scale Set was created. This value will be added to VMSS Flex VM tags when creating/updating the VMSS VM Profile. Minimum API version for this property is 2023-09-01.
func (o VirtualMachineScaleSetVMProfileResponseOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
func (o VirtualMachineScaleSetVMProfileResponseOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProfileResponse) *string { return v.UserData }).(pulumi.StringPtrOutput)
}

type VirtualMachineScaleSetVMProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProfileResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ToVirtualMachineScaleSetVMProfileResponsePtrOutput() VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ToVirtualMachineScaleSetVMProfileResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProfileResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) Elem() VirtualMachineScaleSetVMProfileResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) VirtualMachineScaleSetVMProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetVMProfileResponse
		return ret
	}).(VirtualMachineScaleSetVMProfileResponseOutput)
}

// Specifies the gallery applications that should be made available to the VM/VMSS
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ApplicationProfile() ApplicationProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *ApplicationProfileResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationProfile
	}).(ApplicationProfileResponsePtrOutput)
}

// Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) BillingProfile() BillingProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *BillingProfileResponse {
		if v == nil {
			return nil
		}
		return v.BillingProfile
	}).(BillingProfileResponsePtrOutput)
}

// Specifies the capacity reservation related details of a scale set. Minimum api-version: 2021-04-01.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) CapacityReservation() CapacityReservationProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *CapacityReservationProfileResponse {
		if v == nil {
			return nil
		}
		return v.CapacityReservation
	}).(CapacityReservationProfileResponsePtrOutput)
}

// Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) DiagnosticsProfile() DiagnosticsProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *DiagnosticsProfileResponse {
		if v == nil {
			return nil
		}
		return v.DiagnosticsProfile
	}).(DiagnosticsProfileResponsePtrOutput)
}

// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EvictionPolicy
	}).(pulumi.StringPtrOutput)
}

// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ExtensionProfile() VirtualMachineScaleSetExtensionProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetExtensionProfileResponse {
		if v == nil {
			return nil
		}
		return v.ExtensionProfile
	}).(VirtualMachineScaleSetExtensionProfileResponsePtrOutput)
}

// Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) HardwareProfile() VirtualMachineScaleSetHardwareProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetHardwareProfileResponse {
		if v == nil {
			return nil
		}
		return v.HardwareProfile
	}).(VirtualMachineScaleSetHardwareProfileResponsePtrOutput)
}

// Specifies that the image or disk that is being used was licensed on-premises. <br><br> Possible values for Windows Server operating system are: <br><br> Windows_Client <br><br> Windows_Server <br><br> Possible values for Linux Server operating system are: <br><br> RHEL_BYOS (for RHEL) <br><br> SLES_BYOS (for SUSE) <br><br> For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) <br><br> [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) <br><br> Minimum api-version: 2015-06-15
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Specifies properties of the network interfaces of the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) NetworkProfile() VirtualMachineScaleSetNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetNetworkProfileResponse {
		if v == nil {
			return nil
		}
		return v.NetworkProfile
	}).(VirtualMachineScaleSetNetworkProfileResponsePtrOutput)
}

// Specifies the operating system settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) OsProfile() VirtualMachineScaleSetOSProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetOSProfileResponse {
		if v == nil {
			return nil
		}
		return v.OsProfile
	}).(VirtualMachineScaleSetOSProfileResponsePtrOutput)
}

// Specifies the priority for the virtual machines in the scale set. Minimum api-version: 2017-10-30-preview.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// Specifies Scheduled Event related configurations.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ScheduledEventsProfile() ScheduledEventsProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *ScheduledEventsProfileResponse {
		if v == nil {
			return nil
		}
		return v.ScheduledEventsProfile
	}).(ScheduledEventsProfileResponsePtrOutput)
}

// Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) SecurityPostureReference() SecurityPostureReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *SecurityPostureReferenceResponse {
		if v == nil {
			return nil
		}
		return v.SecurityPostureReference
	}).(SecurityPostureReferenceResponsePtrOutput)
}

// Specifies the Security related profile settings for the virtual machines in the scale set.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) SecurityProfile() SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *SecurityProfileResponse {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(SecurityProfileResponsePtrOutput)
}

// Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) ServiceArtifactReference() ServiceArtifactReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *ServiceArtifactReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ServiceArtifactReference
	}).(ServiceArtifactReferenceResponsePtrOutput)
}

// Specifies the storage settings for the virtual machine disks.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) StorageProfile() VirtualMachineScaleSetStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *VirtualMachineScaleSetStorageProfileResponse {
		if v == nil {
			return nil
		}
		return v.StorageProfile
	}).(VirtualMachineScaleSetStorageProfileResponsePtrOutput)
}

// Specifies the time in which this VM profile for the Virtual Machine Scale Set was created. This value will be added to VMSS Flex VM tags when creating/updating the VMSS VM Profile. Minimum API version for this property is 2023-09-01.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) TimeCreated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeCreated
	}).(pulumi.StringPtrOutput)
}

// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
func (o VirtualMachineScaleSetVMProfileResponsePtrOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserData
	}).(pulumi.StringPtrOutput)
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicy struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
	ProtectFromScaleSetActions *bool `pulumi:"protectFromScaleSetActions"`
}

// VirtualMachineScaleSetVMProtectionPolicyInput is an input type that accepts VirtualMachineScaleSetVMProtectionPolicyArgs and VirtualMachineScaleSetVMProtectionPolicyOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProtectionPolicyInput` via:
//
//	VirtualMachineScaleSetVMProtectionPolicyArgs{...}
type VirtualMachineScaleSetVMProtectionPolicyInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProtectionPolicyOutput() VirtualMachineScaleSetVMProtectionPolicyOutput
	ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(context.Context) VirtualMachineScaleSetVMProtectionPolicyOutput
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyArgs struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn pulumi.BoolPtrInput `pulumi:"protectFromScaleIn"`
	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
	ProtectFromScaleSetActions pulumi.BoolPtrInput `pulumi:"protectFromScaleSetActions"`
}

func (VirtualMachineScaleSetVMProtectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProtectionPolicy)(nil)).Elem()
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyOutput() VirtualMachineScaleSetVMProtectionPolicyOutput {
	return i.ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProtectionPolicyOutput)
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return i.ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Background())
}

func (i VirtualMachineScaleSetVMProtectionPolicyArgs) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProtectionPolicyOutput).ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx)
}

// VirtualMachineScaleSetVMProtectionPolicyPtrInput is an input type that accepts VirtualMachineScaleSetVMProtectionPolicyArgs, VirtualMachineScaleSetVMProtectionPolicyPtr and VirtualMachineScaleSetVMProtectionPolicyPtrOutput values.
// You can construct a concrete instance of `VirtualMachineScaleSetVMProtectionPolicyPtrInput` via:
//
//	        VirtualMachineScaleSetVMProtectionPolicyArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineScaleSetVMProtectionPolicyPtrInput interface {
	pulumi.Input

	ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput
	ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput
}

type virtualMachineScaleSetVMProtectionPolicyPtrType VirtualMachineScaleSetVMProtectionPolicyArgs

func VirtualMachineScaleSetVMProtectionPolicyPtr(v *VirtualMachineScaleSetVMProtectionPolicyArgs) VirtualMachineScaleSetVMProtectionPolicyPtrInput {
	return (*virtualMachineScaleSetVMProtectionPolicyPtrType)(v)
}

func (*virtualMachineScaleSetVMProtectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProtectionPolicy)(nil)).Elem()
}

func (i *virtualMachineScaleSetVMProtectionPolicyPtrType) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return i.ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Background())
}

func (i *virtualMachineScaleSetVMProtectionPolicyPtrType) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineScaleSetVMProtectionPolicyPtrOutput)
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProtectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProtectionPolicy)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProtectionPolicyOutput) ToVirtualMachineScaleSetVMProtectionPolicyOutput() VirtualMachineScaleSetVMProtectionPolicyOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyOutput) ToVirtualMachineScaleSetVMProtectionPolicyOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyOutput) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return o.ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(context.Background())
}

func (o VirtualMachineScaleSetVMProtectionPolicyOutput) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineScaleSetVMProtectionPolicy) *VirtualMachineScaleSetVMProtectionPolicy {
		return &v
	}).(VirtualMachineScaleSetVMProtectionPolicyPtrOutput)
}

// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
func (o VirtualMachineScaleSetVMProtectionPolicyOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicy) *bool { return v.ProtectFromScaleIn }).(pulumi.BoolPtrOutput)
}

// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
func (o VirtualMachineScaleSetVMProtectionPolicyOutput) ProtectFromScaleSetActions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicy) *bool { return v.ProtectFromScaleSetActions }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetVMProtectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProtectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProtectionPolicy)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProtectionPolicyPtrOutput) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutput() VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyPtrOutput) ToVirtualMachineScaleSetVMProtectionPolicyPtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyPtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyPtrOutput) Elem() VirtualMachineScaleSetVMProtectionPolicyOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicy) VirtualMachineScaleSetVMProtectionPolicy {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetVMProtectionPolicy
		return ret
	}).(VirtualMachineScaleSetVMProtectionPolicyOutput)
}

// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
func (o VirtualMachineScaleSetVMProtectionPolicyPtrOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ProtectFromScaleIn
	}).(pulumi.BoolPtrOutput)
}

// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
func (o VirtualMachineScaleSetVMProtectionPolicyPtrOutput) ProtectFromScaleSetActions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ProtectFromScaleSetActions
	}).(pulumi.BoolPtrOutput)
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyResponse struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn *bool `pulumi:"protectFromScaleIn"`
	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
	ProtectFromScaleSetActions *bool `pulumi:"protectFromScaleSetActions"`
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineScaleSetVMProtectionPolicyResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponseOutput() VirtualMachineScaleSetVMProtectionPolicyResponseOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponseOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyResponseOutput {
	return o
}

// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicyResponse) *bool { return v.ProtectFromScaleIn }).(pulumi.BoolPtrOutput)
}

// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
func (o VirtualMachineScaleSetVMProtectionPolicyResponseOutput) ProtectFromScaleSetActions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineScaleSetVMProtectionPolicyResponse) *bool { return v.ProtectFromScaleSetActions }).(pulumi.BoolPtrOutput)
}

type VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineScaleSetVMProtectionPolicyResponse)(nil)).Elem()
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput() VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ToVirtualMachineScaleSetVMProtectionPolicyResponsePtrOutputWithContext(ctx context.Context) VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput {
	return o
}

func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) Elem() VirtualMachineScaleSetVMProtectionPolicyResponseOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicyResponse) VirtualMachineScaleSetVMProtectionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineScaleSetVMProtectionPolicyResponse
		return ret
	}).(VirtualMachineScaleSetVMProtectionPolicyResponseOutput)
}

// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ProtectFromScaleIn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProtectFromScaleIn
	}).(pulumi.BoolPtrOutput)
}

// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM.
func (o VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput) ProtectFromScaleSetActions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineScaleSetVMProtectionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProtectFromScaleSetActions
	}).(pulumi.BoolPtrOutput)
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfiguration struct {
	// The list of Windows Remote Management listeners
	Listeners []WinRMListener `pulumi:"listeners"`
}

// WinRMConfigurationInput is an input type that accepts WinRMConfigurationArgs and WinRMConfigurationOutput values.
// You can construct a concrete instance of `WinRMConfigurationInput` via:
//
//	WinRMConfigurationArgs{...}
type WinRMConfigurationInput interface {
	pulumi.Input

	ToWinRMConfigurationOutput() WinRMConfigurationOutput
	ToWinRMConfigurationOutputWithContext(context.Context) WinRMConfigurationOutput
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationArgs struct {
	// The list of Windows Remote Management listeners
	Listeners WinRMListenerArrayInput `pulumi:"listeners"`
}

func (WinRMConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMConfiguration)(nil)).Elem()
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationOutput() WinRMConfigurationOutput {
	return i.ToWinRMConfigurationOutputWithContext(context.Background())
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationOutputWithContext(ctx context.Context) WinRMConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMConfigurationOutput)
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput {
	return i.ToWinRMConfigurationPtrOutputWithContext(context.Background())
}

func (i WinRMConfigurationArgs) ToWinRMConfigurationPtrOutputWithContext(ctx context.Context) WinRMConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMConfigurationOutput).ToWinRMConfigurationPtrOutputWithContext(ctx)
}

// WinRMConfigurationPtrInput is an input type that accepts WinRMConfigurationArgs, WinRMConfigurationPtr and WinRMConfigurationPtrOutput values.
// You can construct a concrete instance of `WinRMConfigurationPtrInput` via:
//
//	        WinRMConfigurationArgs{...}
//
//	or:
//
//	        nil
type WinRMConfigurationPtrInput interface {
	pulumi.Input

	ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput
	ToWinRMConfigurationPtrOutputWithContext(context.Context) WinRMConfigurationPtrOutput
}

type winRMConfigurationPtrType WinRMConfigurationArgs

func WinRMConfigurationPtr(v *WinRMConfigurationArgs) WinRMConfigurationPtrInput {
	return (*winRMConfigurationPtrType)(v)
}

func (*winRMConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRMConfiguration)(nil)).Elem()
}

func (i *winRMConfigurationPtrType) ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput {
	return i.ToWinRMConfigurationPtrOutputWithContext(context.Background())
}

func (i *winRMConfigurationPtrType) ToWinRMConfigurationPtrOutputWithContext(ctx context.Context) WinRMConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMConfigurationPtrOutput)
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationOutput struct{ *pulumi.OutputState }

func (WinRMConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMConfiguration)(nil)).Elem()
}

func (o WinRMConfigurationOutput) ToWinRMConfigurationOutput() WinRMConfigurationOutput {
	return o
}

func (o WinRMConfigurationOutput) ToWinRMConfigurationOutputWithContext(ctx context.Context) WinRMConfigurationOutput {
	return o
}

func (o WinRMConfigurationOutput) ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput {
	return o.ToWinRMConfigurationPtrOutputWithContext(context.Background())
}

func (o WinRMConfigurationOutput) ToWinRMConfigurationPtrOutputWithContext(ctx context.Context) WinRMConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WinRMConfiguration) *WinRMConfiguration {
		return &v
	}).(WinRMConfigurationPtrOutput)
}

// The list of Windows Remote Management listeners
func (o WinRMConfigurationOutput) Listeners() WinRMListenerArrayOutput {
	return o.ApplyT(func(v WinRMConfiguration) []WinRMListener { return v.Listeners }).(WinRMListenerArrayOutput)
}

type WinRMConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WinRMConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRMConfiguration)(nil)).Elem()
}

func (o WinRMConfigurationPtrOutput) ToWinRMConfigurationPtrOutput() WinRMConfigurationPtrOutput {
	return o
}

func (o WinRMConfigurationPtrOutput) ToWinRMConfigurationPtrOutputWithContext(ctx context.Context) WinRMConfigurationPtrOutput {
	return o
}

func (o WinRMConfigurationPtrOutput) Elem() WinRMConfigurationOutput {
	return o.ApplyT(func(v *WinRMConfiguration) WinRMConfiguration {
		if v != nil {
			return *v
		}
		var ret WinRMConfiguration
		return ret
	}).(WinRMConfigurationOutput)
}

// The list of Windows Remote Management listeners
func (o WinRMConfigurationPtrOutput) Listeners() WinRMListenerArrayOutput {
	return o.ApplyT(func(v *WinRMConfiguration) []WinRMListener {
		if v == nil {
			return nil
		}
		return v.Listeners
	}).(WinRMListenerArrayOutput)
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationResponse struct {
	// The list of Windows Remote Management listeners
	Listeners []WinRMListenerResponse `pulumi:"listeners"`
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WinRMConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMConfigurationResponse)(nil)).Elem()
}

func (o WinRMConfigurationResponseOutput) ToWinRMConfigurationResponseOutput() WinRMConfigurationResponseOutput {
	return o
}

func (o WinRMConfigurationResponseOutput) ToWinRMConfigurationResponseOutputWithContext(ctx context.Context) WinRMConfigurationResponseOutput {
	return o
}

// The list of Windows Remote Management listeners
func (o WinRMConfigurationResponseOutput) Listeners() WinRMListenerResponseArrayOutput {
	return o.ApplyT(func(v WinRMConfigurationResponse) []WinRMListenerResponse { return v.Listeners }).(WinRMListenerResponseArrayOutput)
}

type WinRMConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WinRMConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WinRMConfigurationResponse)(nil)).Elem()
}

func (o WinRMConfigurationResponsePtrOutput) ToWinRMConfigurationResponsePtrOutput() WinRMConfigurationResponsePtrOutput {
	return o
}

func (o WinRMConfigurationResponsePtrOutput) ToWinRMConfigurationResponsePtrOutputWithContext(ctx context.Context) WinRMConfigurationResponsePtrOutput {
	return o
}

func (o WinRMConfigurationResponsePtrOutput) Elem() WinRMConfigurationResponseOutput {
	return o.ApplyT(func(v *WinRMConfigurationResponse) WinRMConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret WinRMConfigurationResponse
		return ret
	}).(WinRMConfigurationResponseOutput)
}

// The list of Windows Remote Management listeners
func (o WinRMConfigurationResponsePtrOutput) Listeners() WinRMListenerResponseArrayOutput {
	return o.ApplyT(func(v *WinRMConfigurationResponse) []WinRMListenerResponse {
		if v == nil {
			return nil
		}
		return v.Listeners
	}).(WinRMListenerResponseArrayOutput)
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListener struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	CertificateUrl *string `pulumi:"certificateUrl"`
	// Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**
	Protocol *ProtocolTypes `pulumi:"protocol"`
}

// WinRMListenerInput is an input type that accepts WinRMListenerArgs and WinRMListenerOutput values.
// You can construct a concrete instance of `WinRMListenerInput` via:
//
//	WinRMListenerArgs{...}
type WinRMListenerInput interface {
	pulumi.Input

	ToWinRMListenerOutput() WinRMListenerOutput
	ToWinRMListenerOutputWithContext(context.Context) WinRMListenerOutput
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerArgs struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	CertificateUrl pulumi.StringPtrInput `pulumi:"certificateUrl"`
	// Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**
	Protocol ProtocolTypesPtrInput `pulumi:"protocol"`
}

func (WinRMListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMListener)(nil)).Elem()
}

func (i WinRMListenerArgs) ToWinRMListenerOutput() WinRMListenerOutput {
	return i.ToWinRMListenerOutputWithContext(context.Background())
}

func (i WinRMListenerArgs) ToWinRMListenerOutputWithContext(ctx context.Context) WinRMListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMListenerOutput)
}

// WinRMListenerArrayInput is an input type that accepts WinRMListenerArray and WinRMListenerArrayOutput values.
// You can construct a concrete instance of `WinRMListenerArrayInput` via:
//
//	WinRMListenerArray{ WinRMListenerArgs{...} }
type WinRMListenerArrayInput interface {
	pulumi.Input

	ToWinRMListenerArrayOutput() WinRMListenerArrayOutput
	ToWinRMListenerArrayOutputWithContext(context.Context) WinRMListenerArrayOutput
}

type WinRMListenerArray []WinRMListenerInput

func (WinRMListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinRMListener)(nil)).Elem()
}

func (i WinRMListenerArray) ToWinRMListenerArrayOutput() WinRMListenerArrayOutput {
	return i.ToWinRMListenerArrayOutputWithContext(context.Background())
}

func (i WinRMListenerArray) ToWinRMListenerArrayOutputWithContext(ctx context.Context) WinRMListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WinRMListenerArrayOutput)
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerOutput struct{ *pulumi.OutputState }

func (WinRMListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMListener)(nil)).Elem()
}

func (o WinRMListenerOutput) ToWinRMListenerOutput() WinRMListenerOutput {
	return o
}

func (o WinRMListenerOutput) ToWinRMListenerOutputWithContext(ctx context.Context) WinRMListenerOutput {
	return o
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o WinRMListenerOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRMListener) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

// Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**
func (o WinRMListenerOutput) Protocol() ProtocolTypesPtrOutput {
	return o.ApplyT(func(v WinRMListener) *ProtocolTypes { return v.Protocol }).(ProtocolTypesPtrOutput)
}

type WinRMListenerArrayOutput struct{ *pulumi.OutputState }

func (WinRMListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinRMListener)(nil)).Elem()
}

func (o WinRMListenerArrayOutput) ToWinRMListenerArrayOutput() WinRMListenerArrayOutput {
	return o
}

func (o WinRMListenerArrayOutput) ToWinRMListenerArrayOutputWithContext(ctx context.Context) WinRMListenerArrayOutput {
	return o
}

func (o WinRMListenerArrayOutput) Index(i pulumi.IntInput) WinRMListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WinRMListener {
		return vs[0].([]WinRMListener)[vs[1].(int)]
	}).(WinRMListenerOutput)
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerResponse struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
	CertificateUrl *string `pulumi:"certificateUrl"`
	// Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**
	Protocol *string `pulumi:"protocol"`
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListenerResponseOutput struct{ *pulumi.OutputState }

func (WinRMListenerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WinRMListenerResponse)(nil)).Elem()
}

func (o WinRMListenerResponseOutput) ToWinRMListenerResponseOutput() WinRMListenerResponseOutput {
	return o
}

func (o WinRMListenerResponseOutput) ToWinRMListenerResponseOutputWithContext(ctx context.Context) WinRMListenerResponseOutput {
	return o
}

// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be the Base64 encoding of the following JSON Object which is encoded in UTF-8: <br><br> {<br>  "data":"<Base64-encoded-certificate>",<br>  "dataType":"pfx",<br>  "password":"<pfx-file-password>"<br>} <br> To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).
func (o WinRMListenerResponseOutput) CertificateUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRMListenerResponse) *string { return v.CertificateUrl }).(pulumi.StringPtrOutput)
}

// Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**
func (o WinRMListenerResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WinRMListenerResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type WinRMListenerResponseArrayOutput struct{ *pulumi.OutputState }

func (WinRMListenerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WinRMListenerResponse)(nil)).Elem()
}

func (o WinRMListenerResponseArrayOutput) ToWinRMListenerResponseArrayOutput() WinRMListenerResponseArrayOutput {
	return o
}

func (o WinRMListenerResponseArrayOutput) ToWinRMListenerResponseArrayOutputWithContext(ctx context.Context) WinRMListenerResponseArrayOutput {
	return o
}

func (o WinRMListenerResponseArrayOutput) Index(i pulumi.IntInput) WinRMListenerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WinRMListenerResponse {
		return vs[0].([]WinRMListenerResponse)[vs[1].(int)]
	}).(WinRMListenerResponseOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContent `pulumi:"additionalUnattendContent"`
	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
	PatchSettings *PatchSettings `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM *WinRMConfiguration `pulumi:"winRM"`
}

// WindowsConfigurationInput is an input type that accepts WindowsConfigurationArgs and WindowsConfigurationOutput values.
// You can construct a concrete instance of `WindowsConfigurationInput` via:
//
//	WindowsConfigurationArgs{...}
type WindowsConfigurationInput interface {
	pulumi.Input

	ToWindowsConfigurationOutput() WindowsConfigurationOutput
	ToWindowsConfigurationOutputWithContext(context.Context) WindowsConfigurationOutput
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationArgs struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent AdditionalUnattendContentArrayInput `pulumi:"additionalUnattendContent"`
	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates pulumi.BoolPtrInput `pulumi:"enableAutomaticUpdates"`
	// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
	PatchSettings PatchSettingsPtrInput `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent pulumi.BoolPtrInput `pulumi:"provisionVMAgent"`
	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM WinRMConfigurationPtrInput `pulumi:"winRM"`
}

func (WindowsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return i.ToWindowsConfigurationOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput)
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput).ToWindowsConfigurationPtrOutputWithContext(ctx)
}

// WindowsConfigurationPtrInput is an input type that accepts WindowsConfigurationArgs, WindowsConfigurationPtr and WindowsConfigurationPtrOutput values.
// You can construct a concrete instance of `WindowsConfigurationPtrInput` via:
//
//	        WindowsConfigurationArgs{...}
//
//	or:
//
//	        nil
type WindowsConfigurationPtrInput interface {
	pulumi.Input

	ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput
	ToWindowsConfigurationPtrOutputWithContext(context.Context) WindowsConfigurationPtrOutput
}

type windowsConfigurationPtrType WindowsConfigurationArgs

func WindowsConfigurationPtr(v *WindowsConfigurationArgs) WindowsConfigurationPtrInput {
	return (*windowsConfigurationPtrType)(v)
}

func (*windowsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return o
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return o
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return o.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsConfiguration) *WindowsConfiguration {
		return &v
	}).(WindowsConfigurationPtrOutput)
}

// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
func (o WindowsConfigurationOutput) AdditionalUnattendContent() AdditionalUnattendContentArrayOutput {
	return o.ApplyT(func(v WindowsConfiguration) []AdditionalUnattendContent { return v.AdditionalUnattendContent }).(AdditionalUnattendContentArrayOutput)
}

// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
func (o WindowsConfigurationOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *bool { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
func (o WindowsConfigurationOutput) PatchSettings() PatchSettingsPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *PatchSettings { return v.PatchSettings }).(PatchSettingsPtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o WindowsConfigurationOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *bool { return v.ProvisionVMAgent }).(pulumi.BoolPtrOutput)
}

// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
func (o WindowsConfigurationOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
func (o WindowsConfigurationOutput) WinRM() WinRMConfigurationPtrOutput {
	return o.ApplyT(func(v WindowsConfiguration) *WinRMConfiguration { return v.WinRM }).(WinRMConfigurationPtrOutput)
}

type WindowsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (o WindowsConfigurationPtrOutput) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return o
}

func (o WindowsConfigurationPtrOutput) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return o
}

func (o WindowsConfigurationPtrOutput) Elem() WindowsConfigurationOutput {
	return o.ApplyT(func(v *WindowsConfiguration) WindowsConfiguration {
		if v != nil {
			return *v
		}
		var ret WindowsConfiguration
		return ret
	}).(WindowsConfigurationOutput)
}

// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
func (o WindowsConfigurationPtrOutput) AdditionalUnattendContent() AdditionalUnattendContentArrayOutput {
	return o.ApplyT(func(v *WindowsConfiguration) []AdditionalUnattendContent {
		if v == nil {
			return nil
		}
		return v.AdditionalUnattendContent
	}).(AdditionalUnattendContentArrayOutput)
}

// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
func (o WindowsConfigurationPtrOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticUpdates
	}).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
func (o WindowsConfigurationPtrOutput) PatchSettings() PatchSettingsPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *PatchSettings {
		if v == nil {
			return nil
		}
		return v.PatchSettings
	}).(PatchSettingsPtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o WindowsConfigurationPtrOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ProvisionVMAgent
	}).(pulumi.BoolPtrOutput)
}

// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
func (o WindowsConfigurationPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
func (o WindowsConfigurationPtrOutput) WinRM() WinRMConfigurationPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *WinRMConfiguration {
		if v == nil {
			return nil
		}
		return v.WinRM
	}).(WinRMConfigurationPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponse struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContentResponse `pulumi:"additionalUnattendContent"`
	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `pulumi:"enableAutomaticUpdates"`
	// Indicates whether VMAgent Platform Updates are enabled for the Windows Virtual Machine.
	EnableVMAgentPlatformUpdates bool `pulumi:"enableVMAgentPlatformUpdates"`
	// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
	PatchSettings *PatchSettingsResponse `pulumi:"patchSettings"`
	// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `pulumi:"provisionVMAgent"`
	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM *WinRMConfigurationResponse `pulumi:"winRM"`
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutputWithContext(ctx context.Context) WindowsConfigurationResponseOutput {
	return o
}

// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
func (o WindowsConfigurationResponseOutput) AdditionalUnattendContent() AdditionalUnattendContentResponseArrayOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) []AdditionalUnattendContentResponse {
		return v.AdditionalUnattendContent
	}).(AdditionalUnattendContentResponseArrayOutput)
}

// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
func (o WindowsConfigurationResponseOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *bool { return v.EnableAutomaticUpdates }).(pulumi.BoolPtrOutput)
}

// Indicates whether VMAgent Platform Updates are enabled for the Windows Virtual Machine.
func (o WindowsConfigurationResponseOutput) EnableVMAgentPlatformUpdates() pulumi.BoolOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) bool { return v.EnableVMAgentPlatformUpdates }).(pulumi.BoolOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
func (o WindowsConfigurationResponseOutput) PatchSettings() PatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *PatchSettingsResponse { return v.PatchSettings }).(PatchSettingsResponsePtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o WindowsConfigurationResponseOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *bool { return v.ProvisionVMAgent }).(pulumi.BoolPtrOutput)
}

// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
func (o WindowsConfigurationResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
func (o WindowsConfigurationResponseOutput) WinRM() WinRMConfigurationResponsePtrOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) *WinRMConfigurationResponse { return v.WinRM }).(WinRMConfigurationResponsePtrOutput)
}

type WindowsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) Elem() WindowsConfigurationResponseOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) WindowsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret WindowsConfigurationResponse
		return ret
	}).(WindowsConfigurationResponseOutput)
}

// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
func (o WindowsConfigurationResponsePtrOutput) AdditionalUnattendContent() AdditionalUnattendContentResponseArrayOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) []AdditionalUnattendContentResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalUnattendContent
	}).(AdditionalUnattendContentResponseArrayOutput)
}

// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
func (o WindowsConfigurationResponsePtrOutput) EnableAutomaticUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAutomaticUpdates
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether VMAgent Platform Updates are enabled for the Windows Virtual Machine.
func (o WindowsConfigurationResponsePtrOutput) EnableVMAgentPlatformUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableVMAgentPlatformUpdates
	}).(pulumi.BoolPtrOutput)
}

// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
func (o WindowsConfigurationResponsePtrOutput) PatchSettings() PatchSettingsResponsePtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *PatchSettingsResponse {
		if v == nil {
			return nil
		}
		return v.PatchSettings
	}).(PatchSettingsResponsePtrOutput)
}

// Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, it is set to true by default. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later.
func (o WindowsConfigurationResponsePtrOutput) ProvisionVMAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ProvisionVMAgent
	}).(pulumi.BoolPtrOutput)
}

// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time". Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).
func (o WindowsConfigurationResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
func (o WindowsConfigurationResponsePtrOutput) WinRM() WinRMConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *WinRMConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.WinRM
	}).(WinRMConfigurationResponsePtrOutput)
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings.
type WindowsVMGuestPatchAutomaticByPlatformSettings struct {
	// Enables customer to schedule patching without accidental upgrades
	BypassPlatformSafetyChecksOnUserSchedule *bool `pulumi:"bypassPlatformSafetyChecksOnUserSchedule"`
	// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
	RebootSetting *string `pulumi:"rebootSetting"`
}

// WindowsVMGuestPatchAutomaticByPlatformSettingsInput is an input type that accepts WindowsVMGuestPatchAutomaticByPlatformSettingsArgs and WindowsVMGuestPatchAutomaticByPlatformSettingsOutput values.
// You can construct a concrete instance of `WindowsVMGuestPatchAutomaticByPlatformSettingsInput` via:
//
//	WindowsVMGuestPatchAutomaticByPlatformSettingsArgs{...}
type WindowsVMGuestPatchAutomaticByPlatformSettingsInput interface {
	pulumi.Input

	ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsOutput
	ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsOutput
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings.
type WindowsVMGuestPatchAutomaticByPlatformSettingsArgs struct {
	// Enables customer to schedule patching without accidental upgrades
	BypassPlatformSafetyChecksOnUserSchedule pulumi.BoolPtrInput `pulumi:"bypassPlatformSafetyChecksOnUserSchedule"`
	// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
	RebootSetting pulumi.StringPtrInput `pulumi:"rebootSetting"`
}

func (WindowsVMGuestPatchAutomaticByPlatformSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (i WindowsVMGuestPatchAutomaticByPlatformSettingsArgs) ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsOutput {
	return i.ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(context.Background())
}

func (i WindowsVMGuestPatchAutomaticByPlatformSettingsArgs) ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVMGuestPatchAutomaticByPlatformSettingsOutput)
}

func (i WindowsVMGuestPatchAutomaticByPlatformSettingsArgs) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return i.ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Background())
}

func (i WindowsVMGuestPatchAutomaticByPlatformSettingsArgs) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVMGuestPatchAutomaticByPlatformSettingsOutput).ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx)
}

// WindowsVMGuestPatchAutomaticByPlatformSettingsPtrInput is an input type that accepts WindowsVMGuestPatchAutomaticByPlatformSettingsArgs, WindowsVMGuestPatchAutomaticByPlatformSettingsPtr and WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput values.
// You can construct a concrete instance of `WindowsVMGuestPatchAutomaticByPlatformSettingsPtrInput` via:
//
//	        WindowsVMGuestPatchAutomaticByPlatformSettingsArgs{...}
//
//	or:
//
//	        nil
type WindowsVMGuestPatchAutomaticByPlatformSettingsPtrInput interface {
	pulumi.Input

	ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput
	ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput
}

type windowsVMGuestPatchAutomaticByPlatformSettingsPtrType WindowsVMGuestPatchAutomaticByPlatformSettingsArgs

func WindowsVMGuestPatchAutomaticByPlatformSettingsPtr(v *WindowsVMGuestPatchAutomaticByPlatformSettingsArgs) WindowsVMGuestPatchAutomaticByPlatformSettingsPtrInput {
	return (*windowsVMGuestPatchAutomaticByPlatformSettingsPtrType)(v)
}

func (*windowsVMGuestPatchAutomaticByPlatformSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (i *windowsVMGuestPatchAutomaticByPlatformSettingsPtrType) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return i.ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Background())
}

func (i *windowsVMGuestPatchAutomaticByPlatformSettingsPtrType) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings.
type WindowsVMGuestPatchAutomaticByPlatformSettingsOutput struct{ *pulumi.OutputState }

func (WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(context.Background())
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsVMGuestPatchAutomaticByPlatformSettings) *WindowsVMGuestPatchAutomaticByPlatformSettings {
		return &v
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput)
}

// Enables customer to schedule patching without accidental upgrades
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsVMGuestPatchAutomaticByPlatformSettings) *bool {
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsVMGuestPatchAutomaticByPlatformSettings) *string { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

type WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput struct{ *pulumi.OutputState }

func (WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVMGuestPatchAutomaticByPlatformSettings)(nil)).Elem()
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput) Elem() WindowsVMGuestPatchAutomaticByPlatformSettingsOutput {
	return o.ApplyT(func(v *WindowsVMGuestPatchAutomaticByPlatformSettings) WindowsVMGuestPatchAutomaticByPlatformSettings {
		if v != nil {
			return *v
		}
		var ret WindowsVMGuestPatchAutomaticByPlatformSettings
		return ret
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsOutput)
}

// Enables customer to schedule patching without accidental upgrades
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVMGuestPatchAutomaticByPlatformSettings) *bool {
		if v == nil {
			return nil
		}
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVMGuestPatchAutomaticByPlatformSettings) *string {
		if v == nil {
			return nil
		}
		return v.RebootSetting
	}).(pulumi.StringPtrOutput)
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings.
type WindowsVMGuestPatchAutomaticByPlatformSettingsResponse struct {
	// Enables customer to schedule patching without accidental upgrades
	BypassPlatformSafetyChecksOnUserSchedule *bool `pulumi:"bypassPlatformSafetyChecksOnUserSchedule"`
	// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
	RebootSetting *string `pulumi:"rebootSetting"`
}

// Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in Windows patch settings.
type WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput struct{ *pulumi.OutputState }

func (WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsVMGuestPatchAutomaticByPlatformSettingsResponse)(nil)).Elem()
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput {
	return o
}

// Enables customer to schedule patching without accidental upgrades
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsVMGuestPatchAutomaticByPlatformSettingsResponse) *bool {
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsVMGuestPatchAutomaticByPlatformSettingsResponse) *string { return v.RebootSetting }).(pulumi.StringPtrOutput)
}

type WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsVMGuestPatchAutomaticByPlatformSettingsResponse)(nil)).Elem()
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput() WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) ToWindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutputWithContext(ctx context.Context) WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput {
	return o
}

func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) Elem() WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput {
	return o.ApplyT(func(v *WindowsVMGuestPatchAutomaticByPlatformSettingsResponse) WindowsVMGuestPatchAutomaticByPlatformSettingsResponse {
		if v != nil {
			return *v
		}
		var ret WindowsVMGuestPatchAutomaticByPlatformSettingsResponse
		return ret
	}).(WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput)
}

// Enables customer to schedule patching without accidental upgrades
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) BypassPlatformSafetyChecksOnUserSchedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsVMGuestPatchAutomaticByPlatformSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BypassPlatformSafetyChecksOnUserSchedule
	}).(pulumi.BoolPtrOutput)
}

// Specifies the reboot setting for all AutomaticByPlatform patch installation operations.
func (o WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput) RebootSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsVMGuestPatchAutomaticByPlatformSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RebootSetting
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessControlRulesOutput{})
	pulumi.RegisterOutputType(AccessControlRulesPtrOutput{})
	pulumi.RegisterOutputType(AccessControlRulesIdentityOutput{})
	pulumi.RegisterOutputType(AccessControlRulesIdentityArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesIdentityResponseOutput{})
	pulumi.RegisterOutputType(AccessControlRulesIdentityResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesPrivilegeOutput{})
	pulumi.RegisterOutputType(AccessControlRulesPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesPrivilegeResponseOutput{})
	pulumi.RegisterOutputType(AccessControlRulesPrivilegeResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesResponseOutput{})
	pulumi.RegisterOutputType(AccessControlRulesResponsePtrOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleAssignmentOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleAssignmentResponseOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleAssignmentResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleResponseOutput{})
	pulumi.RegisterOutputType(AccessControlRulesRoleResponseArrayOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesResponseOutput{})
	pulumi.RegisterOutputType(AdditionalCapabilitiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AdditionalReplicaSetOutput{})
	pulumi.RegisterOutputType(AdditionalReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(AdditionalReplicaSetResponseOutput{})
	pulumi.RegisterOutputType(AdditionalReplicaSetResponseArrayOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentArrayOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentResponseOutput{})
	pulumi.RegisterOutputType(AdditionalUnattendContentResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceOutput{})
	pulumi.RegisterOutputType(ApiEntityReferencePtrOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceArrayOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceResponseOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ApiEntityReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiErrorBaseResponseOutput{})
	pulumi.RegisterOutputType(ApiErrorBaseResponseArrayOutput{})
	pulumi.RegisterOutputType(ApiErrorResponseOutput{})
	pulumi.RegisterOutputType(ApiErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationProfileOutput{})
	pulumi.RegisterOutputType(ApplicationProfilePtrOutput{})
	pulumi.RegisterOutputType(ApplicationProfileResponseOutput{})
	pulumi.RegisterOutputType(ApplicationProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(AutomaticOSUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyResponseOutput{})
	pulumi.RegisterOutputType(AutomaticRepairsPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AutomaticZoneRebalancingPolicyOutput{})
	pulumi.RegisterOutputType(AutomaticZoneRebalancingPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutomaticZoneRebalancingPolicyResponseOutput{})
	pulumi.RegisterOutputType(AutomaticZoneRebalancingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AvailablePatchSummaryResponseOutput{})
	pulumi.RegisterOutputType(AvailablePatchSummaryResponsePtrOutput{})
	pulumi.RegisterOutputType(BillingProfileOutput{})
	pulumi.RegisterOutputType(BillingProfilePtrOutput{})
	pulumi.RegisterOutputType(BillingProfileResponseOutput{})
	pulumi.RegisterOutputType(BillingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsPtrOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(BootDiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(CapacityReservationGroupInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationInstanceViewWithNameResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationInstanceViewWithNameResponseArrayOutput{})
	pulumi.RegisterOutputType(CapacityReservationProfileOutput{})
	pulumi.RegisterOutputType(CapacityReservationProfilePtrOutput{})
	pulumi.RegisterOutputType(CapacityReservationProfileResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CapacityReservationUtilizationResponseOutput{})
	pulumi.RegisterOutputType(CapacityReservationUtilizationResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionProfileOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionProfileResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionPropertiesOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceExtensionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceNetworkProfileOutput{})
	pulumi.RegisterOutputType(CloudServiceNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceOsProfileOutput{})
	pulumi.RegisterOutputType(CloudServiceOsProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceOsProfileResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceOsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServicePropertiesOutput{})
	pulumi.RegisterOutputType(CloudServicePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CloudServicePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfileOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfilePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfilePropertiesOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfilePropertiesArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfilePropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfileResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleSkuOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleSkuPtrOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleSkuResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceRoleSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultAndSecretReferenceOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultAndSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultAndSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultAndSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultCertificateOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultCertificateArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultCertificateResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultSecretGroupOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultSecretGroupArrayOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultSecretGroupResponseOutput{})
	pulumi.RegisterOutputType(CloudServiceVaultSecretGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(CommunityGalleryInfoOutput{})
	pulumi.RegisterOutputType(CommunityGalleryInfoPtrOutput{})
	pulumi.RegisterOutputType(CommunityGalleryInfoResponseOutput{})
	pulumi.RegisterOutputType(CommunityGalleryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(CopyCompletionErrorOutput{})
	pulumi.RegisterOutputType(CopyCompletionErrorPtrOutput{})
	pulumi.RegisterOutputType(CopyCompletionErrorResponseOutput{})
	pulumi.RegisterOutputType(CopyCompletionErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(CreationDataOutput{})
	pulumi.RegisterOutputType(CreationDataResponseOutput{})
	pulumi.RegisterOutputType(DataDiskOutput{})
	pulumi.RegisterOutputType(DataDiskArrayOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionArrayOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionResponseOutput{})
	pulumi.RegisterOutputType(DataDiskImageEncryptionResponseArrayOutput{})
	pulumi.RegisterOutputType(DataDiskResponseOutput{})
	pulumi.RegisterOutputType(DataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(DedicatedHostAllocatableVMResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostAllocatableVMResponseArrayOutput{})
	pulumi.RegisterOutputType(DedicatedHostAvailableCapacityResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostAvailableCapacityResponsePtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupPropertiesAdditionalCapabilitiesOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupPropertiesAdditionalCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupPropertiesAdditionalCapabilitiesResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostGroupPropertiesAdditionalCapabilitiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewWithNameResponseOutput{})
	pulumi.RegisterOutputType(DedicatedHostInstanceViewWithNameResponseArrayOutput{})
	pulumi.RegisterOutputType(DefaultVirtualMachineScaleSetInfoResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfileOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfilePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfileResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsPtrOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsResponseOutput{})
	pulumi.RegisterOutputType(DiffDiskSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DisallowedOutput{})
	pulumi.RegisterOutputType(DisallowedPtrOutput{})
	pulumi.RegisterOutputType(DisallowedResponseOutput{})
	pulumi.RegisterOutputType(DisallowedResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSetParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DiskInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskPurchasePlanOutput{})
	pulumi.RegisterOutputType(DiskPurchasePlanPtrOutput{})
	pulumi.RegisterOutputType(DiskPurchasePlanResponseOutput{})
	pulumi.RegisterOutputType(DiskPurchasePlanResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskRestorePointAttributesOutput{})
	pulumi.RegisterOutputType(DiskRestorePointAttributesPtrOutput{})
	pulumi.RegisterOutputType(DiskRestorePointAttributesResponseOutput{})
	pulumi.RegisterOutputType(DiskRestorePointAttributesResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskRestorePointInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(DiskRestorePointInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskRestorePointReplicationStatusResponseOutput{})
	pulumi.RegisterOutputType(DiskRestorePointReplicationStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskSecurityProfileOutput{})
	pulumi.RegisterOutputType(DiskSecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(DiskSecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(DiskSecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskSkuOutput{})
	pulumi.RegisterOutputType(DiskSkuPtrOutput{})
	pulumi.RegisterOutputType(DiskSkuResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityPtrOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityResponseOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionImagesOutput{})
	pulumi.RegisterOutputType(EncryptionImagesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionImagesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionImagesResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSetIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsCollectionResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementArrayOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsElementResponseArrayOutput{})
	pulumi.RegisterOutputType(EventGridAndResourceGraphOutput{})
	pulumi.RegisterOutputType(EventGridAndResourceGraphPtrOutput{})
	pulumi.RegisterOutputType(EventGridAndResourceGraphResponseOutput{})
	pulumi.RegisterOutputType(EventGridAndResourceGraphResponsePtrOutput{})
	pulumi.RegisterOutputType(ExecutedValidationResponseOutput{})
	pulumi.RegisterOutputType(ExecutedValidationResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExtensionOutput{})
	pulumi.RegisterOutputType(ExtensionArrayOutput{})
	pulumi.RegisterOutputType(ExtensionResponseOutput{})
	pulumi.RegisterOutputType(ExtensionResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionArrayOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionParameterOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionParameterArrayOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionParameterResponseOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionResponseOutput{})
	pulumi.RegisterOutputType(GalleryApplicationCustomActionResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionPublishingProfileOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionPublishingProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionSafetyProfileOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionSafetyProfilePtrOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionSafetyProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryApplicationVersionSafetyProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionFullSourceOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionFullSourcePtrOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionFullSourceResponseOutput{})
	pulumi.RegisterOutputType(GalleryArtifactVersionFullSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageArrayOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageResponseOutput{})
	pulumi.RegisterOutputType(GalleryDataDiskImageResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryDiskImageSourceOutput{})
	pulumi.RegisterOutputType(GalleryDiskImageSourcePtrOutput{})
	pulumi.RegisterOutputType(GalleryDiskImageSourceResponseOutput{})
	pulumi.RegisterOutputType(GalleryDiskImageSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryExtendedLocationOutput{})
	pulumi.RegisterOutputType(GalleryExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(GalleryExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(GalleryExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryIdentifierResponseOutput{})
	pulumi.RegisterOutputType(GalleryIdentifierResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryIdentityOutput{})
	pulumi.RegisterOutputType(GalleryIdentityPtrOutput{})
	pulumi.RegisterOutputType(GalleryIdentityResponseOutput{})
	pulumi.RegisterOutputType(GalleryIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureArrayOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(GalleryImageIdentifierOutput{})
	pulumi.RegisterOutputType(GalleryImageIdentifierResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfileOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfilePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionPublishingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionSafetyProfileOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionSafetyProfilePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionSafetyProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionSafetyProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionStorageProfileOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionUefiSettingsOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionUefiSettingsPtrOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionUefiSettingsResponseOutput{})
	pulumi.RegisterOutputType(GalleryImageVersionUefiSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryInVMAccessControlProfilePropertiesOutput{})
	pulumi.RegisterOutputType(GalleryInVMAccessControlProfilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(GalleryInVMAccessControlProfilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImageOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImagePtrOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImageResponseOutput{})
	pulumi.RegisterOutputType(GalleryOSDiskImageResponsePtrOutput{})
	pulumi.RegisterOutputType(GalleryTargetExtendedLocationOutput{})
	pulumi.RegisterOutputType(GalleryTargetExtendedLocationArrayOutput{})
	pulumi.RegisterOutputType(GalleryTargetExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(GalleryTargetExtendedLocationResponseArrayOutput{})
	pulumi.RegisterOutputType(HardwareProfileOutput{})
	pulumi.RegisterOutputType(HardwareProfilePtrOutput{})
	pulumi.RegisterOutputType(HardwareProfileResponseOutput{})
	pulumi.RegisterOutputType(HardwareProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(HostEndpointSettingsOutput{})
	pulumi.RegisterOutputType(HostEndpointSettingsPtrOutput{})
	pulumi.RegisterOutputType(HostEndpointSettingsResponseOutput{})
	pulumi.RegisterOutputType(HostEndpointSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageDataDiskOutput{})
	pulumi.RegisterOutputType(ImageDataDiskArrayOutput{})
	pulumi.RegisterOutputType(ImageDataDiskResponseOutput{})
	pulumi.RegisterOutputType(ImageDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceOutput{})
	pulumi.RegisterOutputType(ImageDiskReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageDiskReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageOSDiskOutput{})
	pulumi.RegisterOutputType(ImageOSDiskPtrOutput{})
	pulumi.RegisterOutputType(ImageOSDiskResponseOutput{})
	pulumi.RegisterOutputType(ImageOSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanPtrOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanResponseOutput{})
	pulumi.RegisterOutputType(ImagePurchasePlanResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageStorageProfileOutput{})
	pulumi.RegisterOutputType(ImageStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(ImageStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(ImageStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageVersionSecurityProfileOutput{})
	pulumi.RegisterOutputType(ImageVersionSecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(ImageVersionSecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(ImageVersionSecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(InnerErrorResponseOutput{})
	pulumi.RegisterOutputType(InnerErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusPtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusArrayOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponseOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceViewStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyForDiskEncryptionSetOutput{})
	pulumi.RegisterOutputType(KeyForDiskEncryptionSetPtrOutput{})
	pulumi.RegisterOutputType(KeyForDiskEncryptionSetResponseOutput{})
	pulumi.RegisterOutputType(KeyForDiskEncryptionSetResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyForDiskEncryptionSetResponseArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultAndSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultKeyReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferencePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(LastPatchInstallationSummaryResponseOutput{})
	pulumi.RegisterOutputType(LastPatchInstallationSummaryResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxPatchSettingsOutput{})
	pulumi.RegisterOutputType(LinuxPatchSettingsPtrOutput{})
	pulumi.RegisterOutputType(LinuxPatchSettingsResponseOutput{})
	pulumi.RegisterOutputType(LinuxPatchSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxVMGuestPatchAutomaticByPlatformSettingsOutput{})
	pulumi.RegisterOutputType(LinuxVMGuestPatchAutomaticByPlatformSettingsPtrOutput{})
	pulumi.RegisterOutputType(LinuxVMGuestPatchAutomaticByPlatformSettingsResponseOutput{})
	pulumi.RegisterOutputType(LinuxVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerConfigurationOutput{})
	pulumi.RegisterOutputType(LoadBalancerConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(LoadBalancerConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationPropertiesOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsOutputResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceRedeployStatusResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceRedeployStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersPtrOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersResponseOutput{})
	pulumi.RegisterOutputType(ManagedDiskParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkProfileOutput{})
	pulumi.RegisterOutputType(NetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OSDiskOutput{})
	pulumi.RegisterOutputType(OSDiskPtrOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionPtrOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionResponseOutput{})
	pulumi.RegisterOutputType(OSDiskImageEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(OSDiskImageSecurityProfileOutput{})
	pulumi.RegisterOutputType(OSDiskImageSecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(OSDiskImageSecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(OSDiskImageSecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OSDiskResponseOutput{})
	pulumi.RegisterOutputType(OSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(OSImageNotificationProfileOutput{})
	pulumi.RegisterOutputType(OSImageNotificationProfilePtrOutput{})
	pulumi.RegisterOutputType(OSImageNotificationProfileResponseOutput{})
	pulumi.RegisterOutputType(OSImageNotificationProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OSProfileOutput{})
	pulumi.RegisterOutputType(OSProfilePtrOutput{})
	pulumi.RegisterOutputType(OSProfileResponseOutput{})
	pulumi.RegisterOutputType(OSProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(PatchSettingsOutput{})
	pulumi.RegisterOutputType(PatchSettingsPtrOutput{})
	pulumi.RegisterOutputType(PatchSettingsResponseOutput{})
	pulumi.RegisterOutputType(PatchSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PlacementOutput{})
	pulumi.RegisterOutputType(PlacementPtrOutput{})
	pulumi.RegisterOutputType(PlacementResponseOutput{})
	pulumi.RegisterOutputType(PlacementResponsePtrOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(PlatformAttributeResponseOutput{})
	pulumi.RegisterOutputType(PlatformAttributeResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyViolationResponseOutput{})
	pulumi.RegisterOutputType(PolicyViolationResponseArrayOutput{})
	pulumi.RegisterOutputType(PriorityMixPolicyOutput{})
	pulumi.RegisterOutputType(PriorityMixPolicyPtrOutput{})
	pulumi.RegisterOutputType(PriorityMixPolicyResponseOutput{})
	pulumi.RegisterOutputType(PriorityMixPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PropertyUpdatesInProgressResponseOutput{})
	pulumi.RegisterOutputType(ProximityPlacementGroupPropertiesIntentOutput{})
	pulumi.RegisterOutputType(ProximityPlacementGroupPropertiesIntentPtrOutput{})
	pulumi.RegisterOutputType(ProximityPlacementGroupPropertiesIntentResponseOutput{})
	pulumi.RegisterOutputType(ProximityPlacementGroupPropertiesIntentResponsePtrOutput{})
	pulumi.RegisterOutputType(ProxyAgentSettingsOutput{})
	pulumi.RegisterOutputType(ProxyAgentSettingsPtrOutput{})
	pulumi.RegisterOutputType(ProxyAgentSettingsResponseOutput{})
	pulumi.RegisterOutputType(ProxyAgentSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PublicIPAddressSkuOutput{})
	pulumi.RegisterOutputType(PublicIPAddressSkuPtrOutput{})
	pulumi.RegisterOutputType(PublicIPAddressSkuResponseOutput{})
	pulumi.RegisterOutputType(PublicIPAddressSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RecommendedMachineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RegionalReplicationStatusResponseOutput{})
	pulumi.RegisterOutputType(RegionalReplicationStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(RegionalSharingStatusResponseOutput{})
	pulumi.RegisterOutputType(RegionalSharingStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(ReplicationStatusResponseOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyPtrOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyResponseOutput{})
	pulumi.RegisterOutputType(ResiliencyPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResilientVMCreationPolicyOutput{})
	pulumi.RegisterOutputType(ResilientVMCreationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ResilientVMCreationPolicyResponseOutput{})
	pulumi.RegisterOutputType(ResilientVMCreationPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResilientVMDeletionPolicyOutput{})
	pulumi.RegisterOutputType(ResilientVMDeletionPolicyPtrOutput{})
	pulumi.RegisterOutputType(ResilientVMDeletionPolicyResponseOutput{})
	pulumi.RegisterOutputType(ResilientVMDeletionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceRangeOutput{})
	pulumi.RegisterOutputType(ResourceRangePtrOutput{})
	pulumi.RegisterOutputType(ResourceRangeResponseOutput{})
	pulumi.RegisterOutputType(ResourceRangeResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceSharingProfileOutput{})
	pulumi.RegisterOutputType(ResourceSharingProfilePtrOutput{})
	pulumi.RegisterOutputType(ResourceSharingProfileResponseOutput{})
	pulumi.RegisterOutputType(ResourceSharingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(RestorePointCollectionSourcePropertiesOutput{})
	pulumi.RegisterOutputType(RestorePointCollectionSourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RestorePointCollectionSourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(RestorePointCollectionSourcePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RestorePointEncryptionOutput{})
	pulumi.RegisterOutputType(RestorePointEncryptionPtrOutput{})
	pulumi.RegisterOutputType(RestorePointEncryptionResponseOutput{})
	pulumi.RegisterOutputType(RestorePointEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(RestorePointInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(RestorePointResponseOutput{})
	pulumi.RegisterOutputType(RestorePointResponseArrayOutput{})
	pulumi.RegisterOutputType(RestorePointSourceMetadataOutput{})
	pulumi.RegisterOutputType(RestorePointSourceMetadataPtrOutput{})
	pulumi.RegisterOutputType(RestorePointSourceMetadataResponseOutput{})
	pulumi.RegisterOutputType(RestorePointSourceMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMDataDiskOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMDataDiskArrayOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMDataDiskResponseOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMOSDiskOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMOSDiskPtrOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMOSDiskResponseOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMOSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMStorageProfileOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(RestorePointSourceVMStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(RollingUpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RunCommandInputParameterOutput{})
	pulumi.RegisterOutputType(RunCommandInputParameterArrayOutput{})
	pulumi.RegisterOutputType(RunCommandInputParameterResponseOutput{})
	pulumi.RegisterOutputType(RunCommandInputParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(RunCommandManagedIdentityOutput{})
	pulumi.RegisterOutputType(RunCommandManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(RunCommandManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(RunCommandManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyPtrOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyResponseOutput{})
	pulumi.RegisterOutputType(ScaleInPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsAdditionalPublishingTargetsOutput{})
	pulumi.RegisterOutputType(ScheduledEventsAdditionalPublishingTargetsPtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsAdditionalPublishingTargetsResponseOutput{})
	pulumi.RegisterOutputType(ScheduledEventsAdditionalPublishingTargetsResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsPolicyOutput{})
	pulumi.RegisterOutputType(ScheduledEventsPolicyPtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsPolicyResponseOutput{})
	pulumi.RegisterOutputType(ScheduledEventsPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfileOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfilePtrOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfileResponseOutput{})
	pulumi.RegisterOutputType(ScheduledEventsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityPostureReferenceOutput{})
	pulumi.RegisterOutputType(SecurityPostureReferencePtrOutput{})
	pulumi.RegisterOutputType(SecurityPostureReferenceResponseOutput{})
	pulumi.RegisterOutputType(SecurityPostureReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileOutput{})
	pulumi.RegisterOutputType(SecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(SecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceArtifactReferenceOutput{})
	pulumi.RegisterOutputType(ServiceArtifactReferencePtrOutput{})
	pulumi.RegisterOutputType(ServiceArtifactReferenceResponseOutput{})
	pulumi.RegisterOutputType(ServiceArtifactReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ShareInfoElementResponseOutput{})
	pulumi.RegisterOutputType(ShareInfoElementResponseArrayOutput{})
	pulumi.RegisterOutputType(SharingProfileOutput{})
	pulumi.RegisterOutputType(SharingProfilePtrOutput{})
	pulumi.RegisterOutputType(SharingProfileGroupResponseOutput{})
	pulumi.RegisterOutputType(SharingProfileGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(SharingProfileResponseOutput{})
	pulumi.RegisterOutputType(SharingProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SharingStatusResponseOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuProfileOutput{})
	pulumi.RegisterOutputType(SkuProfilePtrOutput{})
	pulumi.RegisterOutputType(SkuProfileResponseOutput{})
	pulumi.RegisterOutputType(SkuProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuProfileVMSizeOutput{})
	pulumi.RegisterOutputType(SkuProfileVMSizeArrayOutput{})
	pulumi.RegisterOutputType(SkuProfileVMSizeResponseOutput{})
	pulumi.RegisterOutputType(SkuProfileVMSizeResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuOutput{})
	pulumi.RegisterOutputType(SnapshotSkuPtrOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponseOutput{})
	pulumi.RegisterOutputType(SnapshotSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SoftDeletePolicyOutput{})
	pulumi.RegisterOutputType(SoftDeletePolicyPtrOutput{})
	pulumi.RegisterOutputType(SoftDeletePolicyResponseOutput{})
	pulumi.RegisterOutputType(SoftDeletePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceVaultOutput{})
	pulumi.RegisterOutputType(SourceVaultPtrOutput{})
	pulumi.RegisterOutputType(SourceVaultResponseOutput{})
	pulumi.RegisterOutputType(SourceVaultResponsePtrOutput{})
	pulumi.RegisterOutputType(SpotRestorePolicyOutput{})
	pulumi.RegisterOutputType(SpotRestorePolicyPtrOutput{})
	pulumi.RegisterOutputType(SpotRestorePolicyResponseOutput{})
	pulumi.RegisterOutputType(SpotRestorePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationOutput{})
	pulumi.RegisterOutputType(SshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyTypeOutput{})
	pulumi.RegisterOutputType(SshPublicKeyTypeArrayOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageProfileOutput{})
	pulumi.RegisterOutputType(StorageProfilePtrOutput{})
	pulumi.RegisterOutputType(StorageProfileResponseOutput{})
	pulumi.RegisterOutputType(StorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceOutput{})
	pulumi.RegisterOutputType(SubResourcePtrOutput{})
	pulumi.RegisterOutputType(SubResourceArrayOutput{})
	pulumi.RegisterOutputType(SubResourceReadOnlyResponseOutput{})
	pulumi.RegisterOutputType(SubResourceReadOnlyResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceResponseOutput{})
	pulumi.RegisterOutputType(SubResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SubResourceWithColocationStatusResponseOutput{})
	pulumi.RegisterOutputType(SubResourceWithColocationStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(SupportedCapabilitiesOutput{})
	pulumi.RegisterOutputType(SupportedCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(SupportedCapabilitiesResponseOutput{})
	pulumi.RegisterOutputType(SupportedCapabilitiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponsePtrOutput{})
	pulumi.RegisterOutputType(TargetRegionOutput{})
	pulumi.RegisterOutputType(TargetRegionArrayOutput{})
	pulumi.RegisterOutputType(TargetRegionResponseOutput{})
	pulumi.RegisterOutputType(TargetRegionResponseArrayOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfileOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfilePtrOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfileResponseOutput{})
	pulumi.RegisterOutputType(TerminateNotificationProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(UefiKeyOutput{})
	pulumi.RegisterOutputType(UefiKeyPtrOutput{})
	pulumi.RegisterOutputType(UefiKeyArrayOutput{})
	pulumi.RegisterOutputType(UefiKeyResponseOutput{})
	pulumi.RegisterOutputType(UefiKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(UefiKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(UefiKeySignaturesOutput{})
	pulumi.RegisterOutputType(UefiKeySignaturesPtrOutput{})
	pulumi.RegisterOutputType(UefiKeySignaturesResponseOutput{})
	pulumi.RegisterOutputType(UefiKeySignaturesResponsePtrOutput{})
	pulumi.RegisterOutputType(UefiSettingsOutput{})
	pulumi.RegisterOutputType(UefiSettingsPtrOutput{})
	pulumi.RegisterOutputType(UefiSettingsResponseOutput{})
	pulumi.RegisterOutputType(UefiSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(UpgradePolicyOutput{})
	pulumi.RegisterOutputType(UpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(UpgradePolicyResponseOutput{})
	pulumi.RegisterOutputType(UpgradePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UserArtifactManageOutput{})
	pulumi.RegisterOutputType(UserArtifactManagePtrOutput{})
	pulumi.RegisterOutputType(UserArtifactManageResponseOutput{})
	pulumi.RegisterOutputType(UserArtifactManageResponsePtrOutput{})
	pulumi.RegisterOutputType(UserArtifactSettingsOutput{})
	pulumi.RegisterOutputType(UserArtifactSettingsPtrOutput{})
	pulumi.RegisterOutputType(UserArtifactSettingsResponseOutput{})
	pulumi.RegisterOutputType(UserArtifactSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(UserArtifactSourceOutput{})
	pulumi.RegisterOutputType(UserArtifactSourceResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentitiesValueResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentitiesValueResponseMapOutput{})
	pulumi.RegisterOutputType(UserInitiatedRebootOutput{})
	pulumi.RegisterOutputType(UserInitiatedRebootPtrOutput{})
	pulumi.RegisterOutputType(UserInitiatedRebootResponseOutput{})
	pulumi.RegisterOutputType(UserInitiatedRebootResponsePtrOutput{})
	pulumi.RegisterOutputType(UserInitiatedRedeployOutput{})
	pulumi.RegisterOutputType(UserInitiatedRedeployPtrOutput{})
	pulumi.RegisterOutputType(UserInitiatedRedeployResponseOutput{})
	pulumi.RegisterOutputType(UserInitiatedRedeployResponsePtrOutput{})
	pulumi.RegisterOutputType(VMDiskSecurityProfileOutput{})
	pulumi.RegisterOutputType(VMDiskSecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(VMDiskSecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(VMDiskSecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VMGalleryApplicationOutput{})
	pulumi.RegisterOutputType(VMGalleryApplicationArrayOutput{})
	pulumi.RegisterOutputType(VMGalleryApplicationResponseOutput{})
	pulumi.RegisterOutputType(VMGalleryApplicationResponseArrayOutput{})
	pulumi.RegisterOutputType(VMSizePropertiesOutput{})
	pulumi.RegisterOutputType(VMSizePropertiesPtrOutput{})
	pulumi.RegisterOutputType(VMSizePropertiesResponseOutput{})
	pulumi.RegisterOutputType(VMSizePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidationsProfileResponseOutput{})
	pulumi.RegisterOutputType(VaultCertificateOutput{})
	pulumi.RegisterOutputType(VaultCertificateArrayOutput{})
	pulumi.RegisterOutputType(VaultCertificateResponseOutput{})
	pulumi.RegisterOutputType(VaultCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupArrayOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupResponseOutput{})
	pulumi.RegisterOutputType(VaultSecretGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskPtrOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskResponseOutput{})
	pulumi.RegisterOutputType(VirtualHardDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineAgentInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionHandlerInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionHandlerInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionInstanceViewResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineExtensionResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineHealthStatusResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineIpTagOutput{})
	pulumi.RegisterOutputType(VirtualMachineIpTagArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineIpTagResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineIpTagResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceDnsSettingsConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceDnsSettingsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceIPConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceIPConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceIPConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineNetworkInterfaceIPConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachinePatchStatusResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachinePatchStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressDnsSettingsConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressDnsSettingsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressDnsSettingsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachinePublicIPAddressDnsSettingsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineRunCommandInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineRunCommandScriptSourceOutput{})
	pulumi.RegisterOutputType(VirtualMachineRunCommandScriptSourcePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineRunCommandScriptSourceResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineRunCommandScriptSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionTypeOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionTypeArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetExtensionResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetHardwareProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetHardwareProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetHardwareProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetHardwareProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIPConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetIpTagResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetManagedDiskParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetMigrationInfoResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationDnsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetOSProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetPublicIPAddressConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMInstanceViewResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMNetworkProfileConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfileOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineScaleSetVMProtectionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WinRMConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(WinRMListenerOutput{})
	pulumi.RegisterOutputType(WinRMListenerArrayOutput{})
	pulumi.RegisterOutputType(WinRMListenerResponseOutput{})
	pulumi.RegisterOutputType(WinRMListenerResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(WindowsVMGuestPatchAutomaticByPlatformSettingsOutput{})
	pulumi.RegisterOutputType(WindowsVMGuestPatchAutomaticByPlatformSettingsPtrOutput{})
	pulumi.RegisterOutputType(WindowsVMGuestPatchAutomaticByPlatformSettingsResponseOutput{})
	pulumi.RegisterOutputType(WindowsVMGuestPatchAutomaticByPlatformSettingsResponsePtrOutput{})
}
