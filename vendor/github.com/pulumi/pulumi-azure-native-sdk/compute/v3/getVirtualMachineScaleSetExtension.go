// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The operation to get the extension.
//
// Uses Azure REST API version 2024-11-01.
//
// Other available API versions: 2022-08-01, 2022-11-01, 2023-03-01, 2023-07-01, 2023-09-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native compute [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupVirtualMachineScaleSetExtension(ctx *pulumi.Context, args *LookupVirtualMachineScaleSetExtensionArgs, opts ...pulumi.InvokeOption) (*LookupVirtualMachineScaleSetExtensionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualMachineScaleSetExtensionResult
	err := ctx.Invoke("azure-native:compute:getVirtualMachineScaleSetExtension", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVirtualMachineScaleSetExtensionArgs struct {
	// The expand expression to apply on the operation.
	Expand *string `pulumi:"expand"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the VM scale set.
	VmScaleSetName string `pulumi:"vmScaleSetName"`
	// The name of the VM scale set extension.
	VmssExtensionName string `pulumi:"vmssExtensionName"`
}

// Describes a Virtual Machine Scale Set Extension.
type LookupVirtualMachineScaleSetExtensionResult struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
	AutoUpgradeMinorVersion *bool `pulumi:"autoUpgradeMinorVersion"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `pulumi:"enableAutomaticUpgrade"`
	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `pulumi:"forceUpdateTag"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault *KeyVaultSecretReferenceResponse `pulumi:"protectedSettingsFromKeyVault"`
	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string `pulumi:"provisionAfterExtensions"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the extension handler publisher.
	Publisher *string `pulumi:"publisher"`
	// Json formatted public settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool `pulumi:"suppressFailures"`
	// Resource type
	Type string `pulumi:"type"`
	// Specifies the version of the script handler.
	TypeHandlerVersion *string `pulumi:"typeHandlerVersion"`
}

func LookupVirtualMachineScaleSetExtensionOutput(ctx *pulumi.Context, args LookupVirtualMachineScaleSetExtensionOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualMachineScaleSetExtensionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVirtualMachineScaleSetExtensionResultOutput, error) {
			args := v.(LookupVirtualMachineScaleSetExtensionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:compute:getVirtualMachineScaleSetExtension", args, LookupVirtualMachineScaleSetExtensionResultOutput{}, options).(LookupVirtualMachineScaleSetExtensionResultOutput), nil
		}).(LookupVirtualMachineScaleSetExtensionResultOutput)
}

type LookupVirtualMachineScaleSetExtensionOutputArgs struct {
	// The expand expression to apply on the operation.
	Expand pulumi.StringPtrInput `pulumi:"expand"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the VM scale set.
	VmScaleSetName pulumi.StringInput `pulumi:"vmScaleSetName"`
	// The name of the VM scale set extension.
	VmssExtensionName pulumi.StringInput `pulumi:"vmssExtensionName"`
}

func (LookupVirtualMachineScaleSetExtensionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineScaleSetExtensionArgs)(nil)).Elem()
}

// Describes a Virtual Machine Scale Set Extension.
type LookupVirtualMachineScaleSetExtensionResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualMachineScaleSetExtensionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineScaleSetExtensionResult)(nil)).Elem()
}

func (o LookupVirtualMachineScaleSetExtensionResultOutput) ToLookupVirtualMachineScaleSetExtensionResultOutput() LookupVirtualMachineScaleSetExtensionResultOutput {
	return o
}

func (o LookupVirtualMachineScaleSetExtensionResultOutput) ToLookupVirtualMachineScaleSetExtensionResultOutputWithContext(ctx context.Context) LookupVirtualMachineScaleSetExtensionResultOutput {
	return o
}

// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) AutoUpgradeMinorVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *bool { return v.AutoUpgradeMinorVersion }).(pulumi.BoolPtrOutput)
}

// The Azure API version of the resource.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) EnableAutomaticUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *bool { return v.EnableAutomaticUpgrade }).(pulumi.BoolPtrOutput)
}

// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ForceUpdateTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.ForceUpdateTag }).(pulumi.StringPtrOutput)
}

// Resource Id
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// The extensions protected settings that are passed by reference, and consumed from key vault
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ProtectedSettingsFromKeyVault() KeyVaultSecretReferenceResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *KeyVaultSecretReferenceResponse {
		return v.ProtectedSettingsFromKeyVault
	}).(KeyVaultSecretReferenceResponsePtrOutput)
}

// Collection of extension names after which this extension needs to be provisioned.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ProvisionAfterExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) []string { return v.ProvisionAfterExtensions }).(pulumi.StringArrayOutput)
}

// The provisioning state, which only appears in the response.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the extension handler publisher.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// Json formatted public settings for the extension.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) SuppressFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *bool { return v.SuppressFailures }).(pulumi.BoolPtrOutput)
}

// Resource type
func (o LookupVirtualMachineScaleSetExtensionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the version of the script handler.
func (o LookupVirtualMachineScaleSetExtensionResultOutput) TypeHandlerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineScaleSetExtensionResult) *string { return v.TypeHandlerVersion }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualMachineScaleSetExtensionResultOutput{})
}
