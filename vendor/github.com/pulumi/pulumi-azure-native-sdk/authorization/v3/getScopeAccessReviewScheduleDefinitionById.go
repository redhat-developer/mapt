// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get single access review definition
//
// Uses Azure REST API version 2021-12-01-preview.
func LookupScopeAccessReviewScheduleDefinitionById(ctx *pulumi.Context, args *LookupScopeAccessReviewScheduleDefinitionByIdArgs, opts ...pulumi.InvokeOption) (*LookupScopeAccessReviewScheduleDefinitionByIdResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupScopeAccessReviewScheduleDefinitionByIdResult
	err := ctx.Invoke("azure-native:authorization:getScopeAccessReviewScheduleDefinitionById", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupScopeAccessReviewScheduleDefinitionByIdArgs struct {
	// The id of the access review schedule definition.
	ScheduleDefinitionId string `pulumi:"scheduleDefinitionId"`
	// The scope of the resource.
	Scope string `pulumi:"scope"`
}

// Access Review Schedule Definition.
type LookupScopeAccessReviewScheduleDefinitionByIdResult struct {
	// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
	AutoApplyDecisionsEnabled *bool `pulumi:"autoApplyDecisionsEnabled"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// This is the collection of backup reviewers.
	BackupReviewers []AccessReviewReviewerResponse `pulumi:"backupReviewers"`
	// This specifies the behavior for the autoReview feature when an access review completes.
	DefaultDecision *string `pulumi:"defaultDecision"`
	// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
	DefaultDecisionEnabled *bool `pulumi:"defaultDecisionEnabled"`
	// The description provided by the access review creator and visible to admins.
	DescriptionForAdmins *string `pulumi:"descriptionForAdmins"`
	// The description provided by the access review creator to be shown to reviewers.
	DescriptionForReviewers *string `pulumi:"descriptionForReviewers"`
	// The display name for the schedule definition.
	DisplayName *string `pulumi:"displayName"`
	// The access review schedule definition id.
	Id string `pulumi:"id"`
	// The duration in days for an instance.
	InstanceDurationInDays *int `pulumi:"instanceDurationInDays"`
	// This is the collection of instances returned when one does an expand on it.
	Instances []AccessReviewInstanceResponse `pulumi:"instances"`
	// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
	Interval *int `pulumi:"interval"`
	// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
	JustificationRequiredOnApproval *bool `pulumi:"justificationRequiredOnApproval"`
	// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
	MailNotificationsEnabled *bool `pulumi:"mailNotificationsEnabled"`
	// The access review schedule definition unique id.
	Name string `pulumi:"name"`
	// The identity id
	PrincipalId string `pulumi:"principalId"`
	// The identity display name
	PrincipalName string `pulumi:"principalName"`
	// The identity type : user/servicePrincipal
	PrincipalType string `pulumi:"principalType"`
	// Access Review schedule definition recurrence range.
	Range *AccessReviewRecurrenceRangeResponse `pulumi:"range"`
	// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	RecommendationLookBackDuration *string `pulumi:"recommendationLookBackDuration"`
	// Flag to indicate whether showing recommendations to reviewers is enabled.
	RecommendationsEnabled *bool `pulumi:"recommendationsEnabled"`
	// Flag to indicate whether sending reminder emails to reviewers are enabled.
	ReminderNotificationsEnabled *bool `pulumi:"reminderNotificationsEnabled"`
	// This is the collection of reviewers.
	Reviewers []AccessReviewReviewerResponse `pulumi:"reviewers"`
	// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
	ReviewersType string `pulumi:"reviewersType"`
	// This is used to define what to include in scope of the review. The scope definition includes the resourceId and roleDefinitionId.
	Scope AccessReviewScopeResponse `pulumi:"scope"`
	// This read-only field specifies the status of an accessReview.
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
	// The user principal name(if valid)
	UserPrincipalName string `pulumi:"userPrincipalName"`
}

func LookupScopeAccessReviewScheduleDefinitionByIdOutput(ctx *pulumi.Context, args LookupScopeAccessReviewScheduleDefinitionByIdOutputArgs, opts ...pulumi.InvokeOption) LookupScopeAccessReviewScheduleDefinitionByIdResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupScopeAccessReviewScheduleDefinitionByIdResultOutput, error) {
			args := v.(LookupScopeAccessReviewScheduleDefinitionByIdArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:authorization:getScopeAccessReviewScheduleDefinitionById", args, LookupScopeAccessReviewScheduleDefinitionByIdResultOutput{}, options).(LookupScopeAccessReviewScheduleDefinitionByIdResultOutput), nil
		}).(LookupScopeAccessReviewScheduleDefinitionByIdResultOutput)
}

type LookupScopeAccessReviewScheduleDefinitionByIdOutputArgs struct {
	// The id of the access review schedule definition.
	ScheduleDefinitionId pulumi.StringInput `pulumi:"scheduleDefinitionId"`
	// The scope of the resource.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupScopeAccessReviewScheduleDefinitionByIdOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeAccessReviewScheduleDefinitionByIdArgs)(nil)).Elem()
}

// Access Review Schedule Definition.
type LookupScopeAccessReviewScheduleDefinitionByIdResultOutput struct{ *pulumi.OutputState }

func (LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScopeAccessReviewScheduleDefinitionByIdResult)(nil)).Elem()
}

func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ToLookupScopeAccessReviewScheduleDefinitionByIdResultOutput() LookupScopeAccessReviewScheduleDefinitionByIdResultOutput {
	return o
}

func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ToLookupScopeAccessReviewScheduleDefinitionByIdResultOutputWithContext(ctx context.Context) LookupScopeAccessReviewScheduleDefinitionByIdResultOutput {
	return o
}

// Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) AutoApplyDecisionsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.AutoApplyDecisionsEnabled }).(pulumi.BoolPtrOutput)
}

// The Azure API version of the resource.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// This is the collection of backup reviewers.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) BackupReviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) []AccessReviewReviewerResponse {
		return v.BackupReviewers
	}).(AccessReviewReviewerResponseArrayOutput)
}

// This specifies the behavior for the autoReview feature when an access review completes.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DefaultDecision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DefaultDecision }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether reviewers are required to provide a justification when reviewing access.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DefaultDecisionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.DefaultDecisionEnabled }).(pulumi.BoolPtrOutput)
}

// The description provided by the access review creator and visible to admins.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DescriptionForAdmins() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DescriptionForAdmins }).(pulumi.StringPtrOutput)
}

// The description provided by the access review creator to be shown to reviewers.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DescriptionForReviewers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DescriptionForReviewers }).(pulumi.StringPtrOutput)
}

// The display name for the schedule definition.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The access review schedule definition id.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Id }).(pulumi.StringOutput)
}

// The duration in days for an instance.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) InstanceDurationInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *int { return v.InstanceDurationInDays }).(pulumi.IntPtrOutput)
}

// This is the collection of instances returned when one does an expand on it.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Instances() AccessReviewInstanceResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) []AccessReviewInstanceResponse {
		return v.Instances
	}).(AccessReviewInstanceResponseArrayOutput)
}

// The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// Flag to indicate whether the reviewer is required to pass justification when recording a decision.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) JustificationRequiredOnApproval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool {
		return v.JustificationRequiredOnApproval
	}).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether sending mails to reviewers and the review creator is enabled.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) MailNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.MailNotificationsEnabled }).(pulumi.BoolPtrOutput)
}

// The access review schedule definition unique id.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Name }).(pulumi.StringOutput)
}

// The identity id
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The identity display name
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalName }).(pulumi.StringOutput)
}

// The identity type : user/servicePrincipal
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// Access Review schedule definition recurrence range.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Range() AccessReviewRecurrenceRangeResponsePtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *AccessReviewRecurrenceRangeResponse {
		return v.Range
	}).(AccessReviewRecurrenceRangeResponsePtrOutput)
}

// Recommendations for access reviews are calculated by looking back at 30 days of data(w.r.t the start date of the review) by default. However, in some scenarios, customers want to change how far back to look at and want to configure 60 days, 90 days, etc. instead. This setting allows customers to configure this duration. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) RecommendationLookBackDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *string {
		return v.RecommendationLookBackDuration
	}).(pulumi.StringPtrOutput)
}

// Flag to indicate whether showing recommendations to reviewers is enabled.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) RecommendationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool { return v.RecommendationsEnabled }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether sending reminder emails to reviewers are enabled.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ReminderNotificationsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) *bool {
		return v.ReminderNotificationsEnabled
	}).(pulumi.BoolPtrOutput)
}

// This is the collection of reviewers.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Reviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) []AccessReviewReviewerResponse {
		return v.Reviewers
	}).(AccessReviewReviewerResponseArrayOutput)
}

// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) ReviewersType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.ReviewersType }).(pulumi.StringOutput)
}

// This is used to define what to include in scope of the review. The scope definition includes the resourceId and roleDefinitionId.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Scope() AccessReviewScopeResponseOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) AccessReviewScopeResponse { return v.Scope }).(AccessReviewScopeResponseOutput)
}

// This read-only field specifies the status of an accessReview.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.Type }).(pulumi.StringOutput)
}

// The user principal name(if valid)
func (o LookupScopeAccessReviewScheduleDefinitionByIdResultOutput) UserPrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScopeAccessReviewScheduleDefinitionByIdResult) string { return v.UserPrincipalName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScopeAccessReviewScheduleDefinitionByIdResultOutput{})
}
