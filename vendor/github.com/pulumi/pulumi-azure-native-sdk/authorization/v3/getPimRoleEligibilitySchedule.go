// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the specified role eligibility schedule request.
//
// Uses Azure REST API version 2020-10-01.
func LookupPimRoleEligibilitySchedule(ctx *pulumi.Context, args *LookupPimRoleEligibilityScheduleArgs, opts ...pulumi.InvokeOption) (*LookupPimRoleEligibilityScheduleResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPimRoleEligibilityScheduleResult
	err := ctx.Invoke("azure-native:authorization:getPimRoleEligibilitySchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPimRoleEligibilityScheduleArgs struct {
	// The name (guid) of the role eligibility schedule request to get.
	RoleEligibilityScheduleRequestName string `pulumi:"roleEligibilityScheduleRequestName"`
	// The scope of the role eligibility schedule request.
	Scope string `pulumi:"scope"`
}

// Role Eligibility schedule request
type LookupPimRoleEligibilityScheduleResult struct {
	// The approvalId of the role eligibility schedule request.
	ApprovalId string `pulumi:"approvalId"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
	Condition *string `pulumi:"condition"`
	// Version of the condition. Currently accepted value is '2.0'
	ConditionVersion *string `pulumi:"conditionVersion"`
	// DateTime when role eligibility schedule request was created
	CreatedOn string `pulumi:"createdOn"`
	// Additional properties of principal, scope and role definition
	ExpandedProperties ExpandedPropertiesResponse `pulumi:"expandedProperties"`
	// The role eligibility schedule request ID.
	Id string `pulumi:"id"`
	// Justification for the role eligibility
	Justification *string `pulumi:"justification"`
	// The role eligibility schedule request name.
	Name string `pulumi:"name"`
	// The principal ID.
	PrincipalId string `pulumi:"principalId"`
	// The principal type of the assigned principal ID.
	PrincipalType string `pulumi:"principalType"`
	// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
	RequestType string `pulumi:"requestType"`
	// Id of the user who created this request
	RequestorId string `pulumi:"requestorId"`
	// The role definition ID.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// Schedule info of the role eligibility schedule
	ScheduleInfo *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo `pulumi:"scheduleInfo"`
	// The role eligibility schedule request scope.
	Scope string `pulumi:"scope"`
	// The status of the role eligibility schedule request.
	Status string `pulumi:"status"`
	// The resultant role eligibility schedule id or the role eligibility schedule id being updated
	TargetRoleEligibilityScheduleId *string `pulumi:"targetRoleEligibilityScheduleId"`
	// The role eligibility schedule instance id being updated
	TargetRoleEligibilityScheduleInstanceId *string `pulumi:"targetRoleEligibilityScheduleInstanceId"`
	// Ticket Info of the role eligibility
	TicketInfo *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo `pulumi:"ticketInfo"`
	// The role eligibility schedule request type.
	Type string `pulumi:"type"`
}

func LookupPimRoleEligibilityScheduleOutput(ctx *pulumi.Context, args LookupPimRoleEligibilityScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupPimRoleEligibilityScheduleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPimRoleEligibilityScheduleResultOutput, error) {
			args := v.(LookupPimRoleEligibilityScheduleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:authorization:getPimRoleEligibilitySchedule", args, LookupPimRoleEligibilityScheduleResultOutput{}, options).(LookupPimRoleEligibilityScheduleResultOutput), nil
		}).(LookupPimRoleEligibilityScheduleResultOutput)
}

type LookupPimRoleEligibilityScheduleOutputArgs struct {
	// The name (guid) of the role eligibility schedule request to get.
	RoleEligibilityScheduleRequestName pulumi.StringInput `pulumi:"roleEligibilityScheduleRequestName"`
	// The scope of the role eligibility schedule request.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (LookupPimRoleEligibilityScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimRoleEligibilityScheduleArgs)(nil)).Elem()
}

// Role Eligibility schedule request
type LookupPimRoleEligibilityScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupPimRoleEligibilityScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimRoleEligibilityScheduleResult)(nil)).Elem()
}

func (o LookupPimRoleEligibilityScheduleResultOutput) ToLookupPimRoleEligibilityScheduleResultOutput() LookupPimRoleEligibilityScheduleResultOutput {
	return o
}

func (o LookupPimRoleEligibilityScheduleResultOutput) ToLookupPimRoleEligibilityScheduleResultOutputWithContext(ctx context.Context) LookupPimRoleEligibilityScheduleResultOutput {
	return o
}

// The approvalId of the role eligibility schedule request.
func (o LookupPimRoleEligibilityScheduleResultOutput) ApprovalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.ApprovalId }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o LookupPimRoleEligibilityScheduleResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
func (o LookupPimRoleEligibilityScheduleResultOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Version of the condition. Currently accepted value is '2.0'
func (o LookupPimRoleEligibilityScheduleResultOutput) ConditionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *string { return v.ConditionVersion }).(pulumi.StringPtrOutput)
}

// DateTime when role eligibility schedule request was created
func (o LookupPimRoleEligibilityScheduleResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// Additional properties of principal, scope and role definition
func (o LookupPimRoleEligibilityScheduleResultOutput) ExpandedProperties() ExpandedPropertiesResponseOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) ExpandedPropertiesResponse { return v.ExpandedProperties }).(ExpandedPropertiesResponseOutput)
}

// The role eligibility schedule request ID.
func (o LookupPimRoleEligibilityScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Justification for the role eligibility
func (o LookupPimRoleEligibilityScheduleResultOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *string { return v.Justification }).(pulumi.StringPtrOutput)
}

// The role eligibility schedule request name.
func (o LookupPimRoleEligibilityScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The principal ID.
func (o LookupPimRoleEligibilityScheduleResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The principal type of the assigned principal ID.
func (o LookupPimRoleEligibilityScheduleResultOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
func (o LookupPimRoleEligibilityScheduleResultOutput) RequestType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.RequestType }).(pulumi.StringOutput)
}

// Id of the user who created this request
func (o LookupPimRoleEligibilityScheduleResultOutput) RequestorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.RequestorId }).(pulumi.StringOutput)
}

// The role definition ID.
func (o LookupPimRoleEligibilityScheduleResultOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// Schedule info of the role eligibility schedule
func (o LookupPimRoleEligibilityScheduleResultOutput) ScheduleInfo() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo {
		return v.ScheduleInfo
	}).(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput)
}

// The role eligibility schedule request scope.
func (o LookupPimRoleEligibilityScheduleResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.Scope }).(pulumi.StringOutput)
}

// The status of the role eligibility schedule request.
func (o LookupPimRoleEligibilityScheduleResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.Status }).(pulumi.StringOutput)
}

// The resultant role eligibility schedule id or the role eligibility schedule id being updated
func (o LookupPimRoleEligibilityScheduleResultOutput) TargetRoleEligibilityScheduleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *string { return v.TargetRoleEligibilityScheduleId }).(pulumi.StringPtrOutput)
}

// The role eligibility schedule instance id being updated
func (o LookupPimRoleEligibilityScheduleResultOutput) TargetRoleEligibilityScheduleInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *string {
		return v.TargetRoleEligibilityScheduleInstanceId
	}).(pulumi.StringPtrOutput)
}

// Ticket Info of the role eligibility
func (o LookupPimRoleEligibilityScheduleResultOutput) TicketInfo() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo {
		return v.TicketInfo
	}).(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput)
}

// The role eligibility schedule request type.
func (o LookupPimRoleEligibilityScheduleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimRoleEligibilityScheduleResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPimRoleEligibilityScheduleResultOutput{})
}
