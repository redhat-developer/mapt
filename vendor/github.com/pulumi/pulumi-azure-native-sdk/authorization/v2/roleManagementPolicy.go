// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Role management policy
//
// Uses Azure REST API version 2024-09-01-preview.
//
// Other available API versions: 2020-10-01, 2020-10-01-preview, 2024-02-01-preview.
type RoleManagementPolicy struct {
	pulumi.CustomResourceState

	// The role management policy description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The role management policy display name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The readonly computed rule applied to the policy.
	EffectiveRules pulumi.ArrayOutput `pulumi:"effectiveRules"`
	// The role management policy is default policy.
	IsOrganizationDefault pulumi.BoolPtrOutput `pulumi:"isOrganizationDefault"`
	// The name of the entity last modified it
	LastModifiedBy PrincipalResponseOutput `pulumi:"lastModifiedBy"`
	// The last modified date time.
	LastModifiedDateTime pulumi.StringOutput `pulumi:"lastModifiedDateTime"`
	// The role management policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Additional properties of scope
	PolicyProperties PolicyPropertiesResponseOutput `pulumi:"policyProperties"`
	// The rule applied to the policy.
	Rules pulumi.ArrayOutput `pulumi:"rules"`
	// The role management policy scope.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The role management policy type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRoleManagementPolicy registers a new resource with the given unique name, arguments, and options.
func NewRoleManagementPolicy(ctx *pulumi.Context,
	name string, args *RoleManagementPolicyArgs, opts ...pulumi.ResourceOption) (*RoleManagementPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:authorization/v20201001:RoleManagementPolicy"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20201001preview:RoleManagementPolicy"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20240201preview:RoleManagementPolicy"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20240901preview:RoleManagementPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RoleManagementPolicy
	err := ctx.RegisterResource("azure-native:authorization:RoleManagementPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleManagementPolicy gets an existing RoleManagementPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleManagementPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleManagementPolicyState, opts ...pulumi.ResourceOption) (*RoleManagementPolicy, error) {
	var resource RoleManagementPolicy
	err := ctx.ReadResource("azure-native:authorization:RoleManagementPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleManagementPolicy resources.
type roleManagementPolicyState struct {
}

type RoleManagementPolicyState struct {
}

func (RoleManagementPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleManagementPolicyState)(nil)).Elem()
}

type roleManagementPolicyArgs struct {
	// The role management policy description.
	Description *string `pulumi:"description"`
	// The role management policy display name.
	DisplayName *string `pulumi:"displayName"`
	// The role management policy is default policy.
	IsOrganizationDefault *bool `pulumi:"isOrganizationDefault"`
	// The name (guid) of the role management policy to upsert.
	RoleManagementPolicyName *string `pulumi:"roleManagementPolicyName"`
	// The rule applied to the policy.
	Rules []interface{} `pulumi:"rules"`
	// The role management policy scope.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a RoleManagementPolicy resource.
type RoleManagementPolicyArgs struct {
	// The role management policy description.
	Description pulumi.StringPtrInput
	// The role management policy display name.
	DisplayName pulumi.StringPtrInput
	// The role management policy is default policy.
	IsOrganizationDefault pulumi.BoolPtrInput
	// The name (guid) of the role management policy to upsert.
	RoleManagementPolicyName pulumi.StringPtrInput
	// The rule applied to the policy.
	Rules pulumi.ArrayInput
	// The role management policy scope.
	Scope pulumi.StringInput
}

func (RoleManagementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleManagementPolicyArgs)(nil)).Elem()
}

type RoleManagementPolicyInput interface {
	pulumi.Input

	ToRoleManagementPolicyOutput() RoleManagementPolicyOutput
	ToRoleManagementPolicyOutputWithContext(ctx context.Context) RoleManagementPolicyOutput
}

func (*RoleManagementPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicy)(nil)).Elem()
}

func (i *RoleManagementPolicy) ToRoleManagementPolicyOutput() RoleManagementPolicyOutput {
	return i.ToRoleManagementPolicyOutputWithContext(context.Background())
}

func (i *RoleManagementPolicy) ToRoleManagementPolicyOutputWithContext(ctx context.Context) RoleManagementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyOutput)
}

type RoleManagementPolicyOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicy)(nil)).Elem()
}

func (o RoleManagementPolicyOutput) ToRoleManagementPolicyOutput() RoleManagementPolicyOutput {
	return o
}

func (o RoleManagementPolicyOutput) ToRoleManagementPolicyOutputWithContext(ctx context.Context) RoleManagementPolicyOutput {
	return o
}

// The role management policy description.
func (o RoleManagementPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The role management policy display name.
func (o RoleManagementPolicyOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The readonly computed rule applied to the policy.
func (o RoleManagementPolicyOutput) EffectiveRules() pulumi.ArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.ArrayOutput { return v.EffectiveRules }).(pulumi.ArrayOutput)
}

// The role management policy is default policy.
func (o RoleManagementPolicyOutput) IsOrganizationDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.BoolPtrOutput { return v.IsOrganizationDefault }).(pulumi.BoolPtrOutput)
}

// The name of the entity last modified it
func (o RoleManagementPolicyOutput) LastModifiedBy() PrincipalResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) PrincipalResponseOutput { return v.LastModifiedBy }).(PrincipalResponseOutput)
}

// The last modified date time.
func (o RoleManagementPolicyOutput) LastModifiedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.LastModifiedDateTime }).(pulumi.StringOutput)
}

// The role management policy name.
func (o RoleManagementPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Additional properties of scope
func (o RoleManagementPolicyOutput) PolicyProperties() PolicyPropertiesResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) PolicyPropertiesResponseOutput { return v.PolicyProperties }).(PolicyPropertiesResponseOutput)
}

// The rule applied to the policy.
func (o RoleManagementPolicyOutput) Rules() pulumi.ArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.ArrayOutput { return v.Rules }).(pulumi.ArrayOutput)
}

// The role management policy scope.
func (o RoleManagementPolicyOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringPtrOutput { return v.Scope }).(pulumi.StringPtrOutput)
}

// The role management policy type.
func (o RoleManagementPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleManagementPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RoleManagementPolicyOutput{})
}
