// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The policy set definition version.
//
// Uses Azure REST API version 2023-04-01.
//
// Other available API versions: 2024-05-01, 2025-01-01, 2025-03-01.
type PolicySetDefinitionVersion struct {
	pulumi.CustomResourceState

	// The policy set definition description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.AnyOutput `pulumi:"metadata"`
	// The name of the policy set definition version.
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters ParameterDefinitionsValueResponseMapOutput `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups PolicyDefinitionGroupResponseArrayOutput `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceResponseArrayOutput `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrOutput `pulumi:"policyType"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions/versions).
	Type pulumi.StringOutput `pulumi:"type"`
	// The policy set definition version in #.#.# format.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewPolicySetDefinitionVersion registers a new resource with the given unique name, arguments, and options.
func NewPolicySetDefinitionVersion(ctx *pulumi.Context,
	name string, args *PolicySetDefinitionVersionArgs, opts ...pulumi.ResourceOption) (*PolicySetDefinitionVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDefinitions == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDefinitions'")
	}
	if args.PolicySetDefinitionName == nil {
		return nil, errors.New("invalid value for required argument 'PolicySetDefinitionName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:authorization/v20230401:PolicySetDefinitionVersion"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20240501:PolicySetDefinitionVersion"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20250101:PolicySetDefinitionVersion"),
		},
		{
			Type: pulumi.String("azure-native:authorization/v20250301:PolicySetDefinitionVersion"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PolicySetDefinitionVersion
	err := ctx.RegisterResource("azure-native:authorization:PolicySetDefinitionVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicySetDefinitionVersion gets an existing PolicySetDefinitionVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicySetDefinitionVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicySetDefinitionVersionState, opts ...pulumi.ResourceOption) (*PolicySetDefinitionVersion, error) {
	var resource PolicySetDefinitionVersion
	err := ctx.ReadResource("azure-native:authorization:PolicySetDefinitionVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicySetDefinitionVersion resources.
type policySetDefinitionVersionState struct {
}

type PolicySetDefinitionVersionState struct {
}

func (PolicySetDefinitionVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*policySetDefinitionVersionState)(nil)).Elem()
}

type policySetDefinitionVersionArgs struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `pulumi:"metadata"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters map[string]ParameterDefinitionsValue `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []PolicyDefinitionGroup `pulumi:"policyDefinitionGroups"`
	// The policy set definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number
	PolicyDefinitionVersion *string `pulumi:"policyDefinitionVersion"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReference `pulumi:"policyDefinitions"`
	// The name of the policy set definition.
	PolicySetDefinitionName string `pulumi:"policySetDefinitionName"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
	// The policy set definition version in #.#.# format.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a PolicySetDefinitionVersion resource.
type PolicySetDefinitionVersionArgs struct {
	// The policy set definition description.
	Description pulumi.StringPtrInput
	// The display name of the policy set definition.
	DisplayName pulumi.StringPtrInput
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata pulumi.Input
	// The policy set definition parameters that can be used in policy definition references.
	Parameters ParameterDefinitionsValueMapInput
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups PolicyDefinitionGroupArrayInput
	// The policy set definition version.  The format is x.y.z where x is the major version number, y is the minor version number, and z is the patch number
	PolicyDefinitionVersion pulumi.StringPtrInput
	// An array of policy definition references.
	PolicyDefinitions PolicyDefinitionReferenceArrayInput
	// The name of the policy set definition.
	PolicySetDefinitionName pulumi.StringInput
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType pulumi.StringPtrInput
	// The policy set definition version in #.#.# format.
	Version pulumi.StringPtrInput
}

func (PolicySetDefinitionVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policySetDefinitionVersionArgs)(nil)).Elem()
}

type PolicySetDefinitionVersionInput interface {
	pulumi.Input

	ToPolicySetDefinitionVersionOutput() PolicySetDefinitionVersionOutput
	ToPolicySetDefinitionVersionOutputWithContext(ctx context.Context) PolicySetDefinitionVersionOutput
}

func (*PolicySetDefinitionVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionVersion)(nil)).Elem()
}

func (i *PolicySetDefinitionVersion) ToPolicySetDefinitionVersionOutput() PolicySetDefinitionVersionOutput {
	return i.ToPolicySetDefinitionVersionOutputWithContext(context.Background())
}

func (i *PolicySetDefinitionVersion) ToPolicySetDefinitionVersionOutputWithContext(ctx context.Context) PolicySetDefinitionVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicySetDefinitionVersionOutput)
}

type PolicySetDefinitionVersionOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicySetDefinitionVersion)(nil)).Elem()
}

func (o PolicySetDefinitionVersionOutput) ToPolicySetDefinitionVersionOutput() PolicySetDefinitionVersionOutput {
	return o
}

func (o PolicySetDefinitionVersionOutput) ToPolicySetDefinitionVersionOutputWithContext(ctx context.Context) PolicySetDefinitionVersionOutput {
	return o
}

// The policy set definition description.
func (o PolicySetDefinitionVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionVersionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionVersionOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.AnyOutput { return v.Metadata }).(pulumi.AnyOutput)
}

// The name of the policy set definition version.
func (o PolicySetDefinitionVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionVersionOutput) Parameters() ParameterDefinitionsValueResponseMapOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) ParameterDefinitionsValueResponseMapOutput { return v.Parameters }).(ParameterDefinitionsValueResponseMapOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionVersionOutput) PolicyDefinitionGroups() PolicyDefinitionGroupResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) PolicyDefinitionGroupResponseArrayOutput {
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupResponseArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionVersionOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) PolicyDefinitionReferenceResponseArrayOutput {
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionVersionOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.StringPtrOutput { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// The system metadata relating to this resource.
func (o PolicySetDefinitionVersionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policySetDefinitions/versions).
func (o PolicySetDefinitionVersionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The policy set definition version in #.#.# format.
func (o PolicySetDefinitionVersionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicySetDefinitionVersion) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PolicySetDefinitionVersionOutput{})
}
