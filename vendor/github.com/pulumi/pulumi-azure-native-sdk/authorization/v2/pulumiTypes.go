// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Access Review History Definition Instance.
type AccessReviewHistoryInstance struct {
	// The display name for the parent history definition.
	DisplayName *string `pulumi:"displayName"`
	// Date time when history data report expires and the associated data is deleted.
	Expiration *string `pulumi:"expiration"`
	// Date time when the history data report is scheduled to be generated.
	FulfilledDateTime *string `pulumi:"fulfilledDateTime"`
	// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodEndDateTime *string `pulumi:"reviewHistoryPeriodEndDateTime"`
	// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodStartDateTime *string `pulumi:"reviewHistoryPeriodStartDateTime"`
	// Date time when the history data report is scheduled to be generated.
	RunDateTime *string `pulumi:"runDateTime"`
}

// AccessReviewHistoryInstanceInput is an input type that accepts AccessReviewHistoryInstanceArgs and AccessReviewHistoryInstanceOutput values.
// You can construct a concrete instance of `AccessReviewHistoryInstanceInput` via:
//
//	AccessReviewHistoryInstanceArgs{...}
type AccessReviewHistoryInstanceInput interface {
	pulumi.Input

	ToAccessReviewHistoryInstanceOutput() AccessReviewHistoryInstanceOutput
	ToAccessReviewHistoryInstanceOutputWithContext(context.Context) AccessReviewHistoryInstanceOutput
}

// Access Review History Definition Instance.
type AccessReviewHistoryInstanceArgs struct {
	// The display name for the parent history definition.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Date time when history data report expires and the associated data is deleted.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// Date time when the history data report is scheduled to be generated.
	FulfilledDateTime pulumi.StringPtrInput `pulumi:"fulfilledDateTime"`
	// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodEndDateTime pulumi.StringPtrInput `pulumi:"reviewHistoryPeriodEndDateTime"`
	// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodStartDateTime pulumi.StringPtrInput `pulumi:"reviewHistoryPeriodStartDateTime"`
	// Date time when the history data report is scheduled to be generated.
	RunDateTime pulumi.StringPtrInput `pulumi:"runDateTime"`
}

func (AccessReviewHistoryInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewHistoryInstance)(nil)).Elem()
}

func (i AccessReviewHistoryInstanceArgs) ToAccessReviewHistoryInstanceOutput() AccessReviewHistoryInstanceOutput {
	return i.ToAccessReviewHistoryInstanceOutputWithContext(context.Background())
}

func (i AccessReviewHistoryInstanceArgs) ToAccessReviewHistoryInstanceOutputWithContext(ctx context.Context) AccessReviewHistoryInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewHistoryInstanceOutput)
}

// AccessReviewHistoryInstanceArrayInput is an input type that accepts AccessReviewHistoryInstanceArray and AccessReviewHistoryInstanceArrayOutput values.
// You can construct a concrete instance of `AccessReviewHistoryInstanceArrayInput` via:
//
//	AccessReviewHistoryInstanceArray{ AccessReviewHistoryInstanceArgs{...} }
type AccessReviewHistoryInstanceArrayInput interface {
	pulumi.Input

	ToAccessReviewHistoryInstanceArrayOutput() AccessReviewHistoryInstanceArrayOutput
	ToAccessReviewHistoryInstanceArrayOutputWithContext(context.Context) AccessReviewHistoryInstanceArrayOutput
}

type AccessReviewHistoryInstanceArray []AccessReviewHistoryInstanceInput

func (AccessReviewHistoryInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewHistoryInstance)(nil)).Elem()
}

func (i AccessReviewHistoryInstanceArray) ToAccessReviewHistoryInstanceArrayOutput() AccessReviewHistoryInstanceArrayOutput {
	return i.ToAccessReviewHistoryInstanceArrayOutputWithContext(context.Background())
}

func (i AccessReviewHistoryInstanceArray) ToAccessReviewHistoryInstanceArrayOutputWithContext(ctx context.Context) AccessReviewHistoryInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewHistoryInstanceArrayOutput)
}

// Access Review History Definition Instance.
type AccessReviewHistoryInstanceOutput struct{ *pulumi.OutputState }

func (AccessReviewHistoryInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewHistoryInstance)(nil)).Elem()
}

func (o AccessReviewHistoryInstanceOutput) ToAccessReviewHistoryInstanceOutput() AccessReviewHistoryInstanceOutput {
	return o
}

func (o AccessReviewHistoryInstanceOutput) ToAccessReviewHistoryInstanceOutputWithContext(ctx context.Context) AccessReviewHistoryInstanceOutput {
	return o
}

// The display name for the parent history definition.
func (o AccessReviewHistoryInstanceOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstance) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Date time when history data report expires and the associated data is deleted.
func (o AccessReviewHistoryInstanceOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstance) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// Date time when the history data report is scheduled to be generated.
func (o AccessReviewHistoryInstanceOutput) FulfilledDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstance) *string { return v.FulfilledDateTime }).(pulumi.StringPtrOutput)
}

// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
func (o AccessReviewHistoryInstanceOutput) ReviewHistoryPeriodEndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstance) *string { return v.ReviewHistoryPeriodEndDateTime }).(pulumi.StringPtrOutput)
}

// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
func (o AccessReviewHistoryInstanceOutput) ReviewHistoryPeriodStartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstance) *string { return v.ReviewHistoryPeriodStartDateTime }).(pulumi.StringPtrOutput)
}

// Date time when the history data report is scheduled to be generated.
func (o AccessReviewHistoryInstanceOutput) RunDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstance) *string { return v.RunDateTime }).(pulumi.StringPtrOutput)
}

type AccessReviewHistoryInstanceArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewHistoryInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewHistoryInstance)(nil)).Elem()
}

func (o AccessReviewHistoryInstanceArrayOutput) ToAccessReviewHistoryInstanceArrayOutput() AccessReviewHistoryInstanceArrayOutput {
	return o
}

func (o AccessReviewHistoryInstanceArrayOutput) ToAccessReviewHistoryInstanceArrayOutputWithContext(ctx context.Context) AccessReviewHistoryInstanceArrayOutput {
	return o
}

func (o AccessReviewHistoryInstanceArrayOutput) Index(i pulumi.IntInput) AccessReviewHistoryInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewHistoryInstance {
		return vs[0].([]AccessReviewHistoryInstance)[vs[1].(int)]
	}).(AccessReviewHistoryInstanceOutput)
}

// Access Review History Definition Instance.
type AccessReviewHistoryInstanceResponse struct {
	// The display name for the parent history definition.
	DisplayName *string `pulumi:"displayName"`
	// Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour period. Callers can see the expiration date time by looking at the 'se' parameter in the generated uri.
	DownloadUri string `pulumi:"downloadUri"`
	// Date time when history data report expires and the associated data is deleted.
	Expiration *string `pulumi:"expiration"`
	// Date time when the history data report is scheduled to be generated.
	FulfilledDateTime *string `pulumi:"fulfilledDateTime"`
	// The access review history definition instance id.
	Id string `pulumi:"id"`
	// The access review history definition instance unique id.
	Name string `pulumi:"name"`
	// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodEndDateTime *string `pulumi:"reviewHistoryPeriodEndDateTime"`
	// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
	ReviewHistoryPeriodStartDateTime *string `pulumi:"reviewHistoryPeriodStartDateTime"`
	// Date time when the history data report is scheduled to be generated.
	RunDateTime *string `pulumi:"runDateTime"`
	// Status of the requested review history instance data. This is either requested, in-progress, done or error. The state transitions are as follows - Requested -> InProgress -> Done -> Expired
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
}

// Access Review History Definition Instance.
type AccessReviewHistoryInstanceResponseOutput struct{ *pulumi.OutputState }

func (AccessReviewHistoryInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewHistoryInstanceResponse)(nil)).Elem()
}

func (o AccessReviewHistoryInstanceResponseOutput) ToAccessReviewHistoryInstanceResponseOutput() AccessReviewHistoryInstanceResponseOutput {
	return o
}

func (o AccessReviewHistoryInstanceResponseOutput) ToAccessReviewHistoryInstanceResponseOutputWithContext(ctx context.Context) AccessReviewHistoryInstanceResponseOutput {
	return o
}

// The display name for the parent history definition.
func (o AccessReviewHistoryInstanceResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour period. Callers can see the expiration date time by looking at the 'se' parameter in the generated uri.
func (o AccessReviewHistoryInstanceResponseOutput) DownloadUri() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) string { return v.DownloadUri }).(pulumi.StringOutput)
}

// Date time when history data report expires and the associated data is deleted.
func (o AccessReviewHistoryInstanceResponseOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// Date time when the history data report is scheduled to be generated.
func (o AccessReviewHistoryInstanceResponseOutput) FulfilledDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) *string { return v.FulfilledDateTime }).(pulumi.StringPtrOutput)
}

// The access review history definition instance id.
func (o AccessReviewHistoryInstanceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The access review history definition instance unique id.
func (o AccessReviewHistoryInstanceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
func (o AccessReviewHistoryInstanceResponseOutput) ReviewHistoryPeriodEndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) *string { return v.ReviewHistoryPeriodEndDateTime }).(pulumi.StringPtrOutput)
}

// Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
func (o AccessReviewHistoryInstanceResponseOutput) ReviewHistoryPeriodStartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) *string { return v.ReviewHistoryPeriodStartDateTime }).(pulumi.StringPtrOutput)
}

// Date time when the history data report is scheduled to be generated.
func (o AccessReviewHistoryInstanceResponseOutput) RunDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) *string { return v.RunDateTime }).(pulumi.StringPtrOutput)
}

// Status of the requested review history instance data. This is either requested, in-progress, done or error. The state transitions are as follows - Requested -> InProgress -> Done -> Expired
func (o AccessReviewHistoryInstanceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o AccessReviewHistoryInstanceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewHistoryInstanceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AccessReviewHistoryInstanceResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewHistoryInstanceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewHistoryInstanceResponse)(nil)).Elem()
}

func (o AccessReviewHistoryInstanceResponseArrayOutput) ToAccessReviewHistoryInstanceResponseArrayOutput() AccessReviewHistoryInstanceResponseArrayOutput {
	return o
}

func (o AccessReviewHistoryInstanceResponseArrayOutput) ToAccessReviewHistoryInstanceResponseArrayOutputWithContext(ctx context.Context) AccessReviewHistoryInstanceResponseArrayOutput {
	return o
}

func (o AccessReviewHistoryInstanceResponseArrayOutput) Index(i pulumi.IntInput) AccessReviewHistoryInstanceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewHistoryInstanceResponse {
		return vs[0].([]AccessReviewHistoryInstanceResponse)[vs[1].(int)]
	}).(AccessReviewHistoryInstanceResponseOutput)
}

// Access Review Instance.
type AccessReviewInstance struct {
	// This is the collection of backup reviewers.
	BackupReviewers []AccessReviewReviewer `pulumi:"backupReviewers"`
	// The DateTime when the review instance is scheduled to end.
	EndDateTime *string `pulumi:"endDateTime"`
	// This is the collection of reviewers.
	Reviewers []AccessReviewReviewer `pulumi:"reviewers"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime *string `pulumi:"startDateTime"`
}

// AccessReviewInstanceInput is an input type that accepts AccessReviewInstanceArgs and AccessReviewInstanceOutput values.
// You can construct a concrete instance of `AccessReviewInstanceInput` via:
//
//	AccessReviewInstanceArgs{...}
type AccessReviewInstanceInput interface {
	pulumi.Input

	ToAccessReviewInstanceOutput() AccessReviewInstanceOutput
	ToAccessReviewInstanceOutputWithContext(context.Context) AccessReviewInstanceOutput
}

// Access Review Instance.
type AccessReviewInstanceArgs struct {
	// This is the collection of backup reviewers.
	BackupReviewers AccessReviewReviewerArrayInput `pulumi:"backupReviewers"`
	// The DateTime when the review instance is scheduled to end.
	EndDateTime pulumi.StringPtrInput `pulumi:"endDateTime"`
	// This is the collection of reviewers.
	Reviewers AccessReviewReviewerArrayInput `pulumi:"reviewers"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime pulumi.StringPtrInput `pulumi:"startDateTime"`
}

func (AccessReviewInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstance)(nil)).Elem()
}

func (i AccessReviewInstanceArgs) ToAccessReviewInstanceOutput() AccessReviewInstanceOutput {
	return i.ToAccessReviewInstanceOutputWithContext(context.Background())
}

func (i AccessReviewInstanceArgs) ToAccessReviewInstanceOutputWithContext(ctx context.Context) AccessReviewInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewInstanceOutput)
}

// AccessReviewInstanceArrayInput is an input type that accepts AccessReviewInstanceArray and AccessReviewInstanceArrayOutput values.
// You can construct a concrete instance of `AccessReviewInstanceArrayInput` via:
//
//	AccessReviewInstanceArray{ AccessReviewInstanceArgs{...} }
type AccessReviewInstanceArrayInput interface {
	pulumi.Input

	ToAccessReviewInstanceArrayOutput() AccessReviewInstanceArrayOutput
	ToAccessReviewInstanceArrayOutputWithContext(context.Context) AccessReviewInstanceArrayOutput
}

type AccessReviewInstanceArray []AccessReviewInstanceInput

func (AccessReviewInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstance)(nil)).Elem()
}

func (i AccessReviewInstanceArray) ToAccessReviewInstanceArrayOutput() AccessReviewInstanceArrayOutput {
	return i.ToAccessReviewInstanceArrayOutputWithContext(context.Background())
}

func (i AccessReviewInstanceArray) ToAccessReviewInstanceArrayOutputWithContext(ctx context.Context) AccessReviewInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewInstanceArrayOutput)
}

// Access Review Instance.
type AccessReviewInstanceOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstance)(nil)).Elem()
}

func (o AccessReviewInstanceOutput) ToAccessReviewInstanceOutput() AccessReviewInstanceOutput {
	return o
}

func (o AccessReviewInstanceOutput) ToAccessReviewInstanceOutputWithContext(ctx context.Context) AccessReviewInstanceOutput {
	return o
}

// This is the collection of backup reviewers.
func (o AccessReviewInstanceOutput) BackupReviewers() AccessReviewReviewerArrayOutput {
	return o.ApplyT(func(v AccessReviewInstance) []AccessReviewReviewer { return v.BackupReviewers }).(AccessReviewReviewerArrayOutput)
}

// The DateTime when the review instance is scheduled to end.
func (o AccessReviewInstanceOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstance) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// This is the collection of reviewers.
func (o AccessReviewInstanceOutput) Reviewers() AccessReviewReviewerArrayOutput {
	return o.ApplyT(func(v AccessReviewInstance) []AccessReviewReviewer { return v.Reviewers }).(AccessReviewReviewerArrayOutput)
}

// The DateTime when the review instance is scheduled to be start.
func (o AccessReviewInstanceOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstance) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

type AccessReviewInstanceArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstance)(nil)).Elem()
}

func (o AccessReviewInstanceArrayOutput) ToAccessReviewInstanceArrayOutput() AccessReviewInstanceArrayOutput {
	return o
}

func (o AccessReviewInstanceArrayOutput) ToAccessReviewInstanceArrayOutputWithContext(ctx context.Context) AccessReviewInstanceArrayOutput {
	return o
}

func (o AccessReviewInstanceArrayOutput) Index(i pulumi.IntInput) AccessReviewInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewInstance {
		return vs[0].([]AccessReviewInstance)[vs[1].(int)]
	}).(AccessReviewInstanceOutput)
}

// Access Review Instance.
type AccessReviewInstanceResponse struct {
	// This is the collection of backup reviewers.
	BackupReviewers []AccessReviewReviewerResponse `pulumi:"backupReviewers"`
	// The DateTime when the review instance is scheduled to end.
	EndDateTime *string `pulumi:"endDateTime"`
	// The access review instance id.
	Id string `pulumi:"id"`
	// The access review instance name.
	Name string `pulumi:"name"`
	// This is the collection of reviewers.
	Reviewers []AccessReviewReviewerResponse `pulumi:"reviewers"`
	// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
	ReviewersType string `pulumi:"reviewersType"`
	// The DateTime when the review instance is scheduled to be start.
	StartDateTime *string `pulumi:"startDateTime"`
	// This read-only field specifies the status of an access review instance.
	Status string `pulumi:"status"`
	// The resource type.
	Type string `pulumi:"type"`
}

// Access Review Instance.
type AccessReviewInstanceResponseOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewInstanceResponse)(nil)).Elem()
}

func (o AccessReviewInstanceResponseOutput) ToAccessReviewInstanceResponseOutput() AccessReviewInstanceResponseOutput {
	return o
}

func (o AccessReviewInstanceResponseOutput) ToAccessReviewInstanceResponseOutputWithContext(ctx context.Context) AccessReviewInstanceResponseOutput {
	return o
}

// This is the collection of backup reviewers.
func (o AccessReviewInstanceResponseOutput) BackupReviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) []AccessReviewReviewerResponse { return v.BackupReviewers }).(AccessReviewReviewerResponseArrayOutput)
}

// The DateTime when the review instance is scheduled to end.
func (o AccessReviewInstanceResponseOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// The access review instance id.
func (o AccessReviewInstanceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The access review instance name.
func (o AccessReviewInstanceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// This is the collection of reviewers.
func (o AccessReviewInstanceResponseOutput) Reviewers() AccessReviewReviewerResponseArrayOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) []AccessReviewReviewerResponse { return v.Reviewers }).(AccessReviewReviewerResponseArrayOutput)
}

// This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
func (o AccessReviewInstanceResponseOutput) ReviewersType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.ReviewersType }).(pulumi.StringOutput)
}

// The DateTime when the review instance is scheduled to be start.
func (o AccessReviewInstanceResponseOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

// This read-only field specifies the status of an access review instance.
func (o AccessReviewInstanceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The resource type.
func (o AccessReviewInstanceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewInstanceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AccessReviewInstanceResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewInstanceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewInstanceResponse)(nil)).Elem()
}

func (o AccessReviewInstanceResponseArrayOutput) ToAccessReviewInstanceResponseArrayOutput() AccessReviewInstanceResponseArrayOutput {
	return o
}

func (o AccessReviewInstanceResponseArrayOutput) ToAccessReviewInstanceResponseArrayOutputWithContext(ctx context.Context) AccessReviewInstanceResponseArrayOutput {
	return o
}

func (o AccessReviewInstanceResponseArrayOutput) Index(i pulumi.IntInput) AccessReviewInstanceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewInstanceResponse {
		return vs[0].([]AccessReviewInstanceResponse)[vs[1].(int)]
	}).(AccessReviewInstanceResponseOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewer struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId *string `pulumi:"principalId"`
}

// AccessReviewReviewerInput is an input type that accepts AccessReviewReviewerArgs and AccessReviewReviewerOutput values.
// You can construct a concrete instance of `AccessReviewReviewerInput` via:
//
//	AccessReviewReviewerArgs{...}
type AccessReviewReviewerInput interface {
	pulumi.Input

	ToAccessReviewReviewerOutput() AccessReviewReviewerOutput
	ToAccessReviewReviewerOutputWithContext(context.Context) AccessReviewReviewerOutput
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerArgs struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (AccessReviewReviewerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewer)(nil)).Elem()
}

func (i AccessReviewReviewerArgs) ToAccessReviewReviewerOutput() AccessReviewReviewerOutput {
	return i.ToAccessReviewReviewerOutputWithContext(context.Background())
}

func (i AccessReviewReviewerArgs) ToAccessReviewReviewerOutputWithContext(ctx context.Context) AccessReviewReviewerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewReviewerOutput)
}

// AccessReviewReviewerArrayInput is an input type that accepts AccessReviewReviewerArray and AccessReviewReviewerArrayOutput values.
// You can construct a concrete instance of `AccessReviewReviewerArrayInput` via:
//
//	AccessReviewReviewerArray{ AccessReviewReviewerArgs{...} }
type AccessReviewReviewerArrayInput interface {
	pulumi.Input

	ToAccessReviewReviewerArrayOutput() AccessReviewReviewerArrayOutput
	ToAccessReviewReviewerArrayOutputWithContext(context.Context) AccessReviewReviewerArrayOutput
}

type AccessReviewReviewerArray []AccessReviewReviewerInput

func (AccessReviewReviewerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewer)(nil)).Elem()
}

func (i AccessReviewReviewerArray) ToAccessReviewReviewerArrayOutput() AccessReviewReviewerArrayOutput {
	return i.ToAccessReviewReviewerArrayOutputWithContext(context.Background())
}

func (i AccessReviewReviewerArray) ToAccessReviewReviewerArrayOutputWithContext(ctx context.Context) AccessReviewReviewerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewReviewerArrayOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewer)(nil)).Elem()
}

func (o AccessReviewReviewerOutput) ToAccessReviewReviewerOutput() AccessReviewReviewerOutput {
	return o
}

func (o AccessReviewReviewerOutput) ToAccessReviewReviewerOutputWithContext(ctx context.Context) AccessReviewReviewerOutput {
	return o
}

// The id of the reviewer(user/servicePrincipal)
func (o AccessReviewReviewerOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewReviewer) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type AccessReviewReviewerArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewer)(nil)).Elem()
}

func (o AccessReviewReviewerArrayOutput) ToAccessReviewReviewerArrayOutput() AccessReviewReviewerArrayOutput {
	return o
}

func (o AccessReviewReviewerArrayOutput) ToAccessReviewReviewerArrayOutputWithContext(ctx context.Context) AccessReviewReviewerArrayOutput {
	return o
}

func (o AccessReviewReviewerArrayOutput) Index(i pulumi.IntInput) AccessReviewReviewerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewReviewer {
		return vs[0].([]AccessReviewReviewer)[vs[1].(int)]
	}).(AccessReviewReviewerOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerResponse struct {
	// The id of the reviewer(user/servicePrincipal)
	PrincipalId *string `pulumi:"principalId"`
	// The identity type : user/servicePrincipal
	PrincipalType string `pulumi:"principalType"`
}

// Descriptor for what needs to be reviewed
type AccessReviewReviewerResponseOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewReviewerResponse)(nil)).Elem()
}

func (o AccessReviewReviewerResponseOutput) ToAccessReviewReviewerResponseOutput() AccessReviewReviewerResponseOutput {
	return o
}

func (o AccessReviewReviewerResponseOutput) ToAccessReviewReviewerResponseOutputWithContext(ctx context.Context) AccessReviewReviewerResponseOutput {
	return o
}

// The id of the reviewer(user/servicePrincipal)
func (o AccessReviewReviewerResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewReviewerResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The identity type : user/servicePrincipal
func (o AccessReviewReviewerResponseOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewReviewerResponse) string { return v.PrincipalType }).(pulumi.StringOutput)
}

type AccessReviewReviewerResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewReviewerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewReviewerResponse)(nil)).Elem()
}

func (o AccessReviewReviewerResponseArrayOutput) ToAccessReviewReviewerResponseArrayOutput() AccessReviewReviewerResponseArrayOutput {
	return o
}

func (o AccessReviewReviewerResponseArrayOutput) ToAccessReviewReviewerResponseArrayOutputWithContext(ctx context.Context) AccessReviewReviewerResponseArrayOutput {
	return o
}

func (o AccessReviewReviewerResponseArrayOutput) Index(i pulumi.IntInput) AccessReviewReviewerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewReviewerResponse {
		return vs[0].([]AccessReviewReviewerResponse)[vs[1].(int)]
	}).(AccessReviewReviewerResponseOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewScope struct {
	// This is used to indicate the resource id(s) to exclude
	ExcludeResourceId *string `pulumi:"excludeResourceId"`
	// This is used to indicate the role definition id(s) to exclude
	ExcludeRoleDefinitionId *string `pulumi:"excludeRoleDefinitionId"`
	// Flag to indicate whether to expand nested memberships or not.
	ExpandNestedMemberships *bool `pulumi:"expandNestedMemberships"`
	// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	InactiveDuration *string `pulumi:"inactiveDuration"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeAccessBelowResource *bool `pulumi:"includeAccessBelowResource"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeInheritedAccess *bool `pulumi:"includeInheritedAccess"`
}

// AccessReviewScopeInput is an input type that accepts AccessReviewScopeArgs and AccessReviewScopeOutput values.
// You can construct a concrete instance of `AccessReviewScopeInput` via:
//
//	AccessReviewScopeArgs{...}
type AccessReviewScopeInput interface {
	pulumi.Input

	ToAccessReviewScopeOutput() AccessReviewScopeOutput
	ToAccessReviewScopeOutputWithContext(context.Context) AccessReviewScopeOutput
}

// Descriptor for what needs to be reviewed
type AccessReviewScopeArgs struct {
	// This is used to indicate the resource id(s) to exclude
	ExcludeResourceId pulumi.StringPtrInput `pulumi:"excludeResourceId"`
	// This is used to indicate the role definition id(s) to exclude
	ExcludeRoleDefinitionId pulumi.StringPtrInput `pulumi:"excludeRoleDefinitionId"`
	// Flag to indicate whether to expand nested memberships or not.
	ExpandNestedMemberships pulumi.BoolPtrInput `pulumi:"expandNestedMemberships"`
	// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	InactiveDuration pulumi.StringPtrInput `pulumi:"inactiveDuration"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeAccessBelowResource pulumi.BoolPtrInput `pulumi:"includeAccessBelowResource"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeInheritedAccess pulumi.BoolPtrInput `pulumi:"includeInheritedAccess"`
}

func (AccessReviewScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewScope)(nil)).Elem()
}

func (i AccessReviewScopeArgs) ToAccessReviewScopeOutput() AccessReviewScopeOutput {
	return i.ToAccessReviewScopeOutputWithContext(context.Background())
}

func (i AccessReviewScopeArgs) ToAccessReviewScopeOutputWithContext(ctx context.Context) AccessReviewScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewScopeOutput)
}

// AccessReviewScopeArrayInput is an input type that accepts AccessReviewScopeArray and AccessReviewScopeArrayOutput values.
// You can construct a concrete instance of `AccessReviewScopeArrayInput` via:
//
//	AccessReviewScopeArray{ AccessReviewScopeArgs{...} }
type AccessReviewScopeArrayInput interface {
	pulumi.Input

	ToAccessReviewScopeArrayOutput() AccessReviewScopeArrayOutput
	ToAccessReviewScopeArrayOutputWithContext(context.Context) AccessReviewScopeArrayOutput
}

type AccessReviewScopeArray []AccessReviewScopeInput

func (AccessReviewScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewScope)(nil)).Elem()
}

func (i AccessReviewScopeArray) ToAccessReviewScopeArrayOutput() AccessReviewScopeArrayOutput {
	return i.ToAccessReviewScopeArrayOutputWithContext(context.Background())
}

func (i AccessReviewScopeArray) ToAccessReviewScopeArrayOutputWithContext(ctx context.Context) AccessReviewScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessReviewScopeArrayOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewScopeOutput struct{ *pulumi.OutputState }

func (AccessReviewScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewScope)(nil)).Elem()
}

func (o AccessReviewScopeOutput) ToAccessReviewScopeOutput() AccessReviewScopeOutput {
	return o
}

func (o AccessReviewScopeOutput) ToAccessReviewScopeOutputWithContext(ctx context.Context) AccessReviewScopeOutput {
	return o
}

// This is used to indicate the resource id(s) to exclude
func (o AccessReviewScopeOutput) ExcludeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewScope) *string { return v.ExcludeResourceId }).(pulumi.StringPtrOutput)
}

// This is used to indicate the role definition id(s) to exclude
func (o AccessReviewScopeOutput) ExcludeRoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewScope) *string { return v.ExcludeRoleDefinitionId }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o AccessReviewScopeOutput) ExpandNestedMemberships() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessReviewScope) *bool { return v.ExpandNestedMemberships }).(pulumi.BoolPtrOutput)
}

// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
func (o AccessReviewScopeOutput) InactiveDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewScope) *string { return v.InactiveDuration }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o AccessReviewScopeOutput) IncludeAccessBelowResource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessReviewScope) *bool { return v.IncludeAccessBelowResource }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o AccessReviewScopeOutput) IncludeInheritedAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessReviewScope) *bool { return v.IncludeInheritedAccess }).(pulumi.BoolPtrOutput)
}

type AccessReviewScopeArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewScope)(nil)).Elem()
}

func (o AccessReviewScopeArrayOutput) ToAccessReviewScopeArrayOutput() AccessReviewScopeArrayOutput {
	return o
}

func (o AccessReviewScopeArrayOutput) ToAccessReviewScopeArrayOutputWithContext(ctx context.Context) AccessReviewScopeArrayOutput {
	return o
}

func (o AccessReviewScopeArrayOutput) Index(i pulumi.IntInput) AccessReviewScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewScope {
		return vs[0].([]AccessReviewScope)[vs[1].(int)]
	}).(AccessReviewScopeOutput)
}

// Descriptor for what needs to be reviewed
type AccessReviewScopeResponse struct {
	// The role assignment state eligible/active to review
	AssignmentState string `pulumi:"assignmentState"`
	// This is used to indicate the resource id(s) to exclude
	ExcludeResourceId *string `pulumi:"excludeResourceId"`
	// This is used to indicate the role definition id(s) to exclude
	ExcludeRoleDefinitionId *string `pulumi:"excludeRoleDefinitionId"`
	// Flag to indicate whether to expand nested memberships or not.
	ExpandNestedMemberships *bool `pulumi:"expandNestedMemberships"`
	// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
	InactiveDuration *string `pulumi:"inactiveDuration"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeAccessBelowResource *bool `pulumi:"includeAccessBelowResource"`
	// Flag to indicate whether to expand nested memberships or not.
	IncludeInheritedAccess *bool `pulumi:"includeInheritedAccess"`
	// The identity type user/servicePrincipal to review
	PrincipalType string `pulumi:"principalType"`
	// ResourceId in which this review is getting created
	ResourceId string `pulumi:"resourceId"`
	// This is used to indicate the role being reviewed
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
}

// Descriptor for what needs to be reviewed
type AccessReviewScopeResponseOutput struct{ *pulumi.OutputState }

func (AccessReviewScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessReviewScopeResponse)(nil)).Elem()
}

func (o AccessReviewScopeResponseOutput) ToAccessReviewScopeResponseOutput() AccessReviewScopeResponseOutput {
	return o
}

func (o AccessReviewScopeResponseOutput) ToAccessReviewScopeResponseOutputWithContext(ctx context.Context) AccessReviewScopeResponseOutput {
	return o
}

// The role assignment state eligible/active to review
func (o AccessReviewScopeResponseOutput) AssignmentState() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) string { return v.AssignmentState }).(pulumi.StringOutput)
}

// This is used to indicate the resource id(s) to exclude
func (o AccessReviewScopeResponseOutput) ExcludeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) *string { return v.ExcludeResourceId }).(pulumi.StringPtrOutput)
}

// This is used to indicate the role definition id(s) to exclude
func (o AccessReviewScopeResponseOutput) ExcludeRoleDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) *string { return v.ExcludeRoleDefinitionId }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o AccessReviewScopeResponseOutput) ExpandNestedMemberships() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) *bool { return v.ExpandNestedMemberships }).(pulumi.BoolPtrOutput)
}

// Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
func (o AccessReviewScopeResponseOutput) InactiveDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) *string { return v.InactiveDuration }).(pulumi.StringPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o AccessReviewScopeResponseOutput) IncludeAccessBelowResource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) *bool { return v.IncludeAccessBelowResource }).(pulumi.BoolPtrOutput)
}

// Flag to indicate whether to expand nested memberships or not.
func (o AccessReviewScopeResponseOutput) IncludeInheritedAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) *bool { return v.IncludeInheritedAccess }).(pulumi.BoolPtrOutput)
}

// The identity type user/servicePrincipal to review
func (o AccessReviewScopeResponseOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) string { return v.PrincipalType }).(pulumi.StringOutput)
}

// ResourceId in which this review is getting created
func (o AccessReviewScopeResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// This is used to indicate the role being reviewed
func (o AccessReviewScopeResponseOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessReviewScopeResponse) string { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

type AccessReviewScopeResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessReviewScopeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessReviewScopeResponse)(nil)).Elem()
}

func (o AccessReviewScopeResponseArrayOutput) ToAccessReviewScopeResponseArrayOutput() AccessReviewScopeResponseArrayOutput {
	return o
}

func (o AccessReviewScopeResponseArrayOutput) ToAccessReviewScopeResponseArrayOutputWithContext(ctx context.Context) AccessReviewScopeResponseArrayOutput {
	return o
}

func (o AccessReviewScopeResponseArrayOutput) Index(i pulumi.IntInput) AccessReviewScopeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessReviewScopeResponse {
		return vs[0].([]AccessReviewScopeResponse)[vs[1].(int)]
	}).(AccessReviewScopeResponseOutput)
}

// The approval settings.
type ApprovalSettings struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStage `pulumi:"approvalStages"`
	// Determines whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determines whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification is required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// ApprovalSettingsInput is an input type that accepts ApprovalSettingsArgs and ApprovalSettingsOutput values.
// You can construct a concrete instance of `ApprovalSettingsInput` via:
//
//	ApprovalSettingsArgs{...}
type ApprovalSettingsInput interface {
	pulumi.Input

	ToApprovalSettingsOutput() ApprovalSettingsOutput
	ToApprovalSettingsOutputWithContext(context.Context) ApprovalSettingsOutput
}

// The approval settings.
type ApprovalSettingsArgs struct {
	// The type of rule
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages ApprovalStageArrayInput `pulumi:"approvalStages"`
	// Determines whether approval is required or not.
	IsApprovalRequired pulumi.BoolPtrInput `pulumi:"isApprovalRequired"`
	// Determines whether approval is required for assignment extension.
	IsApprovalRequiredForExtension pulumi.BoolPtrInput `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification is required.
	IsRequestorJustificationRequired pulumi.BoolPtrInput `pulumi:"isRequestorJustificationRequired"`
}

func (ApprovalSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return i.ToApprovalSettingsOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput)
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i ApprovalSettingsArgs) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsOutput).ToApprovalSettingsPtrOutputWithContext(ctx)
}

// ApprovalSettingsPtrInput is an input type that accepts ApprovalSettingsArgs, ApprovalSettingsPtr and ApprovalSettingsPtrOutput values.
// You can construct a concrete instance of `ApprovalSettingsPtrInput` via:
//
//	        ApprovalSettingsArgs{...}
//
//	or:
//
//	        nil
type ApprovalSettingsPtrInput interface {
	pulumi.Input

	ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput
	ToApprovalSettingsPtrOutputWithContext(context.Context) ApprovalSettingsPtrOutput
}

type approvalSettingsPtrType ApprovalSettingsArgs

func ApprovalSettingsPtr(v *ApprovalSettingsArgs) ApprovalSettingsPtrInput {
	return (*approvalSettingsPtrType)(v)
}

func (*approvalSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return i.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (i *approvalSettingsPtrType) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalSettingsPtrOutput)
}

// The approval settings.
type ApprovalSettingsOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutput() ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsOutputWithContext(ctx context.Context) ApprovalSettingsOutput {
	return o
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o.ToApprovalSettingsPtrOutputWithContext(context.Background())
}

func (o ApprovalSettingsOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApprovalSettings) *ApprovalSettings {
		return &v
	}).(ApprovalSettingsPtrOutput)
}

// The type of rule
func (o ApprovalSettingsOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v ApprovalSettings) []ApprovalStage { return v.ApprovalStages }).(ApprovalStageArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettings) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsPtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettings)(nil)).Elem()
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutput() ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) ToApprovalSettingsPtrOutputWithContext(ctx context.Context) ApprovalSettingsPtrOutput {
	return o
}

func (o ApprovalSettingsPtrOutput) Elem() ApprovalSettingsOutput {
	return o.ApplyT(func(v *ApprovalSettings) ApprovalSettings {
		if v != nil {
			return *v
		}
		var ret ApprovalSettings
		return ret
	}).(ApprovalSettingsOutput)
}

// The type of rule
func (o ApprovalSettingsPtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsPtrOutput) ApprovalStages() ApprovalStageArrayOutput {
	return o.ApplyT(func(v *ApprovalSettings) []ApprovalStage {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsPtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsPtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsPtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettings) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval settings.
type ApprovalSettingsResponse struct {
	// The type of rule
	ApprovalMode *string `pulumi:"approvalMode"`
	// The approval stages of the request.
	ApprovalStages []ApprovalStageResponse `pulumi:"approvalStages"`
	// Determines whether approval is required or not.
	IsApprovalRequired *bool `pulumi:"isApprovalRequired"`
	// Determines whether approval is required for assignment extension.
	IsApprovalRequiredForExtension *bool `pulumi:"isApprovalRequiredForExtension"`
	// Determine whether requestor justification is required.
	IsRequestorJustificationRequired *bool `pulumi:"isRequestorJustificationRequired"`
}

// The approval settings.
type ApprovalSettingsResponseOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutput() ApprovalSettingsResponseOutput {
	return o
}

func (o ApprovalSettingsResponseOutput) ToApprovalSettingsResponseOutputWithContext(ctx context.Context) ApprovalSettingsResponseOutput {
	return o
}

// The type of rule
func (o ApprovalSettingsResponseOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponseOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) []ApprovalStageResponse { return v.ApprovalStages }).(ApprovalStageResponseArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsResponseOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequired }).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsResponseOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsApprovalRequiredForExtension }).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsResponseOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalSettingsResponse) *bool { return v.IsRequestorJustificationRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ApprovalSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalSettingsResponse)(nil)).Elem()
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutput() ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) ToApprovalSettingsResponsePtrOutputWithContext(ctx context.Context) ApprovalSettingsResponsePtrOutput {
	return o
}

func (o ApprovalSettingsResponsePtrOutput) Elem() ApprovalSettingsResponseOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) ApprovalSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ApprovalSettingsResponse
		return ret
	}).(ApprovalSettingsResponseOutput)
}

// The type of rule
func (o ApprovalSettingsResponsePtrOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApprovalMode
	}).(pulumi.StringPtrOutput)
}

// The approval stages of the request.
func (o ApprovalSettingsResponsePtrOutput) ApprovalStages() ApprovalStageResponseArrayOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) []ApprovalStageResponse {
		if v == nil {
			return nil
		}
		return v.ApprovalStages
	}).(ApprovalStageResponseArrayOutput)
}

// Determines whether approval is required or not.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// Determines whether approval is required for assignment extension.
func (o ApprovalSettingsResponsePtrOutput) IsApprovalRequiredForExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsApprovalRequiredForExtension
	}).(pulumi.BoolPtrOutput)
}

// Determine whether requestor justification is required.
func (o ApprovalSettingsResponsePtrOutput) IsRequestorJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsRequestorJustificationRequired
	}).(pulumi.BoolPtrOutput)
}

// The approval stage.
type ApprovalStage struct {
	// The time in days when approval request would be timed out
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []UserSet `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approve
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determines whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []UserSet `pulumi:"primaryApprovers"`
}

// ApprovalStageInput is an input type that accepts ApprovalStageArgs and ApprovalStageOutput values.
// You can construct a concrete instance of `ApprovalStageInput` via:
//
//	ApprovalStageArgs{...}
type ApprovalStageInput interface {
	pulumi.Input

	ToApprovalStageOutput() ApprovalStageOutput
	ToApprovalStageOutputWithContext(context.Context) ApprovalStageOutput
}

// The approval stage.
type ApprovalStageArgs struct {
	// The time in days when approval request would be timed out
	ApprovalStageTimeOutInDays pulumi.IntPtrInput `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers UserSetArrayInput `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approve
	EscalationTimeInMinutes pulumi.IntPtrInput `pulumi:"escalationTimeInMinutes"`
	// Determines whether approver need to provide justification for his decision.
	IsApproverJustificationRequired pulumi.BoolPtrInput `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled pulumi.BoolPtrInput `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers UserSetArrayInput `pulumi:"primaryApprovers"`
}

func (ApprovalStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArgs) ToApprovalStageOutput() ApprovalStageOutput {
	return i.ToApprovalStageOutputWithContext(context.Background())
}

func (i ApprovalStageArgs) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageOutput)
}

// ApprovalStageArrayInput is an input type that accepts ApprovalStageArray and ApprovalStageArrayOutput values.
// You can construct a concrete instance of `ApprovalStageArrayInput` via:
//
//	ApprovalStageArray{ ApprovalStageArgs{...} }
type ApprovalStageArrayInput interface {
	pulumi.Input

	ToApprovalStageArrayOutput() ApprovalStageArrayOutput
	ToApprovalStageArrayOutputWithContext(context.Context) ApprovalStageArrayOutput
}

type ApprovalStageArray []ApprovalStageInput

func (ApprovalStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (i ApprovalStageArray) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return i.ToApprovalStageArrayOutputWithContext(context.Background())
}

func (i ApprovalStageArray) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalStageArrayOutput)
}

// The approval stage.
type ApprovalStageOutput struct{ *pulumi.OutputState }

func (ApprovalStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageOutput) ToApprovalStageOutput() ApprovalStageOutput {
	return o
}

func (o ApprovalStageOutput) ToApprovalStageOutputWithContext(ctx context.Context) ApprovalStageOutput {
	return o
}

// The time in days when approval request would be timed out
func (o ApprovalStageOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageOutput) EscalationApprovers() UserSetArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []UserSet { return v.EscalationApprovers }).(UserSetArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approve
func (o ApprovalStageOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determines whether approver need to provide justification for his decision.
func (o ApprovalStageOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStage) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageOutput) PrimaryApprovers() UserSetArrayOutput {
	return o.ApplyT(func(v ApprovalStage) []UserSet { return v.PrimaryApprovers }).(UserSetArrayOutput)
}

type ApprovalStageArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStage)(nil)).Elem()
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutput() ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) ToApprovalStageArrayOutputWithContext(ctx context.Context) ApprovalStageArrayOutput {
	return o
}

func (o ApprovalStageArrayOutput) Index(i pulumi.IntInput) ApprovalStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStage {
		return vs[0].([]ApprovalStage)[vs[1].(int)]
	}).(ApprovalStageOutput)
}

// The approval stage.
type ApprovalStageResponse struct {
	// The time in days when approval request would be timed out
	ApprovalStageTimeOutInDays *int `pulumi:"approvalStageTimeOutInDays"`
	// The escalation approver of the request.
	EscalationApprovers []UserSetResponse `pulumi:"escalationApprovers"`
	// The time in minutes when the approval request would be escalated if the primary approver does not approve
	EscalationTimeInMinutes *int `pulumi:"escalationTimeInMinutes"`
	// Determines whether approver need to provide justification for his decision.
	IsApproverJustificationRequired *bool `pulumi:"isApproverJustificationRequired"`
	// The value determine whether escalation feature is enabled.
	IsEscalationEnabled *bool `pulumi:"isEscalationEnabled"`
	// The primary approver of the request.
	PrimaryApprovers []UserSetResponse `pulumi:"primaryApprovers"`
}

// The approval stage.
type ApprovalStageResponseOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutput() ApprovalStageResponseOutput {
	return o
}

func (o ApprovalStageResponseOutput) ToApprovalStageResponseOutputWithContext(ctx context.Context) ApprovalStageResponseOutput {
	return o
}

// The time in days when approval request would be timed out
func (o ApprovalStageResponseOutput) ApprovalStageTimeOutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.ApprovalStageTimeOutInDays }).(pulumi.IntPtrOutput)
}

// The escalation approver of the request.
func (o ApprovalStageResponseOutput) EscalationApprovers() UserSetResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []UserSetResponse { return v.EscalationApprovers }).(UserSetResponseArrayOutput)
}

// The time in minutes when the approval request would be escalated if the primary approver does not approve
func (o ApprovalStageResponseOutput) EscalationTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *int { return v.EscalationTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Determines whether approver need to provide justification for his decision.
func (o ApprovalStageResponseOutput) IsApproverJustificationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsApproverJustificationRequired }).(pulumi.BoolPtrOutput)
}

// The value determine whether escalation feature is enabled.
func (o ApprovalStageResponseOutput) IsEscalationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalStageResponse) *bool { return v.IsEscalationEnabled }).(pulumi.BoolPtrOutput)
}

// The primary approver of the request.
func (o ApprovalStageResponseOutput) PrimaryApprovers() UserSetResponseArrayOutput {
	return o.ApplyT(func(v ApprovalStageResponse) []UserSetResponse { return v.PrimaryApprovers }).(UserSetResponseArrayOutput)
}

type ApprovalStageResponseArrayOutput struct{ *pulumi.OutputState }

func (ApprovalStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApprovalStageResponse)(nil)).Elem()
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutput() ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) ToApprovalStageResponseArrayOutputWithContext(ctx context.Context) ApprovalStageResponseArrayOutput {
	return o
}

func (o ApprovalStageResponseArrayOutput) Index(i pulumi.IntInput) ApprovalStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApprovalStageResponse {
		return vs[0].([]ApprovalStageResponse)[vs[1].(int)]
	}).(ApprovalStageResponseOutput)
}

// Expanded info of resource, role and principal
type ExpandedPropertiesResponse struct {
	// Details of the principal
	Principal *ExpandedPropertiesResponsePrincipal `pulumi:"principal"`
	// Details of role definition
	RoleDefinition *ExpandedPropertiesResponseRoleDefinition `pulumi:"roleDefinition"`
	// Details of the resource scope
	Scope *ExpandedPropertiesResponseScope `pulumi:"scope"`
}

// Expanded info of resource, role and principal
type ExpandedPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponse)(nil)).Elem()
}

func (o ExpandedPropertiesResponseOutput) ToExpandedPropertiesResponseOutput() ExpandedPropertiesResponseOutput {
	return o
}

func (o ExpandedPropertiesResponseOutput) ToExpandedPropertiesResponseOutputWithContext(ctx context.Context) ExpandedPropertiesResponseOutput {
	return o
}

// Details of the principal
func (o ExpandedPropertiesResponseOutput) Principal() ExpandedPropertiesResponsePrincipalPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponse) *ExpandedPropertiesResponsePrincipal { return v.Principal }).(ExpandedPropertiesResponsePrincipalPtrOutput)
}

// Details of role definition
func (o ExpandedPropertiesResponseOutput) RoleDefinition() ExpandedPropertiesResponseRoleDefinitionPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponse) *ExpandedPropertiesResponseRoleDefinition { return v.RoleDefinition }).(ExpandedPropertiesResponseRoleDefinitionPtrOutput)
}

// Details of the resource scope
func (o ExpandedPropertiesResponseOutput) Scope() ExpandedPropertiesResponseScopePtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponse) *ExpandedPropertiesResponseScope { return v.Scope }).(ExpandedPropertiesResponseScopePtrOutput)
}

// Details of the principal
type ExpandedPropertiesResponsePrincipal struct {
	// Display name of the principal
	DisplayName *string `pulumi:"displayName"`
	// Email id of the principal
	Email *string `pulumi:"email"`
	// Id of the principal
	Id *string `pulumi:"id"`
	// Type of the principal
	Type *string `pulumi:"type"`
}

// Details of the principal
type ExpandedPropertiesResponsePrincipalOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponsePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponsePrincipal)(nil)).Elem()
}

func (o ExpandedPropertiesResponsePrincipalOutput) ToExpandedPropertiesResponsePrincipalOutput() ExpandedPropertiesResponsePrincipalOutput {
	return o
}

func (o ExpandedPropertiesResponsePrincipalOutput) ToExpandedPropertiesResponsePrincipalOutputWithContext(ctx context.Context) ExpandedPropertiesResponsePrincipalOutput {
	return o
}

// Display name of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Email id of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Id of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the principal
func (o ExpandedPropertiesResponsePrincipalOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponsePrincipal) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExpandedPropertiesResponsePrincipalPtrOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponsePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpandedPropertiesResponsePrincipal)(nil)).Elem()
}

func (o ExpandedPropertiesResponsePrincipalPtrOutput) ToExpandedPropertiesResponsePrincipalPtrOutput() ExpandedPropertiesResponsePrincipalPtrOutput {
	return o
}

func (o ExpandedPropertiesResponsePrincipalPtrOutput) ToExpandedPropertiesResponsePrincipalPtrOutputWithContext(ctx context.Context) ExpandedPropertiesResponsePrincipalPtrOutput {
	return o
}

func (o ExpandedPropertiesResponsePrincipalPtrOutput) Elem() ExpandedPropertiesResponsePrincipalOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) ExpandedPropertiesResponsePrincipal {
		if v != nil {
			return *v
		}
		var ret ExpandedPropertiesResponsePrincipal
		return ret
	}).(ExpandedPropertiesResponsePrincipalOutput)
}

// Display name of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Email id of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Id of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the principal
func (o ExpandedPropertiesResponsePrincipalPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponsePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details of role definition
type ExpandedPropertiesResponseRoleDefinition struct {
	// Display name of the role definition
	DisplayName *string `pulumi:"displayName"`
	// Id of the role definition
	Id *string `pulumi:"id"`
	// Type of the role definition
	Type *string `pulumi:"type"`
}

// Details of role definition
type ExpandedPropertiesResponseRoleDefinitionOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseRoleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o ExpandedPropertiesResponseRoleDefinitionOutput) ToExpandedPropertiesResponseRoleDefinitionOutput() ExpandedPropertiesResponseRoleDefinitionOutput {
	return o
}

func (o ExpandedPropertiesResponseRoleDefinitionOutput) ToExpandedPropertiesResponseRoleDefinitionOutputWithContext(ctx context.Context) ExpandedPropertiesResponseRoleDefinitionOutput {
	return o
}

// Display name of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseRoleDefinition) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseRoleDefinition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseRoleDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExpandedPropertiesResponseRoleDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseRoleDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpandedPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) ToExpandedPropertiesResponseRoleDefinitionPtrOutput() ExpandedPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) ToExpandedPropertiesResponseRoleDefinitionPtrOutputWithContext(ctx context.Context) ExpandedPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) Elem() ExpandedPropertiesResponseRoleDefinitionOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) ExpandedPropertiesResponseRoleDefinition {
		if v != nil {
			return *v
		}
		var ret ExpandedPropertiesResponseRoleDefinition
		return ret
	}).(ExpandedPropertiesResponseRoleDefinitionOutput)
}

// Display name of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o ExpandedPropertiesResponseRoleDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details of the resource scope
type ExpandedPropertiesResponseScope struct {
	// Display name of the resource
	DisplayName *string `pulumi:"displayName"`
	// Scope id of the resource
	Id *string `pulumi:"id"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// Details of the resource scope
type ExpandedPropertiesResponseScopeOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExpandedPropertiesResponseScope)(nil)).Elem()
}

func (o ExpandedPropertiesResponseScopeOutput) ToExpandedPropertiesResponseScopeOutput() ExpandedPropertiesResponseScopeOutput {
	return o
}

func (o ExpandedPropertiesResponseScopeOutput) ToExpandedPropertiesResponseScopeOutputWithContext(ctx context.Context) ExpandedPropertiesResponseScopeOutput {
	return o
}

// Display name of the resource
func (o ExpandedPropertiesResponseScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseScope) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o ExpandedPropertiesResponseScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o ExpandedPropertiesResponseScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExpandedPropertiesResponseScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExpandedPropertiesResponseScopePtrOutput struct{ *pulumi.OutputState }

func (ExpandedPropertiesResponseScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExpandedPropertiesResponseScope)(nil)).Elem()
}

func (o ExpandedPropertiesResponseScopePtrOutput) ToExpandedPropertiesResponseScopePtrOutput() ExpandedPropertiesResponseScopePtrOutput {
	return o
}

func (o ExpandedPropertiesResponseScopePtrOutput) ToExpandedPropertiesResponseScopePtrOutputWithContext(ctx context.Context) ExpandedPropertiesResponseScopePtrOutput {
	return o
}

func (o ExpandedPropertiesResponseScopePtrOutput) Elem() ExpandedPropertiesResponseScopeOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) ExpandedPropertiesResponseScope {
		if v != nil {
			return *v
		}
		var ret ExpandedPropertiesResponseScope
		return ret
	}).(ExpandedPropertiesResponseScopeOutput)
}

// Display name of the resource
func (o ExpandedPropertiesResponseScopePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o ExpandedPropertiesResponseScopePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o ExpandedPropertiesResponseScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExpandedPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity.
type Identity struct {
	// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
	Type *ResourceIdentityType `pulumi:"type"`
	// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity.
type IdentityArgs struct {
	// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
func (o IdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v Identity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
func (o IdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity.
type IdentityResponse struct {
	// The principal ID of the resource identity.  This property will only be provided for a system assigned identity
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the resource identity.  This property will only be provided for a system assigned identity
	TenantId string `pulumi:"tenantId"`
	// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
	Type *string `pulumi:"type"`
	// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]IdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.  Policy assignments support a maximum of one identity.  That is either a system assigned identity or a single user assigned identity.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The principal ID of the resource identity.  This property will only be provided for a system assigned identity
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the resource identity.  This property will only be provided for a system assigned identity
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityResponseOutput) UserAssignedIdentities() IdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v IdentityResponse) map[string]IdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(IdentityResponseUserAssignedIdentitiesMapOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of the resource identity.  This property will only be provided for a system assigned identity
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the resource identity.  This property will only be provided for a system assigned identity
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type. This is the only required field when adding a system or user assigned identity to a resource.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The user identity associated with the policy. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityResponsePtrOutput) UserAssignedIdentities() IdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *IdentityResponse) map[string]IdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(IdentityResponseUserAssignedIdentitiesMapOutput)
}

type IdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type IdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (IdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o IdentityResponseUserAssignedIdentitiesOutput) ToIdentityResponseUserAssignedIdentitiesOutput() IdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesOutput) ToIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) IdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o IdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o IdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type IdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (IdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) ToIdentityResponseUserAssignedIdentitiesMapOutput() IdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) ToIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) IdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o IdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) IdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]IdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(IdentityResponseUserAssignedIdentitiesOutput)
}

// Lock owner properties.
type ManagementLockOwner struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// ManagementLockOwnerInput is an input type that accepts ManagementLockOwnerArgs and ManagementLockOwnerOutput values.
// You can construct a concrete instance of `ManagementLockOwnerInput` via:
//
//	ManagementLockOwnerArgs{...}
type ManagementLockOwnerInput interface {
	pulumi.Input

	ToManagementLockOwnerOutput() ManagementLockOwnerOutput
	ToManagementLockOwnerOutputWithContext(context.Context) ManagementLockOwnerOutput
}

// Lock owner properties.
type ManagementLockOwnerArgs struct {
	// The application ID of the lock owner.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
}

func (ManagementLockOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return i.ToManagementLockOwnerOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArgs) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerOutput)
}

// ManagementLockOwnerArrayInput is an input type that accepts ManagementLockOwnerArray and ManagementLockOwnerArrayOutput values.
// You can construct a concrete instance of `ManagementLockOwnerArrayInput` via:
//
//	ManagementLockOwnerArray{ ManagementLockOwnerArgs{...} }
type ManagementLockOwnerArrayInput interface {
	pulumi.Input

	ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput
	ToManagementLockOwnerArrayOutputWithContext(context.Context) ManagementLockOwnerArrayOutput
}

type ManagementLockOwnerArray []ManagementLockOwnerInput

func (ManagementLockOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return i.ToManagementLockOwnerArrayOutputWithContext(context.Background())
}

func (i ManagementLockOwnerArray) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementLockOwnerArrayOutput)
}

// Lock owner properties.
type ManagementLockOwnerOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutput() ManagementLockOwnerOutput {
	return o
}

func (o ManagementLockOwnerOutput) ToManagementLockOwnerOutputWithContext(ctx context.Context) ManagementLockOwnerOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwner) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwner)(nil)).Elem()
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutput() ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) ToManagementLockOwnerArrayOutputWithContext(ctx context.Context) ManagementLockOwnerArrayOutput {
	return o
}

func (o ManagementLockOwnerArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwner {
		return vs[0].([]ManagementLockOwner)[vs[1].(int)]
	}).(ManagementLockOwnerOutput)
}

// Lock owner properties.
type ManagementLockOwnerResponse struct {
	// The application ID of the lock owner.
	ApplicationId *string `pulumi:"applicationId"`
}

// Lock owner properties.
type ManagementLockOwnerResponseOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutput() ManagementLockOwnerResponseOutput {
	return o
}

func (o ManagementLockOwnerResponseOutput) ToManagementLockOwnerResponseOutputWithContext(ctx context.Context) ManagementLockOwnerResponseOutput {
	return o
}

// The application ID of the lock owner.
func (o ManagementLockOwnerResponseOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementLockOwnerResponse) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

type ManagementLockOwnerResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementLockOwnerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementLockOwnerResponse)(nil)).Elem()
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutput() ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) ToManagementLockOwnerResponseArrayOutputWithContext(ctx context.Context) ManagementLockOwnerResponseArrayOutput {
	return o
}

func (o ManagementLockOwnerResponseArrayOutput) Index(i pulumi.IntInput) ManagementLockOwnerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementLockOwnerResponse {
		return vs[0].([]ManagementLockOwnerResponse)[vs[1].(int)]
	}).(ManagementLockOwnerResponseOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessage struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// NonComplianceMessageInput is an input type that accepts NonComplianceMessageArgs and NonComplianceMessageOutput values.
// You can construct a concrete instance of `NonComplianceMessageInput` via:
//
//	NonComplianceMessageArgs{...}
type NonComplianceMessageInput interface {
	pulumi.Input

	ToNonComplianceMessageOutput() NonComplianceMessageOutput
	ToNonComplianceMessageOutputWithContext(context.Context) NonComplianceMessageOutput
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageArgs struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message pulumi.StringInput `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (NonComplianceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessage)(nil)).Elem()
}

func (i NonComplianceMessageArgs) ToNonComplianceMessageOutput() NonComplianceMessageOutput {
	return i.ToNonComplianceMessageOutputWithContext(context.Background())
}

func (i NonComplianceMessageArgs) ToNonComplianceMessageOutputWithContext(ctx context.Context) NonComplianceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageOutput)
}

// NonComplianceMessageArrayInput is an input type that accepts NonComplianceMessageArray and NonComplianceMessageArrayOutput values.
// You can construct a concrete instance of `NonComplianceMessageArrayInput` via:
//
//	NonComplianceMessageArray{ NonComplianceMessageArgs{...} }
type NonComplianceMessageArrayInput interface {
	pulumi.Input

	ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput
	ToNonComplianceMessageArrayOutputWithContext(context.Context) NonComplianceMessageArrayOutput
}

type NonComplianceMessageArray []NonComplianceMessageInput

func (NonComplianceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessage)(nil)).Elem()
}

func (i NonComplianceMessageArray) ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput {
	return i.ToNonComplianceMessageArrayOutputWithContext(context.Background())
}

func (i NonComplianceMessageArray) ToNonComplianceMessageArrayOutputWithContext(ctx context.Context) NonComplianceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonComplianceMessageArrayOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessage)(nil)).Elem()
}

func (o NonComplianceMessageOutput) ToNonComplianceMessageOutput() NonComplianceMessageOutput {
	return o
}

func (o NonComplianceMessageOutput) ToNonComplianceMessageOutputWithContext(ctx context.Context) NonComplianceMessageOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessage) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessage) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessage)(nil)).Elem()
}

func (o NonComplianceMessageArrayOutput) ToNonComplianceMessageArrayOutput() NonComplianceMessageArrayOutput {
	return o
}

func (o NonComplianceMessageArrayOutput) ToNonComplianceMessageArrayOutputWithContext(ctx context.Context) NonComplianceMessageArrayOutput {
	return o
}

func (o NonComplianceMessageArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessage {
		return vs[0].([]NonComplianceMessage)[vs[1].(int)]
	}).(NonComplianceMessageOutput)
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponse struct {
	// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
	Message string `pulumi:"message"`
	// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
type NonComplianceMessageResponseOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonComplianceMessageResponse)(nil)).Elem()
}

func (o NonComplianceMessageResponseOutput) ToNonComplianceMessageResponseOutput() NonComplianceMessageResponseOutput {
	return o
}

func (o NonComplianceMessageResponseOutput) ToNonComplianceMessageResponseOutputWithContext(ctx context.Context) NonComplianceMessageResponseOutput {
	return o
}

// A message that describes why a resource is non-compliant with the policy. This is shown in 'deny' error messages and on resource's non-compliant compliance results.
func (o NonComplianceMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v NonComplianceMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
func (o NonComplianceMessageResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonComplianceMessageResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type NonComplianceMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (NonComplianceMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NonComplianceMessageResponse)(nil)).Elem()
}

func (o NonComplianceMessageResponseArrayOutput) ToNonComplianceMessageResponseArrayOutput() NonComplianceMessageResponseArrayOutput {
	return o
}

func (o NonComplianceMessageResponseArrayOutput) ToNonComplianceMessageResponseArrayOutputWithContext(ctx context.Context) NonComplianceMessageResponseArrayOutput {
	return o
}

func (o NonComplianceMessageResponseArrayOutput) Index(i pulumi.IntInput) NonComplianceMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NonComplianceMessageResponse {
		return vs[0].([]NonComplianceMessageResponse)[vs[1].(int)]
	}).(NonComplianceMessageResponseOutput)
}

// The policy property value override.
type Override struct {
	// The override kind.
	Kind *string `pulumi:"kind"`
	// The list of the selector expressions.
	Selectors []Selector `pulumi:"selectors"`
	// The value to override the policy property.
	Value *string `pulumi:"value"`
}

// OverrideInput is an input type that accepts OverrideArgs and OverrideOutput values.
// You can construct a concrete instance of `OverrideInput` via:
//
//	OverrideArgs{...}
type OverrideInput interface {
	pulumi.Input

	ToOverrideOutput() OverrideOutput
	ToOverrideOutputWithContext(context.Context) OverrideOutput
}

// The policy property value override.
type OverrideArgs struct {
	// The override kind.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The list of the selector expressions.
	Selectors SelectorArrayInput `pulumi:"selectors"`
	// The value to override the policy property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (OverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Override)(nil)).Elem()
}

func (i OverrideArgs) ToOverrideOutput() OverrideOutput {
	return i.ToOverrideOutputWithContext(context.Background())
}

func (i OverrideArgs) ToOverrideOutputWithContext(ctx context.Context) OverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideOutput)
}

// OverrideArrayInput is an input type that accepts OverrideArray and OverrideArrayOutput values.
// You can construct a concrete instance of `OverrideArrayInput` via:
//
//	OverrideArray{ OverrideArgs{...} }
type OverrideArrayInput interface {
	pulumi.Input

	ToOverrideArrayOutput() OverrideArrayOutput
	ToOverrideArrayOutputWithContext(context.Context) OverrideArrayOutput
}

type OverrideArray []OverrideInput

func (OverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Override)(nil)).Elem()
}

func (i OverrideArray) ToOverrideArrayOutput() OverrideArrayOutput {
	return i.ToOverrideArrayOutputWithContext(context.Background())
}

func (i OverrideArray) ToOverrideArrayOutputWithContext(ctx context.Context) OverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideArrayOutput)
}

// The policy property value override.
type OverrideOutput struct{ *pulumi.OutputState }

func (OverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Override)(nil)).Elem()
}

func (o OverrideOutput) ToOverrideOutput() OverrideOutput {
	return o
}

func (o OverrideOutput) ToOverrideOutputWithContext(ctx context.Context) OverrideOutput {
	return o
}

// The override kind.
func (o OverrideOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Override) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of the selector expressions.
func (o OverrideOutput) Selectors() SelectorArrayOutput {
	return o.ApplyT(func(v Override) []Selector { return v.Selectors }).(SelectorArrayOutput)
}

// The value to override the policy property.
func (o OverrideOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Override) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type OverrideArrayOutput struct{ *pulumi.OutputState }

func (OverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Override)(nil)).Elem()
}

func (o OverrideArrayOutput) ToOverrideArrayOutput() OverrideArrayOutput {
	return o
}

func (o OverrideArrayOutput) ToOverrideArrayOutputWithContext(ctx context.Context) OverrideArrayOutput {
	return o
}

func (o OverrideArrayOutput) Index(i pulumi.IntInput) OverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Override {
		return vs[0].([]Override)[vs[1].(int)]
	}).(OverrideOutput)
}

// The policy property value override.
type OverrideResponse struct {
	// The override kind.
	Kind *string `pulumi:"kind"`
	// The list of the selector expressions.
	Selectors []SelectorResponse `pulumi:"selectors"`
	// The value to override the policy property.
	Value *string `pulumi:"value"`
}

// The policy property value override.
type OverrideResponseOutput struct{ *pulumi.OutputState }

func (OverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OverrideResponse)(nil)).Elem()
}

func (o OverrideResponseOutput) ToOverrideResponseOutput() OverrideResponseOutput {
	return o
}

func (o OverrideResponseOutput) ToOverrideResponseOutputWithContext(ctx context.Context) OverrideResponseOutput {
	return o
}

// The override kind.
func (o OverrideResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of the selector expressions.
func (o OverrideResponseOutput) Selectors() SelectorResponseArrayOutput {
	return o.ApplyT(func(v OverrideResponse) []SelectorResponse { return v.Selectors }).(SelectorResponseArrayOutput)
}

// The value to override the policy property.
func (o OverrideResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OverrideResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type OverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (OverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OverrideResponse)(nil)).Elem()
}

func (o OverrideResponseArrayOutput) ToOverrideResponseArrayOutput() OverrideResponseArrayOutput {
	return o
}

func (o OverrideResponseArrayOutput) ToOverrideResponseArrayOutputWithContext(ctx context.Context) OverrideResponseArrayOutput {
	return o
}

func (o OverrideResponseArrayOutput) Index(i pulumi.IntInput) OverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OverrideResponse {
		return vs[0].([]OverrideResponse)[vs[1].(int)]
	}).(OverrideResponseOutput)
}

// The PIM Only Mode settings.
type PIMOnlyModeSettings struct {
	// The list of excluded assignment types allowed.
	ExcludedAssignmentTypes []string `pulumi:"excludedAssignmentTypes"`
	// The list of excluded entities that the rule does not apply to.
	Excludes []UsersOrServicePrincipalSet `pulumi:"excludes"`
	// Determines whether the setting is enabled, disabled or report only.
	Mode *string `pulumi:"mode"`
}

// PIMOnlyModeSettingsInput is an input type that accepts PIMOnlyModeSettingsArgs and PIMOnlyModeSettingsOutput values.
// You can construct a concrete instance of `PIMOnlyModeSettingsInput` via:
//
//	PIMOnlyModeSettingsArgs{...}
type PIMOnlyModeSettingsInput interface {
	pulumi.Input

	ToPIMOnlyModeSettingsOutput() PIMOnlyModeSettingsOutput
	ToPIMOnlyModeSettingsOutputWithContext(context.Context) PIMOnlyModeSettingsOutput
}

// The PIM Only Mode settings.
type PIMOnlyModeSettingsArgs struct {
	// The list of excluded assignment types allowed.
	ExcludedAssignmentTypes pulumi.StringArrayInput `pulumi:"excludedAssignmentTypes"`
	// The list of excluded entities that the rule does not apply to.
	Excludes UsersOrServicePrincipalSetArrayInput `pulumi:"excludes"`
	// Determines whether the setting is enabled, disabled or report only.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (PIMOnlyModeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PIMOnlyModeSettings)(nil)).Elem()
}

func (i PIMOnlyModeSettingsArgs) ToPIMOnlyModeSettingsOutput() PIMOnlyModeSettingsOutput {
	return i.ToPIMOnlyModeSettingsOutputWithContext(context.Background())
}

func (i PIMOnlyModeSettingsArgs) ToPIMOnlyModeSettingsOutputWithContext(ctx context.Context) PIMOnlyModeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PIMOnlyModeSettingsOutput)
}

func (i PIMOnlyModeSettingsArgs) ToPIMOnlyModeSettingsPtrOutput() PIMOnlyModeSettingsPtrOutput {
	return i.ToPIMOnlyModeSettingsPtrOutputWithContext(context.Background())
}

func (i PIMOnlyModeSettingsArgs) ToPIMOnlyModeSettingsPtrOutputWithContext(ctx context.Context) PIMOnlyModeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PIMOnlyModeSettingsOutput).ToPIMOnlyModeSettingsPtrOutputWithContext(ctx)
}

// PIMOnlyModeSettingsPtrInput is an input type that accepts PIMOnlyModeSettingsArgs, PIMOnlyModeSettingsPtr and PIMOnlyModeSettingsPtrOutput values.
// You can construct a concrete instance of `PIMOnlyModeSettingsPtrInput` via:
//
//	        PIMOnlyModeSettingsArgs{...}
//
//	or:
//
//	        nil
type PIMOnlyModeSettingsPtrInput interface {
	pulumi.Input

	ToPIMOnlyModeSettingsPtrOutput() PIMOnlyModeSettingsPtrOutput
	ToPIMOnlyModeSettingsPtrOutputWithContext(context.Context) PIMOnlyModeSettingsPtrOutput
}

type pimonlyModeSettingsPtrType PIMOnlyModeSettingsArgs

func PIMOnlyModeSettingsPtr(v *PIMOnlyModeSettingsArgs) PIMOnlyModeSettingsPtrInput {
	return (*pimonlyModeSettingsPtrType)(v)
}

func (*pimonlyModeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PIMOnlyModeSettings)(nil)).Elem()
}

func (i *pimonlyModeSettingsPtrType) ToPIMOnlyModeSettingsPtrOutput() PIMOnlyModeSettingsPtrOutput {
	return i.ToPIMOnlyModeSettingsPtrOutputWithContext(context.Background())
}

func (i *pimonlyModeSettingsPtrType) ToPIMOnlyModeSettingsPtrOutputWithContext(ctx context.Context) PIMOnlyModeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PIMOnlyModeSettingsPtrOutput)
}

// The PIM Only Mode settings.
type PIMOnlyModeSettingsOutput struct{ *pulumi.OutputState }

func (PIMOnlyModeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PIMOnlyModeSettings)(nil)).Elem()
}

func (o PIMOnlyModeSettingsOutput) ToPIMOnlyModeSettingsOutput() PIMOnlyModeSettingsOutput {
	return o
}

func (o PIMOnlyModeSettingsOutput) ToPIMOnlyModeSettingsOutputWithContext(ctx context.Context) PIMOnlyModeSettingsOutput {
	return o
}

func (o PIMOnlyModeSettingsOutput) ToPIMOnlyModeSettingsPtrOutput() PIMOnlyModeSettingsPtrOutput {
	return o.ToPIMOnlyModeSettingsPtrOutputWithContext(context.Background())
}

func (o PIMOnlyModeSettingsOutput) ToPIMOnlyModeSettingsPtrOutputWithContext(ctx context.Context) PIMOnlyModeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PIMOnlyModeSettings) *PIMOnlyModeSettings {
		return &v
	}).(PIMOnlyModeSettingsPtrOutput)
}

// The list of excluded assignment types allowed.
func (o PIMOnlyModeSettingsOutput) ExcludedAssignmentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PIMOnlyModeSettings) []string { return v.ExcludedAssignmentTypes }).(pulumi.StringArrayOutput)
}

// The list of excluded entities that the rule does not apply to.
func (o PIMOnlyModeSettingsOutput) Excludes() UsersOrServicePrincipalSetArrayOutput {
	return o.ApplyT(func(v PIMOnlyModeSettings) []UsersOrServicePrincipalSet { return v.Excludes }).(UsersOrServicePrincipalSetArrayOutput)
}

// Determines whether the setting is enabled, disabled or report only.
func (o PIMOnlyModeSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PIMOnlyModeSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type PIMOnlyModeSettingsPtrOutput struct{ *pulumi.OutputState }

func (PIMOnlyModeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PIMOnlyModeSettings)(nil)).Elem()
}

func (o PIMOnlyModeSettingsPtrOutput) ToPIMOnlyModeSettingsPtrOutput() PIMOnlyModeSettingsPtrOutput {
	return o
}

func (o PIMOnlyModeSettingsPtrOutput) ToPIMOnlyModeSettingsPtrOutputWithContext(ctx context.Context) PIMOnlyModeSettingsPtrOutput {
	return o
}

func (o PIMOnlyModeSettingsPtrOutput) Elem() PIMOnlyModeSettingsOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettings) PIMOnlyModeSettings {
		if v != nil {
			return *v
		}
		var ret PIMOnlyModeSettings
		return ret
	}).(PIMOnlyModeSettingsOutput)
}

// The list of excluded assignment types allowed.
func (o PIMOnlyModeSettingsPtrOutput) ExcludedAssignmentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedAssignmentTypes
	}).(pulumi.StringArrayOutput)
}

// The list of excluded entities that the rule does not apply to.
func (o PIMOnlyModeSettingsPtrOutput) Excludes() UsersOrServicePrincipalSetArrayOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettings) []UsersOrServicePrincipalSet {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(UsersOrServicePrincipalSetArrayOutput)
}

// Determines whether the setting is enabled, disabled or report only.
func (o PIMOnlyModeSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The PIM Only Mode settings.
type PIMOnlyModeSettingsResponse struct {
	// The list of excluded assignment types allowed.
	ExcludedAssignmentTypes []string `pulumi:"excludedAssignmentTypes"`
	// The list of excluded entities that the rule does not apply to.
	Excludes []UsersOrServicePrincipalSetResponse `pulumi:"excludes"`
	// Determines whether the setting is enabled, disabled or report only.
	Mode *string `pulumi:"mode"`
}

// The PIM Only Mode settings.
type PIMOnlyModeSettingsResponseOutput struct{ *pulumi.OutputState }

func (PIMOnlyModeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PIMOnlyModeSettingsResponse)(nil)).Elem()
}

func (o PIMOnlyModeSettingsResponseOutput) ToPIMOnlyModeSettingsResponseOutput() PIMOnlyModeSettingsResponseOutput {
	return o
}

func (o PIMOnlyModeSettingsResponseOutput) ToPIMOnlyModeSettingsResponseOutputWithContext(ctx context.Context) PIMOnlyModeSettingsResponseOutput {
	return o
}

// The list of excluded assignment types allowed.
func (o PIMOnlyModeSettingsResponseOutput) ExcludedAssignmentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PIMOnlyModeSettingsResponse) []string { return v.ExcludedAssignmentTypes }).(pulumi.StringArrayOutput)
}

// The list of excluded entities that the rule does not apply to.
func (o PIMOnlyModeSettingsResponseOutput) Excludes() UsersOrServicePrincipalSetResponseArrayOutput {
	return o.ApplyT(func(v PIMOnlyModeSettingsResponse) []UsersOrServicePrincipalSetResponse { return v.Excludes }).(UsersOrServicePrincipalSetResponseArrayOutput)
}

// Determines whether the setting is enabled, disabled or report only.
func (o PIMOnlyModeSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PIMOnlyModeSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type PIMOnlyModeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PIMOnlyModeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PIMOnlyModeSettingsResponse)(nil)).Elem()
}

func (o PIMOnlyModeSettingsResponsePtrOutput) ToPIMOnlyModeSettingsResponsePtrOutput() PIMOnlyModeSettingsResponsePtrOutput {
	return o
}

func (o PIMOnlyModeSettingsResponsePtrOutput) ToPIMOnlyModeSettingsResponsePtrOutputWithContext(ctx context.Context) PIMOnlyModeSettingsResponsePtrOutput {
	return o
}

func (o PIMOnlyModeSettingsResponsePtrOutput) Elem() PIMOnlyModeSettingsResponseOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettingsResponse) PIMOnlyModeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret PIMOnlyModeSettingsResponse
		return ret
	}).(PIMOnlyModeSettingsResponseOutput)
}

// The list of excluded assignment types allowed.
func (o PIMOnlyModeSettingsResponsePtrOutput) ExcludedAssignmentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedAssignmentTypes
	}).(pulumi.StringArrayOutput)
}

// The list of excluded entities that the rule does not apply to.
func (o PIMOnlyModeSettingsResponsePtrOutput) Excludes() UsersOrServicePrincipalSetResponseArrayOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettingsResponse) []UsersOrServicePrincipalSetResponse {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(UsersOrServicePrincipalSetResponseArrayOutput)
}

// Determines whether the setting is enabled, disabled or report only.
func (o PIMOnlyModeSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PIMOnlyModeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValue struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueMetadata `pulumi:"metadata"`
	// Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported for object-type parameters and follows the Json.NET Schema 2019-09 implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/.
	Schema interface{} `pulumi:"schema"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// ParameterDefinitionsValueInput is an input type that accepts ParameterDefinitionsValueArgs and ParameterDefinitionsValueOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueInput` via:
//
//	ParameterDefinitionsValueArgs{...}
type ParameterDefinitionsValueInput interface {
	pulumi.Input

	ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput
	ToParameterDefinitionsValueOutputWithContext(context.Context) ParameterDefinitionsValueOutput
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueArgs struct {
	// The allowed values for the parameter.
	AllowedValues pulumi.ArrayInput `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue pulumi.Input `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata ParameterDefinitionsValueMetadataPtrInput `pulumi:"metadata"`
	// Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported for object-type parameters and follows the Json.NET Schema 2019-09 implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/.
	Schema pulumi.Input `pulumi:"schema"`
	// The data type of the parameter.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ParameterDefinitionsValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValue)(nil)).Elem()
}

func (i ParameterDefinitionsValueArgs) ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput {
	return i.ToParameterDefinitionsValueOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueArgs) ToParameterDefinitionsValueOutputWithContext(ctx context.Context) ParameterDefinitionsValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueOutput)
}

// ParameterDefinitionsValueMapInput is an input type that accepts ParameterDefinitionsValueMap and ParameterDefinitionsValueMapOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMapInput` via:
//
//	ParameterDefinitionsValueMap{ "key": ParameterDefinitionsValueArgs{...} }
type ParameterDefinitionsValueMapInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput
	ToParameterDefinitionsValueMapOutputWithContext(context.Context) ParameterDefinitionsValueMapOutput
}

type ParameterDefinitionsValueMap map[string]ParameterDefinitionsValueInput

func (ParameterDefinitionsValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValue)(nil)).Elem()
}

func (i ParameterDefinitionsValueMap) ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput {
	return i.ToParameterDefinitionsValueMapOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMap) ToParameterDefinitionsValueMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMapOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValue)(nil)).Elem()
}

func (o ParameterDefinitionsValueOutput) ToParameterDefinitionsValueOutput() ParameterDefinitionsValueOutput {
	return o
}

func (o ParameterDefinitionsValueOutput) ToParameterDefinitionsValueOutputWithContext(ctx context.Context) ParameterDefinitionsValueOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueOutput) Metadata() ParameterDefinitionsValueMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) *ParameterDefinitionsValueMetadata { return v.Metadata }).(ParameterDefinitionsValueMetadataPtrOutput)
}

// Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported for object-type parameters and follows the Json.NET Schema 2019-09 implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/.
func (o ParameterDefinitionsValueOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValue) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValue)(nil)).Elem()
}

func (o ParameterDefinitionsValueMapOutput) ToParameterDefinitionsValueMapOutput() ParameterDefinitionsValueMapOutput {
	return o
}

func (o ParameterDefinitionsValueMapOutput) ToParameterDefinitionsValueMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueMapOutput {
	return o
}

func (o ParameterDefinitionsValueMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValue {
		return vs[0].(map[string]ParameterDefinitionsValue)[vs[1].(string)]
	}).(ParameterDefinitionsValueOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// ParameterDefinitionsValueMetadataInput is an input type that accepts ParameterDefinitionsValueMetadataArgs and ParameterDefinitionsValueMetadataOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMetadataInput` via:
//
//	ParameterDefinitionsValueMetadataArgs{...}
type ParameterDefinitionsValueMetadataInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput
	ToParameterDefinitionsValueMetadataOutputWithContext(context.Context) ParameterDefinitionsValueMetadataOutput
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadataArgs struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions pulumi.BoolPtrInput `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The display name for the parameter.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType pulumi.StringPtrInput `pulumi:"strongType"`
}

func (ParameterDefinitionsValueMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput {
	return i.ToParameterDefinitionsValueMetadataOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataOutput)
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return i.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (i ParameterDefinitionsValueMetadataArgs) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataOutput).ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx)
}

// ParameterDefinitionsValueMetadataPtrInput is an input type that accepts ParameterDefinitionsValueMetadataArgs, ParameterDefinitionsValueMetadataPtr and ParameterDefinitionsValueMetadataPtrOutput values.
// You can construct a concrete instance of `ParameterDefinitionsValueMetadataPtrInput` via:
//
//	        ParameterDefinitionsValueMetadataArgs{...}
//
//	or:
//
//	        nil
type ParameterDefinitionsValueMetadataPtrInput interface {
	pulumi.Input

	ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput
	ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Context) ParameterDefinitionsValueMetadataPtrOutput
}

type parameterDefinitionsValueMetadataPtrType ParameterDefinitionsValueMetadataArgs

func ParameterDefinitionsValueMetadataPtr(v *ParameterDefinitionsValueMetadataArgs) ParameterDefinitionsValueMetadataPtrInput {
	return (*parameterDefinitionsValueMetadataPtrType)(v)
}

func (*parameterDefinitionsValueMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (i *parameterDefinitionsValueMetadataPtrType) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return i.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (i *parameterDefinitionsValueMetadataPtrType) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterDefinitionsValueMetadataPtrOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataOutput() ParameterDefinitionsValueMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return o.ToParameterDefinitionsValueMetadataPtrOutputWithContext(context.Background())
}

func (o ParameterDefinitionsValueMetadataOutput) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParameterDefinitionsValueMetadata) *ParameterDefinitionsValueMetadata {
		return &v
	}).(ParameterDefinitionsValueMetadataPtrOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueMetadataPtrOutput) ToParameterDefinitionsValueMetadataPtrOutput() ParameterDefinitionsValueMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataPtrOutput) ToParameterDefinitionsValueMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueMetadataPtrOutput) Elem() ParameterDefinitionsValueMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) ParameterDefinitionsValueMetadata {
		if v != nil {
			return *v
		}
		var ret ParameterDefinitionsValueMetadata
		return ret
	}).(ParameterDefinitionsValueMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponse struct {
	// The allowed values for the parameter.
	AllowedValues []interface{} `pulumi:"allowedValues"`
	// The default value for the parameter if no value is provided.
	DefaultValue interface{} `pulumi:"defaultValue"`
	// General metadata for the parameter.
	Metadata *ParameterDefinitionsValueResponseMetadata `pulumi:"metadata"`
	// Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported for object-type parameters and follows the Json.NET Schema 2019-09 implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/.
	Schema interface{} `pulumi:"schema"`
	// The data type of the parameter.
	Type *string `pulumi:"type"`
}

// The definition of a parameter that can be provided to the policy.
type ParameterDefinitionsValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseOutput) ToParameterDefinitionsValueResponseOutput() ParameterDefinitionsValueResponseOutput {
	return o
}

func (o ParameterDefinitionsValueResponseOutput) ToParameterDefinitionsValueResponseOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseOutput {
	return o
}

// The allowed values for the parameter.
func (o ParameterDefinitionsValueResponseOutput) AllowedValues() pulumi.ArrayOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) []interface{} { return v.AllowedValues }).(pulumi.ArrayOutput)
}

// The default value for the parameter if no value is provided.
func (o ParameterDefinitionsValueResponseOutput) DefaultValue() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) interface{} { return v.DefaultValue }).(pulumi.AnyOutput)
}

// General metadata for the parameter.
func (o ParameterDefinitionsValueResponseOutput) Metadata() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) *ParameterDefinitionsValueResponseMetadata {
		return v.Metadata
	}).(ParameterDefinitionsValueResponseMetadataPtrOutput)
}

// Provides validation of parameter inputs during assignment using a self-defined JSON schema. This property is only supported for object-type parameters and follows the Json.NET Schema 2019-09 implementation. You can learn more about using schemas at https://json-schema.org/ and test draft schemas at https://www.jsonschemavalidator.net/.
func (o ParameterDefinitionsValueResponseOutput) Schema() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) interface{} { return v.Schema }).(pulumi.AnyOutput)
}

// The data type of the parameter.
func (o ParameterDefinitionsValueResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterDefinitionsValueResponse)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMapOutput) ToParameterDefinitionsValueResponseMapOutput() ParameterDefinitionsValueResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMapOutput) ToParameterDefinitionsValueResponseMapOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMapOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterDefinitionsValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterDefinitionsValueResponse {
		return vs[0].(map[string]ParameterDefinitionsValueResponse)[vs[1].(string)]
	}).(ParameterDefinitionsValueResponseOutput)
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadata struct {
	// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
	AssignPermissions *bool `pulumi:"assignPermissions"`
	// The description of the parameter.
	Description *string `pulumi:"description"`
	// The display name for the parameter.
	DisplayName *string `pulumi:"displayName"`
	// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
	StrongType *string `pulumi:"strongType"`
}

// General metadata for the parameter.
type ParameterDefinitionsValueResponseMetadataOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataOutput() ParameterDefinitionsValueResponseMetadataOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataOutput) ToParameterDefinitionsValueResponseMetadataOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataOutput {
	return o
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueResponseMetadataOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *bool { return v.AssignPermissions }).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueResponseMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueResponseMetadataOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueResponseMetadataOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterDefinitionsValueResponseMetadata) *string { return v.StrongType }).(pulumi.StringPtrOutput)
}

type ParameterDefinitionsValueResponseMetadataPtrOutput struct{ *pulumi.OutputState }

func (ParameterDefinitionsValueResponseMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParameterDefinitionsValueResponseMetadata)(nil)).Elem()
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) ToParameterDefinitionsValueResponseMetadataPtrOutput() ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) ToParameterDefinitionsValueResponseMetadataPtrOutputWithContext(ctx context.Context) ParameterDefinitionsValueResponseMetadataPtrOutput {
	return o
}

func (o ParameterDefinitionsValueResponseMetadataPtrOutput) Elem() ParameterDefinitionsValueResponseMetadataOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) ParameterDefinitionsValueResponseMetadata {
		if v != nil {
			return *v
		}
		var ret ParameterDefinitionsValueResponseMetadata
		return ret
	}).(ParameterDefinitionsValueResponseMetadataOutput)
}

// Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) AssignPermissions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *bool {
		if v == nil {
			return nil
		}
		return v.AssignPermissions
	}).(pulumi.BoolPtrOutput)
}

// The description of the parameter.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The display name for the parameter.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
func (o ParameterDefinitionsValueResponseMetadataPtrOutput) StrongType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParameterDefinitionsValueResponseMetadata) *string {
		if v == nil {
			return nil
		}
		return v.StrongType
	}).(pulumi.StringPtrOutput)
}

// The value of a parameter.
type ParameterValuesValue struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// ParameterValuesValueInput is an input type that accepts ParameterValuesValueArgs and ParameterValuesValueOutput values.
// You can construct a concrete instance of `ParameterValuesValueInput` via:
//
//	ParameterValuesValueArgs{...}
type ParameterValuesValueInput interface {
	pulumi.Input

	ToParameterValuesValueOutput() ParameterValuesValueOutput
	ToParameterValuesValueOutputWithContext(context.Context) ParameterValuesValueOutput
}

// The value of a parameter.
type ParameterValuesValueArgs struct {
	// The value of the parameter.
	Value pulumi.Input `pulumi:"value"`
}

func (ParameterValuesValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValue)(nil)).Elem()
}

func (i ParameterValuesValueArgs) ToParameterValuesValueOutput() ParameterValuesValueOutput {
	return i.ToParameterValuesValueOutputWithContext(context.Background())
}

func (i ParameterValuesValueArgs) ToParameterValuesValueOutputWithContext(ctx context.Context) ParameterValuesValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueOutput)
}

// ParameterValuesValueMapInput is an input type that accepts ParameterValuesValueMap and ParameterValuesValueMapOutput values.
// You can construct a concrete instance of `ParameterValuesValueMapInput` via:
//
//	ParameterValuesValueMap{ "key": ParameterValuesValueArgs{...} }
type ParameterValuesValueMapInput interface {
	pulumi.Input

	ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput
	ToParameterValuesValueMapOutputWithContext(context.Context) ParameterValuesValueMapOutput
}

type ParameterValuesValueMap map[string]ParameterValuesValueInput

func (ParameterValuesValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValue)(nil)).Elem()
}

func (i ParameterValuesValueMap) ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput {
	return i.ToParameterValuesValueMapOutputWithContext(context.Background())
}

func (i ParameterValuesValueMap) ToParameterValuesValueMapOutputWithContext(ctx context.Context) ParameterValuesValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterValuesValueMapOutput)
}

// The value of a parameter.
type ParameterValuesValueOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValue)(nil)).Elem()
}

func (o ParameterValuesValueOutput) ToParameterValuesValueOutput() ParameterValuesValueOutput {
	return o
}

func (o ParameterValuesValueOutput) ToParameterValuesValueOutputWithContext(ctx context.Context) ParameterValuesValueOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValue) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValue)(nil)).Elem()
}

func (o ParameterValuesValueMapOutput) ToParameterValuesValueMapOutput() ParameterValuesValueMapOutput {
	return o
}

func (o ParameterValuesValueMapOutput) ToParameterValuesValueMapOutputWithContext(ctx context.Context) ParameterValuesValueMapOutput {
	return o
}

func (o ParameterValuesValueMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValue {
		return vs[0].(map[string]ParameterValuesValue)[vs[1].(string)]
	}).(ParameterValuesValueOutput)
}

// The value of a parameter.
type ParameterValuesValueResponse struct {
	// The value of the parameter.
	Value interface{} `pulumi:"value"`
}

// The value of a parameter.
type ParameterValuesValueResponseOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterValuesValueResponse)(nil)).Elem()
}

func (o ParameterValuesValueResponseOutput) ToParameterValuesValueResponseOutput() ParameterValuesValueResponseOutput {
	return o
}

func (o ParameterValuesValueResponseOutput) ToParameterValuesValueResponseOutputWithContext(ctx context.Context) ParameterValuesValueResponseOutput {
	return o
}

// The value of the parameter.
func (o ParameterValuesValueResponseOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v ParameterValuesValueResponse) interface{} { return v.Value }).(pulumi.AnyOutput)
}

type ParameterValuesValueResponseMapOutput struct{ *pulumi.OutputState }

func (ParameterValuesValueResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ParameterValuesValueResponse)(nil)).Elem()
}

func (o ParameterValuesValueResponseMapOutput) ToParameterValuesValueResponseMapOutput() ParameterValuesValueResponseMapOutput {
	return o
}

func (o ParameterValuesValueResponseMapOutput) ToParameterValuesValueResponseMapOutputWithContext(ctx context.Context) ParameterValuesValueResponseMapOutput {
	return o
}

func (o ParameterValuesValueResponseMapOutput) MapIndex(k pulumi.StringInput) ParameterValuesValueResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ParameterValuesValueResponse {
		return vs[0].(map[string]ParameterValuesValueResponse)[vs[1].(string)]
	}).(ParameterValuesValueResponseOutput)
}

// Role definition permissions.
type Permission struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// Allowed Data actions.
	DataActions []string `pulumi:"dataActions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions []string `pulumi:"notDataActions"`
}

// PermissionInput is an input type that accepts PermissionArgs and PermissionOutput values.
// You can construct a concrete instance of `PermissionInput` via:
//
//	PermissionArgs{...}
type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(context.Context) PermissionOutput
}

// Role definition permissions.
type PermissionArgs struct {
	// Allowed actions.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Allowed Data actions.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// Denied actions.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (i PermissionArgs) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i PermissionArgs) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//	PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// Role definition permissions.
type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// Allowed actions.
func (o PermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Allowed Data actions.
func (o PermissionOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Denied Data actions.
func (o PermissionOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Permission) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Permission {
		return vs[0].([]Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

// Role definition permissions.
type PermissionResponse struct {
	// Allowed actions.
	Actions []string `pulumi:"actions"`
	// The conditions on the role definition. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
	Condition string `pulumi:"condition"`
	// Version of the condition. Currently the only accepted value is '2.0'
	ConditionVersion string `pulumi:"conditionVersion"`
	// Allowed Data actions.
	DataActions []string `pulumi:"dataActions"`
	// Denied actions.
	NotActions []string `pulumi:"notActions"`
	// Denied Data actions.
	NotDataActions []string `pulumi:"notDataActions"`
}

// Role definition permissions.
type PermissionResponseOutput struct{ *pulumi.OutputState }

func (PermissionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseOutput) ToPermissionResponseOutput() PermissionResponseOutput {
	return o
}

func (o PermissionResponseOutput) ToPermissionResponseOutputWithContext(ctx context.Context) PermissionResponseOutput {
	return o
}

// Allowed actions.
func (o PermissionResponseOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The conditions on the role definition. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
func (o PermissionResponseOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionResponse) string { return v.Condition }).(pulumi.StringOutput)
}

// Version of the condition. Currently the only accepted value is '2.0'
func (o PermissionResponseOutput) ConditionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionResponse) string { return v.ConditionVersion }).(pulumi.StringOutput)
}

// Allowed Data actions.
func (o PermissionResponseOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// Denied actions.
func (o PermissionResponseOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Denied Data actions.
func (o PermissionResponseOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionResponse) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type PermissionResponseArrayOutput struct{ *pulumi.OutputState }

func (PermissionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionResponse)(nil)).Elem()
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutput() PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) ToPermissionResponseArrayOutputWithContext(ctx context.Context) PermissionResponseArrayOutput {
	return o
}

func (o PermissionResponseArrayOutput) Index(i pulumi.IntInput) PermissionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionResponse {
		return vs[0].([]PermissionResponse)[vs[1].(int)]
	}).(PermissionResponseOutput)
}

// Expanded info of resource scope, role definition and policy
type PolicyAssignmentPropertiesResponse struct {
	// Details of the policy
	Policy *PolicyAssignmentPropertiesResponsePolicy `pulumi:"policy"`
	// Details of role definition
	RoleDefinition *PolicyAssignmentPropertiesResponseRoleDefinition `pulumi:"roleDefinition"`
	// Details of the resource scope
	Scope *PolicyAssignmentPropertiesResponseScope `pulumi:"scope"`
}

// Expanded info of resource scope, role definition and policy
type PolicyAssignmentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponse)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutput() PolicyAssignmentPropertiesResponseOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseOutput) ToPolicyAssignmentPropertiesResponseOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseOutput {
	return o
}

// Details of the policy
func (o PolicyAssignmentPropertiesResponseOutput) Policy() PolicyAssignmentPropertiesResponsePolicyPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponsePolicy { return v.Policy }).(PolicyAssignmentPropertiesResponsePolicyPtrOutput)
}

// Details of role definition
func (o PolicyAssignmentPropertiesResponseOutput) RoleDefinition() PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponseRoleDefinition {
		return v.RoleDefinition
	}).(PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput)
}

// Details of the resource scope
func (o PolicyAssignmentPropertiesResponseOutput) Scope() PolicyAssignmentPropertiesResponseScopePtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponse) *PolicyAssignmentPropertiesResponseScope { return v.Scope }).(PolicyAssignmentPropertiesResponseScopePtrOutput)
}

// Details of the policy
type PolicyAssignmentPropertiesResponsePolicy struct {
	// Id of the policy
	Id *string `pulumi:"id"`
	// The name of the entity last modified it
	LastModifiedBy PrincipalResponse `pulumi:"lastModifiedBy"`
	// The last modified date time.
	LastModifiedDateTime *string `pulumi:"lastModifiedDateTime"`
}

// Details of the policy
type PolicyAssignmentPropertiesResponsePolicyOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponsePolicy)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePolicyOutput) ToPolicyAssignmentPropertiesResponsePolicyOutput() PolicyAssignmentPropertiesResponsePolicyOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePolicyOutput) ToPolicyAssignmentPropertiesResponsePolicyOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePolicyOutput {
	return o
}

// Id of the policy
func (o PolicyAssignmentPropertiesResponsePolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponsePolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the entity last modified it
func (o PolicyAssignmentPropertiesResponsePolicyOutput) LastModifiedBy() PrincipalResponseOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponsePolicy) PrincipalResponse { return v.LastModifiedBy }).(PrincipalResponseOutput)
}

// The last modified date time.
func (o PolicyAssignmentPropertiesResponsePolicyOutput) LastModifiedDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponsePolicy) *string { return v.LastModifiedDateTime }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponsePolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponsePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponsePolicy)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) ToPolicyAssignmentPropertiesResponsePolicyPtrOutput() PolicyAssignmentPropertiesResponsePolicyPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) ToPolicyAssignmentPropertiesResponsePolicyPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponsePolicyPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) Elem() PolicyAssignmentPropertiesResponsePolicyOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) PolicyAssignmentPropertiesResponsePolicy {
		if v != nil {
			return *v
		}
		var ret PolicyAssignmentPropertiesResponsePolicy
		return ret
	}).(PolicyAssignmentPropertiesResponsePolicyOutput)
}

// Id of the policy
func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the entity last modified it
func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) LastModifiedBy() PrincipalResponsePtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) *PrincipalResponse {
		if v == nil {
			return nil
		}
		return &v.LastModifiedBy
	}).(PrincipalResponsePtrOutput)
}

// The last modified date time.
func (o PolicyAssignmentPropertiesResponsePolicyPtrOutput) LastModifiedDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponsePolicy) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedDateTime
	}).(pulumi.StringPtrOutput)
}

// Details of role definition
type PolicyAssignmentPropertiesResponseRoleDefinition struct {
	// Display name of the role definition
	DisplayName *string `pulumi:"displayName"`
	// Id of the role definition
	Id *string `pulumi:"id"`
	// Type of the role definition
	Type *string `pulumi:"type"`
}

// Details of role definition
type PolicyAssignmentPropertiesResponseRoleDefinitionOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseRoleDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionOutput() PolicyAssignmentPropertiesResponseRoleDefinitionOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseRoleDefinitionOutput {
	return o
}

// Display name of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseRoleDefinition) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseRoleDefinition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseRoleDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponseRoleDefinition)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput() PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) ToPolicyAssignmentPropertiesResponseRoleDefinitionPtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) Elem() PolicyAssignmentPropertiesResponseRoleDefinitionOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) PolicyAssignmentPropertiesResponseRoleDefinition {
		if v != nil {
			return *v
		}
		var ret PolicyAssignmentPropertiesResponseRoleDefinition
		return ret
	}).(PolicyAssignmentPropertiesResponseRoleDefinitionOutput)
}

// Display name of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Id of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the role definition
func (o PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseRoleDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details of the resource scope
type PolicyAssignmentPropertiesResponseScope struct {
	// Display name of the resource
	DisplayName *string `pulumi:"displayName"`
	// Scope id of the resource
	Id *string `pulumi:"id"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// Details of the resource scope
type PolicyAssignmentPropertiesResponseScopeOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAssignmentPropertiesResponseScope)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseScopeOutput) ToPolicyAssignmentPropertiesResponseScopeOutput() PolicyAssignmentPropertiesResponseScopeOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseScopeOutput) ToPolicyAssignmentPropertiesResponseScopeOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseScopeOutput {
	return o
}

// Display name of the resource
func (o PolicyAssignmentPropertiesResponseScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseScope) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o PolicyAssignmentPropertiesResponseScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o PolicyAssignmentPropertiesResponseScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyAssignmentPropertiesResponseScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PolicyAssignmentPropertiesResponseScopePtrOutput struct{ *pulumi.OutputState }

func (PolicyAssignmentPropertiesResponseScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAssignmentPropertiesResponseScope)(nil)).Elem()
}

func (o PolicyAssignmentPropertiesResponseScopePtrOutput) ToPolicyAssignmentPropertiesResponseScopePtrOutput() PolicyAssignmentPropertiesResponseScopePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseScopePtrOutput) ToPolicyAssignmentPropertiesResponseScopePtrOutputWithContext(ctx context.Context) PolicyAssignmentPropertiesResponseScopePtrOutput {
	return o
}

func (o PolicyAssignmentPropertiesResponseScopePtrOutput) Elem() PolicyAssignmentPropertiesResponseScopeOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) PolicyAssignmentPropertiesResponseScope {
		if v != nil {
			return *v
		}
		var ret PolicyAssignmentPropertiesResponseScope
		return ret
	}).(PolicyAssignmentPropertiesResponseScopeOutput)
}

// Display name of the resource
func (o PolicyAssignmentPropertiesResponseScopePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o PolicyAssignmentPropertiesResponseScopePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o PolicyAssignmentPropertiesResponseScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyAssignmentPropertiesResponseScope) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The policy definition group.
type PolicyDefinitionGroup struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// PolicyDefinitionGroupInput is an input type that accepts PolicyDefinitionGroupArgs and PolicyDefinitionGroupOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupInput` via:
//
//	PolicyDefinitionGroupArgs{...}
type PolicyDefinitionGroupInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput
	ToPolicyDefinitionGroupOutputWithContext(context.Context) PolicyDefinitionGroupOutput
}

// The policy definition group.
type PolicyDefinitionGroupArgs struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId pulumi.StringPtrInput `pulumi:"additionalMetadataId"`
	// The group's category.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The group's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The group's display name.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyDefinitionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return i.ToPolicyDefinitionGroupOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArgs) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupOutput)
}

// PolicyDefinitionGroupArrayInput is an input type that accepts PolicyDefinitionGroupArray and PolicyDefinitionGroupArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionGroupArrayInput` via:
//
//	PolicyDefinitionGroupArray{ PolicyDefinitionGroupArgs{...} }
type PolicyDefinitionGroupArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput
	ToPolicyDefinitionGroupArrayOutputWithContext(context.Context) PolicyDefinitionGroupArrayOutput
}

type PolicyDefinitionGroupArray []PolicyDefinitionGroupInput

func (PolicyDefinitionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return i.ToPolicyDefinitionGroupArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionGroupArray) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionGroupArrayOutput)
}

// The policy definition group.
type PolicyDefinitionGroupOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutput() PolicyDefinitionGroupOutput {
	return o
}

func (o PolicyDefinitionGroupOutput) ToPolicyDefinitionGroupOutputWithContext(ctx context.Context) PolicyDefinitionGroupOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroup) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroup)(nil)).Elem()
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutput() PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) ToPolicyDefinitionGroupArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupArrayOutput {
	return o
}

func (o PolicyDefinitionGroupArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroup {
		return vs[0].([]PolicyDefinitionGroup)[vs[1].(int)]
	}).(PolicyDefinitionGroupOutput)
}

// The policy definition group.
type PolicyDefinitionGroupResponse struct {
	// A resource ID of a resource that contains additional metadata about the group.
	AdditionalMetadataId *string `pulumi:"additionalMetadataId"`
	// The group's category.
	Category *string `pulumi:"category"`
	// The group's description.
	Description *string `pulumi:"description"`
	// The group's display name.
	DisplayName *string `pulumi:"displayName"`
	// The name of the group.
	Name string `pulumi:"name"`
}

// The policy definition group.
type PolicyDefinitionGroupResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutput() PolicyDefinitionGroupResponseOutput {
	return o
}

func (o PolicyDefinitionGroupResponseOutput) ToPolicyDefinitionGroupResponseOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseOutput {
	return o
}

// A resource ID of a resource that contains additional metadata about the group.
func (o PolicyDefinitionGroupResponseOutput) AdditionalMetadataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.AdditionalMetadataId }).(pulumi.StringPtrOutput)
}

// The group's category.
func (o PolicyDefinitionGroupResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The group's description.
func (o PolicyDefinitionGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The group's display name.
func (o PolicyDefinitionGroupResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the group.
func (o PolicyDefinitionGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyDefinitionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionGroupResponse)(nil)).Elem()
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutput() PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) ToPolicyDefinitionGroupResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionGroupResponseArrayOutput {
	return o
}

func (o PolicyDefinitionGroupResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionGroupResponse {
		return vs[0].([]PolicyDefinitionGroupResponse)[vs[1].(int)]
	}).(PolicyDefinitionGroupResponseOutput)
}

// The policy definition reference.
type PolicyDefinitionReference struct {
	// The version of the policy definition to use.
	DefinitionVersion *string `pulumi:"definitionVersion"`
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValue `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// PolicyDefinitionReferenceInput is an input type that accepts PolicyDefinitionReferenceArgs and PolicyDefinitionReferenceOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceInput` via:
//
//	PolicyDefinitionReferenceArgs{...}
type PolicyDefinitionReferenceInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput
	ToPolicyDefinitionReferenceOutputWithContext(context.Context) PolicyDefinitionReferenceOutput
}

// The policy definition reference.
type PolicyDefinitionReferenceArgs struct {
	// The version of the policy definition to use.
	DefinitionVersion pulumi.StringPtrInput `pulumi:"definitionVersion"`
	// The name of the groups that this policy definition reference belongs to.
	GroupNames pulumi.StringArrayInput `pulumi:"groupNames"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters ParameterValuesValueMapInput `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId pulumi.StringInput `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (PolicyDefinitionReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return i.ToPolicyDefinitionReferenceOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArgs) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceOutput)
}

// PolicyDefinitionReferenceArrayInput is an input type that accepts PolicyDefinitionReferenceArray and PolicyDefinitionReferenceArrayOutput values.
// You can construct a concrete instance of `PolicyDefinitionReferenceArrayInput` via:
//
//	PolicyDefinitionReferenceArray{ PolicyDefinitionReferenceArgs{...} }
type PolicyDefinitionReferenceArrayInput interface {
	pulumi.Input

	ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput
	ToPolicyDefinitionReferenceArrayOutputWithContext(context.Context) PolicyDefinitionReferenceArrayOutput
}

type PolicyDefinitionReferenceArray []PolicyDefinitionReferenceInput

func (PolicyDefinitionReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return i.ToPolicyDefinitionReferenceArrayOutputWithContext(context.Background())
}

func (i PolicyDefinitionReferenceArray) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDefinitionReferenceArrayOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutput() PolicyDefinitionReferenceOutput {
	return o
}

func (o PolicyDefinitionReferenceOutput) ToPolicyDefinitionReferenceOutputWithContext(ctx context.Context) PolicyDefinitionReferenceOutput {
	return o
}

// The version of the policy definition to use.
func (o PolicyDefinitionReferenceOutput) DefinitionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.DefinitionVersion }).(pulumi.StringPtrOutput)
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceOutput) Parameters() ParameterValuesValueMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) map[string]ParameterValuesValue { return v.Parameters }).(ParameterValuesValueMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReference) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReference)(nil)).Elem()
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutput() PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) ToPolicyDefinitionReferenceArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReference {
		return vs[0].([]PolicyDefinitionReference)[vs[1].(int)]
	}).(PolicyDefinitionReferenceOutput)
}

// The policy definition reference.
type PolicyDefinitionReferenceResponse struct {
	// The version of the policy definition to use.
	DefinitionVersion *string `pulumi:"definitionVersion"`
	// The effective version of the policy definition in use. This is only present if requested via the $expand query parameter.
	EffectiveDefinitionVersion string `pulumi:"effectiveDefinitionVersion"`
	// The name of the groups that this policy definition reference belongs to.
	GroupNames []string `pulumi:"groupNames"`
	// The latest version of the policy definition available. This is only present if requested via the $expand query parameter.
	LatestDefinitionVersion string `pulumi:"latestDefinitionVersion"`
	// The parameter values for the referenced policy rule. The keys are the parameter names.
	Parameters map[string]ParameterValuesValueResponse `pulumi:"parameters"`
	// The ID of the policy definition or policy set definition.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
	// A unique id (within the policy set definition) for this policy definition reference.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// The policy definition reference.
type PolicyDefinitionReferenceResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutput() PolicyDefinitionReferenceResponseOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseOutput) ToPolicyDefinitionReferenceResponseOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseOutput {
	return o
}

// The version of the policy definition to use.
func (o PolicyDefinitionReferenceResponseOutput) DefinitionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.DefinitionVersion }).(pulumi.StringPtrOutput)
}

// The effective version of the policy definition in use. This is only present if requested via the $expand query parameter.
func (o PolicyDefinitionReferenceResponseOutput) EffectiveDefinitionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.EffectiveDefinitionVersion }).(pulumi.StringOutput)
}

// The name of the groups that this policy definition reference belongs to.
func (o PolicyDefinitionReferenceResponseOutput) GroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) []string { return v.GroupNames }).(pulumi.StringArrayOutput)
}

// The latest version of the policy definition available. This is only present if requested via the $expand query parameter.
func (o PolicyDefinitionReferenceResponseOutput) LatestDefinitionVersion() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.LatestDefinitionVersion }).(pulumi.StringOutput)
}

// The parameter values for the referenced policy rule. The keys are the parameter names.
func (o PolicyDefinitionReferenceResponseOutput) Parameters() ParameterValuesValueResponseMapOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) map[string]ParameterValuesValueResponse { return v.Parameters }).(ParameterValuesValueResponseMapOutput)
}

// The ID of the policy definition or policy set definition.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) string { return v.PolicyDefinitionId }).(pulumi.StringOutput)
}

// A unique id (within the policy set definition) for this policy definition reference.
func (o PolicyDefinitionReferenceResponseOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionReferenceResponse) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionReferenceResponse)(nil)).Elem()
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutput() PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) ToPolicyDefinitionReferenceResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionReferenceResponseArrayOutput {
	return o
}

func (o PolicyDefinitionReferenceResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionReferenceResponse {
		return vs[0].([]PolicyDefinitionReferenceResponse)[vs[1].(int)]
	}).(PolicyDefinitionReferenceResponseOutput)
}

// The ID of the policy definition version.
type PolicyDefinitionVersionResponse struct {
	// The policy definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy definition.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the policy definition version.
	Id string `pulumi:"id"`
	// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `pulumi:"metadata"`
	// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
	Mode *string `pulumi:"mode"`
	// The name of the policy definition version.
	Name string `pulumi:"name"`
	// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
	Parameters map[string]ParameterDefinitionsValueResponse `pulumi:"parameters"`
	// The policy rule.
	PolicyRule interface{} `pulumi:"policyRule"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource (Microsoft.Authorization/policyDefinitions/versions).
	Type string `pulumi:"type"`
	// The policy definition version in #.#.# format.
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for PolicyDefinitionVersionResponse
func (val *PolicyDefinitionVersionResponse) Defaults() *PolicyDefinitionVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "Indexed"
		tmp.Mode = &mode_
	}
	return &tmp
}

// The ID of the policy definition version.
type PolicyDefinitionVersionResponseOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyDefinitionVersionResponse)(nil)).Elem()
}

func (o PolicyDefinitionVersionResponseOutput) ToPolicyDefinitionVersionResponseOutput() PolicyDefinitionVersionResponseOutput {
	return o
}

func (o PolicyDefinitionVersionResponseOutput) ToPolicyDefinitionVersionResponseOutputWithContext(ctx context.Context) PolicyDefinitionVersionResponseOutput {
	return o
}

// The policy definition description.
func (o PolicyDefinitionVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy definition.
func (o PolicyDefinitionVersionResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ID of the policy definition version.
func (o PolicyDefinitionVersionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicyDefinitionVersionResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
func (o PolicyDefinitionVersionResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the policy definition version.
func (o PolicyDefinitionVersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameter definitions for parameters used in the policy rule. The keys are the parameter names.
func (o PolicyDefinitionVersionResponseOutput) Parameters() ParameterDefinitionsValueResponseMapOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) map[string]ParameterDefinitionsValueResponse {
		return v.Parameters
	}).(ParameterDefinitionsValueResponseMapOutput)
}

// The policy rule.
func (o PolicyDefinitionVersionResponseOutput) PolicyRule() pulumi.AnyOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) interface{} { return v.PolicyRule }).(pulumi.AnyOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicyDefinitionVersionResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// The system metadata relating to this resource.
func (o PolicyDefinitionVersionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policyDefinitions/versions).
func (o PolicyDefinitionVersionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The policy definition version in #.#.# format.
func (o PolicyDefinitionVersionResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyDefinitionVersionResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PolicyDefinitionVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyDefinitionVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyDefinitionVersionResponse)(nil)).Elem()
}

func (o PolicyDefinitionVersionResponseArrayOutput) ToPolicyDefinitionVersionResponseArrayOutput() PolicyDefinitionVersionResponseArrayOutput {
	return o
}

func (o PolicyDefinitionVersionResponseArrayOutput) ToPolicyDefinitionVersionResponseArrayOutputWithContext(ctx context.Context) PolicyDefinitionVersionResponseArrayOutput {
	return o
}

func (o PolicyDefinitionVersionResponseArrayOutput) Index(i pulumi.IntInput) PolicyDefinitionVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyDefinitionVersionResponse {
		return vs[0].([]PolicyDefinitionVersionResponse)[vs[1].(int)]
	}).(PolicyDefinitionVersionResponseOutput)
}

// Expanded info of resource scope
type PolicyPropertiesResponse struct {
	// Details of the resource scope
	Scope PolicyPropertiesResponseScope `pulumi:"scope"`
}

// Expanded info of resource scope
type PolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPropertiesResponse)(nil)).Elem()
}

func (o PolicyPropertiesResponseOutput) ToPolicyPropertiesResponseOutput() PolicyPropertiesResponseOutput {
	return o
}

func (o PolicyPropertiesResponseOutput) ToPolicyPropertiesResponseOutputWithContext(ctx context.Context) PolicyPropertiesResponseOutput {
	return o
}

// Details of the resource scope
func (o PolicyPropertiesResponseOutput) Scope() PolicyPropertiesResponseScopeOutput {
	return o.ApplyT(func(v PolicyPropertiesResponse) PolicyPropertiesResponseScope { return v.Scope }).(PolicyPropertiesResponseScopeOutput)
}

// Details of the resource scope
type PolicyPropertiesResponseScope struct {
	// Display name of the resource
	DisplayName *string `pulumi:"displayName"`
	// Scope id of the resource
	Id *string `pulumi:"id"`
	// Type of the resource
	Type *string `pulumi:"type"`
}

// Details of the resource scope
type PolicyPropertiesResponseScopeOutput struct{ *pulumi.OutputState }

func (PolicyPropertiesResponseScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPropertiesResponseScope)(nil)).Elem()
}

func (o PolicyPropertiesResponseScopeOutput) ToPolicyPropertiesResponseScopeOutput() PolicyPropertiesResponseScopeOutput {
	return o
}

func (o PolicyPropertiesResponseScopeOutput) ToPolicyPropertiesResponseScopeOutputWithContext(ctx context.Context) PolicyPropertiesResponseScopeOutput {
	return o
}

// Display name of the resource
func (o PolicyPropertiesResponseScopeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyPropertiesResponseScope) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Scope id of the resource
func (o PolicyPropertiesResponseScopeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyPropertiesResponseScope) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the resource
func (o PolicyPropertiesResponseScopeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyPropertiesResponseScope) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The policy set definition version.
type PolicySetDefinitionVersionResponse struct {
	// The policy set definition description.
	Description *string `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the policy set definition version.
	Id string `pulumi:"id"`
	// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
	Metadata interface{} `pulumi:"metadata"`
	// The name of the policy set definition version.
	Name string `pulumi:"name"`
	// The policy set definition parameters that can be used in policy definition references.
	Parameters map[string]ParameterDefinitionsValueResponse `pulumi:"parameters"`
	// The metadata describing groups of policy definition references within the policy set definition.
	PolicyDefinitionGroups []PolicyDefinitionGroupResponse `pulumi:"policyDefinitionGroups"`
	// An array of policy definition references.
	PolicyDefinitions []PolicyDefinitionReferenceResponse `pulumi:"policyDefinitions"`
	// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
	PolicyType *string `pulumi:"policyType"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource (Microsoft.Authorization/policySetDefinitions/versions).
	Type string `pulumi:"type"`
	// The policy set definition version in #.#.# format.
	Version *string `pulumi:"version"`
}

// The policy set definition version.
type PolicySetDefinitionVersionResponseOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicySetDefinitionVersionResponse)(nil)).Elem()
}

func (o PolicySetDefinitionVersionResponseOutput) ToPolicySetDefinitionVersionResponseOutput() PolicySetDefinitionVersionResponseOutput {
	return o
}

func (o PolicySetDefinitionVersionResponseOutput) ToPolicySetDefinitionVersionResponseOutputWithContext(ctx context.Context) PolicySetDefinitionVersionResponseOutput {
	return o
}

// The policy set definition description.
func (o PolicySetDefinitionVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the policy set definition.
func (o PolicySetDefinitionVersionResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ID of the policy set definition version.
func (o PolicySetDefinitionVersionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
func (o PolicySetDefinitionVersionResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// The name of the policy set definition version.
func (o PolicySetDefinitionVersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The policy set definition parameters that can be used in policy definition references.
func (o PolicySetDefinitionVersionResponseOutput) Parameters() ParameterDefinitionsValueResponseMapOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) map[string]ParameterDefinitionsValueResponse {
		return v.Parameters
	}).(ParameterDefinitionsValueResponseMapOutput)
}

// The metadata describing groups of policy definition references within the policy set definition.
func (o PolicySetDefinitionVersionResponseOutput) PolicyDefinitionGroups() PolicyDefinitionGroupResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) []PolicyDefinitionGroupResponse {
		return v.PolicyDefinitionGroups
	}).(PolicyDefinitionGroupResponseArrayOutput)
}

// An array of policy definition references.
func (o PolicySetDefinitionVersionResponseOutput) PolicyDefinitions() PolicyDefinitionReferenceResponseArrayOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) []PolicyDefinitionReferenceResponse {
		return v.PolicyDefinitions
	}).(PolicyDefinitionReferenceResponseArrayOutput)
}

// The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
func (o PolicySetDefinitionVersionResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// The system metadata relating to this resource.
func (o PolicySetDefinitionVersionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource (Microsoft.Authorization/policySetDefinitions/versions).
func (o PolicySetDefinitionVersionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The policy set definition version in #.#.# format.
func (o PolicySetDefinitionVersionResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicySetDefinitionVersionResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PolicySetDefinitionVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicySetDefinitionVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicySetDefinitionVersionResponse)(nil)).Elem()
}

func (o PolicySetDefinitionVersionResponseArrayOutput) ToPolicySetDefinitionVersionResponseArrayOutput() PolicySetDefinitionVersionResponseArrayOutput {
	return o
}

func (o PolicySetDefinitionVersionResponseArrayOutput) ToPolicySetDefinitionVersionResponseArrayOutputWithContext(ctx context.Context) PolicySetDefinitionVersionResponseArrayOutput {
	return o
}

func (o PolicySetDefinitionVersionResponseArrayOutput) Index(i pulumi.IntInput) PolicySetDefinitionVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicySetDefinitionVersionResponse {
		return vs[0].([]PolicySetDefinitionVersionResponse)[vs[1].(int)]
	}).(PolicySetDefinitionVersionResponseOutput)
}

// The variable column.
type PolicyVariableColumn struct {
	// The name of this policy variable column.
	ColumnName string `pulumi:"columnName"`
}

// PolicyVariableColumnInput is an input type that accepts PolicyVariableColumnArgs and PolicyVariableColumnOutput values.
// You can construct a concrete instance of `PolicyVariableColumnInput` via:
//
//	PolicyVariableColumnArgs{...}
type PolicyVariableColumnInput interface {
	pulumi.Input

	ToPolicyVariableColumnOutput() PolicyVariableColumnOutput
	ToPolicyVariableColumnOutputWithContext(context.Context) PolicyVariableColumnOutput
}

// The variable column.
type PolicyVariableColumnArgs struct {
	// The name of this policy variable column.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
}

func (PolicyVariableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVariableColumn)(nil)).Elem()
}

func (i PolicyVariableColumnArgs) ToPolicyVariableColumnOutput() PolicyVariableColumnOutput {
	return i.ToPolicyVariableColumnOutputWithContext(context.Background())
}

func (i PolicyVariableColumnArgs) ToPolicyVariableColumnOutputWithContext(ctx context.Context) PolicyVariableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVariableColumnOutput)
}

// PolicyVariableColumnArrayInput is an input type that accepts PolicyVariableColumnArray and PolicyVariableColumnArrayOutput values.
// You can construct a concrete instance of `PolicyVariableColumnArrayInput` via:
//
//	PolicyVariableColumnArray{ PolicyVariableColumnArgs{...} }
type PolicyVariableColumnArrayInput interface {
	pulumi.Input

	ToPolicyVariableColumnArrayOutput() PolicyVariableColumnArrayOutput
	ToPolicyVariableColumnArrayOutputWithContext(context.Context) PolicyVariableColumnArrayOutput
}

type PolicyVariableColumnArray []PolicyVariableColumnInput

func (PolicyVariableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVariableColumn)(nil)).Elem()
}

func (i PolicyVariableColumnArray) ToPolicyVariableColumnArrayOutput() PolicyVariableColumnArrayOutput {
	return i.ToPolicyVariableColumnArrayOutputWithContext(context.Background())
}

func (i PolicyVariableColumnArray) ToPolicyVariableColumnArrayOutputWithContext(ctx context.Context) PolicyVariableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVariableColumnArrayOutput)
}

// The variable column.
type PolicyVariableColumnOutput struct{ *pulumi.OutputState }

func (PolicyVariableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVariableColumn)(nil)).Elem()
}

func (o PolicyVariableColumnOutput) ToPolicyVariableColumnOutput() PolicyVariableColumnOutput {
	return o
}

func (o PolicyVariableColumnOutput) ToPolicyVariableColumnOutputWithContext(ctx context.Context) PolicyVariableColumnOutput {
	return o
}

// The name of this policy variable column.
func (o PolicyVariableColumnOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVariableColumn) string { return v.ColumnName }).(pulumi.StringOutput)
}

type PolicyVariableColumnArrayOutput struct{ *pulumi.OutputState }

func (PolicyVariableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVariableColumn)(nil)).Elem()
}

func (o PolicyVariableColumnArrayOutput) ToPolicyVariableColumnArrayOutput() PolicyVariableColumnArrayOutput {
	return o
}

func (o PolicyVariableColumnArrayOutput) ToPolicyVariableColumnArrayOutputWithContext(ctx context.Context) PolicyVariableColumnArrayOutput {
	return o
}

func (o PolicyVariableColumnArrayOutput) Index(i pulumi.IntInput) PolicyVariableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyVariableColumn {
		return vs[0].([]PolicyVariableColumn)[vs[1].(int)]
	}).(PolicyVariableColumnOutput)
}

// The variable column.
type PolicyVariableColumnResponse struct {
	// The name of this policy variable column.
	ColumnName string `pulumi:"columnName"`
}

// The variable column.
type PolicyVariableColumnResponseOutput struct{ *pulumi.OutputState }

func (PolicyVariableColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVariableColumnResponse)(nil)).Elem()
}

func (o PolicyVariableColumnResponseOutput) ToPolicyVariableColumnResponseOutput() PolicyVariableColumnResponseOutput {
	return o
}

func (o PolicyVariableColumnResponseOutput) ToPolicyVariableColumnResponseOutputWithContext(ctx context.Context) PolicyVariableColumnResponseOutput {
	return o
}

// The name of this policy variable column.
func (o PolicyVariableColumnResponseOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVariableColumnResponse) string { return v.ColumnName }).(pulumi.StringOutput)
}

type PolicyVariableColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyVariableColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVariableColumnResponse)(nil)).Elem()
}

func (o PolicyVariableColumnResponseArrayOutput) ToPolicyVariableColumnResponseArrayOutput() PolicyVariableColumnResponseArrayOutput {
	return o
}

func (o PolicyVariableColumnResponseArrayOutput) ToPolicyVariableColumnResponseArrayOutputWithContext(ctx context.Context) PolicyVariableColumnResponseArrayOutput {
	return o
}

func (o PolicyVariableColumnResponseArrayOutput) Index(i pulumi.IntInput) PolicyVariableColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyVariableColumnResponse {
		return vs[0].([]PolicyVariableColumnResponse)[vs[1].(int)]
	}).(PolicyVariableColumnResponseOutput)
}

// The name value tuple for this variable value column.
type PolicyVariableValueColumnValue struct {
	// Column name for the variable value
	ColumnName string `pulumi:"columnName"`
	// Column value for the variable value; this can be an integer, double, boolean, null or a string.
	ColumnValue interface{} `pulumi:"columnValue"`
}

// PolicyVariableValueColumnValueInput is an input type that accepts PolicyVariableValueColumnValueArgs and PolicyVariableValueColumnValueOutput values.
// You can construct a concrete instance of `PolicyVariableValueColumnValueInput` via:
//
//	PolicyVariableValueColumnValueArgs{...}
type PolicyVariableValueColumnValueInput interface {
	pulumi.Input

	ToPolicyVariableValueColumnValueOutput() PolicyVariableValueColumnValueOutput
	ToPolicyVariableValueColumnValueOutputWithContext(context.Context) PolicyVariableValueColumnValueOutput
}

// The name value tuple for this variable value column.
type PolicyVariableValueColumnValueArgs struct {
	// Column name for the variable value
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// Column value for the variable value; this can be an integer, double, boolean, null or a string.
	ColumnValue pulumi.Input `pulumi:"columnValue"`
}

func (PolicyVariableValueColumnValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVariableValueColumnValue)(nil)).Elem()
}

func (i PolicyVariableValueColumnValueArgs) ToPolicyVariableValueColumnValueOutput() PolicyVariableValueColumnValueOutput {
	return i.ToPolicyVariableValueColumnValueOutputWithContext(context.Background())
}

func (i PolicyVariableValueColumnValueArgs) ToPolicyVariableValueColumnValueOutputWithContext(ctx context.Context) PolicyVariableValueColumnValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVariableValueColumnValueOutput)
}

// PolicyVariableValueColumnValueArrayInput is an input type that accepts PolicyVariableValueColumnValueArray and PolicyVariableValueColumnValueArrayOutput values.
// You can construct a concrete instance of `PolicyVariableValueColumnValueArrayInput` via:
//
//	PolicyVariableValueColumnValueArray{ PolicyVariableValueColumnValueArgs{...} }
type PolicyVariableValueColumnValueArrayInput interface {
	pulumi.Input

	ToPolicyVariableValueColumnValueArrayOutput() PolicyVariableValueColumnValueArrayOutput
	ToPolicyVariableValueColumnValueArrayOutputWithContext(context.Context) PolicyVariableValueColumnValueArrayOutput
}

type PolicyVariableValueColumnValueArray []PolicyVariableValueColumnValueInput

func (PolicyVariableValueColumnValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVariableValueColumnValue)(nil)).Elem()
}

func (i PolicyVariableValueColumnValueArray) ToPolicyVariableValueColumnValueArrayOutput() PolicyVariableValueColumnValueArrayOutput {
	return i.ToPolicyVariableValueColumnValueArrayOutputWithContext(context.Background())
}

func (i PolicyVariableValueColumnValueArray) ToPolicyVariableValueColumnValueArrayOutputWithContext(ctx context.Context) PolicyVariableValueColumnValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVariableValueColumnValueArrayOutput)
}

// The name value tuple for this variable value column.
type PolicyVariableValueColumnValueOutput struct{ *pulumi.OutputState }

func (PolicyVariableValueColumnValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVariableValueColumnValue)(nil)).Elem()
}

func (o PolicyVariableValueColumnValueOutput) ToPolicyVariableValueColumnValueOutput() PolicyVariableValueColumnValueOutput {
	return o
}

func (o PolicyVariableValueColumnValueOutput) ToPolicyVariableValueColumnValueOutputWithContext(ctx context.Context) PolicyVariableValueColumnValueOutput {
	return o
}

// Column name for the variable value
func (o PolicyVariableValueColumnValueOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVariableValueColumnValue) string { return v.ColumnName }).(pulumi.StringOutput)
}

// Column value for the variable value; this can be an integer, double, boolean, null or a string.
func (o PolicyVariableValueColumnValueOutput) ColumnValue() pulumi.AnyOutput {
	return o.ApplyT(func(v PolicyVariableValueColumnValue) interface{} { return v.ColumnValue }).(pulumi.AnyOutput)
}

type PolicyVariableValueColumnValueArrayOutput struct{ *pulumi.OutputState }

func (PolicyVariableValueColumnValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVariableValueColumnValue)(nil)).Elem()
}

func (o PolicyVariableValueColumnValueArrayOutput) ToPolicyVariableValueColumnValueArrayOutput() PolicyVariableValueColumnValueArrayOutput {
	return o
}

func (o PolicyVariableValueColumnValueArrayOutput) ToPolicyVariableValueColumnValueArrayOutputWithContext(ctx context.Context) PolicyVariableValueColumnValueArrayOutput {
	return o
}

func (o PolicyVariableValueColumnValueArrayOutput) Index(i pulumi.IntInput) PolicyVariableValueColumnValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyVariableValueColumnValue {
		return vs[0].([]PolicyVariableValueColumnValue)[vs[1].(int)]
	}).(PolicyVariableValueColumnValueOutput)
}

// The name value tuple for this variable value column.
type PolicyVariableValueColumnValueResponse struct {
	// Column name for the variable value
	ColumnName string `pulumi:"columnName"`
	// Column value for the variable value; this can be an integer, double, boolean, null or a string.
	ColumnValue interface{} `pulumi:"columnValue"`
}

// The name value tuple for this variable value column.
type PolicyVariableValueColumnValueResponseOutput struct{ *pulumi.OutputState }

func (PolicyVariableValueColumnValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyVariableValueColumnValueResponse)(nil)).Elem()
}

func (o PolicyVariableValueColumnValueResponseOutput) ToPolicyVariableValueColumnValueResponseOutput() PolicyVariableValueColumnValueResponseOutput {
	return o
}

func (o PolicyVariableValueColumnValueResponseOutput) ToPolicyVariableValueColumnValueResponseOutputWithContext(ctx context.Context) PolicyVariableValueColumnValueResponseOutput {
	return o
}

// Column name for the variable value
func (o PolicyVariableValueColumnValueResponseOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyVariableValueColumnValueResponse) string { return v.ColumnName }).(pulumi.StringOutput)
}

// Column value for the variable value; this can be an integer, double, boolean, null or a string.
func (o PolicyVariableValueColumnValueResponseOutput) ColumnValue() pulumi.AnyOutput {
	return o.ApplyT(func(v PolicyVariableValueColumnValueResponse) interface{} { return v.ColumnValue }).(pulumi.AnyOutput)
}

type PolicyVariableValueColumnValueResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyVariableValueColumnValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyVariableValueColumnValueResponse)(nil)).Elem()
}

func (o PolicyVariableValueColumnValueResponseArrayOutput) ToPolicyVariableValueColumnValueResponseArrayOutput() PolicyVariableValueColumnValueResponseArrayOutput {
	return o
}

func (o PolicyVariableValueColumnValueResponseArrayOutput) ToPolicyVariableValueColumnValueResponseArrayOutputWithContext(ctx context.Context) PolicyVariableValueColumnValueResponseArrayOutput {
	return o
}

func (o PolicyVariableValueColumnValueResponseArrayOutput) Index(i pulumi.IntInput) PolicyVariableValueColumnValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyVariableValueColumnValueResponse {
		return vs[0].([]PolicyVariableValueColumnValueResponse)[vs[1].(int)]
	}).(PolicyVariableValueColumnValueResponseOutput)
}

// The name of the entity last modified it
type PrincipalResponse struct {
	// The name of the principal made changes
	DisplayName *string `pulumi:"displayName"`
	// Email of principal
	Email *string `pulumi:"email"`
	// The id of the principal made changes
	Id *string `pulumi:"id"`
	// Type of principal such as user , group etc
	Type *string `pulumi:"type"`
}

// The name of the entity last modified it
type PrincipalResponseOutput struct{ *pulumi.OutputState }

func (PrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutput() PrincipalResponseOutput {
	return o
}

func (o PrincipalResponseOutput) ToPrincipalResponseOutputWithContext(ctx context.Context) PrincipalResponseOutput {
	return o
}

// The name of the principal made changes
func (o PrincipalResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Email of principal
func (o PrincipalResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The id of the principal made changes
func (o PrincipalResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of principal such as user , group etc
func (o PrincipalResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrincipalResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrincipalResponsePtrOutput struct{ *pulumi.OutputState }

func (PrincipalResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrincipalResponse)(nil)).Elem()
}

func (o PrincipalResponsePtrOutput) ToPrincipalResponsePtrOutput() PrincipalResponsePtrOutput {
	return o
}

func (o PrincipalResponsePtrOutput) ToPrincipalResponsePtrOutputWithContext(ctx context.Context) PrincipalResponsePtrOutput {
	return o
}

func (o PrincipalResponsePtrOutput) Elem() PrincipalResponseOutput {
	return o.ApplyT(func(v *PrincipalResponse) PrincipalResponse {
		if v != nil {
			return *v
		}
		var ret PrincipalResponse
		return ret
	}).(PrincipalResponseOutput)
}

// The name of the principal made changes
func (o PrincipalResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Email of principal
func (o PrincipalResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The id of the principal made changes
func (o PrincipalResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Type of principal such as user , group etc
func (o PrincipalResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkAssociationProperties struct {
	// The rmpl Resource ID.
	PrivateLink         *string `pulumi:"privateLink"`
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// PrivateLinkAssociationPropertiesInput is an input type that accepts PrivateLinkAssociationPropertiesArgs and PrivateLinkAssociationPropertiesOutput values.
// You can construct a concrete instance of `PrivateLinkAssociationPropertiesInput` via:
//
//	PrivateLinkAssociationPropertiesArgs{...}
type PrivateLinkAssociationPropertiesInput interface {
	pulumi.Input

	ToPrivateLinkAssociationPropertiesOutput() PrivateLinkAssociationPropertiesOutput
	ToPrivateLinkAssociationPropertiesOutputWithContext(context.Context) PrivateLinkAssociationPropertiesOutput
}

type PrivateLinkAssociationPropertiesArgs struct {
	// The rmpl Resource ID.
	PrivateLink         pulumi.StringPtrInput `pulumi:"privateLink"`
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
}

func (PrivateLinkAssociationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAssociationProperties)(nil)).Elem()
}

func (i PrivateLinkAssociationPropertiesArgs) ToPrivateLinkAssociationPropertiesOutput() PrivateLinkAssociationPropertiesOutput {
	return i.ToPrivateLinkAssociationPropertiesOutputWithContext(context.Background())
}

func (i PrivateLinkAssociationPropertiesArgs) ToPrivateLinkAssociationPropertiesOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAssociationPropertiesOutput)
}

func (i PrivateLinkAssociationPropertiesArgs) ToPrivateLinkAssociationPropertiesPtrOutput() PrivateLinkAssociationPropertiesPtrOutput {
	return i.ToPrivateLinkAssociationPropertiesPtrOutputWithContext(context.Background())
}

func (i PrivateLinkAssociationPropertiesArgs) ToPrivateLinkAssociationPropertiesPtrOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAssociationPropertiesOutput).ToPrivateLinkAssociationPropertiesPtrOutputWithContext(ctx)
}

// PrivateLinkAssociationPropertiesPtrInput is an input type that accepts PrivateLinkAssociationPropertiesArgs, PrivateLinkAssociationPropertiesPtr and PrivateLinkAssociationPropertiesPtrOutput values.
// You can construct a concrete instance of `PrivateLinkAssociationPropertiesPtrInput` via:
//
//	        PrivateLinkAssociationPropertiesArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkAssociationPropertiesPtrInput interface {
	pulumi.Input

	ToPrivateLinkAssociationPropertiesPtrOutput() PrivateLinkAssociationPropertiesPtrOutput
	ToPrivateLinkAssociationPropertiesPtrOutputWithContext(context.Context) PrivateLinkAssociationPropertiesPtrOutput
}

type privateLinkAssociationPropertiesPtrType PrivateLinkAssociationPropertiesArgs

func PrivateLinkAssociationPropertiesPtr(v *PrivateLinkAssociationPropertiesArgs) PrivateLinkAssociationPropertiesPtrInput {
	return (*privateLinkAssociationPropertiesPtrType)(v)
}

func (*privateLinkAssociationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAssociationProperties)(nil)).Elem()
}

func (i *privateLinkAssociationPropertiesPtrType) ToPrivateLinkAssociationPropertiesPtrOutput() PrivateLinkAssociationPropertiesPtrOutput {
	return i.ToPrivateLinkAssociationPropertiesPtrOutputWithContext(context.Background())
}

func (i *privateLinkAssociationPropertiesPtrType) ToPrivateLinkAssociationPropertiesPtrOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAssociationPropertiesPtrOutput)
}

type PrivateLinkAssociationPropertiesOutput struct{ *pulumi.OutputState }

func (PrivateLinkAssociationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAssociationProperties)(nil)).Elem()
}

func (o PrivateLinkAssociationPropertiesOutput) ToPrivateLinkAssociationPropertiesOutput() PrivateLinkAssociationPropertiesOutput {
	return o
}

func (o PrivateLinkAssociationPropertiesOutput) ToPrivateLinkAssociationPropertiesOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesOutput {
	return o
}

func (o PrivateLinkAssociationPropertiesOutput) ToPrivateLinkAssociationPropertiesPtrOutput() PrivateLinkAssociationPropertiesPtrOutput {
	return o.ToPrivateLinkAssociationPropertiesPtrOutputWithContext(context.Background())
}

func (o PrivateLinkAssociationPropertiesOutput) ToPrivateLinkAssociationPropertiesPtrOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkAssociationProperties) *PrivateLinkAssociationProperties {
		return &v
	}).(PrivateLinkAssociationPropertiesPtrOutput)
}

// The rmpl Resource ID.
func (o PrivateLinkAssociationPropertiesOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAssociationProperties) *string { return v.PrivateLink }).(pulumi.StringPtrOutput)
}

func (o PrivateLinkAssociationPropertiesOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAssociationProperties) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type PrivateLinkAssociationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkAssociationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAssociationProperties)(nil)).Elem()
}

func (o PrivateLinkAssociationPropertiesPtrOutput) ToPrivateLinkAssociationPropertiesPtrOutput() PrivateLinkAssociationPropertiesPtrOutput {
	return o
}

func (o PrivateLinkAssociationPropertiesPtrOutput) ToPrivateLinkAssociationPropertiesPtrOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesPtrOutput {
	return o
}

func (o PrivateLinkAssociationPropertiesPtrOutput) Elem() PrivateLinkAssociationPropertiesOutput {
	return o.ApplyT(func(v *PrivateLinkAssociationProperties) PrivateLinkAssociationProperties {
		if v != nil {
			return *v
		}
		var ret PrivateLinkAssociationProperties
		return ret
	}).(PrivateLinkAssociationPropertiesOutput)
}

// The rmpl Resource ID.
func (o PrivateLinkAssociationPropertiesPtrOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAssociationProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLink
	}).(pulumi.StringPtrOutput)
}

func (o PrivateLinkAssociationPropertiesPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkAssociationProperties) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Private Link Association Properties.
type PrivateLinkAssociationPropertiesExpandedResponse struct {
	// The rmpl Resource ID.
	PrivateLink         *string `pulumi:"privateLink"`
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The scope of the private link association.
	Scope *string `pulumi:"scope"`
	// The TenantID.
	TenantID *string `pulumi:"tenantID"`
}

// Private Link Association Properties.
type PrivateLinkAssociationPropertiesExpandedResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkAssociationPropertiesExpandedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkAssociationPropertiesExpandedResponse)(nil)).Elem()
}

func (o PrivateLinkAssociationPropertiesExpandedResponseOutput) ToPrivateLinkAssociationPropertiesExpandedResponseOutput() PrivateLinkAssociationPropertiesExpandedResponseOutput {
	return o
}

func (o PrivateLinkAssociationPropertiesExpandedResponseOutput) ToPrivateLinkAssociationPropertiesExpandedResponseOutputWithContext(ctx context.Context) PrivateLinkAssociationPropertiesExpandedResponseOutput {
	return o
}

// The rmpl Resource ID.
func (o PrivateLinkAssociationPropertiesExpandedResponseOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAssociationPropertiesExpandedResponse) *string { return v.PrivateLink }).(pulumi.StringPtrOutput)
}

func (o PrivateLinkAssociationPropertiesExpandedResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAssociationPropertiesExpandedResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The scope of the private link association.
func (o PrivateLinkAssociationPropertiesExpandedResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAssociationPropertiesExpandedResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The TenantID.
func (o PrivateLinkAssociationPropertiesExpandedResponseOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkAssociationPropertiesExpandedResponse) *string { return v.TenantID }).(pulumi.StringPtrOutput)
}

type ResourceManagementPrivateLinkEndpointConnectionsResponse struct {
	// The private endpoint connections.
	PrivateEndpointConnections []string `pulumi:"privateEndpointConnections"`
}

type ResourceManagementPrivateLinkEndpointConnectionsResponseOutput struct{ *pulumi.OutputState }

func (ResourceManagementPrivateLinkEndpointConnectionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceManagementPrivateLinkEndpointConnectionsResponse)(nil)).Elem()
}

func (o ResourceManagementPrivateLinkEndpointConnectionsResponseOutput) ToResourceManagementPrivateLinkEndpointConnectionsResponseOutput() ResourceManagementPrivateLinkEndpointConnectionsResponseOutput {
	return o
}

func (o ResourceManagementPrivateLinkEndpointConnectionsResponseOutput) ToResourceManagementPrivateLinkEndpointConnectionsResponseOutputWithContext(ctx context.Context) ResourceManagementPrivateLinkEndpointConnectionsResponseOutput {
	return o
}

// The private endpoint connections.
func (o ResourceManagementPrivateLinkEndpointConnectionsResponseOutput) PrivateEndpointConnections() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceManagementPrivateLinkEndpointConnectionsResponse) []string {
		return v.PrivateEndpointConnections
	}).(pulumi.StringArrayOutput)
}

// The resource selector to filter policies by resource properties.
type ResourceSelector struct {
	// The name of the resource selector.
	Name *string `pulumi:"name"`
	// The list of the selector expressions.
	Selectors []Selector `pulumi:"selectors"`
}

// ResourceSelectorInput is an input type that accepts ResourceSelectorArgs and ResourceSelectorOutput values.
// You can construct a concrete instance of `ResourceSelectorInput` via:
//
//	ResourceSelectorArgs{...}
type ResourceSelectorInput interface {
	pulumi.Input

	ToResourceSelectorOutput() ResourceSelectorOutput
	ToResourceSelectorOutputWithContext(context.Context) ResourceSelectorOutput
}

// The resource selector to filter policies by resource properties.
type ResourceSelectorArgs struct {
	// The name of the resource selector.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of the selector expressions.
	Selectors SelectorArrayInput `pulumi:"selectors"`
}

func (ResourceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSelector)(nil)).Elem()
}

func (i ResourceSelectorArgs) ToResourceSelectorOutput() ResourceSelectorOutput {
	return i.ToResourceSelectorOutputWithContext(context.Background())
}

func (i ResourceSelectorArgs) ToResourceSelectorOutputWithContext(ctx context.Context) ResourceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSelectorOutput)
}

// ResourceSelectorArrayInput is an input type that accepts ResourceSelectorArray and ResourceSelectorArrayOutput values.
// You can construct a concrete instance of `ResourceSelectorArrayInput` via:
//
//	ResourceSelectorArray{ ResourceSelectorArgs{...} }
type ResourceSelectorArrayInput interface {
	pulumi.Input

	ToResourceSelectorArrayOutput() ResourceSelectorArrayOutput
	ToResourceSelectorArrayOutputWithContext(context.Context) ResourceSelectorArrayOutput
}

type ResourceSelectorArray []ResourceSelectorInput

func (ResourceSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSelector)(nil)).Elem()
}

func (i ResourceSelectorArray) ToResourceSelectorArrayOutput() ResourceSelectorArrayOutput {
	return i.ToResourceSelectorArrayOutputWithContext(context.Background())
}

func (i ResourceSelectorArray) ToResourceSelectorArrayOutputWithContext(ctx context.Context) ResourceSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSelectorArrayOutput)
}

// The resource selector to filter policies by resource properties.
type ResourceSelectorOutput struct{ *pulumi.OutputState }

func (ResourceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSelector)(nil)).Elem()
}

func (o ResourceSelectorOutput) ToResourceSelectorOutput() ResourceSelectorOutput {
	return o
}

func (o ResourceSelectorOutput) ToResourceSelectorOutputWithContext(ctx context.Context) ResourceSelectorOutput {
	return o
}

// The name of the resource selector.
func (o ResourceSelectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSelector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of the selector expressions.
func (o ResourceSelectorOutput) Selectors() SelectorArrayOutput {
	return o.ApplyT(func(v ResourceSelector) []Selector { return v.Selectors }).(SelectorArrayOutput)
}

type ResourceSelectorArrayOutput struct{ *pulumi.OutputState }

func (ResourceSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSelector)(nil)).Elem()
}

func (o ResourceSelectorArrayOutput) ToResourceSelectorArrayOutput() ResourceSelectorArrayOutput {
	return o
}

func (o ResourceSelectorArrayOutput) ToResourceSelectorArrayOutputWithContext(ctx context.Context) ResourceSelectorArrayOutput {
	return o
}

func (o ResourceSelectorArrayOutput) Index(i pulumi.IntInput) ResourceSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceSelector {
		return vs[0].([]ResourceSelector)[vs[1].(int)]
	}).(ResourceSelectorOutput)
}

// The resource selector to filter policies by resource properties.
type ResourceSelectorResponse struct {
	// The name of the resource selector.
	Name *string `pulumi:"name"`
	// The list of the selector expressions.
	Selectors []SelectorResponse `pulumi:"selectors"`
}

// The resource selector to filter policies by resource properties.
type ResourceSelectorResponseOutput struct{ *pulumi.OutputState }

func (ResourceSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSelectorResponse)(nil)).Elem()
}

func (o ResourceSelectorResponseOutput) ToResourceSelectorResponseOutput() ResourceSelectorResponseOutput {
	return o
}

func (o ResourceSelectorResponseOutput) ToResourceSelectorResponseOutputWithContext(ctx context.Context) ResourceSelectorResponseOutput {
	return o
}

// The name of the resource selector.
func (o ResourceSelectorResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSelectorResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of the selector expressions.
func (o ResourceSelectorResponseOutput) Selectors() SelectorResponseArrayOutput {
	return o.ApplyT(func(v ResourceSelectorResponse) []SelectorResponse { return v.Selectors }).(SelectorResponseArrayOutput)
}

type ResourceSelectorResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceSelectorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceSelectorResponse)(nil)).Elem()
}

func (o ResourceSelectorResponseArrayOutput) ToResourceSelectorResponseArrayOutput() ResourceSelectorResponseArrayOutput {
	return o
}

func (o ResourceSelectorResponseArrayOutput) ToResourceSelectorResponseArrayOutputWithContext(ctx context.Context) ResourceSelectorResponseArrayOutput {
	return o
}

func (o ResourceSelectorResponseArrayOutput) Index(i pulumi.IntInput) ResourceSelectorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceSelectorResponse {
		return vs[0].([]ResourceSelectorResponse)[vs[1].(int)]
	}).(ResourceSelectorResponseOutput)
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesExpiration struct {
	// Duration of the role eligibility schedule in TimeSpan.
	Duration *string `pulumi:"duration"`
	// End DateTime of the role eligibility schedule.
	EndDateTime *string `pulumi:"endDateTime"`
	// Type of the role eligibility schedule expiration
	Type *string `pulumi:"type"`
}

// RoleEligibilityScheduleRequestPropertiesExpirationInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesExpirationArgs and RoleEligibilityScheduleRequestPropertiesExpirationOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesExpirationInput` via:
//
//	RoleEligibilityScheduleRequestPropertiesExpirationArgs{...}
type RoleEligibilityScheduleRequestPropertiesExpirationInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesExpirationOutput() RoleEligibilityScheduleRequestPropertiesExpirationOutput
	ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesExpirationOutput
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesExpirationArgs struct {
	// Duration of the role eligibility schedule in TimeSpan.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// End DateTime of the role eligibility schedule.
	EndDateTime pulumi.StringPtrInput `pulumi:"endDateTime"`
	// Type of the role eligibility schedule expiration
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RoleEligibilityScheduleRequestPropertiesExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationOutput() RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesExpirationOutput)
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesExpirationArgs) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesExpirationOutput).ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx)
}

// RoleEligibilityScheduleRequestPropertiesExpirationPtrInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesExpirationArgs, RoleEligibilityScheduleRequestPropertiesExpirationPtr and RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesExpirationPtrInput` via:
//
//	        RoleEligibilityScheduleRequestPropertiesExpirationArgs{...}
//
//	or:
//
//	        nil
type RoleEligibilityScheduleRequestPropertiesExpirationPtrInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput
	ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput
}

type roleEligibilityScheduleRequestPropertiesExpirationPtrType RoleEligibilityScheduleRequestPropertiesExpirationArgs

func RoleEligibilityScheduleRequestPropertiesExpirationPtr(v *RoleEligibilityScheduleRequestPropertiesExpirationArgs) RoleEligibilityScheduleRequestPropertiesExpirationPtrInput {
	return (*roleEligibilityScheduleRequestPropertiesExpirationPtrType)(v)
}

func (*roleEligibilityScheduleRequestPropertiesExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (i *roleEligibilityScheduleRequestPropertiesExpirationPtrType) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Background())
}

func (i *roleEligibilityScheduleRequestPropertiesExpirationPtrType) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesExpirationOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationOutput() RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(context.Background())
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleEligibilityScheduleRequestPropertiesExpiration) *RoleEligibilityScheduleRequestPropertiesExpiration {
		return &v
	}).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesExpiration) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesExpiration) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesExpirationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesExpiration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesExpirationOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) RoleEligibilityScheduleRequestPropertiesExpiration {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesExpiration
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesExpirationOutput)
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) *string {
		if v == nil {
			return nil
		}
		return v.EndDateTime
	}).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseExpiration struct {
	// Duration of the role eligibility schedule in TimeSpan.
	Duration *string `pulumi:"duration"`
	// End DateTime of the role eligibility schedule.
	EndDateTime *string `pulumi:"endDateTime"`
	// Type of the role eligibility schedule expiration
	Type *string `pulumi:"type"`
}

// Expiration of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesResponseExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationOutput() RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput {
	return o
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string { return v.EndDateTime }).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesResponseExpiration)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput() RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) RoleEligibilityScheduleRequestPropertiesResponseExpiration {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesResponseExpiration
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput)
}

// Duration of the role eligibility schedule in TimeSpan.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// End DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) EndDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string {
		if v == nil {
			return nil
		}
		return v.EndDateTime
	}).(pulumi.StringPtrOutput)
}

// Type of the role eligibility schedule expiration
func (o RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseExpiration) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo struct {
	// Expiration of the role eligibility schedule
	Expiration *RoleEligibilityScheduleRequestPropertiesResponseExpiration `pulumi:"expiration"`
	// Start DateTime of the role eligibility schedule.
	StartDateTime *string `pulumi:"startDateTime"`
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput {
	return o
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) Expiration() RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *RoleEligibilityScheduleRequestPropertiesResponseExpiration {
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput)
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) Expiration() RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *RoleEligibilityScheduleRequestPropertiesResponseExpiration {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseScheduleInfo) *string {
		if v == nil {
			return nil
		}
		return v.StartDateTime
	}).(pulumi.StringPtrOutput)
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesResponseTicketInfo struct {
	// Ticket number for the role eligibility
	TicketNumber *string `pulumi:"ticketNumber"`
	// Ticket system name for the role eligibility
	TicketSystem *string `pulumi:"ticketSystem"`
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesResponseTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput {
	return o
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string { return v.TicketNumber }).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string { return v.TicketSystem }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesResponseTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) RoleEligibilityScheduleRequestPropertiesResponseTicketInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesResponseTicketInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput)
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketNumber
	}).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesResponseTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketSystem
	}).(pulumi.StringPtrOutput)
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesScheduleInfo struct {
	// Expiration of the role eligibility schedule
	Expiration *RoleEligibilityScheduleRequestPropertiesExpiration `pulumi:"expiration"`
	// Start DateTime of the role eligibility schedule.
	StartDateTime *string `pulumi:"startDateTime"`
}

// RoleEligibilityScheduleRequestPropertiesScheduleInfoInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs and RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesScheduleInfoInput` via:
//
//	RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs{...}
type RoleEligibilityScheduleRequestPropertiesScheduleInfoInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput
	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs struct {
	// Expiration of the role eligibility schedule
	Expiration RoleEligibilityScheduleRequestPropertiesExpirationPtrInput `pulumi:"expiration"`
	// Start DateTime of the role eligibility schedule.
	StartDateTime pulumi.StringPtrInput `pulumi:"startDateTime"`
}

func (RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput)
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput).ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx)
}

// RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs, RoleEligibilityScheduleRequestPropertiesScheduleInfoPtr and RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput` via:
//
//	        RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs{...}
//
//	or:
//
//	        nil
type RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput
	ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput
}

type roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs

func RoleEligibilityScheduleRequestPropertiesScheduleInfoPtr(v *RoleEligibilityScheduleRequestPropertiesScheduleInfoArgs) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput {
	return (*roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType)(v)
}

func (*roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (i *roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Background())
}

func (i *roleEligibilityScheduleRequestPropertiesScheduleInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput)
}

// Schedule info of the role eligibility schedule
type RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o.ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(context.Background())
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleEligibilityScheduleRequestPropertiesScheduleInfo) *RoleEligibilityScheduleRequestPropertiesScheduleInfo {
		return &v
	}).(RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput)
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) Expiration() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesScheduleInfo) *RoleEligibilityScheduleRequestPropertiesExpiration {
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesScheduleInfo) *string { return v.StartDateTime }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesScheduleInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesScheduleInfo) RoleEligibilityScheduleRequestPropertiesScheduleInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesScheduleInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput)
}

// Expiration of the role eligibility schedule
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) Expiration() RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesScheduleInfo) *RoleEligibilityScheduleRequestPropertiesExpiration {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput)
}

// Start DateTime of the role eligibility schedule.
func (o RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput) StartDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesScheduleInfo) *string {
		if v == nil {
			return nil
		}
		return v.StartDateTime
	}).(pulumi.StringPtrOutput)
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesTicketInfo struct {
	// Ticket number for the role eligibility
	TicketNumber *string `pulumi:"ticketNumber"`
	// Ticket system name for the role eligibility
	TicketSystem *string `pulumi:"ticketSystem"`
}

// RoleEligibilityScheduleRequestPropertiesTicketInfoInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesTicketInfoArgs and RoleEligibilityScheduleRequestPropertiesTicketInfoOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesTicketInfoInput` via:
//
//	RoleEligibilityScheduleRequestPropertiesTicketInfoArgs{...}
type RoleEligibilityScheduleRequestPropertiesTicketInfoInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput
	ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoOutput
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesTicketInfoArgs struct {
	// Ticket number for the role eligibility
	TicketNumber pulumi.StringPtrInput `pulumi:"ticketNumber"`
	// Ticket system name for the role eligibility
	TicketSystem pulumi.StringPtrInput `pulumi:"ticketSystem"`
}

func (RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput)
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Background())
}

func (i RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput).ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx)
}

// RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput is an input type that accepts RoleEligibilityScheduleRequestPropertiesTicketInfoArgs, RoleEligibilityScheduleRequestPropertiesTicketInfoPtr and RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput values.
// You can construct a concrete instance of `RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput` via:
//
//	        RoleEligibilityScheduleRequestPropertiesTicketInfoArgs{...}
//
//	or:
//
//	        nil
type RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput interface {
	pulumi.Input

	ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput
	ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput
}

type roleEligibilityScheduleRequestPropertiesTicketInfoPtrType RoleEligibilityScheduleRequestPropertiesTicketInfoArgs

func RoleEligibilityScheduleRequestPropertiesTicketInfoPtr(v *RoleEligibilityScheduleRequestPropertiesTicketInfoArgs) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput {
	return (*roleEligibilityScheduleRequestPropertiesTicketInfoPtrType)(v)
}

func (*roleEligibilityScheduleRequestPropertiesTicketInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (i *roleEligibilityScheduleRequestPropertiesTicketInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return i.ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Background())
}

func (i *roleEligibilityScheduleRequestPropertiesTicketInfoPtrType) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput)
}

// Ticket Info of the role eligibility
type RoleEligibilityScheduleRequestPropertiesTicketInfoOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o.ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(context.Background())
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleEligibilityScheduleRequestPropertiesTicketInfo) *RoleEligibilityScheduleRequestPropertiesTicketInfo {
		return &v
	}).(RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput)
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesTicketInfo) *string { return v.TicketNumber }).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleEligibilityScheduleRequestPropertiesTicketInfo) *string { return v.TicketSystem }).(pulumi.StringPtrOutput)
}

type RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput struct{ *pulumi.OutputState }

func (RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleEligibilityScheduleRequestPropertiesTicketInfo)(nil)).Elem()
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput() RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) ToRoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutputWithContext(ctx context.Context) RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput {
	return o
}

func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) Elem() RoleEligibilityScheduleRequestPropertiesTicketInfoOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesTicketInfo) RoleEligibilityScheduleRequestPropertiesTicketInfo {
		if v != nil {
			return *v
		}
		var ret RoleEligibilityScheduleRequestPropertiesTicketInfo
		return ret
	}).(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput)
}

// Ticket number for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) TicketNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketNumber
	}).(pulumi.StringPtrOutput)
}

// Ticket system name for the role eligibility
func (o RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput) TicketSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleEligibilityScheduleRequestPropertiesTicketInfo) *string {
		if v == nil {
			return nil
		}
		return v.TicketSystem
	}).(pulumi.StringPtrOutput)
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettings `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyApprovalRuleInput is an input type that accepts RoleManagementPolicyApprovalRuleArgs and RoleManagementPolicyApprovalRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyApprovalRuleInput` via:
//
//	RoleManagementPolicyApprovalRuleArgs{...}
type RoleManagementPolicyApprovalRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput
	ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Context) RoleManagementPolicyApprovalRuleOutput
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The approval setting
	Setting ApprovalSettingsPtrInput `pulumi:"setting"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyApprovalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return i.ToRoleManagementPolicyApprovalRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyApprovalRuleArgs) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyApprovalRuleOutput)
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRule)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutput() RoleManagementPolicyApprovalRuleOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleOutput) ToRoleManagementPolicyApprovalRuleOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleOutput) Setting() ApprovalSettingsPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *ApprovalSettings { return v.Setting }).(ApprovalSettingsPtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyApprovalRule'.
	RuleType string `pulumi:"ruleType"`
	// The approval setting
	Setting *ApprovalSettingsResponse `pulumi:"setting"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy approval rule.
type RoleManagementPolicyApprovalRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyApprovalRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyApprovalRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutput() RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyApprovalRuleResponseOutput) ToRoleManagementPolicyApprovalRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyApprovalRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyApprovalRule'.
func (o RoleManagementPolicyApprovalRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The approval setting
func (o RoleManagementPolicyApprovalRuleResponseOutput) Setting() ApprovalSettingsResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *ApprovalSettingsResponse { return v.Setting }).(ApprovalSettingsResponsePtrOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyApprovalRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyApprovalRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRule struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyAuthenticationContextRuleInput is an input type that accepts RoleManagementPolicyAuthenticationContextRuleArgs and RoleManagementPolicyAuthenticationContextRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyAuthenticationContextRuleInput` via:
//
//	RoleManagementPolicyAuthenticationContextRuleArgs{...}
type RoleManagementPolicyAuthenticationContextRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput
	ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Context) RoleManagementPolicyAuthenticationContextRuleOutput
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleArgs struct {
	// The claim value.
	ClaimValue pulumi.StringPtrInput `pulumi:"claimValue"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyAuthenticationContextRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return i.ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyAuthenticationContextRuleArgs) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyAuthenticationContextRuleOutput)
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRule)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutput() RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleOutput) ToRoleManagementPolicyAuthenticationContextRuleOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleResponse struct {
	// The claim value.
	ClaimValue *string `pulumi:"claimValue"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating if rule is enabled.
	IsEnabled *bool `pulumi:"isEnabled"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy authentication context rule.
type RoleManagementPolicyAuthenticationContextRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyAuthenticationContextRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyAuthenticationContextRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutput() RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ToRoleManagementPolicyAuthenticationContextRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyAuthenticationContextRuleResponseOutput {
	return o
}

// The claim value.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) ClaimValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.ClaimValue }).(pulumi.StringPtrOutput)
}

// The id of the rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating if rule is enabled.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyAuthenticationContextRule'.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyAuthenticationContextRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyAuthenticationContextRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRule struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyEnablementRuleInput is an input type that accepts RoleManagementPolicyEnablementRuleArgs and RoleManagementPolicyEnablementRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyEnablementRuleInput` via:
//
//	RoleManagementPolicyEnablementRuleArgs{...}
type RoleManagementPolicyEnablementRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput
	ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Context) RoleManagementPolicyEnablementRuleOutput
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleArgs struct {
	// The list of enabled rules.
	EnabledRules pulumi.StringArrayInput `pulumi:"enabledRules"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyEnablementRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return i.ToRoleManagementPolicyEnablementRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyEnablementRuleArgs) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyEnablementRuleOutput)
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRule)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutput() RoleManagementPolicyEnablementRuleOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleOutput) ToRoleManagementPolicyEnablementRuleOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleResponse struct {
	// The list of enabled rules.
	EnabledRules []string `pulumi:"enabledRules"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyEnablementRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy enablement rule.
type RoleManagementPolicyEnablementRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyEnablementRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyEnablementRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutput() RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyEnablementRuleResponseOutput) ToRoleManagementPolicyEnablementRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyEnablementRuleResponseOutput {
	return o
}

// The list of enabled rules.
func (o RoleManagementPolicyEnablementRuleResponseOutput) EnabledRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) []string { return v.EnabledRules }).(pulumi.StringArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyEnablementRule'.
func (o RoleManagementPolicyEnablementRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyEnablementRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyEnablementRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRule struct {
	// The members not restricted by expiration rule.
	ExceptionMembers []UserSet `pulumi:"exceptionMembers"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyExpirationRuleInput is an input type that accepts RoleManagementPolicyExpirationRuleArgs and RoleManagementPolicyExpirationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyExpirationRuleInput` via:
//
//	RoleManagementPolicyExpirationRuleArgs{...}
type RoleManagementPolicyExpirationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput
	ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Context) RoleManagementPolicyExpirationRuleOutput
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleArgs struct {
	// The members not restricted by expiration rule.
	ExceptionMembers UserSetArrayInput `pulumi:"exceptionMembers"`
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired pulumi.BoolPtrInput `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration pulumi.StringPtrInput `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyExpirationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return i.ToRoleManagementPolicyExpirationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyExpirationRuleArgs) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyExpirationRuleOutput)
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRule)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutput() RoleManagementPolicyExpirationRuleOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleOutput) ToRoleManagementPolicyExpirationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleOutput {
	return o
}

// The members not restricted by expiration rule.
func (o RoleManagementPolicyExpirationRuleOutput) ExceptionMembers() UserSetArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) []UserSet { return v.ExceptionMembers }).(UserSetArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleResponse struct {
	// The members not restricted by expiration rule.
	ExceptionMembers []UserSetResponse `pulumi:"exceptionMembers"`
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The value indicating whether expiration is required.
	IsExpirationRequired *bool `pulumi:"isExpirationRequired"`
	// The maximum duration of expiration in timespan.
	MaximumDuration *string `pulumi:"maximumDuration"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyExpirationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy expiration rule.
type RoleManagementPolicyExpirationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyExpirationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyExpirationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutput() RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyExpirationRuleResponseOutput) ToRoleManagementPolicyExpirationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyExpirationRuleResponseOutput {
	return o
}

// The members not restricted by expiration rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) ExceptionMembers() UserSetResponseArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) []UserSetResponse { return v.ExceptionMembers }).(UserSetResponseArrayOutput)
}

// The id of the rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether expiration is required.
func (o RoleManagementPolicyExpirationRuleResponseOutput) IsExpirationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *bool { return v.IsExpirationRequired }).(pulumi.BoolPtrOutput)
}

// The maximum duration of expiration in timespan.
func (o RoleManagementPolicyExpirationRuleResponseOutput) MaximumDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *string { return v.MaximumDuration }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyExpirationRule'.
func (o RoleManagementPolicyExpirationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyExpirationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyExpirationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// Determines if the notification will be sent to the recipient type specified in the policy rule.
	IsDefaultRecipientsEnabled *bool `pulumi:"isDefaultRecipientsEnabled"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list of notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyNotificationRuleInput is an input type that accepts RoleManagementPolicyNotificationRuleArgs and RoleManagementPolicyNotificationRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyNotificationRuleInput` via:
//
//	RoleManagementPolicyNotificationRuleArgs{...}
type RoleManagementPolicyNotificationRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput
	ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Context) RoleManagementPolicyNotificationRuleOutput
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Determines if the notification will be sent to the recipient type specified in the policy rule.
	IsDefaultRecipientsEnabled pulumi.BoolPtrInput `pulumi:"isDefaultRecipientsEnabled"`
	// The notification level.
	NotificationLevel pulumi.StringPtrInput `pulumi:"notificationLevel"`
	// The list of notification recipients.
	NotificationRecipients pulumi.StringArrayInput `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType pulumi.StringPtrInput `pulumi:"notificationType"`
	// The recipient type.
	RecipientType pulumi.StringPtrInput `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return i.ToRoleManagementPolicyNotificationRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyNotificationRuleArgs) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyNotificationRuleOutput)
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRule)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutput() RoleManagementPolicyNotificationRuleOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleOutput) ToRoleManagementPolicyNotificationRuleOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the notification will be sent to the recipient type specified in the policy rule.
func (o RoleManagementPolicyNotificationRuleOutput) IsDefaultRecipientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *bool { return v.IsDefaultRecipientsEnabled }).(pulumi.BoolPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list of notification recipients.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// Determines if the notification will be sent to the recipient type specified in the policy rule.
	IsDefaultRecipientsEnabled *bool `pulumi:"isDefaultRecipientsEnabled"`
	// The notification level.
	NotificationLevel *string `pulumi:"notificationLevel"`
	// The list of notification recipients.
	NotificationRecipients []string `pulumi:"notificationRecipients"`
	// The type of notification.
	NotificationType *string `pulumi:"notificationType"`
	// The recipient type.
	RecipientType *string `pulumi:"recipientType"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyNotificationRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy notification rule.
type RoleManagementPolicyNotificationRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyNotificationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyNotificationRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutput() RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyNotificationRuleResponseOutput) ToRoleManagementPolicyNotificationRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyNotificationRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Determines if the notification will be sent to the recipient type specified in the policy rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) IsDefaultRecipientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *bool { return v.IsDefaultRecipientsEnabled }).(pulumi.BoolPtrOutput)
}

// The notification level.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationLevel }).(pulumi.StringPtrOutput)
}

// The list of notification recipients.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationRecipients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) []string { return v.NotificationRecipients }).(pulumi.StringArrayOutput)
}

// The type of notification.
func (o RoleManagementPolicyNotificationRuleResponseOutput) NotificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.NotificationType }).(pulumi.StringPtrOutput)
}

// The recipient type.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RecipientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *string { return v.RecipientType }).(pulumi.StringPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyNotificationRule'.
func (o RoleManagementPolicyNotificationRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyNotificationRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyNotificationRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy PIM only mode rule.
type RoleManagementPolicyPimOnlyModeRule struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The PIM Only Mode settings
	PimOnlyModeSettings *PIMOnlyModeSettings `pulumi:"pimOnlyModeSettings"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyPimOnlyModeRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTarget `pulumi:"target"`
}

// RoleManagementPolicyPimOnlyModeRuleInput is an input type that accepts RoleManagementPolicyPimOnlyModeRuleArgs and RoleManagementPolicyPimOnlyModeRuleOutput values.
// You can construct a concrete instance of `RoleManagementPolicyPimOnlyModeRuleInput` via:
//
//	RoleManagementPolicyPimOnlyModeRuleArgs{...}
type RoleManagementPolicyPimOnlyModeRuleInput interface {
	pulumi.Input

	ToRoleManagementPolicyPimOnlyModeRuleOutput() RoleManagementPolicyPimOnlyModeRuleOutput
	ToRoleManagementPolicyPimOnlyModeRuleOutputWithContext(context.Context) RoleManagementPolicyPimOnlyModeRuleOutput
}

// The role management policy PIM only mode rule.
type RoleManagementPolicyPimOnlyModeRuleArgs struct {
	// The id of the rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The PIM Only Mode settings
	PimOnlyModeSettings PIMOnlyModeSettingsPtrInput `pulumi:"pimOnlyModeSettings"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyPimOnlyModeRule'.
	RuleType pulumi.StringInput `pulumi:"ruleType"`
	// The target of the current rule.
	Target RoleManagementPolicyRuleTargetPtrInput `pulumi:"target"`
}

func (RoleManagementPolicyPimOnlyModeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyPimOnlyModeRule)(nil)).Elem()
}

func (i RoleManagementPolicyPimOnlyModeRuleArgs) ToRoleManagementPolicyPimOnlyModeRuleOutput() RoleManagementPolicyPimOnlyModeRuleOutput {
	return i.ToRoleManagementPolicyPimOnlyModeRuleOutputWithContext(context.Background())
}

func (i RoleManagementPolicyPimOnlyModeRuleArgs) ToRoleManagementPolicyPimOnlyModeRuleOutputWithContext(ctx context.Context) RoleManagementPolicyPimOnlyModeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyPimOnlyModeRuleOutput)
}

// The role management policy PIM only mode rule.
type RoleManagementPolicyPimOnlyModeRuleOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyPimOnlyModeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyPimOnlyModeRule)(nil)).Elem()
}

func (o RoleManagementPolicyPimOnlyModeRuleOutput) ToRoleManagementPolicyPimOnlyModeRuleOutput() RoleManagementPolicyPimOnlyModeRuleOutput {
	return o
}

func (o RoleManagementPolicyPimOnlyModeRuleOutput) ToRoleManagementPolicyPimOnlyModeRuleOutputWithContext(ctx context.Context) RoleManagementPolicyPimOnlyModeRuleOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyPimOnlyModeRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The PIM Only Mode settings
func (o RoleManagementPolicyPimOnlyModeRuleOutput) PimOnlyModeSettings() PIMOnlyModeSettingsPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRule) *PIMOnlyModeSettings { return v.PimOnlyModeSettings }).(PIMOnlyModeSettingsPtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyPimOnlyModeRule'.
func (o RoleManagementPolicyPimOnlyModeRuleOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRule) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyPimOnlyModeRuleOutput) Target() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRule) *RoleManagementPolicyRuleTarget { return v.Target }).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy PIM only mode rule.
type RoleManagementPolicyPimOnlyModeRuleResponse struct {
	// The id of the rule.
	Id *string `pulumi:"id"`
	// The PIM Only Mode settings
	PimOnlyModeSettings *PIMOnlyModeSettingsResponse `pulumi:"pimOnlyModeSettings"`
	// The type of rule
	// Expected value is 'RoleManagementPolicyPimOnlyModeRule'.
	RuleType string `pulumi:"ruleType"`
	// The target of the current rule.
	Target *RoleManagementPolicyRuleTargetResponse `pulumi:"target"`
}

// The role management policy PIM only mode rule.
type RoleManagementPolicyPimOnlyModeRuleResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyPimOnlyModeRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyPimOnlyModeRuleResponse)(nil)).Elem()
}

func (o RoleManagementPolicyPimOnlyModeRuleResponseOutput) ToRoleManagementPolicyPimOnlyModeRuleResponseOutput() RoleManagementPolicyPimOnlyModeRuleResponseOutput {
	return o
}

func (o RoleManagementPolicyPimOnlyModeRuleResponseOutput) ToRoleManagementPolicyPimOnlyModeRuleResponseOutputWithContext(ctx context.Context) RoleManagementPolicyPimOnlyModeRuleResponseOutput {
	return o
}

// The id of the rule.
func (o RoleManagementPolicyPimOnlyModeRuleResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRuleResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The PIM Only Mode settings
func (o RoleManagementPolicyPimOnlyModeRuleResponseOutput) PimOnlyModeSettings() PIMOnlyModeSettingsResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRuleResponse) *PIMOnlyModeSettingsResponse {
		return v.PimOnlyModeSettings
	}).(PIMOnlyModeSettingsResponsePtrOutput)
}

// The type of rule
// Expected value is 'RoleManagementPolicyPimOnlyModeRule'.
func (o RoleManagementPolicyPimOnlyModeRuleResponseOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRuleResponse) string { return v.RuleType }).(pulumi.StringOutput)
}

// The target of the current rule.
func (o RoleManagementPolicyPimOnlyModeRuleResponseOutput) Target() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyPimOnlyModeRuleResponse) *RoleManagementPolicyRuleTargetResponse {
		return v.Target
	}).(RoleManagementPolicyRuleTargetResponsePtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTarget struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which rule is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// RoleManagementPolicyRuleTargetInput is an input type that accepts RoleManagementPolicyRuleTargetArgs and RoleManagementPolicyRuleTargetOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetInput` via:
//
//	RoleManagementPolicyRuleTargetArgs{...}
type RoleManagementPolicyRuleTargetInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput
	ToRoleManagementPolicyRuleTargetOutputWithContext(context.Context) RoleManagementPolicyRuleTargetOutput
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetArgs struct {
	// The caller of the setting.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings pulumi.StringArrayInput `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings pulumi.StringArrayInput `pulumi:"inheritableSettings"`
	// The assignment level to which rule is applied.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// The type of operation.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// The list of target objects.
	TargetObjects pulumi.StringArrayInput `pulumi:"targetObjects"`
}

func (RoleManagementPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return i.ToRoleManagementPolicyRuleTargetOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput)
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i RoleManagementPolicyRuleTargetArgs) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetOutput).ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx)
}

// RoleManagementPolicyRuleTargetPtrInput is an input type that accepts RoleManagementPolicyRuleTargetArgs, RoleManagementPolicyRuleTargetPtr and RoleManagementPolicyRuleTargetPtrOutput values.
// You can construct a concrete instance of `RoleManagementPolicyRuleTargetPtrInput` via:
//
//	        RoleManagementPolicyRuleTargetArgs{...}
//
//	or:
//
//	        nil
type RoleManagementPolicyRuleTargetPtrInput interface {
	pulumi.Input

	ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput
	ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Context) RoleManagementPolicyRuleTargetPtrOutput
}

type roleManagementPolicyRuleTargetPtrType RoleManagementPolicyRuleTargetArgs

func RoleManagementPolicyRuleTargetPtr(v *RoleManagementPolicyRuleTargetArgs) RoleManagementPolicyRuleTargetPtrInput {
	return (*roleManagementPolicyRuleTargetPtrType)(v)
}

func (*roleManagementPolicyRuleTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return i.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (i *roleManagementPolicyRuleTargetPtrType) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutput() RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o.ToRoleManagementPolicyRuleTargetPtrOutputWithContext(context.Background())
}

func (o RoleManagementPolicyRuleTargetOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoleManagementPolicyRuleTarget) *RoleManagementPolicyRuleTarget {
		return &v
	}).(RoleManagementPolicyRuleTargetPtrOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTarget) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetPtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTarget)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutput() RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) ToRoleManagementPolicyRuleTargetPtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetPtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetPtrOutput) Elem() RoleManagementPolicyRuleTargetOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) RoleManagementPolicyRuleTarget {
		if v != nil {
			return *v
		}
		var ret RoleManagementPolicyRuleTarget
		return ret
	}).(RoleManagementPolicyRuleTargetOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetPtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetPtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetPtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetPtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTarget) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponse struct {
	// The caller of the setting.
	Caller *string `pulumi:"caller"`
	// The list of enforced settings.
	EnforcedSettings []string `pulumi:"enforcedSettings"`
	// The list of inheritable settings.
	InheritableSettings []string `pulumi:"inheritableSettings"`
	// The assignment level to which rule is applied.
	Level *string `pulumi:"level"`
	// The type of operation.
	Operations []string `pulumi:"operations"`
	// The list of target objects.
	TargetObjects []string `pulumi:"targetObjects"`
}

// The role management policy rule target.
type RoleManagementPolicyRuleTargetResponseOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutput() RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponseOutput) ToRoleManagementPolicyRuleTargetResponseOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponseOutput {
	return o
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponseOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.EnforcedSettings }).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponseOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.InheritableSettings }).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponseOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponseOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RoleManagementPolicyRuleTargetResponse) []string { return v.TargetObjects }).(pulumi.StringArrayOutput)
}

type RoleManagementPolicyRuleTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (RoleManagementPolicyRuleTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleManagementPolicyRuleTargetResponse)(nil)).Elem()
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutput() RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) ToRoleManagementPolicyRuleTargetResponsePtrOutputWithContext(ctx context.Context) RoleManagementPolicyRuleTargetResponsePtrOutput {
	return o
}

func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Elem() RoleManagementPolicyRuleTargetResponseOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) RoleManagementPolicyRuleTargetResponse {
		if v != nil {
			return *v
		}
		var ret RoleManagementPolicyRuleTargetResponse
		return ret
	}).(RoleManagementPolicyRuleTargetResponseOutput)
}

// The caller of the setting.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The list of enforced settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) EnforcedSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.EnforcedSettings
	}).(pulumi.StringArrayOutput)
}

// The list of inheritable settings.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) InheritableSettings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.InheritableSettings
	}).(pulumi.StringArrayOutput)
}

// The assignment level to which rule is applied.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// The type of operation.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.Operations
	}).(pulumi.StringArrayOutput)
}

// The list of target objects.
func (o RoleManagementPolicyRuleTargetResponsePtrOutput) TargetObjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RoleManagementPolicyRuleTargetResponse) []string {
		if v == nil {
			return nil
		}
		return v.TargetObjects
	}).(pulumi.StringArrayOutput)
}

// The selector expression.
type Selector struct {
	// The list of values to filter in.
	In []string `pulumi:"in"`
	// The selector kind.
	Kind *string `pulumi:"kind"`
	// The list of values to filter out.
	NotIn []string `pulumi:"notIn"`
}

// SelectorInput is an input type that accepts SelectorArgs and SelectorOutput values.
// You can construct a concrete instance of `SelectorInput` via:
//
//	SelectorArgs{...}
type SelectorInput interface {
	pulumi.Input

	ToSelectorOutput() SelectorOutput
	ToSelectorOutputWithContext(context.Context) SelectorOutput
}

// The selector expression.
type SelectorArgs struct {
	// The list of values to filter in.
	In pulumi.StringArrayInput `pulumi:"in"`
	// The selector kind.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The list of values to filter out.
	NotIn pulumi.StringArrayInput `pulumi:"notIn"`
}

func (SelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Selector)(nil)).Elem()
}

func (i SelectorArgs) ToSelectorOutput() SelectorOutput {
	return i.ToSelectorOutputWithContext(context.Background())
}

func (i SelectorArgs) ToSelectorOutputWithContext(ctx context.Context) SelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectorOutput)
}

// SelectorArrayInput is an input type that accepts SelectorArray and SelectorArrayOutput values.
// You can construct a concrete instance of `SelectorArrayInput` via:
//
//	SelectorArray{ SelectorArgs{...} }
type SelectorArrayInput interface {
	pulumi.Input

	ToSelectorArrayOutput() SelectorArrayOutput
	ToSelectorArrayOutputWithContext(context.Context) SelectorArrayOutput
}

type SelectorArray []SelectorInput

func (SelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Selector)(nil)).Elem()
}

func (i SelectorArray) ToSelectorArrayOutput() SelectorArrayOutput {
	return i.ToSelectorArrayOutputWithContext(context.Background())
}

func (i SelectorArray) ToSelectorArrayOutputWithContext(ctx context.Context) SelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectorArrayOutput)
}

// The selector expression.
type SelectorOutput struct{ *pulumi.OutputState }

func (SelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Selector)(nil)).Elem()
}

func (o SelectorOutput) ToSelectorOutput() SelectorOutput {
	return o
}

func (o SelectorOutput) ToSelectorOutputWithContext(ctx context.Context) SelectorOutput {
	return o
}

// The list of values to filter in.
func (o SelectorOutput) In() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Selector) []string { return v.In }).(pulumi.StringArrayOutput)
}

// The selector kind.
func (o SelectorOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Selector) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of values to filter out.
func (o SelectorOutput) NotIn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Selector) []string { return v.NotIn }).(pulumi.StringArrayOutput)
}

type SelectorArrayOutput struct{ *pulumi.OutputState }

func (SelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Selector)(nil)).Elem()
}

func (o SelectorArrayOutput) ToSelectorArrayOutput() SelectorArrayOutput {
	return o
}

func (o SelectorArrayOutput) ToSelectorArrayOutputWithContext(ctx context.Context) SelectorArrayOutput {
	return o
}

func (o SelectorArrayOutput) Index(i pulumi.IntInput) SelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Selector {
		return vs[0].([]Selector)[vs[1].(int)]
	}).(SelectorOutput)
}

// The selector expression.
type SelectorResponse struct {
	// The list of values to filter in.
	In []string `pulumi:"in"`
	// The selector kind.
	Kind *string `pulumi:"kind"`
	// The list of values to filter out.
	NotIn []string `pulumi:"notIn"`
}

// The selector expression.
type SelectorResponseOutput struct{ *pulumi.OutputState }

func (SelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectorResponse)(nil)).Elem()
}

func (o SelectorResponseOutput) ToSelectorResponseOutput() SelectorResponseOutput {
	return o
}

func (o SelectorResponseOutput) ToSelectorResponseOutputWithContext(ctx context.Context) SelectorResponseOutput {
	return o
}

// The list of values to filter in.
func (o SelectorResponseOutput) In() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SelectorResponse) []string { return v.In }).(pulumi.StringArrayOutput)
}

// The selector kind.
func (o SelectorResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectorResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The list of values to filter out.
func (o SelectorResponseOutput) NotIn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SelectorResponse) []string { return v.NotIn }).(pulumi.StringArrayOutput)
}

type SelectorResponseArrayOutput struct{ *pulumi.OutputState }

func (SelectorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SelectorResponse)(nil)).Elem()
}

func (o SelectorResponseArrayOutput) ToSelectorResponseArrayOutput() SelectorResponseArrayOutput {
	return o
}

func (o SelectorResponseArrayOutput) ToSelectorResponseArrayOutputWithContext(ctx context.Context) SelectorResponseArrayOutput {
	return o
}

func (o SelectorResponseArrayOutput) Index(i pulumi.IntInput) SelectorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SelectorResponse {
		return vs[0].([]SelectorResponse)[vs[1].(int)]
	}).(SelectorResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The detail of a user.
type UserSet struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The type of user.
	UserType *string `pulumi:"userType"`
}

// UserSetInput is an input type that accepts UserSetArgs and UserSetOutput values.
// You can construct a concrete instance of `UserSetInput` via:
//
//	UserSetArgs{...}
type UserSetInput interface {
	pulumi.Input

	ToUserSetOutput() UserSetOutput
	ToUserSetOutputWithContext(context.Context) UserSetOutput
}

// The detail of a user.
type UserSetArgs struct {
	// The description of the user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The object id of the user.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup pulumi.BoolPtrInput `pulumi:"isBackup"`
	// The type of user.
	UserType pulumi.StringPtrInput `pulumi:"userType"`
}

func (UserSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSet)(nil)).Elem()
}

func (i UserSetArgs) ToUserSetOutput() UserSetOutput {
	return i.ToUserSetOutputWithContext(context.Background())
}

func (i UserSetArgs) ToUserSetOutputWithContext(ctx context.Context) UserSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSetOutput)
}

// UserSetArrayInput is an input type that accepts UserSetArray and UserSetArrayOutput values.
// You can construct a concrete instance of `UserSetArrayInput` via:
//
//	UserSetArray{ UserSetArgs{...} }
type UserSetArrayInput interface {
	pulumi.Input

	ToUserSetArrayOutput() UserSetArrayOutput
	ToUserSetArrayOutputWithContext(context.Context) UserSetArrayOutput
}

type UserSetArray []UserSetInput

func (UserSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSet)(nil)).Elem()
}

func (i UserSetArray) ToUserSetArrayOutput() UserSetArrayOutput {
	return i.ToUserSetArrayOutputWithContext(context.Background())
}

func (i UserSetArray) ToUserSetArrayOutputWithContext(ctx context.Context) UserSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSetArrayOutput)
}

// The detail of a user.
type UserSetOutput struct{ *pulumi.OutputState }

func (UserSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSet)(nil)).Elem()
}

func (o UserSetOutput) ToUserSetOutput() UserSetOutput {
	return o
}

func (o UserSetOutput) ToUserSetOutputWithContext(ctx context.Context) UserSetOutput {
	return o
}

// The description of the user.
func (o UserSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSet) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o UserSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o UserSetOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserSet) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The type of user.
func (o UserSetOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSet) *string { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserSetArrayOutput struct{ *pulumi.OutputState }

func (UserSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSet)(nil)).Elem()
}

func (o UserSetArrayOutput) ToUserSetArrayOutput() UserSetArrayOutput {
	return o
}

func (o UserSetArrayOutput) ToUserSetArrayOutputWithContext(ctx context.Context) UserSetArrayOutput {
	return o
}

func (o UserSetArrayOutput) Index(i pulumi.IntInput) UserSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSet {
		return vs[0].([]UserSet)[vs[1].(int)]
	}).(UserSetOutput)
}

// The detail of a user.
type UserSetResponse struct {
	// The description of the user.
	Description *string `pulumi:"description"`
	// The object id of the user.
	Id *string `pulumi:"id"`
	// The value indicating whether the user is a backup fallback approver
	IsBackup *bool `pulumi:"isBackup"`
	// The type of user.
	UserType *string `pulumi:"userType"`
}

// The detail of a user.
type UserSetResponseOutput struct{ *pulumi.OutputState }

func (UserSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSetResponse)(nil)).Elem()
}

func (o UserSetResponseOutput) ToUserSetResponseOutput() UserSetResponseOutput {
	return o
}

func (o UserSetResponseOutput) ToUserSetResponseOutputWithContext(ctx context.Context) UserSetResponseOutput {
	return o
}

// The description of the user.
func (o UserSetResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o UserSetResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The value indicating whether the user is a backup fallback approver
func (o UserSetResponseOutput) IsBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *bool { return v.IsBackup }).(pulumi.BoolPtrOutput)
}

// The type of user.
func (o UserSetResponseOutput) UserType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSetResponse) *string { return v.UserType }).(pulumi.StringPtrOutput)
}

type UserSetResponseArrayOutput struct{ *pulumi.OutputState }

func (UserSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSetResponse)(nil)).Elem()
}

func (o UserSetResponseArrayOutput) ToUserSetResponseArrayOutput() UserSetResponseArrayOutput {
	return o
}

func (o UserSetResponseArrayOutput) ToUserSetResponseArrayOutputWithContext(ctx context.Context) UserSetResponseArrayOutput {
	return o
}

func (o UserSetResponseArrayOutput) Index(i pulumi.IntInput) UserSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSetResponse {
		return vs[0].([]UserSetResponse)[vs[1].(int)]
	}).(UserSetResponseOutput)
}

// The detail of a subject.
type UsersOrServicePrincipalSet struct {
	// The display Name of the entity.
	DisplayName *string `pulumi:"displayName"`
	// The object id of the entity.
	Id *string `pulumi:"id"`
	// The type of user.
	Type *string `pulumi:"type"`
}

// UsersOrServicePrincipalSetInput is an input type that accepts UsersOrServicePrincipalSetArgs and UsersOrServicePrincipalSetOutput values.
// You can construct a concrete instance of `UsersOrServicePrincipalSetInput` via:
//
//	UsersOrServicePrincipalSetArgs{...}
type UsersOrServicePrincipalSetInput interface {
	pulumi.Input

	ToUsersOrServicePrincipalSetOutput() UsersOrServicePrincipalSetOutput
	ToUsersOrServicePrincipalSetOutputWithContext(context.Context) UsersOrServicePrincipalSetOutput
}

// The detail of a subject.
type UsersOrServicePrincipalSetArgs struct {
	// The display Name of the entity.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The object id of the entity.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of user.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (UsersOrServicePrincipalSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersOrServicePrincipalSet)(nil)).Elem()
}

func (i UsersOrServicePrincipalSetArgs) ToUsersOrServicePrincipalSetOutput() UsersOrServicePrincipalSetOutput {
	return i.ToUsersOrServicePrincipalSetOutputWithContext(context.Background())
}

func (i UsersOrServicePrincipalSetArgs) ToUsersOrServicePrincipalSetOutputWithContext(ctx context.Context) UsersOrServicePrincipalSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersOrServicePrincipalSetOutput)
}

// UsersOrServicePrincipalSetArrayInput is an input type that accepts UsersOrServicePrincipalSetArray and UsersOrServicePrincipalSetArrayOutput values.
// You can construct a concrete instance of `UsersOrServicePrincipalSetArrayInput` via:
//
//	UsersOrServicePrincipalSetArray{ UsersOrServicePrincipalSetArgs{...} }
type UsersOrServicePrincipalSetArrayInput interface {
	pulumi.Input

	ToUsersOrServicePrincipalSetArrayOutput() UsersOrServicePrincipalSetArrayOutput
	ToUsersOrServicePrincipalSetArrayOutputWithContext(context.Context) UsersOrServicePrincipalSetArrayOutput
}

type UsersOrServicePrincipalSetArray []UsersOrServicePrincipalSetInput

func (UsersOrServicePrincipalSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsersOrServicePrincipalSet)(nil)).Elem()
}

func (i UsersOrServicePrincipalSetArray) ToUsersOrServicePrincipalSetArrayOutput() UsersOrServicePrincipalSetArrayOutput {
	return i.ToUsersOrServicePrincipalSetArrayOutputWithContext(context.Background())
}

func (i UsersOrServicePrincipalSetArray) ToUsersOrServicePrincipalSetArrayOutputWithContext(ctx context.Context) UsersOrServicePrincipalSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersOrServicePrincipalSetArrayOutput)
}

// The detail of a subject.
type UsersOrServicePrincipalSetOutput struct{ *pulumi.OutputState }

func (UsersOrServicePrincipalSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersOrServicePrincipalSet)(nil)).Elem()
}

func (o UsersOrServicePrincipalSetOutput) ToUsersOrServicePrincipalSetOutput() UsersOrServicePrincipalSetOutput {
	return o
}

func (o UsersOrServicePrincipalSetOutput) ToUsersOrServicePrincipalSetOutputWithContext(ctx context.Context) UsersOrServicePrincipalSetOutput {
	return o
}

// The display Name of the entity.
func (o UsersOrServicePrincipalSetOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersOrServicePrincipalSet) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The object id of the entity.
func (o UsersOrServicePrincipalSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersOrServicePrincipalSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of user.
func (o UsersOrServicePrincipalSetOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersOrServicePrincipalSet) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type UsersOrServicePrincipalSetArrayOutput struct{ *pulumi.OutputState }

func (UsersOrServicePrincipalSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsersOrServicePrincipalSet)(nil)).Elem()
}

func (o UsersOrServicePrincipalSetArrayOutput) ToUsersOrServicePrincipalSetArrayOutput() UsersOrServicePrincipalSetArrayOutput {
	return o
}

func (o UsersOrServicePrincipalSetArrayOutput) ToUsersOrServicePrincipalSetArrayOutputWithContext(ctx context.Context) UsersOrServicePrincipalSetArrayOutput {
	return o
}

func (o UsersOrServicePrincipalSetArrayOutput) Index(i pulumi.IntInput) UsersOrServicePrincipalSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UsersOrServicePrincipalSet {
		return vs[0].([]UsersOrServicePrincipalSet)[vs[1].(int)]
	}).(UsersOrServicePrincipalSetOutput)
}

// The detail of a subject.
type UsersOrServicePrincipalSetResponse struct {
	// The display Name of the entity.
	DisplayName *string `pulumi:"displayName"`
	// The object id of the entity.
	Id *string `pulumi:"id"`
	// The type of user.
	Type *string `pulumi:"type"`
}

// The detail of a subject.
type UsersOrServicePrincipalSetResponseOutput struct{ *pulumi.OutputState }

func (UsersOrServicePrincipalSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersOrServicePrincipalSetResponse)(nil)).Elem()
}

func (o UsersOrServicePrincipalSetResponseOutput) ToUsersOrServicePrincipalSetResponseOutput() UsersOrServicePrincipalSetResponseOutput {
	return o
}

func (o UsersOrServicePrincipalSetResponseOutput) ToUsersOrServicePrincipalSetResponseOutputWithContext(ctx context.Context) UsersOrServicePrincipalSetResponseOutput {
	return o
}

// The display Name of the entity.
func (o UsersOrServicePrincipalSetResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersOrServicePrincipalSetResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The object id of the entity.
func (o UsersOrServicePrincipalSetResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersOrServicePrincipalSetResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of user.
func (o UsersOrServicePrincipalSetResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsersOrServicePrincipalSetResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type UsersOrServicePrincipalSetResponseArrayOutput struct{ *pulumi.OutputState }

func (UsersOrServicePrincipalSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsersOrServicePrincipalSetResponse)(nil)).Elem()
}

func (o UsersOrServicePrincipalSetResponseArrayOutput) ToUsersOrServicePrincipalSetResponseArrayOutput() UsersOrServicePrincipalSetResponseArrayOutput {
	return o
}

func (o UsersOrServicePrincipalSetResponseArrayOutput) ToUsersOrServicePrincipalSetResponseArrayOutputWithContext(ctx context.Context) UsersOrServicePrincipalSetResponseArrayOutput {
	return o
}

func (o UsersOrServicePrincipalSetResponseArrayOutput) Index(i pulumi.IntInput) UsersOrServicePrincipalSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UsersOrServicePrincipalSetResponse {
		return vs[0].([]UsersOrServicePrincipalSetResponse)[vs[1].(int)]
	}).(UsersOrServicePrincipalSetResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessReviewHistoryInstanceOutput{})
	pulumi.RegisterOutputType(AccessReviewHistoryInstanceArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewHistoryInstanceResponseOutput{})
	pulumi.RegisterOutputType(AccessReviewHistoryInstanceResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceResponseOutput{})
	pulumi.RegisterOutputType(AccessReviewInstanceResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerResponseOutput{})
	pulumi.RegisterOutputType(AccessReviewReviewerResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewScopeOutput{})
	pulumi.RegisterOutputType(AccessReviewScopeArrayOutput{})
	pulumi.RegisterOutputType(AccessReviewScopeResponseOutput{})
	pulumi.RegisterOutputType(AccessReviewScopeResponseArrayOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsPtrOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponseOutput{})
	pulumi.RegisterOutputType(ApprovalSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ApprovalStageOutput{})
	pulumi.RegisterOutputType(ApprovalStageArrayOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseOutput{})
	pulumi.RegisterOutputType(ApprovalStageResponseArrayOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponsePrincipalOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponsePrincipalPtrOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseRoleDefinitionOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseRoleDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseScopeOutput{})
	pulumi.RegisterOutputType(ExpandedPropertiesResponseScopePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(IdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerArrayOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseOutput{})
	pulumi.RegisterOutputType(ManagementLockOwnerResponseArrayOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageArrayOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageResponseOutput{})
	pulumi.RegisterOutputType(NonComplianceMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(OverrideOutput{})
	pulumi.RegisterOutputType(OverrideArrayOutput{})
	pulumi.RegisterOutputType(OverrideResponseOutput{})
	pulumi.RegisterOutputType(OverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(PIMOnlyModeSettingsOutput{})
	pulumi.RegisterOutputType(PIMOnlyModeSettingsPtrOutput{})
	pulumi.RegisterOutputType(PIMOnlyModeSettingsResponseOutput{})
	pulumi.RegisterOutputType(PIMOnlyModeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMapOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMetadataOutput{})
	pulumi.RegisterOutputType(ParameterDefinitionsValueResponseMetadataPtrOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueMapOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueResponseOutput{})
	pulumi.RegisterOutputType(ParameterValuesValueResponseMapOutput{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionResponseOutput{})
	pulumi.RegisterOutputType(PermissionResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePolicyOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponsePolicyPtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseRoleDefinitionOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseRoleDefinitionPtrOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseScopeOutput{})
	pulumi.RegisterOutputType(PolicyAssignmentPropertiesResponseScopePtrOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionVersionResponseOutput{})
	pulumi.RegisterOutputType(PolicyDefinitionVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PolicyPropertiesResponseScopeOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionVersionResponseOutput{})
	pulumi.RegisterOutputType(PolicySetDefinitionVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyVariableColumnOutput{})
	pulumi.RegisterOutputType(PolicyVariableColumnArrayOutput{})
	pulumi.RegisterOutputType(PolicyVariableColumnResponseOutput{})
	pulumi.RegisterOutputType(PolicyVariableColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyVariableValueColumnValueOutput{})
	pulumi.RegisterOutputType(PolicyVariableValueColumnValueArrayOutput{})
	pulumi.RegisterOutputType(PolicyVariableValueColumnValueResponseOutput{})
	pulumi.RegisterOutputType(PolicyVariableValueColumnValueResponseArrayOutput{})
	pulumi.RegisterOutputType(PrincipalResponseOutput{})
	pulumi.RegisterOutputType(PrincipalResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAssociationPropertiesOutput{})
	pulumi.RegisterOutputType(PrivateLinkAssociationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkAssociationPropertiesExpandedResponseOutput{})
	pulumi.RegisterOutputType(ResourceManagementPrivateLinkEndpointConnectionsResponseOutput{})
	pulumi.RegisterOutputType(ResourceSelectorOutput{})
	pulumi.RegisterOutputType(ResourceSelectorArrayOutput{})
	pulumi.RegisterOutputType(ResourceSelectorResponseOutput{})
	pulumi.RegisterOutputType(ResourceSelectorResponseArrayOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesExpirationOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesExpirationPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseExpirationOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseExpirationPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesScheduleInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesTicketInfoOutput{})
	pulumi.RegisterOutputType(RoleEligibilityScheduleRequestPropertiesTicketInfoPtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyApprovalRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyAuthenticationContextRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyEnablementRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyExpirationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyNotificationRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyPimOnlyModeRuleOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyPimOnlyModeRuleResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetPtrOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponseOutput{})
	pulumi.RegisterOutputType(RoleManagementPolicyRuleTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(SelectorOutput{})
	pulumi.RegisterOutputType(SelectorArrayOutput{})
	pulumi.RegisterOutputType(SelectorResponseOutput{})
	pulumi.RegisterOutputType(SelectorResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserSetOutput{})
	pulumi.RegisterOutputType(UserSetArrayOutput{})
	pulumi.RegisterOutputType(UserSetResponseOutput{})
	pulumi.RegisterOutputType(UserSetResponseArrayOutput{})
	pulumi.RegisterOutputType(UsersOrServicePrincipalSetOutput{})
	pulumi.RegisterOutputType(UsersOrServicePrincipalSetArrayOutput{})
	pulumi.RegisterOutputType(UsersOrServicePrincipalSetResponseOutput{})
	pulumi.RegisterOutputType(UsersOrServicePrincipalSetResponseArrayOutput{})
}
