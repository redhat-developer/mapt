// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A PIM (Privileged Identity Management) Role Eligibility Schedule.
//
// Role Eligibility Schedules are used to limit standing administrator access to privileged roles in Azure PIM. See
// [here](https://learn.microsoft.com/en-us/rest/api/authorization/privileged-role-eligibility-rest-sample) for details.
//
// A Role Eligibility Schedule is uniquely defined by scope, principal, and role. At present, only one instance of this
// resource can exist for a given scope|principal|role tuple.
//
// Note that this resource cannot be updated. Each change leads to a recreation.
//
// Internally, this resource uses the
// [Role Eligibility Schedule Requests](https://learn.microsoft.com/en-us/rest/api/authorization/role-eligibility-schedule-requests?view=rest-authorization-2020-10-01)
// API to create and delete the schedules.
//
// Azure REST API version: 2020-10-01.
type PimRoleEligibilitySchedule struct {
	pulumi.CustomResourceState

	// The approvalId of the role eligibility schedule request.
	ApprovalId pulumi.StringOutput `pulumi:"approvalId"`
	// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
	Condition pulumi.StringPtrOutput `pulumi:"condition"`
	// Version of the condition. Currently accepted value is '2.0'
	ConditionVersion pulumi.StringPtrOutput `pulumi:"conditionVersion"`
	// DateTime when role eligibility schedule request was created
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Additional properties of principal, scope and role definition
	ExpandedProperties ExpandedPropertiesResponseOutput `pulumi:"expandedProperties"`
	// Justification for the role eligibility
	Justification pulumi.StringPtrOutput `pulumi:"justification"`
	// The role eligibility schedule request name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The principal ID.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The principal type of the assigned principal ID.
	PrincipalType pulumi.StringOutput `pulumi:"principalType"`
	// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
	RequestType pulumi.StringPtrOutput `pulumi:"requestType"`
	// Id of the user who created this request
	RequestorId pulumi.StringOutput `pulumi:"requestorId"`
	// The role definition ID.
	RoleDefinitionId pulumi.StringOutput `pulumi:"roleDefinitionId"`
	// Schedule info of the role eligibility schedule
	ScheduleInfo RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput `pulumi:"scheduleInfo"`
	// The role eligibility schedule request scope.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The status of the role eligibility schedule request.
	Status pulumi.StringOutput `pulumi:"status"`
	// The resultant role eligibility schedule id or the role eligibility schedule id being updated
	TargetRoleEligibilityScheduleId pulumi.StringPtrOutput `pulumi:"targetRoleEligibilityScheduleId"`
	// The role eligibility schedule instance id being updated
	TargetRoleEligibilityScheduleInstanceId pulumi.StringPtrOutput `pulumi:"targetRoleEligibilityScheduleInstanceId"`
	// Ticket Info of the role eligibility
	TicketInfo RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput `pulumi:"ticketInfo"`
	// The role eligibility schedule request type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPimRoleEligibilitySchedule registers a new resource with the given unique name, arguments, and options.
func NewPimRoleEligibilitySchedule(ctx *pulumi.Context,
	name string, args *PimRoleEligibilityScheduleArgs, opts ...pulumi.ResourceOption) (*PimRoleEligibilitySchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.RoleDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'RoleDefinitionId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:authorization/v20201001:PimRoleEligibilitySchedule"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PimRoleEligibilitySchedule
	err := ctx.RegisterResource("azure-native:authorization:PimRoleEligibilitySchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPimRoleEligibilitySchedule gets an existing PimRoleEligibilitySchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPimRoleEligibilitySchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PimRoleEligibilityScheduleState, opts ...pulumi.ResourceOption) (*PimRoleEligibilitySchedule, error) {
	var resource PimRoleEligibilitySchedule
	err := ctx.ReadResource("azure-native:authorization:PimRoleEligibilitySchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PimRoleEligibilitySchedule resources.
type pimRoleEligibilityScheduleState struct {
}

type PimRoleEligibilityScheduleState struct {
}

func (PimRoleEligibilityScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pimRoleEligibilityScheduleState)(nil)).Elem()
}

type pimRoleEligibilityScheduleArgs struct {
	// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
	Condition *string `pulumi:"condition"`
	// Version of the condition. Currently accepted value is '2.0'
	ConditionVersion *string `pulumi:"conditionVersion"`
	// Justification for the role eligibility
	Justification *string `pulumi:"justification"`
	// The principal ID.
	PrincipalId string `pulumi:"principalId"`
	// The role definition ID.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// Schedule info of the role eligibility schedule
	ScheduleInfo *RoleEligibilityScheduleRequestPropertiesScheduleInfo `pulumi:"scheduleInfo"`
	// The scope of the role eligibility schedule request to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
	Scope string `pulumi:"scope"`
	// The resultant role eligibility schedule id or the role eligibility schedule id being updated
	TargetRoleEligibilityScheduleId *string `pulumi:"targetRoleEligibilityScheduleId"`
	// The role eligibility schedule instance id being updated
	TargetRoleEligibilityScheduleInstanceId *string `pulumi:"targetRoleEligibilityScheduleInstanceId"`
	// Ticket Info of the role eligibility
	TicketInfo *RoleEligibilityScheduleRequestPropertiesTicketInfo `pulumi:"ticketInfo"`
}

// The set of arguments for constructing a PimRoleEligibilitySchedule resource.
type PimRoleEligibilityScheduleArgs struct {
	// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
	Condition pulumi.StringPtrInput
	// Version of the condition. Currently accepted value is '2.0'
	ConditionVersion pulumi.StringPtrInput
	// Justification for the role eligibility
	Justification pulumi.StringPtrInput
	// The principal ID.
	PrincipalId pulumi.StringInput
	// The role definition ID.
	RoleDefinitionId pulumi.StringInput
	// Schedule info of the role eligibility schedule
	ScheduleInfo RoleEligibilityScheduleRequestPropertiesScheduleInfoPtrInput
	// The scope of the role eligibility schedule request to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
	Scope pulumi.StringInput
	// The resultant role eligibility schedule id or the role eligibility schedule id being updated
	TargetRoleEligibilityScheduleId pulumi.StringPtrInput
	// The role eligibility schedule instance id being updated
	TargetRoleEligibilityScheduleInstanceId pulumi.StringPtrInput
	// Ticket Info of the role eligibility
	TicketInfo RoleEligibilityScheduleRequestPropertiesTicketInfoPtrInput
}

func (PimRoleEligibilityScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pimRoleEligibilityScheduleArgs)(nil)).Elem()
}

type PimRoleEligibilityScheduleInput interface {
	pulumi.Input

	ToPimRoleEligibilityScheduleOutput() PimRoleEligibilityScheduleOutput
	ToPimRoleEligibilityScheduleOutputWithContext(ctx context.Context) PimRoleEligibilityScheduleOutput
}

func (*PimRoleEligibilitySchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**PimRoleEligibilitySchedule)(nil)).Elem()
}

func (i *PimRoleEligibilitySchedule) ToPimRoleEligibilityScheduleOutput() PimRoleEligibilityScheduleOutput {
	return i.ToPimRoleEligibilityScheduleOutputWithContext(context.Background())
}

func (i *PimRoleEligibilitySchedule) ToPimRoleEligibilityScheduleOutputWithContext(ctx context.Context) PimRoleEligibilityScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimRoleEligibilityScheduleOutput)
}

type PimRoleEligibilityScheduleOutput struct{ *pulumi.OutputState }

func (PimRoleEligibilityScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PimRoleEligibilitySchedule)(nil)).Elem()
}

func (o PimRoleEligibilityScheduleOutput) ToPimRoleEligibilityScheduleOutput() PimRoleEligibilityScheduleOutput {
	return o
}

func (o PimRoleEligibilityScheduleOutput) ToPimRoleEligibilityScheduleOutputWithContext(ctx context.Context) PimRoleEligibilityScheduleOutput {
	return o
}

// The approvalId of the role eligibility schedule request.
func (o PimRoleEligibilityScheduleOutput) ApprovalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.ApprovalId }).(pulumi.StringOutput)
}

// The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container'
func (o PimRoleEligibilityScheduleOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringPtrOutput { return v.Condition }).(pulumi.StringPtrOutput)
}

// Version of the condition. Currently accepted value is '2.0'
func (o PimRoleEligibilityScheduleOutput) ConditionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringPtrOutput { return v.ConditionVersion }).(pulumi.StringPtrOutput)
}

// DateTime when role eligibility schedule request was created
func (o PimRoleEligibilityScheduleOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Additional properties of principal, scope and role definition
func (o PimRoleEligibilityScheduleOutput) ExpandedProperties() ExpandedPropertiesResponseOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) ExpandedPropertiesResponseOutput { return v.ExpandedProperties }).(ExpandedPropertiesResponseOutput)
}

// Justification for the role eligibility
func (o PimRoleEligibilityScheduleOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringPtrOutput { return v.Justification }).(pulumi.StringPtrOutput)
}

// The role eligibility schedule request name.
func (o PimRoleEligibilityScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The principal ID.
func (o PimRoleEligibilityScheduleOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The principal type of the assigned principal ID.
func (o PimRoleEligibilityScheduleOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.PrincipalType }).(pulumi.StringOutput)
}

// The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc
func (o PimRoleEligibilityScheduleOutput) RequestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringPtrOutput { return v.RequestType }).(pulumi.StringPtrOutput)
}

// Id of the user who created this request
func (o PimRoleEligibilityScheduleOutput) RequestorId() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.RequestorId }).(pulumi.StringOutput)
}

// The role definition ID.
func (o PimRoleEligibilityScheduleOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// Schedule info of the role eligibility schedule
func (o PimRoleEligibilityScheduleOutput) ScheduleInfo() RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput {
		return v.ScheduleInfo
	}).(RoleEligibilityScheduleRequestPropertiesResponseScheduleInfoPtrOutput)
}

// The role eligibility schedule request scope.
func (o PimRoleEligibilityScheduleOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The status of the role eligibility schedule request.
func (o PimRoleEligibilityScheduleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The resultant role eligibility schedule id or the role eligibility schedule id being updated
func (o PimRoleEligibilityScheduleOutput) TargetRoleEligibilityScheduleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringPtrOutput { return v.TargetRoleEligibilityScheduleId }).(pulumi.StringPtrOutput)
}

// The role eligibility schedule instance id being updated
func (o PimRoleEligibilityScheduleOutput) TargetRoleEligibilityScheduleInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringPtrOutput {
		return v.TargetRoleEligibilityScheduleInstanceId
	}).(pulumi.StringPtrOutput)
}

// Ticket Info of the role eligibility
func (o PimRoleEligibilityScheduleOutput) TicketInfo() RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput {
		return v.TicketInfo
	}).(RoleEligibilityScheduleRequestPropertiesResponseTicketInfoPtrOutput)
}

// The role eligibility schedule request type.
func (o PimRoleEligibilityScheduleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PimRoleEligibilitySchedule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PimRoleEligibilityScheduleOutput{})
}
