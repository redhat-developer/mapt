// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a BuildResource
//
// Uses Azure REST API version 2024-10-02-preview.
//
// Other available API versions: 2023-08-01-preview, 2023-11-02-preview, 2024-02-02-preview, 2024-08-02-preview, 2025-02-02-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native app [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupBuild(ctx *pulumi.Context, args *LookupBuildArgs, opts ...pulumi.InvokeOption) (*LookupBuildResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupBuildResult
	err := ctx.Invoke("azure-native:app:getBuild", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBuildArgs struct {
	// The name of a build.
	BuildName string `pulumi:"buildName"`
	// The name of the builder.
	BuilderName string `pulumi:"builderName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Information pertaining to an individual build.
type LookupBuildResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Status of the build once it has been provisioned.
	BuildStatus string `pulumi:"buildStatus"`
	// Configuration of the build.
	Configuration *BuildConfigurationResponse `pulumi:"configuration"`
	// Container registry that the final image will be uploaded to.
	DestinationContainerRegistry *ContainerRegistryWithCustomImageResponse `pulumi:"destinationContainerRegistry"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Endpoint from which the build logs can be streamed.
	LogStreamEndpoint string `pulumi:"logStreamEndpoint"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Build provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
	TokenEndpoint string `pulumi:"tokenEndpoint"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Endpoint to which the source code should be uploaded.
	UploadEndpoint string `pulumi:"uploadEndpoint"`
}

func LookupBuildOutput(ctx *pulumi.Context, args LookupBuildOutputArgs, opts ...pulumi.InvokeOption) LookupBuildResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBuildResultOutput, error) {
			args := v.(LookupBuildArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:app:getBuild", args, LookupBuildResultOutput{}, options).(LookupBuildResultOutput), nil
		}).(LookupBuildResultOutput)
}

type LookupBuildOutputArgs struct {
	// The name of a build.
	BuildName pulumi.StringInput `pulumi:"buildName"`
	// The name of the builder.
	BuilderName pulumi.StringInput `pulumi:"builderName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupBuildOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBuildArgs)(nil)).Elem()
}

// Information pertaining to an individual build.
type LookupBuildResultOutput struct{ *pulumi.OutputState }

func (LookupBuildResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBuildResult)(nil)).Elem()
}

func (o LookupBuildResultOutput) ToLookupBuildResultOutput() LookupBuildResultOutput {
	return o
}

func (o LookupBuildResultOutput) ToLookupBuildResultOutputWithContext(ctx context.Context) LookupBuildResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupBuildResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Status of the build once it has been provisioned.
func (o LookupBuildResultOutput) BuildStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.BuildStatus }).(pulumi.StringOutput)
}

// Configuration of the build.
func (o LookupBuildResultOutput) Configuration() BuildConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LookupBuildResult) *BuildConfigurationResponse { return v.Configuration }).(BuildConfigurationResponsePtrOutput)
}

// Container registry that the final image will be uploaded to.
func (o LookupBuildResultOutput) DestinationContainerRegistry() ContainerRegistryWithCustomImageResponsePtrOutput {
	return o.ApplyT(func(v LookupBuildResult) *ContainerRegistryWithCustomImageResponse {
		return v.DestinationContainerRegistry
	}).(ContainerRegistryWithCustomImageResponsePtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupBuildResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Id }).(pulumi.StringOutput)
}

// Endpoint from which the build logs can be streamed.
func (o LookupBuildResultOutput) LogStreamEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.LogStreamEndpoint }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupBuildResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Name }).(pulumi.StringOutput)
}

// Build provisioning state.
func (o LookupBuildResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupBuildResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
func (o LookupBuildResultOutput) TokenEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.TokenEndpoint }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupBuildResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Type }).(pulumi.StringOutput)
}

// Endpoint to which the source code should be uploaded.
func (o LookupBuildResultOutput) UploadEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.UploadEndpoint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBuildResultOutput{})
}
