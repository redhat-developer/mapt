// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package app

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information pertaining to an individual build.
//
// Uses Azure REST API version 2024-10-02-preview. In version 2.x of the Azure Native provider, it used API version 2023-08-01-preview.
//
// Other available API versions: 2023-08-01-preview, 2023-11-02-preview, 2024-02-02-preview, 2024-08-02-preview, 2025-02-02-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native app [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type Build struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Status of the build once it has been provisioned.
	BuildStatus pulumi.StringOutput `pulumi:"buildStatus"`
	// Configuration of the build.
	Configuration BuildConfigurationResponsePtrOutput `pulumi:"configuration"`
	// Container registry that the final image will be uploaded to.
	DestinationContainerRegistry ContainerRegistryWithCustomImageResponsePtrOutput `pulumi:"destinationContainerRegistry"`
	// Endpoint from which the build logs can be streamed.
	LogStreamEndpoint pulumi.StringOutput `pulumi:"logStreamEndpoint"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Build provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
	TokenEndpoint pulumi.StringOutput `pulumi:"tokenEndpoint"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Endpoint to which the source code should be uploaded.
	UploadEndpoint pulumi.StringOutput `pulumi:"uploadEndpoint"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BuilderName == nil {
		return nil, errors.New("invalid value for required argument 'BuilderName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:app/v20230801preview:Build"),
		},
		{
			Type: pulumi.String("azure-native:app/v20231102preview:Build"),
		},
		{
			Type: pulumi.String("azure-native:app/v20240202preview:Build"),
		},
		{
			Type: pulumi.String("azure-native:app/v20240802preview:Build"),
		},
		{
			Type: pulumi.String("azure-native:app/v20241002preview:Build"),
		},
		{
			Type: pulumi.String("azure-native:app/v20250202preview:Build"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Build
	err := ctx.RegisterResource("azure-native:app:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("azure-native:app:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
}

type BuildState struct {
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	// The name of a build.
	BuildName *string `pulumi:"buildName"`
	// The name of the builder.
	BuilderName string `pulumi:"builderName"`
	// Configuration of the build.
	Configuration *BuildConfiguration `pulumi:"configuration"`
	// Container registry that the final image will be uploaded to.
	DestinationContainerRegistry *ContainerRegistryWithCustomImage `pulumi:"destinationContainerRegistry"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	// The name of a build.
	BuildName pulumi.StringPtrInput
	// The name of the builder.
	BuilderName pulumi.StringInput
	// Configuration of the build.
	Configuration BuildConfigurationPtrInput
	// Container registry that the final image will be uploaded to.
	DestinationContainerRegistry ContainerRegistryWithCustomImagePtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(ctx context.Context) BuildOutput
}

func (*Build) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *Build) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i *Build) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

// The Azure API version of the resource.
func (o BuildOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Status of the build once it has been provisioned.
func (o BuildOutput) BuildStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.BuildStatus }).(pulumi.StringOutput)
}

// Configuration of the build.
func (o BuildOutput) Configuration() BuildConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *Build) BuildConfigurationResponsePtrOutput { return v.Configuration }).(BuildConfigurationResponsePtrOutput)
}

// Container registry that the final image will be uploaded to.
func (o BuildOutput) DestinationContainerRegistry() ContainerRegistryWithCustomImageResponsePtrOutput {
	return o.ApplyT(func(v *Build) ContainerRegistryWithCustomImageResponsePtrOutput {
		return v.DestinationContainerRegistry
	}).(ContainerRegistryWithCustomImageResponsePtrOutput)
}

// Endpoint from which the build logs can be streamed.
func (o BuildOutput) LogStreamEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.LogStreamEndpoint }).(pulumi.StringOutput)
}

// The name of the resource
func (o BuildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Build provisioning state.
func (o BuildOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o BuildOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Build) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Endpoint to use to retrieve an authentication token for log streaming and uploading source code.
func (o BuildOutput) TokenEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.TokenEndpoint }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o BuildOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Endpoint to which the source code should be uploaded.
func (o BuildOutput) UploadEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.UploadEndpoint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BuildOutput{})
}
