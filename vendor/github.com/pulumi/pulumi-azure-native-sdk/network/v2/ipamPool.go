// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Instance of Pool resource.
//
// Uses Azure REST API version 2024-01-01-preview.
//
// Other available API versions: 2024-05-01.
type IpamPool struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of IpamPool resource properties which are specific to the Pool resource.
	Properties IpamPoolPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewIpamPool registers a new resource with the given unique name, arguments, and options.
func NewIpamPool(ctx *pulumi.Context,
	name string, args *IpamPoolArgs, opts ...pulumi.ResourceOption) (*IpamPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkManagerName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerName'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20240101preview:IpamPool"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240501:IpamPool"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource IpamPool
	err := ctx.RegisterResource("azure-native:network:IpamPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpamPool gets an existing IpamPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpamPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpamPoolState, opts ...pulumi.ResourceOption) (*IpamPool, error) {
	var resource IpamPool
	err := ctx.ReadResource("azure-native:network:IpamPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpamPool resources.
type ipamPoolState struct {
}

type IpamPoolState struct {
}

func (IpamPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamPoolState)(nil)).Elem()
}

type ipamPoolArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the network manager.
	NetworkManagerName string `pulumi:"networkManagerName"`
	// IP Address Manager Pool resource name.
	PoolName *string `pulumi:"poolName"`
	// Properties of IpamPool resource properties which are specific to the Pool resource.
	Properties IpamPoolProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a IpamPool resource.
type IpamPoolArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the network manager.
	NetworkManagerName pulumi.StringInput
	// IP Address Manager Pool resource name.
	PoolName pulumi.StringPtrInput
	// Properties of IpamPool resource properties which are specific to the Pool resource.
	Properties IpamPoolPropertiesInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (IpamPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipamPoolArgs)(nil)).Elem()
}

type IpamPoolInput interface {
	pulumi.Input

	ToIpamPoolOutput() IpamPoolOutput
	ToIpamPoolOutputWithContext(ctx context.Context) IpamPoolOutput
}

func (*IpamPool) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamPool)(nil)).Elem()
}

func (i *IpamPool) ToIpamPoolOutput() IpamPoolOutput {
	return i.ToIpamPoolOutputWithContext(context.Background())
}

func (i *IpamPool) ToIpamPoolOutputWithContext(ctx context.Context) IpamPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpamPoolOutput)
}

type IpamPoolOutput struct{ *pulumi.OutputState }

func (IpamPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpamPool)(nil)).Elem()
}

func (o IpamPoolOutput) ToIpamPoolOutput() IpamPoolOutput {
	return o
}

func (o IpamPoolOutput) ToIpamPoolOutputWithContext(ctx context.Context) IpamPoolOutput {
	return o
}

// The geo-location where the resource lives
func (o IpamPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o IpamPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of IpamPool resource properties which are specific to the Pool resource.
func (o IpamPoolOutput) Properties() IpamPoolPropertiesResponseOutput {
	return o.ApplyT(func(v *IpamPool) IpamPoolPropertiesResponseOutput { return v.Properties }).(IpamPoolPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o IpamPoolOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *IpamPool) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o IpamPoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IpamPool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o IpamPoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *IpamPool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IpamPoolOutput{})
}
