// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Instance of StaticCidr resource.
//
// Uses Azure REST API version 2024-01-01-preview.
//
// Other available API versions: 2024-05-01.
type StaticCidr struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of static CIDR resource.
	Properties StaticCidrPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStaticCidr registers a new resource with the given unique name, arguments, and options.
func NewStaticCidr(ctx *pulumi.Context,
	name string, args *StaticCidrArgs, opts ...pulumi.ResourceOption) (*StaticCidr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkManagerName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkManagerName'")
	}
	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20240101preview:StaticCidr"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240501:StaticCidr"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StaticCidr
	err := ctx.RegisterResource("azure-native:network:StaticCidr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticCidr gets an existing StaticCidr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticCidr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticCidrState, opts ...pulumi.ResourceOption) (*StaticCidr, error) {
	var resource StaticCidr
	err := ctx.ReadResource("azure-native:network:StaticCidr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticCidr resources.
type staticCidrState struct {
}

type StaticCidrState struct {
}

func (StaticCidrState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticCidrState)(nil)).Elem()
}

type staticCidrArgs struct {
	// The name of the network manager.
	NetworkManagerName string `pulumi:"networkManagerName"`
	// IP Address Manager Pool resource name.
	PoolName string `pulumi:"poolName"`
	// Properties of static CIDR resource.
	Properties *StaticCidrProperties `pulumi:"properties"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Static Cidr allocation name.
	StaticCidrName *string `pulumi:"staticCidrName"`
}

// The set of arguments for constructing a StaticCidr resource.
type StaticCidrArgs struct {
	// The name of the network manager.
	NetworkManagerName pulumi.StringInput
	// IP Address Manager Pool resource name.
	PoolName pulumi.StringInput
	// Properties of static CIDR resource.
	Properties StaticCidrPropertiesPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Static Cidr allocation name.
	StaticCidrName pulumi.StringPtrInput
}

func (StaticCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticCidrArgs)(nil)).Elem()
}

type StaticCidrInput interface {
	pulumi.Input

	ToStaticCidrOutput() StaticCidrOutput
	ToStaticCidrOutputWithContext(ctx context.Context) StaticCidrOutput
}

func (*StaticCidr) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticCidr)(nil)).Elem()
}

func (i *StaticCidr) ToStaticCidrOutput() StaticCidrOutput {
	return i.ToStaticCidrOutputWithContext(context.Background())
}

func (i *StaticCidr) ToStaticCidrOutputWithContext(ctx context.Context) StaticCidrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticCidrOutput)
}

type StaticCidrOutput struct{ *pulumi.OutputState }

func (StaticCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticCidr)(nil)).Elem()
}

func (o StaticCidrOutput) ToStaticCidrOutput() StaticCidrOutput {
	return o
}

func (o StaticCidrOutput) ToStaticCidrOutputWithContext(ctx context.Context) StaticCidrOutput {
	return o
}

// The name of the resource
func (o StaticCidrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticCidr) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of static CIDR resource.
func (o StaticCidrOutput) Properties() StaticCidrPropertiesResponseOutput {
	return o.ApplyT(func(v *StaticCidr) StaticCidrPropertiesResponseOutput { return v.Properties }).(StaticCidrPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o StaticCidrOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *StaticCidr) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o StaticCidrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticCidr) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(StaticCidrOutput{})
}
