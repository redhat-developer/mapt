// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// P2SVpnServerConfiguration Resource.
//
// Uses Azure REST API version 2019-07-01. In version 2.x of the Azure Native provider, it used API version 2019-07-01.
//
// Other available API versions: 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type P2sVpnServerConfiguration struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Properties of the P2SVpnServer configuration.
	Properties P2SVpnServerConfigurationPropertiesResponseOutput `pulumi:"properties"`
}

// NewP2sVpnServerConfiguration registers a new resource with the given unique name, arguments, and options.
func NewP2sVpnServerConfiguration(ctx *pulumi.Context,
	name string, args *P2sVpnServerConfigurationArgs, opts ...pulumi.ResourceOption) (*P2sVpnServerConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualWanName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualWanName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20180801:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181001:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181101:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181201:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190201:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190401:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190601:P2sVpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190701:P2sVpnServerConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource P2sVpnServerConfiguration
	err := ctx.RegisterResource("azure-native:network:P2sVpnServerConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetP2sVpnServerConfiguration gets an existing P2sVpnServerConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetP2sVpnServerConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *P2sVpnServerConfigurationState, opts ...pulumi.ResourceOption) (*P2sVpnServerConfiguration, error) {
	var resource P2sVpnServerConfiguration
	err := ctx.ReadResource("azure-native:network:P2sVpnServerConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering P2sVpnServerConfiguration resources.
type p2sVpnServerConfigurationState struct {
}

type P2sVpnServerConfigurationState struct {
}

func (P2sVpnServerConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*p2sVpnServerConfigurationState)(nil)).Elem()
}

type p2sVpnServerConfigurationArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// The name of the P2SVpnServerConfiguration.
	P2SVpnServerConfigurationName *string `pulumi:"p2SVpnServerConfigurationName"`
	// Properties of the P2SVpnServer configuration.
	Properties *P2SVpnServerConfigurationProperties `pulumi:"properties"`
	// The resource group name of the VirtualWan.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the VirtualWan.
	VirtualWanName string `pulumi:"virtualWanName"`
}

// The set of arguments for constructing a P2sVpnServerConfiguration resource.
type P2sVpnServerConfigurationArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// The name of the P2SVpnServerConfiguration.
	P2SVpnServerConfigurationName pulumi.StringPtrInput
	// Properties of the P2SVpnServer configuration.
	Properties P2SVpnServerConfigurationPropertiesPtrInput
	// The resource group name of the VirtualWan.
	ResourceGroupName pulumi.StringInput
	// The name of the VirtualWan.
	VirtualWanName pulumi.StringInput
}

func (P2sVpnServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*p2sVpnServerConfigurationArgs)(nil)).Elem()
}

type P2sVpnServerConfigurationInput interface {
	pulumi.Input

	ToP2sVpnServerConfigurationOutput() P2sVpnServerConfigurationOutput
	ToP2sVpnServerConfigurationOutputWithContext(ctx context.Context) P2sVpnServerConfigurationOutput
}

func (*P2sVpnServerConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**P2sVpnServerConfiguration)(nil)).Elem()
}

func (i *P2sVpnServerConfiguration) ToP2sVpnServerConfigurationOutput() P2sVpnServerConfigurationOutput {
	return i.ToP2sVpnServerConfigurationOutputWithContext(context.Background())
}

func (i *P2sVpnServerConfiguration) ToP2sVpnServerConfigurationOutputWithContext(ctx context.Context) P2sVpnServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(P2sVpnServerConfigurationOutput)
}

type P2sVpnServerConfigurationOutput struct{ *pulumi.OutputState }

func (P2sVpnServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**P2sVpnServerConfiguration)(nil)).Elem()
}

func (o P2sVpnServerConfigurationOutput) ToP2sVpnServerConfigurationOutput() P2sVpnServerConfigurationOutput {
	return o
}

func (o P2sVpnServerConfigurationOutput) ToP2sVpnServerConfigurationOutputWithContext(ctx context.Context) P2sVpnServerConfigurationOutput {
	return o
}

// The Azure API version of the resource.
func (o P2sVpnServerConfigurationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *P2sVpnServerConfiguration) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o P2sVpnServerConfigurationOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *P2sVpnServerConfiguration) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The name of the resource that is unique within a resource group. This name can be used to access the resource.
func (o P2sVpnServerConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *P2sVpnServerConfiguration) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties of the P2SVpnServer configuration.
func (o P2sVpnServerConfigurationOutput) Properties() P2SVpnServerConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v *P2sVpnServerConfiguration) P2SVpnServerConfigurationPropertiesResponseOutput {
		return v.Properties
	}).(P2SVpnServerConfigurationPropertiesResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(P2sVpnServerConfigurationOutput{})
}
