// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the specified NSP link resource.
//
// Uses Azure REST API version 2023-08-01-preview.
//
// Other available API versions: 2021-02-01-preview, 2023-07-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupNspLink(ctx *pulumi.Context, args *LookupNspLinkArgs, opts ...pulumi.InvokeOption) (*LookupNspLinkResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupNspLinkResult
	err := ctx.Invoke("azure-native:network:getNspLink", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNspLinkArgs struct {
	// The name of the NSP link.
	LinkName string `pulumi:"linkName"`
	// The name of the network security perimeter.
	NetworkSecurityPerimeterName string `pulumi:"networkSecurityPerimeterName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The network security perimeter link resource
type LookupNspLinkResult struct {
	// Perimeter ARM Id for the remote NSP with which the link gets created in Auto-approval mode. It should be used when the NSP admin have Microsoft.Network/networkSecurityPerimeters/linkPerimeter/action permission on the remote NSP resource.
	AutoApprovedRemotePerimeterResourceId *string `pulumi:"autoApprovedRemotePerimeterResourceId"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// A message passed to the owner of the remote NSP link resource with this connection request. In case of Auto-approved flow, it is default to 'Auto Approved'. Restricted to 140 chars.
	Description *string `pulumi:"description"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag string `pulumi:"etag"`
	// Resource ID.
	Id string `pulumi:"id"`
	// Local Inbound profile names to which Inbound is allowed. Use ['*'] to allow inbound to all profiles.
	LocalInboundProfiles []string `pulumi:"localInboundProfiles"`
	// Local Outbound profile names from which Outbound is allowed. In current version, it is readonly property and it's value is set to ['*'] to allow outbound from all profiles. In later version, user will be able to modify it.
	LocalOutboundProfiles []string `pulumi:"localOutboundProfiles"`
	// Resource name.
	Name string `pulumi:"name"`
	// The provisioning state of the NSP Link resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Remote Inbound profile names to which Inbound is allowed. Use ['*'] to allow inbound to all profiles. This property can only be updated in auto-approval mode.
	RemoteInboundProfiles []string `pulumi:"remoteInboundProfiles"`
	// Remote Outbound profile names from which Outbound is allowed. In current version, it is readonly property and it's value is set to ['*'] to allow outbound from all profiles. In later version, user will be able to modify it.
	RemoteOutboundProfiles []string `pulumi:"remoteOutboundProfiles"`
	// Remote NSP Guid with which the link gets created.
	RemotePerimeterGuid string `pulumi:"remotePerimeterGuid"`
	// Remote NSP location with which the link gets created.
	RemotePerimeterLocation string `pulumi:"remotePerimeterLocation"`
	// The NSP link state.
	Status string `pulumi:"status"`
	// Resource type.
	Type string `pulumi:"type"`
}

func LookupNspLinkOutput(ctx *pulumi.Context, args LookupNspLinkOutputArgs, opts ...pulumi.InvokeOption) LookupNspLinkResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNspLinkResultOutput, error) {
			args := v.(LookupNspLinkArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:network:getNspLink", args, LookupNspLinkResultOutput{}, options).(LookupNspLinkResultOutput), nil
		}).(LookupNspLinkResultOutput)
}

type LookupNspLinkOutputArgs struct {
	// The name of the NSP link.
	LinkName pulumi.StringInput `pulumi:"linkName"`
	// The name of the network security perimeter.
	NetworkSecurityPerimeterName pulumi.StringInput `pulumi:"networkSecurityPerimeterName"`
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupNspLinkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNspLinkArgs)(nil)).Elem()
}

// The network security perimeter link resource
type LookupNspLinkResultOutput struct{ *pulumi.OutputState }

func (LookupNspLinkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNspLinkResult)(nil)).Elem()
}

func (o LookupNspLinkResultOutput) ToLookupNspLinkResultOutput() LookupNspLinkResultOutput {
	return o
}

func (o LookupNspLinkResultOutput) ToLookupNspLinkResultOutputWithContext(ctx context.Context) LookupNspLinkResultOutput {
	return o
}

// Perimeter ARM Id for the remote NSP with which the link gets created in Auto-approval mode. It should be used when the NSP admin have Microsoft.Network/networkSecurityPerimeters/linkPerimeter/action permission on the remote NSP resource.
func (o LookupNspLinkResultOutput) AutoApprovedRemotePerimeterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNspLinkResult) *string { return v.AutoApprovedRemotePerimeterResourceId }).(pulumi.StringPtrOutput)
}

// The Azure API version of the resource.
func (o LookupNspLinkResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// A message passed to the owner of the remote NSP link resource with this connection request. In case of Auto-approved flow, it is default to 'Auto Approved'. Restricted to 140 chars.
func (o LookupNspLinkResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNspLinkResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o LookupNspLinkResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Resource ID.
func (o LookupNspLinkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.Id }).(pulumi.StringOutput)
}

// Local Inbound profile names to which Inbound is allowed. Use ['*'] to allow inbound to all profiles.
func (o LookupNspLinkResultOutput) LocalInboundProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNspLinkResult) []string { return v.LocalInboundProfiles }).(pulumi.StringArrayOutput)
}

// Local Outbound profile names from which Outbound is allowed. In current version, it is readonly property and it's value is set to ['*'] to allow outbound from all profiles. In later version, user will be able to modify it.
func (o LookupNspLinkResultOutput) LocalOutboundProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNspLinkResult) []string { return v.LocalOutboundProfiles }).(pulumi.StringArrayOutput)
}

// Resource name.
func (o LookupNspLinkResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the NSP Link resource.
func (o LookupNspLinkResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Remote Inbound profile names to which Inbound is allowed. Use ['*'] to allow inbound to all profiles. This property can only be updated in auto-approval mode.
func (o LookupNspLinkResultOutput) RemoteInboundProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNspLinkResult) []string { return v.RemoteInboundProfiles }).(pulumi.StringArrayOutput)
}

// Remote Outbound profile names from which Outbound is allowed. In current version, it is readonly property and it's value is set to ['*'] to allow outbound from all profiles. In later version, user will be able to modify it.
func (o LookupNspLinkResultOutput) RemoteOutboundProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNspLinkResult) []string { return v.RemoteOutboundProfiles }).(pulumi.StringArrayOutput)
}

// Remote NSP Guid with which the link gets created.
func (o LookupNspLinkResultOutput) RemotePerimeterGuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.RemotePerimeterGuid }).(pulumi.StringOutput)
}

// Remote NSP location with which the link gets created.
func (o LookupNspLinkResultOutput) RemotePerimeterLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.RemotePerimeterLocation }).(pulumi.StringOutput)
}

// The NSP link state.
func (o LookupNspLinkResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.Status }).(pulumi.StringOutput)
}

// Resource type.
func (o LookupNspLinkResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNspLinkResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNspLinkResultOutput{})
}
