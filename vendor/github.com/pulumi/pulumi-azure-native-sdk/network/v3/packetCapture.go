// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information about packet capture session.
//
// Uses Azure REST API version 2024-05-01. In version 2.x of the Azure Native provider, it used API version 2023-02-01.
//
// Other available API versions: 2018-06-01, 2018-07-01, 2018-08-01, 2018-10-01, 2018-11-01, 2018-12-01, 2019-02-01, 2019-04-01, 2019-06-01, 2019-07-01, 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type PacketCapture struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket pulumi.Float64PtrOutput `pulumi:"bytesToCapturePerPacket"`
	// The capture setting holds the 'FileCount', 'FileSizeInBytes', 'SessionTimeLimitInSeconds' values.
	CaptureSettings PacketCaptureSettingsResponsePtrOutput `pulumi:"captureSettings"`
	// This continuous capture is a nullable boolean, which can hold 'null', 'true' or 'false' value. If we do not pass this parameter, it would be consider as 'null', default value is 'null'.
	ContinuousCapture pulumi.BoolPtrOutput `pulumi:"continuousCapture"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A list of packet capture filters.
	Filters PacketCaptureFilterResponseArrayOutput `pulumi:"filters"`
	// Name of the packet capture session.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the packet capture session.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are empty, then the packet capture will run on all instances of AzureVMSS.
	Scope PacketCaptureMachineScopeResponsePtrOutput `pulumi:"scope"`
	// The storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocationResponseOutput `pulumi:"storageLocation"`
	// The ID of the targeted resource, only AzureVM and AzureVMSS as target type are currently supported.
	Target pulumi.StringOutput `pulumi:"target"`
	// Target type of the resource provided.
	TargetType pulumi.StringPtrOutput `pulumi:"targetType"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds pulumi.IntPtrOutput `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession pulumi.Float64PtrOutput `pulumi:"totalBytesPerSession"`
}

// NewPacketCapture registers a new resource with the given unique name, arguments, and options.
func NewPacketCapture(ctx *pulumi.Context,
	name string, args *PacketCaptureArgs, opts ...pulumi.ResourceOption) (*PacketCapture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkWatcherName == nil {
		return nil, errors.New("invalid value for required argument 'NetworkWatcherName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageLocation == nil {
		return nil, errors.New("invalid value for required argument 'StorageLocation'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.BytesToCapturePerPacket == nil {
		args.BytesToCapturePerPacket = pulumi.Float64Ptr(0.0)
	}
	if args.CaptureSettings != nil {
		args.CaptureSettings = args.CaptureSettings.ToPacketCaptureSettingsPtrOutput().ApplyT(func(v *PacketCaptureSettings) *PacketCaptureSettings { return v.Defaults() }).(PacketCaptureSettingsPtrOutput)
	}
	if args.TimeLimitInSeconds == nil {
		args.TimeLimitInSeconds = pulumi.IntPtr(18000)
	}
	if args.TotalBytesPerSession == nil {
		args.TotalBytesPerSession = pulumi.Float64Ptr(1073741824.0)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20160901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20161201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20170901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20171001:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20171101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180401:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20180801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181001:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20181201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190401:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210801:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220701:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20221101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230201:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230401:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230601:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20231101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240101:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240301:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240501:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240701:PacketCapture"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PacketCapture
	err := ctx.RegisterResource("azure-native:network:PacketCapture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPacketCapture gets an existing PacketCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PacketCaptureState, opts ...pulumi.ResourceOption) (*PacketCapture, error) {
	var resource PacketCapture
	err := ctx.ReadResource("azure-native:network:PacketCapture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PacketCapture resources.
type packetCaptureState struct {
}

type PacketCaptureState struct {
}

func (PacketCaptureState) ElementType() reflect.Type {
	return reflect.TypeOf((*packetCaptureState)(nil)).Elem()
}

type packetCaptureArgs struct {
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *float64 `pulumi:"bytesToCapturePerPacket"`
	// The capture setting holds the 'FileCount', 'FileSizeInBytes', 'SessionTimeLimitInSeconds' values.
	CaptureSettings *PacketCaptureSettings `pulumi:"captureSettings"`
	// This continuous capture is a nullable boolean, which can hold 'null', 'true' or 'false' value. If we do not pass this parameter, it would be consider as 'null', default value is 'null'.
	ContinuousCapture *bool `pulumi:"continuousCapture"`
	// A list of packet capture filters.
	Filters []PacketCaptureFilter `pulumi:"filters"`
	// The name of the network watcher.
	NetworkWatcherName string `pulumi:"networkWatcherName"`
	// The name of the packet capture session.
	PacketCaptureName *string `pulumi:"packetCaptureName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are empty, then the packet capture will run on all instances of AzureVMSS.
	Scope *PacketCaptureMachineScope `pulumi:"scope"`
	// The storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocation `pulumi:"storageLocation"`
	// The ID of the targeted resource, only AzureVM and AzureVMSS as target type are currently supported.
	Target string `pulumi:"target"`
	// Target type of the resource provided.
	TargetType *PacketCaptureTargetType `pulumi:"targetType"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession *float64 `pulumi:"totalBytesPerSession"`
}

// The set of arguments for constructing a PacketCapture resource.
type PacketCaptureArgs struct {
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket pulumi.Float64PtrInput
	// The capture setting holds the 'FileCount', 'FileSizeInBytes', 'SessionTimeLimitInSeconds' values.
	CaptureSettings PacketCaptureSettingsPtrInput
	// This continuous capture is a nullable boolean, which can hold 'null', 'true' or 'false' value. If we do not pass this parameter, it would be consider as 'null', default value is 'null'.
	ContinuousCapture pulumi.BoolPtrInput
	// A list of packet capture filters.
	Filters PacketCaptureFilterArrayInput
	// The name of the network watcher.
	NetworkWatcherName pulumi.StringInput
	// The name of the packet capture session.
	PacketCaptureName pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are empty, then the packet capture will run on all instances of AzureVMSS.
	Scope PacketCaptureMachineScopePtrInput
	// The storage location for a packet capture session.
	StorageLocation PacketCaptureStorageLocationInput
	// The ID of the targeted resource, only AzureVM and AzureVMSS as target type are currently supported.
	Target pulumi.StringInput
	// Target type of the resource provided.
	TargetType PacketCaptureTargetTypePtrInput
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds pulumi.IntPtrInput
	// Maximum size of the capture output.
	TotalBytesPerSession pulumi.Float64PtrInput
}

func (PacketCaptureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packetCaptureArgs)(nil)).Elem()
}

type PacketCaptureInput interface {
	pulumi.Input

	ToPacketCaptureOutput() PacketCaptureOutput
	ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput
}

func (*PacketCapture) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketCapture)(nil)).Elem()
}

func (i *PacketCapture) ToPacketCaptureOutput() PacketCaptureOutput {
	return i.ToPacketCaptureOutputWithContext(context.Background())
}

func (i *PacketCapture) ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketCaptureOutput)
}

type PacketCaptureOutput struct{ *pulumi.OutputState }

func (PacketCaptureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketCapture)(nil)).Elem()
}

func (o PacketCaptureOutput) ToPacketCaptureOutput() PacketCaptureOutput {
	return o
}

func (o PacketCaptureOutput) ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput {
	return o
}

// The Azure API version of the resource.
func (o PacketCaptureOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Number of bytes captured per packet, the remaining bytes are truncated.
func (o PacketCaptureOutput) BytesToCapturePerPacket() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.Float64PtrOutput { return v.BytesToCapturePerPacket }).(pulumi.Float64PtrOutput)
}

// The capture setting holds the 'FileCount', 'FileSizeInBytes', 'SessionTimeLimitInSeconds' values.
func (o PacketCaptureOutput) CaptureSettings() PacketCaptureSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PacketCapture) PacketCaptureSettingsResponsePtrOutput { return v.CaptureSettings }).(PacketCaptureSettingsResponsePtrOutput)
}

// This continuous capture is a nullable boolean, which can hold 'null', 'true' or 'false' value. If we do not pass this parameter, it would be consider as 'null', default value is 'null'.
func (o PacketCaptureOutput) ContinuousCapture() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.BoolPtrOutput { return v.ContinuousCapture }).(pulumi.BoolPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o PacketCaptureOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A list of packet capture filters.
func (o PacketCaptureOutput) Filters() PacketCaptureFilterResponseArrayOutput {
	return o.ApplyT(func(v *PacketCapture) PacketCaptureFilterResponseArrayOutput { return v.Filters }).(PacketCaptureFilterResponseArrayOutput)
}

// Name of the packet capture session.
func (o PacketCaptureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the packet capture session.
func (o PacketCaptureOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are empty, then the packet capture will run on all instances of AzureVMSS.
func (o PacketCaptureOutput) Scope() PacketCaptureMachineScopeResponsePtrOutput {
	return o.ApplyT(func(v *PacketCapture) PacketCaptureMachineScopeResponsePtrOutput { return v.Scope }).(PacketCaptureMachineScopeResponsePtrOutput)
}

// The storage location for a packet capture session.
func (o PacketCaptureOutput) StorageLocation() PacketCaptureStorageLocationResponseOutput {
	return o.ApplyT(func(v *PacketCapture) PacketCaptureStorageLocationResponseOutput { return v.StorageLocation }).(PacketCaptureStorageLocationResponseOutput)
}

// The ID of the targeted resource, only AzureVM and AzureVMSS as target type are currently supported.
func (o PacketCaptureOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// Target type of the resource provided.
func (o PacketCaptureOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringPtrOutput { return v.TargetType }).(pulumi.StringPtrOutput)
}

// Maximum duration of the capture session in seconds.
func (o PacketCaptureOutput) TimeLimitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.IntPtrOutput { return v.TimeLimitInSeconds }).(pulumi.IntPtrOutput)
}

// Maximum size of the capture output.
func (o PacketCaptureOutput) TotalBytesPerSession() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.Float64PtrOutput { return v.TotalBytesPerSession }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PacketCaptureOutput{})
}
