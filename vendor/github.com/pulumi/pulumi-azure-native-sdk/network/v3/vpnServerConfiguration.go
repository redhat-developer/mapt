// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VpnServerConfiguration Resource.
//
// Uses Azure REST API version 2024-05-01. In version 2.x of the Azure Native provider, it used API version 2023-02-01.
//
// Other available API versions: 2019-08-01, 2019-09-01, 2019-11-01, 2019-12-01, 2020-03-01, 2020-04-01, 2020-05-01, 2020-06-01, 2020-07-01, 2020-08-01, 2020-11-01, 2021-02-01, 2021-03-01, 2021-05-01, 2021-08-01, 2022-01-01, 2022-05-01, 2022-07-01, 2022-09-01, 2022-11-01, 2023-02-01, 2023-04-01, 2023-05-01, 2023-06-01, 2023-09-01, 2023-11-01, 2024-01-01, 2024-03-01, 2024-07-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native network [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type VpnServerConfiguration struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the P2SVpnServer configuration.
	Properties VpnServerConfigurationPropertiesResponseOutput `pulumi:"properties"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVpnServerConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVpnServerConfiguration(ctx *pulumi.Context,
	name string, args *VpnServerConfigurationArgs, opts ...pulumi.ResourceOption) (*VpnServerConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:network/v20190801:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20190901:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191101:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20191201:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200301:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200401:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200501:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200601:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200701:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20200801:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20201101:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210201:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210301:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210501:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20210801:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220101:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220501:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220701:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20220901:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20221101:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230201:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230401:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230501:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230601:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20230901:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20231101:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240101:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240301:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240501:VpnServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:network/v20240701:VpnServerConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VpnServerConfiguration
	err := ctx.RegisterResource("azure-native:network:VpnServerConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnServerConfiguration gets an existing VpnServerConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnServerConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnServerConfigurationState, opts ...pulumi.ResourceOption) (*VpnServerConfiguration, error) {
	var resource VpnServerConfiguration
	err := ctx.ReadResource("azure-native:network:VpnServerConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnServerConfiguration resources.
type vpnServerConfigurationState struct {
}

type VpnServerConfigurationState struct {
}

func (VpnServerConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnServerConfigurationState)(nil)).Elem()
}

type vpnServerConfigurationArgs struct {
	// Resource ID.
	Id *string `pulumi:"id"`
	// Resource location.
	Location *string `pulumi:"location"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `pulumi:"name"`
	// Properties of the P2SVpnServer configuration.
	Properties *VpnServerConfigurationProperties `pulumi:"properties"`
	// The resource group name of the VpnServerConfiguration.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the VpnServerConfiguration being created or updated.
	VpnServerConfigurationName *string `pulumi:"vpnServerConfigurationName"`
}

// The set of arguments for constructing a VpnServerConfiguration resource.
type VpnServerConfigurationArgs struct {
	// Resource ID.
	Id pulumi.StringPtrInput
	// Resource location.
	Location pulumi.StringPtrInput
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringPtrInput
	// Properties of the P2SVpnServer configuration.
	Properties VpnServerConfigurationPropertiesPtrInput
	// The resource group name of the VpnServerConfiguration.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the VpnServerConfiguration being created or updated.
	VpnServerConfigurationName pulumi.StringPtrInput
}

func (VpnServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnServerConfigurationArgs)(nil)).Elem()
}

type VpnServerConfigurationInput interface {
	pulumi.Input

	ToVpnServerConfigurationOutput() VpnServerConfigurationOutput
	ToVpnServerConfigurationOutputWithContext(ctx context.Context) VpnServerConfigurationOutput
}

func (*VpnServerConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnServerConfiguration)(nil)).Elem()
}

func (i *VpnServerConfiguration) ToVpnServerConfigurationOutput() VpnServerConfigurationOutput {
	return i.ToVpnServerConfigurationOutputWithContext(context.Background())
}

func (i *VpnServerConfiguration) ToVpnServerConfigurationOutputWithContext(ctx context.Context) VpnServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnServerConfigurationOutput)
}

type VpnServerConfigurationOutput struct{ *pulumi.OutputState }

func (VpnServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnServerConfiguration)(nil)).Elem()
}

func (o VpnServerConfigurationOutput) ToVpnServerConfigurationOutput() VpnServerConfigurationOutput {
	return o
}

func (o VpnServerConfigurationOutput) ToVpnServerConfigurationOutputWithContext(ctx context.Context) VpnServerConfigurationOutput {
	return o
}

// The Azure API version of the resource.
func (o VpnServerConfigurationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o VpnServerConfigurationOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Resource location.
func (o VpnServerConfigurationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Resource name.
func (o VpnServerConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of the P2SVpnServer configuration.
func (o VpnServerConfigurationOutput) Properties() VpnServerConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) VpnServerConfigurationPropertiesResponseOutput { return v.Properties }).(VpnServerConfigurationPropertiesResponseOutput)
}

// Resource tags.
func (o VpnServerConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type.
func (o VpnServerConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnServerConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VpnServerConfigurationOutput{})
}
