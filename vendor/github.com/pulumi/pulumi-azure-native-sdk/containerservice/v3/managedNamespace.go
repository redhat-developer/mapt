// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Namespace managed by ARM.
//
// Uses Azure REST API version 2025-04-02-preview.
//
// Other available API versions: 2025-03-02-preview, 2025-05-02-preview, 2025-06-02-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native containerservice [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type ManagedNamespace struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Unique read-only string used to implement optimistic concurrency. The eTag value will change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a subsequent request to enable optimistic concurrency per the normal etag convention.
	ETag pulumi.StringOutput `pulumi:"eTag"`
	// The location of the namespace.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of a namespace.
	Properties NamespacePropertiesResponseOutput `pulumi:"properties"`
	// The system metadata relating to this resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The tags to be persisted on the managed cluster namespace.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewManagedNamespace registers a new resource with the given unique name, arguments, and options.
func NewManagedNamespace(ctx *pulumi.Context,
	name string, args *ManagedNamespaceArgs, opts ...pulumi.ResourceOption) (*ManagedNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.Properties != nil {
		args.Properties = args.Properties.ToNamespacePropertiesPtrOutput().ApplyT(func(v *NamespaceProperties) *NamespaceProperties { return v.Defaults() }).(NamespacePropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerservice/v20250302preview:ManagedNamespace"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250402preview:ManagedNamespace"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250502preview:ManagedNamespace"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250602preview:ManagedNamespace"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ManagedNamespace
	err := ctx.RegisterResource("azure-native:containerservice:ManagedNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedNamespace gets an existing ManagedNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedNamespaceState, opts ...pulumi.ResourceOption) (*ManagedNamespace, error) {
	var resource ManagedNamespace
	err := ctx.ReadResource("azure-native:containerservice:ManagedNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedNamespace resources.
type managedNamespaceState struct {
}

type ManagedNamespaceState struct {
}

func (ManagedNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedNamespaceState)(nil)).Elem()
}

type managedNamespaceArgs struct {
	// The location of the namespace.
	Location *string `pulumi:"location"`
	// The name of the managed namespace.
	ManagedNamespaceName *string `pulumi:"managedNamespaceName"`
	// Properties of a namespace.
	Properties *NamespaceProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the managed cluster resource.
	ResourceName string `pulumi:"resourceName"`
	// The tags to be persisted on the managed cluster namespace.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ManagedNamespace resource.
type ManagedNamespaceArgs struct {
	// The location of the namespace.
	Location pulumi.StringPtrInput
	// The name of the managed namespace.
	ManagedNamespaceName pulumi.StringPtrInput
	// Properties of a namespace.
	Properties NamespacePropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the managed cluster resource.
	ResourceName pulumi.StringInput
	// The tags to be persisted on the managed cluster namespace.
	Tags pulumi.StringMapInput
}

func (ManagedNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedNamespaceArgs)(nil)).Elem()
}

type ManagedNamespaceInput interface {
	pulumi.Input

	ToManagedNamespaceOutput() ManagedNamespaceOutput
	ToManagedNamespaceOutputWithContext(ctx context.Context) ManagedNamespaceOutput
}

func (*ManagedNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNamespace)(nil)).Elem()
}

func (i *ManagedNamespace) ToManagedNamespaceOutput() ManagedNamespaceOutput {
	return i.ToManagedNamespaceOutputWithContext(context.Background())
}

func (i *ManagedNamespace) ToManagedNamespaceOutputWithContext(ctx context.Context) ManagedNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNamespaceOutput)
}

type ManagedNamespaceOutput struct{ *pulumi.OutputState }

func (ManagedNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNamespace)(nil)).Elem()
}

func (o ManagedNamespaceOutput) ToManagedNamespaceOutput() ManagedNamespaceOutput {
	return o
}

func (o ManagedNamespaceOutput) ToManagedNamespaceOutputWithContext(ctx context.Context) ManagedNamespaceOutput {
	return o
}

// The Azure API version of the resource.
func (o ManagedNamespaceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNamespace) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Unique read-only string used to implement optimistic concurrency. The eTag value will change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a subsequent request to enable optimistic concurrency per the normal etag convention.
func (o ManagedNamespaceOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNamespace) pulumi.StringOutput { return v.ETag }).(pulumi.StringOutput)
}

// The location of the namespace.
func (o ManagedNamespaceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNamespace) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource that is unique within a resource group. This name can be used to access the resource.
func (o ManagedNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of a namespace.
func (o ManagedNamespaceOutput) Properties() NamespacePropertiesResponseOutput {
	return o.ApplyT(func(v *ManagedNamespace) NamespacePropertiesResponseOutput { return v.Properties }).(NamespacePropertiesResponseOutput)
}

// The system metadata relating to this resource.
func (o ManagedNamespaceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ManagedNamespace) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The tags to be persisted on the managed cluster namespace.
func (o ManagedNamespaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedNamespace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource type
func (o ManagedNamespaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedNamespace) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ManagedNamespaceOutput{})
}
