// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Action if Kubernetes namespace with same name already exists.
type AdoptionPolicy string

const (
	// If the namespace already exists in Kubernetes, attempts to create that same namespace in ARM will fail.
	AdoptionPolicyNever = AdoptionPolicy("Never")
	// Take over the existing namespace to be managed by ARM, if there is no difference.
	AdoptionPolicyIfIdentical = AdoptionPolicy("IfIdentical")
	// Always take over the existing namespace to be managed by ARM, some fields might be overwritten.
	AdoptionPolicyAlways = AdoptionPolicy("Always")
)

func (AdoptionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*AdoptionPolicy)(nil)).Elem()
}

func (e AdoptionPolicy) ToAdoptionPolicyOutput() AdoptionPolicyOutput {
	return pulumi.ToOutput(e).(AdoptionPolicyOutput)
}

func (e AdoptionPolicy) ToAdoptionPolicyOutputWithContext(ctx context.Context) AdoptionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AdoptionPolicyOutput)
}

func (e AdoptionPolicy) ToAdoptionPolicyPtrOutput() AdoptionPolicyPtrOutput {
	return e.ToAdoptionPolicyPtrOutputWithContext(context.Background())
}

func (e AdoptionPolicy) ToAdoptionPolicyPtrOutputWithContext(ctx context.Context) AdoptionPolicyPtrOutput {
	return AdoptionPolicy(e).ToAdoptionPolicyOutputWithContext(ctx).ToAdoptionPolicyPtrOutputWithContext(ctx)
}

func (e AdoptionPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AdoptionPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AdoptionPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AdoptionPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AdoptionPolicyOutput struct{ *pulumi.OutputState }

func (AdoptionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdoptionPolicy)(nil)).Elem()
}

func (o AdoptionPolicyOutput) ToAdoptionPolicyOutput() AdoptionPolicyOutput {
	return o
}

func (o AdoptionPolicyOutput) ToAdoptionPolicyOutputWithContext(ctx context.Context) AdoptionPolicyOutput {
	return o
}

func (o AdoptionPolicyOutput) ToAdoptionPolicyPtrOutput() AdoptionPolicyPtrOutput {
	return o.ToAdoptionPolicyPtrOutputWithContext(context.Background())
}

func (o AdoptionPolicyOutput) ToAdoptionPolicyPtrOutputWithContext(ctx context.Context) AdoptionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdoptionPolicy) *AdoptionPolicy {
		return &v
	}).(AdoptionPolicyPtrOutput)
}

func (o AdoptionPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AdoptionPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AdoptionPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AdoptionPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AdoptionPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AdoptionPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AdoptionPolicyPtrOutput struct{ *pulumi.OutputState }

func (AdoptionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdoptionPolicy)(nil)).Elem()
}

func (o AdoptionPolicyPtrOutput) ToAdoptionPolicyPtrOutput() AdoptionPolicyPtrOutput {
	return o
}

func (o AdoptionPolicyPtrOutput) ToAdoptionPolicyPtrOutputWithContext(ctx context.Context) AdoptionPolicyPtrOutput {
	return o
}

func (o AdoptionPolicyPtrOutput) Elem() AdoptionPolicyOutput {
	return o.ApplyT(func(v *AdoptionPolicy) AdoptionPolicy {
		if v != nil {
			return *v
		}
		var ret AdoptionPolicy
		return ret
	}).(AdoptionPolicyOutput)
}

func (o AdoptionPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AdoptionPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AdoptionPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AdoptionPolicyInput is an input type that accepts values of the AdoptionPolicy enum
// A concrete instance of `AdoptionPolicyInput` can be one of the following:
//
//	AdoptionPolicyNever
//	AdoptionPolicyIfIdentical
//	AdoptionPolicyAlways
type AdoptionPolicyInput interface {
	pulumi.Input

	ToAdoptionPolicyOutput() AdoptionPolicyOutput
	ToAdoptionPolicyOutputWithContext(context.Context) AdoptionPolicyOutput
}

var adoptionPolicyPtrType = reflect.TypeOf((**AdoptionPolicy)(nil)).Elem()

type AdoptionPolicyPtrInput interface {
	pulumi.Input

	ToAdoptionPolicyPtrOutput() AdoptionPolicyPtrOutput
	ToAdoptionPolicyPtrOutputWithContext(context.Context) AdoptionPolicyPtrOutput
}

type adoptionPolicyPtr string

func AdoptionPolicyPtr(v string) AdoptionPolicyPtrInput {
	return (*adoptionPolicyPtr)(&v)
}

func (*adoptionPolicyPtr) ElementType() reflect.Type {
	return adoptionPolicyPtrType
}

func (in *adoptionPolicyPtr) ToAdoptionPolicyPtrOutput() AdoptionPolicyPtrOutput {
	return pulumi.ToOutput(in).(AdoptionPolicyPtrOutput)
}

func (in *adoptionPolicyPtr) ToAdoptionPolicyPtrOutputWithContext(ctx context.Context) AdoptionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AdoptionPolicyPtrOutput)
}

// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
type AgentPoolMode string

const (
	// System agent pools are primarily for hosting critical system pods such as CoreDNS and metrics-server. System agent pools osType must be Linux. System agent pools VM SKU must have at least 2vCPUs and 4GB of memory.
	AgentPoolModeSystem = AgentPoolMode("System")
	// User agent pools are primarily for hosting your application pods.
	AgentPoolModeUser = AgentPoolMode("User")
)

func (AgentPoolMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolMode)(nil)).Elem()
}

func (e AgentPoolMode) ToAgentPoolModeOutput() AgentPoolModeOutput {
	return pulumi.ToOutput(e).(AgentPoolModeOutput)
}

func (e AgentPoolMode) ToAgentPoolModeOutputWithContext(ctx context.Context) AgentPoolModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AgentPoolModeOutput)
}

func (e AgentPoolMode) ToAgentPoolModePtrOutput() AgentPoolModePtrOutput {
	return e.ToAgentPoolModePtrOutputWithContext(context.Background())
}

func (e AgentPoolMode) ToAgentPoolModePtrOutputWithContext(ctx context.Context) AgentPoolModePtrOutput {
	return AgentPoolMode(e).ToAgentPoolModeOutputWithContext(ctx).ToAgentPoolModePtrOutputWithContext(ctx)
}

func (e AgentPoolMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AgentPoolMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AgentPoolMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AgentPoolMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AgentPoolModeOutput struct{ *pulumi.OutputState }

func (AgentPoolModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolMode)(nil)).Elem()
}

func (o AgentPoolModeOutput) ToAgentPoolModeOutput() AgentPoolModeOutput {
	return o
}

func (o AgentPoolModeOutput) ToAgentPoolModeOutputWithContext(ctx context.Context) AgentPoolModeOutput {
	return o
}

func (o AgentPoolModeOutput) ToAgentPoolModePtrOutput() AgentPoolModePtrOutput {
	return o.ToAgentPoolModePtrOutputWithContext(context.Background())
}

func (o AgentPoolModeOutput) ToAgentPoolModePtrOutputWithContext(ctx context.Context) AgentPoolModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolMode) *AgentPoolMode {
		return &v
	}).(AgentPoolModePtrOutput)
}

func (o AgentPoolModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AgentPoolModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AgentPoolMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AgentPoolModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AgentPoolModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AgentPoolMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AgentPoolModePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolMode)(nil)).Elem()
}

func (o AgentPoolModePtrOutput) ToAgentPoolModePtrOutput() AgentPoolModePtrOutput {
	return o
}

func (o AgentPoolModePtrOutput) ToAgentPoolModePtrOutputWithContext(ctx context.Context) AgentPoolModePtrOutput {
	return o
}

func (o AgentPoolModePtrOutput) Elem() AgentPoolModeOutput {
	return o.ApplyT(func(v *AgentPoolMode) AgentPoolMode {
		if v != nil {
			return *v
		}
		var ret AgentPoolMode
		return ret
	}).(AgentPoolModeOutput)
}

func (o AgentPoolModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AgentPoolModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AgentPoolMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AgentPoolModeInput is an input type that accepts values of the AgentPoolMode enum
// A concrete instance of `AgentPoolModeInput` can be one of the following:
//
//	AgentPoolModeSystem
//	AgentPoolModeUser
type AgentPoolModeInput interface {
	pulumi.Input

	ToAgentPoolModeOutput() AgentPoolModeOutput
	ToAgentPoolModeOutputWithContext(context.Context) AgentPoolModeOutput
}

var agentPoolModePtrType = reflect.TypeOf((**AgentPoolMode)(nil)).Elem()

type AgentPoolModePtrInput interface {
	pulumi.Input

	ToAgentPoolModePtrOutput() AgentPoolModePtrOutput
	ToAgentPoolModePtrOutputWithContext(context.Context) AgentPoolModePtrOutput
}

type agentPoolModePtr string

func AgentPoolModePtr(v string) AgentPoolModePtrInput {
	return (*agentPoolModePtr)(&v)
}

func (*agentPoolModePtr) ElementType() reflect.Type {
	return agentPoolModePtrType
}

func (in *agentPoolModePtr) ToAgentPoolModePtrOutput() AgentPoolModePtrOutput {
	return pulumi.ToOutput(in).(AgentPoolModePtrOutput)
}

func (in *agentPoolModePtr) ToAgentPoolModePtrOutputWithContext(ctx context.Context) AgentPoolModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AgentPoolModePtrOutput)
}

// The type of Agent Pool.
type AgentPoolType string

const (
	// Create an Agent Pool backed by a Virtual Machine Scale Set.
	AgentPoolTypeVirtualMachineScaleSets = AgentPoolType("VirtualMachineScaleSets")
	// Use of this is strongly discouraged.
	AgentPoolTypeAvailabilitySet = AgentPoolType("AvailabilitySet")
)

func (AgentPoolType) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolType)(nil)).Elem()
}

func (e AgentPoolType) ToAgentPoolTypeOutput() AgentPoolTypeOutput {
	return pulumi.ToOutput(e).(AgentPoolTypeOutput)
}

func (e AgentPoolType) ToAgentPoolTypeOutputWithContext(ctx context.Context) AgentPoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AgentPoolTypeOutput)
}

func (e AgentPoolType) ToAgentPoolTypePtrOutput() AgentPoolTypePtrOutput {
	return e.ToAgentPoolTypePtrOutputWithContext(context.Background())
}

func (e AgentPoolType) ToAgentPoolTypePtrOutputWithContext(ctx context.Context) AgentPoolTypePtrOutput {
	return AgentPoolType(e).ToAgentPoolTypeOutputWithContext(ctx).ToAgentPoolTypePtrOutputWithContext(ctx)
}

func (e AgentPoolType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AgentPoolType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AgentPoolType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AgentPoolType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AgentPoolTypeOutput struct{ *pulumi.OutputState }

func (AgentPoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolType)(nil)).Elem()
}

func (o AgentPoolTypeOutput) ToAgentPoolTypeOutput() AgentPoolTypeOutput {
	return o
}

func (o AgentPoolTypeOutput) ToAgentPoolTypeOutputWithContext(ctx context.Context) AgentPoolTypeOutput {
	return o
}

func (o AgentPoolTypeOutput) ToAgentPoolTypePtrOutput() AgentPoolTypePtrOutput {
	return o.ToAgentPoolTypePtrOutputWithContext(context.Background())
}

func (o AgentPoolTypeOutput) ToAgentPoolTypePtrOutputWithContext(ctx context.Context) AgentPoolTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolType) *AgentPoolType {
		return &v
	}).(AgentPoolTypePtrOutput)
}

func (o AgentPoolTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AgentPoolTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AgentPoolType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AgentPoolTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AgentPoolTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AgentPoolType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AgentPoolTypePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolType)(nil)).Elem()
}

func (o AgentPoolTypePtrOutput) ToAgentPoolTypePtrOutput() AgentPoolTypePtrOutput {
	return o
}

func (o AgentPoolTypePtrOutput) ToAgentPoolTypePtrOutputWithContext(ctx context.Context) AgentPoolTypePtrOutput {
	return o
}

func (o AgentPoolTypePtrOutput) Elem() AgentPoolTypeOutput {
	return o.ApplyT(func(v *AgentPoolType) AgentPoolType {
		if v != nil {
			return *v
		}
		var ret AgentPoolType
		return ret
	}).(AgentPoolTypeOutput)
}

func (o AgentPoolTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AgentPoolTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AgentPoolType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AgentPoolTypeInput is an input type that accepts values of the AgentPoolType enum
// A concrete instance of `AgentPoolTypeInput` can be one of the following:
//
//	AgentPoolTypeVirtualMachineScaleSets
//	AgentPoolTypeAvailabilitySet
type AgentPoolTypeInput interface {
	pulumi.Input

	ToAgentPoolTypeOutput() AgentPoolTypeOutput
	ToAgentPoolTypeOutputWithContext(context.Context) AgentPoolTypeOutput
}

var agentPoolTypePtrType = reflect.TypeOf((**AgentPoolType)(nil)).Elem()

type AgentPoolTypePtrInput interface {
	pulumi.Input

	ToAgentPoolTypePtrOutput() AgentPoolTypePtrOutput
	ToAgentPoolTypePtrOutputWithContext(context.Context) AgentPoolTypePtrOutput
}

type agentPoolTypePtr string

func AgentPoolTypePtr(v string) AgentPoolTypePtrInput {
	return (*agentPoolTypePtr)(&v)
}

func (*agentPoolTypePtr) ElementType() reflect.Type {
	return agentPoolTypePtrType
}

func (in *agentPoolTypePtr) ToAgentPoolTypePtrOutput() AgentPoolTypePtrOutput {
	return pulumi.ToOutput(in).(AgentPoolTypePtrOutput)
}

func (in *agentPoolTypePtr) ToAgentPoolTypePtrOutputWithContext(ctx context.Context) AgentPoolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AgentPoolTypePtrOutput)
}

// The node image upgrade type.
type AutoUpgradeNodeImageSelectionType string

const (
	// Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions.
	AutoUpgradeNodeImageSelectionTypeLatest = AutoUpgradeNodeImageSelectionType("Latest")
	// The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'.
	AutoUpgradeNodeImageSelectionTypeConsistent = AutoUpgradeNodeImageSelectionType("Consistent")
)

func (AutoUpgradeNodeImageSelectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeNodeImageSelectionType)(nil)).Elem()
}

func (e AutoUpgradeNodeImageSelectionType) ToAutoUpgradeNodeImageSelectionTypeOutput() AutoUpgradeNodeImageSelectionTypeOutput {
	return pulumi.ToOutput(e).(AutoUpgradeNodeImageSelectionTypeOutput)
}

func (e AutoUpgradeNodeImageSelectionType) ToAutoUpgradeNodeImageSelectionTypeOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AutoUpgradeNodeImageSelectionTypeOutput)
}

func (e AutoUpgradeNodeImageSelectionType) ToAutoUpgradeNodeImageSelectionTypePtrOutput() AutoUpgradeNodeImageSelectionTypePtrOutput {
	return e.ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(context.Background())
}

func (e AutoUpgradeNodeImageSelectionType) ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionTypePtrOutput {
	return AutoUpgradeNodeImageSelectionType(e).ToAutoUpgradeNodeImageSelectionTypeOutputWithContext(ctx).ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(ctx)
}

func (e AutoUpgradeNodeImageSelectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoUpgradeNodeImageSelectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoUpgradeNodeImageSelectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoUpgradeNodeImageSelectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AutoUpgradeNodeImageSelectionTypeOutput struct{ *pulumi.OutputState }

func (AutoUpgradeNodeImageSelectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeNodeImageSelectionType)(nil)).Elem()
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToAutoUpgradeNodeImageSelectionTypeOutput() AutoUpgradeNodeImageSelectionTypeOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToAutoUpgradeNodeImageSelectionTypeOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionTypeOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToAutoUpgradeNodeImageSelectionTypePtrOutput() AutoUpgradeNodeImageSelectionTypePtrOutput {
	return o.ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(context.Background())
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoUpgradeNodeImageSelectionType) *AutoUpgradeNodeImageSelectionType {
		return &v
	}).(AutoUpgradeNodeImageSelectionTypePtrOutput)
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AutoUpgradeNodeImageSelectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AutoUpgradeNodeImageSelectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AutoUpgradeNodeImageSelectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AutoUpgradeNodeImageSelectionTypePtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeNodeImageSelectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeNodeImageSelectionType)(nil)).Elem()
}

func (o AutoUpgradeNodeImageSelectionTypePtrOutput) ToAutoUpgradeNodeImageSelectionTypePtrOutput() AutoUpgradeNodeImageSelectionTypePtrOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionTypePtrOutput) ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionTypePtrOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionTypePtrOutput) Elem() AutoUpgradeNodeImageSelectionTypeOutput {
	return o.ApplyT(func(v *AutoUpgradeNodeImageSelectionType) AutoUpgradeNodeImageSelectionType {
		if v != nil {
			return *v
		}
		var ret AutoUpgradeNodeImageSelectionType
		return ret
	}).(AutoUpgradeNodeImageSelectionTypeOutput)
}

func (o AutoUpgradeNodeImageSelectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AutoUpgradeNodeImageSelectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AutoUpgradeNodeImageSelectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AutoUpgradeNodeImageSelectionTypeInput is an input type that accepts values of the AutoUpgradeNodeImageSelectionType enum
// A concrete instance of `AutoUpgradeNodeImageSelectionTypeInput` can be one of the following:
//
//	AutoUpgradeNodeImageSelectionTypeLatest
//	AutoUpgradeNodeImageSelectionTypeConsistent
type AutoUpgradeNodeImageSelectionTypeInput interface {
	pulumi.Input

	ToAutoUpgradeNodeImageSelectionTypeOutput() AutoUpgradeNodeImageSelectionTypeOutput
	ToAutoUpgradeNodeImageSelectionTypeOutputWithContext(context.Context) AutoUpgradeNodeImageSelectionTypeOutput
}

var autoUpgradeNodeImageSelectionTypePtrType = reflect.TypeOf((**AutoUpgradeNodeImageSelectionType)(nil)).Elem()

type AutoUpgradeNodeImageSelectionTypePtrInput interface {
	pulumi.Input

	ToAutoUpgradeNodeImageSelectionTypePtrOutput() AutoUpgradeNodeImageSelectionTypePtrOutput
	ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(context.Context) AutoUpgradeNodeImageSelectionTypePtrOutput
}

type autoUpgradeNodeImageSelectionTypePtr string

func AutoUpgradeNodeImageSelectionTypePtr(v string) AutoUpgradeNodeImageSelectionTypePtrInput {
	return (*autoUpgradeNodeImageSelectionTypePtr)(&v)
}

func (*autoUpgradeNodeImageSelectionTypePtr) ElementType() reflect.Type {
	return autoUpgradeNodeImageSelectionTypePtrType
}

func (in *autoUpgradeNodeImageSelectionTypePtr) ToAutoUpgradeNodeImageSelectionTypePtrOutput() AutoUpgradeNodeImageSelectionTypePtrOutput {
	return pulumi.ToOutput(in).(AutoUpgradeNodeImageSelectionTypePtrOutput)
}

func (in *autoUpgradeNodeImageSelectionTypePtr) ToAutoUpgradeNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AutoUpgradeNodeImageSelectionTypePtrOutput)
}

// The type of the managed inbound Load Balancer BackendPool.
type BackendPoolType string

const (
	// The type of the managed inbound Load Balancer BackendPool. https://cloud-provider-azure.sigs.k8s.io/topics/loadbalancer/#configure-load-balancer-backend.
	BackendPoolTypeNodeIPConfiguration = BackendPoolType("NodeIPConfiguration")
	// The type of the managed inbound Load Balancer BackendPool. https://cloud-provider-azure.sigs.k8s.io/topics/loadbalancer/#configure-load-balancer-backend.
	BackendPoolTypeNodeIP = BackendPoolType("NodeIP")
)

func (BackendPoolType) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolType)(nil)).Elem()
}

func (e BackendPoolType) ToBackendPoolTypeOutput() BackendPoolTypeOutput {
	return pulumi.ToOutput(e).(BackendPoolTypeOutput)
}

func (e BackendPoolType) ToBackendPoolTypeOutputWithContext(ctx context.Context) BackendPoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BackendPoolTypeOutput)
}

func (e BackendPoolType) ToBackendPoolTypePtrOutput() BackendPoolTypePtrOutput {
	return e.ToBackendPoolTypePtrOutputWithContext(context.Background())
}

func (e BackendPoolType) ToBackendPoolTypePtrOutputWithContext(ctx context.Context) BackendPoolTypePtrOutput {
	return BackendPoolType(e).ToBackendPoolTypeOutputWithContext(ctx).ToBackendPoolTypePtrOutputWithContext(ctx)
}

func (e BackendPoolType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendPoolType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendPoolType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendPoolType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BackendPoolTypeOutput struct{ *pulumi.OutputState }

func (BackendPoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendPoolType)(nil)).Elem()
}

func (o BackendPoolTypeOutput) ToBackendPoolTypeOutput() BackendPoolTypeOutput {
	return o
}

func (o BackendPoolTypeOutput) ToBackendPoolTypeOutputWithContext(ctx context.Context) BackendPoolTypeOutput {
	return o
}

func (o BackendPoolTypeOutput) ToBackendPoolTypePtrOutput() BackendPoolTypePtrOutput {
	return o.ToBackendPoolTypePtrOutputWithContext(context.Background())
}

func (o BackendPoolTypeOutput) ToBackendPoolTypePtrOutputWithContext(ctx context.Context) BackendPoolTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackendPoolType) *BackendPoolType {
		return &v
	}).(BackendPoolTypePtrOutput)
}

func (o BackendPoolTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BackendPoolTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackendPoolType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BackendPoolTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackendPoolTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BackendPoolType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BackendPoolTypePtrOutput struct{ *pulumi.OutputState }

func (BackendPoolTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendPoolType)(nil)).Elem()
}

func (o BackendPoolTypePtrOutput) ToBackendPoolTypePtrOutput() BackendPoolTypePtrOutput {
	return o
}

func (o BackendPoolTypePtrOutput) ToBackendPoolTypePtrOutputWithContext(ctx context.Context) BackendPoolTypePtrOutput {
	return o
}

func (o BackendPoolTypePtrOutput) Elem() BackendPoolTypeOutput {
	return o.ApplyT(func(v *BackendPoolType) BackendPoolType {
		if v != nil {
			return *v
		}
		var ret BackendPoolType
		return ret
	}).(BackendPoolTypeOutput)
}

func (o BackendPoolTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BackendPoolTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BackendPoolType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BackendPoolTypeInput is an input type that accepts values of the BackendPoolType enum
// A concrete instance of `BackendPoolTypeInput` can be one of the following:
//
//	BackendPoolTypeNodeIPConfiguration
//	BackendPoolTypeNodeIP
type BackendPoolTypeInput interface {
	pulumi.Input

	ToBackendPoolTypeOutput() BackendPoolTypeOutput
	ToBackendPoolTypeOutputWithContext(context.Context) BackendPoolTypeOutput
}

var backendPoolTypePtrType = reflect.TypeOf((**BackendPoolType)(nil)).Elem()

type BackendPoolTypePtrInput interface {
	pulumi.Input

	ToBackendPoolTypePtrOutput() BackendPoolTypePtrOutput
	ToBackendPoolTypePtrOutputWithContext(context.Context) BackendPoolTypePtrOutput
}

type backendPoolTypePtr string

func BackendPoolTypePtr(v string) BackendPoolTypePtrInput {
	return (*backendPoolTypePtr)(&v)
}

func (*backendPoolTypePtr) ElementType() reflect.Type {
	return backendPoolTypePtrType
}

func (in *backendPoolTypePtr) ToBackendPoolTypePtrOutput() BackendPoolTypePtrOutput {
	return pulumi.ToOutput(in).(BackendPoolTypePtrOutput)
}

func (in *backendPoolTypePtr) ToBackendPoolTypePtrOutputWithContext(ctx context.Context) BackendPoolTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BackendPoolTypePtrOutput)
}

// Tells whether the cluster is Running or Stopped
type Code string

const (
	// The cluster is running.
	CodeRunning = Code("Running")
	// The cluster is stopped.
	CodeStopped = Code("Stopped")
)

func (Code) ElementType() reflect.Type {
	return reflect.TypeOf((*Code)(nil)).Elem()
}

func (e Code) ToCodeOutput() CodeOutput {
	return pulumi.ToOutput(e).(CodeOutput)
}

func (e Code) ToCodeOutputWithContext(ctx context.Context) CodeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CodeOutput)
}

func (e Code) ToCodePtrOutput() CodePtrOutput {
	return e.ToCodePtrOutputWithContext(context.Background())
}

func (e Code) ToCodePtrOutputWithContext(ctx context.Context) CodePtrOutput {
	return Code(e).ToCodeOutputWithContext(ctx).ToCodePtrOutputWithContext(ctx)
}

func (e Code) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Code) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Code) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Code) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CodeOutput struct{ *pulumi.OutputState }

func (CodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Code)(nil)).Elem()
}

func (o CodeOutput) ToCodeOutput() CodeOutput {
	return o
}

func (o CodeOutput) ToCodeOutputWithContext(ctx context.Context) CodeOutput {
	return o
}

func (o CodeOutput) ToCodePtrOutput() CodePtrOutput {
	return o.ToCodePtrOutputWithContext(context.Background())
}

func (o CodeOutput) ToCodePtrOutputWithContext(ctx context.Context) CodePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Code) *Code {
		return &v
	}).(CodePtrOutput)
}

func (o CodeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CodeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Code) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CodeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CodeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Code) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CodePtrOutput struct{ *pulumi.OutputState }

func (CodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Code)(nil)).Elem()
}

func (o CodePtrOutput) ToCodePtrOutput() CodePtrOutput {
	return o
}

func (o CodePtrOutput) ToCodePtrOutputWithContext(ctx context.Context) CodePtrOutput {
	return o
}

func (o CodePtrOutput) Elem() CodeOutput {
	return o.ApplyT(func(v *Code) Code {
		if v != nil {
			return *v
		}
		var ret Code
		return ret
	}).(CodeOutput)
}

func (o CodePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CodePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Code) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CodeInput is an input type that accepts values of the Code enum
// A concrete instance of `CodeInput` can be one of the following:
//
//	CodeRunning
//	CodeStopped
type CodeInput interface {
	pulumi.Input

	ToCodeOutput() CodeOutput
	ToCodeOutputWithContext(context.Context) CodeOutput
}

var codePtrType = reflect.TypeOf((**Code)(nil)).Elem()

type CodePtrInput interface {
	pulumi.Input

	ToCodePtrOutput() CodePtrOutput
	ToCodePtrOutputWithContext(context.Context) CodePtrOutput
}

type codePtr string

func CodePtr(v string) CodePtrInput {
	return (*codePtr)(&v)
}

func (*codePtr) ElementType() reflect.Type {
	return codePtrType
}

func (in *codePtr) ToCodePtrOutput() CodePtrOutput {
	return pulumi.ToOutput(in).(CodePtrOutput)
}

func (in *codePtr) ToCodePtrOutputWithContext(ctx context.Context) CodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CodePtrOutput)
}

// The private link service connection status.
type ConnectionStatus string

const (
	ConnectionStatusPending      = ConnectionStatus("Pending")
	ConnectionStatusApproved     = ConnectionStatus("Approved")
	ConnectionStatusRejected     = ConnectionStatus("Rejected")
	ConnectionStatusDisconnected = ConnectionStatus("Disconnected")
)

func (ConnectionStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatus)(nil)).Elem()
}

func (e ConnectionStatus) ToConnectionStatusOutput() ConnectionStatusOutput {
	return pulumi.ToOutput(e).(ConnectionStatusOutput)
}

func (e ConnectionStatus) ToConnectionStatusOutputWithContext(ctx context.Context) ConnectionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectionStatusOutput)
}

func (e ConnectionStatus) ToConnectionStatusPtrOutput() ConnectionStatusPtrOutput {
	return e.ToConnectionStatusPtrOutputWithContext(context.Background())
}

func (e ConnectionStatus) ToConnectionStatusPtrOutputWithContext(ctx context.Context) ConnectionStatusPtrOutput {
	return ConnectionStatus(e).ToConnectionStatusOutputWithContext(ctx).ToConnectionStatusPtrOutputWithContext(ctx)
}

func (e ConnectionStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectionStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectionStatusOutput struct{ *pulumi.OutputState }

func (ConnectionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionStatus)(nil)).Elem()
}

func (o ConnectionStatusOutput) ToConnectionStatusOutput() ConnectionStatusOutput {
	return o
}

func (o ConnectionStatusOutput) ToConnectionStatusOutputWithContext(ctx context.Context) ConnectionStatusOutput {
	return o
}

func (o ConnectionStatusOutput) ToConnectionStatusPtrOutput() ConnectionStatusPtrOutput {
	return o.ToConnectionStatusPtrOutputWithContext(context.Background())
}

func (o ConnectionStatusOutput) ToConnectionStatusPtrOutputWithContext(ctx context.Context) ConnectionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionStatus) *ConnectionStatus {
		return &v
	}).(ConnectionStatusPtrOutput)
}

func (o ConnectionStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectionStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectionStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectionStatusPtrOutput struct{ *pulumi.OutputState }

func (ConnectionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionStatus)(nil)).Elem()
}

func (o ConnectionStatusPtrOutput) ToConnectionStatusPtrOutput() ConnectionStatusPtrOutput {
	return o
}

func (o ConnectionStatusPtrOutput) ToConnectionStatusPtrOutputWithContext(ctx context.Context) ConnectionStatusPtrOutput {
	return o
}

func (o ConnectionStatusPtrOutput) Elem() ConnectionStatusOutput {
	return o.ApplyT(func(v *ConnectionStatus) ConnectionStatus {
		if v != nil {
			return *v
		}
		var ret ConnectionStatus
		return ret
	}).(ConnectionStatusOutput)
}

func (o ConnectionStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectionStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectionStatusInput is an input type that accepts values of the ConnectionStatus enum
// A concrete instance of `ConnectionStatusInput` can be one of the following:
//
//	ConnectionStatusPending
//	ConnectionStatusApproved
//	ConnectionStatusRejected
//	ConnectionStatusDisconnected
type ConnectionStatusInput interface {
	pulumi.Input

	ToConnectionStatusOutput() ConnectionStatusOutput
	ToConnectionStatusOutputWithContext(context.Context) ConnectionStatusOutput
}

var connectionStatusPtrType = reflect.TypeOf((**ConnectionStatus)(nil)).Elem()

type ConnectionStatusPtrInput interface {
	pulumi.Input

	ToConnectionStatusPtrOutput() ConnectionStatusPtrOutput
	ToConnectionStatusPtrOutputWithContext(context.Context) ConnectionStatusPtrOutput
}

type connectionStatusPtr string

func ConnectionStatusPtr(v string) ConnectionStatusPtrInput {
	return (*connectionStatusPtr)(&v)
}

func (*connectionStatusPtr) ElementType() reflect.Type {
	return connectionStatusPtrType
}

func (in *connectionStatusPtr) ToConnectionStatusPtrOutput() ConnectionStatusPtrOutput {
	return pulumi.ToOutput(in).(ConnectionStatusPtrOutput)
}

func (in *connectionStatusPtr) ToConnectionStatusPtrOutputWithContext(ctx context.Context) ConnectionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectionStatusPtrOutput)
}

// Delete options of a namespace.
type DeletePolicy string

const (
	// Only delete the ARM resource, keep the Kubernetes namespace. Also delete the ManagedByARM label.
	DeletePolicyKeep = DeletePolicy("Keep")
	// Delete both the ARM resource and the Kubernetes namespace together.
	DeletePolicyDelete = DeletePolicy("Delete")
)

func (DeletePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*DeletePolicy)(nil)).Elem()
}

func (e DeletePolicy) ToDeletePolicyOutput() DeletePolicyOutput {
	return pulumi.ToOutput(e).(DeletePolicyOutput)
}

func (e DeletePolicy) ToDeletePolicyOutputWithContext(ctx context.Context) DeletePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeletePolicyOutput)
}

func (e DeletePolicy) ToDeletePolicyPtrOutput() DeletePolicyPtrOutput {
	return e.ToDeletePolicyPtrOutputWithContext(context.Background())
}

func (e DeletePolicy) ToDeletePolicyPtrOutputWithContext(ctx context.Context) DeletePolicyPtrOutput {
	return DeletePolicy(e).ToDeletePolicyOutputWithContext(ctx).ToDeletePolicyPtrOutputWithContext(ctx)
}

func (e DeletePolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeletePolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeletePolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeletePolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeletePolicyOutput struct{ *pulumi.OutputState }

func (DeletePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeletePolicy)(nil)).Elem()
}

func (o DeletePolicyOutput) ToDeletePolicyOutput() DeletePolicyOutput {
	return o
}

func (o DeletePolicyOutput) ToDeletePolicyOutputWithContext(ctx context.Context) DeletePolicyOutput {
	return o
}

func (o DeletePolicyOutput) ToDeletePolicyPtrOutput() DeletePolicyPtrOutput {
	return o.ToDeletePolicyPtrOutputWithContext(context.Background())
}

func (o DeletePolicyOutput) ToDeletePolicyPtrOutputWithContext(ctx context.Context) DeletePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeletePolicy) *DeletePolicy {
		return &v
	}).(DeletePolicyPtrOutput)
}

func (o DeletePolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeletePolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeletePolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeletePolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeletePolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeletePolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeletePolicyPtrOutput struct{ *pulumi.OutputState }

func (DeletePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeletePolicy)(nil)).Elem()
}

func (o DeletePolicyPtrOutput) ToDeletePolicyPtrOutput() DeletePolicyPtrOutput {
	return o
}

func (o DeletePolicyPtrOutput) ToDeletePolicyPtrOutputWithContext(ctx context.Context) DeletePolicyPtrOutput {
	return o
}

func (o DeletePolicyPtrOutput) Elem() DeletePolicyOutput {
	return o.ApplyT(func(v *DeletePolicy) DeletePolicy {
		if v != nil {
			return *v
		}
		var ret DeletePolicy
		return ret
	}).(DeletePolicyOutput)
}

func (o DeletePolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeletePolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeletePolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeletePolicyInput is an input type that accepts values of the DeletePolicy enum
// A concrete instance of `DeletePolicyInput` can be one of the following:
//
//	DeletePolicyKeep
//	DeletePolicyDelete
type DeletePolicyInput interface {
	pulumi.Input

	ToDeletePolicyOutput() DeletePolicyOutput
	ToDeletePolicyOutputWithContext(context.Context) DeletePolicyOutput
}

var deletePolicyPtrType = reflect.TypeOf((**DeletePolicy)(nil)).Elem()

type DeletePolicyPtrInput interface {
	pulumi.Input

	ToDeletePolicyPtrOutput() DeletePolicyPtrOutput
	ToDeletePolicyPtrOutputWithContext(context.Context) DeletePolicyPtrOutput
}

type deletePolicyPtr string

func DeletePolicyPtr(v string) DeletePolicyPtrInput {
	return (*deletePolicyPtr)(&v)
}

func (*deletePolicyPtr) ElementType() reflect.Type {
	return deletePolicyPtrType
}

func (in *deletePolicyPtr) ToDeletePolicyPtrOutput() DeletePolicyPtrOutput {
	return pulumi.ToOutput(in).(DeletePolicyPtrOutput)
}

func (in *deletePolicyPtr) ToDeletePolicyPtrOutputWithContext(ctx context.Context) DeletePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeletePolicyPtrOutput)
}

// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
type Expander string

const (
	// Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources.
	Expander_Least_Waste = Expander("least-waste")
	// Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once.
	Expander_Most_Pods = Expander("most-pods")
	// Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/expander/priority/readme.md).
	ExpanderPriority = Expander("priority")
	// Used when you don't have a particular need for the node groups to scale differently.
	ExpanderRandom = Expander("random")
)

func (Expander) ElementType() reflect.Type {
	return reflect.TypeOf((*Expander)(nil)).Elem()
}

func (e Expander) ToExpanderOutput() ExpanderOutput {
	return pulumi.ToOutput(e).(ExpanderOutput)
}

func (e Expander) ToExpanderOutputWithContext(ctx context.Context) ExpanderOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExpanderOutput)
}

func (e Expander) ToExpanderPtrOutput() ExpanderPtrOutput {
	return e.ToExpanderPtrOutputWithContext(context.Background())
}

func (e Expander) ToExpanderPtrOutputWithContext(ctx context.Context) ExpanderPtrOutput {
	return Expander(e).ToExpanderOutputWithContext(ctx).ToExpanderPtrOutputWithContext(ctx)
}

func (e Expander) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Expander) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Expander) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Expander) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExpanderOutput struct{ *pulumi.OutputState }

func (ExpanderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expander)(nil)).Elem()
}

func (o ExpanderOutput) ToExpanderOutput() ExpanderOutput {
	return o
}

func (o ExpanderOutput) ToExpanderOutputWithContext(ctx context.Context) ExpanderOutput {
	return o
}

func (o ExpanderOutput) ToExpanderPtrOutput() ExpanderPtrOutput {
	return o.ToExpanderPtrOutputWithContext(context.Background())
}

func (o ExpanderOutput) ToExpanderPtrOutputWithContext(ctx context.Context) ExpanderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expander) *Expander {
		return &v
	}).(ExpanderPtrOutput)
}

func (o ExpanderOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExpanderOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Expander) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExpanderOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExpanderOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Expander) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExpanderPtrOutput struct{ *pulumi.OutputState }

func (ExpanderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expander)(nil)).Elem()
}

func (o ExpanderPtrOutput) ToExpanderPtrOutput() ExpanderPtrOutput {
	return o
}

func (o ExpanderPtrOutput) ToExpanderPtrOutputWithContext(ctx context.Context) ExpanderPtrOutput {
	return o
}

func (o ExpanderPtrOutput) Elem() ExpanderOutput {
	return o.ApplyT(func(v *Expander) Expander {
		if v != nil {
			return *v
		}
		var ret Expander
		return ret
	}).(ExpanderOutput)
}

func (o ExpanderPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExpanderPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Expander) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExpanderInput is an input type that accepts values of the Expander enum
// A concrete instance of `ExpanderInput` can be one of the following:
//
//	Expander_Least_Waste
//	Expander_Most_Pods
//	ExpanderPriority
//	ExpanderRandom
type ExpanderInput interface {
	pulumi.Input

	ToExpanderOutput() ExpanderOutput
	ToExpanderOutputWithContext(context.Context) ExpanderOutput
}

var expanderPtrType = reflect.TypeOf((**Expander)(nil)).Elem()

type ExpanderPtrInput interface {
	pulumi.Input

	ToExpanderPtrOutput() ExpanderPtrOutput
	ToExpanderPtrOutputWithContext(context.Context) ExpanderPtrOutput
}

type expanderPtr string

func ExpanderPtr(v string) ExpanderPtrInput {
	return (*expanderPtr)(&v)
}

func (*expanderPtr) ElementType() reflect.Type {
	return expanderPtrType
}

func (in *expanderPtr) ToExpanderPtrOutput() ExpanderPtrOutput {
	return pulumi.ToOutput(in).(ExpanderPtrOutput)
}

func (in *expanderPtr) ToExpanderPtrOutputWithContext(ctx context.Context) ExpanderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExpanderPtrOutput)
}

// The type of the extended location.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesEdgeZone = ExtendedLocationTypes("EdgeZone")
)

func (ExtendedLocationTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationTypes)(nil)).Elem()
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput {
	return pulumi.ToOutput(e).(ExtendedLocationTypesOutput)
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesOutputWithContext(ctx context.Context) ExtendedLocationTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExtendedLocationTypesOutput)
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return e.ToExtendedLocationTypesPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return ExtendedLocationTypes(e).ToExtendedLocationTypesOutputWithContext(ctx).ToExtendedLocationTypesPtrOutputWithContext(ctx)
}

func (e ExtendedLocationTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExtendedLocationTypesOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationTypes)(nil)).Elem()
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput {
	return o
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesOutputWithContext(ctx context.Context) ExtendedLocationTypesOutput {
	return o
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return o.ToExtendedLocationTypesPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocationTypes) *ExtendedLocationTypes {
		return &v
	}).(ExtendedLocationTypesPtrOutput)
}

func (o ExtendedLocationTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExtendedLocationTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExtendedLocationTypesPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationTypes)(nil)).Elem()
}

func (o ExtendedLocationTypesPtrOutput) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return o
}

func (o ExtendedLocationTypesPtrOutput) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return o
}

func (o ExtendedLocationTypesPtrOutput) Elem() ExtendedLocationTypesOutput {
	return o.ApplyT(func(v *ExtendedLocationTypes) ExtendedLocationTypes {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationTypes
		return ret
	}).(ExtendedLocationTypesOutput)
}

func (o ExtendedLocationTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExtendedLocationTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExtendedLocationTypesInput is an input type that accepts values of the ExtendedLocationTypes enum
// A concrete instance of `ExtendedLocationTypesInput` can be one of the following:
//
//	ExtendedLocationTypesEdgeZone
type ExtendedLocationTypesInput interface {
	pulumi.Input

	ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput
	ToExtendedLocationTypesOutputWithContext(context.Context) ExtendedLocationTypesOutput
}

var extendedLocationTypesPtrType = reflect.TypeOf((**ExtendedLocationTypes)(nil)).Elem()

type ExtendedLocationTypesPtrInput interface {
	pulumi.Input

	ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput
	ToExtendedLocationTypesPtrOutputWithContext(context.Context) ExtendedLocationTypesPtrOutput
}

type extendedLocationTypesPtr string

func ExtendedLocationTypesPtr(v string) ExtendedLocationTypesPtrInput {
	return (*extendedLocationTypesPtr)(&v)
}

func (*extendedLocationTypesPtr) ElementType() reflect.Type {
	return extendedLocationTypesPtrType
}

func (in *extendedLocationTypesPtr) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return pulumi.ToOutput(in).(ExtendedLocationTypesPtrOutput)
}

func (in *extendedLocationTypesPtr) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExtendedLocationTypesPtrOutput)
}

// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
type GPUInstanceProfile string

const (
	GPUInstanceProfileMIG1g = GPUInstanceProfile("MIG1g")
	GPUInstanceProfileMIG2g = GPUInstanceProfile("MIG2g")
	GPUInstanceProfileMIG3g = GPUInstanceProfile("MIG3g")
	GPUInstanceProfileMIG4g = GPUInstanceProfile("MIG4g")
	GPUInstanceProfileMIG7g = GPUInstanceProfile("MIG7g")
)

func (GPUInstanceProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUInstanceProfile)(nil)).Elem()
}

func (e GPUInstanceProfile) ToGPUInstanceProfileOutput() GPUInstanceProfileOutput {
	return pulumi.ToOutput(e).(GPUInstanceProfileOutput)
}

func (e GPUInstanceProfile) ToGPUInstanceProfileOutputWithContext(ctx context.Context) GPUInstanceProfileOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GPUInstanceProfileOutput)
}

func (e GPUInstanceProfile) ToGPUInstanceProfilePtrOutput() GPUInstanceProfilePtrOutput {
	return e.ToGPUInstanceProfilePtrOutputWithContext(context.Background())
}

func (e GPUInstanceProfile) ToGPUInstanceProfilePtrOutputWithContext(ctx context.Context) GPUInstanceProfilePtrOutput {
	return GPUInstanceProfile(e).ToGPUInstanceProfileOutputWithContext(ctx).ToGPUInstanceProfilePtrOutputWithContext(ctx)
}

func (e GPUInstanceProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GPUInstanceProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GPUInstanceProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GPUInstanceProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GPUInstanceProfileOutput struct{ *pulumi.OutputState }

func (GPUInstanceProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUInstanceProfile)(nil)).Elem()
}

func (o GPUInstanceProfileOutput) ToGPUInstanceProfileOutput() GPUInstanceProfileOutput {
	return o
}

func (o GPUInstanceProfileOutput) ToGPUInstanceProfileOutputWithContext(ctx context.Context) GPUInstanceProfileOutput {
	return o
}

func (o GPUInstanceProfileOutput) ToGPUInstanceProfilePtrOutput() GPUInstanceProfilePtrOutput {
	return o.ToGPUInstanceProfilePtrOutputWithContext(context.Background())
}

func (o GPUInstanceProfileOutput) ToGPUInstanceProfilePtrOutputWithContext(ctx context.Context) GPUInstanceProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GPUInstanceProfile) *GPUInstanceProfile {
		return &v
	}).(GPUInstanceProfilePtrOutput)
}

func (o GPUInstanceProfileOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GPUInstanceProfileOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GPUInstanceProfile) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GPUInstanceProfileOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GPUInstanceProfileOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GPUInstanceProfile) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GPUInstanceProfilePtrOutput struct{ *pulumi.OutputState }

func (GPUInstanceProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUInstanceProfile)(nil)).Elem()
}

func (o GPUInstanceProfilePtrOutput) ToGPUInstanceProfilePtrOutput() GPUInstanceProfilePtrOutput {
	return o
}

func (o GPUInstanceProfilePtrOutput) ToGPUInstanceProfilePtrOutputWithContext(ctx context.Context) GPUInstanceProfilePtrOutput {
	return o
}

func (o GPUInstanceProfilePtrOutput) Elem() GPUInstanceProfileOutput {
	return o.ApplyT(func(v *GPUInstanceProfile) GPUInstanceProfile {
		if v != nil {
			return *v
		}
		var ret GPUInstanceProfile
		return ret
	}).(GPUInstanceProfileOutput)
}

func (o GPUInstanceProfilePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GPUInstanceProfilePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GPUInstanceProfile) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GPUInstanceProfileInput is an input type that accepts values of the GPUInstanceProfile enum
// A concrete instance of `GPUInstanceProfileInput` can be one of the following:
//
//	GPUInstanceProfileMIG1g
//	GPUInstanceProfileMIG2g
//	GPUInstanceProfileMIG3g
//	GPUInstanceProfileMIG4g
//	GPUInstanceProfileMIG7g
type GPUInstanceProfileInput interface {
	pulumi.Input

	ToGPUInstanceProfileOutput() GPUInstanceProfileOutput
	ToGPUInstanceProfileOutputWithContext(context.Context) GPUInstanceProfileOutput
}

var gpuinstanceProfilePtrType = reflect.TypeOf((**GPUInstanceProfile)(nil)).Elem()

type GPUInstanceProfilePtrInput interface {
	pulumi.Input

	ToGPUInstanceProfilePtrOutput() GPUInstanceProfilePtrOutput
	ToGPUInstanceProfilePtrOutputWithContext(context.Context) GPUInstanceProfilePtrOutput
}

type gpuinstanceProfilePtr string

func GPUInstanceProfilePtr(v string) GPUInstanceProfilePtrInput {
	return (*gpuinstanceProfilePtr)(&v)
}

func (*gpuinstanceProfilePtr) ElementType() reflect.Type {
	return gpuinstanceProfilePtrType
}

func (in *gpuinstanceProfilePtr) ToGPUInstanceProfilePtrOutput() GPUInstanceProfilePtrOutput {
	return pulumi.ToOutput(in).(GPUInstanceProfilePtrOutput)
}

func (in *gpuinstanceProfilePtr) ToGPUInstanceProfilePtrOutputWithContext(ctx context.Context) GPUInstanceProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GPUInstanceProfilePtrOutput)
}

// The IP version to use for cluster networking and IP assignment.
type IpFamily string

const (
	IpFamilyIPv4 = IpFamily("IPv4")
	IpFamilyIPv6 = IpFamily("IPv6")
)

func (IpFamily) ElementType() reflect.Type {
	return reflect.TypeOf((*IpFamily)(nil)).Elem()
}

func (e IpFamily) ToIpFamilyOutput() IpFamilyOutput {
	return pulumi.ToOutput(e).(IpFamilyOutput)
}

func (e IpFamily) ToIpFamilyOutputWithContext(ctx context.Context) IpFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IpFamilyOutput)
}

func (e IpFamily) ToIpFamilyPtrOutput() IpFamilyPtrOutput {
	return e.ToIpFamilyPtrOutputWithContext(context.Background())
}

func (e IpFamily) ToIpFamilyPtrOutputWithContext(ctx context.Context) IpFamilyPtrOutput {
	return IpFamily(e).ToIpFamilyOutputWithContext(ctx).ToIpFamilyPtrOutputWithContext(ctx)
}

func (e IpFamily) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IpFamily) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IpFamily) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IpFamily) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IpFamilyOutput struct{ *pulumi.OutputState }

func (IpFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpFamily)(nil)).Elem()
}

func (o IpFamilyOutput) ToIpFamilyOutput() IpFamilyOutput {
	return o
}

func (o IpFamilyOutput) ToIpFamilyOutputWithContext(ctx context.Context) IpFamilyOutput {
	return o
}

func (o IpFamilyOutput) ToIpFamilyPtrOutput() IpFamilyPtrOutput {
	return o.ToIpFamilyPtrOutputWithContext(context.Background())
}

func (o IpFamilyOutput) ToIpFamilyPtrOutputWithContext(ctx context.Context) IpFamilyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpFamily) *IpFamily {
		return &v
	}).(IpFamilyPtrOutput)
}

func (o IpFamilyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IpFamilyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IpFamily) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IpFamilyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IpFamilyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IpFamily) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IpFamilyPtrOutput struct{ *pulumi.OutputState }

func (IpFamilyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpFamily)(nil)).Elem()
}

func (o IpFamilyPtrOutput) ToIpFamilyPtrOutput() IpFamilyPtrOutput {
	return o
}

func (o IpFamilyPtrOutput) ToIpFamilyPtrOutputWithContext(ctx context.Context) IpFamilyPtrOutput {
	return o
}

func (o IpFamilyPtrOutput) Elem() IpFamilyOutput {
	return o.ApplyT(func(v *IpFamily) IpFamily {
		if v != nil {
			return *v
		}
		var ret IpFamily
		return ret
	}).(IpFamilyOutput)
}

func (o IpFamilyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IpFamilyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IpFamily) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IpFamilyInput is an input type that accepts values of the IpFamily enum
// A concrete instance of `IpFamilyInput` can be one of the following:
//
//	IpFamilyIPv4
//	IpFamilyIPv6
type IpFamilyInput interface {
	pulumi.Input

	ToIpFamilyOutput() IpFamilyOutput
	ToIpFamilyOutputWithContext(context.Context) IpFamilyOutput
}

var ipFamilyPtrType = reflect.TypeOf((**IpFamily)(nil)).Elem()

type IpFamilyPtrInput interface {
	pulumi.Input

	ToIpFamilyPtrOutput() IpFamilyPtrOutput
	ToIpFamilyPtrOutputWithContext(context.Context) IpFamilyPtrOutput
}

type ipFamilyPtr string

func IpFamilyPtr(v string) IpFamilyPtrInput {
	return (*ipFamilyPtr)(&v)
}

func (*ipFamilyPtr) ElementType() reflect.Type {
	return ipFamilyPtrType
}

func (in *ipFamilyPtr) ToIpFamilyPtrOutput() IpFamilyPtrOutput {
	return pulumi.ToOutput(in).(IpFamilyPtrOutput)
}

func (in *ipFamilyPtr) ToIpFamilyPtrOutputWithContext(ctx context.Context) IpFamilyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IpFamilyPtrOutput)
}

// Mode of an ingress gateway.
type IstioIngressGatewayMode string

const (
	// The ingress gateway is assigned a public IP address and is publicly accessible.
	IstioIngressGatewayModeExternal = IstioIngressGatewayMode("External")
	// The ingress gateway is assigned an internal IP address and cannot is accessed publicly.
	IstioIngressGatewayModeInternal = IstioIngressGatewayMode("Internal")
)

func (IstioIngressGatewayMode) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioIngressGatewayMode)(nil)).Elem()
}

func (e IstioIngressGatewayMode) ToIstioIngressGatewayModeOutput() IstioIngressGatewayModeOutput {
	return pulumi.ToOutput(e).(IstioIngressGatewayModeOutput)
}

func (e IstioIngressGatewayMode) ToIstioIngressGatewayModeOutputWithContext(ctx context.Context) IstioIngressGatewayModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IstioIngressGatewayModeOutput)
}

func (e IstioIngressGatewayMode) ToIstioIngressGatewayModePtrOutput() IstioIngressGatewayModePtrOutput {
	return e.ToIstioIngressGatewayModePtrOutputWithContext(context.Background())
}

func (e IstioIngressGatewayMode) ToIstioIngressGatewayModePtrOutputWithContext(ctx context.Context) IstioIngressGatewayModePtrOutput {
	return IstioIngressGatewayMode(e).ToIstioIngressGatewayModeOutputWithContext(ctx).ToIstioIngressGatewayModePtrOutputWithContext(ctx)
}

func (e IstioIngressGatewayMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IstioIngressGatewayMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IstioIngressGatewayMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IstioIngressGatewayMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IstioIngressGatewayModeOutput struct{ *pulumi.OutputState }

func (IstioIngressGatewayModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioIngressGatewayMode)(nil)).Elem()
}

func (o IstioIngressGatewayModeOutput) ToIstioIngressGatewayModeOutput() IstioIngressGatewayModeOutput {
	return o
}

func (o IstioIngressGatewayModeOutput) ToIstioIngressGatewayModeOutputWithContext(ctx context.Context) IstioIngressGatewayModeOutput {
	return o
}

func (o IstioIngressGatewayModeOutput) ToIstioIngressGatewayModePtrOutput() IstioIngressGatewayModePtrOutput {
	return o.ToIstioIngressGatewayModePtrOutputWithContext(context.Background())
}

func (o IstioIngressGatewayModeOutput) ToIstioIngressGatewayModePtrOutputWithContext(ctx context.Context) IstioIngressGatewayModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IstioIngressGatewayMode) *IstioIngressGatewayMode {
		return &v
	}).(IstioIngressGatewayModePtrOutput)
}

func (o IstioIngressGatewayModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IstioIngressGatewayModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IstioIngressGatewayMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IstioIngressGatewayModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IstioIngressGatewayModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IstioIngressGatewayMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IstioIngressGatewayModePtrOutput struct{ *pulumi.OutputState }

func (IstioIngressGatewayModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioIngressGatewayMode)(nil)).Elem()
}

func (o IstioIngressGatewayModePtrOutput) ToIstioIngressGatewayModePtrOutput() IstioIngressGatewayModePtrOutput {
	return o
}

func (o IstioIngressGatewayModePtrOutput) ToIstioIngressGatewayModePtrOutputWithContext(ctx context.Context) IstioIngressGatewayModePtrOutput {
	return o
}

func (o IstioIngressGatewayModePtrOutput) Elem() IstioIngressGatewayModeOutput {
	return o.ApplyT(func(v *IstioIngressGatewayMode) IstioIngressGatewayMode {
		if v != nil {
			return *v
		}
		var ret IstioIngressGatewayMode
		return ret
	}).(IstioIngressGatewayModeOutput)
}

func (o IstioIngressGatewayModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IstioIngressGatewayModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IstioIngressGatewayMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IstioIngressGatewayModeInput is an input type that accepts values of the IstioIngressGatewayMode enum
// A concrete instance of `IstioIngressGatewayModeInput` can be one of the following:
//
//	IstioIngressGatewayModeExternal
//	IstioIngressGatewayModeInternal
type IstioIngressGatewayModeInput interface {
	pulumi.Input

	ToIstioIngressGatewayModeOutput() IstioIngressGatewayModeOutput
	ToIstioIngressGatewayModeOutputWithContext(context.Context) IstioIngressGatewayModeOutput
}

var istioIngressGatewayModePtrType = reflect.TypeOf((**IstioIngressGatewayMode)(nil)).Elem()

type IstioIngressGatewayModePtrInput interface {
	pulumi.Input

	ToIstioIngressGatewayModePtrOutput() IstioIngressGatewayModePtrOutput
	ToIstioIngressGatewayModePtrOutputWithContext(context.Context) IstioIngressGatewayModePtrOutput
}

type istioIngressGatewayModePtr string

func IstioIngressGatewayModePtr(v string) IstioIngressGatewayModePtrInput {
	return (*istioIngressGatewayModePtr)(&v)
}

func (*istioIngressGatewayModePtr) ElementType() reflect.Type {
	return istioIngressGatewayModePtrType
}

func (in *istioIngressGatewayModePtr) ToIstioIngressGatewayModePtrOutput() IstioIngressGatewayModePtrOutput {
	return pulumi.ToOutput(in).(IstioIngressGatewayModePtrOutput)
}

func (in *istioIngressGatewayModePtr) ToIstioIngressGatewayModePtrOutputWithContext(ctx context.Context) IstioIngressGatewayModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IstioIngressGatewayModePtrOutput)
}

// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
type KeyVaultNetworkAccessTypes string

const (
	KeyVaultNetworkAccessTypesPublic  = KeyVaultNetworkAccessTypes("Public")
	KeyVaultNetworkAccessTypesPrivate = KeyVaultNetworkAccessTypes("Private")
)

func (KeyVaultNetworkAccessTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultNetworkAccessTypes)(nil)).Elem()
}

func (e KeyVaultNetworkAccessTypes) ToKeyVaultNetworkAccessTypesOutput() KeyVaultNetworkAccessTypesOutput {
	return pulumi.ToOutput(e).(KeyVaultNetworkAccessTypesOutput)
}

func (e KeyVaultNetworkAccessTypes) ToKeyVaultNetworkAccessTypesOutputWithContext(ctx context.Context) KeyVaultNetworkAccessTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KeyVaultNetworkAccessTypesOutput)
}

func (e KeyVaultNetworkAccessTypes) ToKeyVaultNetworkAccessTypesPtrOutput() KeyVaultNetworkAccessTypesPtrOutput {
	return e.ToKeyVaultNetworkAccessTypesPtrOutputWithContext(context.Background())
}

func (e KeyVaultNetworkAccessTypes) ToKeyVaultNetworkAccessTypesPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAccessTypesPtrOutput {
	return KeyVaultNetworkAccessTypes(e).ToKeyVaultNetworkAccessTypesOutputWithContext(ctx).ToKeyVaultNetworkAccessTypesPtrOutputWithContext(ctx)
}

func (e KeyVaultNetworkAccessTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVaultNetworkAccessTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVaultNetworkAccessTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KeyVaultNetworkAccessTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KeyVaultNetworkAccessTypesOutput struct{ *pulumi.OutputState }

func (KeyVaultNetworkAccessTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultNetworkAccessTypes)(nil)).Elem()
}

func (o KeyVaultNetworkAccessTypesOutput) ToKeyVaultNetworkAccessTypesOutput() KeyVaultNetworkAccessTypesOutput {
	return o
}

func (o KeyVaultNetworkAccessTypesOutput) ToKeyVaultNetworkAccessTypesOutputWithContext(ctx context.Context) KeyVaultNetworkAccessTypesOutput {
	return o
}

func (o KeyVaultNetworkAccessTypesOutput) ToKeyVaultNetworkAccessTypesPtrOutput() KeyVaultNetworkAccessTypesPtrOutput {
	return o.ToKeyVaultNetworkAccessTypesPtrOutputWithContext(context.Background())
}

func (o KeyVaultNetworkAccessTypesOutput) ToKeyVaultNetworkAccessTypesPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAccessTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultNetworkAccessTypes) *KeyVaultNetworkAccessTypes {
		return &v
	}).(KeyVaultNetworkAccessTypesPtrOutput)
}

func (o KeyVaultNetworkAccessTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KeyVaultNetworkAccessTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyVaultNetworkAccessTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KeyVaultNetworkAccessTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyVaultNetworkAccessTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyVaultNetworkAccessTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KeyVaultNetworkAccessTypesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultNetworkAccessTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultNetworkAccessTypes)(nil)).Elem()
}

func (o KeyVaultNetworkAccessTypesPtrOutput) ToKeyVaultNetworkAccessTypesPtrOutput() KeyVaultNetworkAccessTypesPtrOutput {
	return o
}

func (o KeyVaultNetworkAccessTypesPtrOutput) ToKeyVaultNetworkAccessTypesPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAccessTypesPtrOutput {
	return o
}

func (o KeyVaultNetworkAccessTypesPtrOutput) Elem() KeyVaultNetworkAccessTypesOutput {
	return o.ApplyT(func(v *KeyVaultNetworkAccessTypes) KeyVaultNetworkAccessTypes {
		if v != nil {
			return *v
		}
		var ret KeyVaultNetworkAccessTypes
		return ret
	}).(KeyVaultNetworkAccessTypesOutput)
}

func (o KeyVaultNetworkAccessTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyVaultNetworkAccessTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KeyVaultNetworkAccessTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KeyVaultNetworkAccessTypesInput is an input type that accepts values of the KeyVaultNetworkAccessTypes enum
// A concrete instance of `KeyVaultNetworkAccessTypesInput` can be one of the following:
//
//	KeyVaultNetworkAccessTypesPublic
//	KeyVaultNetworkAccessTypesPrivate
type KeyVaultNetworkAccessTypesInput interface {
	pulumi.Input

	ToKeyVaultNetworkAccessTypesOutput() KeyVaultNetworkAccessTypesOutput
	ToKeyVaultNetworkAccessTypesOutputWithContext(context.Context) KeyVaultNetworkAccessTypesOutput
}

var keyVaultNetworkAccessTypesPtrType = reflect.TypeOf((**KeyVaultNetworkAccessTypes)(nil)).Elem()

type KeyVaultNetworkAccessTypesPtrInput interface {
	pulumi.Input

	ToKeyVaultNetworkAccessTypesPtrOutput() KeyVaultNetworkAccessTypesPtrOutput
	ToKeyVaultNetworkAccessTypesPtrOutputWithContext(context.Context) KeyVaultNetworkAccessTypesPtrOutput
}

type keyVaultNetworkAccessTypesPtr string

func KeyVaultNetworkAccessTypesPtr(v string) KeyVaultNetworkAccessTypesPtrInput {
	return (*keyVaultNetworkAccessTypesPtr)(&v)
}

func (*keyVaultNetworkAccessTypesPtr) ElementType() reflect.Type {
	return keyVaultNetworkAccessTypesPtrType
}

func (in *keyVaultNetworkAccessTypesPtr) ToKeyVaultNetworkAccessTypesPtrOutput() KeyVaultNetworkAccessTypesPtrOutput {
	return pulumi.ToOutput(in).(KeyVaultNetworkAccessTypesPtrOutput)
}

func (in *keyVaultNetworkAccessTypesPtr) ToKeyVaultNetworkAccessTypesPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAccessTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KeyVaultNetworkAccessTypesPtrOutput)
}

// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
type KubeletDiskType string

const (
	// Kubelet will use the OS disk for its data.
	KubeletDiskTypeOS = KubeletDiskType("OS")
	// Kubelet will use the temporary disk for its data.
	KubeletDiskTypeTemporary = KubeletDiskType("Temporary")
)

func (KubeletDiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletDiskType)(nil)).Elem()
}

func (e KubeletDiskType) ToKubeletDiskTypeOutput() KubeletDiskTypeOutput {
	return pulumi.ToOutput(e).(KubeletDiskTypeOutput)
}

func (e KubeletDiskType) ToKubeletDiskTypeOutputWithContext(ctx context.Context) KubeletDiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KubeletDiskTypeOutput)
}

func (e KubeletDiskType) ToKubeletDiskTypePtrOutput() KubeletDiskTypePtrOutput {
	return e.ToKubeletDiskTypePtrOutputWithContext(context.Background())
}

func (e KubeletDiskType) ToKubeletDiskTypePtrOutputWithContext(ctx context.Context) KubeletDiskTypePtrOutput {
	return KubeletDiskType(e).ToKubeletDiskTypeOutputWithContext(ctx).ToKubeletDiskTypePtrOutputWithContext(ctx)
}

func (e KubeletDiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KubeletDiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KubeletDiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KubeletDiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KubeletDiskTypeOutput struct{ *pulumi.OutputState }

func (KubeletDiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletDiskType)(nil)).Elem()
}

func (o KubeletDiskTypeOutput) ToKubeletDiskTypeOutput() KubeletDiskTypeOutput {
	return o
}

func (o KubeletDiskTypeOutput) ToKubeletDiskTypeOutputWithContext(ctx context.Context) KubeletDiskTypeOutput {
	return o
}

func (o KubeletDiskTypeOutput) ToKubeletDiskTypePtrOutput() KubeletDiskTypePtrOutput {
	return o.ToKubeletDiskTypePtrOutputWithContext(context.Background())
}

func (o KubeletDiskTypeOutput) ToKubeletDiskTypePtrOutputWithContext(ctx context.Context) KubeletDiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubeletDiskType) *KubeletDiskType {
		return &v
	}).(KubeletDiskTypePtrOutput)
}

func (o KubeletDiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KubeletDiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KubeletDiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KubeletDiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KubeletDiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KubeletDiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KubeletDiskTypePtrOutput struct{ *pulumi.OutputState }

func (KubeletDiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletDiskType)(nil)).Elem()
}

func (o KubeletDiskTypePtrOutput) ToKubeletDiskTypePtrOutput() KubeletDiskTypePtrOutput {
	return o
}

func (o KubeletDiskTypePtrOutput) ToKubeletDiskTypePtrOutputWithContext(ctx context.Context) KubeletDiskTypePtrOutput {
	return o
}

func (o KubeletDiskTypePtrOutput) Elem() KubeletDiskTypeOutput {
	return o.ApplyT(func(v *KubeletDiskType) KubeletDiskType {
		if v != nil {
			return *v
		}
		var ret KubeletDiskType
		return ret
	}).(KubeletDiskTypeOutput)
}

func (o KubeletDiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KubeletDiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KubeletDiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KubeletDiskTypeInput is an input type that accepts values of the KubeletDiskType enum
// A concrete instance of `KubeletDiskTypeInput` can be one of the following:
//
//	KubeletDiskTypeOS
//	KubeletDiskTypeTemporary
type KubeletDiskTypeInput interface {
	pulumi.Input

	ToKubeletDiskTypeOutput() KubeletDiskTypeOutput
	ToKubeletDiskTypeOutputWithContext(context.Context) KubeletDiskTypeOutput
}

var kubeletDiskTypePtrType = reflect.TypeOf((**KubeletDiskType)(nil)).Elem()

type KubeletDiskTypePtrInput interface {
	pulumi.Input

	ToKubeletDiskTypePtrOutput() KubeletDiskTypePtrOutput
	ToKubeletDiskTypePtrOutputWithContext(context.Context) KubeletDiskTypePtrOutput
}

type kubeletDiskTypePtr string

func KubeletDiskTypePtr(v string) KubeletDiskTypePtrInput {
	return (*kubeletDiskTypePtr)(&v)
}

func (*kubeletDiskTypePtr) ElementType() reflect.Type {
	return kubeletDiskTypePtrType
}

func (in *kubeletDiskTypePtr) ToKubeletDiskTypePtrOutput() KubeletDiskTypePtrOutput {
	return pulumi.ToOutput(in).(KubeletDiskTypePtrOutput)
}

func (in *kubeletDiskTypePtr) ToKubeletDiskTypePtrOutputWithContext(ctx context.Context) KubeletDiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KubeletDiskTypePtrOutput)
}

// The support plan for the Managed Cluster. If unspecified, the default is 'KubernetesOfficial'.
type KubernetesSupportPlan string

const (
	// Support for the version is the same as for the open source Kubernetes offering. Official Kubernetes open source community support versions for 1 year after release.
	KubernetesSupportPlanKubernetesOfficial = KubernetesSupportPlan("KubernetesOfficial")
	// Support for the version extended past the KubernetesOfficial support of 1 year. AKS continues to patch CVEs for another 1 year, for a total of 2 years of support.
	KubernetesSupportPlanAKSLongTermSupport = KubernetesSupportPlan("AKSLongTermSupport")
)

func (KubernetesSupportPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesSupportPlan)(nil)).Elem()
}

func (e KubernetesSupportPlan) ToKubernetesSupportPlanOutput() KubernetesSupportPlanOutput {
	return pulumi.ToOutput(e).(KubernetesSupportPlanOutput)
}

func (e KubernetesSupportPlan) ToKubernetesSupportPlanOutputWithContext(ctx context.Context) KubernetesSupportPlanOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KubernetesSupportPlanOutput)
}

func (e KubernetesSupportPlan) ToKubernetesSupportPlanPtrOutput() KubernetesSupportPlanPtrOutput {
	return e.ToKubernetesSupportPlanPtrOutputWithContext(context.Background())
}

func (e KubernetesSupportPlan) ToKubernetesSupportPlanPtrOutputWithContext(ctx context.Context) KubernetesSupportPlanPtrOutput {
	return KubernetesSupportPlan(e).ToKubernetesSupportPlanOutputWithContext(ctx).ToKubernetesSupportPlanPtrOutputWithContext(ctx)
}

func (e KubernetesSupportPlan) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KubernetesSupportPlan) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KubernetesSupportPlan) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KubernetesSupportPlan) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KubernetesSupportPlanOutput struct{ *pulumi.OutputState }

func (KubernetesSupportPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesSupportPlan)(nil)).Elem()
}

func (o KubernetesSupportPlanOutput) ToKubernetesSupportPlanOutput() KubernetesSupportPlanOutput {
	return o
}

func (o KubernetesSupportPlanOutput) ToKubernetesSupportPlanOutputWithContext(ctx context.Context) KubernetesSupportPlanOutput {
	return o
}

func (o KubernetesSupportPlanOutput) ToKubernetesSupportPlanPtrOutput() KubernetesSupportPlanPtrOutput {
	return o.ToKubernetesSupportPlanPtrOutputWithContext(context.Background())
}

func (o KubernetesSupportPlanOutput) ToKubernetesSupportPlanPtrOutputWithContext(ctx context.Context) KubernetesSupportPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesSupportPlan) *KubernetesSupportPlan {
		return &v
	}).(KubernetesSupportPlanPtrOutput)
}

func (o KubernetesSupportPlanOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KubernetesSupportPlanOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KubernetesSupportPlan) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KubernetesSupportPlanOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KubernetesSupportPlanOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KubernetesSupportPlan) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KubernetesSupportPlanPtrOutput struct{ *pulumi.OutputState }

func (KubernetesSupportPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesSupportPlan)(nil)).Elem()
}

func (o KubernetesSupportPlanPtrOutput) ToKubernetesSupportPlanPtrOutput() KubernetesSupportPlanPtrOutput {
	return o
}

func (o KubernetesSupportPlanPtrOutput) ToKubernetesSupportPlanPtrOutputWithContext(ctx context.Context) KubernetesSupportPlanPtrOutput {
	return o
}

func (o KubernetesSupportPlanPtrOutput) Elem() KubernetesSupportPlanOutput {
	return o.ApplyT(func(v *KubernetesSupportPlan) KubernetesSupportPlan {
		if v != nil {
			return *v
		}
		var ret KubernetesSupportPlan
		return ret
	}).(KubernetesSupportPlanOutput)
}

func (o KubernetesSupportPlanPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KubernetesSupportPlanPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KubernetesSupportPlan) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KubernetesSupportPlanInput is an input type that accepts values of the KubernetesSupportPlan enum
// A concrete instance of `KubernetesSupportPlanInput` can be one of the following:
//
//	KubernetesSupportPlanKubernetesOfficial
//	KubernetesSupportPlanAKSLongTermSupport
type KubernetesSupportPlanInput interface {
	pulumi.Input

	ToKubernetesSupportPlanOutput() KubernetesSupportPlanOutput
	ToKubernetesSupportPlanOutputWithContext(context.Context) KubernetesSupportPlanOutput
}

var kubernetesSupportPlanPtrType = reflect.TypeOf((**KubernetesSupportPlan)(nil)).Elem()

type KubernetesSupportPlanPtrInput interface {
	pulumi.Input

	ToKubernetesSupportPlanPtrOutput() KubernetesSupportPlanPtrOutput
	ToKubernetesSupportPlanPtrOutputWithContext(context.Context) KubernetesSupportPlanPtrOutput
}

type kubernetesSupportPlanPtr string

func KubernetesSupportPlanPtr(v string) KubernetesSupportPlanPtrInput {
	return (*kubernetesSupportPlanPtr)(&v)
}

func (*kubernetesSupportPlanPtr) ElementType() reflect.Type {
	return kubernetesSupportPlanPtrType
}

func (in *kubernetesSupportPlanPtr) ToKubernetesSupportPlanPtrOutput() KubernetesSupportPlanPtrOutput {
	return pulumi.ToOutput(in).(KubernetesSupportPlanPtrOutput)
}

func (in *kubernetesSupportPlanPtr) ToKubernetesSupportPlanPtrOutputWithContext(ctx context.Context) KubernetesSupportPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KubernetesSupportPlanPtrOutput)
}

// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
type LicenseType string

const (
	// No additional licensing is applied.
	LicenseTypeNone = LicenseType("None")
	// Enables Azure Hybrid User Benefits for Windows VMs.
	LicenseType_Windows_Server = LicenseType("Windows_Server")
)

func (LicenseType) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseType)(nil)).Elem()
}

func (e LicenseType) ToLicenseTypeOutput() LicenseTypeOutput {
	return pulumi.ToOutput(e).(LicenseTypeOutput)
}

func (e LicenseType) ToLicenseTypeOutputWithContext(ctx context.Context) LicenseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseTypeOutput)
}

func (e LicenseType) ToLicenseTypePtrOutput() LicenseTypePtrOutput {
	return e.ToLicenseTypePtrOutputWithContext(context.Background())
}

func (e LicenseType) ToLicenseTypePtrOutputWithContext(ctx context.Context) LicenseTypePtrOutput {
	return LicenseType(e).ToLicenseTypeOutputWithContext(ctx).ToLicenseTypePtrOutputWithContext(ctx)
}

func (e LicenseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseTypeOutput struct{ *pulumi.OutputState }

func (LicenseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseType)(nil)).Elem()
}

func (o LicenseTypeOutput) ToLicenseTypeOutput() LicenseTypeOutput {
	return o
}

func (o LicenseTypeOutput) ToLicenseTypeOutputWithContext(ctx context.Context) LicenseTypeOutput {
	return o
}

func (o LicenseTypeOutput) ToLicenseTypePtrOutput() LicenseTypePtrOutput {
	return o.ToLicenseTypePtrOutputWithContext(context.Background())
}

func (o LicenseTypeOutput) ToLicenseTypePtrOutputWithContext(ctx context.Context) LicenseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseType) *LicenseType {
		return &v
	}).(LicenseTypePtrOutput)
}

func (o LicenseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseTypePtrOutput struct{ *pulumi.OutputState }

func (LicenseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseType)(nil)).Elem()
}

func (o LicenseTypePtrOutput) ToLicenseTypePtrOutput() LicenseTypePtrOutput {
	return o
}

func (o LicenseTypePtrOutput) ToLicenseTypePtrOutputWithContext(ctx context.Context) LicenseTypePtrOutput {
	return o
}

func (o LicenseTypePtrOutput) Elem() LicenseTypeOutput {
	return o.ApplyT(func(v *LicenseType) LicenseType {
		if v != nil {
			return *v
		}
		var ret LicenseType
		return ret
	}).(LicenseTypeOutput)
}

func (o LicenseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseTypeInput is an input type that accepts values of the LicenseType enum
// A concrete instance of `LicenseTypeInput` can be one of the following:
//
//	LicenseTypeNone
//	LicenseType_Windows_Server
type LicenseTypeInput interface {
	pulumi.Input

	ToLicenseTypeOutput() LicenseTypeOutput
	ToLicenseTypeOutputWithContext(context.Context) LicenseTypeOutput
}

var licenseTypePtrType = reflect.TypeOf((**LicenseType)(nil)).Elem()

type LicenseTypePtrInput interface {
	pulumi.Input

	ToLicenseTypePtrOutput() LicenseTypePtrOutput
	ToLicenseTypePtrOutputWithContext(context.Context) LicenseTypePtrOutput
}

type licenseTypePtr string

func LicenseTypePtr(v string) LicenseTypePtrInput {
	return (*licenseTypePtr)(&v)
}

func (*licenseTypePtr) ElementType() reflect.Type {
	return licenseTypePtrType
}

func (in *licenseTypePtr) ToLicenseTypePtrOutput() LicenseTypePtrOutput {
	return pulumi.ToOutput(in).(LicenseTypePtrOutput)
}

func (in *licenseTypePtr) ToLicenseTypePtrOutputWithContext(ctx context.Context) LicenseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseTypePtrOutput)
}

// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
type LoadBalancerSku string

const (
	// Use a a standard Load Balancer. This is the recommended Load Balancer SKU. For more information about on working with the load balancer in the managed cluster, see the [standard Load Balancer](https://docs.microsoft.com/azure/aks/load-balancer-standard) article.
	LoadBalancerSkuStandard = LoadBalancerSku("standard")
	// Use a basic Load Balancer with limited functionality.
	LoadBalancerSkuBasic = LoadBalancerSku("basic")
)

func (LoadBalancerSku) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSku)(nil)).Elem()
}

func (e LoadBalancerSku) ToLoadBalancerSkuOutput() LoadBalancerSkuOutput {
	return pulumi.ToOutput(e).(LoadBalancerSkuOutput)
}

func (e LoadBalancerSku) ToLoadBalancerSkuOutputWithContext(ctx context.Context) LoadBalancerSkuOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LoadBalancerSkuOutput)
}

func (e LoadBalancerSku) ToLoadBalancerSkuPtrOutput() LoadBalancerSkuPtrOutput {
	return e.ToLoadBalancerSkuPtrOutputWithContext(context.Background())
}

func (e LoadBalancerSku) ToLoadBalancerSkuPtrOutputWithContext(ctx context.Context) LoadBalancerSkuPtrOutput {
	return LoadBalancerSku(e).ToLoadBalancerSkuOutputWithContext(ctx).ToLoadBalancerSkuPtrOutputWithContext(ctx)
}

func (e LoadBalancerSku) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoadBalancerSku) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LoadBalancerSku) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LoadBalancerSku) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LoadBalancerSkuOutput struct{ *pulumi.OutputState }

func (LoadBalancerSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSku)(nil)).Elem()
}

func (o LoadBalancerSkuOutput) ToLoadBalancerSkuOutput() LoadBalancerSkuOutput {
	return o
}

func (o LoadBalancerSkuOutput) ToLoadBalancerSkuOutputWithContext(ctx context.Context) LoadBalancerSkuOutput {
	return o
}

func (o LoadBalancerSkuOutput) ToLoadBalancerSkuPtrOutput() LoadBalancerSkuPtrOutput {
	return o.ToLoadBalancerSkuPtrOutputWithContext(context.Background())
}

func (o LoadBalancerSkuOutput) ToLoadBalancerSkuPtrOutputWithContext(ctx context.Context) LoadBalancerSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerSku) *LoadBalancerSku {
		return &v
	}).(LoadBalancerSkuPtrOutput)
}

func (o LoadBalancerSkuOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LoadBalancerSkuOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoadBalancerSku) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LoadBalancerSkuOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoadBalancerSkuOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LoadBalancerSku) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LoadBalancerSkuPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerSku)(nil)).Elem()
}

func (o LoadBalancerSkuPtrOutput) ToLoadBalancerSkuPtrOutput() LoadBalancerSkuPtrOutput {
	return o
}

func (o LoadBalancerSkuPtrOutput) ToLoadBalancerSkuPtrOutputWithContext(ctx context.Context) LoadBalancerSkuPtrOutput {
	return o
}

func (o LoadBalancerSkuPtrOutput) Elem() LoadBalancerSkuOutput {
	return o.ApplyT(func(v *LoadBalancerSku) LoadBalancerSku {
		if v != nil {
			return *v
		}
		var ret LoadBalancerSku
		return ret
	}).(LoadBalancerSkuOutput)
}

func (o LoadBalancerSkuPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoadBalancerSkuPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LoadBalancerSku) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LoadBalancerSkuInput is an input type that accepts values of the LoadBalancerSku enum
// A concrete instance of `LoadBalancerSkuInput` can be one of the following:
//
//	LoadBalancerSkuStandard
//	LoadBalancerSkuBasic
type LoadBalancerSkuInput interface {
	pulumi.Input

	ToLoadBalancerSkuOutput() LoadBalancerSkuOutput
	ToLoadBalancerSkuOutputWithContext(context.Context) LoadBalancerSkuOutput
}

var loadBalancerSkuPtrType = reflect.TypeOf((**LoadBalancerSku)(nil)).Elem()

type LoadBalancerSkuPtrInput interface {
	pulumi.Input

	ToLoadBalancerSkuPtrOutput() LoadBalancerSkuPtrOutput
	ToLoadBalancerSkuPtrOutputWithContext(context.Context) LoadBalancerSkuPtrOutput
}

type loadBalancerSkuPtr string

func LoadBalancerSkuPtr(v string) LoadBalancerSkuPtrInput {
	return (*loadBalancerSkuPtr)(&v)
}

func (*loadBalancerSkuPtr) ElementType() reflect.Type {
	return loadBalancerSkuPtrType
}

func (in *loadBalancerSkuPtr) ToLoadBalancerSkuPtrOutput() LoadBalancerSkuPtrOutput {
	return pulumi.ToOutput(in).(LoadBalancerSkuPtrOutput)
}

func (in *loadBalancerSkuPtr) ToLoadBalancerSkuPtrOutputWithContext(ctx context.Context) LoadBalancerSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LoadBalancerSkuPtrOutput)
}

// The name of a managed cluster SKU.
type ManagedClusterSKUName string

const (
	// Base option for the AKS control plane.
	ManagedClusterSKUNameBase = ManagedClusterSKUName("Base")
)

func (ManagedClusterSKUName) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKUName)(nil)).Elem()
}

func (e ManagedClusterSKUName) ToManagedClusterSKUNameOutput() ManagedClusterSKUNameOutput {
	return pulumi.ToOutput(e).(ManagedClusterSKUNameOutput)
}

func (e ManagedClusterSKUName) ToManagedClusterSKUNameOutputWithContext(ctx context.Context) ManagedClusterSKUNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedClusterSKUNameOutput)
}

func (e ManagedClusterSKUName) ToManagedClusterSKUNamePtrOutput() ManagedClusterSKUNamePtrOutput {
	return e.ToManagedClusterSKUNamePtrOutputWithContext(context.Background())
}

func (e ManagedClusterSKUName) ToManagedClusterSKUNamePtrOutputWithContext(ctx context.Context) ManagedClusterSKUNamePtrOutput {
	return ManagedClusterSKUName(e).ToManagedClusterSKUNameOutputWithContext(ctx).ToManagedClusterSKUNamePtrOutputWithContext(ctx)
}

func (e ManagedClusterSKUName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterSKUName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterSKUName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedClusterSKUName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedClusterSKUNameOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKUName)(nil)).Elem()
}

func (o ManagedClusterSKUNameOutput) ToManagedClusterSKUNameOutput() ManagedClusterSKUNameOutput {
	return o
}

func (o ManagedClusterSKUNameOutput) ToManagedClusterSKUNameOutputWithContext(ctx context.Context) ManagedClusterSKUNameOutput {
	return o
}

func (o ManagedClusterSKUNameOutput) ToManagedClusterSKUNamePtrOutput() ManagedClusterSKUNamePtrOutput {
	return o.ToManagedClusterSKUNamePtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUNameOutput) ToManagedClusterSKUNamePtrOutputWithContext(ctx context.Context) ManagedClusterSKUNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSKUName) *ManagedClusterSKUName {
		return &v
	}).(ManagedClusterSKUNamePtrOutput)
}

func (o ManagedClusterSKUNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedClusterSKUNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterSKUName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedClusterSKUNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterSKUName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedClusterSKUNamePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSKUName)(nil)).Elem()
}

func (o ManagedClusterSKUNamePtrOutput) ToManagedClusterSKUNamePtrOutput() ManagedClusterSKUNamePtrOutput {
	return o
}

func (o ManagedClusterSKUNamePtrOutput) ToManagedClusterSKUNamePtrOutputWithContext(ctx context.Context) ManagedClusterSKUNamePtrOutput {
	return o
}

func (o ManagedClusterSKUNamePtrOutput) Elem() ManagedClusterSKUNameOutput {
	return o.ApplyT(func(v *ManagedClusterSKUName) ManagedClusterSKUName {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSKUName
		return ret
	}).(ManagedClusterSKUNameOutput)
}

func (o ManagedClusterSKUNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedClusterSKUName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedClusterSKUNameInput is an input type that accepts values of the ManagedClusterSKUName enum
// A concrete instance of `ManagedClusterSKUNameInput` can be one of the following:
//
//	ManagedClusterSKUNameBase
type ManagedClusterSKUNameInput interface {
	pulumi.Input

	ToManagedClusterSKUNameOutput() ManagedClusterSKUNameOutput
	ToManagedClusterSKUNameOutputWithContext(context.Context) ManagedClusterSKUNameOutput
}

var managedClusterSKUNamePtrType = reflect.TypeOf((**ManagedClusterSKUName)(nil)).Elem()

type ManagedClusterSKUNamePtrInput interface {
	pulumi.Input

	ToManagedClusterSKUNamePtrOutput() ManagedClusterSKUNamePtrOutput
	ToManagedClusterSKUNamePtrOutputWithContext(context.Context) ManagedClusterSKUNamePtrOutput
}

type managedClusterSKUNamePtr string

func ManagedClusterSKUNamePtr(v string) ManagedClusterSKUNamePtrInput {
	return (*managedClusterSKUNamePtr)(&v)
}

func (*managedClusterSKUNamePtr) ElementType() reflect.Type {
	return managedClusterSKUNamePtrType
}

func (in *managedClusterSKUNamePtr) ToManagedClusterSKUNamePtrOutput() ManagedClusterSKUNamePtrOutput {
	return pulumi.ToOutput(in).(ManagedClusterSKUNamePtrOutput)
}

func (in *managedClusterSKUNamePtr) ToManagedClusterSKUNamePtrOutputWithContext(ctx context.Context) ManagedClusterSKUNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedClusterSKUNamePtrOutput)
}

// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
type ManagedClusterSKUTier string

const (
	// Cluster has premium capabilities in addition to all of the capabilities included in 'Standard'. Premium enables selection of LongTermSupport (aka.ms/aks/lts) for certain Kubernetes versions.
	ManagedClusterSKUTierPremium = ManagedClusterSKUTier("Premium")
	// Recommended for mission-critical and production workloads. Includes Kubernetes control plane autoscaling, workload-intensive testing, and up to 5,000 nodes per cluster. Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use Availability Zones and 99.9% of availability for clusters that don't use Availability Zones.
	ManagedClusterSKUTierStandard = ManagedClusterSKUTier("Standard")
	// The cluster management is free, but charged for VM, storage, and networking usage. Best for experimenting, learning, simple testing, or workloads with fewer than 10 nodes. Not recommended for production use cases.
	ManagedClusterSKUTierFree = ManagedClusterSKUTier("Free")
)

func (ManagedClusterSKUTier) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKUTier)(nil)).Elem()
}

func (e ManagedClusterSKUTier) ToManagedClusterSKUTierOutput() ManagedClusterSKUTierOutput {
	return pulumi.ToOutput(e).(ManagedClusterSKUTierOutput)
}

func (e ManagedClusterSKUTier) ToManagedClusterSKUTierOutputWithContext(ctx context.Context) ManagedClusterSKUTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedClusterSKUTierOutput)
}

func (e ManagedClusterSKUTier) ToManagedClusterSKUTierPtrOutput() ManagedClusterSKUTierPtrOutput {
	return e.ToManagedClusterSKUTierPtrOutputWithContext(context.Background())
}

func (e ManagedClusterSKUTier) ToManagedClusterSKUTierPtrOutputWithContext(ctx context.Context) ManagedClusterSKUTierPtrOutput {
	return ManagedClusterSKUTier(e).ToManagedClusterSKUTierOutputWithContext(ctx).ToManagedClusterSKUTierPtrOutputWithContext(ctx)
}

func (e ManagedClusterSKUTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterSKUTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterSKUTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedClusterSKUTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedClusterSKUTierOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKUTier)(nil)).Elem()
}

func (o ManagedClusterSKUTierOutput) ToManagedClusterSKUTierOutput() ManagedClusterSKUTierOutput {
	return o
}

func (o ManagedClusterSKUTierOutput) ToManagedClusterSKUTierOutputWithContext(ctx context.Context) ManagedClusterSKUTierOutput {
	return o
}

func (o ManagedClusterSKUTierOutput) ToManagedClusterSKUTierPtrOutput() ManagedClusterSKUTierPtrOutput {
	return o.ToManagedClusterSKUTierPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUTierOutput) ToManagedClusterSKUTierPtrOutputWithContext(ctx context.Context) ManagedClusterSKUTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSKUTier) *ManagedClusterSKUTier {
		return &v
	}).(ManagedClusterSKUTierPtrOutput)
}

func (o ManagedClusterSKUTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedClusterSKUTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterSKUTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedClusterSKUTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterSKUTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedClusterSKUTierPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSKUTier)(nil)).Elem()
}

func (o ManagedClusterSKUTierPtrOutput) ToManagedClusterSKUTierPtrOutput() ManagedClusterSKUTierPtrOutput {
	return o
}

func (o ManagedClusterSKUTierPtrOutput) ToManagedClusterSKUTierPtrOutputWithContext(ctx context.Context) ManagedClusterSKUTierPtrOutput {
	return o
}

func (o ManagedClusterSKUTierPtrOutput) Elem() ManagedClusterSKUTierOutput {
	return o.ApplyT(func(v *ManagedClusterSKUTier) ManagedClusterSKUTier {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSKUTier
		return ret
	}).(ManagedClusterSKUTierOutput)
}

func (o ManagedClusterSKUTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedClusterSKUTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedClusterSKUTierInput is an input type that accepts values of the ManagedClusterSKUTier enum
// A concrete instance of `ManagedClusterSKUTierInput` can be one of the following:
//
//	ManagedClusterSKUTierPremium
//	ManagedClusterSKUTierStandard
//	ManagedClusterSKUTierFree
type ManagedClusterSKUTierInput interface {
	pulumi.Input

	ToManagedClusterSKUTierOutput() ManagedClusterSKUTierOutput
	ToManagedClusterSKUTierOutputWithContext(context.Context) ManagedClusterSKUTierOutput
}

var managedClusterSKUTierPtrType = reflect.TypeOf((**ManagedClusterSKUTier)(nil)).Elem()

type ManagedClusterSKUTierPtrInput interface {
	pulumi.Input

	ToManagedClusterSKUTierPtrOutput() ManagedClusterSKUTierPtrOutput
	ToManagedClusterSKUTierPtrOutputWithContext(context.Context) ManagedClusterSKUTierPtrOutput
}

type managedClusterSKUTierPtr string

func ManagedClusterSKUTierPtr(v string) ManagedClusterSKUTierPtrInput {
	return (*managedClusterSKUTierPtr)(&v)
}

func (*managedClusterSKUTierPtr) ElementType() reflect.Type {
	return managedClusterSKUTierPtrType
}

func (in *managedClusterSKUTierPtr) ToManagedClusterSKUTierPtrOutput() ManagedClusterSKUTierPtrOutput {
	return pulumi.ToOutput(in).(ManagedClusterSKUTierPtrOutput)
}

func (in *managedClusterSKUTierPtr) ToManagedClusterSKUTierPtrOutputWithContext(ctx context.Context) ManagedClusterSKUTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedClusterSKUTierPtrOutput)
}

// ManagedClusterUpgradeType is the type of upgrade to be applied.
type ManagedClusterUpgradeType string

const (
	// Full upgrades the control plane and all agent pools of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set.
	ManagedClusterUpgradeTypeFull = ManagedClusterUpgradeType("Full")
	// NodeImageOnly upgrades only the node images of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to NOT be set.
	ManagedClusterUpgradeTypeNodeImageOnly = ManagedClusterUpgradeType("NodeImageOnly")
	// ControlPlaneOnly upgrades only targets the KubernetesVersion of the ManagedClusters and will not be applied to the AgentPool. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set.
	ManagedClusterUpgradeTypeControlPlaneOnly = ManagedClusterUpgradeType("ControlPlaneOnly")
)

func (ManagedClusterUpgradeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeType)(nil)).Elem()
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypeOutput() ManagedClusterUpgradeTypeOutput {
	return pulumi.ToOutput(e).(ManagedClusterUpgradeTypeOutput)
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypeOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedClusterUpgradeTypeOutput)
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return e.ToManagedClusterUpgradeTypePtrOutputWithContext(context.Background())
}

func (e ManagedClusterUpgradeType) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return ManagedClusterUpgradeType(e).ToManagedClusterUpgradeTypeOutputWithContext(ctx).ToManagedClusterUpgradeTypePtrOutputWithContext(ctx)
}

func (e ManagedClusterUpgradeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterUpgradeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedClusterUpgradeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedClusterUpgradeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedClusterUpgradeTypeOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpgradeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeType)(nil)).Elem()
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypeOutput() ManagedClusterUpgradeTypeOutput {
	return o
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypeOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypeOutput {
	return o
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return o.ToManagedClusterUpgradeTypePtrOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypeOutput) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterUpgradeType) *ManagedClusterUpgradeType {
		return &v
	}).(ManagedClusterUpgradeTypePtrOutput)
}

func (o ManagedClusterUpgradeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterUpgradeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedClusterUpgradeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedClusterUpgradeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedClusterUpgradeTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpgradeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterUpgradeType)(nil)).Elem()
}

func (o ManagedClusterUpgradeTypePtrOutput) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return o
}

func (o ManagedClusterUpgradeTypePtrOutput) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return o
}

func (o ManagedClusterUpgradeTypePtrOutput) Elem() ManagedClusterUpgradeTypeOutput {
	return o.ApplyT(func(v *ManagedClusterUpgradeType) ManagedClusterUpgradeType {
		if v != nil {
			return *v
		}
		var ret ManagedClusterUpgradeType
		return ret
	}).(ManagedClusterUpgradeTypeOutput)
}

func (o ManagedClusterUpgradeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterUpgradeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedClusterUpgradeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedClusterUpgradeTypeInput is an input type that accepts values of the ManagedClusterUpgradeType enum
// A concrete instance of `ManagedClusterUpgradeTypeInput` can be one of the following:
//
//	ManagedClusterUpgradeTypeFull
//	ManagedClusterUpgradeTypeNodeImageOnly
//	ManagedClusterUpgradeTypeControlPlaneOnly
type ManagedClusterUpgradeTypeInput interface {
	pulumi.Input

	ToManagedClusterUpgradeTypeOutput() ManagedClusterUpgradeTypeOutput
	ToManagedClusterUpgradeTypeOutputWithContext(context.Context) ManagedClusterUpgradeTypeOutput
}

var managedClusterUpgradeTypePtrType = reflect.TypeOf((**ManagedClusterUpgradeType)(nil)).Elem()

type ManagedClusterUpgradeTypePtrInput interface {
	pulumi.Input

	ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput
	ToManagedClusterUpgradeTypePtrOutputWithContext(context.Context) ManagedClusterUpgradeTypePtrOutput
}

type managedClusterUpgradeTypePtr string

func ManagedClusterUpgradeTypePtr(v string) ManagedClusterUpgradeTypePtrInput {
	return (*managedClusterUpgradeTypePtr)(&v)
}

func (*managedClusterUpgradeTypePtr) ElementType() reflect.Type {
	return managedClusterUpgradeTypePtrType
}

func (in *managedClusterUpgradeTypePtr) ToManagedClusterUpgradeTypePtrOutput() ManagedClusterUpgradeTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedClusterUpgradeTypePtrOutput)
}

func (in *managedClusterUpgradeTypePtr) ToManagedClusterUpgradeTypePtrOutputWithContext(ctx context.Context) ManagedClusterUpgradeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedClusterUpgradeTypePtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned, UserAssigned")
)

func (ManagedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return e.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return ManagedServiceIdentityType(e).ToManagedServiceIdentityTypeOutputWithContext(ctx).ToManagedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentityType) *ManagedServiceIdentityType {
		return &v
	}).(ManagedServiceIdentityTypePtrOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) Elem() ManagedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityType) ManagedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityType
		return ret
	}).(ManagedServiceIdentityTypeOutput)
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedServiceIdentityTypeInput is an input type that accepts values of the ManagedServiceIdentityType enum
// A concrete instance of `ManagedServiceIdentityTypeInput` can be one of the following:
//
//	ManagedServiceIdentityTypeNone
//	ManagedServiceIdentityTypeSystemAssigned
//	ManagedServiceIdentityTypeUserAssigned
//	ManagedServiceIdentityType_SystemAssigned_UserAssigned
type ManagedServiceIdentityTypeInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput
	ToManagedServiceIdentityTypeOutputWithContext(context.Context) ManagedServiceIdentityTypeOutput
}

var managedServiceIdentityTypePtrType = reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()

type ManagedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput
	ToManagedServiceIdentityTypePtrOutputWithContext(context.Context) ManagedServiceIdentityTypePtrOutput
}

type managedServiceIdentityTypePtr string

func ManagedServiceIdentityTypePtr(v string) ManagedServiceIdentityTypePtrInput {
	return (*managedServiceIdentityTypePtr)(&v)
}

func (*managedServiceIdentityTypePtr) ElementType() reflect.Type {
	return managedServiceIdentityTypePtrType
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedServiceIdentityTypePtrOutput)
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedServiceIdentityTypePtrOutput)
}

// Network dataplane used in the Kubernetes cluster.
type NetworkDataplane string

const (
	// Use Azure network dataplane.
	NetworkDataplaneAzure = NetworkDataplane("azure")
	// Use Cilium network dataplane. See [Azure CNI Powered by Cilium](https://learn.microsoft.com/azure/aks/azure-cni-powered-by-cilium) for more information.
	NetworkDataplaneCilium = NetworkDataplane("cilium")
)

func (NetworkDataplane) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDataplane)(nil)).Elem()
}

func (e NetworkDataplane) ToNetworkDataplaneOutput() NetworkDataplaneOutput {
	return pulumi.ToOutput(e).(NetworkDataplaneOutput)
}

func (e NetworkDataplane) ToNetworkDataplaneOutputWithContext(ctx context.Context) NetworkDataplaneOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkDataplaneOutput)
}

func (e NetworkDataplane) ToNetworkDataplanePtrOutput() NetworkDataplanePtrOutput {
	return e.ToNetworkDataplanePtrOutputWithContext(context.Background())
}

func (e NetworkDataplane) ToNetworkDataplanePtrOutputWithContext(ctx context.Context) NetworkDataplanePtrOutput {
	return NetworkDataplane(e).ToNetworkDataplaneOutputWithContext(ctx).ToNetworkDataplanePtrOutputWithContext(ctx)
}

func (e NetworkDataplane) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkDataplane) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkDataplane) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkDataplane) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkDataplaneOutput struct{ *pulumi.OutputState }

func (NetworkDataplaneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkDataplane)(nil)).Elem()
}

func (o NetworkDataplaneOutput) ToNetworkDataplaneOutput() NetworkDataplaneOutput {
	return o
}

func (o NetworkDataplaneOutput) ToNetworkDataplaneOutputWithContext(ctx context.Context) NetworkDataplaneOutput {
	return o
}

func (o NetworkDataplaneOutput) ToNetworkDataplanePtrOutput() NetworkDataplanePtrOutput {
	return o.ToNetworkDataplanePtrOutputWithContext(context.Background())
}

func (o NetworkDataplaneOutput) ToNetworkDataplanePtrOutputWithContext(ctx context.Context) NetworkDataplanePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkDataplane) *NetworkDataplane {
		return &v
	}).(NetworkDataplanePtrOutput)
}

func (o NetworkDataplaneOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkDataplaneOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkDataplane) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkDataplaneOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkDataplaneOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkDataplane) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkDataplanePtrOutput struct{ *pulumi.OutputState }

func (NetworkDataplanePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkDataplane)(nil)).Elem()
}

func (o NetworkDataplanePtrOutput) ToNetworkDataplanePtrOutput() NetworkDataplanePtrOutput {
	return o
}

func (o NetworkDataplanePtrOutput) ToNetworkDataplanePtrOutputWithContext(ctx context.Context) NetworkDataplanePtrOutput {
	return o
}

func (o NetworkDataplanePtrOutput) Elem() NetworkDataplaneOutput {
	return o.ApplyT(func(v *NetworkDataplane) NetworkDataplane {
		if v != nil {
			return *v
		}
		var ret NetworkDataplane
		return ret
	}).(NetworkDataplaneOutput)
}

func (o NetworkDataplanePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkDataplanePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkDataplane) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkDataplaneInput is an input type that accepts values of the NetworkDataplane enum
// A concrete instance of `NetworkDataplaneInput` can be one of the following:
//
//	NetworkDataplaneAzure
//	NetworkDataplaneCilium
type NetworkDataplaneInput interface {
	pulumi.Input

	ToNetworkDataplaneOutput() NetworkDataplaneOutput
	ToNetworkDataplaneOutputWithContext(context.Context) NetworkDataplaneOutput
}

var networkDataplanePtrType = reflect.TypeOf((**NetworkDataplane)(nil)).Elem()

type NetworkDataplanePtrInput interface {
	pulumi.Input

	ToNetworkDataplanePtrOutput() NetworkDataplanePtrOutput
	ToNetworkDataplanePtrOutputWithContext(context.Context) NetworkDataplanePtrOutput
}

type networkDataplanePtr string

func NetworkDataplanePtr(v string) NetworkDataplanePtrInput {
	return (*networkDataplanePtr)(&v)
}

func (*networkDataplanePtr) ElementType() reflect.Type {
	return networkDataplanePtrType
}

func (in *networkDataplanePtr) ToNetworkDataplanePtrOutput() NetworkDataplanePtrOutput {
	return pulumi.ToOutput(in).(NetworkDataplanePtrOutput)
}

func (in *networkDataplanePtr) ToNetworkDataplanePtrOutputWithContext(ctx context.Context) NetworkDataplanePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkDataplanePtrOutput)
}

// This cannot be specified if networkPlugin is anything other than 'azure'.
type NetworkMode string

const (
	// No bridge is created. Intra-VM Pod to Pod communication is through IP routes created by Azure CNI. See [Transparent Mode](https://docs.microsoft.com/azure/aks/faq#transparent-mode) for more information.
	NetworkModeTransparent = NetworkMode("transparent")
	// This is no longer supported
	NetworkModeBridge = NetworkMode("bridge")
)

func (NetworkMode) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkMode)(nil)).Elem()
}

func (e NetworkMode) ToNetworkModeOutput() NetworkModeOutput {
	return pulumi.ToOutput(e).(NetworkModeOutput)
}

func (e NetworkMode) ToNetworkModeOutputWithContext(ctx context.Context) NetworkModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkModeOutput)
}

func (e NetworkMode) ToNetworkModePtrOutput() NetworkModePtrOutput {
	return e.ToNetworkModePtrOutputWithContext(context.Background())
}

func (e NetworkMode) ToNetworkModePtrOutputWithContext(ctx context.Context) NetworkModePtrOutput {
	return NetworkMode(e).ToNetworkModeOutputWithContext(ctx).ToNetworkModePtrOutputWithContext(ctx)
}

func (e NetworkMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkModeOutput struct{ *pulumi.OutputState }

func (NetworkModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkMode)(nil)).Elem()
}

func (o NetworkModeOutput) ToNetworkModeOutput() NetworkModeOutput {
	return o
}

func (o NetworkModeOutput) ToNetworkModeOutputWithContext(ctx context.Context) NetworkModeOutput {
	return o
}

func (o NetworkModeOutput) ToNetworkModePtrOutput() NetworkModePtrOutput {
	return o.ToNetworkModePtrOutputWithContext(context.Background())
}

func (o NetworkModeOutput) ToNetworkModePtrOutputWithContext(ctx context.Context) NetworkModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkMode) *NetworkMode {
		return &v
	}).(NetworkModePtrOutput)
}

func (o NetworkModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkModePtrOutput struct{ *pulumi.OutputState }

func (NetworkModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkMode)(nil)).Elem()
}

func (o NetworkModePtrOutput) ToNetworkModePtrOutput() NetworkModePtrOutput {
	return o
}

func (o NetworkModePtrOutput) ToNetworkModePtrOutputWithContext(ctx context.Context) NetworkModePtrOutput {
	return o
}

func (o NetworkModePtrOutput) Elem() NetworkModeOutput {
	return o.ApplyT(func(v *NetworkMode) NetworkMode {
		if v != nil {
			return *v
		}
		var ret NetworkMode
		return ret
	}).(NetworkModeOutput)
}

func (o NetworkModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkModeInput is an input type that accepts values of the NetworkMode enum
// A concrete instance of `NetworkModeInput` can be one of the following:
//
//	NetworkModeTransparent
//	NetworkModeBridge
type NetworkModeInput interface {
	pulumi.Input

	ToNetworkModeOutput() NetworkModeOutput
	ToNetworkModeOutputWithContext(context.Context) NetworkModeOutput
}

var networkModePtrType = reflect.TypeOf((**NetworkMode)(nil)).Elem()

type NetworkModePtrInput interface {
	pulumi.Input

	ToNetworkModePtrOutput() NetworkModePtrOutput
	ToNetworkModePtrOutputWithContext(context.Context) NetworkModePtrOutput
}

type networkModePtr string

func NetworkModePtr(v string) NetworkModePtrInput {
	return (*networkModePtr)(&v)
}

func (*networkModePtr) ElementType() reflect.Type {
	return networkModePtrType
}

func (in *networkModePtr) ToNetworkModePtrOutput() NetworkModePtrOutput {
	return pulumi.ToOutput(in).(NetworkModePtrOutput)
}

func (in *networkModePtr) ToNetworkModePtrOutputWithContext(ctx context.Context) NetworkModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkModePtrOutput)
}

// Network plugin used for building the Kubernetes network.
type NetworkPlugin string

const (
	// Use the Azure CNI network plugin. See [Azure CNI (advanced) networking](https://docs.microsoft.com/azure/aks/concepts-network#azure-cni-advanced-networking) for more information.
	NetworkPluginAzure = NetworkPlugin("azure")
	// Use the Kubenet network plugin. See [Kubenet (basic) networking](https://docs.microsoft.com/azure/aks/concepts-network#kubenet-basic-networking) for more information.
	NetworkPluginKubenet = NetworkPlugin("kubenet")
	// No CNI plugin is pre-installed. See [BYO CNI](https://docs.microsoft.com/en-us/azure/aks/use-byo-cni) for more information.
	NetworkPluginNone = NetworkPlugin("none")
)

func (NetworkPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPlugin)(nil)).Elem()
}

func (e NetworkPlugin) ToNetworkPluginOutput() NetworkPluginOutput {
	return pulumi.ToOutput(e).(NetworkPluginOutput)
}

func (e NetworkPlugin) ToNetworkPluginOutputWithContext(ctx context.Context) NetworkPluginOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkPluginOutput)
}

func (e NetworkPlugin) ToNetworkPluginPtrOutput() NetworkPluginPtrOutput {
	return e.ToNetworkPluginPtrOutputWithContext(context.Background())
}

func (e NetworkPlugin) ToNetworkPluginPtrOutputWithContext(ctx context.Context) NetworkPluginPtrOutput {
	return NetworkPlugin(e).ToNetworkPluginOutputWithContext(ctx).ToNetworkPluginPtrOutputWithContext(ctx)
}

func (e NetworkPlugin) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPlugin) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPlugin) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPlugin) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkPluginOutput struct{ *pulumi.OutputState }

func (NetworkPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPlugin)(nil)).Elem()
}

func (o NetworkPluginOutput) ToNetworkPluginOutput() NetworkPluginOutput {
	return o
}

func (o NetworkPluginOutput) ToNetworkPluginOutputWithContext(ctx context.Context) NetworkPluginOutput {
	return o
}

func (o NetworkPluginOutput) ToNetworkPluginPtrOutput() NetworkPluginPtrOutput {
	return o.ToNetworkPluginPtrOutputWithContext(context.Background())
}

func (o NetworkPluginOutput) ToNetworkPluginPtrOutputWithContext(ctx context.Context) NetworkPluginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPlugin) *NetworkPlugin {
		return &v
	}).(NetworkPluginPtrOutput)
}

func (o NetworkPluginOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkPluginOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPlugin) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkPluginOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPluginOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPlugin) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkPluginPtrOutput struct{ *pulumi.OutputState }

func (NetworkPluginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPlugin)(nil)).Elem()
}

func (o NetworkPluginPtrOutput) ToNetworkPluginPtrOutput() NetworkPluginPtrOutput {
	return o
}

func (o NetworkPluginPtrOutput) ToNetworkPluginPtrOutputWithContext(ctx context.Context) NetworkPluginPtrOutput {
	return o
}

func (o NetworkPluginPtrOutput) Elem() NetworkPluginOutput {
	return o.ApplyT(func(v *NetworkPlugin) NetworkPlugin {
		if v != nil {
			return *v
		}
		var ret NetworkPlugin
		return ret
	}).(NetworkPluginOutput)
}

func (o NetworkPluginPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPluginPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkPlugin) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkPluginInput is an input type that accepts values of the NetworkPlugin enum
// A concrete instance of `NetworkPluginInput` can be one of the following:
//
//	NetworkPluginAzure
//	NetworkPluginKubenet
//	NetworkPluginNone
type NetworkPluginInput interface {
	pulumi.Input

	ToNetworkPluginOutput() NetworkPluginOutput
	ToNetworkPluginOutputWithContext(context.Context) NetworkPluginOutput
}

var networkPluginPtrType = reflect.TypeOf((**NetworkPlugin)(nil)).Elem()

type NetworkPluginPtrInput interface {
	pulumi.Input

	ToNetworkPluginPtrOutput() NetworkPluginPtrOutput
	ToNetworkPluginPtrOutputWithContext(context.Context) NetworkPluginPtrOutput
}

type networkPluginPtr string

func NetworkPluginPtr(v string) NetworkPluginPtrInput {
	return (*networkPluginPtr)(&v)
}

func (*networkPluginPtr) ElementType() reflect.Type {
	return networkPluginPtrType
}

func (in *networkPluginPtr) ToNetworkPluginPtrOutput() NetworkPluginPtrOutput {
	return pulumi.ToOutput(in).(NetworkPluginPtrOutput)
}

func (in *networkPluginPtr) ToNetworkPluginPtrOutputWithContext(ctx context.Context) NetworkPluginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkPluginPtrOutput)
}

// The mode the network plugin should use.
type NetworkPluginMode string

const (
	// Used with networkPlugin=azure, pods are given IPs from the PodCIDR address space but use Azure Routing Domains rather than Kubenet's method of route tables. For more information visit https://aka.ms/aks/azure-cni-overlay.
	NetworkPluginModeOverlay = NetworkPluginMode("overlay")
)

func (NetworkPluginMode) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPluginMode)(nil)).Elem()
}

func (e NetworkPluginMode) ToNetworkPluginModeOutput() NetworkPluginModeOutput {
	return pulumi.ToOutput(e).(NetworkPluginModeOutput)
}

func (e NetworkPluginMode) ToNetworkPluginModeOutputWithContext(ctx context.Context) NetworkPluginModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkPluginModeOutput)
}

func (e NetworkPluginMode) ToNetworkPluginModePtrOutput() NetworkPluginModePtrOutput {
	return e.ToNetworkPluginModePtrOutputWithContext(context.Background())
}

func (e NetworkPluginMode) ToNetworkPluginModePtrOutputWithContext(ctx context.Context) NetworkPluginModePtrOutput {
	return NetworkPluginMode(e).ToNetworkPluginModeOutputWithContext(ctx).ToNetworkPluginModePtrOutputWithContext(ctx)
}

func (e NetworkPluginMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPluginMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPluginMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPluginMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkPluginModeOutput struct{ *pulumi.OutputState }

func (NetworkPluginModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPluginMode)(nil)).Elem()
}

func (o NetworkPluginModeOutput) ToNetworkPluginModeOutput() NetworkPluginModeOutput {
	return o
}

func (o NetworkPluginModeOutput) ToNetworkPluginModeOutputWithContext(ctx context.Context) NetworkPluginModeOutput {
	return o
}

func (o NetworkPluginModeOutput) ToNetworkPluginModePtrOutput() NetworkPluginModePtrOutput {
	return o.ToNetworkPluginModePtrOutputWithContext(context.Background())
}

func (o NetworkPluginModeOutput) ToNetworkPluginModePtrOutputWithContext(ctx context.Context) NetworkPluginModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPluginMode) *NetworkPluginMode {
		return &v
	}).(NetworkPluginModePtrOutput)
}

func (o NetworkPluginModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkPluginModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPluginMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkPluginModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPluginModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPluginMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkPluginModePtrOutput struct{ *pulumi.OutputState }

func (NetworkPluginModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPluginMode)(nil)).Elem()
}

func (o NetworkPluginModePtrOutput) ToNetworkPluginModePtrOutput() NetworkPluginModePtrOutput {
	return o
}

func (o NetworkPluginModePtrOutput) ToNetworkPluginModePtrOutputWithContext(ctx context.Context) NetworkPluginModePtrOutput {
	return o
}

func (o NetworkPluginModePtrOutput) Elem() NetworkPluginModeOutput {
	return o.ApplyT(func(v *NetworkPluginMode) NetworkPluginMode {
		if v != nil {
			return *v
		}
		var ret NetworkPluginMode
		return ret
	}).(NetworkPluginModeOutput)
}

func (o NetworkPluginModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPluginModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkPluginMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkPluginModeInput is an input type that accepts values of the NetworkPluginMode enum
// A concrete instance of `NetworkPluginModeInput` can be one of the following:
//
//	NetworkPluginModeOverlay
type NetworkPluginModeInput interface {
	pulumi.Input

	ToNetworkPluginModeOutput() NetworkPluginModeOutput
	ToNetworkPluginModeOutputWithContext(context.Context) NetworkPluginModeOutput
}

var networkPluginModePtrType = reflect.TypeOf((**NetworkPluginMode)(nil)).Elem()

type NetworkPluginModePtrInput interface {
	pulumi.Input

	ToNetworkPluginModePtrOutput() NetworkPluginModePtrOutput
	ToNetworkPluginModePtrOutputWithContext(context.Context) NetworkPluginModePtrOutput
}

type networkPluginModePtr string

func NetworkPluginModePtr(v string) NetworkPluginModePtrInput {
	return (*networkPluginModePtr)(&v)
}

func (*networkPluginModePtr) ElementType() reflect.Type {
	return networkPluginModePtrType
}

func (in *networkPluginModePtr) ToNetworkPluginModePtrOutput() NetworkPluginModePtrOutput {
	return pulumi.ToOutput(in).(NetworkPluginModePtrOutput)
}

func (in *networkPluginModePtr) ToNetworkPluginModePtrOutputWithContext(ctx context.Context) NetworkPluginModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkPluginModePtrOutput)
}

// Network policy used for building the Kubernetes network.
type NetworkPolicy string

const (
	// Network policies will not be enforced. This is the default value when NetworkPolicy is not specified.
	NetworkPolicyNone = NetworkPolicy("none")
	// Use Calico network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
	NetworkPolicyCalico = NetworkPolicy("calico")
	// Use Azure network policies. See [differences between Azure and Calico policies](https://docs.microsoft.com/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information.
	NetworkPolicyAzure = NetworkPolicy("azure")
	// Use Cilium to enforce network policies. This requires networkDataplane to be 'cilium'.
	NetworkPolicyCilium = NetworkPolicy("cilium")
)

func (NetworkPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (e NetworkPolicy) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return pulumi.ToOutput(e).(NetworkPolicyOutput)
}

func (e NetworkPolicy) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkPolicyOutput)
}

func (e NetworkPolicy) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return e.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (e NetworkPolicy) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return NetworkPolicy(e).ToNetworkPolicyOutputWithContext(ctx).ToNetworkPolicyPtrOutputWithContext(ctx)
}

func (e NetworkPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o.ToNetworkPolicyPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPolicy) *NetworkPolicy {
		return &v
	}).(NetworkPolicyPtrOutput)
}

func (o NetworkPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkPolicyPtrOutput struct{ *pulumi.OutputState }

func (NetworkPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return o
}

func (o NetworkPolicyPtrOutput) Elem() NetworkPolicyOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicy {
		if v != nil {
			return *v
		}
		var ret NetworkPolicy
		return ret
	}).(NetworkPolicyOutput)
}

func (o NetworkPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkPolicyInput is an input type that accepts values of the NetworkPolicy enum
// A concrete instance of `NetworkPolicyInput` can be one of the following:
//
//	NetworkPolicyNone
//	NetworkPolicyCalico
//	NetworkPolicyAzure
//	NetworkPolicyCilium
type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(context.Context) NetworkPolicyOutput
}

var networkPolicyPtrType = reflect.TypeOf((**NetworkPolicy)(nil)).Elem()

type NetworkPolicyPtrInput interface {
	pulumi.Input

	ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput
	ToNetworkPolicyPtrOutputWithContext(context.Context) NetworkPolicyPtrOutput
}

type networkPolicyPtr string

func NetworkPolicyPtr(v string) NetworkPolicyPtrInput {
	return (*networkPolicyPtr)(&v)
}

func (*networkPolicyPtr) ElementType() reflect.Type {
	return networkPolicyPtrType
}

func (in *networkPolicyPtr) ToNetworkPolicyPtrOutput() NetworkPolicyPtrOutput {
	return pulumi.ToOutput(in).(NetworkPolicyPtrOutput)
}

func (in *networkPolicyPtr) ToNetworkPolicyPtrOutputWithContext(ctx context.Context) NetworkPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkPolicyPtrOutput)
}

// The node image upgrade type.
type NodeImageSelectionType string

const (
	// Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions.
	NodeImageSelectionTypeLatest = NodeImageSelectionType("Latest")
	// The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'.
	NodeImageSelectionTypeConsistent = NodeImageSelectionType("Consistent")
	// Upgrade the nodes to the custom image versions. When set, update run will use node image versions provided in customNodeImageVersions to upgrade the nodes. If set, customNodeImageVersions must not be empty.
	NodeImageSelectionTypeCustom = NodeImageSelectionType("Custom")
)

func (NodeImageSelectionType) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelectionType)(nil)).Elem()
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypeOutput() NodeImageSelectionTypeOutput {
	return pulumi.ToOutput(e).(NodeImageSelectionTypeOutput)
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypeOutputWithContext(ctx context.Context) NodeImageSelectionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NodeImageSelectionTypeOutput)
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return e.ToNodeImageSelectionTypePtrOutputWithContext(context.Background())
}

func (e NodeImageSelectionType) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return NodeImageSelectionType(e).ToNodeImageSelectionTypeOutputWithContext(ctx).ToNodeImageSelectionTypePtrOutputWithContext(ctx)
}

func (e NodeImageSelectionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeImageSelectionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeImageSelectionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeImageSelectionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NodeImageSelectionTypeOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelectionType)(nil)).Elem()
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypeOutput() NodeImageSelectionTypeOutput {
	return o
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypeOutputWithContext(ctx context.Context) NodeImageSelectionTypeOutput {
	return o
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return o.ToNodeImageSelectionTypePtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypeOutput) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeImageSelectionType) *NodeImageSelectionType {
		return &v
	}).(NodeImageSelectionTypePtrOutput)
}

func (o NodeImageSelectionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeImageSelectionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NodeImageSelectionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeImageSelectionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NodeImageSelectionTypePtrOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeImageSelectionType)(nil)).Elem()
}

func (o NodeImageSelectionTypePtrOutput) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return o
}

func (o NodeImageSelectionTypePtrOutput) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return o
}

func (o NodeImageSelectionTypePtrOutput) Elem() NodeImageSelectionTypeOutput {
	return o.ApplyT(func(v *NodeImageSelectionType) NodeImageSelectionType {
		if v != nil {
			return *v
		}
		var ret NodeImageSelectionType
		return ret
	}).(NodeImageSelectionTypeOutput)
}

func (o NodeImageSelectionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NodeImageSelectionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NodeImageSelectionTypeInput is an input type that accepts values of the NodeImageSelectionType enum
// A concrete instance of `NodeImageSelectionTypeInput` can be one of the following:
//
//	NodeImageSelectionTypeLatest
//	NodeImageSelectionTypeConsistent
//	NodeImageSelectionTypeCustom
type NodeImageSelectionTypeInput interface {
	pulumi.Input

	ToNodeImageSelectionTypeOutput() NodeImageSelectionTypeOutput
	ToNodeImageSelectionTypeOutputWithContext(context.Context) NodeImageSelectionTypeOutput
}

var nodeImageSelectionTypePtrType = reflect.TypeOf((**NodeImageSelectionType)(nil)).Elem()

type NodeImageSelectionTypePtrInput interface {
	pulumi.Input

	ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput
	ToNodeImageSelectionTypePtrOutputWithContext(context.Context) NodeImageSelectionTypePtrOutput
}

type nodeImageSelectionTypePtr string

func NodeImageSelectionTypePtr(v string) NodeImageSelectionTypePtrInput {
	return (*nodeImageSelectionTypePtr)(&v)
}

func (*nodeImageSelectionTypePtr) ElementType() reflect.Type {
	return nodeImageSelectionTypePtrType
}

func (in *nodeImageSelectionTypePtr) ToNodeImageSelectionTypePtrOutput() NodeImageSelectionTypePtrOutput {
	return pulumi.ToOutput(in).(NodeImageSelectionTypePtrOutput)
}

func (in *nodeImageSelectionTypePtr) ToNodeImageSelectionTypePtrOutputWithContext(ctx context.Context) NodeImageSelectionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NodeImageSelectionTypePtrOutput)
}

// Manner in which the OS on your nodes is updated. The default is NodeImage.
type NodeOSUpgradeChannel string

const (
	// No attempt to update your machines OS will be made either by OS or by rolling VHDs. This means you are responsible for your security updates
	NodeOSUpgradeChannelNone = NodeOSUpgradeChannel("None")
	// OS updates will be applied automatically through the OS built-in patching infrastructure. Newly scaled in machines will be unpatched initially and will be patched at some point by the OS's infrastructure. Behavior of this option depends on the OS in question. Ubuntu and Mariner apply security patches through unattended upgrade roughly once a day around 06:00 UTC. Windows does not apply security patches automatically and so for them this option is equivalent to None till further notice
	NodeOSUpgradeChannelUnmanaged = NodeOSUpgradeChannel("Unmanaged")
	// AKS will update the nodes with a newly patched VHD containing security fixes and bugfixes on a weekly cadence. With the VHD update machines will be rolling reimaged to that VHD following maintenance windows and surge settings. No extra VHD cost is incurred when choosing this option as AKS hosts the images.
	NodeOSUpgradeChannelNodeImage = NodeOSUpgradeChannel("NodeImage")
	// AKS downloads and updates the nodes with tested security updates. These updates honor the maintenance window settings and produce a new VHD that is used on new nodes. On some occasions it's not possible to apply the updates in place, in such cases the existing nodes will also be re-imaged to the newly produced VHD in order to apply the changes. This option incurs an extra cost of hosting the new Security Patch VHDs in your resource group for just in time consumption.
	NodeOSUpgradeChannelSecurityPatch = NodeOSUpgradeChannel("SecurityPatch")
)

func (NodeOSUpgradeChannel) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeOSUpgradeChannel)(nil)).Elem()
}

func (e NodeOSUpgradeChannel) ToNodeOSUpgradeChannelOutput() NodeOSUpgradeChannelOutput {
	return pulumi.ToOutput(e).(NodeOSUpgradeChannelOutput)
}

func (e NodeOSUpgradeChannel) ToNodeOSUpgradeChannelOutputWithContext(ctx context.Context) NodeOSUpgradeChannelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NodeOSUpgradeChannelOutput)
}

func (e NodeOSUpgradeChannel) ToNodeOSUpgradeChannelPtrOutput() NodeOSUpgradeChannelPtrOutput {
	return e.ToNodeOSUpgradeChannelPtrOutputWithContext(context.Background())
}

func (e NodeOSUpgradeChannel) ToNodeOSUpgradeChannelPtrOutputWithContext(ctx context.Context) NodeOSUpgradeChannelPtrOutput {
	return NodeOSUpgradeChannel(e).ToNodeOSUpgradeChannelOutputWithContext(ctx).ToNodeOSUpgradeChannelPtrOutputWithContext(ctx)
}

func (e NodeOSUpgradeChannel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeOSUpgradeChannel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeOSUpgradeChannel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeOSUpgradeChannel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NodeOSUpgradeChannelOutput struct{ *pulumi.OutputState }

func (NodeOSUpgradeChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeOSUpgradeChannel)(nil)).Elem()
}

func (o NodeOSUpgradeChannelOutput) ToNodeOSUpgradeChannelOutput() NodeOSUpgradeChannelOutput {
	return o
}

func (o NodeOSUpgradeChannelOutput) ToNodeOSUpgradeChannelOutputWithContext(ctx context.Context) NodeOSUpgradeChannelOutput {
	return o
}

func (o NodeOSUpgradeChannelOutput) ToNodeOSUpgradeChannelPtrOutput() NodeOSUpgradeChannelPtrOutput {
	return o.ToNodeOSUpgradeChannelPtrOutputWithContext(context.Background())
}

func (o NodeOSUpgradeChannelOutput) ToNodeOSUpgradeChannelPtrOutputWithContext(ctx context.Context) NodeOSUpgradeChannelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeOSUpgradeChannel) *NodeOSUpgradeChannel {
		return &v
	}).(NodeOSUpgradeChannelPtrOutput)
}

func (o NodeOSUpgradeChannelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NodeOSUpgradeChannelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeOSUpgradeChannel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NodeOSUpgradeChannelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeOSUpgradeChannelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeOSUpgradeChannel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NodeOSUpgradeChannelPtrOutput struct{ *pulumi.OutputState }

func (NodeOSUpgradeChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeOSUpgradeChannel)(nil)).Elem()
}

func (o NodeOSUpgradeChannelPtrOutput) ToNodeOSUpgradeChannelPtrOutput() NodeOSUpgradeChannelPtrOutput {
	return o
}

func (o NodeOSUpgradeChannelPtrOutput) ToNodeOSUpgradeChannelPtrOutputWithContext(ctx context.Context) NodeOSUpgradeChannelPtrOutput {
	return o
}

func (o NodeOSUpgradeChannelPtrOutput) Elem() NodeOSUpgradeChannelOutput {
	return o.ApplyT(func(v *NodeOSUpgradeChannel) NodeOSUpgradeChannel {
		if v != nil {
			return *v
		}
		var ret NodeOSUpgradeChannel
		return ret
	}).(NodeOSUpgradeChannelOutput)
}

func (o NodeOSUpgradeChannelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeOSUpgradeChannelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NodeOSUpgradeChannel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NodeOSUpgradeChannelInput is an input type that accepts values of the NodeOSUpgradeChannel enum
// A concrete instance of `NodeOSUpgradeChannelInput` can be one of the following:
//
//	NodeOSUpgradeChannelNone
//	NodeOSUpgradeChannelUnmanaged
//	NodeOSUpgradeChannelNodeImage
//	NodeOSUpgradeChannelSecurityPatch
type NodeOSUpgradeChannelInput interface {
	pulumi.Input

	ToNodeOSUpgradeChannelOutput() NodeOSUpgradeChannelOutput
	ToNodeOSUpgradeChannelOutputWithContext(context.Context) NodeOSUpgradeChannelOutput
}

var nodeOSUpgradeChannelPtrType = reflect.TypeOf((**NodeOSUpgradeChannel)(nil)).Elem()

type NodeOSUpgradeChannelPtrInput interface {
	pulumi.Input

	ToNodeOSUpgradeChannelPtrOutput() NodeOSUpgradeChannelPtrOutput
	ToNodeOSUpgradeChannelPtrOutputWithContext(context.Context) NodeOSUpgradeChannelPtrOutput
}

type nodeOSUpgradeChannelPtr string

func NodeOSUpgradeChannelPtr(v string) NodeOSUpgradeChannelPtrInput {
	return (*nodeOSUpgradeChannelPtr)(&v)
}

func (*nodeOSUpgradeChannelPtr) ElementType() reflect.Type {
	return nodeOSUpgradeChannelPtrType
}

func (in *nodeOSUpgradeChannelPtr) ToNodeOSUpgradeChannelPtrOutput() NodeOSUpgradeChannelPtrOutput {
	return pulumi.ToOutput(in).(NodeOSUpgradeChannelPtrOutput)
}

func (in *nodeOSUpgradeChannelPtr) ToNodeOSUpgradeChannelPtrOutputWithContext(ctx context.Context) NodeOSUpgradeChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NodeOSUpgradeChannelPtrOutput)
}

// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
type OSDiskType string

const (
	// Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host. Since containers aren't designed to have local state persisted, this behavior offers limited value while providing some drawbacks, including slower node provisioning and higher read/write latency.
	OSDiskTypeManaged = OSDiskType("Managed")
	// Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read/write latency, along with faster node scaling and cluster upgrades.
	OSDiskTypeEphemeral = OSDiskType("Ephemeral")
)

func (OSDiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskType)(nil)).Elem()
}

func (e OSDiskType) ToOSDiskTypeOutput() OSDiskTypeOutput {
	return pulumi.ToOutput(e).(OSDiskTypeOutput)
}

func (e OSDiskType) ToOSDiskTypeOutputWithContext(ctx context.Context) OSDiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSDiskTypeOutput)
}

func (e OSDiskType) ToOSDiskTypePtrOutput() OSDiskTypePtrOutput {
	return e.ToOSDiskTypePtrOutputWithContext(context.Background())
}

func (e OSDiskType) ToOSDiskTypePtrOutputWithContext(ctx context.Context) OSDiskTypePtrOutput {
	return OSDiskType(e).ToOSDiskTypeOutputWithContext(ctx).ToOSDiskTypePtrOutputWithContext(ctx)
}

func (e OSDiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSDiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSDiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSDiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSDiskTypeOutput struct{ *pulumi.OutputState }

func (OSDiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSDiskType)(nil)).Elem()
}

func (o OSDiskTypeOutput) ToOSDiskTypeOutput() OSDiskTypeOutput {
	return o
}

func (o OSDiskTypeOutput) ToOSDiskTypeOutputWithContext(ctx context.Context) OSDiskTypeOutput {
	return o
}

func (o OSDiskTypeOutput) ToOSDiskTypePtrOutput() OSDiskTypePtrOutput {
	return o.ToOSDiskTypePtrOutputWithContext(context.Background())
}

func (o OSDiskTypeOutput) ToOSDiskTypePtrOutputWithContext(ctx context.Context) OSDiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSDiskType) *OSDiskType {
		return &v
	}).(OSDiskTypePtrOutput)
}

func (o OSDiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSDiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSDiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSDiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSDiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSDiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSDiskTypePtrOutput struct{ *pulumi.OutputState }

func (OSDiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSDiskType)(nil)).Elem()
}

func (o OSDiskTypePtrOutput) ToOSDiskTypePtrOutput() OSDiskTypePtrOutput {
	return o
}

func (o OSDiskTypePtrOutput) ToOSDiskTypePtrOutputWithContext(ctx context.Context) OSDiskTypePtrOutput {
	return o
}

func (o OSDiskTypePtrOutput) Elem() OSDiskTypeOutput {
	return o.ApplyT(func(v *OSDiskType) OSDiskType {
		if v != nil {
			return *v
		}
		var ret OSDiskType
		return ret
	}).(OSDiskTypeOutput)
}

func (o OSDiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSDiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSDiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSDiskTypeInput is an input type that accepts values of the OSDiskType enum
// A concrete instance of `OSDiskTypeInput` can be one of the following:
//
//	OSDiskTypeManaged
//	OSDiskTypeEphemeral
type OSDiskTypeInput interface {
	pulumi.Input

	ToOSDiskTypeOutput() OSDiskTypeOutput
	ToOSDiskTypeOutputWithContext(context.Context) OSDiskTypeOutput
}

var osdiskTypePtrType = reflect.TypeOf((**OSDiskType)(nil)).Elem()

type OSDiskTypePtrInput interface {
	pulumi.Input

	ToOSDiskTypePtrOutput() OSDiskTypePtrOutput
	ToOSDiskTypePtrOutputWithContext(context.Context) OSDiskTypePtrOutput
}

type osdiskTypePtr string

func OSDiskTypePtr(v string) OSDiskTypePtrInput {
	return (*osdiskTypePtr)(&v)
}

func (*osdiskTypePtr) ElementType() reflect.Type {
	return osdiskTypePtrType
}

func (in *osdiskTypePtr) ToOSDiskTypePtrOutput() OSDiskTypePtrOutput {
	return pulumi.ToOutput(in).(OSDiskTypePtrOutput)
}

func (in *osdiskTypePtr) ToOSDiskTypePtrOutputWithContext(ctx context.Context) OSDiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSDiskTypePtrOutput)
}

// Specifies the OS SKU used by the agent pool. The default is Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
type OSSKU string

const (
	// Use Ubuntu as the OS for node images.
	OSSKUUbuntu = OSSKU("Ubuntu")
	// Use AzureLinux as the OS for node images. Azure Linux is a container-optimized Linux distro built by Microsoft, visit https://aka.ms/azurelinux for more information.
	OSSKUAzureLinux = OSSKU("AzureLinux")
	// Deprecated OSSKU. Microsoft recommends that new deployments choose 'AzureLinux' instead.
	OSSKUCBLMariner = OSSKU("CBLMariner")
	// Use Windows2019 as the OS for node images. Unsupported for system node pools. Windows2019 only supports Windows2019 containers; it cannot run Windows2022 containers and vice versa.
	OSSKUWindows2019 = OSSKU("Windows2019")
	// Use Windows2022 as the OS for node images. Unsupported for system node pools. Windows2022 only supports Windows2022 containers; it cannot run Windows2019 containers and vice versa.
	OSSKUWindows2022 = OSSKU("Windows2022")
)

func (OSSKU) ElementType() reflect.Type {
	return reflect.TypeOf((*OSSKU)(nil)).Elem()
}

func (e OSSKU) ToOSSKUOutput() OSSKUOutput {
	return pulumi.ToOutput(e).(OSSKUOutput)
}

func (e OSSKU) ToOSSKUOutputWithContext(ctx context.Context) OSSKUOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSSKUOutput)
}

func (e OSSKU) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return e.ToOSSKUPtrOutputWithContext(context.Background())
}

func (e OSSKU) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return OSSKU(e).ToOSSKUOutputWithContext(ctx).ToOSSKUPtrOutputWithContext(ctx)
}

func (e OSSKU) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSSKU) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSSKU) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSSKU) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSSKUOutput struct{ *pulumi.OutputState }

func (OSSKUOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSSKU)(nil)).Elem()
}

func (o OSSKUOutput) ToOSSKUOutput() OSSKUOutput {
	return o
}

func (o OSSKUOutput) ToOSSKUOutputWithContext(ctx context.Context) OSSKUOutput {
	return o
}

func (o OSSKUOutput) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return o.ToOSSKUPtrOutputWithContext(context.Background())
}

func (o OSSKUOutput) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSSKU) *OSSKU {
		return &v
	}).(OSSKUPtrOutput)
}

func (o OSSKUOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSSKUOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSSKU) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSSKUOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSSKUOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSSKU) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSSKUPtrOutput struct{ *pulumi.OutputState }

func (OSSKUPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSSKU)(nil)).Elem()
}

func (o OSSKUPtrOutput) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return o
}

func (o OSSKUPtrOutput) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return o
}

func (o OSSKUPtrOutput) Elem() OSSKUOutput {
	return o.ApplyT(func(v *OSSKU) OSSKU {
		if v != nil {
			return *v
		}
		var ret OSSKU
		return ret
	}).(OSSKUOutput)
}

func (o OSSKUPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSSKUPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSSKU) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSSKUInput is an input type that accepts values of the OSSKU enum
// A concrete instance of `OSSKUInput` can be one of the following:
//
//	OSSKUUbuntu
//	OSSKUAzureLinux
//	OSSKUCBLMariner
//	OSSKUWindows2019
//	OSSKUWindows2022
type OSSKUInput interface {
	pulumi.Input

	ToOSSKUOutput() OSSKUOutput
	ToOSSKUOutputWithContext(context.Context) OSSKUOutput
}

var osskuPtrType = reflect.TypeOf((**OSSKU)(nil)).Elem()

type OSSKUPtrInput interface {
	pulumi.Input

	ToOSSKUPtrOutput() OSSKUPtrOutput
	ToOSSKUPtrOutputWithContext(context.Context) OSSKUPtrOutput
}

type osskuPtr string

func OSSKUPtr(v string) OSSKUPtrInput {
	return (*osskuPtr)(&v)
}

func (*osskuPtr) ElementType() reflect.Type {
	return osskuPtrType
}

func (in *osskuPtr) ToOSSKUPtrOutput() OSSKUPtrOutput {
	return pulumi.ToOutput(in).(OSSKUPtrOutput)
}

func (in *osskuPtr) ToOSSKUPtrOutputWithContext(ctx context.Context) OSSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSSKUPtrOutput)
}

// The operating system type. The default is Linux.
type OSType string

const (
	// Use Linux.
	OSTypeLinux = OSType("Linux")
	// Use Windows.
	OSTypeWindows = OSType("Windows")
)

func (OSType) ElementType() reflect.Type {
	return reflect.TypeOf((*OSType)(nil)).Elem()
}

func (e OSType) ToOSTypeOutput() OSTypeOutput {
	return pulumi.ToOutput(e).(OSTypeOutput)
}

func (e OSType) ToOSTypeOutputWithContext(ctx context.Context) OSTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSTypeOutput)
}

func (e OSType) ToOSTypePtrOutput() OSTypePtrOutput {
	return e.ToOSTypePtrOutputWithContext(context.Background())
}

func (e OSType) ToOSTypePtrOutputWithContext(ctx context.Context) OSTypePtrOutput {
	return OSType(e).ToOSTypeOutputWithContext(ctx).ToOSTypePtrOutputWithContext(ctx)
}

func (e OSType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSTypeOutput struct{ *pulumi.OutputState }

func (OSTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSType)(nil)).Elem()
}

func (o OSTypeOutput) ToOSTypeOutput() OSTypeOutput {
	return o
}

func (o OSTypeOutput) ToOSTypeOutputWithContext(ctx context.Context) OSTypeOutput {
	return o
}

func (o OSTypeOutput) ToOSTypePtrOutput() OSTypePtrOutput {
	return o.ToOSTypePtrOutputWithContext(context.Background())
}

func (o OSTypeOutput) ToOSTypePtrOutputWithContext(ctx context.Context) OSTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSType) *OSType {
		return &v
	}).(OSTypePtrOutput)
}

func (o OSTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSTypePtrOutput struct{ *pulumi.OutputState }

func (OSTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSType)(nil)).Elem()
}

func (o OSTypePtrOutput) ToOSTypePtrOutput() OSTypePtrOutput {
	return o
}

func (o OSTypePtrOutput) ToOSTypePtrOutputWithContext(ctx context.Context) OSTypePtrOutput {
	return o
}

func (o OSTypePtrOutput) Elem() OSTypeOutput {
	return o.ApplyT(func(v *OSType) OSType {
		if v != nil {
			return *v
		}
		var ret OSType
		return ret
	}).(OSTypeOutput)
}

func (o OSTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSTypeInput is an input type that accepts values of the OSType enum
// A concrete instance of `OSTypeInput` can be one of the following:
//
//	OSTypeLinux
//	OSTypeWindows
type OSTypeInput interface {
	pulumi.Input

	ToOSTypeOutput() OSTypeOutput
	ToOSTypeOutputWithContext(context.Context) OSTypeOutput
}

var ostypePtrType = reflect.TypeOf((**OSType)(nil)).Elem()

type OSTypePtrInput interface {
	pulumi.Input

	ToOSTypePtrOutput() OSTypePtrOutput
	ToOSTypePtrOutputWithContext(context.Context) OSTypePtrOutput
}

type ostypePtr string

func OSTypePtr(v string) OSTypePtrInput {
	return (*ostypePtr)(&v)
}

func (*ostypePtr) ElementType() reflect.Type {
	return ostypePtrType
}

func (in *ostypePtr) ToOSTypePtrOutput() OSTypePtrOutput {
	return pulumi.ToOutput(in).(OSTypePtrOutput)
}

func (in *ostypePtr) ToOSTypePtrOutputWithContext(ctx context.Context) OSTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSTypePtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In and NotIn
type Operator string

const (
	// The value of the key should be in the given list.
	OperatorIn = Operator("In")
	// The value of the key should not be in the given list.
	OperatorNotIn = Operator("NotIn")
	// The value of the key should exist.
	OperatorExists = Operator("Exists")
	// The value of the key should not exist.
	OperatorDoesNotExist = Operator("DoesNotExist")
)

func (Operator) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (e Operator) ToOperatorOutput() OperatorOutput {
	return pulumi.ToOutput(e).(OperatorOutput)
}

func (e Operator) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatorOutput)
}

func (e Operator) ToOperatorPtrOutput() OperatorPtrOutput {
	return e.ToOperatorPtrOutputWithContext(context.Background())
}

func (e Operator) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return Operator(e).ToOperatorOutputWithContext(ctx).ToOperatorPtrOutputWithContext(ctx)
}

func (e Operator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Operator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Operator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatorOutput struct{ *pulumi.OutputState }

func (OperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operator)(nil)).Elem()
}

func (o OperatorOutput) ToOperatorOutput() OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorOutputWithContext(ctx context.Context) OperatorOutput {
	return o
}

func (o OperatorOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o.ToOperatorPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Operator) *Operator {
		return &v
	}).(OperatorPtrOutput)
}

func (o OperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Operator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatorPtrOutput struct{ *pulumi.OutputState }

func (OperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Operator)(nil)).Elem()
}

func (o OperatorPtrOutput) ToOperatorPtrOutput() OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return o
}

func (o OperatorPtrOutput) Elem() OperatorOutput {
	return o.ApplyT(func(v *Operator) Operator {
		if v != nil {
			return *v
		}
		var ret Operator
		return ret
	}).(OperatorOutput)
}

func (o OperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Operator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatorInput is an input type that accepts values of the Operator enum
// A concrete instance of `OperatorInput` can be one of the following:
//
//	OperatorIn
//	OperatorNotIn
//	OperatorExists
//	OperatorDoesNotExist
type OperatorInput interface {
	pulumi.Input

	ToOperatorOutput() OperatorOutput
	ToOperatorOutputWithContext(context.Context) OperatorOutput
}

var operatorPtrType = reflect.TypeOf((**Operator)(nil)).Elem()

type OperatorPtrInput interface {
	pulumi.Input

	ToOperatorPtrOutput() OperatorPtrOutput
	ToOperatorPtrOutputWithContext(context.Context) OperatorPtrOutput
}

type operatorPtr string

func OperatorPtr(v string) OperatorPtrInput {
	return (*operatorPtr)(&v)
}

func (*operatorPtr) ElementType() reflect.Type {
	return operatorPtrType
}

func (in *operatorPtr) ToOperatorPtrOutput() OperatorPtrOutput {
	return pulumi.ToOutput(in).(OperatorPtrOutput)
}

func (in *operatorPtr) ToOperatorPtrOutputWithContext(ctx context.Context) OperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatorPtrOutput)
}

// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
type OutboundType string

const (
	// The load balancer is used for egress through an AKS assigned public IP. This supports Kubernetes services of type 'loadBalancer'. For more information see [outbound type loadbalancer](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-loadbalancer).
	OutboundTypeLoadBalancer = OutboundType("loadBalancer")
	// Egress paths must be defined by the user. This is an advanced scenario and requires proper network configuration. For more information see [outbound type userDefinedRouting](https://docs.microsoft.com/azure/aks/egress-outboundtype#outbound-type-of-userdefinedrouting).
	OutboundTypeUserDefinedRouting = OutboundType("userDefinedRouting")
	// The AKS-managed NAT gateway is used for egress.
	OutboundTypeManagedNATGateway = OutboundType("managedNATGateway")
	// The user-assigned NAT gateway associated to the cluster subnet is used for egress. This is an advanced scenario and requires proper network configuration.
	OutboundTypeUserAssignedNATGateway = OutboundType("userAssignedNATGateway")
)

func (OutboundType) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundType)(nil)).Elem()
}

func (e OutboundType) ToOutboundTypeOutput() OutboundTypeOutput {
	return pulumi.ToOutput(e).(OutboundTypeOutput)
}

func (e OutboundType) ToOutboundTypeOutputWithContext(ctx context.Context) OutboundTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OutboundTypeOutput)
}

func (e OutboundType) ToOutboundTypePtrOutput() OutboundTypePtrOutput {
	return e.ToOutboundTypePtrOutputWithContext(context.Background())
}

func (e OutboundType) ToOutboundTypePtrOutputWithContext(ctx context.Context) OutboundTypePtrOutput {
	return OutboundType(e).ToOutboundTypeOutputWithContext(ctx).ToOutboundTypePtrOutputWithContext(ctx)
}

func (e OutboundType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutboundType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutboundType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OutboundType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OutboundTypeOutput struct{ *pulumi.OutputState }

func (OutboundTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundType)(nil)).Elem()
}

func (o OutboundTypeOutput) ToOutboundTypeOutput() OutboundTypeOutput {
	return o
}

func (o OutboundTypeOutput) ToOutboundTypeOutputWithContext(ctx context.Context) OutboundTypeOutput {
	return o
}

func (o OutboundTypeOutput) ToOutboundTypePtrOutput() OutboundTypePtrOutput {
	return o.ToOutboundTypePtrOutputWithContext(context.Background())
}

func (o OutboundTypeOutput) ToOutboundTypePtrOutputWithContext(ctx context.Context) OutboundTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutboundType) *OutboundType {
		return &v
	}).(OutboundTypePtrOutput)
}

func (o OutboundTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OutboundTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutboundType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OutboundTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutboundTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutboundType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OutboundTypePtrOutput struct{ *pulumi.OutputState }

func (OutboundTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutboundType)(nil)).Elem()
}

func (o OutboundTypePtrOutput) ToOutboundTypePtrOutput() OutboundTypePtrOutput {
	return o
}

func (o OutboundTypePtrOutput) ToOutboundTypePtrOutputWithContext(ctx context.Context) OutboundTypePtrOutput {
	return o
}

func (o OutboundTypePtrOutput) Elem() OutboundTypeOutput {
	return o.ApplyT(func(v *OutboundType) OutboundType {
		if v != nil {
			return *v
		}
		var ret OutboundType
		return ret
	}).(OutboundTypeOutput)
}

func (o OutboundTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutboundTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OutboundType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OutboundTypeInput is an input type that accepts values of the OutboundType enum
// A concrete instance of `OutboundTypeInput` can be one of the following:
//
//	OutboundTypeLoadBalancer
//	OutboundTypeUserDefinedRouting
//	OutboundTypeManagedNATGateway
//	OutboundTypeUserAssignedNATGateway
type OutboundTypeInput interface {
	pulumi.Input

	ToOutboundTypeOutput() OutboundTypeOutput
	ToOutboundTypeOutputWithContext(context.Context) OutboundTypeOutput
}

var outboundTypePtrType = reflect.TypeOf((**OutboundType)(nil)).Elem()

type OutboundTypePtrInput interface {
	pulumi.Input

	ToOutboundTypePtrOutput() OutboundTypePtrOutput
	ToOutboundTypePtrOutputWithContext(context.Context) OutboundTypePtrOutput
}

type outboundTypePtr string

func OutboundTypePtr(v string) OutboundTypePtrInput {
	return (*outboundTypePtr)(&v)
}

func (*outboundTypePtr) ElementType() reflect.Type {
	return outboundTypePtrType
}

func (in *outboundTypePtr) ToOutboundTypePtrOutput() OutboundTypePtrOutput {
	return pulumi.ToOutput(in).(OutboundTypePtrOutput)
}

func (in *outboundTypePtr) ToOutboundTypePtrOutputWithContext(ctx context.Context) OutboundTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OutboundTypePtrOutput)
}

// Ingress policy for the network.
type PolicyRule string

const (
	// Deny all network traffic.
	PolicyRuleDenyAll = PolicyRule("DenyAll")
	// Allow all network traffic.
	PolicyRuleAllowAll = PolicyRule("AllowAll")
	// Allow traffic within the same namespace.
	PolicyRuleAllowSameNamespace = PolicyRule("AllowSameNamespace")
)

func (PolicyRule) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (e PolicyRule) ToPolicyRuleOutput() PolicyRuleOutput {
	return pulumi.ToOutput(e).(PolicyRuleOutput)
}

func (e PolicyRule) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyRuleOutput)
}

func (e PolicyRule) ToPolicyRulePtrOutput() PolicyRulePtrOutput {
	return e.ToPolicyRulePtrOutputWithContext(context.Background())
}

func (e PolicyRule) ToPolicyRulePtrOutputWithContext(ctx context.Context) PolicyRulePtrOutput {
	return PolicyRule(e).ToPolicyRuleOutputWithContext(ctx).ToPolicyRulePtrOutputWithContext(ctx)
}

func (e PolicyRule) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyRule) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyRule) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyRule) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyRuleOutput struct{ *pulumi.OutputState }

func (PolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (o PolicyRuleOutput) ToPolicyRuleOutput() PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRulePtrOutput() PolicyRulePtrOutput {
	return o.ToPolicyRulePtrOutputWithContext(context.Background())
}

func (o PolicyRuleOutput) ToPolicyRulePtrOutputWithContext(ctx context.Context) PolicyRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyRule) *PolicyRule {
		return &v
	}).(PolicyRulePtrOutput)
}

func (o PolicyRuleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyRuleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyRule) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyRuleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyRuleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyRule) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyRulePtrOutput struct{ *pulumi.OutputState }

func (PolicyRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRule)(nil)).Elem()
}

func (o PolicyRulePtrOutput) ToPolicyRulePtrOutput() PolicyRulePtrOutput {
	return o
}

func (o PolicyRulePtrOutput) ToPolicyRulePtrOutputWithContext(ctx context.Context) PolicyRulePtrOutput {
	return o
}

func (o PolicyRulePtrOutput) Elem() PolicyRuleOutput {
	return o.ApplyT(func(v *PolicyRule) PolicyRule {
		if v != nil {
			return *v
		}
		var ret PolicyRule
		return ret
	}).(PolicyRuleOutput)
}

func (o PolicyRulePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyRulePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyRule) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyRuleInput is an input type that accepts values of the PolicyRule enum
// A concrete instance of `PolicyRuleInput` can be one of the following:
//
//	PolicyRuleDenyAll
//	PolicyRuleAllowAll
//	PolicyRuleAllowSameNamespace
type PolicyRuleInput interface {
	pulumi.Input

	ToPolicyRuleOutput() PolicyRuleOutput
	ToPolicyRuleOutputWithContext(context.Context) PolicyRuleOutput
}

var policyRulePtrType = reflect.TypeOf((**PolicyRule)(nil)).Elem()

type PolicyRulePtrInput interface {
	pulumi.Input

	ToPolicyRulePtrOutput() PolicyRulePtrOutput
	ToPolicyRulePtrOutputWithContext(context.Context) PolicyRulePtrOutput
}

type policyRulePtr string

func PolicyRulePtr(v string) PolicyRulePtrInput {
	return (*policyRulePtr)(&v)
}

func (*policyRulePtr) ElementType() reflect.Type {
	return policyRulePtrType
}

func (in *policyRulePtr) ToPolicyRulePtrOutput() PolicyRulePtrOutput {
	return pulumi.ToOutput(in).(PolicyRulePtrOutput)
}

func (in *policyRulePtr) ToPolicyRulePtrOutputWithContext(ctx context.Context) PolicyRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyRulePtrOutput)
}

// The network protocol of the port.
type Protocol string

const (
	// TCP protocol.
	ProtocolTCP = Protocol("TCP")
	// UDP protocol.
	ProtocolUDP = Protocol("UDP")
)

func (Protocol) ElementType() reflect.Type {
	return reflect.TypeOf((*Protocol)(nil)).Elem()
}

func (e Protocol) ToProtocolOutput() ProtocolOutput {
	return pulumi.ToOutput(e).(ProtocolOutput)
}

func (e Protocol) ToProtocolOutputWithContext(ctx context.Context) ProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProtocolOutput)
}

func (e Protocol) ToProtocolPtrOutput() ProtocolPtrOutput {
	return e.ToProtocolPtrOutputWithContext(context.Background())
}

func (e Protocol) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return Protocol(e).ToProtocolOutputWithContext(ctx).ToProtocolPtrOutputWithContext(ctx)
}

func (e Protocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Protocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Protocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Protocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProtocolOutput struct{ *pulumi.OutputState }

func (ProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Protocol)(nil)).Elem()
}

func (o ProtocolOutput) ToProtocolOutput() ProtocolOutput {
	return o
}

func (o ProtocolOutput) ToProtocolOutputWithContext(ctx context.Context) ProtocolOutput {
	return o
}

func (o ProtocolOutput) ToProtocolPtrOutput() ProtocolPtrOutput {
	return o.ToProtocolPtrOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Protocol) *Protocol {
		return &v
	}).(ProtocolPtrOutput)
}

func (o ProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Protocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Protocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProtocolPtrOutput struct{ *pulumi.OutputState }

func (ProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Protocol)(nil)).Elem()
}

func (o ProtocolPtrOutput) ToProtocolPtrOutput() ProtocolPtrOutput {
	return o
}

func (o ProtocolPtrOutput) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return o
}

func (o ProtocolPtrOutput) Elem() ProtocolOutput {
	return o.ApplyT(func(v *Protocol) Protocol {
		if v != nil {
			return *v
		}
		var ret Protocol
		return ret
	}).(ProtocolOutput)
}

func (o ProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Protocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProtocolInput is an input type that accepts values of the Protocol enum
// A concrete instance of `ProtocolInput` can be one of the following:
//
//	ProtocolTCP
//	ProtocolUDP
type ProtocolInput interface {
	pulumi.Input

	ToProtocolOutput() ProtocolOutput
	ToProtocolOutputWithContext(context.Context) ProtocolOutput
}

var protocolPtrType = reflect.TypeOf((**Protocol)(nil)).Elem()

type ProtocolPtrInput interface {
	pulumi.Input

	ToProtocolPtrOutput() ProtocolPtrOutput
	ToProtocolPtrOutputWithContext(context.Context) ProtocolPtrOutput
}

type protocolPtr string

func ProtocolPtr(v string) ProtocolPtrInput {
	return (*protocolPtr)(&v)
}

func (*protocolPtr) ElementType() reflect.Type {
	return protocolPtrType
}

func (in *protocolPtr) ToProtocolPtrOutput() ProtocolPtrOutput {
	return pulumi.ToOutput(in).(ProtocolPtrOutput)
}

func (in *protocolPtr) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProtocolPtrOutput)
}

// Allow or deny public network access for AKS
type PublicNetworkAccess string

const (
	PublicNetworkAccessEnabled  = PublicNetworkAccess("Enabled")
	PublicNetworkAccessDisabled = PublicNetworkAccess("Disabled")
)

func (PublicNetworkAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkAccess)(nil)).Elem()
}

func (e PublicNetworkAccess) ToPublicNetworkAccessOutput() PublicNetworkAccessOutput {
	return pulumi.ToOutput(e).(PublicNetworkAccessOutput)
}

func (e PublicNetworkAccess) ToPublicNetworkAccessOutputWithContext(ctx context.Context) PublicNetworkAccessOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublicNetworkAccessOutput)
}

func (e PublicNetworkAccess) ToPublicNetworkAccessPtrOutput() PublicNetworkAccessPtrOutput {
	return e.ToPublicNetworkAccessPtrOutputWithContext(context.Background())
}

func (e PublicNetworkAccess) ToPublicNetworkAccessPtrOutputWithContext(ctx context.Context) PublicNetworkAccessPtrOutput {
	return PublicNetworkAccess(e).ToPublicNetworkAccessOutputWithContext(ctx).ToPublicNetworkAccessPtrOutputWithContext(ctx)
}

func (e PublicNetworkAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicNetworkAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicNetworkAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicNetworkAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublicNetworkAccessOutput struct{ *pulumi.OutputState }

func (PublicNetworkAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkAccess)(nil)).Elem()
}

func (o PublicNetworkAccessOutput) ToPublicNetworkAccessOutput() PublicNetworkAccessOutput {
	return o
}

func (o PublicNetworkAccessOutput) ToPublicNetworkAccessOutputWithContext(ctx context.Context) PublicNetworkAccessOutput {
	return o
}

func (o PublicNetworkAccessOutput) ToPublicNetworkAccessPtrOutput() PublicNetworkAccessPtrOutput {
	return o.ToPublicNetworkAccessPtrOutputWithContext(context.Background())
}

func (o PublicNetworkAccessOutput) ToPublicNetworkAccessPtrOutputWithContext(ctx context.Context) PublicNetworkAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicNetworkAccess) *PublicNetworkAccess {
		return &v
	}).(PublicNetworkAccessPtrOutput)
}

func (o PublicNetworkAccessOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublicNetworkAccessOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicNetworkAccess) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublicNetworkAccessOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicNetworkAccessOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicNetworkAccess) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublicNetworkAccessPtrOutput struct{ *pulumi.OutputState }

func (PublicNetworkAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkAccess)(nil)).Elem()
}

func (o PublicNetworkAccessPtrOutput) ToPublicNetworkAccessPtrOutput() PublicNetworkAccessPtrOutput {
	return o
}

func (o PublicNetworkAccessPtrOutput) ToPublicNetworkAccessPtrOutputWithContext(ctx context.Context) PublicNetworkAccessPtrOutput {
	return o
}

func (o PublicNetworkAccessPtrOutput) Elem() PublicNetworkAccessOutput {
	return o.ApplyT(func(v *PublicNetworkAccess) PublicNetworkAccess {
		if v != nil {
			return *v
		}
		var ret PublicNetworkAccess
		return ret
	}).(PublicNetworkAccessOutput)
}

func (o PublicNetworkAccessPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicNetworkAccessPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublicNetworkAccess) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublicNetworkAccessInput is an input type that accepts values of the PublicNetworkAccess enum
// A concrete instance of `PublicNetworkAccessInput` can be one of the following:
//
//	PublicNetworkAccessEnabled
//	PublicNetworkAccessDisabled
type PublicNetworkAccessInput interface {
	pulumi.Input

	ToPublicNetworkAccessOutput() PublicNetworkAccessOutput
	ToPublicNetworkAccessOutputWithContext(context.Context) PublicNetworkAccessOutput
}

var publicNetworkAccessPtrType = reflect.TypeOf((**PublicNetworkAccess)(nil)).Elem()

type PublicNetworkAccessPtrInput interface {
	pulumi.Input

	ToPublicNetworkAccessPtrOutput() PublicNetworkAccessPtrOutput
	ToPublicNetworkAccessPtrOutputWithContext(context.Context) PublicNetworkAccessPtrOutput
}

type publicNetworkAccessPtr string

func PublicNetworkAccessPtr(v string) PublicNetworkAccessPtrInput {
	return (*publicNetworkAccessPtr)(&v)
}

func (*publicNetworkAccessPtr) ElementType() reflect.Type {
	return publicNetworkAccessPtrType
}

func (in *publicNetworkAccessPtr) ToPublicNetworkAccessPtrOutput() PublicNetworkAccessPtrOutput {
	return pulumi.ToOutput(in).(PublicNetworkAccessPtrOutput)
}

func (in *publicNetworkAccessPtr) ToPublicNetworkAccessPtrOutputWithContext(ctx context.Context) PublicNetworkAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublicNetworkAccessPtrOutput)
}

// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
type ResourceIdentityType string

const (
	// Use an implicitly created system assigned managed identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the system assigned managed identity to manipulate Azure resources.
	ResourceIdentityTypeSystemAssigned = ResourceIdentityType("SystemAssigned")
	// Use a user-specified identity to manage cluster resources. Master components in the control plane such as kube-controller-manager will use the specified user assigned managed identity to manipulate Azure resources.
	ResourceIdentityTypeUserAssigned = ResourceIdentityType("UserAssigned")
	// Do not use a managed identity for the Managed Cluster, service principal will be used instead.
	ResourceIdentityTypeNone = ResourceIdentityType("None")
)

func (ResourceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityTypeOutput)
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return e.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return ResourceIdentityType(e).ToResourceIdentityTypeOutputWithContext(ctx).ToResourceIdentityTypePtrOutputWithContext(ctx)
}

func (e ResourceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypeOutputWithContext(ctx context.Context) ResourceIdentityTypeOutput {
	return o
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o.ToResourceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityType) *ResourceIdentityType {
		return &v
	}).(ResourceIdentityTypePtrOutput)
}

func (o ResourceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return o
}

func (o ResourceIdentityTypePtrOutput) Elem() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v *ResourceIdentityType) ResourceIdentityType {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityType
		return ret
	}).(ResourceIdentityTypeOutput)
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceIdentityTypeInput is an input type that accepts values of the ResourceIdentityType enum
// A concrete instance of `ResourceIdentityTypeInput` can be one of the following:
//
//	ResourceIdentityTypeSystemAssigned
//	ResourceIdentityTypeUserAssigned
//	ResourceIdentityTypeNone
type ResourceIdentityTypeInput interface {
	pulumi.Input

	ToResourceIdentityTypeOutput() ResourceIdentityTypeOutput
	ToResourceIdentityTypeOutputWithContext(context.Context) ResourceIdentityTypeOutput
}

var resourceIdentityTypePtrType = reflect.TypeOf((**ResourceIdentityType)(nil)).Elem()

type ResourceIdentityTypePtrInput interface {
	pulumi.Input

	ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput
	ToResourceIdentityTypePtrOutputWithContext(context.Context) ResourceIdentityTypePtrOutput
}

type resourceIdentityTypePtr string

func ResourceIdentityTypePtr(v string) ResourceIdentityTypePtrInput {
	return (*resourceIdentityTypePtr)(&v)
}

func (*resourceIdentityTypePtr) ElementType() reflect.Type {
	return resourceIdentityTypePtrType
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutput() ResourceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityTypePtrOutput)
}

func (in *resourceIdentityTypePtr) ToResourceIdentityTypePtrOutputWithContext(ctx context.Context) ResourceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityTypePtrOutput)
}

// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
type RestrictionLevel string

const (
	// All RBAC permissions are allowed on the managed node resource group
	RestrictionLevelUnrestricted = RestrictionLevel("Unrestricted")
	// Only */read RBAC permissions allowed on the managed node resource group
	RestrictionLevelReadOnly = RestrictionLevel("ReadOnly")
)

func (RestrictionLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictionLevel)(nil)).Elem()
}

func (e RestrictionLevel) ToRestrictionLevelOutput() RestrictionLevelOutput {
	return pulumi.ToOutput(e).(RestrictionLevelOutput)
}

func (e RestrictionLevel) ToRestrictionLevelOutputWithContext(ctx context.Context) RestrictionLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RestrictionLevelOutput)
}

func (e RestrictionLevel) ToRestrictionLevelPtrOutput() RestrictionLevelPtrOutput {
	return e.ToRestrictionLevelPtrOutputWithContext(context.Background())
}

func (e RestrictionLevel) ToRestrictionLevelPtrOutputWithContext(ctx context.Context) RestrictionLevelPtrOutput {
	return RestrictionLevel(e).ToRestrictionLevelOutputWithContext(ctx).ToRestrictionLevelPtrOutputWithContext(ctx)
}

func (e RestrictionLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RestrictionLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RestrictionLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RestrictionLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RestrictionLevelOutput struct{ *pulumi.OutputState }

func (RestrictionLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestrictionLevel)(nil)).Elem()
}

func (o RestrictionLevelOutput) ToRestrictionLevelOutput() RestrictionLevelOutput {
	return o
}

func (o RestrictionLevelOutput) ToRestrictionLevelOutputWithContext(ctx context.Context) RestrictionLevelOutput {
	return o
}

func (o RestrictionLevelOutput) ToRestrictionLevelPtrOutput() RestrictionLevelPtrOutput {
	return o.ToRestrictionLevelPtrOutputWithContext(context.Background())
}

func (o RestrictionLevelOutput) ToRestrictionLevelPtrOutputWithContext(ctx context.Context) RestrictionLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RestrictionLevel) *RestrictionLevel {
		return &v
	}).(RestrictionLevelPtrOutput)
}

func (o RestrictionLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RestrictionLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RestrictionLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RestrictionLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RestrictionLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RestrictionLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RestrictionLevelPtrOutput struct{ *pulumi.OutputState }

func (RestrictionLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestrictionLevel)(nil)).Elem()
}

func (o RestrictionLevelPtrOutput) ToRestrictionLevelPtrOutput() RestrictionLevelPtrOutput {
	return o
}

func (o RestrictionLevelPtrOutput) ToRestrictionLevelPtrOutputWithContext(ctx context.Context) RestrictionLevelPtrOutput {
	return o
}

func (o RestrictionLevelPtrOutput) Elem() RestrictionLevelOutput {
	return o.ApplyT(func(v *RestrictionLevel) RestrictionLevel {
		if v != nil {
			return *v
		}
		var ret RestrictionLevel
		return ret
	}).(RestrictionLevelOutput)
}

func (o RestrictionLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RestrictionLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RestrictionLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RestrictionLevelInput is an input type that accepts values of the RestrictionLevel enum
// A concrete instance of `RestrictionLevelInput` can be one of the following:
//
//	RestrictionLevelUnrestricted
//	RestrictionLevelReadOnly
type RestrictionLevelInput interface {
	pulumi.Input

	ToRestrictionLevelOutput() RestrictionLevelOutput
	ToRestrictionLevelOutputWithContext(context.Context) RestrictionLevelOutput
}

var restrictionLevelPtrType = reflect.TypeOf((**RestrictionLevel)(nil)).Elem()

type RestrictionLevelPtrInput interface {
	pulumi.Input

	ToRestrictionLevelPtrOutput() RestrictionLevelPtrOutput
	ToRestrictionLevelPtrOutputWithContext(context.Context) RestrictionLevelPtrOutput
}

type restrictionLevelPtr string

func RestrictionLevelPtr(v string) RestrictionLevelPtrInput {
	return (*restrictionLevelPtr)(&v)
}

func (*restrictionLevelPtr) ElementType() reflect.Type {
	return restrictionLevelPtrType
}

func (in *restrictionLevelPtr) ToRestrictionLevelPtrOutput() RestrictionLevelPtrOutput {
	return pulumi.ToOutput(in).(RestrictionLevelPtrOutput)
}

func (in *restrictionLevelPtr) ToRestrictionLevelPtrOutputWithContext(ctx context.Context) RestrictionLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RestrictionLevelPtrOutput)
}

// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
type ScaleDownMode string

const (
	// Create new instances during scale up and remove instances during scale down.
	ScaleDownModeDelete = ScaleDownMode("Delete")
	// Attempt to start deallocated instances (if they exist) during scale up and deallocate instances during scale down.
	ScaleDownModeDeallocate = ScaleDownMode("Deallocate")
)

func (ScaleDownMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleDownMode)(nil)).Elem()
}

func (e ScaleDownMode) ToScaleDownModeOutput() ScaleDownModeOutput {
	return pulumi.ToOutput(e).(ScaleDownModeOutput)
}

func (e ScaleDownMode) ToScaleDownModeOutputWithContext(ctx context.Context) ScaleDownModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScaleDownModeOutput)
}

func (e ScaleDownMode) ToScaleDownModePtrOutput() ScaleDownModePtrOutput {
	return e.ToScaleDownModePtrOutputWithContext(context.Background())
}

func (e ScaleDownMode) ToScaleDownModePtrOutputWithContext(ctx context.Context) ScaleDownModePtrOutput {
	return ScaleDownMode(e).ToScaleDownModeOutputWithContext(ctx).ToScaleDownModePtrOutputWithContext(ctx)
}

func (e ScaleDownMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleDownMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleDownMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScaleDownMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScaleDownModeOutput struct{ *pulumi.OutputState }

func (ScaleDownModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleDownMode)(nil)).Elem()
}

func (o ScaleDownModeOutput) ToScaleDownModeOutput() ScaleDownModeOutput {
	return o
}

func (o ScaleDownModeOutput) ToScaleDownModeOutputWithContext(ctx context.Context) ScaleDownModeOutput {
	return o
}

func (o ScaleDownModeOutput) ToScaleDownModePtrOutput() ScaleDownModePtrOutput {
	return o.ToScaleDownModePtrOutputWithContext(context.Background())
}

func (o ScaleDownModeOutput) ToScaleDownModePtrOutputWithContext(ctx context.Context) ScaleDownModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleDownMode) *ScaleDownMode {
		return &v
	}).(ScaleDownModePtrOutput)
}

func (o ScaleDownModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScaleDownModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleDownMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScaleDownModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleDownModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleDownMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScaleDownModePtrOutput struct{ *pulumi.OutputState }

func (ScaleDownModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleDownMode)(nil)).Elem()
}

func (o ScaleDownModePtrOutput) ToScaleDownModePtrOutput() ScaleDownModePtrOutput {
	return o
}

func (o ScaleDownModePtrOutput) ToScaleDownModePtrOutputWithContext(ctx context.Context) ScaleDownModePtrOutput {
	return o
}

func (o ScaleDownModePtrOutput) Elem() ScaleDownModeOutput {
	return o.ApplyT(func(v *ScaleDownMode) ScaleDownMode {
		if v != nil {
			return *v
		}
		var ret ScaleDownMode
		return ret
	}).(ScaleDownModeOutput)
}

func (o ScaleDownModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleDownModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScaleDownMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScaleDownModeInput is an input type that accepts values of the ScaleDownMode enum
// A concrete instance of `ScaleDownModeInput` can be one of the following:
//
//	ScaleDownModeDelete
//	ScaleDownModeDeallocate
type ScaleDownModeInput interface {
	pulumi.Input

	ToScaleDownModeOutput() ScaleDownModeOutput
	ToScaleDownModeOutputWithContext(context.Context) ScaleDownModeOutput
}

var scaleDownModePtrType = reflect.TypeOf((**ScaleDownMode)(nil)).Elem()

type ScaleDownModePtrInput interface {
	pulumi.Input

	ToScaleDownModePtrOutput() ScaleDownModePtrOutput
	ToScaleDownModePtrOutputWithContext(context.Context) ScaleDownModePtrOutput
}

type scaleDownModePtr string

func ScaleDownModePtr(v string) ScaleDownModePtrInput {
	return (*scaleDownModePtr)(&v)
}

func (*scaleDownModePtr) ElementType() reflect.Type {
	return scaleDownModePtrType
}

func (in *scaleDownModePtr) ToScaleDownModePtrOutput() ScaleDownModePtrOutput {
	return pulumi.ToOutput(in).(ScaleDownModePtrOutput)
}

func (in *scaleDownModePtr) ToScaleDownModePtrOutputWithContext(ctx context.Context) ScaleDownModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScaleDownModePtrOutput)
}

// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
type ScaleSetEvictionPolicy string

const (
	// Nodes in the underlying Scale Set of the node pool are deleted when they're evicted.
	ScaleSetEvictionPolicyDelete = ScaleSetEvictionPolicy("Delete")
	// Nodes in the underlying Scale Set of the node pool are set to the stopped-deallocated state upon eviction. Nodes in the stopped-deallocated state count against your compute quota and can cause issues with cluster scaling or upgrading.
	ScaleSetEvictionPolicyDeallocate = ScaleSetEvictionPolicy("Deallocate")
)

func (ScaleSetEvictionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSetEvictionPolicy)(nil)).Elem()
}

func (e ScaleSetEvictionPolicy) ToScaleSetEvictionPolicyOutput() ScaleSetEvictionPolicyOutput {
	return pulumi.ToOutput(e).(ScaleSetEvictionPolicyOutput)
}

func (e ScaleSetEvictionPolicy) ToScaleSetEvictionPolicyOutputWithContext(ctx context.Context) ScaleSetEvictionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScaleSetEvictionPolicyOutput)
}

func (e ScaleSetEvictionPolicy) ToScaleSetEvictionPolicyPtrOutput() ScaleSetEvictionPolicyPtrOutput {
	return e.ToScaleSetEvictionPolicyPtrOutputWithContext(context.Background())
}

func (e ScaleSetEvictionPolicy) ToScaleSetEvictionPolicyPtrOutputWithContext(ctx context.Context) ScaleSetEvictionPolicyPtrOutput {
	return ScaleSetEvictionPolicy(e).ToScaleSetEvictionPolicyOutputWithContext(ctx).ToScaleSetEvictionPolicyPtrOutputWithContext(ctx)
}

func (e ScaleSetEvictionPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleSetEvictionPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleSetEvictionPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScaleSetEvictionPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScaleSetEvictionPolicyOutput struct{ *pulumi.OutputState }

func (ScaleSetEvictionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSetEvictionPolicy)(nil)).Elem()
}

func (o ScaleSetEvictionPolicyOutput) ToScaleSetEvictionPolicyOutput() ScaleSetEvictionPolicyOutput {
	return o
}

func (o ScaleSetEvictionPolicyOutput) ToScaleSetEvictionPolicyOutputWithContext(ctx context.Context) ScaleSetEvictionPolicyOutput {
	return o
}

func (o ScaleSetEvictionPolicyOutput) ToScaleSetEvictionPolicyPtrOutput() ScaleSetEvictionPolicyPtrOutput {
	return o.ToScaleSetEvictionPolicyPtrOutputWithContext(context.Background())
}

func (o ScaleSetEvictionPolicyOutput) ToScaleSetEvictionPolicyPtrOutputWithContext(ctx context.Context) ScaleSetEvictionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSetEvictionPolicy) *ScaleSetEvictionPolicy {
		return &v
	}).(ScaleSetEvictionPolicyPtrOutput)
}

func (o ScaleSetEvictionPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScaleSetEvictionPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleSetEvictionPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScaleSetEvictionPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleSetEvictionPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleSetEvictionPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScaleSetEvictionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ScaleSetEvictionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSetEvictionPolicy)(nil)).Elem()
}

func (o ScaleSetEvictionPolicyPtrOutput) ToScaleSetEvictionPolicyPtrOutput() ScaleSetEvictionPolicyPtrOutput {
	return o
}

func (o ScaleSetEvictionPolicyPtrOutput) ToScaleSetEvictionPolicyPtrOutputWithContext(ctx context.Context) ScaleSetEvictionPolicyPtrOutput {
	return o
}

func (o ScaleSetEvictionPolicyPtrOutput) Elem() ScaleSetEvictionPolicyOutput {
	return o.ApplyT(func(v *ScaleSetEvictionPolicy) ScaleSetEvictionPolicy {
		if v != nil {
			return *v
		}
		var ret ScaleSetEvictionPolicy
		return ret
	}).(ScaleSetEvictionPolicyOutput)
}

func (o ScaleSetEvictionPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleSetEvictionPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScaleSetEvictionPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScaleSetEvictionPolicyInput is an input type that accepts values of the ScaleSetEvictionPolicy enum
// A concrete instance of `ScaleSetEvictionPolicyInput` can be one of the following:
//
//	ScaleSetEvictionPolicyDelete
//	ScaleSetEvictionPolicyDeallocate
type ScaleSetEvictionPolicyInput interface {
	pulumi.Input

	ToScaleSetEvictionPolicyOutput() ScaleSetEvictionPolicyOutput
	ToScaleSetEvictionPolicyOutputWithContext(context.Context) ScaleSetEvictionPolicyOutput
}

var scaleSetEvictionPolicyPtrType = reflect.TypeOf((**ScaleSetEvictionPolicy)(nil)).Elem()

type ScaleSetEvictionPolicyPtrInput interface {
	pulumi.Input

	ToScaleSetEvictionPolicyPtrOutput() ScaleSetEvictionPolicyPtrOutput
	ToScaleSetEvictionPolicyPtrOutputWithContext(context.Context) ScaleSetEvictionPolicyPtrOutput
}

type scaleSetEvictionPolicyPtr string

func ScaleSetEvictionPolicyPtr(v string) ScaleSetEvictionPolicyPtrInput {
	return (*scaleSetEvictionPolicyPtr)(&v)
}

func (*scaleSetEvictionPolicyPtr) ElementType() reflect.Type {
	return scaleSetEvictionPolicyPtrType
}

func (in *scaleSetEvictionPolicyPtr) ToScaleSetEvictionPolicyPtrOutput() ScaleSetEvictionPolicyPtrOutput {
	return pulumi.ToOutput(in).(ScaleSetEvictionPolicyPtrOutput)
}

func (in *scaleSetEvictionPolicyPtr) ToScaleSetEvictionPolicyPtrOutputWithContext(ctx context.Context) ScaleSetEvictionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScaleSetEvictionPolicyPtrOutput)
}

// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
type ScaleSetPriority string

const (
	// Spot priority VMs will be used. There is no SLA for spot nodes. See [spot on AKS](https://docs.microsoft.com/azure/aks/spot-node-pool) for more information.
	ScaleSetPrioritySpot = ScaleSetPriority("Spot")
	// Regular VMs will be used.
	ScaleSetPriorityRegular = ScaleSetPriority("Regular")
)

func (ScaleSetPriority) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSetPriority)(nil)).Elem()
}

func (e ScaleSetPriority) ToScaleSetPriorityOutput() ScaleSetPriorityOutput {
	return pulumi.ToOutput(e).(ScaleSetPriorityOutput)
}

func (e ScaleSetPriority) ToScaleSetPriorityOutputWithContext(ctx context.Context) ScaleSetPriorityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScaleSetPriorityOutput)
}

func (e ScaleSetPriority) ToScaleSetPriorityPtrOutput() ScaleSetPriorityPtrOutput {
	return e.ToScaleSetPriorityPtrOutputWithContext(context.Background())
}

func (e ScaleSetPriority) ToScaleSetPriorityPtrOutputWithContext(ctx context.Context) ScaleSetPriorityPtrOutput {
	return ScaleSetPriority(e).ToScaleSetPriorityOutputWithContext(ctx).ToScaleSetPriorityPtrOutputWithContext(ctx)
}

func (e ScaleSetPriority) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleSetPriority) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleSetPriority) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScaleSetPriority) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScaleSetPriorityOutput struct{ *pulumi.OutputState }

func (ScaleSetPriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSetPriority)(nil)).Elem()
}

func (o ScaleSetPriorityOutput) ToScaleSetPriorityOutput() ScaleSetPriorityOutput {
	return o
}

func (o ScaleSetPriorityOutput) ToScaleSetPriorityOutputWithContext(ctx context.Context) ScaleSetPriorityOutput {
	return o
}

func (o ScaleSetPriorityOutput) ToScaleSetPriorityPtrOutput() ScaleSetPriorityPtrOutput {
	return o.ToScaleSetPriorityPtrOutputWithContext(context.Background())
}

func (o ScaleSetPriorityOutput) ToScaleSetPriorityPtrOutputWithContext(ctx context.Context) ScaleSetPriorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSetPriority) *ScaleSetPriority {
		return &v
	}).(ScaleSetPriorityPtrOutput)
}

func (o ScaleSetPriorityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScaleSetPriorityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleSetPriority) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScaleSetPriorityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleSetPriorityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleSetPriority) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScaleSetPriorityPtrOutput struct{ *pulumi.OutputState }

func (ScaleSetPriorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSetPriority)(nil)).Elem()
}

func (o ScaleSetPriorityPtrOutput) ToScaleSetPriorityPtrOutput() ScaleSetPriorityPtrOutput {
	return o
}

func (o ScaleSetPriorityPtrOutput) ToScaleSetPriorityPtrOutputWithContext(ctx context.Context) ScaleSetPriorityPtrOutput {
	return o
}

func (o ScaleSetPriorityPtrOutput) Elem() ScaleSetPriorityOutput {
	return o.ApplyT(func(v *ScaleSetPriority) ScaleSetPriority {
		if v != nil {
			return *v
		}
		var ret ScaleSetPriority
		return ret
	}).(ScaleSetPriorityOutput)
}

func (o ScaleSetPriorityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleSetPriorityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScaleSetPriority) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScaleSetPriorityInput is an input type that accepts values of the ScaleSetPriority enum
// A concrete instance of `ScaleSetPriorityInput` can be one of the following:
//
//	ScaleSetPrioritySpot
//	ScaleSetPriorityRegular
type ScaleSetPriorityInput interface {
	pulumi.Input

	ToScaleSetPriorityOutput() ScaleSetPriorityOutput
	ToScaleSetPriorityOutputWithContext(context.Context) ScaleSetPriorityOutput
}

var scaleSetPriorityPtrType = reflect.TypeOf((**ScaleSetPriority)(nil)).Elem()

type ScaleSetPriorityPtrInput interface {
	pulumi.Input

	ToScaleSetPriorityPtrOutput() ScaleSetPriorityPtrOutput
	ToScaleSetPriorityPtrOutputWithContext(context.Context) ScaleSetPriorityPtrOutput
}

type scaleSetPriorityPtr string

func ScaleSetPriorityPtr(v string) ScaleSetPriorityPtrInput {
	return (*scaleSetPriorityPtr)(&v)
}

func (*scaleSetPriorityPtr) ElementType() reflect.Type {
	return scaleSetPriorityPtrType
}

func (in *scaleSetPriorityPtr) ToScaleSetPriorityPtrOutput() ScaleSetPriorityPtrOutput {
	return pulumi.ToOutput(in).(ScaleSetPriorityPtrOutput)
}

func (in *scaleSetPriorityPtr) ToScaleSetPriorityPtrOutputWithContext(ctx context.Context) ScaleSetPriorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScaleSetPriorityPtrOutput)
}

// Mode of the service mesh.
type ServiceMeshMode string

const (
	// Istio deployed as an AKS addon.
	ServiceMeshModeIstio = ServiceMeshMode("Istio")
	// Mesh is disabled.
	ServiceMeshModeDisabled = ServiceMeshMode("Disabled")
)

func (ServiceMeshMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshMode)(nil)).Elem()
}

func (e ServiceMeshMode) ToServiceMeshModeOutput() ServiceMeshModeOutput {
	return pulumi.ToOutput(e).(ServiceMeshModeOutput)
}

func (e ServiceMeshMode) ToServiceMeshModeOutputWithContext(ctx context.Context) ServiceMeshModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ServiceMeshModeOutput)
}

func (e ServiceMeshMode) ToServiceMeshModePtrOutput() ServiceMeshModePtrOutput {
	return e.ToServiceMeshModePtrOutputWithContext(context.Background())
}

func (e ServiceMeshMode) ToServiceMeshModePtrOutputWithContext(ctx context.Context) ServiceMeshModePtrOutput {
	return ServiceMeshMode(e).ToServiceMeshModeOutputWithContext(ctx).ToServiceMeshModePtrOutputWithContext(ctx)
}

func (e ServiceMeshMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceMeshMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceMeshMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceMeshMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServiceMeshModeOutput struct{ *pulumi.OutputState }

func (ServiceMeshModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshMode)(nil)).Elem()
}

func (o ServiceMeshModeOutput) ToServiceMeshModeOutput() ServiceMeshModeOutput {
	return o
}

func (o ServiceMeshModeOutput) ToServiceMeshModeOutputWithContext(ctx context.Context) ServiceMeshModeOutput {
	return o
}

func (o ServiceMeshModeOutput) ToServiceMeshModePtrOutput() ServiceMeshModePtrOutput {
	return o.ToServiceMeshModePtrOutputWithContext(context.Background())
}

func (o ServiceMeshModeOutput) ToServiceMeshModePtrOutputWithContext(ctx context.Context) ServiceMeshModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceMeshMode) *ServiceMeshMode {
		return &v
	}).(ServiceMeshModePtrOutput)
}

func (o ServiceMeshModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ServiceMeshModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceMeshMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ServiceMeshModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceMeshModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceMeshMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ServiceMeshModePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshMode)(nil)).Elem()
}

func (o ServiceMeshModePtrOutput) ToServiceMeshModePtrOutput() ServiceMeshModePtrOutput {
	return o
}

func (o ServiceMeshModePtrOutput) ToServiceMeshModePtrOutputWithContext(ctx context.Context) ServiceMeshModePtrOutput {
	return o
}

func (o ServiceMeshModePtrOutput) Elem() ServiceMeshModeOutput {
	return o.ApplyT(func(v *ServiceMeshMode) ServiceMeshMode {
		if v != nil {
			return *v
		}
		var ret ServiceMeshMode
		return ret
	}).(ServiceMeshModeOutput)
}

func (o ServiceMeshModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceMeshModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ServiceMeshMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ServiceMeshModeInput is an input type that accepts values of the ServiceMeshMode enum
// A concrete instance of `ServiceMeshModeInput` can be one of the following:
//
//	ServiceMeshModeIstio
//	ServiceMeshModeDisabled
type ServiceMeshModeInput interface {
	pulumi.Input

	ToServiceMeshModeOutput() ServiceMeshModeOutput
	ToServiceMeshModeOutputWithContext(context.Context) ServiceMeshModeOutput
}

var serviceMeshModePtrType = reflect.TypeOf((**ServiceMeshMode)(nil)).Elem()

type ServiceMeshModePtrInput interface {
	pulumi.Input

	ToServiceMeshModePtrOutput() ServiceMeshModePtrOutput
	ToServiceMeshModePtrOutputWithContext(context.Context) ServiceMeshModePtrOutput
}

type serviceMeshModePtr string

func ServiceMeshModePtr(v string) ServiceMeshModePtrInput {
	return (*serviceMeshModePtr)(&v)
}

func (*serviceMeshModePtr) ElementType() reflect.Type {
	return serviceMeshModePtrType
}

func (in *serviceMeshModePtr) ToServiceMeshModePtrOutput() ServiceMeshModePtrOutput {
	return pulumi.ToOutput(in).(ServiceMeshModePtrOutput)
}

func (in *serviceMeshModePtr) ToServiceMeshModePtrOutputWithContext(ctx context.Context) ServiceMeshModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ServiceMeshModePtrOutput)
}

// The type of a snapshot. The default is NodePool.
type SnapshotType string

const (
	// The snapshot is a snapshot of a node pool.
	SnapshotTypeNodePool = SnapshotType("NodePool")
)

func (SnapshotType) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotType)(nil)).Elem()
}

func (e SnapshotType) ToSnapshotTypeOutput() SnapshotTypeOutput {
	return pulumi.ToOutput(e).(SnapshotTypeOutput)
}

func (e SnapshotType) ToSnapshotTypeOutputWithContext(ctx context.Context) SnapshotTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SnapshotTypeOutput)
}

func (e SnapshotType) ToSnapshotTypePtrOutput() SnapshotTypePtrOutput {
	return e.ToSnapshotTypePtrOutputWithContext(context.Background())
}

func (e SnapshotType) ToSnapshotTypePtrOutputWithContext(ctx context.Context) SnapshotTypePtrOutput {
	return SnapshotType(e).ToSnapshotTypeOutputWithContext(ctx).ToSnapshotTypePtrOutputWithContext(ctx)
}

func (e SnapshotType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SnapshotType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SnapshotType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SnapshotType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SnapshotTypeOutput struct{ *pulumi.OutputState }

func (SnapshotTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotType)(nil)).Elem()
}

func (o SnapshotTypeOutput) ToSnapshotTypeOutput() SnapshotTypeOutput {
	return o
}

func (o SnapshotTypeOutput) ToSnapshotTypeOutputWithContext(ctx context.Context) SnapshotTypeOutput {
	return o
}

func (o SnapshotTypeOutput) ToSnapshotTypePtrOutput() SnapshotTypePtrOutput {
	return o.ToSnapshotTypePtrOutputWithContext(context.Background())
}

func (o SnapshotTypeOutput) ToSnapshotTypePtrOutputWithContext(ctx context.Context) SnapshotTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotType) *SnapshotType {
		return &v
	}).(SnapshotTypePtrOutput)
}

func (o SnapshotTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SnapshotTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SnapshotType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SnapshotTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SnapshotTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SnapshotType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SnapshotTypePtrOutput struct{ *pulumi.OutputState }

func (SnapshotTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotType)(nil)).Elem()
}

func (o SnapshotTypePtrOutput) ToSnapshotTypePtrOutput() SnapshotTypePtrOutput {
	return o
}

func (o SnapshotTypePtrOutput) ToSnapshotTypePtrOutputWithContext(ctx context.Context) SnapshotTypePtrOutput {
	return o
}

func (o SnapshotTypePtrOutput) Elem() SnapshotTypeOutput {
	return o.ApplyT(func(v *SnapshotType) SnapshotType {
		if v != nil {
			return *v
		}
		var ret SnapshotType
		return ret
	}).(SnapshotTypeOutput)
}

func (o SnapshotTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SnapshotTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SnapshotType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SnapshotTypeInput is an input type that accepts values of the SnapshotType enum
// A concrete instance of `SnapshotTypeInput` can be one of the following:
//
//	SnapshotTypeNodePool
type SnapshotTypeInput interface {
	pulumi.Input

	ToSnapshotTypeOutput() SnapshotTypeOutput
	ToSnapshotTypeOutputWithContext(context.Context) SnapshotTypeOutput
}

var snapshotTypePtrType = reflect.TypeOf((**SnapshotType)(nil)).Elem()

type SnapshotTypePtrInput interface {
	pulumi.Input

	ToSnapshotTypePtrOutput() SnapshotTypePtrOutput
	ToSnapshotTypePtrOutputWithContext(context.Context) SnapshotTypePtrOutput
}

type snapshotTypePtr string

func SnapshotTypePtr(v string) SnapshotTypePtrInput {
	return (*snapshotTypePtr)(&v)
}

func (*snapshotTypePtr) ElementType() reflect.Type {
	return snapshotTypePtrType
}

func (in *snapshotTypePtr) ToSnapshotTypePtrOutput() SnapshotTypePtrOutput {
	return pulumi.ToOutput(in).(SnapshotTypePtrOutput)
}

func (in *snapshotTypePtr) ToSnapshotTypePtrOutputWithContext(ctx context.Context) SnapshotTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SnapshotTypePtrOutput)
}

// Specifies on which week of the month the dayOfWeek applies.
type Type string

const (
	// First week of the month.
	TypeFirst = Type("First")
	// Second week of the month.
	TypeSecond = Type("Second")
	// Third week of the month.
	TypeThird = Type("Third")
	// Fourth week of the month.
	TypeFourth = Type("Fourth")
	// Last week of the month.
	TypeLast = Type("Last")
)

func (Type) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (e Type) ToTypeOutput() TypeOutput {
	return pulumi.ToOutput(e).(TypeOutput)
}

func (e Type) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TypeOutput)
}

func (e Type) ToTypePtrOutput() TypePtrOutput {
	return e.ToTypePtrOutputWithContext(context.Background())
}

func (e Type) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return Type(e).ToTypeOutputWithContext(ctx).ToTypePtrOutputWithContext(ctx)
}

func (e Type) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Type) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

func (o TypeOutput) ToTypePtrOutput() TypePtrOutput {
	return o.ToTypePtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Type) *Type {
		return &v
	}).(TypePtrOutput)
}

func (o TypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TypePtrOutput struct{ *pulumi.OutputState }

func (TypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (o TypePtrOutput) ToTypePtrOutput() TypePtrOutput {
	return o
}

func (o TypePtrOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o
}

func (o TypePtrOutput) Elem() TypeOutput {
	return o.ApplyT(func(v *Type) Type {
		if v != nil {
			return *v
		}
		var ret Type
		return ret
	}).(TypeOutput)
}

func (o TypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Type) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TypeInput is an input type that accepts values of the Type enum
// A concrete instance of `TypeInput` can be one of the following:
//
//	TypeFirst
//	TypeSecond
//	TypeThird
//	TypeFourth
//	TypeLast
type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(context.Context) TypeOutput
}

var typePtrType = reflect.TypeOf((**Type)(nil)).Elem()

type TypePtrInput interface {
	pulumi.Input

	ToTypePtrOutput() TypePtrOutput
	ToTypePtrOutputWithContext(context.Context) TypePtrOutput
}

type typePtr string

func TypePtr(v string) TypePtrInput {
	return (*typePtr)(&v)
}

func (*typePtr) ElementType() reflect.Type {
	return typePtrType
}

func (in *typePtr) ToTypePtrOutput() TypePtrOutput {
	return pulumi.ToOutput(in).(TypePtrOutput)
}

func (in *typePtr) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TypePtrOutput)
}

// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
type UpgradeChannel string

const (
	// Automatically upgrade the cluster to the latest supported patch release on the latest supported minor version. In cases where the cluster is at a version of Kubernetes that is at an N-2 minor version where N is the latest supported minor version, the cluster first upgrades to the latest supported patch version on N-1 minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster first is upgraded to 1.18.6, then is upgraded to 1.19.1.
	UpgradeChannelRapid = UpgradeChannel("rapid")
	// Automatically upgrade the cluster to the latest supported patch release on minor version N-1, where N is the latest supported minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.18.6.
	UpgradeChannelStable = UpgradeChannel("stable")
	// Automatically upgrade the cluster to the latest supported patch version when it becomes available while keeping the minor version the same. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.17.9.
	UpgradeChannelPatch = UpgradeChannel("patch")
	// Automatically upgrade the node image to the latest version available. Consider using nodeOSUpgradeChannel instead as that allows you to configure node OS patching separate from Kubernetes version patching
	UpgradeChannel_Node_Image = UpgradeChannel("node-image")
	// Disables auto-upgrades and keeps the cluster at its current version of Kubernetes.
	UpgradeChannelNone = UpgradeChannel("none")
)

func (UpgradeChannel) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeChannel)(nil)).Elem()
}

func (e UpgradeChannel) ToUpgradeChannelOutput() UpgradeChannelOutput {
	return pulumi.ToOutput(e).(UpgradeChannelOutput)
}

func (e UpgradeChannel) ToUpgradeChannelOutputWithContext(ctx context.Context) UpgradeChannelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UpgradeChannelOutput)
}

func (e UpgradeChannel) ToUpgradeChannelPtrOutput() UpgradeChannelPtrOutput {
	return e.ToUpgradeChannelPtrOutputWithContext(context.Background())
}

func (e UpgradeChannel) ToUpgradeChannelPtrOutputWithContext(ctx context.Context) UpgradeChannelPtrOutput {
	return UpgradeChannel(e).ToUpgradeChannelOutputWithContext(ctx).ToUpgradeChannelPtrOutputWithContext(ctx)
}

func (e UpgradeChannel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpgradeChannel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpgradeChannel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UpgradeChannel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UpgradeChannelOutput struct{ *pulumi.OutputState }

func (UpgradeChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeChannel)(nil)).Elem()
}

func (o UpgradeChannelOutput) ToUpgradeChannelOutput() UpgradeChannelOutput {
	return o
}

func (o UpgradeChannelOutput) ToUpgradeChannelOutputWithContext(ctx context.Context) UpgradeChannelOutput {
	return o
}

func (o UpgradeChannelOutput) ToUpgradeChannelPtrOutput() UpgradeChannelPtrOutput {
	return o.ToUpgradeChannelPtrOutputWithContext(context.Background())
}

func (o UpgradeChannelOutput) ToUpgradeChannelPtrOutputWithContext(ctx context.Context) UpgradeChannelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeChannel) *UpgradeChannel {
		return &v
	}).(UpgradeChannelPtrOutput)
}

func (o UpgradeChannelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UpgradeChannelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpgradeChannel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UpgradeChannelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpgradeChannelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpgradeChannel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UpgradeChannelPtrOutput struct{ *pulumi.OutputState }

func (UpgradeChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeChannel)(nil)).Elem()
}

func (o UpgradeChannelPtrOutput) ToUpgradeChannelPtrOutput() UpgradeChannelPtrOutput {
	return o
}

func (o UpgradeChannelPtrOutput) ToUpgradeChannelPtrOutputWithContext(ctx context.Context) UpgradeChannelPtrOutput {
	return o
}

func (o UpgradeChannelPtrOutput) Elem() UpgradeChannelOutput {
	return o.ApplyT(func(v *UpgradeChannel) UpgradeChannel {
		if v != nil {
			return *v
		}
		var ret UpgradeChannel
		return ret
	}).(UpgradeChannelOutput)
}

func (o UpgradeChannelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpgradeChannelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UpgradeChannel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UpgradeChannelInput is an input type that accepts values of the UpgradeChannel enum
// A concrete instance of `UpgradeChannelInput` can be one of the following:
//
//	UpgradeChannelRapid
//	UpgradeChannelStable
//	UpgradeChannelPatch
//	UpgradeChannel_Node_Image
//	UpgradeChannelNone
type UpgradeChannelInput interface {
	pulumi.Input

	ToUpgradeChannelOutput() UpgradeChannelOutput
	ToUpgradeChannelOutputWithContext(context.Context) UpgradeChannelOutput
}

var upgradeChannelPtrType = reflect.TypeOf((**UpgradeChannel)(nil)).Elem()

type UpgradeChannelPtrInput interface {
	pulumi.Input

	ToUpgradeChannelPtrOutput() UpgradeChannelPtrOutput
	ToUpgradeChannelPtrOutputWithContext(context.Context) UpgradeChannelPtrOutput
}

type upgradeChannelPtr string

func UpgradeChannelPtr(v string) UpgradeChannelPtrInput {
	return (*upgradeChannelPtr)(&v)
}

func (*upgradeChannelPtr) ElementType() reflect.Type {
	return upgradeChannelPtrType
}

func (in *upgradeChannelPtr) ToUpgradeChannelPtrOutput() UpgradeChannelPtrOutput {
	return pulumi.ToOutput(in).(UpgradeChannelPtrOutput)
}

func (in *upgradeChannelPtr) ToUpgradeChannelPtrOutputWithContext(ctx context.Context) UpgradeChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UpgradeChannelPtrOutput)
}

// The day of the week.
type WeekDay string

const (
	WeekDaySunday    = WeekDay("Sunday")
	WeekDayMonday    = WeekDay("Monday")
	WeekDayTuesday   = WeekDay("Tuesday")
	WeekDayWednesday = WeekDay("Wednesday")
	WeekDayThursday  = WeekDay("Thursday")
	WeekDayFriday    = WeekDay("Friday")
	WeekDaySaturday  = WeekDay("Saturday")
)

func (WeekDay) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDay)(nil)).Elem()
}

func (e WeekDay) ToWeekDayOutput() WeekDayOutput {
	return pulumi.ToOutput(e).(WeekDayOutput)
}

func (e WeekDay) ToWeekDayOutputWithContext(ctx context.Context) WeekDayOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeekDayOutput)
}

func (e WeekDay) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return e.ToWeekDayPtrOutputWithContext(context.Background())
}

func (e WeekDay) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return WeekDay(e).ToWeekDayOutputWithContext(ctx).ToWeekDayPtrOutputWithContext(ctx)
}

func (e WeekDay) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDay) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDay) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeekDay) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeekDayOutput struct{ *pulumi.OutputState }

func (WeekDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDay)(nil)).Elem()
}

func (o WeekDayOutput) ToWeekDayOutput() WeekDayOutput {
	return o
}

func (o WeekDayOutput) ToWeekDayOutputWithContext(ctx context.Context) WeekDayOutput {
	return o
}

func (o WeekDayOutput) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return o.ToWeekDayPtrOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeekDay) *WeekDay {
		return &v
	}).(WeekDayPtrOutput)
}

func (o WeekDayOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDay) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeekDayOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDay) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeekDayPtrOutput struct{ *pulumi.OutputState }

func (WeekDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDay)(nil)).Elem()
}

func (o WeekDayPtrOutput) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return o
}

func (o WeekDayPtrOutput) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return o
}

func (o WeekDayPtrOutput) Elem() WeekDayOutput {
	return o.ApplyT(func(v *WeekDay) WeekDay {
		if v != nil {
			return *v
		}
		var ret WeekDay
		return ret
	}).(WeekDayOutput)
}

func (o WeekDayPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeekDay) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeekDayInput is an input type that accepts values of the WeekDay enum
// A concrete instance of `WeekDayInput` can be one of the following:
//
//	WeekDaySunday
//	WeekDayMonday
//	WeekDayTuesday
//	WeekDayWednesday
//	WeekDayThursday
//	WeekDayFriday
//	WeekDaySaturday
type WeekDayInput interface {
	pulumi.Input

	ToWeekDayOutput() WeekDayOutput
	ToWeekDayOutputWithContext(context.Context) WeekDayOutput
}

var weekDayPtrType = reflect.TypeOf((**WeekDay)(nil)).Elem()

type WeekDayPtrInput interface {
	pulumi.Input

	ToWeekDayPtrOutput() WeekDayPtrOutput
	ToWeekDayPtrOutputWithContext(context.Context) WeekDayPtrOutput
}

type weekDayPtr string

func WeekDayPtr(v string) WeekDayPtrInput {
	return (*weekDayPtr)(&v)
}

func (*weekDayPtr) ElementType() reflect.Type {
	return weekDayPtrType
}

func (in *weekDayPtr) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return pulumi.ToOutput(in).(WeekDayPtrOutput)
}

func (in *weekDayPtr) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeekDayPtrOutput)
}

// Determines the type of workload a node can run.
type WorkloadRuntime string

const (
	// Nodes will use Kubelet to run standard OCI container workloads.
	WorkloadRuntimeOCIContainer = WorkloadRuntime("OCIContainer")
	// Nodes will use Krustlet to run WASM workloads using the WASI provider (Preview).
	WorkloadRuntimeWasmWasi = WorkloadRuntime("WasmWasi")
)

func (WorkloadRuntime) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadRuntime)(nil)).Elem()
}

func (e WorkloadRuntime) ToWorkloadRuntimeOutput() WorkloadRuntimeOutput {
	return pulumi.ToOutput(e).(WorkloadRuntimeOutput)
}

func (e WorkloadRuntime) ToWorkloadRuntimeOutputWithContext(ctx context.Context) WorkloadRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WorkloadRuntimeOutput)
}

func (e WorkloadRuntime) ToWorkloadRuntimePtrOutput() WorkloadRuntimePtrOutput {
	return e.ToWorkloadRuntimePtrOutputWithContext(context.Background())
}

func (e WorkloadRuntime) ToWorkloadRuntimePtrOutputWithContext(ctx context.Context) WorkloadRuntimePtrOutput {
	return WorkloadRuntime(e).ToWorkloadRuntimeOutputWithContext(ctx).ToWorkloadRuntimePtrOutputWithContext(ctx)
}

func (e WorkloadRuntime) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadRuntime) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadRuntime) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkloadRuntime) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WorkloadRuntimeOutput struct{ *pulumi.OutputState }

func (WorkloadRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadRuntime)(nil)).Elem()
}

func (o WorkloadRuntimeOutput) ToWorkloadRuntimeOutput() WorkloadRuntimeOutput {
	return o
}

func (o WorkloadRuntimeOutput) ToWorkloadRuntimeOutputWithContext(ctx context.Context) WorkloadRuntimeOutput {
	return o
}

func (o WorkloadRuntimeOutput) ToWorkloadRuntimePtrOutput() WorkloadRuntimePtrOutput {
	return o.ToWorkloadRuntimePtrOutputWithContext(context.Background())
}

func (o WorkloadRuntimeOutput) ToWorkloadRuntimePtrOutputWithContext(ctx context.Context) WorkloadRuntimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadRuntime) *WorkloadRuntime {
		return &v
	}).(WorkloadRuntimePtrOutput)
}

func (o WorkloadRuntimeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WorkloadRuntimeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WorkloadRuntime) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WorkloadRuntimeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WorkloadRuntimeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WorkloadRuntime) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WorkloadRuntimePtrOutput struct{ *pulumi.OutputState }

func (WorkloadRuntimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadRuntime)(nil)).Elem()
}

func (o WorkloadRuntimePtrOutput) ToWorkloadRuntimePtrOutput() WorkloadRuntimePtrOutput {
	return o
}

func (o WorkloadRuntimePtrOutput) ToWorkloadRuntimePtrOutputWithContext(ctx context.Context) WorkloadRuntimePtrOutput {
	return o
}

func (o WorkloadRuntimePtrOutput) Elem() WorkloadRuntimeOutput {
	return o.ApplyT(func(v *WorkloadRuntime) WorkloadRuntime {
		if v != nil {
			return *v
		}
		var ret WorkloadRuntime
		return ret
	}).(WorkloadRuntimeOutput)
}

func (o WorkloadRuntimePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WorkloadRuntimePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WorkloadRuntime) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WorkloadRuntimeInput is an input type that accepts values of the WorkloadRuntime enum
// A concrete instance of `WorkloadRuntimeInput` can be one of the following:
//
//	WorkloadRuntimeOCIContainer
//	WorkloadRuntimeWasmWasi
type WorkloadRuntimeInput interface {
	pulumi.Input

	ToWorkloadRuntimeOutput() WorkloadRuntimeOutput
	ToWorkloadRuntimeOutputWithContext(context.Context) WorkloadRuntimeOutput
}

var workloadRuntimePtrType = reflect.TypeOf((**WorkloadRuntime)(nil)).Elem()

type WorkloadRuntimePtrInput interface {
	pulumi.Input

	ToWorkloadRuntimePtrOutput() WorkloadRuntimePtrOutput
	ToWorkloadRuntimePtrOutputWithContext(context.Context) WorkloadRuntimePtrOutput
}

type workloadRuntimePtr string

func WorkloadRuntimePtr(v string) WorkloadRuntimePtrInput {
	return (*workloadRuntimePtr)(&v)
}

func (*workloadRuntimePtr) ElementType() reflect.Type {
	return workloadRuntimePtrType
}

func (in *workloadRuntimePtr) ToWorkloadRuntimePtrOutput() WorkloadRuntimePtrOutput {
	return pulumi.ToOutput(in).(WorkloadRuntimePtrOutput)
}

func (in *workloadRuntimePtr) ToWorkloadRuntimePtrOutputWithContext(ctx context.Context) WorkloadRuntimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WorkloadRuntimePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AdoptionPolicyOutput{})
	pulumi.RegisterOutputType(AdoptionPolicyPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolModeOutput{})
	pulumi.RegisterOutputType(AgentPoolModePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolTypeOutput{})
	pulumi.RegisterOutputType(AgentPoolTypePtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeNodeImageSelectionTypeOutput{})
	pulumi.RegisterOutputType(AutoUpgradeNodeImageSelectionTypePtrOutput{})
	pulumi.RegisterOutputType(BackendPoolTypeOutput{})
	pulumi.RegisterOutputType(BackendPoolTypePtrOutput{})
	pulumi.RegisterOutputType(CodeOutput{})
	pulumi.RegisterOutputType(CodePtrOutput{})
	pulumi.RegisterOutputType(ConnectionStatusOutput{})
	pulumi.RegisterOutputType(ConnectionStatusPtrOutput{})
	pulumi.RegisterOutputType(DeletePolicyOutput{})
	pulumi.RegisterOutputType(DeletePolicyPtrOutput{})
	pulumi.RegisterOutputType(ExpanderOutput{})
	pulumi.RegisterOutputType(ExpanderPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypesOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypesPtrOutput{})
	pulumi.RegisterOutputType(GPUInstanceProfileOutput{})
	pulumi.RegisterOutputType(GPUInstanceProfilePtrOutput{})
	pulumi.RegisterOutputType(IpFamilyOutput{})
	pulumi.RegisterOutputType(IpFamilyPtrOutput{})
	pulumi.RegisterOutputType(IstioIngressGatewayModeOutput{})
	pulumi.RegisterOutputType(IstioIngressGatewayModePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultNetworkAccessTypesOutput{})
	pulumi.RegisterOutputType(KeyVaultNetworkAccessTypesPtrOutput{})
	pulumi.RegisterOutputType(KubeletDiskTypeOutput{})
	pulumi.RegisterOutputType(KubeletDiskTypePtrOutput{})
	pulumi.RegisterOutputType(KubernetesSupportPlanOutput{})
	pulumi.RegisterOutputType(KubernetesSupportPlanPtrOutput{})
	pulumi.RegisterOutputType(LicenseTypeOutput{})
	pulumi.RegisterOutputType(LicenseTypePtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerSkuOutput{})
	pulumi.RegisterOutputType(LoadBalancerSkuPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUNameOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUNamePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUTierOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUTierPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpgradeTypeOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpgradeTypePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(NetworkDataplaneOutput{})
	pulumi.RegisterOutputType(NetworkDataplanePtrOutput{})
	pulumi.RegisterOutputType(NetworkModeOutput{})
	pulumi.RegisterOutputType(NetworkModePtrOutput{})
	pulumi.RegisterOutputType(NetworkPluginOutput{})
	pulumi.RegisterOutputType(NetworkPluginPtrOutput{})
	pulumi.RegisterOutputType(NetworkPluginModeOutput{})
	pulumi.RegisterOutputType(NetworkPluginModePtrOutput{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
	pulumi.RegisterOutputType(NetworkPolicyPtrOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionTypeOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionTypePtrOutput{})
	pulumi.RegisterOutputType(NodeOSUpgradeChannelOutput{})
	pulumi.RegisterOutputType(NodeOSUpgradeChannelPtrOutput{})
	pulumi.RegisterOutputType(OSDiskTypeOutput{})
	pulumi.RegisterOutputType(OSDiskTypePtrOutput{})
	pulumi.RegisterOutputType(OSSKUOutput{})
	pulumi.RegisterOutputType(OSSKUPtrOutput{})
	pulumi.RegisterOutputType(OSTypeOutput{})
	pulumi.RegisterOutputType(OSTypePtrOutput{})
	pulumi.RegisterOutputType(OperatorOutput{})
	pulumi.RegisterOutputType(OperatorPtrOutput{})
	pulumi.RegisterOutputType(OutboundTypeOutput{})
	pulumi.RegisterOutputType(OutboundTypePtrOutput{})
	pulumi.RegisterOutputType(PolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRulePtrOutput{})
	pulumi.RegisterOutputType(ProtocolOutput{})
	pulumi.RegisterOutputType(ProtocolPtrOutput{})
	pulumi.RegisterOutputType(PublicNetworkAccessOutput{})
	pulumi.RegisterOutputType(PublicNetworkAccessPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ResourceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(RestrictionLevelOutput{})
	pulumi.RegisterOutputType(RestrictionLevelPtrOutput{})
	pulumi.RegisterOutputType(ScaleDownModeOutput{})
	pulumi.RegisterOutputType(ScaleDownModePtrOutput{})
	pulumi.RegisterOutputType(ScaleSetEvictionPolicyOutput{})
	pulumi.RegisterOutputType(ScaleSetEvictionPolicyPtrOutput{})
	pulumi.RegisterOutputType(ScaleSetPriorityOutput{})
	pulumi.RegisterOutputType(ScaleSetPriorityPtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshModeOutput{})
	pulumi.RegisterOutputType(ServiceMeshModePtrOutput{})
	pulumi.RegisterOutputType(SnapshotTypeOutput{})
	pulumi.RegisterOutputType(SnapshotTypePtrOutput{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypePtrOutput{})
	pulumi.RegisterOutputType(UpgradeChannelOutput{})
	pulumi.RegisterOutputType(UpgradeChannelPtrOutput{})
	pulumi.RegisterOutputType(WeekDayOutput{})
	pulumi.RegisterOutputType(WeekDayPtrOutput{})
	pulumi.RegisterOutputType(WorkloadRuntimeOutput{})
	pulumi.RegisterOutputType(WorkloadRuntimePtrOutput{})
}
