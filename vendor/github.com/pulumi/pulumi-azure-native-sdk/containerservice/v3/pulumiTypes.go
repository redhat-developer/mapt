// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Access profile for the Fleet hub API server.
type APIServerAccessProfile struct {
	// Whether to create the Fleet hub as a private cluster or not.
	EnablePrivateCluster *bool `pulumi:"enablePrivateCluster"`
	// Whether to enable apiserver vnet integration for the Fleet hub or not.
	EnableVnetIntegration *bool `pulumi:"enableVnetIntegration"`
	// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
	SubnetId *string `pulumi:"subnetId"`
}

// APIServerAccessProfileInput is an input type that accepts APIServerAccessProfileArgs and APIServerAccessProfileOutput values.
// You can construct a concrete instance of `APIServerAccessProfileInput` via:
//
//	APIServerAccessProfileArgs{...}
type APIServerAccessProfileInput interface {
	pulumi.Input

	ToAPIServerAccessProfileOutput() APIServerAccessProfileOutput
	ToAPIServerAccessProfileOutputWithContext(context.Context) APIServerAccessProfileOutput
}

// Access profile for the Fleet hub API server.
type APIServerAccessProfileArgs struct {
	// Whether to create the Fleet hub as a private cluster or not.
	EnablePrivateCluster pulumi.BoolPtrInput `pulumi:"enablePrivateCluster"`
	// Whether to enable apiserver vnet integration for the Fleet hub or not.
	EnableVnetIntegration pulumi.BoolPtrInput `pulumi:"enableVnetIntegration"`
	// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (APIServerAccessProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*APIServerAccessProfile)(nil)).Elem()
}

func (i APIServerAccessProfileArgs) ToAPIServerAccessProfileOutput() APIServerAccessProfileOutput {
	return i.ToAPIServerAccessProfileOutputWithContext(context.Background())
}

func (i APIServerAccessProfileArgs) ToAPIServerAccessProfileOutputWithContext(ctx context.Context) APIServerAccessProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIServerAccessProfileOutput)
}

func (i APIServerAccessProfileArgs) ToAPIServerAccessProfilePtrOutput() APIServerAccessProfilePtrOutput {
	return i.ToAPIServerAccessProfilePtrOutputWithContext(context.Background())
}

func (i APIServerAccessProfileArgs) ToAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) APIServerAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIServerAccessProfileOutput).ToAPIServerAccessProfilePtrOutputWithContext(ctx)
}

// APIServerAccessProfilePtrInput is an input type that accepts APIServerAccessProfileArgs, APIServerAccessProfilePtr and APIServerAccessProfilePtrOutput values.
// You can construct a concrete instance of `APIServerAccessProfilePtrInput` via:
//
//	        APIServerAccessProfileArgs{...}
//
//	or:
//
//	        nil
type APIServerAccessProfilePtrInput interface {
	pulumi.Input

	ToAPIServerAccessProfilePtrOutput() APIServerAccessProfilePtrOutput
	ToAPIServerAccessProfilePtrOutputWithContext(context.Context) APIServerAccessProfilePtrOutput
}

type apiserverAccessProfilePtrType APIServerAccessProfileArgs

func APIServerAccessProfilePtr(v *APIServerAccessProfileArgs) APIServerAccessProfilePtrInput {
	return (*apiserverAccessProfilePtrType)(v)
}

func (*apiserverAccessProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**APIServerAccessProfile)(nil)).Elem()
}

func (i *apiserverAccessProfilePtrType) ToAPIServerAccessProfilePtrOutput() APIServerAccessProfilePtrOutput {
	return i.ToAPIServerAccessProfilePtrOutputWithContext(context.Background())
}

func (i *apiserverAccessProfilePtrType) ToAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) APIServerAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(APIServerAccessProfilePtrOutput)
}

// Access profile for the Fleet hub API server.
type APIServerAccessProfileOutput struct{ *pulumi.OutputState }

func (APIServerAccessProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*APIServerAccessProfile)(nil)).Elem()
}

func (o APIServerAccessProfileOutput) ToAPIServerAccessProfileOutput() APIServerAccessProfileOutput {
	return o
}

func (o APIServerAccessProfileOutput) ToAPIServerAccessProfileOutputWithContext(ctx context.Context) APIServerAccessProfileOutput {
	return o
}

func (o APIServerAccessProfileOutput) ToAPIServerAccessProfilePtrOutput() APIServerAccessProfilePtrOutput {
	return o.ToAPIServerAccessProfilePtrOutputWithContext(context.Background())
}

func (o APIServerAccessProfileOutput) ToAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) APIServerAccessProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v APIServerAccessProfile) *APIServerAccessProfile {
		return &v
	}).(APIServerAccessProfilePtrOutput)
}

// Whether to create the Fleet hub as a private cluster or not.
func (o APIServerAccessProfileOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v APIServerAccessProfile) *bool { return v.EnablePrivateCluster }).(pulumi.BoolPtrOutput)
}

// Whether to enable apiserver vnet integration for the Fleet hub or not.
func (o APIServerAccessProfileOutput) EnableVnetIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v APIServerAccessProfile) *bool { return v.EnableVnetIntegration }).(pulumi.BoolPtrOutput)
}

// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
func (o APIServerAccessProfileOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v APIServerAccessProfile) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type APIServerAccessProfilePtrOutput struct{ *pulumi.OutputState }

func (APIServerAccessProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**APIServerAccessProfile)(nil)).Elem()
}

func (o APIServerAccessProfilePtrOutput) ToAPIServerAccessProfilePtrOutput() APIServerAccessProfilePtrOutput {
	return o
}

func (o APIServerAccessProfilePtrOutput) ToAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) APIServerAccessProfilePtrOutput {
	return o
}

func (o APIServerAccessProfilePtrOutput) Elem() APIServerAccessProfileOutput {
	return o.ApplyT(func(v *APIServerAccessProfile) APIServerAccessProfile {
		if v != nil {
			return *v
		}
		var ret APIServerAccessProfile
		return ret
	}).(APIServerAccessProfileOutput)
}

// Whether to create the Fleet hub as a private cluster or not.
func (o APIServerAccessProfilePtrOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *APIServerAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateCluster
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable apiserver vnet integration for the Fleet hub or not.
func (o APIServerAccessProfilePtrOutput) EnableVnetIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *APIServerAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVnetIntegration
	}).(pulumi.BoolPtrOutput)
}

// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
func (o APIServerAccessProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *APIServerAccessProfile) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Access profile for the Fleet hub API server.
type APIServerAccessProfileResponse struct {
	// Whether to create the Fleet hub as a private cluster or not.
	EnablePrivateCluster *bool `pulumi:"enablePrivateCluster"`
	// Whether to enable apiserver vnet integration for the Fleet hub or not.
	EnableVnetIntegration *bool `pulumi:"enableVnetIntegration"`
	// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
	SubnetId *string `pulumi:"subnetId"`
}

// Access profile for the Fleet hub API server.
type APIServerAccessProfileResponseOutput struct{ *pulumi.OutputState }

func (APIServerAccessProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*APIServerAccessProfileResponse)(nil)).Elem()
}

func (o APIServerAccessProfileResponseOutput) ToAPIServerAccessProfileResponseOutput() APIServerAccessProfileResponseOutput {
	return o
}

func (o APIServerAccessProfileResponseOutput) ToAPIServerAccessProfileResponseOutputWithContext(ctx context.Context) APIServerAccessProfileResponseOutput {
	return o
}

// Whether to create the Fleet hub as a private cluster or not.
func (o APIServerAccessProfileResponseOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v APIServerAccessProfileResponse) *bool { return v.EnablePrivateCluster }).(pulumi.BoolPtrOutput)
}

// Whether to enable apiserver vnet integration for the Fleet hub or not.
func (o APIServerAccessProfileResponseOutput) EnableVnetIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v APIServerAccessProfileResponse) *bool { return v.EnableVnetIntegration }).(pulumi.BoolPtrOutput)
}

// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
func (o APIServerAccessProfileResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v APIServerAccessProfileResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type APIServerAccessProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (APIServerAccessProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**APIServerAccessProfileResponse)(nil)).Elem()
}

func (o APIServerAccessProfileResponsePtrOutput) ToAPIServerAccessProfileResponsePtrOutput() APIServerAccessProfileResponsePtrOutput {
	return o
}

func (o APIServerAccessProfileResponsePtrOutput) ToAPIServerAccessProfileResponsePtrOutputWithContext(ctx context.Context) APIServerAccessProfileResponsePtrOutput {
	return o
}

func (o APIServerAccessProfileResponsePtrOutput) Elem() APIServerAccessProfileResponseOutput {
	return o.ApplyT(func(v *APIServerAccessProfileResponse) APIServerAccessProfileResponse {
		if v != nil {
			return *v
		}
		var ret APIServerAccessProfileResponse
		return ret
	}).(APIServerAccessProfileResponseOutput)
}

// Whether to create the Fleet hub as a private cluster or not.
func (o APIServerAccessProfileResponsePtrOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *APIServerAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateCluster
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable apiserver vnet integration for the Fleet hub or not.
func (o APIServerAccessProfileResponsePtrOutput) EnableVnetIntegration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *APIServerAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVnetIntegration
	}).(pulumi.BoolPtrOutput)
}

// The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet.
func (o APIServerAccessProfileResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *APIServerAccessProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlySchedule struct {
	// The date of the month.
	DayOfMonth int `pulumi:"dayOfMonth"`
	// Specifies the number of months between each set of occurrences.
	IntervalMonths int `pulumi:"intervalMonths"`
}

// AbsoluteMonthlyScheduleInput is an input type that accepts AbsoluteMonthlyScheduleArgs and AbsoluteMonthlyScheduleOutput values.
// You can construct a concrete instance of `AbsoluteMonthlyScheduleInput` via:
//
//	AbsoluteMonthlyScheduleArgs{...}
type AbsoluteMonthlyScheduleInput interface {
	pulumi.Input

	ToAbsoluteMonthlyScheduleOutput() AbsoluteMonthlyScheduleOutput
	ToAbsoluteMonthlyScheduleOutputWithContext(context.Context) AbsoluteMonthlyScheduleOutput
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlyScheduleArgs struct {
	// The date of the month.
	DayOfMonth pulumi.IntInput `pulumi:"dayOfMonth"`
	// Specifies the number of months between each set of occurrences.
	IntervalMonths pulumi.IntInput `pulumi:"intervalMonths"`
}

func (AbsoluteMonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteMonthlySchedule)(nil)).Elem()
}

func (i AbsoluteMonthlyScheduleArgs) ToAbsoluteMonthlyScheduleOutput() AbsoluteMonthlyScheduleOutput {
	return i.ToAbsoluteMonthlyScheduleOutputWithContext(context.Background())
}

func (i AbsoluteMonthlyScheduleArgs) ToAbsoluteMonthlyScheduleOutputWithContext(ctx context.Context) AbsoluteMonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbsoluteMonthlyScheduleOutput)
}

func (i AbsoluteMonthlyScheduleArgs) ToAbsoluteMonthlySchedulePtrOutput() AbsoluteMonthlySchedulePtrOutput {
	return i.ToAbsoluteMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i AbsoluteMonthlyScheduleArgs) ToAbsoluteMonthlySchedulePtrOutputWithContext(ctx context.Context) AbsoluteMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbsoluteMonthlyScheduleOutput).ToAbsoluteMonthlySchedulePtrOutputWithContext(ctx)
}

// AbsoluteMonthlySchedulePtrInput is an input type that accepts AbsoluteMonthlyScheduleArgs, AbsoluteMonthlySchedulePtr and AbsoluteMonthlySchedulePtrOutput values.
// You can construct a concrete instance of `AbsoluteMonthlySchedulePtrInput` via:
//
//	        AbsoluteMonthlyScheduleArgs{...}
//
//	or:
//
//	        nil
type AbsoluteMonthlySchedulePtrInput interface {
	pulumi.Input

	ToAbsoluteMonthlySchedulePtrOutput() AbsoluteMonthlySchedulePtrOutput
	ToAbsoluteMonthlySchedulePtrOutputWithContext(context.Context) AbsoluteMonthlySchedulePtrOutput
}

type absoluteMonthlySchedulePtrType AbsoluteMonthlyScheduleArgs

func AbsoluteMonthlySchedulePtr(v *AbsoluteMonthlyScheduleArgs) AbsoluteMonthlySchedulePtrInput {
	return (*absoluteMonthlySchedulePtrType)(v)
}

func (*absoluteMonthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AbsoluteMonthlySchedule)(nil)).Elem()
}

func (i *absoluteMonthlySchedulePtrType) ToAbsoluteMonthlySchedulePtrOutput() AbsoluteMonthlySchedulePtrOutput {
	return i.ToAbsoluteMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *absoluteMonthlySchedulePtrType) ToAbsoluteMonthlySchedulePtrOutputWithContext(ctx context.Context) AbsoluteMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AbsoluteMonthlySchedulePtrOutput)
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlyScheduleOutput struct{ *pulumi.OutputState }

func (AbsoluteMonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteMonthlySchedule)(nil)).Elem()
}

func (o AbsoluteMonthlyScheduleOutput) ToAbsoluteMonthlyScheduleOutput() AbsoluteMonthlyScheduleOutput {
	return o
}

func (o AbsoluteMonthlyScheduleOutput) ToAbsoluteMonthlyScheduleOutputWithContext(ctx context.Context) AbsoluteMonthlyScheduleOutput {
	return o
}

func (o AbsoluteMonthlyScheduleOutput) ToAbsoluteMonthlySchedulePtrOutput() AbsoluteMonthlySchedulePtrOutput {
	return o.ToAbsoluteMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o AbsoluteMonthlyScheduleOutput) ToAbsoluteMonthlySchedulePtrOutputWithContext(ctx context.Context) AbsoluteMonthlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AbsoluteMonthlySchedule) *AbsoluteMonthlySchedule {
		return &v
	}).(AbsoluteMonthlySchedulePtrOutput)
}

// The date of the month.
func (o AbsoluteMonthlyScheduleOutput) DayOfMonth() pulumi.IntOutput {
	return o.ApplyT(func(v AbsoluteMonthlySchedule) int { return v.DayOfMonth }).(pulumi.IntOutput)
}

// Specifies the number of months between each set of occurrences.
func (o AbsoluteMonthlyScheduleOutput) IntervalMonths() pulumi.IntOutput {
	return o.ApplyT(func(v AbsoluteMonthlySchedule) int { return v.IntervalMonths }).(pulumi.IntOutput)
}

type AbsoluteMonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (AbsoluteMonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AbsoluteMonthlySchedule)(nil)).Elem()
}

func (o AbsoluteMonthlySchedulePtrOutput) ToAbsoluteMonthlySchedulePtrOutput() AbsoluteMonthlySchedulePtrOutput {
	return o
}

func (o AbsoluteMonthlySchedulePtrOutput) ToAbsoluteMonthlySchedulePtrOutputWithContext(ctx context.Context) AbsoluteMonthlySchedulePtrOutput {
	return o
}

func (o AbsoluteMonthlySchedulePtrOutput) Elem() AbsoluteMonthlyScheduleOutput {
	return o.ApplyT(func(v *AbsoluteMonthlySchedule) AbsoluteMonthlySchedule {
		if v != nil {
			return *v
		}
		var ret AbsoluteMonthlySchedule
		return ret
	}).(AbsoluteMonthlyScheduleOutput)
}

// The date of the month.
func (o AbsoluteMonthlySchedulePtrOutput) DayOfMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AbsoluteMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.DayOfMonth
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of months between each set of occurrences.
func (o AbsoluteMonthlySchedulePtrOutput) IntervalMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AbsoluteMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalMonths
	}).(pulumi.IntPtrOutput)
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlyScheduleResponse struct {
	// The date of the month.
	DayOfMonth int `pulumi:"dayOfMonth"`
	// Specifies the number of months between each set of occurrences.
	IntervalMonths int `pulumi:"intervalMonths"`
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
type AbsoluteMonthlyScheduleResponseOutput struct{ *pulumi.OutputState }

func (AbsoluteMonthlyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbsoluteMonthlyScheduleResponse)(nil)).Elem()
}

func (o AbsoluteMonthlyScheduleResponseOutput) ToAbsoluteMonthlyScheduleResponseOutput() AbsoluteMonthlyScheduleResponseOutput {
	return o
}

func (o AbsoluteMonthlyScheduleResponseOutput) ToAbsoluteMonthlyScheduleResponseOutputWithContext(ctx context.Context) AbsoluteMonthlyScheduleResponseOutput {
	return o
}

// The date of the month.
func (o AbsoluteMonthlyScheduleResponseOutput) DayOfMonth() pulumi.IntOutput {
	return o.ApplyT(func(v AbsoluteMonthlyScheduleResponse) int { return v.DayOfMonth }).(pulumi.IntOutput)
}

// Specifies the number of months between each set of occurrences.
func (o AbsoluteMonthlyScheduleResponseOutput) IntervalMonths() pulumi.IntOutput {
	return o.ApplyT(func(v AbsoluteMonthlyScheduleResponse) int { return v.IntervalMonths }).(pulumi.IntOutput)
}

type AbsoluteMonthlyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (AbsoluteMonthlyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AbsoluteMonthlyScheduleResponse)(nil)).Elem()
}

func (o AbsoluteMonthlyScheduleResponsePtrOutput) ToAbsoluteMonthlyScheduleResponsePtrOutput() AbsoluteMonthlyScheduleResponsePtrOutput {
	return o
}

func (o AbsoluteMonthlyScheduleResponsePtrOutput) ToAbsoluteMonthlyScheduleResponsePtrOutputWithContext(ctx context.Context) AbsoluteMonthlyScheduleResponsePtrOutput {
	return o
}

func (o AbsoluteMonthlyScheduleResponsePtrOutput) Elem() AbsoluteMonthlyScheduleResponseOutput {
	return o.ApplyT(func(v *AbsoluteMonthlyScheduleResponse) AbsoluteMonthlyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret AbsoluteMonthlyScheduleResponse
		return ret
	}).(AbsoluteMonthlyScheduleResponseOutput)
}

// The date of the month.
func (o AbsoluteMonthlyScheduleResponsePtrOutput) DayOfMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AbsoluteMonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DayOfMonth
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of months between each set of occurrences.
func (o AbsoluteMonthlyScheduleResponsePtrOutput) IntervalMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AbsoluteMonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalMonths
	}).(pulumi.IntPtrOutput)
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
type AdvancedNetworking struct {
	// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
	Enabled *bool `pulumi:"enabled"`
	// Observability profile to enable advanced network metrics and flow logs with historical contexts.
	Observability *AdvancedNetworkingObservability `pulumi:"observability"`
	// Security profile to enable security features on cilium based cluster.
	Security *AdvancedNetworkingSecurity `pulumi:"security"`
}

// AdvancedNetworkingInput is an input type that accepts AdvancedNetworkingArgs and AdvancedNetworkingOutput values.
// You can construct a concrete instance of `AdvancedNetworkingInput` via:
//
//	AdvancedNetworkingArgs{...}
type AdvancedNetworkingInput interface {
	pulumi.Input

	ToAdvancedNetworkingOutput() AdvancedNetworkingOutput
	ToAdvancedNetworkingOutputWithContext(context.Context) AdvancedNetworkingOutput
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
type AdvancedNetworkingArgs struct {
	// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Observability profile to enable advanced network metrics and flow logs with historical contexts.
	Observability AdvancedNetworkingObservabilityPtrInput `pulumi:"observability"`
	// Security profile to enable security features on cilium based cluster.
	Security AdvancedNetworkingSecurityPtrInput `pulumi:"security"`
}

func (AdvancedNetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworking)(nil)).Elem()
}

func (i AdvancedNetworkingArgs) ToAdvancedNetworkingOutput() AdvancedNetworkingOutput {
	return i.ToAdvancedNetworkingOutputWithContext(context.Background())
}

func (i AdvancedNetworkingArgs) ToAdvancedNetworkingOutputWithContext(ctx context.Context) AdvancedNetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingOutput)
}

func (i AdvancedNetworkingArgs) ToAdvancedNetworkingPtrOutput() AdvancedNetworkingPtrOutput {
	return i.ToAdvancedNetworkingPtrOutputWithContext(context.Background())
}

func (i AdvancedNetworkingArgs) ToAdvancedNetworkingPtrOutputWithContext(ctx context.Context) AdvancedNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingOutput).ToAdvancedNetworkingPtrOutputWithContext(ctx)
}

// AdvancedNetworkingPtrInput is an input type that accepts AdvancedNetworkingArgs, AdvancedNetworkingPtr and AdvancedNetworkingPtrOutput values.
// You can construct a concrete instance of `AdvancedNetworkingPtrInput` via:
//
//	        AdvancedNetworkingArgs{...}
//
//	or:
//
//	        nil
type AdvancedNetworkingPtrInput interface {
	pulumi.Input

	ToAdvancedNetworkingPtrOutput() AdvancedNetworkingPtrOutput
	ToAdvancedNetworkingPtrOutputWithContext(context.Context) AdvancedNetworkingPtrOutput
}

type advancedNetworkingPtrType AdvancedNetworkingArgs

func AdvancedNetworkingPtr(v *AdvancedNetworkingArgs) AdvancedNetworkingPtrInput {
	return (*advancedNetworkingPtrType)(v)
}

func (*advancedNetworkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworking)(nil)).Elem()
}

func (i *advancedNetworkingPtrType) ToAdvancedNetworkingPtrOutput() AdvancedNetworkingPtrOutput {
	return i.ToAdvancedNetworkingPtrOutputWithContext(context.Background())
}

func (i *advancedNetworkingPtrType) ToAdvancedNetworkingPtrOutputWithContext(ctx context.Context) AdvancedNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingPtrOutput)
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
type AdvancedNetworkingOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworking)(nil)).Elem()
}

func (o AdvancedNetworkingOutput) ToAdvancedNetworkingOutput() AdvancedNetworkingOutput {
	return o
}

func (o AdvancedNetworkingOutput) ToAdvancedNetworkingOutputWithContext(ctx context.Context) AdvancedNetworkingOutput {
	return o
}

func (o AdvancedNetworkingOutput) ToAdvancedNetworkingPtrOutput() AdvancedNetworkingPtrOutput {
	return o.ToAdvancedNetworkingPtrOutputWithContext(context.Background())
}

func (o AdvancedNetworkingOutput) ToAdvancedNetworkingPtrOutputWithContext(ctx context.Context) AdvancedNetworkingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvancedNetworking) *AdvancedNetworking {
		return &v
	}).(AdvancedNetworkingPtrOutput)
}

// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
func (o AdvancedNetworkingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedNetworking) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
func (o AdvancedNetworkingOutput) Observability() AdvancedNetworkingObservabilityPtrOutput {
	return o.ApplyT(func(v AdvancedNetworking) *AdvancedNetworkingObservability { return v.Observability }).(AdvancedNetworkingObservabilityPtrOutput)
}

// Security profile to enable security features on cilium based cluster.
func (o AdvancedNetworkingOutput) Security() AdvancedNetworkingSecurityPtrOutput {
	return o.ApplyT(func(v AdvancedNetworking) *AdvancedNetworkingSecurity { return v.Security }).(AdvancedNetworkingSecurityPtrOutput)
}

type AdvancedNetworkingPtrOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworking)(nil)).Elem()
}

func (o AdvancedNetworkingPtrOutput) ToAdvancedNetworkingPtrOutput() AdvancedNetworkingPtrOutput {
	return o
}

func (o AdvancedNetworkingPtrOutput) ToAdvancedNetworkingPtrOutputWithContext(ctx context.Context) AdvancedNetworkingPtrOutput {
	return o
}

func (o AdvancedNetworkingPtrOutput) Elem() AdvancedNetworkingOutput {
	return o.ApplyT(func(v *AdvancedNetworking) AdvancedNetworking {
		if v != nil {
			return *v
		}
		var ret AdvancedNetworking
		return ret
	}).(AdvancedNetworkingOutput)
}

// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
func (o AdvancedNetworkingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworking) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
func (o AdvancedNetworkingPtrOutput) Observability() AdvancedNetworkingObservabilityPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworking) *AdvancedNetworkingObservability {
		if v == nil {
			return nil
		}
		return v.Observability
	}).(AdvancedNetworkingObservabilityPtrOutput)
}

// Security profile to enable security features on cilium based cluster.
func (o AdvancedNetworkingPtrOutput) Security() AdvancedNetworkingSecurityPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworking) *AdvancedNetworkingSecurity {
		if v == nil {
			return nil
		}
		return v.Security
	}).(AdvancedNetworkingSecurityPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
type AdvancedNetworkingObservability struct {
	// Indicates the enablement of Advanced Networking observability functionalities on clusters.
	Enabled *bool `pulumi:"enabled"`
}

// AdvancedNetworkingObservabilityInput is an input type that accepts AdvancedNetworkingObservabilityArgs and AdvancedNetworkingObservabilityOutput values.
// You can construct a concrete instance of `AdvancedNetworkingObservabilityInput` via:
//
//	AdvancedNetworkingObservabilityArgs{...}
type AdvancedNetworkingObservabilityInput interface {
	pulumi.Input

	ToAdvancedNetworkingObservabilityOutput() AdvancedNetworkingObservabilityOutput
	ToAdvancedNetworkingObservabilityOutputWithContext(context.Context) AdvancedNetworkingObservabilityOutput
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
type AdvancedNetworkingObservabilityArgs struct {
	// Indicates the enablement of Advanced Networking observability functionalities on clusters.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AdvancedNetworkingObservabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingObservability)(nil)).Elem()
}

func (i AdvancedNetworkingObservabilityArgs) ToAdvancedNetworkingObservabilityOutput() AdvancedNetworkingObservabilityOutput {
	return i.ToAdvancedNetworkingObservabilityOutputWithContext(context.Background())
}

func (i AdvancedNetworkingObservabilityArgs) ToAdvancedNetworkingObservabilityOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingObservabilityOutput)
}

func (i AdvancedNetworkingObservabilityArgs) ToAdvancedNetworkingObservabilityPtrOutput() AdvancedNetworkingObservabilityPtrOutput {
	return i.ToAdvancedNetworkingObservabilityPtrOutputWithContext(context.Background())
}

func (i AdvancedNetworkingObservabilityArgs) ToAdvancedNetworkingObservabilityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingObservabilityOutput).ToAdvancedNetworkingObservabilityPtrOutputWithContext(ctx)
}

// AdvancedNetworkingObservabilityPtrInput is an input type that accepts AdvancedNetworkingObservabilityArgs, AdvancedNetworkingObservabilityPtr and AdvancedNetworkingObservabilityPtrOutput values.
// You can construct a concrete instance of `AdvancedNetworkingObservabilityPtrInput` via:
//
//	        AdvancedNetworkingObservabilityArgs{...}
//
//	or:
//
//	        nil
type AdvancedNetworkingObservabilityPtrInput interface {
	pulumi.Input

	ToAdvancedNetworkingObservabilityPtrOutput() AdvancedNetworkingObservabilityPtrOutput
	ToAdvancedNetworkingObservabilityPtrOutputWithContext(context.Context) AdvancedNetworkingObservabilityPtrOutput
}

type advancedNetworkingObservabilityPtrType AdvancedNetworkingObservabilityArgs

func AdvancedNetworkingObservabilityPtr(v *AdvancedNetworkingObservabilityArgs) AdvancedNetworkingObservabilityPtrInput {
	return (*advancedNetworkingObservabilityPtrType)(v)
}

func (*advancedNetworkingObservabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingObservability)(nil)).Elem()
}

func (i *advancedNetworkingObservabilityPtrType) ToAdvancedNetworkingObservabilityPtrOutput() AdvancedNetworkingObservabilityPtrOutput {
	return i.ToAdvancedNetworkingObservabilityPtrOutputWithContext(context.Background())
}

func (i *advancedNetworkingObservabilityPtrType) ToAdvancedNetworkingObservabilityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingObservabilityPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
type AdvancedNetworkingObservabilityOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingObservabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingObservability)(nil)).Elem()
}

func (o AdvancedNetworkingObservabilityOutput) ToAdvancedNetworkingObservabilityOutput() AdvancedNetworkingObservabilityOutput {
	return o
}

func (o AdvancedNetworkingObservabilityOutput) ToAdvancedNetworkingObservabilityOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityOutput {
	return o
}

func (o AdvancedNetworkingObservabilityOutput) ToAdvancedNetworkingObservabilityPtrOutput() AdvancedNetworkingObservabilityPtrOutput {
	return o.ToAdvancedNetworkingObservabilityPtrOutputWithContext(context.Background())
}

func (o AdvancedNetworkingObservabilityOutput) ToAdvancedNetworkingObservabilityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvancedNetworkingObservability) *AdvancedNetworkingObservability {
		return &v
	}).(AdvancedNetworkingObservabilityPtrOutput)
}

// Indicates the enablement of Advanced Networking observability functionalities on clusters.
func (o AdvancedNetworkingObservabilityOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingObservability) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AdvancedNetworkingObservabilityPtrOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingObservabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingObservability)(nil)).Elem()
}

func (o AdvancedNetworkingObservabilityPtrOutput) ToAdvancedNetworkingObservabilityPtrOutput() AdvancedNetworkingObservabilityPtrOutput {
	return o
}

func (o AdvancedNetworkingObservabilityPtrOutput) ToAdvancedNetworkingObservabilityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityPtrOutput {
	return o
}

func (o AdvancedNetworkingObservabilityPtrOutput) Elem() AdvancedNetworkingObservabilityOutput {
	return o.ApplyT(func(v *AdvancedNetworkingObservability) AdvancedNetworkingObservability {
		if v != nil {
			return *v
		}
		var ret AdvancedNetworkingObservability
		return ret
	}).(AdvancedNetworkingObservabilityOutput)
}

// Indicates the enablement of Advanced Networking observability functionalities on clusters.
func (o AdvancedNetworkingObservabilityPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingObservability) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
type AdvancedNetworkingObservabilityResponse struct {
	// Indicates the enablement of Advanced Networking observability functionalities on clusters.
	Enabled *bool `pulumi:"enabled"`
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
type AdvancedNetworkingObservabilityResponseOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingObservabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingObservabilityResponse)(nil)).Elem()
}

func (o AdvancedNetworkingObservabilityResponseOutput) ToAdvancedNetworkingObservabilityResponseOutput() AdvancedNetworkingObservabilityResponseOutput {
	return o
}

func (o AdvancedNetworkingObservabilityResponseOutput) ToAdvancedNetworkingObservabilityResponseOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityResponseOutput {
	return o
}

// Indicates the enablement of Advanced Networking observability functionalities on clusters.
func (o AdvancedNetworkingObservabilityResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingObservabilityResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AdvancedNetworkingObservabilityResponsePtrOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingObservabilityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingObservabilityResponse)(nil)).Elem()
}

func (o AdvancedNetworkingObservabilityResponsePtrOutput) ToAdvancedNetworkingObservabilityResponsePtrOutput() AdvancedNetworkingObservabilityResponsePtrOutput {
	return o
}

func (o AdvancedNetworkingObservabilityResponsePtrOutput) ToAdvancedNetworkingObservabilityResponsePtrOutputWithContext(ctx context.Context) AdvancedNetworkingObservabilityResponsePtrOutput {
	return o
}

func (o AdvancedNetworkingObservabilityResponsePtrOutput) Elem() AdvancedNetworkingObservabilityResponseOutput {
	return o.ApplyT(func(v *AdvancedNetworkingObservabilityResponse) AdvancedNetworkingObservabilityResponse {
		if v != nil {
			return *v
		}
		var ret AdvancedNetworkingObservabilityResponse
		return ret
	}).(AdvancedNetworkingObservabilityResponseOutput)
}

// Indicates the enablement of Advanced Networking observability functionalities on clusters.
func (o AdvancedNetworkingObservabilityResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingObservabilityResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
type AdvancedNetworkingResponse struct {
	// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
	Enabled *bool `pulumi:"enabled"`
	// Observability profile to enable advanced network metrics and flow logs with historical contexts.
	Observability *AdvancedNetworkingObservabilityResponse `pulumi:"observability"`
	// Security profile to enable security features on cilium based cluster.
	Security *AdvancedNetworkingSecurityResponse `pulumi:"security"`
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
type AdvancedNetworkingResponseOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingResponse)(nil)).Elem()
}

func (o AdvancedNetworkingResponseOutput) ToAdvancedNetworkingResponseOutput() AdvancedNetworkingResponseOutput {
	return o
}

func (o AdvancedNetworkingResponseOutput) ToAdvancedNetworkingResponseOutputWithContext(ctx context.Context) AdvancedNetworkingResponseOutput {
	return o
}

// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
func (o AdvancedNetworkingResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
func (o AdvancedNetworkingResponseOutput) Observability() AdvancedNetworkingObservabilityResponsePtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingResponse) *AdvancedNetworkingObservabilityResponse { return v.Observability }).(AdvancedNetworkingObservabilityResponsePtrOutput)
}

// Security profile to enable security features on cilium based cluster.
func (o AdvancedNetworkingResponseOutput) Security() AdvancedNetworkingSecurityResponsePtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingResponse) *AdvancedNetworkingSecurityResponse { return v.Security }).(AdvancedNetworkingSecurityResponsePtrOutput)
}

type AdvancedNetworkingResponsePtrOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingResponse)(nil)).Elem()
}

func (o AdvancedNetworkingResponsePtrOutput) ToAdvancedNetworkingResponsePtrOutput() AdvancedNetworkingResponsePtrOutput {
	return o
}

func (o AdvancedNetworkingResponsePtrOutput) ToAdvancedNetworkingResponsePtrOutputWithContext(ctx context.Context) AdvancedNetworkingResponsePtrOutput {
	return o
}

func (o AdvancedNetworkingResponsePtrOutput) Elem() AdvancedNetworkingResponseOutput {
	return o.ApplyT(func(v *AdvancedNetworkingResponse) AdvancedNetworkingResponse {
		if v != nil {
			return *v
		}
		var ret AdvancedNetworkingResponse
		return ret
	}).(AdvancedNetworkingResponseOutput)
}

// Indicates the enablement of Advanced Networking functionalities of observability and security on AKS clusters. When this is set to true, all observability and security features will be set to enabled unless explicitly disabled. If not specified, the default is false.
func (o AdvancedNetworkingResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Observability profile to enable advanced network metrics and flow logs with historical contexts.
func (o AdvancedNetworkingResponsePtrOutput) Observability() AdvancedNetworkingObservabilityResponsePtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingResponse) *AdvancedNetworkingObservabilityResponse {
		if v == nil {
			return nil
		}
		return v.Observability
	}).(AdvancedNetworkingObservabilityResponsePtrOutput)
}

// Security profile to enable security features on cilium based cluster.
func (o AdvancedNetworkingResponsePtrOutput) Security() AdvancedNetworkingSecurityResponsePtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingResponse) *AdvancedNetworkingSecurityResponse {
		if v == nil {
			return nil
		}
		return v.Security
	}).(AdvancedNetworkingSecurityResponsePtrOutput)
}

// Security profile to enable security features on cilium based cluster.
type AdvancedNetworkingSecurity struct {
	// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
	Enabled *bool `pulumi:"enabled"`
}

// AdvancedNetworkingSecurityInput is an input type that accepts AdvancedNetworkingSecurityArgs and AdvancedNetworkingSecurityOutput values.
// You can construct a concrete instance of `AdvancedNetworkingSecurityInput` via:
//
//	AdvancedNetworkingSecurityArgs{...}
type AdvancedNetworkingSecurityInput interface {
	pulumi.Input

	ToAdvancedNetworkingSecurityOutput() AdvancedNetworkingSecurityOutput
	ToAdvancedNetworkingSecurityOutputWithContext(context.Context) AdvancedNetworkingSecurityOutput
}

// Security profile to enable security features on cilium based cluster.
type AdvancedNetworkingSecurityArgs struct {
	// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AdvancedNetworkingSecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingSecurity)(nil)).Elem()
}

func (i AdvancedNetworkingSecurityArgs) ToAdvancedNetworkingSecurityOutput() AdvancedNetworkingSecurityOutput {
	return i.ToAdvancedNetworkingSecurityOutputWithContext(context.Background())
}

func (i AdvancedNetworkingSecurityArgs) ToAdvancedNetworkingSecurityOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingSecurityOutput)
}

func (i AdvancedNetworkingSecurityArgs) ToAdvancedNetworkingSecurityPtrOutput() AdvancedNetworkingSecurityPtrOutput {
	return i.ToAdvancedNetworkingSecurityPtrOutputWithContext(context.Background())
}

func (i AdvancedNetworkingSecurityArgs) ToAdvancedNetworkingSecurityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingSecurityOutput).ToAdvancedNetworkingSecurityPtrOutputWithContext(ctx)
}

// AdvancedNetworkingSecurityPtrInput is an input type that accepts AdvancedNetworkingSecurityArgs, AdvancedNetworkingSecurityPtr and AdvancedNetworkingSecurityPtrOutput values.
// You can construct a concrete instance of `AdvancedNetworkingSecurityPtrInput` via:
//
//	        AdvancedNetworkingSecurityArgs{...}
//
//	or:
//
//	        nil
type AdvancedNetworkingSecurityPtrInput interface {
	pulumi.Input

	ToAdvancedNetworkingSecurityPtrOutput() AdvancedNetworkingSecurityPtrOutput
	ToAdvancedNetworkingSecurityPtrOutputWithContext(context.Context) AdvancedNetworkingSecurityPtrOutput
}

type advancedNetworkingSecurityPtrType AdvancedNetworkingSecurityArgs

func AdvancedNetworkingSecurityPtr(v *AdvancedNetworkingSecurityArgs) AdvancedNetworkingSecurityPtrInput {
	return (*advancedNetworkingSecurityPtrType)(v)
}

func (*advancedNetworkingSecurityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingSecurity)(nil)).Elem()
}

func (i *advancedNetworkingSecurityPtrType) ToAdvancedNetworkingSecurityPtrOutput() AdvancedNetworkingSecurityPtrOutput {
	return i.ToAdvancedNetworkingSecurityPtrOutputWithContext(context.Background())
}

func (i *advancedNetworkingSecurityPtrType) ToAdvancedNetworkingSecurityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedNetworkingSecurityPtrOutput)
}

// Security profile to enable security features on cilium based cluster.
type AdvancedNetworkingSecurityOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingSecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingSecurity)(nil)).Elem()
}

func (o AdvancedNetworkingSecurityOutput) ToAdvancedNetworkingSecurityOutput() AdvancedNetworkingSecurityOutput {
	return o
}

func (o AdvancedNetworkingSecurityOutput) ToAdvancedNetworkingSecurityOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityOutput {
	return o
}

func (o AdvancedNetworkingSecurityOutput) ToAdvancedNetworkingSecurityPtrOutput() AdvancedNetworkingSecurityPtrOutput {
	return o.ToAdvancedNetworkingSecurityPtrOutputWithContext(context.Background())
}

func (o AdvancedNetworkingSecurityOutput) ToAdvancedNetworkingSecurityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvancedNetworkingSecurity) *AdvancedNetworkingSecurity {
		return &v
	}).(AdvancedNetworkingSecurityPtrOutput)
}

// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
func (o AdvancedNetworkingSecurityOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingSecurity) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AdvancedNetworkingSecurityPtrOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingSecurityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingSecurity)(nil)).Elem()
}

func (o AdvancedNetworkingSecurityPtrOutput) ToAdvancedNetworkingSecurityPtrOutput() AdvancedNetworkingSecurityPtrOutput {
	return o
}

func (o AdvancedNetworkingSecurityPtrOutput) ToAdvancedNetworkingSecurityPtrOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityPtrOutput {
	return o
}

func (o AdvancedNetworkingSecurityPtrOutput) Elem() AdvancedNetworkingSecurityOutput {
	return o.ApplyT(func(v *AdvancedNetworkingSecurity) AdvancedNetworkingSecurity {
		if v != nil {
			return *v
		}
		var ret AdvancedNetworkingSecurity
		return ret
	}).(AdvancedNetworkingSecurityOutput)
}

// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
func (o AdvancedNetworkingSecurityPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingSecurity) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Security profile to enable security features on cilium based cluster.
type AdvancedNetworkingSecurityResponse struct {
	// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
	Enabled *bool `pulumi:"enabled"`
}

// Security profile to enable security features on cilium based cluster.
type AdvancedNetworkingSecurityResponseOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingSecurityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedNetworkingSecurityResponse)(nil)).Elem()
}

func (o AdvancedNetworkingSecurityResponseOutput) ToAdvancedNetworkingSecurityResponseOutput() AdvancedNetworkingSecurityResponseOutput {
	return o
}

func (o AdvancedNetworkingSecurityResponseOutput) ToAdvancedNetworkingSecurityResponseOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityResponseOutput {
	return o
}

// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
func (o AdvancedNetworkingSecurityResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedNetworkingSecurityResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AdvancedNetworkingSecurityResponsePtrOutput struct{ *pulumi.OutputState }

func (AdvancedNetworkingSecurityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedNetworkingSecurityResponse)(nil)).Elem()
}

func (o AdvancedNetworkingSecurityResponsePtrOutput) ToAdvancedNetworkingSecurityResponsePtrOutput() AdvancedNetworkingSecurityResponsePtrOutput {
	return o
}

func (o AdvancedNetworkingSecurityResponsePtrOutput) ToAdvancedNetworkingSecurityResponsePtrOutputWithContext(ctx context.Context) AdvancedNetworkingSecurityResponsePtrOutput {
	return o
}

func (o AdvancedNetworkingSecurityResponsePtrOutput) Elem() AdvancedNetworkingSecurityResponseOutput {
	return o.ApplyT(func(v *AdvancedNetworkingSecurityResponse) AdvancedNetworkingSecurityResponse {
		if v != nil {
			return *v
		}
		var ret AdvancedNetworkingSecurityResponse
		return ret
	}).(AdvancedNetworkingSecurityResponseOutput)
}

// This feature allows user to configure network policy based on DNS (FQDN) names. It can be enabled only on cilium based clusters. If not specified, the default is false.
func (o AdvancedNetworkingSecurityResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedNetworkingSecurityResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Network settings of an agent pool.
type AgentPoolNetworkProfile struct {
	// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
	AllowedHostPorts []PortRange `pulumi:"allowedHostPorts"`
	// The IDs of the application security groups which agent pool will associate when created.
	ApplicationSecurityGroups []string `pulumi:"applicationSecurityGroups"`
	// IPTags of instance-level public IPs.
	NodePublicIPTags []IPTag `pulumi:"nodePublicIPTags"`
}

// AgentPoolNetworkProfileInput is an input type that accepts AgentPoolNetworkProfileArgs and AgentPoolNetworkProfileOutput values.
// You can construct a concrete instance of `AgentPoolNetworkProfileInput` via:
//
//	AgentPoolNetworkProfileArgs{...}
type AgentPoolNetworkProfileInput interface {
	pulumi.Input

	ToAgentPoolNetworkProfileOutput() AgentPoolNetworkProfileOutput
	ToAgentPoolNetworkProfileOutputWithContext(context.Context) AgentPoolNetworkProfileOutput
}

// Network settings of an agent pool.
type AgentPoolNetworkProfileArgs struct {
	// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
	AllowedHostPorts PortRangeArrayInput `pulumi:"allowedHostPorts"`
	// The IDs of the application security groups which agent pool will associate when created.
	ApplicationSecurityGroups pulumi.StringArrayInput `pulumi:"applicationSecurityGroups"`
	// IPTags of instance-level public IPs.
	NodePublicIPTags IPTagArrayInput `pulumi:"nodePublicIPTags"`
}

func (AgentPoolNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolNetworkProfile)(nil)).Elem()
}

func (i AgentPoolNetworkProfileArgs) ToAgentPoolNetworkProfileOutput() AgentPoolNetworkProfileOutput {
	return i.ToAgentPoolNetworkProfileOutputWithContext(context.Background())
}

func (i AgentPoolNetworkProfileArgs) ToAgentPoolNetworkProfileOutputWithContext(ctx context.Context) AgentPoolNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolNetworkProfileOutput)
}

func (i AgentPoolNetworkProfileArgs) ToAgentPoolNetworkProfilePtrOutput() AgentPoolNetworkProfilePtrOutput {
	return i.ToAgentPoolNetworkProfilePtrOutputWithContext(context.Background())
}

func (i AgentPoolNetworkProfileArgs) ToAgentPoolNetworkProfilePtrOutputWithContext(ctx context.Context) AgentPoolNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolNetworkProfileOutput).ToAgentPoolNetworkProfilePtrOutputWithContext(ctx)
}

// AgentPoolNetworkProfilePtrInput is an input type that accepts AgentPoolNetworkProfileArgs, AgentPoolNetworkProfilePtr and AgentPoolNetworkProfilePtrOutput values.
// You can construct a concrete instance of `AgentPoolNetworkProfilePtrInput` via:
//
//	        AgentPoolNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type AgentPoolNetworkProfilePtrInput interface {
	pulumi.Input

	ToAgentPoolNetworkProfilePtrOutput() AgentPoolNetworkProfilePtrOutput
	ToAgentPoolNetworkProfilePtrOutputWithContext(context.Context) AgentPoolNetworkProfilePtrOutput
}

type agentPoolNetworkProfilePtrType AgentPoolNetworkProfileArgs

func AgentPoolNetworkProfilePtr(v *AgentPoolNetworkProfileArgs) AgentPoolNetworkProfilePtrInput {
	return (*agentPoolNetworkProfilePtrType)(v)
}

func (*agentPoolNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolNetworkProfile)(nil)).Elem()
}

func (i *agentPoolNetworkProfilePtrType) ToAgentPoolNetworkProfilePtrOutput() AgentPoolNetworkProfilePtrOutput {
	return i.ToAgentPoolNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *agentPoolNetworkProfilePtrType) ToAgentPoolNetworkProfilePtrOutputWithContext(ctx context.Context) AgentPoolNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolNetworkProfilePtrOutput)
}

// Network settings of an agent pool.
type AgentPoolNetworkProfileOutput struct{ *pulumi.OutputState }

func (AgentPoolNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolNetworkProfile)(nil)).Elem()
}

func (o AgentPoolNetworkProfileOutput) ToAgentPoolNetworkProfileOutput() AgentPoolNetworkProfileOutput {
	return o
}

func (o AgentPoolNetworkProfileOutput) ToAgentPoolNetworkProfileOutputWithContext(ctx context.Context) AgentPoolNetworkProfileOutput {
	return o
}

func (o AgentPoolNetworkProfileOutput) ToAgentPoolNetworkProfilePtrOutput() AgentPoolNetworkProfilePtrOutput {
	return o.ToAgentPoolNetworkProfilePtrOutputWithContext(context.Background())
}

func (o AgentPoolNetworkProfileOutput) ToAgentPoolNetworkProfilePtrOutputWithContext(ctx context.Context) AgentPoolNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolNetworkProfile) *AgentPoolNetworkProfile {
		return &v
	}).(AgentPoolNetworkProfilePtrOutput)
}

// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
func (o AgentPoolNetworkProfileOutput) AllowedHostPorts() PortRangeArrayOutput {
	return o.ApplyT(func(v AgentPoolNetworkProfile) []PortRange { return v.AllowedHostPorts }).(PortRangeArrayOutput)
}

// The IDs of the application security groups which agent pool will associate when created.
func (o AgentPoolNetworkProfileOutput) ApplicationSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AgentPoolNetworkProfile) []string { return v.ApplicationSecurityGroups }).(pulumi.StringArrayOutput)
}

// IPTags of instance-level public IPs.
func (o AgentPoolNetworkProfileOutput) NodePublicIPTags() IPTagArrayOutput {
	return o.ApplyT(func(v AgentPoolNetworkProfile) []IPTag { return v.NodePublicIPTags }).(IPTagArrayOutput)
}

type AgentPoolNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolNetworkProfile)(nil)).Elem()
}

func (o AgentPoolNetworkProfilePtrOutput) ToAgentPoolNetworkProfilePtrOutput() AgentPoolNetworkProfilePtrOutput {
	return o
}

func (o AgentPoolNetworkProfilePtrOutput) ToAgentPoolNetworkProfilePtrOutputWithContext(ctx context.Context) AgentPoolNetworkProfilePtrOutput {
	return o
}

func (o AgentPoolNetworkProfilePtrOutput) Elem() AgentPoolNetworkProfileOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfile) AgentPoolNetworkProfile {
		if v != nil {
			return *v
		}
		var ret AgentPoolNetworkProfile
		return ret
	}).(AgentPoolNetworkProfileOutput)
}

// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
func (o AgentPoolNetworkProfilePtrOutput) AllowedHostPorts() PortRangeArrayOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfile) []PortRange {
		if v == nil {
			return nil
		}
		return v.AllowedHostPorts
	}).(PortRangeArrayOutput)
}

// The IDs of the application security groups which agent pool will associate when created.
func (o AgentPoolNetworkProfilePtrOutput) ApplicationSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ApplicationSecurityGroups
	}).(pulumi.StringArrayOutput)
}

// IPTags of instance-level public IPs.
func (o AgentPoolNetworkProfilePtrOutput) NodePublicIPTags() IPTagArrayOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfile) []IPTag {
		if v == nil {
			return nil
		}
		return v.NodePublicIPTags
	}).(IPTagArrayOutput)
}

// Network settings of an agent pool.
type AgentPoolNetworkProfileResponse struct {
	// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
	AllowedHostPorts []PortRangeResponse `pulumi:"allowedHostPorts"`
	// The IDs of the application security groups which agent pool will associate when created.
	ApplicationSecurityGroups []string `pulumi:"applicationSecurityGroups"`
	// IPTags of instance-level public IPs.
	NodePublicIPTags []IPTagResponse `pulumi:"nodePublicIPTags"`
}

// Network settings of an agent pool.
type AgentPoolNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (AgentPoolNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolNetworkProfileResponse)(nil)).Elem()
}

func (o AgentPoolNetworkProfileResponseOutput) ToAgentPoolNetworkProfileResponseOutput() AgentPoolNetworkProfileResponseOutput {
	return o
}

func (o AgentPoolNetworkProfileResponseOutput) ToAgentPoolNetworkProfileResponseOutputWithContext(ctx context.Context) AgentPoolNetworkProfileResponseOutput {
	return o
}

// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
func (o AgentPoolNetworkProfileResponseOutput) AllowedHostPorts() PortRangeResponseArrayOutput {
	return o.ApplyT(func(v AgentPoolNetworkProfileResponse) []PortRangeResponse { return v.AllowedHostPorts }).(PortRangeResponseArrayOutput)
}

// The IDs of the application security groups which agent pool will associate when created.
func (o AgentPoolNetworkProfileResponseOutput) ApplicationSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AgentPoolNetworkProfileResponse) []string { return v.ApplicationSecurityGroups }).(pulumi.StringArrayOutput)
}

// IPTags of instance-level public IPs.
func (o AgentPoolNetworkProfileResponseOutput) NodePublicIPTags() IPTagResponseArrayOutput {
	return o.ApplyT(func(v AgentPoolNetworkProfileResponse) []IPTagResponse { return v.NodePublicIPTags }).(IPTagResponseArrayOutput)
}

type AgentPoolNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolNetworkProfileResponse)(nil)).Elem()
}

func (o AgentPoolNetworkProfileResponsePtrOutput) ToAgentPoolNetworkProfileResponsePtrOutput() AgentPoolNetworkProfileResponsePtrOutput {
	return o
}

func (o AgentPoolNetworkProfileResponsePtrOutput) ToAgentPoolNetworkProfileResponsePtrOutputWithContext(ctx context.Context) AgentPoolNetworkProfileResponsePtrOutput {
	return o
}

func (o AgentPoolNetworkProfileResponsePtrOutput) Elem() AgentPoolNetworkProfileResponseOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfileResponse) AgentPoolNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret AgentPoolNetworkProfileResponse
		return ret
	}).(AgentPoolNetworkProfileResponseOutput)
}

// The port ranges that are allowed to access. The specified ranges are allowed to overlap.
func (o AgentPoolNetworkProfileResponsePtrOutput) AllowedHostPorts() PortRangeResponseArrayOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfileResponse) []PortRangeResponse {
		if v == nil {
			return nil
		}
		return v.AllowedHostPorts
	}).(PortRangeResponseArrayOutput)
}

// The IDs of the application security groups which agent pool will associate when created.
func (o AgentPoolNetworkProfileResponsePtrOutput) ApplicationSecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.ApplicationSecurityGroups
	}).(pulumi.StringArrayOutput)
}

// IPTags of instance-level public IPs.
func (o AgentPoolNetworkProfileResponsePtrOutput) NodePublicIPTags() IPTagResponseArrayOutput {
	return o.ApplyT(func(v *AgentPoolNetworkProfileResponse) []IPTagResponse {
		if v == nil {
			return nil
		}
		return v.NodePublicIPTags
	}).(IPTagResponseArrayOutput)
}

// The security settings of an agent pool.
type AgentPoolSecurityProfile struct {
	// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
	EnableVTPM *bool `pulumi:"enableVTPM"`
}

// AgentPoolSecurityProfileInput is an input type that accepts AgentPoolSecurityProfileArgs and AgentPoolSecurityProfileOutput values.
// You can construct a concrete instance of `AgentPoolSecurityProfileInput` via:
//
//	AgentPoolSecurityProfileArgs{...}
type AgentPoolSecurityProfileInput interface {
	pulumi.Input

	ToAgentPoolSecurityProfileOutput() AgentPoolSecurityProfileOutput
	ToAgentPoolSecurityProfileOutputWithContext(context.Context) AgentPoolSecurityProfileOutput
}

// The security settings of an agent pool.
type AgentPoolSecurityProfileArgs struct {
	// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
	EnableVTPM pulumi.BoolPtrInput `pulumi:"enableVTPM"`
}

func (AgentPoolSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolSecurityProfile)(nil)).Elem()
}

func (i AgentPoolSecurityProfileArgs) ToAgentPoolSecurityProfileOutput() AgentPoolSecurityProfileOutput {
	return i.ToAgentPoolSecurityProfileOutputWithContext(context.Background())
}

func (i AgentPoolSecurityProfileArgs) ToAgentPoolSecurityProfileOutputWithContext(ctx context.Context) AgentPoolSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolSecurityProfileOutput)
}

func (i AgentPoolSecurityProfileArgs) ToAgentPoolSecurityProfilePtrOutput() AgentPoolSecurityProfilePtrOutput {
	return i.ToAgentPoolSecurityProfilePtrOutputWithContext(context.Background())
}

func (i AgentPoolSecurityProfileArgs) ToAgentPoolSecurityProfilePtrOutputWithContext(ctx context.Context) AgentPoolSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolSecurityProfileOutput).ToAgentPoolSecurityProfilePtrOutputWithContext(ctx)
}

// AgentPoolSecurityProfilePtrInput is an input type that accepts AgentPoolSecurityProfileArgs, AgentPoolSecurityProfilePtr and AgentPoolSecurityProfilePtrOutput values.
// You can construct a concrete instance of `AgentPoolSecurityProfilePtrInput` via:
//
//	        AgentPoolSecurityProfileArgs{...}
//
//	or:
//
//	        nil
type AgentPoolSecurityProfilePtrInput interface {
	pulumi.Input

	ToAgentPoolSecurityProfilePtrOutput() AgentPoolSecurityProfilePtrOutput
	ToAgentPoolSecurityProfilePtrOutputWithContext(context.Context) AgentPoolSecurityProfilePtrOutput
}

type agentPoolSecurityProfilePtrType AgentPoolSecurityProfileArgs

func AgentPoolSecurityProfilePtr(v *AgentPoolSecurityProfileArgs) AgentPoolSecurityProfilePtrInput {
	return (*agentPoolSecurityProfilePtrType)(v)
}

func (*agentPoolSecurityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolSecurityProfile)(nil)).Elem()
}

func (i *agentPoolSecurityProfilePtrType) ToAgentPoolSecurityProfilePtrOutput() AgentPoolSecurityProfilePtrOutput {
	return i.ToAgentPoolSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *agentPoolSecurityProfilePtrType) ToAgentPoolSecurityProfilePtrOutputWithContext(ctx context.Context) AgentPoolSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolSecurityProfilePtrOutput)
}

// The security settings of an agent pool.
type AgentPoolSecurityProfileOutput struct{ *pulumi.OutputState }

func (AgentPoolSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolSecurityProfile)(nil)).Elem()
}

func (o AgentPoolSecurityProfileOutput) ToAgentPoolSecurityProfileOutput() AgentPoolSecurityProfileOutput {
	return o
}

func (o AgentPoolSecurityProfileOutput) ToAgentPoolSecurityProfileOutputWithContext(ctx context.Context) AgentPoolSecurityProfileOutput {
	return o
}

func (o AgentPoolSecurityProfileOutput) ToAgentPoolSecurityProfilePtrOutput() AgentPoolSecurityProfilePtrOutput {
	return o.ToAgentPoolSecurityProfilePtrOutputWithContext(context.Background())
}

func (o AgentPoolSecurityProfileOutput) ToAgentPoolSecurityProfilePtrOutputWithContext(ctx context.Context) AgentPoolSecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolSecurityProfile) *AgentPoolSecurityProfile {
		return &v
	}).(AgentPoolSecurityProfilePtrOutput)
}

// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
func (o AgentPoolSecurityProfileOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentPoolSecurityProfile) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
func (o AgentPoolSecurityProfileOutput) EnableVTPM() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentPoolSecurityProfile) *bool { return v.EnableVTPM }).(pulumi.BoolPtrOutput)
}

type AgentPoolSecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolSecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolSecurityProfile)(nil)).Elem()
}

func (o AgentPoolSecurityProfilePtrOutput) ToAgentPoolSecurityProfilePtrOutput() AgentPoolSecurityProfilePtrOutput {
	return o
}

func (o AgentPoolSecurityProfilePtrOutput) ToAgentPoolSecurityProfilePtrOutputWithContext(ctx context.Context) AgentPoolSecurityProfilePtrOutput {
	return o
}

func (o AgentPoolSecurityProfilePtrOutput) Elem() AgentPoolSecurityProfileOutput {
	return o.ApplyT(func(v *AgentPoolSecurityProfile) AgentPoolSecurityProfile {
		if v != nil {
			return *v
		}
		var ret AgentPoolSecurityProfile
		return ret
	}).(AgentPoolSecurityProfileOutput)
}

// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
func (o AgentPoolSecurityProfilePtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentPoolSecurityProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
func (o AgentPoolSecurityProfilePtrOutput) EnableVTPM() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentPoolSecurityProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVTPM
	}).(pulumi.BoolPtrOutput)
}

// The security settings of an agent pool.
type AgentPoolSecurityProfileResponse struct {
	// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
	EnableVTPM *bool `pulumi:"enableVTPM"`
}

// The security settings of an agent pool.
type AgentPoolSecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (AgentPoolSecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolSecurityProfileResponse)(nil)).Elem()
}

func (o AgentPoolSecurityProfileResponseOutput) ToAgentPoolSecurityProfileResponseOutput() AgentPoolSecurityProfileResponseOutput {
	return o
}

func (o AgentPoolSecurityProfileResponseOutput) ToAgentPoolSecurityProfileResponseOutputWithContext(ctx context.Context) AgentPoolSecurityProfileResponseOutput {
	return o
}

// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
func (o AgentPoolSecurityProfileResponseOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentPoolSecurityProfileResponse) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
func (o AgentPoolSecurityProfileResponseOutput) EnableVTPM() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentPoolSecurityProfileResponse) *bool { return v.EnableVTPM }).(pulumi.BoolPtrOutput)
}

type AgentPoolSecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolSecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolSecurityProfileResponse)(nil)).Elem()
}

func (o AgentPoolSecurityProfileResponsePtrOutput) ToAgentPoolSecurityProfileResponsePtrOutput() AgentPoolSecurityProfileResponsePtrOutput {
	return o
}

func (o AgentPoolSecurityProfileResponsePtrOutput) ToAgentPoolSecurityProfileResponsePtrOutputWithContext(ctx context.Context) AgentPoolSecurityProfileResponsePtrOutput {
	return o
}

func (o AgentPoolSecurityProfileResponsePtrOutput) Elem() AgentPoolSecurityProfileResponseOutput {
	return o.ApplyT(func(v *AgentPoolSecurityProfileResponse) AgentPoolSecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret AgentPoolSecurityProfileResponse
		return ret
	}).(AgentPoolSecurityProfileResponseOutput)
}

// Secure Boot is a feature of Trusted Launch which ensures that only signed operating systems and drivers can boot. For more details, see aka.ms/aks/trustedlaunch.  If not specified, the default is false.
func (o AgentPoolSecurityProfileResponsePtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentPoolSecurityProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// vTPM is a Trusted Launch feature for configuring a dedicated secure vault for keys and measurements held locally on the node. For more details, see aka.ms/aks/trustedlaunch. If not specified, the default is false.
func (o AgentPoolSecurityProfileResponsePtrOutput) EnableVTPM() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentPoolSecurityProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVTPM
	}).(pulumi.BoolPtrOutput)
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettings struct {
	// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
	DrainTimeoutInMinutes *int `pulumi:"drainTimeoutInMinutes"`
	// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurge *string `pulumi:"maxSurge"`
	// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
	NodeSoakDurationInMinutes *int `pulumi:"nodeSoakDurationInMinutes"`
}

// AgentPoolUpgradeSettingsInput is an input type that accepts AgentPoolUpgradeSettingsArgs and AgentPoolUpgradeSettingsOutput values.
// You can construct a concrete instance of `AgentPoolUpgradeSettingsInput` via:
//
//	AgentPoolUpgradeSettingsArgs{...}
type AgentPoolUpgradeSettingsInput interface {
	pulumi.Input

	ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput
	ToAgentPoolUpgradeSettingsOutputWithContext(context.Context) AgentPoolUpgradeSettingsOutput
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsArgs struct {
	// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
	DrainTimeoutInMinutes pulumi.IntPtrInput `pulumi:"drainTimeoutInMinutes"`
	// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurge pulumi.StringPtrInput `pulumi:"maxSurge"`
	// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
	NodeSoakDurationInMinutes pulumi.IntPtrInput `pulumi:"nodeSoakDurationInMinutes"`
}

func (AgentPoolUpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettings)(nil)).Elem()
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput {
	return i.ToAgentPoolUpgradeSettingsOutputWithContext(context.Background())
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsOutput)
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsOutput).ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx)
}

// AgentPoolUpgradeSettingsPtrInput is an input type that accepts AgentPoolUpgradeSettingsArgs, AgentPoolUpgradeSettingsPtr and AgentPoolUpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `AgentPoolUpgradeSettingsPtrInput` via:
//
//	        AgentPoolUpgradeSettingsArgs{...}
//
//	or:
//
//	        nil
type AgentPoolUpgradeSettingsPtrInput interface {
	pulumi.Input

	ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput
	ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Context) AgentPoolUpgradeSettingsPtrOutput
}

type agentPoolUpgradeSettingsPtrType AgentPoolUpgradeSettingsArgs

func AgentPoolUpgradeSettingsPtr(v *AgentPoolUpgradeSettingsArgs) AgentPoolUpgradeSettingsPtrInput {
	return (*agentPoolUpgradeSettingsPtrType)(v)
}

func (*agentPoolUpgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettings)(nil)).Elem()
}

func (i *agentPoolUpgradeSettingsPtrType) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *agentPoolUpgradeSettingsPtrType) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsPtrOutput)
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettings)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput {
	return o
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsOutput {
	return o
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return o.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolUpgradeSettings) *AgentPoolUpgradeSettings {
		return &v
	}).(AgentPoolUpgradeSettingsPtrOutput)
}

// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
func (o AgentPoolUpgradeSettingsOutput) DrainTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettings) *int { return v.DrainTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
func (o AgentPoolUpgradeSettingsOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettings) *string { return v.MaxSurge }).(pulumi.StringPtrOutput)
}

// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
func (o AgentPoolUpgradeSettingsOutput) NodeSoakDurationInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettings) *int { return v.NodeSoakDurationInMinutes }).(pulumi.IntPtrOutput)
}

type AgentPoolUpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettings)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsPtrOutput) Elem() AgentPoolUpgradeSettingsOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) AgentPoolUpgradeSettings {
		if v != nil {
			return *v
		}
		var ret AgentPoolUpgradeSettings
		return ret
	}).(AgentPoolUpgradeSettingsOutput)
}

// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
func (o AgentPoolUpgradeSettingsPtrOutput) DrainTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.DrainTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
func (o AgentPoolUpgradeSettingsPtrOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.StringPtrOutput)
}

// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
func (o AgentPoolUpgradeSettingsPtrOutput) NodeSoakDurationInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) *int {
		if v == nil {
			return nil
		}
		return v.NodeSoakDurationInMinutes
	}).(pulumi.IntPtrOutput)
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsResponse struct {
	// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
	DrainTimeoutInMinutes *int `pulumi:"drainTimeoutInMinutes"`
	// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
	MaxSurge *string `pulumi:"maxSurge"`
	// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
	NodeSoakDurationInMinutes *int `pulumi:"nodeSoakDurationInMinutes"`
}

// Settings for upgrading an agentpool
type AgentPoolUpgradeSettingsResponseOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettingsResponse)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToAgentPoolUpgradeSettingsResponseOutput() AgentPoolUpgradeSettingsResponseOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToAgentPoolUpgradeSettingsResponseOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsResponseOutput {
	return o
}

// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
func (o AgentPoolUpgradeSettingsResponseOutput) DrainTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettingsResponse) *int { return v.DrainTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
func (o AgentPoolUpgradeSettingsResponseOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettingsResponse) *string { return v.MaxSurge }).(pulumi.StringPtrOutput)
}

// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
func (o AgentPoolUpgradeSettingsResponseOutput) NodeSoakDurationInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettingsResponse) *int { return v.NodeSoakDurationInMinutes }).(pulumi.IntPtrOutput)
}

type AgentPoolUpgradeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettingsResponse)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToAgentPoolUpgradeSettingsResponsePtrOutput() AgentPoolUpgradeSettingsResponsePtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToAgentPoolUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsResponsePtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) Elem() AgentPoolUpgradeSettingsResponseOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) AgentPoolUpgradeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AgentPoolUpgradeSettingsResponse
		return ret
	}).(AgentPoolUpgradeSettingsResponseOutput)
}

// The amount of time (in minutes) to wait on eviction of pods and graceful termination per node. This eviction wait time honors waiting on pod disruption budgets. If this time is exceeded, the upgrade fails. If not specified, the default is 30 minutes.
func (o AgentPoolUpgradeSettingsResponsePtrOutput) DrainTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.DrainTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 10%. For more information, including best practices, see: https://docs.microsoft.com/azure/aks/upgrade-cluster#customize-node-surge-upgrade
func (o AgentPoolUpgradeSettingsResponsePtrOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.StringPtrOutput)
}

// The amount of time (in minutes) to wait after draining a node and before reimaging it and moving on to next node. If not specified, the default is 0 minutes.
func (o AgentPoolUpgradeSettingsResponsePtrOutput) NodeSoakDurationInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.NodeSoakDurationInMinutes
	}).(pulumi.IntPtrOutput)
}

// The Windows agent pool's specific profile.
type AgentPoolWindowsProfile struct {
	// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
	DisableOutboundNat *bool `pulumi:"disableOutboundNat"`
}

// AgentPoolWindowsProfileInput is an input type that accepts AgentPoolWindowsProfileArgs and AgentPoolWindowsProfileOutput values.
// You can construct a concrete instance of `AgentPoolWindowsProfileInput` via:
//
//	AgentPoolWindowsProfileArgs{...}
type AgentPoolWindowsProfileInput interface {
	pulumi.Input

	ToAgentPoolWindowsProfileOutput() AgentPoolWindowsProfileOutput
	ToAgentPoolWindowsProfileOutputWithContext(context.Context) AgentPoolWindowsProfileOutput
}

// The Windows agent pool's specific profile.
type AgentPoolWindowsProfileArgs struct {
	// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
	DisableOutboundNat pulumi.BoolPtrInput `pulumi:"disableOutboundNat"`
}

func (AgentPoolWindowsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolWindowsProfile)(nil)).Elem()
}

func (i AgentPoolWindowsProfileArgs) ToAgentPoolWindowsProfileOutput() AgentPoolWindowsProfileOutput {
	return i.ToAgentPoolWindowsProfileOutputWithContext(context.Background())
}

func (i AgentPoolWindowsProfileArgs) ToAgentPoolWindowsProfileOutputWithContext(ctx context.Context) AgentPoolWindowsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolWindowsProfileOutput)
}

func (i AgentPoolWindowsProfileArgs) ToAgentPoolWindowsProfilePtrOutput() AgentPoolWindowsProfilePtrOutput {
	return i.ToAgentPoolWindowsProfilePtrOutputWithContext(context.Background())
}

func (i AgentPoolWindowsProfileArgs) ToAgentPoolWindowsProfilePtrOutputWithContext(ctx context.Context) AgentPoolWindowsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolWindowsProfileOutput).ToAgentPoolWindowsProfilePtrOutputWithContext(ctx)
}

// AgentPoolWindowsProfilePtrInput is an input type that accepts AgentPoolWindowsProfileArgs, AgentPoolWindowsProfilePtr and AgentPoolWindowsProfilePtrOutput values.
// You can construct a concrete instance of `AgentPoolWindowsProfilePtrInput` via:
//
//	        AgentPoolWindowsProfileArgs{...}
//
//	or:
//
//	        nil
type AgentPoolWindowsProfilePtrInput interface {
	pulumi.Input

	ToAgentPoolWindowsProfilePtrOutput() AgentPoolWindowsProfilePtrOutput
	ToAgentPoolWindowsProfilePtrOutputWithContext(context.Context) AgentPoolWindowsProfilePtrOutput
}

type agentPoolWindowsProfilePtrType AgentPoolWindowsProfileArgs

func AgentPoolWindowsProfilePtr(v *AgentPoolWindowsProfileArgs) AgentPoolWindowsProfilePtrInput {
	return (*agentPoolWindowsProfilePtrType)(v)
}

func (*agentPoolWindowsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolWindowsProfile)(nil)).Elem()
}

func (i *agentPoolWindowsProfilePtrType) ToAgentPoolWindowsProfilePtrOutput() AgentPoolWindowsProfilePtrOutput {
	return i.ToAgentPoolWindowsProfilePtrOutputWithContext(context.Background())
}

func (i *agentPoolWindowsProfilePtrType) ToAgentPoolWindowsProfilePtrOutputWithContext(ctx context.Context) AgentPoolWindowsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolWindowsProfilePtrOutput)
}

// The Windows agent pool's specific profile.
type AgentPoolWindowsProfileOutput struct{ *pulumi.OutputState }

func (AgentPoolWindowsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolWindowsProfile)(nil)).Elem()
}

func (o AgentPoolWindowsProfileOutput) ToAgentPoolWindowsProfileOutput() AgentPoolWindowsProfileOutput {
	return o
}

func (o AgentPoolWindowsProfileOutput) ToAgentPoolWindowsProfileOutputWithContext(ctx context.Context) AgentPoolWindowsProfileOutput {
	return o
}

func (o AgentPoolWindowsProfileOutput) ToAgentPoolWindowsProfilePtrOutput() AgentPoolWindowsProfilePtrOutput {
	return o.ToAgentPoolWindowsProfilePtrOutputWithContext(context.Background())
}

func (o AgentPoolWindowsProfileOutput) ToAgentPoolWindowsProfilePtrOutputWithContext(ctx context.Context) AgentPoolWindowsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolWindowsProfile) *AgentPoolWindowsProfile {
		return &v
	}).(AgentPoolWindowsProfilePtrOutput)
}

// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
func (o AgentPoolWindowsProfileOutput) DisableOutboundNat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentPoolWindowsProfile) *bool { return v.DisableOutboundNat }).(pulumi.BoolPtrOutput)
}

type AgentPoolWindowsProfilePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolWindowsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolWindowsProfile)(nil)).Elem()
}

func (o AgentPoolWindowsProfilePtrOutput) ToAgentPoolWindowsProfilePtrOutput() AgentPoolWindowsProfilePtrOutput {
	return o
}

func (o AgentPoolWindowsProfilePtrOutput) ToAgentPoolWindowsProfilePtrOutputWithContext(ctx context.Context) AgentPoolWindowsProfilePtrOutput {
	return o
}

func (o AgentPoolWindowsProfilePtrOutput) Elem() AgentPoolWindowsProfileOutput {
	return o.ApplyT(func(v *AgentPoolWindowsProfile) AgentPoolWindowsProfile {
		if v != nil {
			return *v
		}
		var ret AgentPoolWindowsProfile
		return ret
	}).(AgentPoolWindowsProfileOutput)
}

// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
func (o AgentPoolWindowsProfilePtrOutput) DisableOutboundNat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentPoolWindowsProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOutboundNat
	}).(pulumi.BoolPtrOutput)
}

// The Windows agent pool's specific profile.
type AgentPoolWindowsProfileResponse struct {
	// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
	DisableOutboundNat *bool `pulumi:"disableOutboundNat"`
}

// The Windows agent pool's specific profile.
type AgentPoolWindowsProfileResponseOutput struct{ *pulumi.OutputState }

func (AgentPoolWindowsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolWindowsProfileResponse)(nil)).Elem()
}

func (o AgentPoolWindowsProfileResponseOutput) ToAgentPoolWindowsProfileResponseOutput() AgentPoolWindowsProfileResponseOutput {
	return o
}

func (o AgentPoolWindowsProfileResponseOutput) ToAgentPoolWindowsProfileResponseOutputWithContext(ctx context.Context) AgentPoolWindowsProfileResponseOutput {
	return o
}

// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
func (o AgentPoolWindowsProfileResponseOutput) DisableOutboundNat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentPoolWindowsProfileResponse) *bool { return v.DisableOutboundNat }).(pulumi.BoolPtrOutput)
}

type AgentPoolWindowsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolWindowsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolWindowsProfileResponse)(nil)).Elem()
}

func (o AgentPoolWindowsProfileResponsePtrOutput) ToAgentPoolWindowsProfileResponsePtrOutput() AgentPoolWindowsProfileResponsePtrOutput {
	return o
}

func (o AgentPoolWindowsProfileResponsePtrOutput) ToAgentPoolWindowsProfileResponsePtrOutputWithContext(ctx context.Context) AgentPoolWindowsProfileResponsePtrOutput {
	return o
}

func (o AgentPoolWindowsProfileResponsePtrOutput) Elem() AgentPoolWindowsProfileResponseOutput {
	return o.ApplyT(func(v *AgentPoolWindowsProfileResponse) AgentPoolWindowsProfileResponse {
		if v != nil {
			return *v
		}
		var ret AgentPoolWindowsProfileResponse
		return ret
	}).(AgentPoolWindowsProfileResponseOutput)
}

// The default value is false. Outbound NAT can only be disabled if the cluster outboundType is NAT Gateway and the Windows agent pool does not have node public IP enabled.
func (o AgentPoolWindowsProfileResponsePtrOutput) DisableOutboundNat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentPoolWindowsProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOutboundNat
	}).(pulumi.BoolPtrOutput)
}

// Agent profile for the Fleet hub.
type AgentProfile struct {
	// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
	SubnetId *string `pulumi:"subnetId"`
	// The virtual machine size of the Fleet hub.
	VmSize *string `pulumi:"vmSize"`
}

// AgentProfileInput is an input type that accepts AgentProfileArgs and AgentProfileOutput values.
// You can construct a concrete instance of `AgentProfileInput` via:
//
//	AgentProfileArgs{...}
type AgentProfileInput interface {
	pulumi.Input

	ToAgentProfileOutput() AgentProfileOutput
	ToAgentProfileOutputWithContext(context.Context) AgentProfileOutput
}

// Agent profile for the Fleet hub.
type AgentProfileArgs struct {
	// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The virtual machine size of the Fleet hub.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

func (AgentProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProfile)(nil)).Elem()
}

func (i AgentProfileArgs) ToAgentProfileOutput() AgentProfileOutput {
	return i.ToAgentProfileOutputWithContext(context.Background())
}

func (i AgentProfileArgs) ToAgentProfileOutputWithContext(ctx context.Context) AgentProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentProfileOutput)
}

func (i AgentProfileArgs) ToAgentProfilePtrOutput() AgentProfilePtrOutput {
	return i.ToAgentProfilePtrOutputWithContext(context.Background())
}

func (i AgentProfileArgs) ToAgentProfilePtrOutputWithContext(ctx context.Context) AgentProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentProfileOutput).ToAgentProfilePtrOutputWithContext(ctx)
}

// AgentProfilePtrInput is an input type that accepts AgentProfileArgs, AgentProfilePtr and AgentProfilePtrOutput values.
// You can construct a concrete instance of `AgentProfilePtrInput` via:
//
//	        AgentProfileArgs{...}
//
//	or:
//
//	        nil
type AgentProfilePtrInput interface {
	pulumi.Input

	ToAgentProfilePtrOutput() AgentProfilePtrOutput
	ToAgentProfilePtrOutputWithContext(context.Context) AgentProfilePtrOutput
}

type agentProfilePtrType AgentProfileArgs

func AgentProfilePtr(v *AgentProfileArgs) AgentProfilePtrInput {
	return (*agentProfilePtrType)(v)
}

func (*agentProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProfile)(nil)).Elem()
}

func (i *agentProfilePtrType) ToAgentProfilePtrOutput() AgentProfilePtrOutput {
	return i.ToAgentProfilePtrOutputWithContext(context.Background())
}

func (i *agentProfilePtrType) ToAgentProfilePtrOutputWithContext(ctx context.Context) AgentProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentProfilePtrOutput)
}

// Agent profile for the Fleet hub.
type AgentProfileOutput struct{ *pulumi.OutputState }

func (AgentProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProfile)(nil)).Elem()
}

func (o AgentProfileOutput) ToAgentProfileOutput() AgentProfileOutput {
	return o
}

func (o AgentProfileOutput) ToAgentProfileOutputWithContext(ctx context.Context) AgentProfileOutput {
	return o
}

func (o AgentProfileOutput) ToAgentProfilePtrOutput() AgentProfilePtrOutput {
	return o.ToAgentProfilePtrOutputWithContext(context.Background())
}

func (o AgentProfileOutput) ToAgentProfilePtrOutputWithContext(ctx context.Context) AgentProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentProfile) *AgentProfile {
		return &v
	}).(AgentProfilePtrOutput)
}

// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
func (o AgentProfileOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentProfile) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The virtual machine size of the Fleet hub.
func (o AgentProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type AgentProfilePtrOutput struct{ *pulumi.OutputState }

func (AgentProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProfile)(nil)).Elem()
}

func (o AgentProfilePtrOutput) ToAgentProfilePtrOutput() AgentProfilePtrOutput {
	return o
}

func (o AgentProfilePtrOutput) ToAgentProfilePtrOutputWithContext(ctx context.Context) AgentProfilePtrOutput {
	return o
}

func (o AgentProfilePtrOutput) Elem() AgentProfileOutput {
	return o.ApplyT(func(v *AgentProfile) AgentProfile {
		if v != nil {
			return *v
		}
		var ret AgentProfile
		return ret
	}).(AgentProfileOutput)
}

// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
func (o AgentProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentProfile) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The virtual machine size of the Fleet hub.
func (o AgentProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Agent profile for the Fleet hub.
type AgentProfileResponse struct {
	// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
	SubnetId *string `pulumi:"subnetId"`
	// The virtual machine size of the Fleet hub.
	VmSize *string `pulumi:"vmSize"`
}

// Agent profile for the Fleet hub.
type AgentProfileResponseOutput struct{ *pulumi.OutputState }

func (AgentProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentProfileResponse)(nil)).Elem()
}

func (o AgentProfileResponseOutput) ToAgentProfileResponseOutput() AgentProfileResponseOutput {
	return o
}

func (o AgentProfileResponseOutput) ToAgentProfileResponseOutputWithContext(ctx context.Context) AgentProfileResponseOutput {
	return o
}

// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
func (o AgentProfileResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentProfileResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The virtual machine size of the Fleet hub.
func (o AgentProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type AgentProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentProfileResponse)(nil)).Elem()
}

func (o AgentProfileResponsePtrOutput) ToAgentProfileResponsePtrOutput() AgentProfileResponsePtrOutput {
	return o
}

func (o AgentProfileResponsePtrOutput) ToAgentProfileResponsePtrOutputWithContext(ctx context.Context) AgentProfileResponsePtrOutput {
	return o
}

func (o AgentProfileResponsePtrOutput) Elem() AgentProfileResponseOutput {
	return o.ApplyT(func(v *AgentProfileResponse) AgentProfileResponse {
		if v != nil {
			return *v
		}
		var ret AgentProfileResponse
		return ret
	}).(AgentProfileResponseOutput)
}

// The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used.
func (o AgentProfileResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// The virtual machine size of the Fleet hub.
func (o AgentProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelection struct {
	// The node image upgrade type.
	Type string `pulumi:"type"`
}

// AutoUpgradeNodeImageSelectionInput is an input type that accepts AutoUpgradeNodeImageSelectionArgs and AutoUpgradeNodeImageSelectionOutput values.
// You can construct a concrete instance of `AutoUpgradeNodeImageSelectionInput` via:
//
//	AutoUpgradeNodeImageSelectionArgs{...}
type AutoUpgradeNodeImageSelectionInput interface {
	pulumi.Input

	ToAutoUpgradeNodeImageSelectionOutput() AutoUpgradeNodeImageSelectionOutput
	ToAutoUpgradeNodeImageSelectionOutputWithContext(context.Context) AutoUpgradeNodeImageSelectionOutput
}

// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelectionArgs struct {
	// The node image upgrade type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AutoUpgradeNodeImageSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeNodeImageSelection)(nil)).Elem()
}

func (i AutoUpgradeNodeImageSelectionArgs) ToAutoUpgradeNodeImageSelectionOutput() AutoUpgradeNodeImageSelectionOutput {
	return i.ToAutoUpgradeNodeImageSelectionOutputWithContext(context.Background())
}

func (i AutoUpgradeNodeImageSelectionArgs) ToAutoUpgradeNodeImageSelectionOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeNodeImageSelectionOutput)
}

func (i AutoUpgradeNodeImageSelectionArgs) ToAutoUpgradeNodeImageSelectionPtrOutput() AutoUpgradeNodeImageSelectionPtrOutput {
	return i.ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(context.Background())
}

func (i AutoUpgradeNodeImageSelectionArgs) ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeNodeImageSelectionOutput).ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(ctx)
}

// AutoUpgradeNodeImageSelectionPtrInput is an input type that accepts AutoUpgradeNodeImageSelectionArgs, AutoUpgradeNodeImageSelectionPtr and AutoUpgradeNodeImageSelectionPtrOutput values.
// You can construct a concrete instance of `AutoUpgradeNodeImageSelectionPtrInput` via:
//
//	        AutoUpgradeNodeImageSelectionArgs{...}
//
//	or:
//
//	        nil
type AutoUpgradeNodeImageSelectionPtrInput interface {
	pulumi.Input

	ToAutoUpgradeNodeImageSelectionPtrOutput() AutoUpgradeNodeImageSelectionPtrOutput
	ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(context.Context) AutoUpgradeNodeImageSelectionPtrOutput
}

type autoUpgradeNodeImageSelectionPtrType AutoUpgradeNodeImageSelectionArgs

func AutoUpgradeNodeImageSelectionPtr(v *AutoUpgradeNodeImageSelectionArgs) AutoUpgradeNodeImageSelectionPtrInput {
	return (*autoUpgradeNodeImageSelectionPtrType)(v)
}

func (*autoUpgradeNodeImageSelectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeNodeImageSelection)(nil)).Elem()
}

func (i *autoUpgradeNodeImageSelectionPtrType) ToAutoUpgradeNodeImageSelectionPtrOutput() AutoUpgradeNodeImageSelectionPtrOutput {
	return i.ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(context.Background())
}

func (i *autoUpgradeNodeImageSelectionPtrType) ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeNodeImageSelectionPtrOutput)
}

// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelectionOutput struct{ *pulumi.OutputState }

func (AutoUpgradeNodeImageSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeNodeImageSelection)(nil)).Elem()
}

func (o AutoUpgradeNodeImageSelectionOutput) ToAutoUpgradeNodeImageSelectionOutput() AutoUpgradeNodeImageSelectionOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionOutput) ToAutoUpgradeNodeImageSelectionOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionOutput) ToAutoUpgradeNodeImageSelectionPtrOutput() AutoUpgradeNodeImageSelectionPtrOutput {
	return o.ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(context.Background())
}

func (o AutoUpgradeNodeImageSelectionOutput) ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoUpgradeNodeImageSelection) *AutoUpgradeNodeImageSelection {
		return &v
	}).(AutoUpgradeNodeImageSelectionPtrOutput)
}

// The node image upgrade type.
func (o AutoUpgradeNodeImageSelectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AutoUpgradeNodeImageSelection) string { return v.Type }).(pulumi.StringOutput)
}

type AutoUpgradeNodeImageSelectionPtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeNodeImageSelectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeNodeImageSelection)(nil)).Elem()
}

func (o AutoUpgradeNodeImageSelectionPtrOutput) ToAutoUpgradeNodeImageSelectionPtrOutput() AutoUpgradeNodeImageSelectionPtrOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionPtrOutput) ToAutoUpgradeNodeImageSelectionPtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionPtrOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionPtrOutput) Elem() AutoUpgradeNodeImageSelectionOutput {
	return o.ApplyT(func(v *AutoUpgradeNodeImageSelection) AutoUpgradeNodeImageSelection {
		if v != nil {
			return *v
		}
		var ret AutoUpgradeNodeImageSelection
		return ret
	}).(AutoUpgradeNodeImageSelectionOutput)
}

// The node image upgrade type.
func (o AutoUpgradeNodeImageSelectionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeNodeImageSelection) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelectionResponse struct {
	// The node image upgrade type.
	Type string `pulumi:"type"`
}

// The node image upgrade to be applied to the target clusters in auto upgrade.
type AutoUpgradeNodeImageSelectionResponseOutput struct{ *pulumi.OutputState }

func (AutoUpgradeNodeImageSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoUpgradeNodeImageSelectionResponse)(nil)).Elem()
}

func (o AutoUpgradeNodeImageSelectionResponseOutput) ToAutoUpgradeNodeImageSelectionResponseOutput() AutoUpgradeNodeImageSelectionResponseOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionResponseOutput) ToAutoUpgradeNodeImageSelectionResponseOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionResponseOutput {
	return o
}

// The node image upgrade type.
func (o AutoUpgradeNodeImageSelectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AutoUpgradeNodeImageSelectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AutoUpgradeNodeImageSelectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoUpgradeNodeImageSelectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeNodeImageSelectionResponse)(nil)).Elem()
}

func (o AutoUpgradeNodeImageSelectionResponsePtrOutput) ToAutoUpgradeNodeImageSelectionResponsePtrOutput() AutoUpgradeNodeImageSelectionResponsePtrOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionResponsePtrOutput) ToAutoUpgradeNodeImageSelectionResponsePtrOutputWithContext(ctx context.Context) AutoUpgradeNodeImageSelectionResponsePtrOutput {
	return o
}

func (o AutoUpgradeNodeImageSelectionResponsePtrOutput) Elem() AutoUpgradeNodeImageSelectionResponseOutput {
	return o.ApplyT(func(v *AutoUpgradeNodeImageSelectionResponse) AutoUpgradeNodeImageSelectionResponse {
		if v != nil {
			return *v
		}
		var ret AutoUpgradeNodeImageSelectionResponse
		return ret
	}).(AutoUpgradeNodeImageSelectionResponseOutput)
}

// The node image upgrade type.
func (o AutoUpgradeNodeImageSelectionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeNodeImageSelectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Azure Key Vault key management service settings for the security profile.
type AzureKeyVaultKms struct {
	// Whether to enable Azure Key Vault key management service. The default is false.
	Enabled *bool `pulumi:"enabled"`
	// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
	KeyId *string `pulumi:"keyId"`
	// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
	KeyVaultNetworkAccess *string `pulumi:"keyVaultNetworkAccess"`
	// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
	KeyVaultResourceId *string `pulumi:"keyVaultResourceId"`
}

// Defaults sets the appropriate defaults for AzureKeyVaultKms
func (val *AzureKeyVaultKms) Defaults() *AzureKeyVaultKms {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.KeyVaultNetworkAccess == nil {
		keyVaultNetworkAccess_ := "Public"
		tmp.KeyVaultNetworkAccess = &keyVaultNetworkAccess_
	}
	return &tmp
}

// AzureKeyVaultKmsInput is an input type that accepts AzureKeyVaultKmsArgs and AzureKeyVaultKmsOutput values.
// You can construct a concrete instance of `AzureKeyVaultKmsInput` via:
//
//	AzureKeyVaultKmsArgs{...}
type AzureKeyVaultKmsInput interface {
	pulumi.Input

	ToAzureKeyVaultKmsOutput() AzureKeyVaultKmsOutput
	ToAzureKeyVaultKmsOutputWithContext(context.Context) AzureKeyVaultKmsOutput
}

// Azure Key Vault key management service settings for the security profile.
type AzureKeyVaultKmsArgs struct {
	// Whether to enable Azure Key Vault key management service. The default is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
	KeyVaultNetworkAccess pulumi.StringPtrInput `pulumi:"keyVaultNetworkAccess"`
	// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
	KeyVaultResourceId pulumi.StringPtrInput `pulumi:"keyVaultResourceId"`
}

// Defaults sets the appropriate defaults for AzureKeyVaultKmsArgs
func (val *AzureKeyVaultKmsArgs) Defaults() *AzureKeyVaultKmsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.KeyVaultNetworkAccess == nil {
		tmp.KeyVaultNetworkAccess = pulumi.StringPtr("Public")
	}
	return &tmp
}
func (AzureKeyVaultKmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultKms)(nil)).Elem()
}

func (i AzureKeyVaultKmsArgs) ToAzureKeyVaultKmsOutput() AzureKeyVaultKmsOutput {
	return i.ToAzureKeyVaultKmsOutputWithContext(context.Background())
}

func (i AzureKeyVaultKmsArgs) ToAzureKeyVaultKmsOutputWithContext(ctx context.Context) AzureKeyVaultKmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultKmsOutput)
}

func (i AzureKeyVaultKmsArgs) ToAzureKeyVaultKmsPtrOutput() AzureKeyVaultKmsPtrOutput {
	return i.ToAzureKeyVaultKmsPtrOutputWithContext(context.Background())
}

func (i AzureKeyVaultKmsArgs) ToAzureKeyVaultKmsPtrOutputWithContext(ctx context.Context) AzureKeyVaultKmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultKmsOutput).ToAzureKeyVaultKmsPtrOutputWithContext(ctx)
}

// AzureKeyVaultKmsPtrInput is an input type that accepts AzureKeyVaultKmsArgs, AzureKeyVaultKmsPtr and AzureKeyVaultKmsPtrOutput values.
// You can construct a concrete instance of `AzureKeyVaultKmsPtrInput` via:
//
//	        AzureKeyVaultKmsArgs{...}
//
//	or:
//
//	        nil
type AzureKeyVaultKmsPtrInput interface {
	pulumi.Input

	ToAzureKeyVaultKmsPtrOutput() AzureKeyVaultKmsPtrOutput
	ToAzureKeyVaultKmsPtrOutputWithContext(context.Context) AzureKeyVaultKmsPtrOutput
}

type azureKeyVaultKmsPtrType AzureKeyVaultKmsArgs

func AzureKeyVaultKmsPtr(v *AzureKeyVaultKmsArgs) AzureKeyVaultKmsPtrInput {
	return (*azureKeyVaultKmsPtrType)(v)
}

func (*azureKeyVaultKmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultKms)(nil)).Elem()
}

func (i *azureKeyVaultKmsPtrType) ToAzureKeyVaultKmsPtrOutput() AzureKeyVaultKmsPtrOutput {
	return i.ToAzureKeyVaultKmsPtrOutputWithContext(context.Background())
}

func (i *azureKeyVaultKmsPtrType) ToAzureKeyVaultKmsPtrOutputWithContext(ctx context.Context) AzureKeyVaultKmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultKmsPtrOutput)
}

// Azure Key Vault key management service settings for the security profile.
type AzureKeyVaultKmsOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultKmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultKms)(nil)).Elem()
}

func (o AzureKeyVaultKmsOutput) ToAzureKeyVaultKmsOutput() AzureKeyVaultKmsOutput {
	return o
}

func (o AzureKeyVaultKmsOutput) ToAzureKeyVaultKmsOutputWithContext(ctx context.Context) AzureKeyVaultKmsOutput {
	return o
}

func (o AzureKeyVaultKmsOutput) ToAzureKeyVaultKmsPtrOutput() AzureKeyVaultKmsPtrOutput {
	return o.ToAzureKeyVaultKmsPtrOutputWithContext(context.Background())
}

func (o AzureKeyVaultKmsOutput) ToAzureKeyVaultKmsPtrOutputWithContext(ctx context.Context) AzureKeyVaultKmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureKeyVaultKms) *AzureKeyVaultKms {
		return &v
	}).(AzureKeyVaultKmsPtrOutput)
}

// Whether to enable Azure Key Vault key management service. The default is false.
func (o AzureKeyVaultKmsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKms) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
func (o AzureKeyVaultKmsOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKms) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
func (o AzureKeyVaultKmsOutput) KeyVaultNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKms) *string { return v.KeyVaultNetworkAccess }).(pulumi.StringPtrOutput)
}

// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
func (o AzureKeyVaultKmsOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKms) *string { return v.KeyVaultResourceId }).(pulumi.StringPtrOutput)
}

type AzureKeyVaultKmsPtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultKmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultKms)(nil)).Elem()
}

func (o AzureKeyVaultKmsPtrOutput) ToAzureKeyVaultKmsPtrOutput() AzureKeyVaultKmsPtrOutput {
	return o
}

func (o AzureKeyVaultKmsPtrOutput) ToAzureKeyVaultKmsPtrOutputWithContext(ctx context.Context) AzureKeyVaultKmsPtrOutput {
	return o
}

func (o AzureKeyVaultKmsPtrOutput) Elem() AzureKeyVaultKmsOutput {
	return o.ApplyT(func(v *AzureKeyVaultKms) AzureKeyVaultKms {
		if v != nil {
			return *v
		}
		var ret AzureKeyVaultKms
		return ret
	}).(AzureKeyVaultKmsOutput)
}

// Whether to enable Azure Key Vault key management service. The default is false.
func (o AzureKeyVaultKmsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKms) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
func (o AzureKeyVaultKmsPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKms) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
func (o AzureKeyVaultKmsPtrOutput) KeyVaultNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKms) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
func (o AzureKeyVaultKmsPtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKms) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Azure Key Vault key management service settings for the security profile.
type AzureKeyVaultKmsResponse struct {
	// Whether to enable Azure Key Vault key management service. The default is false.
	Enabled *bool `pulumi:"enabled"`
	// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
	KeyId *string `pulumi:"keyId"`
	// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
	KeyVaultNetworkAccess *string `pulumi:"keyVaultNetworkAccess"`
	// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
	KeyVaultResourceId *string `pulumi:"keyVaultResourceId"`
}

// Defaults sets the appropriate defaults for AzureKeyVaultKmsResponse
func (val *AzureKeyVaultKmsResponse) Defaults() *AzureKeyVaultKmsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.KeyVaultNetworkAccess == nil {
		keyVaultNetworkAccess_ := "Public"
		tmp.KeyVaultNetworkAccess = &keyVaultNetworkAccess_
	}
	return &tmp
}

// Azure Key Vault key management service settings for the security profile.
type AzureKeyVaultKmsResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultKmsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultKmsResponse)(nil)).Elem()
}

func (o AzureKeyVaultKmsResponseOutput) ToAzureKeyVaultKmsResponseOutput() AzureKeyVaultKmsResponseOutput {
	return o
}

func (o AzureKeyVaultKmsResponseOutput) ToAzureKeyVaultKmsResponseOutputWithContext(ctx context.Context) AzureKeyVaultKmsResponseOutput {
	return o
}

// Whether to enable Azure Key Vault key management service. The default is false.
func (o AzureKeyVaultKmsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKmsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
func (o AzureKeyVaultKmsResponseOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKmsResponse) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
func (o AzureKeyVaultKmsResponseOutput) KeyVaultNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKmsResponse) *string { return v.KeyVaultNetworkAccess }).(pulumi.StringPtrOutput)
}

// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
func (o AzureKeyVaultKmsResponseOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultKmsResponse) *string { return v.KeyVaultResourceId }).(pulumi.StringPtrOutput)
}

type AzureKeyVaultKmsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultKmsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultKmsResponse)(nil)).Elem()
}

func (o AzureKeyVaultKmsResponsePtrOutput) ToAzureKeyVaultKmsResponsePtrOutput() AzureKeyVaultKmsResponsePtrOutput {
	return o
}

func (o AzureKeyVaultKmsResponsePtrOutput) ToAzureKeyVaultKmsResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultKmsResponsePtrOutput {
	return o
}

func (o AzureKeyVaultKmsResponsePtrOutput) Elem() AzureKeyVaultKmsResponseOutput {
	return o.ApplyT(func(v *AzureKeyVaultKmsResponse) AzureKeyVaultKmsResponse {
		if v != nil {
			return *v
		}
		var ret AzureKeyVaultKmsResponse
		return ret
	}).(AzureKeyVaultKmsResponseOutput)
}

// Whether to enable Azure Key Vault key management service. The default is false.
func (o AzureKeyVaultKmsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKmsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Identifier of Azure Key Vault key. See [key identifier format](https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name) for more details. When Azure Key Vault key management service is enabled, this field is required and must be a valid key identifier. When Azure Key Vault key management service is disabled, leave the field empty.
func (o AzureKeyVaultKmsResponsePtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKmsResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// Network access of key vault. The possible values are `Public` and `Private`. `Public` means the key vault allows public access from all networks. `Private` means the key vault disables public access and enables private link. The default value is `Public`.
func (o AzureKeyVaultKmsResponsePtrOutput) KeyVaultNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKmsResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Resource ID of key vault. When keyVaultNetworkAccess is `Private`, this field is required and must be a valid resource ID. When keyVaultNetworkAccess is `Public`, leave the field empty.
func (o AzureKeyVaultKmsResponsePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultKmsResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Settings for upgrading a cluster.
type ClusterUpgradeSettings struct {
	// Settings for overrides.
	OverrideSettings *UpgradeOverrideSettings `pulumi:"overrideSettings"`
}

// ClusterUpgradeSettingsInput is an input type that accepts ClusterUpgradeSettingsArgs and ClusterUpgradeSettingsOutput values.
// You can construct a concrete instance of `ClusterUpgradeSettingsInput` via:
//
//	ClusterUpgradeSettingsArgs{...}
type ClusterUpgradeSettingsInput interface {
	pulumi.Input

	ToClusterUpgradeSettingsOutput() ClusterUpgradeSettingsOutput
	ToClusterUpgradeSettingsOutputWithContext(context.Context) ClusterUpgradeSettingsOutput
}

// Settings for upgrading a cluster.
type ClusterUpgradeSettingsArgs struct {
	// Settings for overrides.
	OverrideSettings UpgradeOverrideSettingsPtrInput `pulumi:"overrideSettings"`
}

func (ClusterUpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeSettings)(nil)).Elem()
}

func (i ClusterUpgradeSettingsArgs) ToClusterUpgradeSettingsOutput() ClusterUpgradeSettingsOutput {
	return i.ToClusterUpgradeSettingsOutputWithContext(context.Background())
}

func (i ClusterUpgradeSettingsArgs) ToClusterUpgradeSettingsOutputWithContext(ctx context.Context) ClusterUpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeSettingsOutput)
}

func (i ClusterUpgradeSettingsArgs) ToClusterUpgradeSettingsPtrOutput() ClusterUpgradeSettingsPtrOutput {
	return i.ToClusterUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradeSettingsArgs) ToClusterUpgradeSettingsPtrOutputWithContext(ctx context.Context) ClusterUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeSettingsOutput).ToClusterUpgradeSettingsPtrOutputWithContext(ctx)
}

// ClusterUpgradeSettingsPtrInput is an input type that accepts ClusterUpgradeSettingsArgs, ClusterUpgradeSettingsPtr and ClusterUpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradeSettingsPtrInput` via:
//
//	        ClusterUpgradeSettingsArgs{...}
//
//	or:
//
//	        nil
type ClusterUpgradeSettingsPtrInput interface {
	pulumi.Input

	ToClusterUpgradeSettingsPtrOutput() ClusterUpgradeSettingsPtrOutput
	ToClusterUpgradeSettingsPtrOutputWithContext(context.Context) ClusterUpgradeSettingsPtrOutput
}

type clusterUpgradeSettingsPtrType ClusterUpgradeSettingsArgs

func ClusterUpgradeSettingsPtr(v *ClusterUpgradeSettingsArgs) ClusterUpgradeSettingsPtrInput {
	return (*clusterUpgradeSettingsPtrType)(v)
}

func (*clusterUpgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeSettings)(nil)).Elem()
}

func (i *clusterUpgradeSettingsPtrType) ToClusterUpgradeSettingsPtrOutput() ClusterUpgradeSettingsPtrOutput {
	return i.ToClusterUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradeSettingsPtrType) ToClusterUpgradeSettingsPtrOutputWithContext(ctx context.Context) ClusterUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeSettingsPtrOutput)
}

// Settings for upgrading a cluster.
type ClusterUpgradeSettingsOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeSettings)(nil)).Elem()
}

func (o ClusterUpgradeSettingsOutput) ToClusterUpgradeSettingsOutput() ClusterUpgradeSettingsOutput {
	return o
}

func (o ClusterUpgradeSettingsOutput) ToClusterUpgradeSettingsOutputWithContext(ctx context.Context) ClusterUpgradeSettingsOutput {
	return o
}

func (o ClusterUpgradeSettingsOutput) ToClusterUpgradeSettingsPtrOutput() ClusterUpgradeSettingsPtrOutput {
	return o.ToClusterUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradeSettingsOutput) ToClusterUpgradeSettingsPtrOutputWithContext(ctx context.Context) ClusterUpgradeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUpgradeSettings) *ClusterUpgradeSettings {
		return &v
	}).(ClusterUpgradeSettingsPtrOutput)
}

// Settings for overrides.
func (o ClusterUpgradeSettingsOutput) OverrideSettings() UpgradeOverrideSettingsPtrOutput {
	return o.ApplyT(func(v ClusterUpgradeSettings) *UpgradeOverrideSettings { return v.OverrideSettings }).(UpgradeOverrideSettingsPtrOutput)
}

type ClusterUpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeSettings)(nil)).Elem()
}

func (o ClusterUpgradeSettingsPtrOutput) ToClusterUpgradeSettingsPtrOutput() ClusterUpgradeSettingsPtrOutput {
	return o
}

func (o ClusterUpgradeSettingsPtrOutput) ToClusterUpgradeSettingsPtrOutputWithContext(ctx context.Context) ClusterUpgradeSettingsPtrOutput {
	return o
}

func (o ClusterUpgradeSettingsPtrOutput) Elem() ClusterUpgradeSettingsOutput {
	return o.ApplyT(func(v *ClusterUpgradeSettings) ClusterUpgradeSettings {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradeSettings
		return ret
	}).(ClusterUpgradeSettingsOutput)
}

// Settings for overrides.
func (o ClusterUpgradeSettingsPtrOutput) OverrideSettings() UpgradeOverrideSettingsPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeSettings) *UpgradeOverrideSettings {
		if v == nil {
			return nil
		}
		return v.OverrideSettings
	}).(UpgradeOverrideSettingsPtrOutput)
}

// Settings for upgrading a cluster.
type ClusterUpgradeSettingsResponse struct {
	// Settings for overrides.
	OverrideSettings *UpgradeOverrideSettingsResponse `pulumi:"overrideSettings"`
}

// Settings for upgrading a cluster.
type ClusterUpgradeSettingsResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeSettingsResponse)(nil)).Elem()
}

func (o ClusterUpgradeSettingsResponseOutput) ToClusterUpgradeSettingsResponseOutput() ClusterUpgradeSettingsResponseOutput {
	return o
}

func (o ClusterUpgradeSettingsResponseOutput) ToClusterUpgradeSettingsResponseOutputWithContext(ctx context.Context) ClusterUpgradeSettingsResponseOutput {
	return o
}

// Settings for overrides.
func (o ClusterUpgradeSettingsResponseOutput) OverrideSettings() UpgradeOverrideSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClusterUpgradeSettingsResponse) *UpgradeOverrideSettingsResponse { return v.OverrideSettings }).(UpgradeOverrideSettingsResponsePtrOutput)
}

type ClusterUpgradeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeSettingsResponse)(nil)).Elem()
}

func (o ClusterUpgradeSettingsResponsePtrOutput) ToClusterUpgradeSettingsResponsePtrOutput() ClusterUpgradeSettingsResponsePtrOutput {
	return o
}

func (o ClusterUpgradeSettingsResponsePtrOutput) ToClusterUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) ClusterUpgradeSettingsResponsePtrOutput {
	return o
}

func (o ClusterUpgradeSettingsResponsePtrOutput) Elem() ClusterUpgradeSettingsResponseOutput {
	return o.ApplyT(func(v *ClusterUpgradeSettingsResponse) ClusterUpgradeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradeSettingsResponse
		return ret
	}).(ClusterUpgradeSettingsResponseOutput)
}

// Settings for overrides.
func (o ClusterUpgradeSettingsResponsePtrOutput) OverrideSettings() UpgradeOverrideSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeSettingsResponse) *UpgradeOverrideSettingsResponse {
		if v == nil {
			return nil
		}
		return v.OverrideSettings
	}).(UpgradeOverrideSettingsResponsePtrOutput)
}

// Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfile struct {
	// The administrator username to use for Linux VMs.
	AdminUsername string `pulumi:"adminUsername"`
	// The SSH configuration for Linux-based VMs running on Azure.
	Ssh ContainerServiceSshConfiguration `pulumi:"ssh"`
}

// ContainerServiceLinuxProfileInput is an input type that accepts ContainerServiceLinuxProfileArgs and ContainerServiceLinuxProfileOutput values.
// You can construct a concrete instance of `ContainerServiceLinuxProfileInput` via:
//
//	ContainerServiceLinuxProfileArgs{...}
type ContainerServiceLinuxProfileInput interface {
	pulumi.Input

	ToContainerServiceLinuxProfileOutput() ContainerServiceLinuxProfileOutput
	ToContainerServiceLinuxProfileOutputWithContext(context.Context) ContainerServiceLinuxProfileOutput
}

// Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfileArgs struct {
	// The administrator username to use for Linux VMs.
	AdminUsername pulumi.StringInput `pulumi:"adminUsername"`
	// The SSH configuration for Linux-based VMs running on Azure.
	Ssh ContainerServiceSshConfigurationInput `pulumi:"ssh"`
}

func (ContainerServiceLinuxProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceLinuxProfile)(nil)).Elem()
}

func (i ContainerServiceLinuxProfileArgs) ToContainerServiceLinuxProfileOutput() ContainerServiceLinuxProfileOutput {
	return i.ToContainerServiceLinuxProfileOutputWithContext(context.Background())
}

func (i ContainerServiceLinuxProfileArgs) ToContainerServiceLinuxProfileOutputWithContext(ctx context.Context) ContainerServiceLinuxProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceLinuxProfileOutput)
}

func (i ContainerServiceLinuxProfileArgs) ToContainerServiceLinuxProfilePtrOutput() ContainerServiceLinuxProfilePtrOutput {
	return i.ToContainerServiceLinuxProfilePtrOutputWithContext(context.Background())
}

func (i ContainerServiceLinuxProfileArgs) ToContainerServiceLinuxProfilePtrOutputWithContext(ctx context.Context) ContainerServiceLinuxProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceLinuxProfileOutput).ToContainerServiceLinuxProfilePtrOutputWithContext(ctx)
}

// ContainerServiceLinuxProfilePtrInput is an input type that accepts ContainerServiceLinuxProfileArgs, ContainerServiceLinuxProfilePtr and ContainerServiceLinuxProfilePtrOutput values.
// You can construct a concrete instance of `ContainerServiceLinuxProfilePtrInput` via:
//
//	        ContainerServiceLinuxProfileArgs{...}
//
//	or:
//
//	        nil
type ContainerServiceLinuxProfilePtrInput interface {
	pulumi.Input

	ToContainerServiceLinuxProfilePtrOutput() ContainerServiceLinuxProfilePtrOutput
	ToContainerServiceLinuxProfilePtrOutputWithContext(context.Context) ContainerServiceLinuxProfilePtrOutput
}

type containerServiceLinuxProfilePtrType ContainerServiceLinuxProfileArgs

func ContainerServiceLinuxProfilePtr(v *ContainerServiceLinuxProfileArgs) ContainerServiceLinuxProfilePtrInput {
	return (*containerServiceLinuxProfilePtrType)(v)
}

func (*containerServiceLinuxProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceLinuxProfile)(nil)).Elem()
}

func (i *containerServiceLinuxProfilePtrType) ToContainerServiceLinuxProfilePtrOutput() ContainerServiceLinuxProfilePtrOutput {
	return i.ToContainerServiceLinuxProfilePtrOutputWithContext(context.Background())
}

func (i *containerServiceLinuxProfilePtrType) ToContainerServiceLinuxProfilePtrOutputWithContext(ctx context.Context) ContainerServiceLinuxProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceLinuxProfilePtrOutput)
}

// Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfileOutput struct{ *pulumi.OutputState }

func (ContainerServiceLinuxProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceLinuxProfile)(nil)).Elem()
}

func (o ContainerServiceLinuxProfileOutput) ToContainerServiceLinuxProfileOutput() ContainerServiceLinuxProfileOutput {
	return o
}

func (o ContainerServiceLinuxProfileOutput) ToContainerServiceLinuxProfileOutputWithContext(ctx context.Context) ContainerServiceLinuxProfileOutput {
	return o
}

func (o ContainerServiceLinuxProfileOutput) ToContainerServiceLinuxProfilePtrOutput() ContainerServiceLinuxProfilePtrOutput {
	return o.ToContainerServiceLinuxProfilePtrOutputWithContext(context.Background())
}

func (o ContainerServiceLinuxProfileOutput) ToContainerServiceLinuxProfilePtrOutputWithContext(ctx context.Context) ContainerServiceLinuxProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerServiceLinuxProfile) *ContainerServiceLinuxProfile {
		return &v
	}).(ContainerServiceLinuxProfilePtrOutput)
}

// The administrator username to use for Linux VMs.
func (o ContainerServiceLinuxProfileOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerServiceLinuxProfile) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// The SSH configuration for Linux-based VMs running on Azure.
func (o ContainerServiceLinuxProfileOutput) Ssh() ContainerServiceSshConfigurationOutput {
	return o.ApplyT(func(v ContainerServiceLinuxProfile) ContainerServiceSshConfiguration { return v.Ssh }).(ContainerServiceSshConfigurationOutput)
}

type ContainerServiceLinuxProfilePtrOutput struct{ *pulumi.OutputState }

func (ContainerServiceLinuxProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceLinuxProfile)(nil)).Elem()
}

func (o ContainerServiceLinuxProfilePtrOutput) ToContainerServiceLinuxProfilePtrOutput() ContainerServiceLinuxProfilePtrOutput {
	return o
}

func (o ContainerServiceLinuxProfilePtrOutput) ToContainerServiceLinuxProfilePtrOutputWithContext(ctx context.Context) ContainerServiceLinuxProfilePtrOutput {
	return o
}

func (o ContainerServiceLinuxProfilePtrOutput) Elem() ContainerServiceLinuxProfileOutput {
	return o.ApplyT(func(v *ContainerServiceLinuxProfile) ContainerServiceLinuxProfile {
		if v != nil {
			return *v
		}
		var ret ContainerServiceLinuxProfile
		return ret
	}).(ContainerServiceLinuxProfileOutput)
}

// The administrator username to use for Linux VMs.
func (o ContainerServiceLinuxProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceLinuxProfile) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The SSH configuration for Linux-based VMs running on Azure.
func (o ContainerServiceLinuxProfilePtrOutput) Ssh() ContainerServiceSshConfigurationPtrOutput {
	return o.ApplyT(func(v *ContainerServiceLinuxProfile) *ContainerServiceSshConfiguration {
		if v == nil {
			return nil
		}
		return &v.Ssh
	}).(ContainerServiceSshConfigurationPtrOutput)
}

// Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfileResponse struct {
	// The administrator username to use for Linux VMs.
	AdminUsername string `pulumi:"adminUsername"`
	// The SSH configuration for Linux-based VMs running on Azure.
	Ssh ContainerServiceSshConfigurationResponse `pulumi:"ssh"`
}

// Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfileResponseOutput struct{ *pulumi.OutputState }

func (ContainerServiceLinuxProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceLinuxProfileResponse)(nil)).Elem()
}

func (o ContainerServiceLinuxProfileResponseOutput) ToContainerServiceLinuxProfileResponseOutput() ContainerServiceLinuxProfileResponseOutput {
	return o
}

func (o ContainerServiceLinuxProfileResponseOutput) ToContainerServiceLinuxProfileResponseOutputWithContext(ctx context.Context) ContainerServiceLinuxProfileResponseOutput {
	return o
}

// The administrator username to use for Linux VMs.
func (o ContainerServiceLinuxProfileResponseOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerServiceLinuxProfileResponse) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// The SSH configuration for Linux-based VMs running on Azure.
func (o ContainerServiceLinuxProfileResponseOutput) Ssh() ContainerServiceSshConfigurationResponseOutput {
	return o.ApplyT(func(v ContainerServiceLinuxProfileResponse) ContainerServiceSshConfigurationResponse { return v.Ssh }).(ContainerServiceSshConfigurationResponseOutput)
}

type ContainerServiceLinuxProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerServiceLinuxProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceLinuxProfileResponse)(nil)).Elem()
}

func (o ContainerServiceLinuxProfileResponsePtrOutput) ToContainerServiceLinuxProfileResponsePtrOutput() ContainerServiceLinuxProfileResponsePtrOutput {
	return o
}

func (o ContainerServiceLinuxProfileResponsePtrOutput) ToContainerServiceLinuxProfileResponsePtrOutputWithContext(ctx context.Context) ContainerServiceLinuxProfileResponsePtrOutput {
	return o
}

func (o ContainerServiceLinuxProfileResponsePtrOutput) Elem() ContainerServiceLinuxProfileResponseOutput {
	return o.ApplyT(func(v *ContainerServiceLinuxProfileResponse) ContainerServiceLinuxProfileResponse {
		if v != nil {
			return *v
		}
		var ret ContainerServiceLinuxProfileResponse
		return ret
	}).(ContainerServiceLinuxProfileResponseOutput)
}

// The administrator username to use for Linux VMs.
func (o ContainerServiceLinuxProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceLinuxProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The SSH configuration for Linux-based VMs running on Azure.
func (o ContainerServiceLinuxProfileResponsePtrOutput) Ssh() ContainerServiceSshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ContainerServiceLinuxProfileResponse) *ContainerServiceSshConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.Ssh
	}).(ContainerServiceSshConfigurationResponsePtrOutput)
}

// Profile of network configuration.
type ContainerServiceNetworkProfile struct {
	// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
	AdvancedNetworking *AdvancedNetworking `pulumi:"advancedNetworking"`
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
	IpFamilies []string `pulumi:"ipFamilies"`
	// Profile of the cluster load balancer.
	LoadBalancerProfile *ManagedClusterLoadBalancerProfile `pulumi:"loadBalancerProfile"`
	// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// Profile of the cluster NAT gateway.
	NatGatewayProfile *ManagedClusterNATGatewayProfile `pulumi:"natGatewayProfile"`
	// Network dataplane used in the Kubernetes cluster.
	NetworkDataplane *string `pulumi:"networkDataplane"`
	// This cannot be specified if networkPlugin is anything other than 'azure'.
	NetworkMode *string `pulumi:"networkMode"`
	// Network plugin used for building the Kubernetes network.
	NetworkPlugin *string `pulumi:"networkPlugin"`
	// The mode the network plugin should use.
	NetworkPluginMode *string `pulumi:"networkPluginMode"`
	// Network policy used for building the Kubernetes network.
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
	OutboundType *string `pulumi:"outboundType"`
	// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
	PodCidr *string `pulumi:"podCidr"`
	// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs []string `pulumi:"podCidrs"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
	ServiceCidrs []string `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for ContainerServiceNetworkProfile
func (val *ContainerServiceNetworkProfile) Defaults() *ContainerServiceNetworkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DnsServiceIP == nil {
		dnsServiceIP_ := "10.0.0.10"
		tmp.DnsServiceIP = &dnsServiceIP_
	}
	tmp.LoadBalancerProfile = tmp.LoadBalancerProfile.Defaults()

	tmp.NatGatewayProfile = tmp.NatGatewayProfile.Defaults()

	if tmp.OutboundType == nil {
		outboundType_ := "loadBalancer"
		tmp.OutboundType = &outboundType_
	}
	if tmp.PodCidr == nil {
		podCidr_ := "10.244.0.0/16"
		tmp.PodCidr = &podCidr_
	}
	if tmp.ServiceCidr == nil {
		serviceCidr_ := "10.0.0.0/16"
		tmp.ServiceCidr = &serviceCidr_
	}
	return &tmp
}

// ContainerServiceNetworkProfileInput is an input type that accepts ContainerServiceNetworkProfileArgs and ContainerServiceNetworkProfileOutput values.
// You can construct a concrete instance of `ContainerServiceNetworkProfileInput` via:
//
//	ContainerServiceNetworkProfileArgs{...}
type ContainerServiceNetworkProfileInput interface {
	pulumi.Input

	ToContainerServiceNetworkProfileOutput() ContainerServiceNetworkProfileOutput
	ToContainerServiceNetworkProfileOutputWithContext(context.Context) ContainerServiceNetworkProfileOutput
}

// Profile of network configuration.
type ContainerServiceNetworkProfileArgs struct {
	// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
	AdvancedNetworking AdvancedNetworkingPtrInput `pulumi:"advancedNetworking"`
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP pulumi.StringPtrInput `pulumi:"dnsServiceIP"`
	// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// Profile of the cluster load balancer.
	LoadBalancerProfile ManagedClusterLoadBalancerProfilePtrInput `pulumi:"loadBalancerProfile"`
	// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
	LoadBalancerSku pulumi.StringPtrInput `pulumi:"loadBalancerSku"`
	// Profile of the cluster NAT gateway.
	NatGatewayProfile ManagedClusterNATGatewayProfilePtrInput `pulumi:"natGatewayProfile"`
	// Network dataplane used in the Kubernetes cluster.
	NetworkDataplane pulumi.StringPtrInput `pulumi:"networkDataplane"`
	// This cannot be specified if networkPlugin is anything other than 'azure'.
	NetworkMode pulumi.StringPtrInput `pulumi:"networkMode"`
	// Network plugin used for building the Kubernetes network.
	NetworkPlugin pulumi.StringPtrInput `pulumi:"networkPlugin"`
	// The mode the network plugin should use.
	NetworkPluginMode pulumi.StringPtrInput `pulumi:"networkPluginMode"`
	// Network policy used for building the Kubernetes network.
	NetworkPolicy pulumi.StringPtrInput `pulumi:"networkPolicy"`
	// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
	OutboundType pulumi.StringPtrInput `pulumi:"outboundType"`
	// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
	PodCidr pulumi.StringPtrInput `pulumi:"podCidr"`
	// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs pulumi.StringArrayInput `pulumi:"podCidrs"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr pulumi.StringPtrInput `pulumi:"serviceCidr"`
	// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
	ServiceCidrs pulumi.StringArrayInput `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for ContainerServiceNetworkProfileArgs
func (val *ContainerServiceNetworkProfileArgs) Defaults() *ContainerServiceNetworkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DnsServiceIP == nil {
		tmp.DnsServiceIP = pulumi.StringPtr("10.0.0.10")
	}

	if tmp.OutboundType == nil {
		tmp.OutboundType = pulumi.StringPtr("loadBalancer")
	}
	if tmp.PodCidr == nil {
		tmp.PodCidr = pulumi.StringPtr("10.244.0.0/16")
	}
	if tmp.ServiceCidr == nil {
		tmp.ServiceCidr = pulumi.StringPtr("10.0.0.0/16")
	}
	return &tmp
}
func (ContainerServiceNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceNetworkProfile)(nil)).Elem()
}

func (i ContainerServiceNetworkProfileArgs) ToContainerServiceNetworkProfileOutput() ContainerServiceNetworkProfileOutput {
	return i.ToContainerServiceNetworkProfileOutputWithContext(context.Background())
}

func (i ContainerServiceNetworkProfileArgs) ToContainerServiceNetworkProfileOutputWithContext(ctx context.Context) ContainerServiceNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceNetworkProfileOutput)
}

func (i ContainerServiceNetworkProfileArgs) ToContainerServiceNetworkProfilePtrOutput() ContainerServiceNetworkProfilePtrOutput {
	return i.ToContainerServiceNetworkProfilePtrOutputWithContext(context.Background())
}

func (i ContainerServiceNetworkProfileArgs) ToContainerServiceNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerServiceNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceNetworkProfileOutput).ToContainerServiceNetworkProfilePtrOutputWithContext(ctx)
}

// ContainerServiceNetworkProfilePtrInput is an input type that accepts ContainerServiceNetworkProfileArgs, ContainerServiceNetworkProfilePtr and ContainerServiceNetworkProfilePtrOutput values.
// You can construct a concrete instance of `ContainerServiceNetworkProfilePtrInput` via:
//
//	        ContainerServiceNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type ContainerServiceNetworkProfilePtrInput interface {
	pulumi.Input

	ToContainerServiceNetworkProfilePtrOutput() ContainerServiceNetworkProfilePtrOutput
	ToContainerServiceNetworkProfilePtrOutputWithContext(context.Context) ContainerServiceNetworkProfilePtrOutput
}

type containerServiceNetworkProfilePtrType ContainerServiceNetworkProfileArgs

func ContainerServiceNetworkProfilePtr(v *ContainerServiceNetworkProfileArgs) ContainerServiceNetworkProfilePtrInput {
	return (*containerServiceNetworkProfilePtrType)(v)
}

func (*containerServiceNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceNetworkProfile)(nil)).Elem()
}

func (i *containerServiceNetworkProfilePtrType) ToContainerServiceNetworkProfilePtrOutput() ContainerServiceNetworkProfilePtrOutput {
	return i.ToContainerServiceNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *containerServiceNetworkProfilePtrType) ToContainerServiceNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerServiceNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceNetworkProfilePtrOutput)
}

// Profile of network configuration.
type ContainerServiceNetworkProfileOutput struct{ *pulumi.OutputState }

func (ContainerServiceNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceNetworkProfile)(nil)).Elem()
}

func (o ContainerServiceNetworkProfileOutput) ToContainerServiceNetworkProfileOutput() ContainerServiceNetworkProfileOutput {
	return o
}

func (o ContainerServiceNetworkProfileOutput) ToContainerServiceNetworkProfileOutputWithContext(ctx context.Context) ContainerServiceNetworkProfileOutput {
	return o
}

func (o ContainerServiceNetworkProfileOutput) ToContainerServiceNetworkProfilePtrOutput() ContainerServiceNetworkProfilePtrOutput {
	return o.ToContainerServiceNetworkProfilePtrOutputWithContext(context.Background())
}

func (o ContainerServiceNetworkProfileOutput) ToContainerServiceNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerServiceNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerServiceNetworkProfile) *ContainerServiceNetworkProfile {
		return &v
	}).(ContainerServiceNetworkProfilePtrOutput)
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
func (o ContainerServiceNetworkProfileOutput) AdvancedNetworking() AdvancedNetworkingPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *AdvancedNetworking { return v.AdvancedNetworking }).(AdvancedNetworkingPtrOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o ContainerServiceNetworkProfileOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
func (o ContainerServiceNetworkProfileOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// Profile of the cluster load balancer.
func (o ContainerServiceNetworkProfileOutput) LoadBalancerProfile() ManagedClusterLoadBalancerProfilePtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *ManagedClusterLoadBalancerProfile {
		return v.LoadBalancerProfile
	}).(ManagedClusterLoadBalancerProfilePtrOutput)
}

// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
func (o ContainerServiceNetworkProfileOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// Profile of the cluster NAT gateway.
func (o ContainerServiceNetworkProfileOutput) NatGatewayProfile() ManagedClusterNATGatewayProfilePtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *ManagedClusterNATGatewayProfile { return v.NatGatewayProfile }).(ManagedClusterNATGatewayProfilePtrOutput)
}

// Network dataplane used in the Kubernetes cluster.
func (o ContainerServiceNetworkProfileOutput) NetworkDataplane() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.NetworkDataplane }).(pulumi.StringPtrOutput)
}

// This cannot be specified if networkPlugin is anything other than 'azure'.
func (o ContainerServiceNetworkProfileOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

// Network plugin used for building the Kubernetes network.
func (o ContainerServiceNetworkProfileOutput) NetworkPlugin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.NetworkPlugin }).(pulumi.StringPtrOutput)
}

// The mode the network plugin should use.
func (o ContainerServiceNetworkProfileOutput) NetworkPluginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.NetworkPluginMode }).(pulumi.StringPtrOutput)
}

// Network policy used for building the Kubernetes network.
func (o ContainerServiceNetworkProfileOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
func (o ContainerServiceNetworkProfileOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o ContainerServiceNetworkProfileOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.PodCidr }).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o ContainerServiceNetworkProfileOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) []string { return v.PodCidrs }).(pulumi.StringArrayOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfileOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfileOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfile) []string { return v.ServiceCidrs }).(pulumi.StringArrayOutput)
}

type ContainerServiceNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (ContainerServiceNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceNetworkProfile)(nil)).Elem()
}

func (o ContainerServiceNetworkProfilePtrOutput) ToContainerServiceNetworkProfilePtrOutput() ContainerServiceNetworkProfilePtrOutput {
	return o
}

func (o ContainerServiceNetworkProfilePtrOutput) ToContainerServiceNetworkProfilePtrOutputWithContext(ctx context.Context) ContainerServiceNetworkProfilePtrOutput {
	return o
}

func (o ContainerServiceNetworkProfilePtrOutput) Elem() ContainerServiceNetworkProfileOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) ContainerServiceNetworkProfile {
		if v != nil {
			return *v
		}
		var ret ContainerServiceNetworkProfile
		return ret
	}).(ContainerServiceNetworkProfileOutput)
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
func (o ContainerServiceNetworkProfilePtrOutput) AdvancedNetworking() AdvancedNetworkingPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *AdvancedNetworking {
		if v == nil {
			return nil
		}
		return v.AdvancedNetworking
	}).(AdvancedNetworkingPtrOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o ContainerServiceNetworkProfilePtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
func (o ContainerServiceNetworkProfilePtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// Profile of the cluster load balancer.
func (o ContainerServiceNetworkProfilePtrOutput) LoadBalancerProfile() ManagedClusterLoadBalancerProfilePtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *ManagedClusterLoadBalancerProfile {
		if v == nil {
			return nil
		}
		return v.LoadBalancerProfile
	}).(ManagedClusterLoadBalancerProfilePtrOutput)
}

// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
func (o ContainerServiceNetworkProfilePtrOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSku
	}).(pulumi.StringPtrOutput)
}

// Profile of the cluster NAT gateway.
func (o ContainerServiceNetworkProfilePtrOutput) NatGatewayProfile() ManagedClusterNATGatewayProfilePtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *ManagedClusterNATGatewayProfile {
		if v == nil {
			return nil
		}
		return v.NatGatewayProfile
	}).(ManagedClusterNATGatewayProfilePtrOutput)
}

// Network dataplane used in the Kubernetes cluster.
func (o ContainerServiceNetworkProfilePtrOutput) NetworkDataplane() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkDataplane
	}).(pulumi.StringPtrOutput)
}

// This cannot be specified if networkPlugin is anything other than 'azure'.
func (o ContainerServiceNetworkProfilePtrOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkMode
	}).(pulumi.StringPtrOutput)
}

// Network plugin used for building the Kubernetes network.
func (o ContainerServiceNetworkProfilePtrOutput) NetworkPlugin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPlugin
	}).(pulumi.StringPtrOutput)
}

// The mode the network plugin should use.
func (o ContainerServiceNetworkProfilePtrOutput) NetworkPluginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPluginMode
	}).(pulumi.StringPtrOutput)
}

// Network policy used for building the Kubernetes network.
func (o ContainerServiceNetworkProfilePtrOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPolicy
	}).(pulumi.StringPtrOutput)
}

// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
func (o ContainerServiceNetworkProfilePtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o ContainerServiceNetworkProfilePtrOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.PodCidr
	}).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o ContainerServiceNetworkProfilePtrOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.PodCidrs
	}).(pulumi.StringArrayOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfilePtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfilePtrOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ServiceCidrs
	}).(pulumi.StringArrayOutput)
}

// Profile of network configuration.
type ContainerServiceNetworkProfileResponse struct {
	// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
	AdvancedNetworking *AdvancedNetworkingResponse `pulumi:"advancedNetworking"`
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
	IpFamilies []string `pulumi:"ipFamilies"`
	// Profile of the cluster load balancer.
	LoadBalancerProfile *ManagedClusterLoadBalancerProfileResponse `pulumi:"loadBalancerProfile"`
	// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// Profile of the cluster NAT gateway.
	NatGatewayProfile *ManagedClusterNATGatewayProfileResponse `pulumi:"natGatewayProfile"`
	// Network dataplane used in the Kubernetes cluster.
	NetworkDataplane *string `pulumi:"networkDataplane"`
	// This cannot be specified if networkPlugin is anything other than 'azure'.
	NetworkMode *string `pulumi:"networkMode"`
	// Network plugin used for building the Kubernetes network.
	NetworkPlugin *string `pulumi:"networkPlugin"`
	// The mode the network plugin should use.
	NetworkPluginMode *string `pulumi:"networkPluginMode"`
	// Network policy used for building the Kubernetes network.
	NetworkPolicy *string `pulumi:"networkPolicy"`
	// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
	OutboundType *string `pulumi:"outboundType"`
	// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
	PodCidr *string `pulumi:"podCidr"`
	// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs []string `pulumi:"podCidrs"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
	ServiceCidrs []string `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for ContainerServiceNetworkProfileResponse
func (val *ContainerServiceNetworkProfileResponse) Defaults() *ContainerServiceNetworkProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DnsServiceIP == nil {
		dnsServiceIP_ := "10.0.0.10"
		tmp.DnsServiceIP = &dnsServiceIP_
	}
	tmp.LoadBalancerProfile = tmp.LoadBalancerProfile.Defaults()

	tmp.NatGatewayProfile = tmp.NatGatewayProfile.Defaults()

	if tmp.OutboundType == nil {
		outboundType_ := "loadBalancer"
		tmp.OutboundType = &outboundType_
	}
	if tmp.PodCidr == nil {
		podCidr_ := "10.244.0.0/16"
		tmp.PodCidr = &podCidr_
	}
	if tmp.ServiceCidr == nil {
		serviceCidr_ := "10.0.0.0/16"
		tmp.ServiceCidr = &serviceCidr_
	}
	return &tmp
}

// Profile of network configuration.
type ContainerServiceNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (ContainerServiceNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceNetworkProfileResponse)(nil)).Elem()
}

func (o ContainerServiceNetworkProfileResponseOutput) ToContainerServiceNetworkProfileResponseOutput() ContainerServiceNetworkProfileResponseOutput {
	return o
}

func (o ContainerServiceNetworkProfileResponseOutput) ToContainerServiceNetworkProfileResponseOutputWithContext(ctx context.Context) ContainerServiceNetworkProfileResponseOutput {
	return o
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
func (o ContainerServiceNetworkProfileResponseOutput) AdvancedNetworking() AdvancedNetworkingResponsePtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *AdvancedNetworkingResponse {
		return v.AdvancedNetworking
	}).(AdvancedNetworkingResponsePtrOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o ContainerServiceNetworkProfileResponseOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
func (o ContainerServiceNetworkProfileResponseOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// Profile of the cluster load balancer.
func (o ContainerServiceNetworkProfileResponseOutput) LoadBalancerProfile() ManagedClusterLoadBalancerProfileResponsePtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *ManagedClusterLoadBalancerProfileResponse {
		return v.LoadBalancerProfile
	}).(ManagedClusterLoadBalancerProfileResponsePtrOutput)
}

// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
func (o ContainerServiceNetworkProfileResponseOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// Profile of the cluster NAT gateway.
func (o ContainerServiceNetworkProfileResponseOutput) NatGatewayProfile() ManagedClusterNATGatewayProfileResponsePtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *ManagedClusterNATGatewayProfileResponse {
		return v.NatGatewayProfile
	}).(ManagedClusterNATGatewayProfileResponsePtrOutput)
}

// Network dataplane used in the Kubernetes cluster.
func (o ContainerServiceNetworkProfileResponseOutput) NetworkDataplane() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.NetworkDataplane }).(pulumi.StringPtrOutput)
}

// This cannot be specified if networkPlugin is anything other than 'azure'.
func (o ContainerServiceNetworkProfileResponseOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

// Network plugin used for building the Kubernetes network.
func (o ContainerServiceNetworkProfileResponseOutput) NetworkPlugin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.NetworkPlugin }).(pulumi.StringPtrOutput)
}

// The mode the network plugin should use.
func (o ContainerServiceNetworkProfileResponseOutput) NetworkPluginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.NetworkPluginMode }).(pulumi.StringPtrOutput)
}

// Network policy used for building the Kubernetes network.
func (o ContainerServiceNetworkProfileResponseOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
func (o ContainerServiceNetworkProfileResponseOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o ContainerServiceNetworkProfileResponseOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.PodCidr }).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o ContainerServiceNetworkProfileResponseOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) []string { return v.PodCidrs }).(pulumi.StringArrayOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfileResponseOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfileResponseOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerServiceNetworkProfileResponse) []string { return v.ServiceCidrs }).(pulumi.StringArrayOutput)
}

type ContainerServiceNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerServiceNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceNetworkProfileResponse)(nil)).Elem()
}

func (o ContainerServiceNetworkProfileResponsePtrOutput) ToContainerServiceNetworkProfileResponsePtrOutput() ContainerServiceNetworkProfileResponsePtrOutput {
	return o
}

func (o ContainerServiceNetworkProfileResponsePtrOutput) ToContainerServiceNetworkProfileResponsePtrOutputWithContext(ctx context.Context) ContainerServiceNetworkProfileResponsePtrOutput {
	return o
}

func (o ContainerServiceNetworkProfileResponsePtrOutput) Elem() ContainerServiceNetworkProfileResponseOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) ContainerServiceNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret ContainerServiceNetworkProfileResponse
		return ret
	}).(ContainerServiceNetworkProfileResponseOutput)
}

// Advanced Networking profile for enabling observability and security feature suite on a cluster. For more information see aka.ms/aksadvancednetworking.
func (o ContainerServiceNetworkProfileResponsePtrOutput) AdvancedNetworking() AdvancedNetworkingResponsePtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *AdvancedNetworkingResponse {
		if v == nil {
			return nil
		}
		return v.AdvancedNetworking
	}).(AdvancedNetworkingResponsePtrOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o ContainerServiceNetworkProfileResponsePtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// IP families are used to determine single-stack or dual-stack clusters. For single-stack, the expected value is IPv4. For dual-stack, the expected values are IPv4 and IPv6.
func (o ContainerServiceNetworkProfileResponsePtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// Profile of the cluster load balancer.
func (o ContainerServiceNetworkProfileResponsePtrOutput) LoadBalancerProfile() ManagedClusterLoadBalancerProfileResponsePtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *ManagedClusterLoadBalancerProfileResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancerProfile
	}).(ManagedClusterLoadBalancerProfileResponsePtrOutput)
}

// The default is 'standard'. See [Azure Load Balancer SKUs](https://docs.microsoft.com/azure/load-balancer/skus) for more information about the differences between load balancer SKUs.
func (o ContainerServiceNetworkProfileResponsePtrOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSku
	}).(pulumi.StringPtrOutput)
}

// Profile of the cluster NAT gateway.
func (o ContainerServiceNetworkProfileResponsePtrOutput) NatGatewayProfile() ManagedClusterNATGatewayProfileResponsePtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *ManagedClusterNATGatewayProfileResponse {
		if v == nil {
			return nil
		}
		return v.NatGatewayProfile
	}).(ManagedClusterNATGatewayProfileResponsePtrOutput)
}

// Network dataplane used in the Kubernetes cluster.
func (o ContainerServiceNetworkProfileResponsePtrOutput) NetworkDataplane() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkDataplane
	}).(pulumi.StringPtrOutput)
}

// This cannot be specified if networkPlugin is anything other than 'azure'.
func (o ContainerServiceNetworkProfileResponsePtrOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkMode
	}).(pulumi.StringPtrOutput)
}

// Network plugin used for building the Kubernetes network.
func (o ContainerServiceNetworkProfileResponsePtrOutput) NetworkPlugin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPlugin
	}).(pulumi.StringPtrOutput)
}

// The mode the network plugin should use.
func (o ContainerServiceNetworkProfileResponsePtrOutput) NetworkPluginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPluginMode
	}).(pulumi.StringPtrOutput)
}

// Network policy used for building the Kubernetes network.
func (o ContainerServiceNetworkProfileResponsePtrOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetworkPolicy
	}).(pulumi.StringPtrOutput)
}

// This can only be set at cluster creation time and cannot be changed later. For more information see [egress outbound type](https://docs.microsoft.com/azure/aks/egress-outboundtype).
func (o ContainerServiceNetworkProfileResponsePtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign pod IPs when kubenet is used.
func (o ContainerServiceNetworkProfileResponsePtrOutput) PodCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.PodCidr
	}).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o ContainerServiceNetworkProfileResponsePtrOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.PodCidrs
	}).(pulumi.StringArrayOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfileResponsePtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking. They must not overlap with any Subnet IP ranges.
func (o ContainerServiceNetworkProfileResponsePtrOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerServiceNetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.ServiceCidrs
	}).(pulumi.StringArrayOutput)
}

// SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSshConfiguration struct {
	// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
	PublicKeys []ContainerServiceSshPublicKey `pulumi:"publicKeys"`
}

// ContainerServiceSshConfigurationInput is an input type that accepts ContainerServiceSshConfigurationArgs and ContainerServiceSshConfigurationOutput values.
// You can construct a concrete instance of `ContainerServiceSshConfigurationInput` via:
//
//	ContainerServiceSshConfigurationArgs{...}
type ContainerServiceSshConfigurationInput interface {
	pulumi.Input

	ToContainerServiceSshConfigurationOutput() ContainerServiceSshConfigurationOutput
	ToContainerServiceSshConfigurationOutputWithContext(context.Context) ContainerServiceSshConfigurationOutput
}

// SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSshConfigurationArgs struct {
	// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
	PublicKeys ContainerServiceSshPublicKeyArrayInput `pulumi:"publicKeys"`
}

func (ContainerServiceSshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceSshConfiguration)(nil)).Elem()
}

func (i ContainerServiceSshConfigurationArgs) ToContainerServiceSshConfigurationOutput() ContainerServiceSshConfigurationOutput {
	return i.ToContainerServiceSshConfigurationOutputWithContext(context.Background())
}

func (i ContainerServiceSshConfigurationArgs) ToContainerServiceSshConfigurationOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceSshConfigurationOutput)
}

func (i ContainerServiceSshConfigurationArgs) ToContainerServiceSshConfigurationPtrOutput() ContainerServiceSshConfigurationPtrOutput {
	return i.ToContainerServiceSshConfigurationPtrOutputWithContext(context.Background())
}

func (i ContainerServiceSshConfigurationArgs) ToContainerServiceSshConfigurationPtrOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceSshConfigurationOutput).ToContainerServiceSshConfigurationPtrOutputWithContext(ctx)
}

// ContainerServiceSshConfigurationPtrInput is an input type that accepts ContainerServiceSshConfigurationArgs, ContainerServiceSshConfigurationPtr and ContainerServiceSshConfigurationPtrOutput values.
// You can construct a concrete instance of `ContainerServiceSshConfigurationPtrInput` via:
//
//	        ContainerServiceSshConfigurationArgs{...}
//
//	or:
//
//	        nil
type ContainerServiceSshConfigurationPtrInput interface {
	pulumi.Input

	ToContainerServiceSshConfigurationPtrOutput() ContainerServiceSshConfigurationPtrOutput
	ToContainerServiceSshConfigurationPtrOutputWithContext(context.Context) ContainerServiceSshConfigurationPtrOutput
}

type containerServiceSshConfigurationPtrType ContainerServiceSshConfigurationArgs

func ContainerServiceSshConfigurationPtr(v *ContainerServiceSshConfigurationArgs) ContainerServiceSshConfigurationPtrInput {
	return (*containerServiceSshConfigurationPtrType)(v)
}

func (*containerServiceSshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceSshConfiguration)(nil)).Elem()
}

func (i *containerServiceSshConfigurationPtrType) ToContainerServiceSshConfigurationPtrOutput() ContainerServiceSshConfigurationPtrOutput {
	return i.ToContainerServiceSshConfigurationPtrOutputWithContext(context.Background())
}

func (i *containerServiceSshConfigurationPtrType) ToContainerServiceSshConfigurationPtrOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceSshConfigurationPtrOutput)
}

// SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSshConfigurationOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceSshConfiguration)(nil)).Elem()
}

func (o ContainerServiceSshConfigurationOutput) ToContainerServiceSshConfigurationOutput() ContainerServiceSshConfigurationOutput {
	return o
}

func (o ContainerServiceSshConfigurationOutput) ToContainerServiceSshConfigurationOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationOutput {
	return o
}

func (o ContainerServiceSshConfigurationOutput) ToContainerServiceSshConfigurationPtrOutput() ContainerServiceSshConfigurationPtrOutput {
	return o.ToContainerServiceSshConfigurationPtrOutputWithContext(context.Background())
}

func (o ContainerServiceSshConfigurationOutput) ToContainerServiceSshConfigurationPtrOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerServiceSshConfiguration) *ContainerServiceSshConfiguration {
		return &v
	}).(ContainerServiceSshConfigurationPtrOutput)
}

// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
func (o ContainerServiceSshConfigurationOutput) PublicKeys() ContainerServiceSshPublicKeyArrayOutput {
	return o.ApplyT(func(v ContainerServiceSshConfiguration) []ContainerServiceSshPublicKey { return v.PublicKeys }).(ContainerServiceSshPublicKeyArrayOutput)
}

type ContainerServiceSshConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceSshConfiguration)(nil)).Elem()
}

func (o ContainerServiceSshConfigurationPtrOutput) ToContainerServiceSshConfigurationPtrOutput() ContainerServiceSshConfigurationPtrOutput {
	return o
}

func (o ContainerServiceSshConfigurationPtrOutput) ToContainerServiceSshConfigurationPtrOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationPtrOutput {
	return o
}

func (o ContainerServiceSshConfigurationPtrOutput) Elem() ContainerServiceSshConfigurationOutput {
	return o.ApplyT(func(v *ContainerServiceSshConfiguration) ContainerServiceSshConfiguration {
		if v != nil {
			return *v
		}
		var ret ContainerServiceSshConfiguration
		return ret
	}).(ContainerServiceSshConfigurationOutput)
}

// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
func (o ContainerServiceSshConfigurationPtrOutput) PublicKeys() ContainerServiceSshPublicKeyArrayOutput {
	return o.ApplyT(func(v *ContainerServiceSshConfiguration) []ContainerServiceSshPublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(ContainerServiceSshPublicKeyArrayOutput)
}

// SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSshConfigurationResponse struct {
	// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
	PublicKeys []ContainerServiceSshPublicKeyResponse `pulumi:"publicKeys"`
}

// SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSshConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceSshConfigurationResponse)(nil)).Elem()
}

func (o ContainerServiceSshConfigurationResponseOutput) ToContainerServiceSshConfigurationResponseOutput() ContainerServiceSshConfigurationResponseOutput {
	return o
}

func (o ContainerServiceSshConfigurationResponseOutput) ToContainerServiceSshConfigurationResponseOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationResponseOutput {
	return o
}

// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
func (o ContainerServiceSshConfigurationResponseOutput) PublicKeys() ContainerServiceSshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v ContainerServiceSshConfigurationResponse) []ContainerServiceSshPublicKeyResponse {
		return v.PublicKeys
	}).(ContainerServiceSshPublicKeyResponseArrayOutput)
}

type ContainerServiceSshConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerServiceSshConfigurationResponse)(nil)).Elem()
}

func (o ContainerServiceSshConfigurationResponsePtrOutput) ToContainerServiceSshConfigurationResponsePtrOutput() ContainerServiceSshConfigurationResponsePtrOutput {
	return o
}

func (o ContainerServiceSshConfigurationResponsePtrOutput) ToContainerServiceSshConfigurationResponsePtrOutputWithContext(ctx context.Context) ContainerServiceSshConfigurationResponsePtrOutput {
	return o
}

func (o ContainerServiceSshConfigurationResponsePtrOutput) Elem() ContainerServiceSshConfigurationResponseOutput {
	return o.ApplyT(func(v *ContainerServiceSshConfigurationResponse) ContainerServiceSshConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ContainerServiceSshConfigurationResponse
		return ret
	}).(ContainerServiceSshConfigurationResponseOutput)
}

// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
func (o ContainerServiceSshConfigurationResponsePtrOutput) PublicKeys() ContainerServiceSshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v *ContainerServiceSshConfigurationResponse) []ContainerServiceSshPublicKeyResponse {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(ContainerServiceSshPublicKeyResponseArrayOutput)
}

// Contains information about SSH certificate public key data.
type ContainerServiceSshPublicKey struct {
	// Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData string `pulumi:"keyData"`
}

// ContainerServiceSshPublicKeyInput is an input type that accepts ContainerServiceSshPublicKeyArgs and ContainerServiceSshPublicKeyOutput values.
// You can construct a concrete instance of `ContainerServiceSshPublicKeyInput` via:
//
//	ContainerServiceSshPublicKeyArgs{...}
type ContainerServiceSshPublicKeyInput interface {
	pulumi.Input

	ToContainerServiceSshPublicKeyOutput() ContainerServiceSshPublicKeyOutput
	ToContainerServiceSshPublicKeyOutputWithContext(context.Context) ContainerServiceSshPublicKeyOutput
}

// Contains information about SSH certificate public key data.
type ContainerServiceSshPublicKeyArgs struct {
	// Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData pulumi.StringInput `pulumi:"keyData"`
}

func (ContainerServiceSshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceSshPublicKey)(nil)).Elem()
}

func (i ContainerServiceSshPublicKeyArgs) ToContainerServiceSshPublicKeyOutput() ContainerServiceSshPublicKeyOutput {
	return i.ToContainerServiceSshPublicKeyOutputWithContext(context.Background())
}

func (i ContainerServiceSshPublicKeyArgs) ToContainerServiceSshPublicKeyOutputWithContext(ctx context.Context) ContainerServiceSshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceSshPublicKeyOutput)
}

// ContainerServiceSshPublicKeyArrayInput is an input type that accepts ContainerServiceSshPublicKeyArray and ContainerServiceSshPublicKeyArrayOutput values.
// You can construct a concrete instance of `ContainerServiceSshPublicKeyArrayInput` via:
//
//	ContainerServiceSshPublicKeyArray{ ContainerServiceSshPublicKeyArgs{...} }
type ContainerServiceSshPublicKeyArrayInput interface {
	pulumi.Input

	ToContainerServiceSshPublicKeyArrayOutput() ContainerServiceSshPublicKeyArrayOutput
	ToContainerServiceSshPublicKeyArrayOutputWithContext(context.Context) ContainerServiceSshPublicKeyArrayOutput
}

type ContainerServiceSshPublicKeyArray []ContainerServiceSshPublicKeyInput

func (ContainerServiceSshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerServiceSshPublicKey)(nil)).Elem()
}

func (i ContainerServiceSshPublicKeyArray) ToContainerServiceSshPublicKeyArrayOutput() ContainerServiceSshPublicKeyArrayOutput {
	return i.ToContainerServiceSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i ContainerServiceSshPublicKeyArray) ToContainerServiceSshPublicKeyArrayOutputWithContext(ctx context.Context) ContainerServiceSshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerServiceSshPublicKeyArrayOutput)
}

// Contains information about SSH certificate public key data.
type ContainerServiceSshPublicKeyOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceSshPublicKey)(nil)).Elem()
}

func (o ContainerServiceSshPublicKeyOutput) ToContainerServiceSshPublicKeyOutput() ContainerServiceSshPublicKeyOutput {
	return o
}

func (o ContainerServiceSshPublicKeyOutput) ToContainerServiceSshPublicKeyOutputWithContext(ctx context.Context) ContainerServiceSshPublicKeyOutput {
	return o
}

// Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
func (o ContainerServiceSshPublicKeyOutput) KeyData() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerServiceSshPublicKey) string { return v.KeyData }).(pulumi.StringOutput)
}

type ContainerServiceSshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerServiceSshPublicKey)(nil)).Elem()
}

func (o ContainerServiceSshPublicKeyArrayOutput) ToContainerServiceSshPublicKeyArrayOutput() ContainerServiceSshPublicKeyArrayOutput {
	return o
}

func (o ContainerServiceSshPublicKeyArrayOutput) ToContainerServiceSshPublicKeyArrayOutputWithContext(ctx context.Context) ContainerServiceSshPublicKeyArrayOutput {
	return o
}

func (o ContainerServiceSshPublicKeyArrayOutput) Index(i pulumi.IntInput) ContainerServiceSshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerServiceSshPublicKey {
		return vs[0].([]ContainerServiceSshPublicKey)[vs[1].(int)]
	}).(ContainerServiceSshPublicKeyOutput)
}

// Contains information about SSH certificate public key data.
type ContainerServiceSshPublicKeyResponse struct {
	// Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData string `pulumi:"keyData"`
}

// Contains information about SSH certificate public key data.
type ContainerServiceSshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerServiceSshPublicKeyResponse)(nil)).Elem()
}

func (o ContainerServiceSshPublicKeyResponseOutput) ToContainerServiceSshPublicKeyResponseOutput() ContainerServiceSshPublicKeyResponseOutput {
	return o
}

func (o ContainerServiceSshPublicKeyResponseOutput) ToContainerServiceSshPublicKeyResponseOutputWithContext(ctx context.Context) ContainerServiceSshPublicKeyResponseOutput {
	return o
}

// Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
func (o ContainerServiceSshPublicKeyResponseOutput) KeyData() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerServiceSshPublicKeyResponse) string { return v.KeyData }).(pulumi.StringOutput)
}

type ContainerServiceSshPublicKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerServiceSshPublicKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerServiceSshPublicKeyResponse)(nil)).Elem()
}

func (o ContainerServiceSshPublicKeyResponseArrayOutput) ToContainerServiceSshPublicKeyResponseArrayOutput() ContainerServiceSshPublicKeyResponseArrayOutput {
	return o
}

func (o ContainerServiceSshPublicKeyResponseArrayOutput) ToContainerServiceSshPublicKeyResponseArrayOutputWithContext(ctx context.Context) ContainerServiceSshPublicKeyResponseArrayOutput {
	return o
}

func (o ContainerServiceSshPublicKeyResponseArrayOutput) Index(i pulumi.IntInput) ContainerServiceSshPublicKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerServiceSshPublicKeyResponse {
		return vs[0].([]ContainerServiceSshPublicKeyResponse)[vs[1].(int)]
	}).(ContainerServiceSshPublicKeyResponseOutput)
}

// Data used when creating a target resource from a source resource.
type CreationData struct {
	// This is the ARM ID of the source object to be used to create the target object.
	SourceResourceId *string `pulumi:"sourceResourceId"`
}

// CreationDataInput is an input type that accepts CreationDataArgs and CreationDataOutput values.
// You can construct a concrete instance of `CreationDataInput` via:
//
//	CreationDataArgs{...}
type CreationDataInput interface {
	pulumi.Input

	ToCreationDataOutput() CreationDataOutput
	ToCreationDataOutputWithContext(context.Context) CreationDataOutput
}

// Data used when creating a target resource from a source resource.
type CreationDataArgs struct {
	// This is the ARM ID of the source object to be used to create the target object.
	SourceResourceId pulumi.StringPtrInput `pulumi:"sourceResourceId"`
}

func (CreationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (i CreationDataArgs) ToCreationDataOutput() CreationDataOutput {
	return i.ToCreationDataOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput)
}

func (i CreationDataArgs) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i CreationDataArgs) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataOutput).ToCreationDataPtrOutputWithContext(ctx)
}

// CreationDataPtrInput is an input type that accepts CreationDataArgs, CreationDataPtr and CreationDataPtrOutput values.
// You can construct a concrete instance of `CreationDataPtrInput` via:
//
//	        CreationDataArgs{...}
//
//	or:
//
//	        nil
type CreationDataPtrInput interface {
	pulumi.Input

	ToCreationDataPtrOutput() CreationDataPtrOutput
	ToCreationDataPtrOutputWithContext(context.Context) CreationDataPtrOutput
}

type creationDataPtrType CreationDataArgs

func CreationDataPtr(v *CreationDataArgs) CreationDataPtrInput {
	return (*creationDataPtrType)(v)
}

func (*creationDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (i *creationDataPtrType) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return i.ToCreationDataPtrOutputWithContext(context.Background())
}

func (i *creationDataPtrType) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreationDataPtrOutput)
}

// Data used when creating a target resource from a source resource.
type CreationDataOutput struct{ *pulumi.OutputState }

func (CreationDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationData)(nil)).Elem()
}

func (o CreationDataOutput) ToCreationDataOutput() CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataOutputWithContext(ctx context.Context) CreationDataOutput {
	return o
}

func (o CreationDataOutput) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return o.ToCreationDataPtrOutputWithContext(context.Background())
}

func (o CreationDataOutput) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CreationData) *CreationData {
		return &v
	}).(CreationDataPtrOutput)
}

// This is the ARM ID of the source object to be used to create the target object.
func (o CreationDataOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationData) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

type CreationDataPtrOutput struct{ *pulumi.OutputState }

func (CreationDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationData)(nil)).Elem()
}

func (o CreationDataPtrOutput) ToCreationDataPtrOutput() CreationDataPtrOutput {
	return o
}

func (o CreationDataPtrOutput) ToCreationDataPtrOutputWithContext(ctx context.Context) CreationDataPtrOutput {
	return o
}

func (o CreationDataPtrOutput) Elem() CreationDataOutput {
	return o.ApplyT(func(v *CreationData) CreationData {
		if v != nil {
			return *v
		}
		var ret CreationData
		return ret
	}).(CreationDataOutput)
}

// This is the ARM ID of the source object to be used to create the target object.
func (o CreationDataPtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationData) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// Data used when creating a target resource from a source resource.
type CreationDataResponse struct {
	// This is the ARM ID of the source object to be used to create the target object.
	SourceResourceId *string `pulumi:"sourceResourceId"`
}

// Data used when creating a target resource from a source resource.
type CreationDataResponseOutput struct{ *pulumi.OutputState }

func (CreationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutput() CreationDataResponseOutput {
	return o
}

func (o CreationDataResponseOutput) ToCreationDataResponseOutputWithContext(ctx context.Context) CreationDataResponseOutput {
	return o
}

// This is the ARM ID of the source object to be used to create the target object.
func (o CreationDataResponseOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreationDataResponse) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

type CreationDataResponsePtrOutput struct{ *pulumi.OutputState }

func (CreationDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreationDataResponse)(nil)).Elem()
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutput() CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) ToCreationDataResponsePtrOutputWithContext(ctx context.Context) CreationDataResponsePtrOutput {
	return o
}

func (o CreationDataResponsePtrOutput) Elem() CreationDataResponseOutput {
	return o.ApplyT(func(v *CreationDataResponse) CreationDataResponse {
		if v != nil {
			return *v
		}
		var ret CreationDataResponse
		return ret
	}).(CreationDataResponseOutput)
}

// This is the ARM ID of the source object to be used to create the target object.
func (o CreationDataResponsePtrOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreationDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceResourceId
	}).(pulumi.StringPtrOutput)
}

// The credential result response.
type CredentialResultResponse struct {
	// The name of the credential.
	Name string `pulumi:"name"`
	// Base64-encoded Kubernetes configuration file.
	Value string `pulumi:"value"`
}

// The credential result response.
type CredentialResultResponseOutput struct{ *pulumi.OutputState }

func (CredentialResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CredentialResultResponse)(nil)).Elem()
}

func (o CredentialResultResponseOutput) ToCredentialResultResponseOutput() CredentialResultResponseOutput {
	return o
}

func (o CredentialResultResponseOutput) ToCredentialResultResponseOutputWithContext(ctx context.Context) CredentialResultResponseOutput {
	return o
}

// The name of the credential.
func (o CredentialResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CredentialResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Base64-encoded Kubernetes configuration file.
func (o CredentialResultResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CredentialResultResponse) string { return v.Value }).(pulumi.StringOutput)
}

type CredentialResultResponseArrayOutput struct{ *pulumi.OutputState }

func (CredentialResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CredentialResultResponse)(nil)).Elem()
}

func (o CredentialResultResponseArrayOutput) ToCredentialResultResponseArrayOutput() CredentialResultResponseArrayOutput {
	return o
}

func (o CredentialResultResponseArrayOutput) ToCredentialResultResponseArrayOutputWithContext(ctx context.Context) CredentialResultResponseArrayOutput {
	return o
}

func (o CredentialResultResponseArrayOutput) Index(i pulumi.IntInput) CredentialResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CredentialResultResponse {
		return vs[0].([]CredentialResultResponse)[vs[1].(int)]
	}).(CredentialResultResponseOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailySchedule struct {
	// Specifies the number of days between each set of occurrences.
	IntervalDays int `pulumi:"intervalDays"`
}

// DailyScheduleInput is an input type that accepts DailyScheduleArgs and DailyScheduleOutput values.
// You can construct a concrete instance of `DailyScheduleInput` via:
//
//	DailyScheduleArgs{...}
type DailyScheduleInput interface {
	pulumi.Input

	ToDailyScheduleOutput() DailyScheduleOutput
	ToDailyScheduleOutputWithContext(context.Context) DailyScheduleOutput
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailyScheduleArgs struct {
	// Specifies the number of days between each set of occurrences.
	IntervalDays pulumi.IntInput `pulumi:"intervalDays"`
}

func (DailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailySchedule)(nil)).Elem()
}

func (i DailyScheduleArgs) ToDailyScheduleOutput() DailyScheduleOutput {
	return i.ToDailyScheduleOutputWithContext(context.Background())
}

func (i DailyScheduleArgs) ToDailyScheduleOutputWithContext(ctx context.Context) DailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleOutput)
}

func (i DailyScheduleArgs) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return i.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (i DailyScheduleArgs) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleOutput).ToDailySchedulePtrOutputWithContext(ctx)
}

// DailySchedulePtrInput is an input type that accepts DailyScheduleArgs, DailySchedulePtr and DailySchedulePtrOutput values.
// You can construct a concrete instance of `DailySchedulePtrInput` via:
//
//	        DailyScheduleArgs{...}
//
//	or:
//
//	        nil
type DailySchedulePtrInput interface {
	pulumi.Input

	ToDailySchedulePtrOutput() DailySchedulePtrOutput
	ToDailySchedulePtrOutputWithContext(context.Context) DailySchedulePtrOutput
}

type dailySchedulePtrType DailyScheduleArgs

func DailySchedulePtr(v *DailyScheduleArgs) DailySchedulePtrInput {
	return (*dailySchedulePtrType)(v)
}

func (*dailySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailySchedule)(nil)).Elem()
}

func (i *dailySchedulePtrType) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return i.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (i *dailySchedulePtrType) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailySchedulePtrOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailyScheduleOutput struct{ *pulumi.OutputState }

func (DailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailySchedule)(nil)).Elem()
}

func (o DailyScheduleOutput) ToDailyScheduleOutput() DailyScheduleOutput {
	return o
}

func (o DailyScheduleOutput) ToDailyScheduleOutputWithContext(ctx context.Context) DailyScheduleOutput {
	return o
}

func (o DailyScheduleOutput) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return o.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (o DailyScheduleOutput) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DailySchedule) *DailySchedule {
		return &v
	}).(DailySchedulePtrOutput)
}

// Specifies the number of days between each set of occurrences.
func (o DailyScheduleOutput) IntervalDays() pulumi.IntOutput {
	return o.ApplyT(func(v DailySchedule) int { return v.IntervalDays }).(pulumi.IntOutput)
}

type DailySchedulePtrOutput struct{ *pulumi.OutputState }

func (DailySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailySchedule)(nil)).Elem()
}

func (o DailySchedulePtrOutput) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return o
}

func (o DailySchedulePtrOutput) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return o
}

func (o DailySchedulePtrOutput) Elem() DailyScheduleOutput {
	return o.ApplyT(func(v *DailySchedule) DailySchedule {
		if v != nil {
			return *v
		}
		var ret DailySchedule
		return ret
	}).(DailyScheduleOutput)
}

// Specifies the number of days between each set of occurrences.
func (o DailySchedulePtrOutput) IntervalDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalDays
	}).(pulumi.IntPtrOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailyScheduleResponse struct {
	// Specifies the number of days between each set of occurrences.
	IntervalDays int `pulumi:"intervalDays"`
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
type DailyScheduleResponseOutput struct{ *pulumi.OutputState }

func (DailyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyScheduleResponse)(nil)).Elem()
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponseOutput() DailyScheduleResponseOutput {
	return o
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponseOutputWithContext(ctx context.Context) DailyScheduleResponseOutput {
	return o
}

// Specifies the number of days between each set of occurrences.
func (o DailyScheduleResponseOutput) IntervalDays() pulumi.IntOutput {
	return o.ApplyT(func(v DailyScheduleResponse) int { return v.IntervalDays }).(pulumi.IntOutput)
}

type DailyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (DailyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyScheduleResponse)(nil)).Elem()
}

func (o DailyScheduleResponsePtrOutput) ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput {
	return o
}

func (o DailyScheduleResponsePtrOutput) ToDailyScheduleResponsePtrOutputWithContext(ctx context.Context) DailyScheduleResponsePtrOutput {
	return o
}

func (o DailyScheduleResponsePtrOutput) Elem() DailyScheduleResponseOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) DailyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret DailyScheduleResponse
		return ret
	}).(DailyScheduleResponseOutput)
}

// Specifies the number of days between each set of occurrences.
func (o DailyScheduleResponsePtrOutput) IntervalDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalDays
	}).(pulumi.IntPtrOutput)
}

// For example, between '2022-12-23' and '2023-01-05'.
type DateSpan struct {
	// The end date of the date span.
	End string `pulumi:"end"`
	// The start date of the date span.
	Start string `pulumi:"start"`
}

// DateSpanInput is an input type that accepts DateSpanArgs and DateSpanOutput values.
// You can construct a concrete instance of `DateSpanInput` via:
//
//	DateSpanArgs{...}
type DateSpanInput interface {
	pulumi.Input

	ToDateSpanOutput() DateSpanOutput
	ToDateSpanOutputWithContext(context.Context) DateSpanOutput
}

// For example, between '2022-12-23' and '2023-01-05'.
type DateSpanArgs struct {
	// The end date of the date span.
	End pulumi.StringInput `pulumi:"end"`
	// The start date of the date span.
	Start pulumi.StringInput `pulumi:"start"`
}

func (DateSpanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DateSpan)(nil)).Elem()
}

func (i DateSpanArgs) ToDateSpanOutput() DateSpanOutput {
	return i.ToDateSpanOutputWithContext(context.Background())
}

func (i DateSpanArgs) ToDateSpanOutputWithContext(ctx context.Context) DateSpanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateSpanOutput)
}

// DateSpanArrayInput is an input type that accepts DateSpanArray and DateSpanArrayOutput values.
// You can construct a concrete instance of `DateSpanArrayInput` via:
//
//	DateSpanArray{ DateSpanArgs{...} }
type DateSpanArrayInput interface {
	pulumi.Input

	ToDateSpanArrayOutput() DateSpanArrayOutput
	ToDateSpanArrayOutputWithContext(context.Context) DateSpanArrayOutput
}

type DateSpanArray []DateSpanInput

func (DateSpanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DateSpan)(nil)).Elem()
}

func (i DateSpanArray) ToDateSpanArrayOutput() DateSpanArrayOutput {
	return i.ToDateSpanArrayOutputWithContext(context.Background())
}

func (i DateSpanArray) ToDateSpanArrayOutputWithContext(ctx context.Context) DateSpanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateSpanArrayOutput)
}

// For example, between '2022-12-23' and '2023-01-05'.
type DateSpanOutput struct{ *pulumi.OutputState }

func (DateSpanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DateSpan)(nil)).Elem()
}

func (o DateSpanOutput) ToDateSpanOutput() DateSpanOutput {
	return o
}

func (o DateSpanOutput) ToDateSpanOutputWithContext(ctx context.Context) DateSpanOutput {
	return o
}

// The end date of the date span.
func (o DateSpanOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v DateSpan) string { return v.End }).(pulumi.StringOutput)
}

// The start date of the date span.
func (o DateSpanOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v DateSpan) string { return v.Start }).(pulumi.StringOutput)
}

type DateSpanArrayOutput struct{ *pulumi.OutputState }

func (DateSpanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DateSpan)(nil)).Elem()
}

func (o DateSpanArrayOutput) ToDateSpanArrayOutput() DateSpanArrayOutput {
	return o
}

func (o DateSpanArrayOutput) ToDateSpanArrayOutputWithContext(ctx context.Context) DateSpanArrayOutput {
	return o
}

func (o DateSpanArrayOutput) Index(i pulumi.IntInput) DateSpanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DateSpan {
		return vs[0].([]DateSpan)[vs[1].(int)]
	}).(DateSpanOutput)
}

// For example, between '2022-12-23' and '2023-01-05'.
type DateSpanResponse struct {
	// The end date of the date span.
	End string `pulumi:"end"`
	// The start date of the date span.
	Start string `pulumi:"start"`
}

// For example, between '2022-12-23' and '2023-01-05'.
type DateSpanResponseOutput struct{ *pulumi.OutputState }

func (DateSpanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DateSpanResponse)(nil)).Elem()
}

func (o DateSpanResponseOutput) ToDateSpanResponseOutput() DateSpanResponseOutput {
	return o
}

func (o DateSpanResponseOutput) ToDateSpanResponseOutputWithContext(ctx context.Context) DateSpanResponseOutput {
	return o
}

// The end date of the date span.
func (o DateSpanResponseOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v DateSpanResponse) string { return v.End }).(pulumi.StringOutput)
}

// The start date of the date span.
func (o DateSpanResponseOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v DateSpanResponse) string { return v.Start }).(pulumi.StringOutput)
}

type DateSpanResponseArrayOutput struct{ *pulumi.OutputState }

func (DateSpanResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DateSpanResponse)(nil)).Elem()
}

func (o DateSpanResponseArrayOutput) ToDateSpanResponseArrayOutput() DateSpanResponseArrayOutput {
	return o
}

func (o DateSpanResponseArrayOutput) ToDateSpanResponseArrayOutputWithContext(ctx context.Context) DateSpanResponseArrayOutput {
	return o
}

func (o DateSpanResponseArrayOutput) Index(i pulumi.IntInput) DateSpanResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DateSpanResponse {
		return vs[0].([]DateSpanResponse)[vs[1].(int)]
	}).(DateSpanResponseOutput)
}

// Delegated resource properties - internal use only.
type DelegatedResource struct {
	// The source resource location - internal use only.
	Location *string `pulumi:"location"`
	// The delegation id of the referral delegation (optional) - internal use only.
	ReferralResource *string `pulumi:"referralResource"`
	// The ARM resource id of the delegated resource - internal use only.
	ResourceId *string `pulumi:"resourceId"`
	// The tenant id of the delegated resource - internal use only.
	TenantId *string `pulumi:"tenantId"`
}

// DelegatedResourceInput is an input type that accepts DelegatedResourceArgs and DelegatedResourceOutput values.
// You can construct a concrete instance of `DelegatedResourceInput` via:
//
//	DelegatedResourceArgs{...}
type DelegatedResourceInput interface {
	pulumi.Input

	ToDelegatedResourceOutput() DelegatedResourceOutput
	ToDelegatedResourceOutputWithContext(context.Context) DelegatedResourceOutput
}

// Delegated resource properties - internal use only.
type DelegatedResourceArgs struct {
	// The source resource location - internal use only.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The delegation id of the referral delegation (optional) - internal use only.
	ReferralResource pulumi.StringPtrInput `pulumi:"referralResource"`
	// The ARM resource id of the delegated resource - internal use only.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The tenant id of the delegated resource - internal use only.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (DelegatedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedResource)(nil)).Elem()
}

func (i DelegatedResourceArgs) ToDelegatedResourceOutput() DelegatedResourceOutput {
	return i.ToDelegatedResourceOutputWithContext(context.Background())
}

func (i DelegatedResourceArgs) ToDelegatedResourceOutputWithContext(ctx context.Context) DelegatedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedResourceOutput)
}

// DelegatedResourceMapInput is an input type that accepts DelegatedResourceMap and DelegatedResourceMapOutput values.
// You can construct a concrete instance of `DelegatedResourceMapInput` via:
//
//	DelegatedResourceMap{ "key": DelegatedResourceArgs{...} }
type DelegatedResourceMapInput interface {
	pulumi.Input

	ToDelegatedResourceMapOutput() DelegatedResourceMapOutput
	ToDelegatedResourceMapOutputWithContext(context.Context) DelegatedResourceMapOutput
}

type DelegatedResourceMap map[string]DelegatedResourceInput

func (DelegatedResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DelegatedResource)(nil)).Elem()
}

func (i DelegatedResourceMap) ToDelegatedResourceMapOutput() DelegatedResourceMapOutput {
	return i.ToDelegatedResourceMapOutputWithContext(context.Background())
}

func (i DelegatedResourceMap) ToDelegatedResourceMapOutputWithContext(ctx context.Context) DelegatedResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelegatedResourceMapOutput)
}

// Delegated resource properties - internal use only.
type DelegatedResourceOutput struct{ *pulumi.OutputState }

func (DelegatedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedResource)(nil)).Elem()
}

func (o DelegatedResourceOutput) ToDelegatedResourceOutput() DelegatedResourceOutput {
	return o
}

func (o DelegatedResourceOutput) ToDelegatedResourceOutputWithContext(ctx context.Context) DelegatedResourceOutput {
	return o
}

// The source resource location - internal use only.
func (o DelegatedResourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The delegation id of the referral delegation (optional) - internal use only.
func (o DelegatedResourceOutput) ReferralResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResource) *string { return v.ReferralResource }).(pulumi.StringPtrOutput)
}

// The ARM resource id of the delegated resource - internal use only.
func (o DelegatedResourceOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResource) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The tenant id of the delegated resource - internal use only.
func (o DelegatedResourceOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResource) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type DelegatedResourceMapOutput struct{ *pulumi.OutputState }

func (DelegatedResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DelegatedResource)(nil)).Elem()
}

func (o DelegatedResourceMapOutput) ToDelegatedResourceMapOutput() DelegatedResourceMapOutput {
	return o
}

func (o DelegatedResourceMapOutput) ToDelegatedResourceMapOutputWithContext(ctx context.Context) DelegatedResourceMapOutput {
	return o
}

func (o DelegatedResourceMapOutput) MapIndex(k pulumi.StringInput) DelegatedResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DelegatedResource {
		return vs[0].(map[string]DelegatedResource)[vs[1].(string)]
	}).(DelegatedResourceOutput)
}

// Delegated resource properties - internal use only.
type DelegatedResourceResponse struct {
	// The source resource location - internal use only.
	Location *string `pulumi:"location"`
	// The delegation id of the referral delegation (optional) - internal use only.
	ReferralResource *string `pulumi:"referralResource"`
	// The ARM resource id of the delegated resource - internal use only.
	ResourceId *string `pulumi:"resourceId"`
	// The tenant id of the delegated resource - internal use only.
	TenantId *string `pulumi:"tenantId"`
}

// Delegated resource properties - internal use only.
type DelegatedResourceResponseOutput struct{ *pulumi.OutputState }

func (DelegatedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelegatedResourceResponse)(nil)).Elem()
}

func (o DelegatedResourceResponseOutput) ToDelegatedResourceResponseOutput() DelegatedResourceResponseOutput {
	return o
}

func (o DelegatedResourceResponseOutput) ToDelegatedResourceResponseOutputWithContext(ctx context.Context) DelegatedResourceResponseOutput {
	return o
}

// The source resource location - internal use only.
func (o DelegatedResourceResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResourceResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The delegation id of the referral delegation (optional) - internal use only.
func (o DelegatedResourceResponseOutput) ReferralResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResourceResponse) *string { return v.ReferralResource }).(pulumi.StringPtrOutput)
}

// The ARM resource id of the delegated resource - internal use only.
func (o DelegatedResourceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResourceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The tenant id of the delegated resource - internal use only.
func (o DelegatedResourceResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DelegatedResourceResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type DelegatedResourceResponseMapOutput struct{ *pulumi.OutputState }

func (DelegatedResourceResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DelegatedResourceResponse)(nil)).Elem()
}

func (o DelegatedResourceResponseMapOutput) ToDelegatedResourceResponseMapOutput() DelegatedResourceResponseMapOutput {
	return o
}

func (o DelegatedResourceResponseMapOutput) ToDelegatedResourceResponseMapOutputWithContext(ctx context.Context) DelegatedResourceResponseMapOutput {
	return o
}

func (o DelegatedResourceResponseMapOutput) MapIndex(k pulumi.StringInput) DelegatedResourceResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DelegatedResourceResponse {
		return vs[0].(map[string]DelegatedResourceResponse)[vs[1].(string)]
	}).(DelegatedResourceResponseOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The complex type of the extended location.
type ExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// The name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The name of the extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationResponse struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// The complex type of the extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The name of the extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// One credential result item.
type FleetCredentialResultResponse struct {
	// The name of the credential.
	Name string `pulumi:"name"`
	// Base64-encoded Kubernetes configuration file.
	Value string `pulumi:"value"`
}

// One credential result item.
type FleetCredentialResultResponseOutput struct{ *pulumi.OutputState }

func (FleetCredentialResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetCredentialResultResponse)(nil)).Elem()
}

func (o FleetCredentialResultResponseOutput) ToFleetCredentialResultResponseOutput() FleetCredentialResultResponseOutput {
	return o
}

func (o FleetCredentialResultResponseOutput) ToFleetCredentialResultResponseOutputWithContext(ctx context.Context) FleetCredentialResultResponseOutput {
	return o
}

// The name of the credential.
func (o FleetCredentialResultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FleetCredentialResultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Base64-encoded Kubernetes configuration file.
func (o FleetCredentialResultResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FleetCredentialResultResponse) string { return v.Value }).(pulumi.StringOutput)
}

type FleetCredentialResultResponseArrayOutput struct{ *pulumi.OutputState }

func (FleetCredentialResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FleetCredentialResultResponse)(nil)).Elem()
}

func (o FleetCredentialResultResponseArrayOutput) ToFleetCredentialResultResponseArrayOutput() FleetCredentialResultResponseArrayOutput {
	return o
}

func (o FleetCredentialResultResponseArrayOutput) ToFleetCredentialResultResponseArrayOutputWithContext(ctx context.Context) FleetCredentialResultResponseArrayOutput {
	return o
}

func (o FleetCredentialResultResponseArrayOutput) Index(i pulumi.IntInput) FleetCredentialResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FleetCredentialResultResponse {
		return vs[0].([]FleetCredentialResultResponse)[vs[1].(int)]
	}).(FleetCredentialResultResponseOutput)
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfile struct {
	// The agent profile for the Fleet hub.
	AgentProfile *AgentProfile `pulumi:"agentProfile"`
	// The access profile for the Fleet hub API server.
	ApiServerAccessProfile *APIServerAccessProfile `pulumi:"apiServerAccessProfile"`
	// DNS prefix used to create the FQDN for the Fleet hub.
	DnsPrefix *string `pulumi:"dnsPrefix"`
}

// FleetHubProfileInput is an input type that accepts FleetHubProfileArgs and FleetHubProfileOutput values.
// You can construct a concrete instance of `FleetHubProfileInput` via:
//
//	FleetHubProfileArgs{...}
type FleetHubProfileInput interface {
	pulumi.Input

	ToFleetHubProfileOutput() FleetHubProfileOutput
	ToFleetHubProfileOutputWithContext(context.Context) FleetHubProfileOutput
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfileArgs struct {
	// The agent profile for the Fleet hub.
	AgentProfile AgentProfilePtrInput `pulumi:"agentProfile"`
	// The access profile for the Fleet hub API server.
	ApiServerAccessProfile APIServerAccessProfilePtrInput `pulumi:"apiServerAccessProfile"`
	// DNS prefix used to create the FQDN for the Fleet hub.
	DnsPrefix pulumi.StringPtrInput `pulumi:"dnsPrefix"`
}

func (FleetHubProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetHubProfile)(nil)).Elem()
}

func (i FleetHubProfileArgs) ToFleetHubProfileOutput() FleetHubProfileOutput {
	return i.ToFleetHubProfileOutputWithContext(context.Background())
}

func (i FleetHubProfileArgs) ToFleetHubProfileOutputWithContext(ctx context.Context) FleetHubProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetHubProfileOutput)
}

func (i FleetHubProfileArgs) ToFleetHubProfilePtrOutput() FleetHubProfilePtrOutput {
	return i.ToFleetHubProfilePtrOutputWithContext(context.Background())
}

func (i FleetHubProfileArgs) ToFleetHubProfilePtrOutputWithContext(ctx context.Context) FleetHubProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetHubProfileOutput).ToFleetHubProfilePtrOutputWithContext(ctx)
}

// FleetHubProfilePtrInput is an input type that accepts FleetHubProfileArgs, FleetHubProfilePtr and FleetHubProfilePtrOutput values.
// You can construct a concrete instance of `FleetHubProfilePtrInput` via:
//
//	        FleetHubProfileArgs{...}
//
//	or:
//
//	        nil
type FleetHubProfilePtrInput interface {
	pulumi.Input

	ToFleetHubProfilePtrOutput() FleetHubProfilePtrOutput
	ToFleetHubProfilePtrOutputWithContext(context.Context) FleetHubProfilePtrOutput
}

type fleetHubProfilePtrType FleetHubProfileArgs

func FleetHubProfilePtr(v *FleetHubProfileArgs) FleetHubProfilePtrInput {
	return (*fleetHubProfilePtrType)(v)
}

func (*fleetHubProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetHubProfile)(nil)).Elem()
}

func (i *fleetHubProfilePtrType) ToFleetHubProfilePtrOutput() FleetHubProfilePtrOutput {
	return i.ToFleetHubProfilePtrOutputWithContext(context.Background())
}

func (i *fleetHubProfilePtrType) ToFleetHubProfilePtrOutputWithContext(ctx context.Context) FleetHubProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetHubProfilePtrOutput)
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfileOutput struct{ *pulumi.OutputState }

func (FleetHubProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetHubProfile)(nil)).Elem()
}

func (o FleetHubProfileOutput) ToFleetHubProfileOutput() FleetHubProfileOutput {
	return o
}

func (o FleetHubProfileOutput) ToFleetHubProfileOutputWithContext(ctx context.Context) FleetHubProfileOutput {
	return o
}

func (o FleetHubProfileOutput) ToFleetHubProfilePtrOutput() FleetHubProfilePtrOutput {
	return o.ToFleetHubProfilePtrOutputWithContext(context.Background())
}

func (o FleetHubProfileOutput) ToFleetHubProfilePtrOutputWithContext(ctx context.Context) FleetHubProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetHubProfile) *FleetHubProfile {
		return &v
	}).(FleetHubProfilePtrOutput)
}

// The agent profile for the Fleet hub.
func (o FleetHubProfileOutput) AgentProfile() AgentProfilePtrOutput {
	return o.ApplyT(func(v FleetHubProfile) *AgentProfile { return v.AgentProfile }).(AgentProfilePtrOutput)
}

// The access profile for the Fleet hub API server.
func (o FleetHubProfileOutput) ApiServerAccessProfile() APIServerAccessProfilePtrOutput {
	return o.ApplyT(func(v FleetHubProfile) *APIServerAccessProfile { return v.ApiServerAccessProfile }).(APIServerAccessProfilePtrOutput)
}

// DNS prefix used to create the FQDN for the Fleet hub.
func (o FleetHubProfileOutput) DnsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FleetHubProfile) *string { return v.DnsPrefix }).(pulumi.StringPtrOutput)
}

type FleetHubProfilePtrOutput struct{ *pulumi.OutputState }

func (FleetHubProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetHubProfile)(nil)).Elem()
}

func (o FleetHubProfilePtrOutput) ToFleetHubProfilePtrOutput() FleetHubProfilePtrOutput {
	return o
}

func (o FleetHubProfilePtrOutput) ToFleetHubProfilePtrOutputWithContext(ctx context.Context) FleetHubProfilePtrOutput {
	return o
}

func (o FleetHubProfilePtrOutput) Elem() FleetHubProfileOutput {
	return o.ApplyT(func(v *FleetHubProfile) FleetHubProfile {
		if v != nil {
			return *v
		}
		var ret FleetHubProfile
		return ret
	}).(FleetHubProfileOutput)
}

// The agent profile for the Fleet hub.
func (o FleetHubProfilePtrOutput) AgentProfile() AgentProfilePtrOutput {
	return o.ApplyT(func(v *FleetHubProfile) *AgentProfile {
		if v == nil {
			return nil
		}
		return v.AgentProfile
	}).(AgentProfilePtrOutput)
}

// The access profile for the Fleet hub API server.
func (o FleetHubProfilePtrOutput) ApiServerAccessProfile() APIServerAccessProfilePtrOutput {
	return o.ApplyT(func(v *FleetHubProfile) *APIServerAccessProfile {
		if v == nil {
			return nil
		}
		return v.ApiServerAccessProfile
	}).(APIServerAccessProfilePtrOutput)
}

// DNS prefix used to create the FQDN for the Fleet hub.
func (o FleetHubProfilePtrOutput) DnsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FleetHubProfile) *string {
		if v == nil {
			return nil
		}
		return v.DnsPrefix
	}).(pulumi.StringPtrOutput)
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfileResponse struct {
	// The agent profile for the Fleet hub.
	AgentProfile *AgentProfileResponse `pulumi:"agentProfile"`
	// The access profile for the Fleet hub API server.
	ApiServerAccessProfile *APIServerAccessProfileResponse `pulumi:"apiServerAccessProfile"`
	// DNS prefix used to create the FQDN for the Fleet hub.
	DnsPrefix *string `pulumi:"dnsPrefix"`
	// The FQDN of the Fleet hub.
	Fqdn string `pulumi:"fqdn"`
	// The Kubernetes version of the Fleet hub.
	KubernetesVersion string `pulumi:"kubernetesVersion"`
	// The Azure Portal FQDN of the Fleet hub.
	PortalFqdn string `pulumi:"portalFqdn"`
}

// The FleetHubProfile configures the fleet hub.
type FleetHubProfileResponseOutput struct{ *pulumi.OutputState }

func (FleetHubProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetHubProfileResponse)(nil)).Elem()
}

func (o FleetHubProfileResponseOutput) ToFleetHubProfileResponseOutput() FleetHubProfileResponseOutput {
	return o
}

func (o FleetHubProfileResponseOutput) ToFleetHubProfileResponseOutputWithContext(ctx context.Context) FleetHubProfileResponseOutput {
	return o
}

// The agent profile for the Fleet hub.
func (o FleetHubProfileResponseOutput) AgentProfile() AgentProfileResponsePtrOutput {
	return o.ApplyT(func(v FleetHubProfileResponse) *AgentProfileResponse { return v.AgentProfile }).(AgentProfileResponsePtrOutput)
}

// The access profile for the Fleet hub API server.
func (o FleetHubProfileResponseOutput) ApiServerAccessProfile() APIServerAccessProfileResponsePtrOutput {
	return o.ApplyT(func(v FleetHubProfileResponse) *APIServerAccessProfileResponse { return v.ApiServerAccessProfile }).(APIServerAccessProfileResponsePtrOutput)
}

// DNS prefix used to create the FQDN for the Fleet hub.
func (o FleetHubProfileResponseOutput) DnsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FleetHubProfileResponse) *string { return v.DnsPrefix }).(pulumi.StringPtrOutput)
}

// The FQDN of the Fleet hub.
func (o FleetHubProfileResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v FleetHubProfileResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The Kubernetes version of the Fleet hub.
func (o FleetHubProfileResponseOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FleetHubProfileResponse) string { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// The Azure Portal FQDN of the Fleet hub.
func (o FleetHubProfileResponseOutput) PortalFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v FleetHubProfileResponse) string { return v.PortalFqdn }).(pulumi.StringOutput)
}

type FleetHubProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FleetHubProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetHubProfileResponse)(nil)).Elem()
}

func (o FleetHubProfileResponsePtrOutput) ToFleetHubProfileResponsePtrOutput() FleetHubProfileResponsePtrOutput {
	return o
}

func (o FleetHubProfileResponsePtrOutput) ToFleetHubProfileResponsePtrOutputWithContext(ctx context.Context) FleetHubProfileResponsePtrOutput {
	return o
}

func (o FleetHubProfileResponsePtrOutput) Elem() FleetHubProfileResponseOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) FleetHubProfileResponse {
		if v != nil {
			return *v
		}
		var ret FleetHubProfileResponse
		return ret
	}).(FleetHubProfileResponseOutput)
}

// The agent profile for the Fleet hub.
func (o FleetHubProfileResponsePtrOutput) AgentProfile() AgentProfileResponsePtrOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) *AgentProfileResponse {
		if v == nil {
			return nil
		}
		return v.AgentProfile
	}).(AgentProfileResponsePtrOutput)
}

// The access profile for the Fleet hub API server.
func (o FleetHubProfileResponsePtrOutput) ApiServerAccessProfile() APIServerAccessProfileResponsePtrOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) *APIServerAccessProfileResponse {
		if v == nil {
			return nil
		}
		return v.ApiServerAccessProfile
	}).(APIServerAccessProfileResponsePtrOutput)
}

// DNS prefix used to create the FQDN for the Fleet hub.
func (o FleetHubProfileResponsePtrOutput) DnsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsPrefix
	}).(pulumi.StringPtrOutput)
}

// The FQDN of the Fleet hub.
func (o FleetHubProfileResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// The Kubernetes version of the Fleet hub.
func (o FleetHubProfileResponsePtrOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KubernetesVersion
	}).(pulumi.StringPtrOutput)
}

// The Azure Portal FQDN of the Fleet hub.
func (o FleetHubProfileResponsePtrOutput) PortalFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FleetHubProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortalFqdn
	}).(pulumi.StringPtrOutput)
}

// Contains the IPTag associated with the object.
type IPTag struct {
	// The IP tag type. Example: RoutingPreference.
	IpTagType *string `pulumi:"ipTagType"`
	// The value of the IP tag associated with the public IP. Example: Internet.
	Tag *string `pulumi:"tag"`
}

// IPTagInput is an input type that accepts IPTagArgs and IPTagOutput values.
// You can construct a concrete instance of `IPTagInput` via:
//
//	IPTagArgs{...}
type IPTagInput interface {
	pulumi.Input

	ToIPTagOutput() IPTagOutput
	ToIPTagOutputWithContext(context.Context) IPTagOutput
}

// Contains the IPTag associated with the object.
type IPTagArgs struct {
	// The IP tag type. Example: RoutingPreference.
	IpTagType pulumi.StringPtrInput `pulumi:"ipTagType"`
	// The value of the IP tag associated with the public IP. Example: Internet.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (IPTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPTag)(nil)).Elem()
}

func (i IPTagArgs) ToIPTagOutput() IPTagOutput {
	return i.ToIPTagOutputWithContext(context.Background())
}

func (i IPTagArgs) ToIPTagOutputWithContext(ctx context.Context) IPTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPTagOutput)
}

// IPTagArrayInput is an input type that accepts IPTagArray and IPTagArrayOutput values.
// You can construct a concrete instance of `IPTagArrayInput` via:
//
//	IPTagArray{ IPTagArgs{...} }
type IPTagArrayInput interface {
	pulumi.Input

	ToIPTagArrayOutput() IPTagArrayOutput
	ToIPTagArrayOutputWithContext(context.Context) IPTagArrayOutput
}

type IPTagArray []IPTagInput

func (IPTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPTag)(nil)).Elem()
}

func (i IPTagArray) ToIPTagArrayOutput() IPTagArrayOutput {
	return i.ToIPTagArrayOutputWithContext(context.Background())
}

func (i IPTagArray) ToIPTagArrayOutputWithContext(ctx context.Context) IPTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPTagArrayOutput)
}

// Contains the IPTag associated with the object.
type IPTagOutput struct{ *pulumi.OutputState }

func (IPTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPTag)(nil)).Elem()
}

func (o IPTagOutput) ToIPTagOutput() IPTagOutput {
	return o
}

func (o IPTagOutput) ToIPTagOutputWithContext(ctx context.Context) IPTagOutput {
	return o
}

// The IP tag type. Example: RoutingPreference.
func (o IPTagOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPTag) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// The value of the IP tag associated with the public IP. Example: Internet.
func (o IPTagOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPTag) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type IPTagArrayOutput struct{ *pulumi.OutputState }

func (IPTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPTag)(nil)).Elem()
}

func (o IPTagArrayOutput) ToIPTagArrayOutput() IPTagArrayOutput {
	return o
}

func (o IPTagArrayOutput) ToIPTagArrayOutputWithContext(ctx context.Context) IPTagArrayOutput {
	return o
}

func (o IPTagArrayOutput) Index(i pulumi.IntInput) IPTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPTag {
		return vs[0].([]IPTag)[vs[1].(int)]
	}).(IPTagOutput)
}

// Contains the IPTag associated with the object.
type IPTagResponse struct {
	// The IP tag type. Example: RoutingPreference.
	IpTagType *string `pulumi:"ipTagType"`
	// The value of the IP tag associated with the public IP. Example: Internet.
	Tag *string `pulumi:"tag"`
}

// Contains the IPTag associated with the object.
type IPTagResponseOutput struct{ *pulumi.OutputState }

func (IPTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPTagResponse)(nil)).Elem()
}

func (o IPTagResponseOutput) ToIPTagResponseOutput() IPTagResponseOutput {
	return o
}

func (o IPTagResponseOutput) ToIPTagResponseOutputWithContext(ctx context.Context) IPTagResponseOutput {
	return o
}

// The IP tag type. Example: RoutingPreference.
func (o IPTagResponseOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPTagResponse) *string { return v.IpTagType }).(pulumi.StringPtrOutput)
}

// The value of the IP tag associated with the public IP. Example: Internet.
func (o IPTagResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPTagResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type IPTagResponseArrayOutput struct{ *pulumi.OutputState }

func (IPTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPTagResponse)(nil)).Elem()
}

func (o IPTagResponseArrayOutput) ToIPTagResponseArrayOutput() IPTagResponseArrayOutput {
	return o
}

func (o IPTagResponseArrayOutput) ToIPTagResponseArrayOutputWithContext(ctx context.Context) IPTagResponseArrayOutput {
	return o
}

func (o IPTagResponseArrayOutput) Index(i pulumi.IntInput) IPTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPTagResponse {
		return vs[0].([]IPTagResponse)[vs[1].(int)]
	}).(IPTagResponseOutput)
}

// Managed identity profile for the identity binding.
type IdentityBindingManagedIdentityProfile struct {
	// The resource ID of the managed identity.
	ResourceId string `pulumi:"resourceId"`
}

// IdentityBindingManagedIdentityProfileInput is an input type that accepts IdentityBindingManagedIdentityProfileArgs and IdentityBindingManagedIdentityProfileOutput values.
// You can construct a concrete instance of `IdentityBindingManagedIdentityProfileInput` via:
//
//	IdentityBindingManagedIdentityProfileArgs{...}
type IdentityBindingManagedIdentityProfileInput interface {
	pulumi.Input

	ToIdentityBindingManagedIdentityProfileOutput() IdentityBindingManagedIdentityProfileOutput
	ToIdentityBindingManagedIdentityProfileOutputWithContext(context.Context) IdentityBindingManagedIdentityProfileOutput
}

// Managed identity profile for the identity binding.
type IdentityBindingManagedIdentityProfileArgs struct {
	// The resource ID of the managed identity.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (IdentityBindingManagedIdentityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingManagedIdentityProfile)(nil)).Elem()
}

func (i IdentityBindingManagedIdentityProfileArgs) ToIdentityBindingManagedIdentityProfileOutput() IdentityBindingManagedIdentityProfileOutput {
	return i.ToIdentityBindingManagedIdentityProfileOutputWithContext(context.Background())
}

func (i IdentityBindingManagedIdentityProfileArgs) ToIdentityBindingManagedIdentityProfileOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityBindingManagedIdentityProfileOutput)
}

func (i IdentityBindingManagedIdentityProfileArgs) ToIdentityBindingManagedIdentityProfilePtrOutput() IdentityBindingManagedIdentityProfilePtrOutput {
	return i.ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (i IdentityBindingManagedIdentityProfileArgs) ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityBindingManagedIdentityProfileOutput).ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(ctx)
}

// IdentityBindingManagedIdentityProfilePtrInput is an input type that accepts IdentityBindingManagedIdentityProfileArgs, IdentityBindingManagedIdentityProfilePtr and IdentityBindingManagedIdentityProfilePtrOutput values.
// You can construct a concrete instance of `IdentityBindingManagedIdentityProfilePtrInput` via:
//
//	        IdentityBindingManagedIdentityProfileArgs{...}
//
//	or:
//
//	        nil
type IdentityBindingManagedIdentityProfilePtrInput interface {
	pulumi.Input

	ToIdentityBindingManagedIdentityProfilePtrOutput() IdentityBindingManagedIdentityProfilePtrOutput
	ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(context.Context) IdentityBindingManagedIdentityProfilePtrOutput
}

type identityBindingManagedIdentityProfilePtrType IdentityBindingManagedIdentityProfileArgs

func IdentityBindingManagedIdentityProfilePtr(v *IdentityBindingManagedIdentityProfileArgs) IdentityBindingManagedIdentityProfilePtrInput {
	return (*identityBindingManagedIdentityProfilePtrType)(v)
}

func (*identityBindingManagedIdentityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityBindingManagedIdentityProfile)(nil)).Elem()
}

func (i *identityBindingManagedIdentityProfilePtrType) ToIdentityBindingManagedIdentityProfilePtrOutput() IdentityBindingManagedIdentityProfilePtrOutput {
	return i.ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (i *identityBindingManagedIdentityProfilePtrType) ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityBindingManagedIdentityProfilePtrOutput)
}

// Managed identity profile for the identity binding.
type IdentityBindingManagedIdentityProfileOutput struct{ *pulumi.OutputState }

func (IdentityBindingManagedIdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingManagedIdentityProfile)(nil)).Elem()
}

func (o IdentityBindingManagedIdentityProfileOutput) ToIdentityBindingManagedIdentityProfileOutput() IdentityBindingManagedIdentityProfileOutput {
	return o
}

func (o IdentityBindingManagedIdentityProfileOutput) ToIdentityBindingManagedIdentityProfileOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfileOutput {
	return o
}

func (o IdentityBindingManagedIdentityProfileOutput) ToIdentityBindingManagedIdentityProfilePtrOutput() IdentityBindingManagedIdentityProfilePtrOutput {
	return o.ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (o IdentityBindingManagedIdentityProfileOutput) ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityBindingManagedIdentityProfile) *IdentityBindingManagedIdentityProfile {
		return &v
	}).(IdentityBindingManagedIdentityProfilePtrOutput)
}

// The resource ID of the managed identity.
func (o IdentityBindingManagedIdentityProfileOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingManagedIdentityProfile) string { return v.ResourceId }).(pulumi.StringOutput)
}

type IdentityBindingManagedIdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (IdentityBindingManagedIdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityBindingManagedIdentityProfile)(nil)).Elem()
}

func (o IdentityBindingManagedIdentityProfilePtrOutput) ToIdentityBindingManagedIdentityProfilePtrOutput() IdentityBindingManagedIdentityProfilePtrOutput {
	return o
}

func (o IdentityBindingManagedIdentityProfilePtrOutput) ToIdentityBindingManagedIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfilePtrOutput {
	return o
}

func (o IdentityBindingManagedIdentityProfilePtrOutput) Elem() IdentityBindingManagedIdentityProfileOutput {
	return o.ApplyT(func(v *IdentityBindingManagedIdentityProfile) IdentityBindingManagedIdentityProfile {
		if v != nil {
			return *v
		}
		var ret IdentityBindingManagedIdentityProfile
		return ret
	}).(IdentityBindingManagedIdentityProfileOutput)
}

// The resource ID of the managed identity.
func (o IdentityBindingManagedIdentityProfilePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityBindingManagedIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Managed identity profile for the identity binding.
type IdentityBindingManagedIdentityProfileResponse struct {
	// The client ID of the managed identity.
	ClientId string `pulumi:"clientId"`
	// The object ID of the managed identity.
	ObjectId string `pulumi:"objectId"`
	// The resource ID of the managed identity.
	ResourceId string `pulumi:"resourceId"`
	// The tenant ID of the managed identity.
	TenantId string `pulumi:"tenantId"`
}

// Managed identity profile for the identity binding.
type IdentityBindingManagedIdentityProfileResponseOutput struct{ *pulumi.OutputState }

func (IdentityBindingManagedIdentityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingManagedIdentityProfileResponse)(nil)).Elem()
}

func (o IdentityBindingManagedIdentityProfileResponseOutput) ToIdentityBindingManagedIdentityProfileResponseOutput() IdentityBindingManagedIdentityProfileResponseOutput {
	return o
}

func (o IdentityBindingManagedIdentityProfileResponseOutput) ToIdentityBindingManagedIdentityProfileResponseOutputWithContext(ctx context.Context) IdentityBindingManagedIdentityProfileResponseOutput {
	return o
}

// The client ID of the managed identity.
func (o IdentityBindingManagedIdentityProfileResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingManagedIdentityProfileResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The object ID of the managed identity.
func (o IdentityBindingManagedIdentityProfileResponseOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingManagedIdentityProfileResponse) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The resource ID of the managed identity.
func (o IdentityBindingManagedIdentityProfileResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingManagedIdentityProfileResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The tenant ID of the managed identity.
func (o IdentityBindingManagedIdentityProfileResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingManagedIdentityProfileResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// IdentityBinding OIDC issuer profile.
type IdentityBindingOidcIssuerProfileResponse struct {
	// The OIDC issuer URL of the IdentityBinding.
	OidcIssuerUrl string `pulumi:"oidcIssuerUrl"`
}

// IdentityBinding OIDC issuer profile.
type IdentityBindingOidcIssuerProfileResponseOutput struct{ *pulumi.OutputState }

func (IdentityBindingOidcIssuerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingOidcIssuerProfileResponse)(nil)).Elem()
}

func (o IdentityBindingOidcIssuerProfileResponseOutput) ToIdentityBindingOidcIssuerProfileResponseOutput() IdentityBindingOidcIssuerProfileResponseOutput {
	return o
}

func (o IdentityBindingOidcIssuerProfileResponseOutput) ToIdentityBindingOidcIssuerProfileResponseOutputWithContext(ctx context.Context) IdentityBindingOidcIssuerProfileResponseOutput {
	return o
}

// The OIDC issuer URL of the IdentityBinding.
func (o IdentityBindingOidcIssuerProfileResponseOutput) OidcIssuerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingOidcIssuerProfileResponse) string { return v.OidcIssuerUrl }).(pulumi.StringOutput)
}

// IdentityBinding properties.
type IdentityBindingProperties struct {
	// Managed identity profile for the identity binding.
	ManagedIdentity IdentityBindingManagedIdentityProfile `pulumi:"managedIdentity"`
}

// IdentityBindingPropertiesInput is an input type that accepts IdentityBindingPropertiesArgs and IdentityBindingPropertiesOutput values.
// You can construct a concrete instance of `IdentityBindingPropertiesInput` via:
//
//	IdentityBindingPropertiesArgs{...}
type IdentityBindingPropertiesInput interface {
	pulumi.Input

	ToIdentityBindingPropertiesOutput() IdentityBindingPropertiesOutput
	ToIdentityBindingPropertiesOutputWithContext(context.Context) IdentityBindingPropertiesOutput
}

// IdentityBinding properties.
type IdentityBindingPropertiesArgs struct {
	// Managed identity profile for the identity binding.
	ManagedIdentity IdentityBindingManagedIdentityProfileInput `pulumi:"managedIdentity"`
}

func (IdentityBindingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingProperties)(nil)).Elem()
}

func (i IdentityBindingPropertiesArgs) ToIdentityBindingPropertiesOutput() IdentityBindingPropertiesOutput {
	return i.ToIdentityBindingPropertiesOutputWithContext(context.Background())
}

func (i IdentityBindingPropertiesArgs) ToIdentityBindingPropertiesOutputWithContext(ctx context.Context) IdentityBindingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityBindingPropertiesOutput)
}

func (i IdentityBindingPropertiesArgs) ToIdentityBindingPropertiesPtrOutput() IdentityBindingPropertiesPtrOutput {
	return i.ToIdentityBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i IdentityBindingPropertiesArgs) ToIdentityBindingPropertiesPtrOutputWithContext(ctx context.Context) IdentityBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityBindingPropertiesOutput).ToIdentityBindingPropertiesPtrOutputWithContext(ctx)
}

// IdentityBindingPropertiesPtrInput is an input type that accepts IdentityBindingPropertiesArgs, IdentityBindingPropertiesPtr and IdentityBindingPropertiesPtrOutput values.
// You can construct a concrete instance of `IdentityBindingPropertiesPtrInput` via:
//
//	        IdentityBindingPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdentityBindingPropertiesPtrInput interface {
	pulumi.Input

	ToIdentityBindingPropertiesPtrOutput() IdentityBindingPropertiesPtrOutput
	ToIdentityBindingPropertiesPtrOutputWithContext(context.Context) IdentityBindingPropertiesPtrOutput
}

type identityBindingPropertiesPtrType IdentityBindingPropertiesArgs

func IdentityBindingPropertiesPtr(v *IdentityBindingPropertiesArgs) IdentityBindingPropertiesPtrInput {
	return (*identityBindingPropertiesPtrType)(v)
}

func (*identityBindingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityBindingProperties)(nil)).Elem()
}

func (i *identityBindingPropertiesPtrType) ToIdentityBindingPropertiesPtrOutput() IdentityBindingPropertiesPtrOutput {
	return i.ToIdentityBindingPropertiesPtrOutputWithContext(context.Background())
}

func (i *identityBindingPropertiesPtrType) ToIdentityBindingPropertiesPtrOutputWithContext(ctx context.Context) IdentityBindingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityBindingPropertiesPtrOutput)
}

// IdentityBinding properties.
type IdentityBindingPropertiesOutput struct{ *pulumi.OutputState }

func (IdentityBindingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingProperties)(nil)).Elem()
}

func (o IdentityBindingPropertiesOutput) ToIdentityBindingPropertiesOutput() IdentityBindingPropertiesOutput {
	return o
}

func (o IdentityBindingPropertiesOutput) ToIdentityBindingPropertiesOutputWithContext(ctx context.Context) IdentityBindingPropertiesOutput {
	return o
}

func (o IdentityBindingPropertiesOutput) ToIdentityBindingPropertiesPtrOutput() IdentityBindingPropertiesPtrOutput {
	return o.ToIdentityBindingPropertiesPtrOutputWithContext(context.Background())
}

func (o IdentityBindingPropertiesOutput) ToIdentityBindingPropertiesPtrOutputWithContext(ctx context.Context) IdentityBindingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityBindingProperties) *IdentityBindingProperties {
		return &v
	}).(IdentityBindingPropertiesPtrOutput)
}

// Managed identity profile for the identity binding.
func (o IdentityBindingPropertiesOutput) ManagedIdentity() IdentityBindingManagedIdentityProfileOutput {
	return o.ApplyT(func(v IdentityBindingProperties) IdentityBindingManagedIdentityProfile { return v.ManagedIdentity }).(IdentityBindingManagedIdentityProfileOutput)
}

type IdentityBindingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdentityBindingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityBindingProperties)(nil)).Elem()
}

func (o IdentityBindingPropertiesPtrOutput) ToIdentityBindingPropertiesPtrOutput() IdentityBindingPropertiesPtrOutput {
	return o
}

func (o IdentityBindingPropertiesPtrOutput) ToIdentityBindingPropertiesPtrOutputWithContext(ctx context.Context) IdentityBindingPropertiesPtrOutput {
	return o
}

func (o IdentityBindingPropertiesPtrOutput) Elem() IdentityBindingPropertiesOutput {
	return o.ApplyT(func(v *IdentityBindingProperties) IdentityBindingProperties {
		if v != nil {
			return *v
		}
		var ret IdentityBindingProperties
		return ret
	}).(IdentityBindingPropertiesOutput)
}

// Managed identity profile for the identity binding.
func (o IdentityBindingPropertiesPtrOutput) ManagedIdentity() IdentityBindingManagedIdentityProfilePtrOutput {
	return o.ApplyT(func(v *IdentityBindingProperties) *IdentityBindingManagedIdentityProfile {
		if v == nil {
			return nil
		}
		return &v.ManagedIdentity
	}).(IdentityBindingManagedIdentityProfilePtrOutput)
}

// IdentityBinding properties.
type IdentityBindingPropertiesResponse struct {
	// Managed identity profile for the identity binding.
	ManagedIdentity IdentityBindingManagedIdentityProfileResponse `pulumi:"managedIdentity"`
	// The OIDC issuer URL of the IdentityBinding.
	OidcIssuer IdentityBindingOidcIssuerProfileResponse `pulumi:"oidcIssuer"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
}

// IdentityBinding properties.
type IdentityBindingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IdentityBindingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityBindingPropertiesResponse)(nil)).Elem()
}

func (o IdentityBindingPropertiesResponseOutput) ToIdentityBindingPropertiesResponseOutput() IdentityBindingPropertiesResponseOutput {
	return o
}

func (o IdentityBindingPropertiesResponseOutput) ToIdentityBindingPropertiesResponseOutputWithContext(ctx context.Context) IdentityBindingPropertiesResponseOutput {
	return o
}

// Managed identity profile for the identity binding.
func (o IdentityBindingPropertiesResponseOutput) ManagedIdentity() IdentityBindingManagedIdentityProfileResponseOutput {
	return o.ApplyT(func(v IdentityBindingPropertiesResponse) IdentityBindingManagedIdentityProfileResponse {
		return v.ManagedIdentity
	}).(IdentityBindingManagedIdentityProfileResponseOutput)
}

// The OIDC issuer URL of the IdentityBinding.
func (o IdentityBindingPropertiesResponseOutput) OidcIssuer() IdentityBindingOidcIssuerProfileResponseOutput {
	return o.ApplyT(func(v IdentityBindingPropertiesResponse) IdentityBindingOidcIssuerProfileResponse {
		return v.OidcIssuer
	}).(IdentityBindingOidcIssuerProfileResponseOutput)
}

// The status of the last operation.
func (o IdentityBindingPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityBindingPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
type IstioCertificateAuthority struct {
	// Plugin certificates information for Service Mesh.
	Plugin *IstioPluginCertificateAuthority `pulumi:"plugin"`
}

// IstioCertificateAuthorityInput is an input type that accepts IstioCertificateAuthorityArgs and IstioCertificateAuthorityOutput values.
// You can construct a concrete instance of `IstioCertificateAuthorityInput` via:
//
//	IstioCertificateAuthorityArgs{...}
type IstioCertificateAuthorityInput interface {
	pulumi.Input

	ToIstioCertificateAuthorityOutput() IstioCertificateAuthorityOutput
	ToIstioCertificateAuthorityOutputWithContext(context.Context) IstioCertificateAuthorityOutput
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
type IstioCertificateAuthorityArgs struct {
	// Plugin certificates information for Service Mesh.
	Plugin IstioPluginCertificateAuthorityPtrInput `pulumi:"plugin"`
}

func (IstioCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioCertificateAuthority)(nil)).Elem()
}

func (i IstioCertificateAuthorityArgs) ToIstioCertificateAuthorityOutput() IstioCertificateAuthorityOutput {
	return i.ToIstioCertificateAuthorityOutputWithContext(context.Background())
}

func (i IstioCertificateAuthorityArgs) ToIstioCertificateAuthorityOutputWithContext(ctx context.Context) IstioCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioCertificateAuthorityOutput)
}

func (i IstioCertificateAuthorityArgs) ToIstioCertificateAuthorityPtrOutput() IstioCertificateAuthorityPtrOutput {
	return i.ToIstioCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i IstioCertificateAuthorityArgs) ToIstioCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioCertificateAuthorityOutput).ToIstioCertificateAuthorityPtrOutputWithContext(ctx)
}

// IstioCertificateAuthorityPtrInput is an input type that accepts IstioCertificateAuthorityArgs, IstioCertificateAuthorityPtr and IstioCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `IstioCertificateAuthorityPtrInput` via:
//
//	        IstioCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type IstioCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToIstioCertificateAuthorityPtrOutput() IstioCertificateAuthorityPtrOutput
	ToIstioCertificateAuthorityPtrOutputWithContext(context.Context) IstioCertificateAuthorityPtrOutput
}

type istioCertificateAuthorityPtrType IstioCertificateAuthorityArgs

func IstioCertificateAuthorityPtr(v *IstioCertificateAuthorityArgs) IstioCertificateAuthorityPtrInput {
	return (*istioCertificateAuthorityPtrType)(v)
}

func (*istioCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioCertificateAuthority)(nil)).Elem()
}

func (i *istioCertificateAuthorityPtrType) ToIstioCertificateAuthorityPtrOutput() IstioCertificateAuthorityPtrOutput {
	return i.ToIstioCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *istioCertificateAuthorityPtrType) ToIstioCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioCertificateAuthorityPtrOutput)
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
type IstioCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (IstioCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioCertificateAuthority)(nil)).Elem()
}

func (o IstioCertificateAuthorityOutput) ToIstioCertificateAuthorityOutput() IstioCertificateAuthorityOutput {
	return o
}

func (o IstioCertificateAuthorityOutput) ToIstioCertificateAuthorityOutputWithContext(ctx context.Context) IstioCertificateAuthorityOutput {
	return o
}

func (o IstioCertificateAuthorityOutput) ToIstioCertificateAuthorityPtrOutput() IstioCertificateAuthorityPtrOutput {
	return o.ToIstioCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o IstioCertificateAuthorityOutput) ToIstioCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IstioCertificateAuthority) *IstioCertificateAuthority {
		return &v
	}).(IstioCertificateAuthorityPtrOutput)
}

// Plugin certificates information for Service Mesh.
func (o IstioCertificateAuthorityOutput) Plugin() IstioPluginCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v IstioCertificateAuthority) *IstioPluginCertificateAuthority { return v.Plugin }).(IstioPluginCertificateAuthorityPtrOutput)
}

type IstioCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (IstioCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioCertificateAuthority)(nil)).Elem()
}

func (o IstioCertificateAuthorityPtrOutput) ToIstioCertificateAuthorityPtrOutput() IstioCertificateAuthorityPtrOutput {
	return o
}

func (o IstioCertificateAuthorityPtrOutput) ToIstioCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioCertificateAuthorityPtrOutput {
	return o
}

func (o IstioCertificateAuthorityPtrOutput) Elem() IstioCertificateAuthorityOutput {
	return o.ApplyT(func(v *IstioCertificateAuthority) IstioCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret IstioCertificateAuthority
		return ret
	}).(IstioCertificateAuthorityOutput)
}

// Plugin certificates information for Service Mesh.
func (o IstioCertificateAuthorityPtrOutput) Plugin() IstioPluginCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *IstioCertificateAuthority) *IstioPluginCertificateAuthority {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(IstioPluginCertificateAuthorityPtrOutput)
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
type IstioCertificateAuthorityResponse struct {
	// Plugin certificates information for Service Mesh.
	Plugin *IstioPluginCertificateAuthorityResponse `pulumi:"plugin"`
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
type IstioCertificateAuthorityResponseOutput struct{ *pulumi.OutputState }

func (IstioCertificateAuthorityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioCertificateAuthorityResponse)(nil)).Elem()
}

func (o IstioCertificateAuthorityResponseOutput) ToIstioCertificateAuthorityResponseOutput() IstioCertificateAuthorityResponseOutput {
	return o
}

func (o IstioCertificateAuthorityResponseOutput) ToIstioCertificateAuthorityResponseOutputWithContext(ctx context.Context) IstioCertificateAuthorityResponseOutput {
	return o
}

// Plugin certificates information for Service Mesh.
func (o IstioCertificateAuthorityResponseOutput) Plugin() IstioPluginCertificateAuthorityResponsePtrOutput {
	return o.ApplyT(func(v IstioCertificateAuthorityResponse) *IstioPluginCertificateAuthorityResponse { return v.Plugin }).(IstioPluginCertificateAuthorityResponsePtrOutput)
}

type IstioCertificateAuthorityResponsePtrOutput struct{ *pulumi.OutputState }

func (IstioCertificateAuthorityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioCertificateAuthorityResponse)(nil)).Elem()
}

func (o IstioCertificateAuthorityResponsePtrOutput) ToIstioCertificateAuthorityResponsePtrOutput() IstioCertificateAuthorityResponsePtrOutput {
	return o
}

func (o IstioCertificateAuthorityResponsePtrOutput) ToIstioCertificateAuthorityResponsePtrOutputWithContext(ctx context.Context) IstioCertificateAuthorityResponsePtrOutput {
	return o
}

func (o IstioCertificateAuthorityResponsePtrOutput) Elem() IstioCertificateAuthorityResponseOutput {
	return o.ApplyT(func(v *IstioCertificateAuthorityResponse) IstioCertificateAuthorityResponse {
		if v != nil {
			return *v
		}
		var ret IstioCertificateAuthorityResponse
		return ret
	}).(IstioCertificateAuthorityResponseOutput)
}

// Plugin certificates information for Service Mesh.
func (o IstioCertificateAuthorityResponsePtrOutput) Plugin() IstioPluginCertificateAuthorityResponsePtrOutput {
	return o.ApplyT(func(v *IstioCertificateAuthorityResponse) *IstioPluginCertificateAuthorityResponse {
		if v == nil {
			return nil
		}
		return v.Plugin
	}).(IstioPluginCertificateAuthorityResponsePtrOutput)
}

// Istio components configuration.
type IstioComponents struct {
	// Istio egress gateways.
	EgressGateways []IstioEgressGateway `pulumi:"egressGateways"`
	// Istio ingress gateways.
	IngressGateways []IstioIngressGateway `pulumi:"ingressGateways"`
}

// IstioComponentsInput is an input type that accepts IstioComponentsArgs and IstioComponentsOutput values.
// You can construct a concrete instance of `IstioComponentsInput` via:
//
//	IstioComponentsArgs{...}
type IstioComponentsInput interface {
	pulumi.Input

	ToIstioComponentsOutput() IstioComponentsOutput
	ToIstioComponentsOutputWithContext(context.Context) IstioComponentsOutput
}

// Istio components configuration.
type IstioComponentsArgs struct {
	// Istio egress gateways.
	EgressGateways IstioEgressGatewayArrayInput `pulumi:"egressGateways"`
	// Istio ingress gateways.
	IngressGateways IstioIngressGatewayArrayInput `pulumi:"ingressGateways"`
}

func (IstioComponentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioComponents)(nil)).Elem()
}

func (i IstioComponentsArgs) ToIstioComponentsOutput() IstioComponentsOutput {
	return i.ToIstioComponentsOutputWithContext(context.Background())
}

func (i IstioComponentsArgs) ToIstioComponentsOutputWithContext(ctx context.Context) IstioComponentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioComponentsOutput)
}

func (i IstioComponentsArgs) ToIstioComponentsPtrOutput() IstioComponentsPtrOutput {
	return i.ToIstioComponentsPtrOutputWithContext(context.Background())
}

func (i IstioComponentsArgs) ToIstioComponentsPtrOutputWithContext(ctx context.Context) IstioComponentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioComponentsOutput).ToIstioComponentsPtrOutputWithContext(ctx)
}

// IstioComponentsPtrInput is an input type that accepts IstioComponentsArgs, IstioComponentsPtr and IstioComponentsPtrOutput values.
// You can construct a concrete instance of `IstioComponentsPtrInput` via:
//
//	        IstioComponentsArgs{...}
//
//	or:
//
//	        nil
type IstioComponentsPtrInput interface {
	pulumi.Input

	ToIstioComponentsPtrOutput() IstioComponentsPtrOutput
	ToIstioComponentsPtrOutputWithContext(context.Context) IstioComponentsPtrOutput
}

type istioComponentsPtrType IstioComponentsArgs

func IstioComponentsPtr(v *IstioComponentsArgs) IstioComponentsPtrInput {
	return (*istioComponentsPtrType)(v)
}

func (*istioComponentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioComponents)(nil)).Elem()
}

func (i *istioComponentsPtrType) ToIstioComponentsPtrOutput() IstioComponentsPtrOutput {
	return i.ToIstioComponentsPtrOutputWithContext(context.Background())
}

func (i *istioComponentsPtrType) ToIstioComponentsPtrOutputWithContext(ctx context.Context) IstioComponentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioComponentsPtrOutput)
}

// Istio components configuration.
type IstioComponentsOutput struct{ *pulumi.OutputState }

func (IstioComponentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioComponents)(nil)).Elem()
}

func (o IstioComponentsOutput) ToIstioComponentsOutput() IstioComponentsOutput {
	return o
}

func (o IstioComponentsOutput) ToIstioComponentsOutputWithContext(ctx context.Context) IstioComponentsOutput {
	return o
}

func (o IstioComponentsOutput) ToIstioComponentsPtrOutput() IstioComponentsPtrOutput {
	return o.ToIstioComponentsPtrOutputWithContext(context.Background())
}

func (o IstioComponentsOutput) ToIstioComponentsPtrOutputWithContext(ctx context.Context) IstioComponentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IstioComponents) *IstioComponents {
		return &v
	}).(IstioComponentsPtrOutput)
}

// Istio egress gateways.
func (o IstioComponentsOutput) EgressGateways() IstioEgressGatewayArrayOutput {
	return o.ApplyT(func(v IstioComponents) []IstioEgressGateway { return v.EgressGateways }).(IstioEgressGatewayArrayOutput)
}

// Istio ingress gateways.
func (o IstioComponentsOutput) IngressGateways() IstioIngressGatewayArrayOutput {
	return o.ApplyT(func(v IstioComponents) []IstioIngressGateway { return v.IngressGateways }).(IstioIngressGatewayArrayOutput)
}

type IstioComponentsPtrOutput struct{ *pulumi.OutputState }

func (IstioComponentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioComponents)(nil)).Elem()
}

func (o IstioComponentsPtrOutput) ToIstioComponentsPtrOutput() IstioComponentsPtrOutput {
	return o
}

func (o IstioComponentsPtrOutput) ToIstioComponentsPtrOutputWithContext(ctx context.Context) IstioComponentsPtrOutput {
	return o
}

func (o IstioComponentsPtrOutput) Elem() IstioComponentsOutput {
	return o.ApplyT(func(v *IstioComponents) IstioComponents {
		if v != nil {
			return *v
		}
		var ret IstioComponents
		return ret
	}).(IstioComponentsOutput)
}

// Istio egress gateways.
func (o IstioComponentsPtrOutput) EgressGateways() IstioEgressGatewayArrayOutput {
	return o.ApplyT(func(v *IstioComponents) []IstioEgressGateway {
		if v == nil {
			return nil
		}
		return v.EgressGateways
	}).(IstioEgressGatewayArrayOutput)
}

// Istio ingress gateways.
func (o IstioComponentsPtrOutput) IngressGateways() IstioIngressGatewayArrayOutput {
	return o.ApplyT(func(v *IstioComponents) []IstioIngressGateway {
		if v == nil {
			return nil
		}
		return v.IngressGateways
	}).(IstioIngressGatewayArrayOutput)
}

// Istio components configuration.
type IstioComponentsResponse struct {
	// Istio egress gateways.
	EgressGateways []IstioEgressGatewayResponse `pulumi:"egressGateways"`
	// Istio ingress gateways.
	IngressGateways []IstioIngressGatewayResponse `pulumi:"ingressGateways"`
}

// Istio components configuration.
type IstioComponentsResponseOutput struct{ *pulumi.OutputState }

func (IstioComponentsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioComponentsResponse)(nil)).Elem()
}

func (o IstioComponentsResponseOutput) ToIstioComponentsResponseOutput() IstioComponentsResponseOutput {
	return o
}

func (o IstioComponentsResponseOutput) ToIstioComponentsResponseOutputWithContext(ctx context.Context) IstioComponentsResponseOutput {
	return o
}

// Istio egress gateways.
func (o IstioComponentsResponseOutput) EgressGateways() IstioEgressGatewayResponseArrayOutput {
	return o.ApplyT(func(v IstioComponentsResponse) []IstioEgressGatewayResponse { return v.EgressGateways }).(IstioEgressGatewayResponseArrayOutput)
}

// Istio ingress gateways.
func (o IstioComponentsResponseOutput) IngressGateways() IstioIngressGatewayResponseArrayOutput {
	return o.ApplyT(func(v IstioComponentsResponse) []IstioIngressGatewayResponse { return v.IngressGateways }).(IstioIngressGatewayResponseArrayOutput)
}

type IstioComponentsResponsePtrOutput struct{ *pulumi.OutputState }

func (IstioComponentsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioComponentsResponse)(nil)).Elem()
}

func (o IstioComponentsResponsePtrOutput) ToIstioComponentsResponsePtrOutput() IstioComponentsResponsePtrOutput {
	return o
}

func (o IstioComponentsResponsePtrOutput) ToIstioComponentsResponsePtrOutputWithContext(ctx context.Context) IstioComponentsResponsePtrOutput {
	return o
}

func (o IstioComponentsResponsePtrOutput) Elem() IstioComponentsResponseOutput {
	return o.ApplyT(func(v *IstioComponentsResponse) IstioComponentsResponse {
		if v != nil {
			return *v
		}
		var ret IstioComponentsResponse
		return ret
	}).(IstioComponentsResponseOutput)
}

// Istio egress gateways.
func (o IstioComponentsResponsePtrOutput) EgressGateways() IstioEgressGatewayResponseArrayOutput {
	return o.ApplyT(func(v *IstioComponentsResponse) []IstioEgressGatewayResponse {
		if v == nil {
			return nil
		}
		return v.EgressGateways
	}).(IstioEgressGatewayResponseArrayOutput)
}

// Istio ingress gateways.
func (o IstioComponentsResponsePtrOutput) IngressGateways() IstioIngressGatewayResponseArrayOutput {
	return o.ApplyT(func(v *IstioComponentsResponse) []IstioIngressGatewayResponse {
		if v == nil {
			return nil
		}
		return v.IngressGateways
	}).(IstioIngressGatewayResponseArrayOutput)
}

// Istio egress gateway configuration.
type IstioEgressGateway struct {
	// Whether to enable the egress gateway.
	Enabled bool `pulumi:"enabled"`
}

// IstioEgressGatewayInput is an input type that accepts IstioEgressGatewayArgs and IstioEgressGatewayOutput values.
// You can construct a concrete instance of `IstioEgressGatewayInput` via:
//
//	IstioEgressGatewayArgs{...}
type IstioEgressGatewayInput interface {
	pulumi.Input

	ToIstioEgressGatewayOutput() IstioEgressGatewayOutput
	ToIstioEgressGatewayOutputWithContext(context.Context) IstioEgressGatewayOutput
}

// Istio egress gateway configuration.
type IstioEgressGatewayArgs struct {
	// Whether to enable the egress gateway.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (IstioEgressGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioEgressGateway)(nil)).Elem()
}

func (i IstioEgressGatewayArgs) ToIstioEgressGatewayOutput() IstioEgressGatewayOutput {
	return i.ToIstioEgressGatewayOutputWithContext(context.Background())
}

func (i IstioEgressGatewayArgs) ToIstioEgressGatewayOutputWithContext(ctx context.Context) IstioEgressGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioEgressGatewayOutput)
}

// IstioEgressGatewayArrayInput is an input type that accepts IstioEgressGatewayArray and IstioEgressGatewayArrayOutput values.
// You can construct a concrete instance of `IstioEgressGatewayArrayInput` via:
//
//	IstioEgressGatewayArray{ IstioEgressGatewayArgs{...} }
type IstioEgressGatewayArrayInput interface {
	pulumi.Input

	ToIstioEgressGatewayArrayOutput() IstioEgressGatewayArrayOutput
	ToIstioEgressGatewayArrayOutputWithContext(context.Context) IstioEgressGatewayArrayOutput
}

type IstioEgressGatewayArray []IstioEgressGatewayInput

func (IstioEgressGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IstioEgressGateway)(nil)).Elem()
}

func (i IstioEgressGatewayArray) ToIstioEgressGatewayArrayOutput() IstioEgressGatewayArrayOutput {
	return i.ToIstioEgressGatewayArrayOutputWithContext(context.Background())
}

func (i IstioEgressGatewayArray) ToIstioEgressGatewayArrayOutputWithContext(ctx context.Context) IstioEgressGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioEgressGatewayArrayOutput)
}

// Istio egress gateway configuration.
type IstioEgressGatewayOutput struct{ *pulumi.OutputState }

func (IstioEgressGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioEgressGateway)(nil)).Elem()
}

func (o IstioEgressGatewayOutput) ToIstioEgressGatewayOutput() IstioEgressGatewayOutput {
	return o
}

func (o IstioEgressGatewayOutput) ToIstioEgressGatewayOutputWithContext(ctx context.Context) IstioEgressGatewayOutput {
	return o
}

// Whether to enable the egress gateway.
func (o IstioEgressGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IstioEgressGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type IstioEgressGatewayArrayOutput struct{ *pulumi.OutputState }

func (IstioEgressGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IstioEgressGateway)(nil)).Elem()
}

func (o IstioEgressGatewayArrayOutput) ToIstioEgressGatewayArrayOutput() IstioEgressGatewayArrayOutput {
	return o
}

func (o IstioEgressGatewayArrayOutput) ToIstioEgressGatewayArrayOutputWithContext(ctx context.Context) IstioEgressGatewayArrayOutput {
	return o
}

func (o IstioEgressGatewayArrayOutput) Index(i pulumi.IntInput) IstioEgressGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IstioEgressGateway {
		return vs[0].([]IstioEgressGateway)[vs[1].(int)]
	}).(IstioEgressGatewayOutput)
}

// Istio egress gateway configuration.
type IstioEgressGatewayResponse struct {
	// Whether to enable the egress gateway.
	Enabled bool `pulumi:"enabled"`
}

// Istio egress gateway configuration.
type IstioEgressGatewayResponseOutput struct{ *pulumi.OutputState }

func (IstioEgressGatewayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioEgressGatewayResponse)(nil)).Elem()
}

func (o IstioEgressGatewayResponseOutput) ToIstioEgressGatewayResponseOutput() IstioEgressGatewayResponseOutput {
	return o
}

func (o IstioEgressGatewayResponseOutput) ToIstioEgressGatewayResponseOutputWithContext(ctx context.Context) IstioEgressGatewayResponseOutput {
	return o
}

// Whether to enable the egress gateway.
func (o IstioEgressGatewayResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IstioEgressGatewayResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type IstioEgressGatewayResponseArrayOutput struct{ *pulumi.OutputState }

func (IstioEgressGatewayResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IstioEgressGatewayResponse)(nil)).Elem()
}

func (o IstioEgressGatewayResponseArrayOutput) ToIstioEgressGatewayResponseArrayOutput() IstioEgressGatewayResponseArrayOutput {
	return o
}

func (o IstioEgressGatewayResponseArrayOutput) ToIstioEgressGatewayResponseArrayOutputWithContext(ctx context.Context) IstioEgressGatewayResponseArrayOutput {
	return o
}

func (o IstioEgressGatewayResponseArrayOutput) Index(i pulumi.IntInput) IstioEgressGatewayResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IstioEgressGatewayResponse {
		return vs[0].([]IstioEgressGatewayResponse)[vs[1].(int)]
	}).(IstioEgressGatewayResponseOutput)
}

// Istio ingress gateway configuration. For now, we support up to one external ingress gateway named `aks-istio-ingressgateway-external` and one internal ingress gateway named `aks-istio-ingressgateway-internal`.
type IstioIngressGateway struct {
	// Whether to enable the ingress gateway.
	Enabled bool `pulumi:"enabled"`
	// Mode of an ingress gateway.
	Mode string `pulumi:"mode"`
}

// IstioIngressGatewayInput is an input type that accepts IstioIngressGatewayArgs and IstioIngressGatewayOutput values.
// You can construct a concrete instance of `IstioIngressGatewayInput` via:
//
//	IstioIngressGatewayArgs{...}
type IstioIngressGatewayInput interface {
	pulumi.Input

	ToIstioIngressGatewayOutput() IstioIngressGatewayOutput
	ToIstioIngressGatewayOutputWithContext(context.Context) IstioIngressGatewayOutput
}

// Istio ingress gateway configuration. For now, we support up to one external ingress gateway named `aks-istio-ingressgateway-external` and one internal ingress gateway named `aks-istio-ingressgateway-internal`.
type IstioIngressGatewayArgs struct {
	// Whether to enable the ingress gateway.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Mode of an ingress gateway.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (IstioIngressGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioIngressGateway)(nil)).Elem()
}

func (i IstioIngressGatewayArgs) ToIstioIngressGatewayOutput() IstioIngressGatewayOutput {
	return i.ToIstioIngressGatewayOutputWithContext(context.Background())
}

func (i IstioIngressGatewayArgs) ToIstioIngressGatewayOutputWithContext(ctx context.Context) IstioIngressGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioIngressGatewayOutput)
}

// IstioIngressGatewayArrayInput is an input type that accepts IstioIngressGatewayArray and IstioIngressGatewayArrayOutput values.
// You can construct a concrete instance of `IstioIngressGatewayArrayInput` via:
//
//	IstioIngressGatewayArray{ IstioIngressGatewayArgs{...} }
type IstioIngressGatewayArrayInput interface {
	pulumi.Input

	ToIstioIngressGatewayArrayOutput() IstioIngressGatewayArrayOutput
	ToIstioIngressGatewayArrayOutputWithContext(context.Context) IstioIngressGatewayArrayOutput
}

type IstioIngressGatewayArray []IstioIngressGatewayInput

func (IstioIngressGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IstioIngressGateway)(nil)).Elem()
}

func (i IstioIngressGatewayArray) ToIstioIngressGatewayArrayOutput() IstioIngressGatewayArrayOutput {
	return i.ToIstioIngressGatewayArrayOutputWithContext(context.Background())
}

func (i IstioIngressGatewayArray) ToIstioIngressGatewayArrayOutputWithContext(ctx context.Context) IstioIngressGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioIngressGatewayArrayOutput)
}

// Istio ingress gateway configuration. For now, we support up to one external ingress gateway named `aks-istio-ingressgateway-external` and one internal ingress gateway named `aks-istio-ingressgateway-internal`.
type IstioIngressGatewayOutput struct{ *pulumi.OutputState }

func (IstioIngressGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioIngressGateway)(nil)).Elem()
}

func (o IstioIngressGatewayOutput) ToIstioIngressGatewayOutput() IstioIngressGatewayOutput {
	return o
}

func (o IstioIngressGatewayOutput) ToIstioIngressGatewayOutputWithContext(ctx context.Context) IstioIngressGatewayOutput {
	return o
}

// Whether to enable the ingress gateway.
func (o IstioIngressGatewayOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IstioIngressGateway) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Mode of an ingress gateway.
func (o IstioIngressGatewayOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v IstioIngressGateway) string { return v.Mode }).(pulumi.StringOutput)
}

type IstioIngressGatewayArrayOutput struct{ *pulumi.OutputState }

func (IstioIngressGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IstioIngressGateway)(nil)).Elem()
}

func (o IstioIngressGatewayArrayOutput) ToIstioIngressGatewayArrayOutput() IstioIngressGatewayArrayOutput {
	return o
}

func (o IstioIngressGatewayArrayOutput) ToIstioIngressGatewayArrayOutputWithContext(ctx context.Context) IstioIngressGatewayArrayOutput {
	return o
}

func (o IstioIngressGatewayArrayOutput) Index(i pulumi.IntInput) IstioIngressGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IstioIngressGateway {
		return vs[0].([]IstioIngressGateway)[vs[1].(int)]
	}).(IstioIngressGatewayOutput)
}

// Istio ingress gateway configuration. For now, we support up to one external ingress gateway named `aks-istio-ingressgateway-external` and one internal ingress gateway named `aks-istio-ingressgateway-internal`.
type IstioIngressGatewayResponse struct {
	// Whether to enable the ingress gateway.
	Enabled bool `pulumi:"enabled"`
	// Mode of an ingress gateway.
	Mode string `pulumi:"mode"`
}

// Istio ingress gateway configuration. For now, we support up to one external ingress gateway named `aks-istio-ingressgateway-external` and one internal ingress gateway named `aks-istio-ingressgateway-internal`.
type IstioIngressGatewayResponseOutput struct{ *pulumi.OutputState }

func (IstioIngressGatewayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioIngressGatewayResponse)(nil)).Elem()
}

func (o IstioIngressGatewayResponseOutput) ToIstioIngressGatewayResponseOutput() IstioIngressGatewayResponseOutput {
	return o
}

func (o IstioIngressGatewayResponseOutput) ToIstioIngressGatewayResponseOutputWithContext(ctx context.Context) IstioIngressGatewayResponseOutput {
	return o
}

// Whether to enable the ingress gateway.
func (o IstioIngressGatewayResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IstioIngressGatewayResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Mode of an ingress gateway.
func (o IstioIngressGatewayResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v IstioIngressGatewayResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type IstioIngressGatewayResponseArrayOutput struct{ *pulumi.OutputState }

func (IstioIngressGatewayResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IstioIngressGatewayResponse)(nil)).Elem()
}

func (o IstioIngressGatewayResponseArrayOutput) ToIstioIngressGatewayResponseArrayOutput() IstioIngressGatewayResponseArrayOutput {
	return o
}

func (o IstioIngressGatewayResponseArrayOutput) ToIstioIngressGatewayResponseArrayOutputWithContext(ctx context.Context) IstioIngressGatewayResponseArrayOutput {
	return o
}

func (o IstioIngressGatewayResponseArrayOutput) Index(i pulumi.IntInput) IstioIngressGatewayResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IstioIngressGatewayResponse {
		return vs[0].([]IstioIngressGatewayResponse)[vs[1].(int)]
	}).(IstioIngressGatewayResponseOutput)
}

// Plugin certificates information for Service Mesh.
type IstioPluginCertificateAuthority struct {
	// Certificate chain object name in Azure Key Vault.
	CertChainObjectName *string `pulumi:"certChainObjectName"`
	// Intermediate certificate object name in Azure Key Vault.
	CertObjectName *string `pulumi:"certObjectName"`
	// Intermediate certificate private key object name in Azure Key Vault.
	KeyObjectName *string `pulumi:"keyObjectName"`
	// The resource ID of the Key Vault.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// Root certificate object name in Azure Key Vault.
	RootCertObjectName *string `pulumi:"rootCertObjectName"`
}

// IstioPluginCertificateAuthorityInput is an input type that accepts IstioPluginCertificateAuthorityArgs and IstioPluginCertificateAuthorityOutput values.
// You can construct a concrete instance of `IstioPluginCertificateAuthorityInput` via:
//
//	IstioPluginCertificateAuthorityArgs{...}
type IstioPluginCertificateAuthorityInput interface {
	pulumi.Input

	ToIstioPluginCertificateAuthorityOutput() IstioPluginCertificateAuthorityOutput
	ToIstioPluginCertificateAuthorityOutputWithContext(context.Context) IstioPluginCertificateAuthorityOutput
}

// Plugin certificates information for Service Mesh.
type IstioPluginCertificateAuthorityArgs struct {
	// Certificate chain object name in Azure Key Vault.
	CertChainObjectName pulumi.StringPtrInput `pulumi:"certChainObjectName"`
	// Intermediate certificate object name in Azure Key Vault.
	CertObjectName pulumi.StringPtrInput `pulumi:"certObjectName"`
	// Intermediate certificate private key object name in Azure Key Vault.
	KeyObjectName pulumi.StringPtrInput `pulumi:"keyObjectName"`
	// The resource ID of the Key Vault.
	KeyVaultId pulumi.StringPtrInput `pulumi:"keyVaultId"`
	// Root certificate object name in Azure Key Vault.
	RootCertObjectName pulumi.StringPtrInput `pulumi:"rootCertObjectName"`
}

func (IstioPluginCertificateAuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioPluginCertificateAuthority)(nil)).Elem()
}

func (i IstioPluginCertificateAuthorityArgs) ToIstioPluginCertificateAuthorityOutput() IstioPluginCertificateAuthorityOutput {
	return i.ToIstioPluginCertificateAuthorityOutputWithContext(context.Background())
}

func (i IstioPluginCertificateAuthorityArgs) ToIstioPluginCertificateAuthorityOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioPluginCertificateAuthorityOutput)
}

func (i IstioPluginCertificateAuthorityArgs) ToIstioPluginCertificateAuthorityPtrOutput() IstioPluginCertificateAuthorityPtrOutput {
	return i.ToIstioPluginCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i IstioPluginCertificateAuthorityArgs) ToIstioPluginCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioPluginCertificateAuthorityOutput).ToIstioPluginCertificateAuthorityPtrOutputWithContext(ctx)
}

// IstioPluginCertificateAuthorityPtrInput is an input type that accepts IstioPluginCertificateAuthorityArgs, IstioPluginCertificateAuthorityPtr and IstioPluginCertificateAuthorityPtrOutput values.
// You can construct a concrete instance of `IstioPluginCertificateAuthorityPtrInput` via:
//
//	        IstioPluginCertificateAuthorityArgs{...}
//
//	or:
//
//	        nil
type IstioPluginCertificateAuthorityPtrInput interface {
	pulumi.Input

	ToIstioPluginCertificateAuthorityPtrOutput() IstioPluginCertificateAuthorityPtrOutput
	ToIstioPluginCertificateAuthorityPtrOutputWithContext(context.Context) IstioPluginCertificateAuthorityPtrOutput
}

type istioPluginCertificateAuthorityPtrType IstioPluginCertificateAuthorityArgs

func IstioPluginCertificateAuthorityPtr(v *IstioPluginCertificateAuthorityArgs) IstioPluginCertificateAuthorityPtrInput {
	return (*istioPluginCertificateAuthorityPtrType)(v)
}

func (*istioPluginCertificateAuthorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioPluginCertificateAuthority)(nil)).Elem()
}

func (i *istioPluginCertificateAuthorityPtrType) ToIstioPluginCertificateAuthorityPtrOutput() IstioPluginCertificateAuthorityPtrOutput {
	return i.ToIstioPluginCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (i *istioPluginCertificateAuthorityPtrType) ToIstioPluginCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioPluginCertificateAuthorityPtrOutput)
}

// Plugin certificates information for Service Mesh.
type IstioPluginCertificateAuthorityOutput struct{ *pulumi.OutputState }

func (IstioPluginCertificateAuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioPluginCertificateAuthority)(nil)).Elem()
}

func (o IstioPluginCertificateAuthorityOutput) ToIstioPluginCertificateAuthorityOutput() IstioPluginCertificateAuthorityOutput {
	return o
}

func (o IstioPluginCertificateAuthorityOutput) ToIstioPluginCertificateAuthorityOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityOutput {
	return o
}

func (o IstioPluginCertificateAuthorityOutput) ToIstioPluginCertificateAuthorityPtrOutput() IstioPluginCertificateAuthorityPtrOutput {
	return o.ToIstioPluginCertificateAuthorityPtrOutputWithContext(context.Background())
}

func (o IstioPluginCertificateAuthorityOutput) ToIstioPluginCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IstioPluginCertificateAuthority) *IstioPluginCertificateAuthority {
		return &v
	}).(IstioPluginCertificateAuthorityPtrOutput)
}

// Certificate chain object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityOutput) CertChainObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthority) *string { return v.CertChainObjectName }).(pulumi.StringPtrOutput)
}

// Intermediate certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityOutput) CertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthority) *string { return v.CertObjectName }).(pulumi.StringPtrOutput)
}

// Intermediate certificate private key object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityOutput) KeyObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthority) *string { return v.KeyObjectName }).(pulumi.StringPtrOutput)
}

// The resource ID of the Key Vault.
func (o IstioPluginCertificateAuthorityOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthority) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// Root certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityOutput) RootCertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthority) *string { return v.RootCertObjectName }).(pulumi.StringPtrOutput)
}

type IstioPluginCertificateAuthorityPtrOutput struct{ *pulumi.OutputState }

func (IstioPluginCertificateAuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioPluginCertificateAuthority)(nil)).Elem()
}

func (o IstioPluginCertificateAuthorityPtrOutput) ToIstioPluginCertificateAuthorityPtrOutput() IstioPluginCertificateAuthorityPtrOutput {
	return o
}

func (o IstioPluginCertificateAuthorityPtrOutput) ToIstioPluginCertificateAuthorityPtrOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityPtrOutput {
	return o
}

func (o IstioPluginCertificateAuthorityPtrOutput) Elem() IstioPluginCertificateAuthorityOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthority) IstioPluginCertificateAuthority {
		if v != nil {
			return *v
		}
		var ret IstioPluginCertificateAuthority
		return ret
	}).(IstioPluginCertificateAuthorityOutput)
}

// Certificate chain object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityPtrOutput) CertChainObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.CertChainObjectName
	}).(pulumi.StringPtrOutput)
}

// Intermediate certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityPtrOutput) CertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.CertObjectName
	}).(pulumi.StringPtrOutput)
}

// Intermediate certificate private key object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityPtrOutput) KeyObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.KeyObjectName
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the Key Vault.
func (o IstioPluginCertificateAuthorityPtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// Root certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityPtrOutput) RootCertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthority) *string {
		if v == nil {
			return nil
		}
		return v.RootCertObjectName
	}).(pulumi.StringPtrOutput)
}

// Plugin certificates information for Service Mesh.
type IstioPluginCertificateAuthorityResponse struct {
	// Certificate chain object name in Azure Key Vault.
	CertChainObjectName *string `pulumi:"certChainObjectName"`
	// Intermediate certificate object name in Azure Key Vault.
	CertObjectName *string `pulumi:"certObjectName"`
	// Intermediate certificate private key object name in Azure Key Vault.
	KeyObjectName *string `pulumi:"keyObjectName"`
	// The resource ID of the Key Vault.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// Root certificate object name in Azure Key Vault.
	RootCertObjectName *string `pulumi:"rootCertObjectName"`
}

// Plugin certificates information for Service Mesh.
type IstioPluginCertificateAuthorityResponseOutput struct{ *pulumi.OutputState }

func (IstioPluginCertificateAuthorityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioPluginCertificateAuthorityResponse)(nil)).Elem()
}

func (o IstioPluginCertificateAuthorityResponseOutput) ToIstioPluginCertificateAuthorityResponseOutput() IstioPluginCertificateAuthorityResponseOutput {
	return o
}

func (o IstioPluginCertificateAuthorityResponseOutput) ToIstioPluginCertificateAuthorityResponseOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityResponseOutput {
	return o
}

// Certificate chain object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponseOutput) CertChainObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthorityResponse) *string { return v.CertChainObjectName }).(pulumi.StringPtrOutput)
}

// Intermediate certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponseOutput) CertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthorityResponse) *string { return v.CertObjectName }).(pulumi.StringPtrOutput)
}

// Intermediate certificate private key object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponseOutput) KeyObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthorityResponse) *string { return v.KeyObjectName }).(pulumi.StringPtrOutput)
}

// The resource ID of the Key Vault.
func (o IstioPluginCertificateAuthorityResponseOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthorityResponse) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// Root certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponseOutput) RootCertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IstioPluginCertificateAuthorityResponse) *string { return v.RootCertObjectName }).(pulumi.StringPtrOutput)
}

type IstioPluginCertificateAuthorityResponsePtrOutput struct{ *pulumi.OutputState }

func (IstioPluginCertificateAuthorityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioPluginCertificateAuthorityResponse)(nil)).Elem()
}

func (o IstioPluginCertificateAuthorityResponsePtrOutput) ToIstioPluginCertificateAuthorityResponsePtrOutput() IstioPluginCertificateAuthorityResponsePtrOutput {
	return o
}

func (o IstioPluginCertificateAuthorityResponsePtrOutput) ToIstioPluginCertificateAuthorityResponsePtrOutputWithContext(ctx context.Context) IstioPluginCertificateAuthorityResponsePtrOutput {
	return o
}

func (o IstioPluginCertificateAuthorityResponsePtrOutput) Elem() IstioPluginCertificateAuthorityResponseOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthorityResponse) IstioPluginCertificateAuthorityResponse {
		if v != nil {
			return *v
		}
		var ret IstioPluginCertificateAuthorityResponse
		return ret
	}).(IstioPluginCertificateAuthorityResponseOutput)
}

// Certificate chain object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponsePtrOutput) CertChainObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertChainObjectName
	}).(pulumi.StringPtrOutput)
}

// Intermediate certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponsePtrOutput) CertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertObjectName
	}).(pulumi.StringPtrOutput)
}

// Intermediate certificate private key object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponsePtrOutput) KeyObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyObjectName
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the Key Vault.
func (o IstioPluginCertificateAuthorityResponsePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// Root certificate object name in Azure Key Vault.
func (o IstioPluginCertificateAuthorityResponsePtrOutput) RootCertObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IstioPluginCertificateAuthorityResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootCertObjectName
	}).(pulumi.StringPtrOutput)
}

// Istio service mesh configuration.
type IstioServiceMesh struct {
	// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
	CertificateAuthority *IstioCertificateAuthority `pulumi:"certificateAuthority"`
	// Istio components configuration.
	Components *IstioComponents `pulumi:"components"`
	// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
	Revisions []string `pulumi:"revisions"`
}

// IstioServiceMeshInput is an input type that accepts IstioServiceMeshArgs and IstioServiceMeshOutput values.
// You can construct a concrete instance of `IstioServiceMeshInput` via:
//
//	IstioServiceMeshArgs{...}
type IstioServiceMeshInput interface {
	pulumi.Input

	ToIstioServiceMeshOutput() IstioServiceMeshOutput
	ToIstioServiceMeshOutputWithContext(context.Context) IstioServiceMeshOutput
}

// Istio service mesh configuration.
type IstioServiceMeshArgs struct {
	// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
	CertificateAuthority IstioCertificateAuthorityPtrInput `pulumi:"certificateAuthority"`
	// Istio components configuration.
	Components IstioComponentsPtrInput `pulumi:"components"`
	// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
	Revisions pulumi.StringArrayInput `pulumi:"revisions"`
}

func (IstioServiceMeshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioServiceMesh)(nil)).Elem()
}

func (i IstioServiceMeshArgs) ToIstioServiceMeshOutput() IstioServiceMeshOutput {
	return i.ToIstioServiceMeshOutputWithContext(context.Background())
}

func (i IstioServiceMeshArgs) ToIstioServiceMeshOutputWithContext(ctx context.Context) IstioServiceMeshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioServiceMeshOutput)
}

func (i IstioServiceMeshArgs) ToIstioServiceMeshPtrOutput() IstioServiceMeshPtrOutput {
	return i.ToIstioServiceMeshPtrOutputWithContext(context.Background())
}

func (i IstioServiceMeshArgs) ToIstioServiceMeshPtrOutputWithContext(ctx context.Context) IstioServiceMeshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioServiceMeshOutput).ToIstioServiceMeshPtrOutputWithContext(ctx)
}

// IstioServiceMeshPtrInput is an input type that accepts IstioServiceMeshArgs, IstioServiceMeshPtr and IstioServiceMeshPtrOutput values.
// You can construct a concrete instance of `IstioServiceMeshPtrInput` via:
//
//	        IstioServiceMeshArgs{...}
//
//	or:
//
//	        nil
type IstioServiceMeshPtrInput interface {
	pulumi.Input

	ToIstioServiceMeshPtrOutput() IstioServiceMeshPtrOutput
	ToIstioServiceMeshPtrOutputWithContext(context.Context) IstioServiceMeshPtrOutput
}

type istioServiceMeshPtrType IstioServiceMeshArgs

func IstioServiceMeshPtr(v *IstioServiceMeshArgs) IstioServiceMeshPtrInput {
	return (*istioServiceMeshPtrType)(v)
}

func (*istioServiceMeshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioServiceMesh)(nil)).Elem()
}

func (i *istioServiceMeshPtrType) ToIstioServiceMeshPtrOutput() IstioServiceMeshPtrOutput {
	return i.ToIstioServiceMeshPtrOutputWithContext(context.Background())
}

func (i *istioServiceMeshPtrType) ToIstioServiceMeshPtrOutputWithContext(ctx context.Context) IstioServiceMeshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IstioServiceMeshPtrOutput)
}

// Istio service mesh configuration.
type IstioServiceMeshOutput struct{ *pulumi.OutputState }

func (IstioServiceMeshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioServiceMesh)(nil)).Elem()
}

func (o IstioServiceMeshOutput) ToIstioServiceMeshOutput() IstioServiceMeshOutput {
	return o
}

func (o IstioServiceMeshOutput) ToIstioServiceMeshOutputWithContext(ctx context.Context) IstioServiceMeshOutput {
	return o
}

func (o IstioServiceMeshOutput) ToIstioServiceMeshPtrOutput() IstioServiceMeshPtrOutput {
	return o.ToIstioServiceMeshPtrOutputWithContext(context.Background())
}

func (o IstioServiceMeshOutput) ToIstioServiceMeshPtrOutputWithContext(ctx context.Context) IstioServiceMeshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IstioServiceMesh) *IstioServiceMesh {
		return &v
	}).(IstioServiceMeshPtrOutput)
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
func (o IstioServiceMeshOutput) CertificateAuthority() IstioCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v IstioServiceMesh) *IstioCertificateAuthority { return v.CertificateAuthority }).(IstioCertificateAuthorityPtrOutput)
}

// Istio components configuration.
func (o IstioServiceMeshOutput) Components() IstioComponentsPtrOutput {
	return o.ApplyT(func(v IstioServiceMesh) *IstioComponents { return v.Components }).(IstioComponentsPtrOutput)
}

// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
func (o IstioServiceMeshOutput) Revisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IstioServiceMesh) []string { return v.Revisions }).(pulumi.StringArrayOutput)
}

type IstioServiceMeshPtrOutput struct{ *pulumi.OutputState }

func (IstioServiceMeshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioServiceMesh)(nil)).Elem()
}

func (o IstioServiceMeshPtrOutput) ToIstioServiceMeshPtrOutput() IstioServiceMeshPtrOutput {
	return o
}

func (o IstioServiceMeshPtrOutput) ToIstioServiceMeshPtrOutputWithContext(ctx context.Context) IstioServiceMeshPtrOutput {
	return o
}

func (o IstioServiceMeshPtrOutput) Elem() IstioServiceMeshOutput {
	return o.ApplyT(func(v *IstioServiceMesh) IstioServiceMesh {
		if v != nil {
			return *v
		}
		var ret IstioServiceMesh
		return ret
	}).(IstioServiceMeshOutput)
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
func (o IstioServiceMeshPtrOutput) CertificateAuthority() IstioCertificateAuthorityPtrOutput {
	return o.ApplyT(func(v *IstioServiceMesh) *IstioCertificateAuthority {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(IstioCertificateAuthorityPtrOutput)
}

// Istio components configuration.
func (o IstioServiceMeshPtrOutput) Components() IstioComponentsPtrOutput {
	return o.ApplyT(func(v *IstioServiceMesh) *IstioComponents {
		if v == nil {
			return nil
		}
		return v.Components
	}).(IstioComponentsPtrOutput)
}

// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
func (o IstioServiceMeshPtrOutput) Revisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IstioServiceMesh) []string {
		if v == nil {
			return nil
		}
		return v.Revisions
	}).(pulumi.StringArrayOutput)
}

// Istio service mesh configuration.
type IstioServiceMeshResponse struct {
	// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
	CertificateAuthority *IstioCertificateAuthorityResponse `pulumi:"certificateAuthority"`
	// Istio components configuration.
	Components *IstioComponentsResponse `pulumi:"components"`
	// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
	Revisions []string `pulumi:"revisions"`
}

// Istio service mesh configuration.
type IstioServiceMeshResponseOutput struct{ *pulumi.OutputState }

func (IstioServiceMeshResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IstioServiceMeshResponse)(nil)).Elem()
}

func (o IstioServiceMeshResponseOutput) ToIstioServiceMeshResponseOutput() IstioServiceMeshResponseOutput {
	return o
}

func (o IstioServiceMeshResponseOutput) ToIstioServiceMeshResponseOutputWithContext(ctx context.Context) IstioServiceMeshResponseOutput {
	return o
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
func (o IstioServiceMeshResponseOutput) CertificateAuthority() IstioCertificateAuthorityResponsePtrOutput {
	return o.ApplyT(func(v IstioServiceMeshResponse) *IstioCertificateAuthorityResponse { return v.CertificateAuthority }).(IstioCertificateAuthorityResponsePtrOutput)
}

// Istio components configuration.
func (o IstioServiceMeshResponseOutput) Components() IstioComponentsResponsePtrOutput {
	return o.ApplyT(func(v IstioServiceMeshResponse) *IstioComponentsResponse { return v.Components }).(IstioComponentsResponsePtrOutput)
}

// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
func (o IstioServiceMeshResponseOutput) Revisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IstioServiceMeshResponse) []string { return v.Revisions }).(pulumi.StringArrayOutput)
}

type IstioServiceMeshResponsePtrOutput struct{ *pulumi.OutputState }

func (IstioServiceMeshResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IstioServiceMeshResponse)(nil)).Elem()
}

func (o IstioServiceMeshResponsePtrOutput) ToIstioServiceMeshResponsePtrOutput() IstioServiceMeshResponsePtrOutput {
	return o
}

func (o IstioServiceMeshResponsePtrOutput) ToIstioServiceMeshResponsePtrOutputWithContext(ctx context.Context) IstioServiceMeshResponsePtrOutput {
	return o
}

func (o IstioServiceMeshResponsePtrOutput) Elem() IstioServiceMeshResponseOutput {
	return o.ApplyT(func(v *IstioServiceMeshResponse) IstioServiceMeshResponse {
		if v != nil {
			return *v
		}
		var ret IstioServiceMeshResponse
		return ret
	}).(IstioServiceMeshResponseOutput)
}

// Istio Service Mesh Certificate Authority (CA) configuration. For now, we only support plugin certificates as described here https://aka.ms/asm-plugin-ca
func (o IstioServiceMeshResponsePtrOutput) CertificateAuthority() IstioCertificateAuthorityResponsePtrOutput {
	return o.ApplyT(func(v *IstioServiceMeshResponse) *IstioCertificateAuthorityResponse {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(IstioCertificateAuthorityResponsePtrOutput)
}

// Istio components configuration.
func (o IstioServiceMeshResponsePtrOutput) Components() IstioComponentsResponsePtrOutput {
	return o.ApplyT(func(v *IstioServiceMeshResponse) *IstioComponentsResponse {
		if v == nil {
			return nil
		}
		return v.Components
	}).(IstioComponentsResponsePtrOutput)
}

// The list of revisions of the Istio control plane. When an upgrade is not in progress, this holds one value. When canary upgrade is in progress, this can only hold two consecutive values. For more information, see: https://learn.microsoft.com/en-us/azure/aks/istio-upgrade
func (o IstioServiceMeshResponsePtrOutput) Revisions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IstioServiceMeshResponse) []string {
		if v == nil {
			return nil
		}
		return v.Revisions
	}).(pulumi.StringArrayOutput)
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type KubeletConfig struct {
	// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
	ContainerLogMaxFiles *int `pulumi:"containerLogMaxFiles"`
	// The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB *int `pulumi:"containerLogMaxSizeMB"`
	// The default is true.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
	// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn *bool `pulumi:"failSwapOn"`
	// To disable image garbage collection, set to 100. The default is 85%
	ImageGcHighThreshold *int `pulumi:"imageGcHighThreshold"`
	// This cannot be set higher than imageGcHighThreshold. The default is 80%
	ImageGcLowThreshold *int `pulumi:"imageGcLowThreshold"`
	// The maximum number of processes per pod.
	PodMaxPids *int `pulumi:"podMaxPids"`
	// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
	TopologyManagerPolicy *string `pulumi:"topologyManagerPolicy"`
}

// KubeletConfigInput is an input type that accepts KubeletConfigArgs and KubeletConfigOutput values.
// You can construct a concrete instance of `KubeletConfigInput` via:
//
//	KubeletConfigArgs{...}
type KubeletConfigInput interface {
	pulumi.Input

	ToKubeletConfigOutput() KubeletConfigOutput
	ToKubeletConfigOutputWithContext(context.Context) KubeletConfigOutput
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type KubeletConfigArgs struct {
	// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls pulumi.StringArrayInput `pulumi:"allowedUnsafeSysctls"`
	// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
	ContainerLogMaxFiles pulumi.IntPtrInput `pulumi:"containerLogMaxFiles"`
	// The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB pulumi.IntPtrInput `pulumi:"containerLogMaxSizeMB"`
	// The default is true.
	CpuCfsQuota pulumi.BoolPtrInput `pulumi:"cpuCfsQuota"`
	// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
	CpuCfsQuotaPeriod pulumi.StringPtrInput `pulumi:"cpuCfsQuotaPeriod"`
	// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
	CpuManagerPolicy pulumi.StringPtrInput `pulumi:"cpuManagerPolicy"`
	// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn pulumi.BoolPtrInput `pulumi:"failSwapOn"`
	// To disable image garbage collection, set to 100. The default is 85%
	ImageGcHighThreshold pulumi.IntPtrInput `pulumi:"imageGcHighThreshold"`
	// This cannot be set higher than imageGcHighThreshold. The default is 80%
	ImageGcLowThreshold pulumi.IntPtrInput `pulumi:"imageGcLowThreshold"`
	// The maximum number of processes per pod.
	PodMaxPids pulumi.IntPtrInput `pulumi:"podMaxPids"`
	// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
	TopologyManagerPolicy pulumi.StringPtrInput `pulumi:"topologyManagerPolicy"`
}

func (KubeletConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletConfig)(nil)).Elem()
}

func (i KubeletConfigArgs) ToKubeletConfigOutput() KubeletConfigOutput {
	return i.ToKubeletConfigOutputWithContext(context.Background())
}

func (i KubeletConfigArgs) ToKubeletConfigOutputWithContext(ctx context.Context) KubeletConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletConfigOutput)
}

func (i KubeletConfigArgs) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return i.ToKubeletConfigPtrOutputWithContext(context.Background())
}

func (i KubeletConfigArgs) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletConfigOutput).ToKubeletConfigPtrOutputWithContext(ctx)
}

// KubeletConfigPtrInput is an input type that accepts KubeletConfigArgs, KubeletConfigPtr and KubeletConfigPtrOutput values.
// You can construct a concrete instance of `KubeletConfigPtrInput` via:
//
//	        KubeletConfigArgs{...}
//
//	or:
//
//	        nil
type KubeletConfigPtrInput interface {
	pulumi.Input

	ToKubeletConfigPtrOutput() KubeletConfigPtrOutput
	ToKubeletConfigPtrOutputWithContext(context.Context) KubeletConfigPtrOutput
}

type kubeletConfigPtrType KubeletConfigArgs

func KubeletConfigPtr(v *KubeletConfigArgs) KubeletConfigPtrInput {
	return (*kubeletConfigPtrType)(v)
}

func (*kubeletConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletConfig)(nil)).Elem()
}

func (i *kubeletConfigPtrType) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return i.ToKubeletConfigPtrOutputWithContext(context.Background())
}

func (i *kubeletConfigPtrType) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeletConfigPtrOutput)
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type KubeletConfigOutput struct{ *pulumi.OutputState }

func (KubeletConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletConfig)(nil)).Elem()
}

func (o KubeletConfigOutput) ToKubeletConfigOutput() KubeletConfigOutput {
	return o
}

func (o KubeletConfigOutput) ToKubeletConfigOutputWithContext(ctx context.Context) KubeletConfigOutput {
	return o
}

func (o KubeletConfigOutput) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return o.ToKubeletConfigPtrOutputWithContext(context.Background())
}

func (o KubeletConfigOutput) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubeletConfig) *KubeletConfig {
		return &v
	}).(KubeletConfigPtrOutput)
}

// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubeletConfig) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
func (o KubeletConfigOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ContainerLogMaxFiles }).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ContainerLogMaxSizeMB }).(pulumi.IntPtrOutput)
}

// The default is true.
func (o KubeletConfigOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
func (o KubeletConfigOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
func (o KubeletConfigOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *bool { return v.FailSwapOn }).(pulumi.BoolPtrOutput)
}

// To disable image garbage collection, set to 100. The default is 85%
func (o KubeletConfigOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ImageGcHighThreshold }).(pulumi.IntPtrOutput)
}

// This cannot be set higher than imageGcHighThreshold. The default is 80%
func (o KubeletConfigOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.ImageGcLowThreshold }).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *int { return v.PodMaxPids }).(pulumi.IntPtrOutput)
}

// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
func (o KubeletConfigOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfig) *string { return v.TopologyManagerPolicy }).(pulumi.StringPtrOutput)
}

type KubeletConfigPtrOutput struct{ *pulumi.OutputState }

func (KubeletConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletConfig)(nil)).Elem()
}

func (o KubeletConfigPtrOutput) ToKubeletConfigPtrOutput() KubeletConfigPtrOutput {
	return o
}

func (o KubeletConfigPtrOutput) ToKubeletConfigPtrOutputWithContext(ctx context.Context) KubeletConfigPtrOutput {
	return o
}

func (o KubeletConfigPtrOutput) Elem() KubeletConfigOutput {
	return o.ApplyT(func(v *KubeletConfig) KubeletConfig {
		if v != nil {
			return *v
		}
		var ret KubeletConfig
		return ret
	}).(KubeletConfigOutput)
}

// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigPtrOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubeletConfig) []string {
		if v == nil {
			return nil
		}
		return v.AllowedUnsafeSysctls
	}).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
func (o KubeletConfigPtrOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxFiles
	}).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigPtrOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxSizeMB
	}).(pulumi.IntPtrOutput)
}

// The default is true.
func (o KubeletConfigPtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
func (o KubeletConfigPtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
func (o KubeletConfigPtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigPtrOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *bool {
		if v == nil {
			return nil
		}
		return v.FailSwapOn
	}).(pulumi.BoolPtrOutput)
}

// To disable image garbage collection, set to 100. The default is 85%
func (o KubeletConfigPtrOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcHighThreshold
	}).(pulumi.IntPtrOutput)
}

// This cannot be set higher than imageGcHighThreshold. The default is 80%
func (o KubeletConfigPtrOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcLowThreshold
	}).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigPtrOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *int {
		if v == nil {
			return nil
		}
		return v.PodMaxPids
	}).(pulumi.IntPtrOutput)
}

// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
func (o KubeletConfigPtrOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfig) *string {
		if v == nil {
			return nil
		}
		return v.TopologyManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type KubeletConfigResponse struct {
	// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
	AllowedUnsafeSysctls []string `pulumi:"allowedUnsafeSysctls"`
	// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
	ContainerLogMaxFiles *int `pulumi:"containerLogMaxFiles"`
	// The maximum size (e.g. 10Mi) of container log file before it is rotated.
	ContainerLogMaxSizeMB *int `pulumi:"containerLogMaxSizeMB"`
	// The default is true.
	CpuCfsQuota *bool `pulumi:"cpuCfsQuota"`
	// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
	CpuCfsQuotaPeriod *string `pulumi:"cpuCfsQuotaPeriod"`
	// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
	// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
	FailSwapOn *bool `pulumi:"failSwapOn"`
	// To disable image garbage collection, set to 100. The default is 85%
	ImageGcHighThreshold *int `pulumi:"imageGcHighThreshold"`
	// This cannot be set higher than imageGcHighThreshold. The default is 80%
	ImageGcLowThreshold *int `pulumi:"imageGcLowThreshold"`
	// The maximum number of processes per pod.
	PodMaxPids *int `pulumi:"podMaxPids"`
	// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
	TopologyManagerPolicy *string `pulumi:"topologyManagerPolicy"`
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type KubeletConfigResponseOutput struct{ *pulumi.OutputState }

func (KubeletConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeletConfigResponse)(nil)).Elem()
}

func (o KubeletConfigResponseOutput) ToKubeletConfigResponseOutput() KubeletConfigResponseOutput {
	return o
}

func (o KubeletConfigResponseOutput) ToKubeletConfigResponseOutputWithContext(ctx context.Context) KubeletConfigResponseOutput {
	return o
}

// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigResponseOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KubeletConfigResponse) []string { return v.AllowedUnsafeSysctls }).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
func (o KubeletConfigResponseOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ContainerLogMaxFiles }).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigResponseOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ContainerLogMaxSizeMB }).(pulumi.IntPtrOutput)
}

// The default is true.
func (o KubeletConfigResponseOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *bool { return v.CpuCfsQuota }).(pulumi.BoolPtrOutput)
}

// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
func (o KubeletConfigResponseOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *string { return v.CpuCfsQuotaPeriod }).(pulumi.StringPtrOutput)
}

// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
func (o KubeletConfigResponseOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigResponseOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *bool { return v.FailSwapOn }).(pulumi.BoolPtrOutput)
}

// To disable image garbage collection, set to 100. The default is 85%
func (o KubeletConfigResponseOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ImageGcHighThreshold }).(pulumi.IntPtrOutput)
}

// This cannot be set higher than imageGcHighThreshold. The default is 80%
func (o KubeletConfigResponseOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.ImageGcLowThreshold }).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigResponseOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *int { return v.PodMaxPids }).(pulumi.IntPtrOutput)
}

// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
func (o KubeletConfigResponseOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeletConfigResponse) *string { return v.TopologyManagerPolicy }).(pulumi.StringPtrOutput)
}

type KubeletConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (KubeletConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubeletConfigResponse)(nil)).Elem()
}

func (o KubeletConfigResponsePtrOutput) ToKubeletConfigResponsePtrOutput() KubeletConfigResponsePtrOutput {
	return o
}

func (o KubeletConfigResponsePtrOutput) ToKubeletConfigResponsePtrOutputWithContext(ctx context.Context) KubeletConfigResponsePtrOutput {
	return o
}

func (o KubeletConfigResponsePtrOutput) Elem() KubeletConfigResponseOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) KubeletConfigResponse {
		if v != nil {
			return *v
		}
		var ret KubeletConfigResponse
		return ret
	}).(KubeletConfigResponseOutput)
}

// Allowed list of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
func (o KubeletConfigResponsePtrOutput) AllowedUnsafeSysctls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedUnsafeSysctls
	}).(pulumi.StringArrayOutput)
}

// The maximum number of container log files that can be present for a container. The number must be ≥ 2.
func (o KubeletConfigResponsePtrOutput) ContainerLogMaxFiles() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxFiles
	}).(pulumi.IntPtrOutput)
}

// The maximum size (e.g. 10Mi) of container log file before it is rotated.
func (o KubeletConfigResponsePtrOutput) ContainerLogMaxSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ContainerLogMaxSizeMB
	}).(pulumi.IntPtrOutput)
}

// The default is true.
func (o KubeletConfigResponsePtrOutput) CpuCfsQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuota
	}).(pulumi.BoolPtrOutput)
}

// The default is '100ms.' Valid values are a sequence of decimal numbers with an optional fraction and a unit suffix. For example: '300ms', '2h45m'. Supported units are 'ns', 'us', 'ms', 's', 'm', and 'h'.
func (o KubeletConfigResponsePtrOutput) CpuCfsQuotaPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.CpuCfsQuotaPeriod
	}).(pulumi.StringPtrOutput)
}

// The default is 'none'. See [Kubernetes CPU management policies](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#cpu-management-policies) for more information. Allowed values are 'none' and 'static'.
func (o KubeletConfigResponsePtrOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.CpuManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// If set to true it will make the Kubelet fail to start if swap is enabled on the node.
func (o KubeletConfigResponsePtrOutput) FailSwapOn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return v.FailSwapOn
	}).(pulumi.BoolPtrOutput)
}

// To disable image garbage collection, set to 100. The default is 85%
func (o KubeletConfigResponsePtrOutput) ImageGcHighThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcHighThreshold
	}).(pulumi.IntPtrOutput)
}

// This cannot be set higher than imageGcHighThreshold. The default is 80%
func (o KubeletConfigResponsePtrOutput) ImageGcLowThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageGcLowThreshold
	}).(pulumi.IntPtrOutput)
}

// The maximum number of processes per pod.
func (o KubeletConfigResponsePtrOutput) PodMaxPids() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.PodMaxPids
	}).(pulumi.IntPtrOutput)
}

// For more information see [Kubernetes Topology Manager](https://kubernetes.io/docs/tasks/administer-cluster/topology-manager). The default is 'none'. Allowed values are 'none', 'best-effort', 'restricted', and 'single-numa-node'.
func (o KubeletConfigResponsePtrOutput) TopologyManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubeletConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TopologyManagerPolicy
	}).(pulumi.StringPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []LabelSelectorRequirement `pulumi:"matchExpressions"`
	// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
	MatchLabels []string `pulumi:"matchLabels"`
}

// LabelSelectorInput is an input type that accepts LabelSelectorArgs and LabelSelectorOutput values.
// You can construct a concrete instance of `LabelSelectorInput` via:
//
//	LabelSelectorArgs{...}
type LabelSelectorInput interface {
	pulumi.Input

	ToLabelSelectorOutput() LabelSelectorOutput
	ToLabelSelectorOutputWithContext(context.Context) LabelSelectorOutput
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions LabelSelectorRequirementArrayInput `pulumi:"matchExpressions"`
	// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
	MatchLabels pulumi.StringArrayInput `pulumi:"matchLabels"`
}

func (LabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelSelector)(nil)).Elem()
}

func (i LabelSelectorArgs) ToLabelSelectorOutput() LabelSelectorOutput {
	return i.ToLabelSelectorOutputWithContext(context.Background())
}

func (i LabelSelectorArgs) ToLabelSelectorOutputWithContext(ctx context.Context) LabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelSelectorOutput)
}

func (i LabelSelectorArgs) ToLabelSelectorPtrOutput() LabelSelectorPtrOutput {
	return i.ToLabelSelectorPtrOutputWithContext(context.Background())
}

func (i LabelSelectorArgs) ToLabelSelectorPtrOutputWithContext(ctx context.Context) LabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelSelectorOutput).ToLabelSelectorPtrOutputWithContext(ctx)
}

// LabelSelectorPtrInput is an input type that accepts LabelSelectorArgs, LabelSelectorPtr and LabelSelectorPtrOutput values.
// You can construct a concrete instance of `LabelSelectorPtrInput` via:
//
//	        LabelSelectorArgs{...}
//
//	or:
//
//	        nil
type LabelSelectorPtrInput interface {
	pulumi.Input

	ToLabelSelectorPtrOutput() LabelSelectorPtrOutput
	ToLabelSelectorPtrOutputWithContext(context.Context) LabelSelectorPtrOutput
}

type labelSelectorPtrType LabelSelectorArgs

func LabelSelectorPtr(v *LabelSelectorArgs) LabelSelectorPtrInput {
	return (*labelSelectorPtrType)(v)
}

func (*labelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelSelector)(nil)).Elem()
}

func (i *labelSelectorPtrType) ToLabelSelectorPtrOutput() LabelSelectorPtrOutput {
	return i.ToLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *labelSelectorPtrType) ToLabelSelectorPtrOutputWithContext(ctx context.Context) LabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelSelectorPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelectorOutput struct{ *pulumi.OutputState }

func (LabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelSelector)(nil)).Elem()
}

func (o LabelSelectorOutput) ToLabelSelectorOutput() LabelSelectorOutput {
	return o
}

func (o LabelSelectorOutput) ToLabelSelectorOutputWithContext(ctx context.Context) LabelSelectorOutput {
	return o
}

func (o LabelSelectorOutput) ToLabelSelectorPtrOutput() LabelSelectorPtrOutput {
	return o.ToLabelSelectorPtrOutputWithContext(context.Background())
}

func (o LabelSelectorOutput) ToLabelSelectorPtrOutputWithContext(ctx context.Context) LabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelSelector) *LabelSelector {
		return &v
	}).(LabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o LabelSelectorOutput) MatchExpressions() LabelSelectorRequirementArrayOutput {
	return o.ApplyT(func(v LabelSelector) []LabelSelectorRequirement { return v.MatchExpressions }).(LabelSelectorRequirementArrayOutput)
}

// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
func (o LabelSelectorOutput) MatchLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LabelSelector) []string { return v.MatchLabels }).(pulumi.StringArrayOutput)
}

type LabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (LabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelSelector)(nil)).Elem()
}

func (o LabelSelectorPtrOutput) ToLabelSelectorPtrOutput() LabelSelectorPtrOutput {
	return o
}

func (o LabelSelectorPtrOutput) ToLabelSelectorPtrOutputWithContext(ctx context.Context) LabelSelectorPtrOutput {
	return o
}

func (o LabelSelectorPtrOutput) Elem() LabelSelectorOutput {
	return o.ApplyT(func(v *LabelSelector) LabelSelector {
		if v != nil {
			return *v
		}
		var ret LabelSelector
		return ret
	}).(LabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o LabelSelectorPtrOutput) MatchExpressions() LabelSelectorRequirementArrayOutput {
	return o.ApplyT(func(v *LabelSelector) []LabelSelectorRequirement {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(LabelSelectorRequirementArrayOutput)
}

// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
func (o LabelSelectorPtrOutput) MatchLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LabelSelector) []string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type LabelSelectorRequirement struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In and NotIn
	Operator *string `pulumi:"operator"`
	// values is an array of string values, the values array must be non-empty.
	Values []string `pulumi:"values"`
}

// LabelSelectorRequirementInput is an input type that accepts LabelSelectorRequirementArgs and LabelSelectorRequirementOutput values.
// You can construct a concrete instance of `LabelSelectorRequirementInput` via:
//
//	LabelSelectorRequirementArgs{...}
type LabelSelectorRequirementInput interface {
	pulumi.Input

	ToLabelSelectorRequirementOutput() LabelSelectorRequirementOutput
	ToLabelSelectorRequirementOutputWithContext(context.Context) LabelSelectorRequirementOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type LabelSelectorRequirementArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In and NotIn
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values, the values array must be non-empty.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (LabelSelectorRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelSelectorRequirement)(nil)).Elem()
}

func (i LabelSelectorRequirementArgs) ToLabelSelectorRequirementOutput() LabelSelectorRequirementOutput {
	return i.ToLabelSelectorRequirementOutputWithContext(context.Background())
}

func (i LabelSelectorRequirementArgs) ToLabelSelectorRequirementOutputWithContext(ctx context.Context) LabelSelectorRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelSelectorRequirementOutput)
}

// LabelSelectorRequirementArrayInput is an input type that accepts LabelSelectorRequirementArray and LabelSelectorRequirementArrayOutput values.
// You can construct a concrete instance of `LabelSelectorRequirementArrayInput` via:
//
//	LabelSelectorRequirementArray{ LabelSelectorRequirementArgs{...} }
type LabelSelectorRequirementArrayInput interface {
	pulumi.Input

	ToLabelSelectorRequirementArrayOutput() LabelSelectorRequirementArrayOutput
	ToLabelSelectorRequirementArrayOutputWithContext(context.Context) LabelSelectorRequirementArrayOutput
}

type LabelSelectorRequirementArray []LabelSelectorRequirementInput

func (LabelSelectorRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelSelectorRequirement)(nil)).Elem()
}

func (i LabelSelectorRequirementArray) ToLabelSelectorRequirementArrayOutput() LabelSelectorRequirementArrayOutput {
	return i.ToLabelSelectorRequirementArrayOutputWithContext(context.Background())
}

func (i LabelSelectorRequirementArray) ToLabelSelectorRequirementArrayOutputWithContext(ctx context.Context) LabelSelectorRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelSelectorRequirementArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type LabelSelectorRequirementOutput struct{ *pulumi.OutputState }

func (LabelSelectorRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelSelectorRequirement)(nil)).Elem()
}

func (o LabelSelectorRequirementOutput) ToLabelSelectorRequirementOutput() LabelSelectorRequirementOutput {
	return o
}

func (o LabelSelectorRequirementOutput) ToLabelSelectorRequirementOutputWithContext(ctx context.Context) LabelSelectorRequirementOutput {
	return o
}

// key is the label key that the selector applies to.
func (o LabelSelectorRequirementOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelSelectorRequirement) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In and NotIn
func (o LabelSelectorRequirementOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelSelectorRequirement) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values, the values array must be non-empty.
func (o LabelSelectorRequirementOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LabelSelectorRequirement) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type LabelSelectorRequirementArrayOutput struct{ *pulumi.OutputState }

func (LabelSelectorRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelSelectorRequirement)(nil)).Elem()
}

func (o LabelSelectorRequirementArrayOutput) ToLabelSelectorRequirementArrayOutput() LabelSelectorRequirementArrayOutput {
	return o
}

func (o LabelSelectorRequirementArrayOutput) ToLabelSelectorRequirementArrayOutputWithContext(ctx context.Context) LabelSelectorRequirementArrayOutput {
	return o
}

func (o LabelSelectorRequirementArrayOutput) Index(i pulumi.IntInput) LabelSelectorRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LabelSelectorRequirement {
		return vs[0].([]LabelSelectorRequirement)[vs[1].(int)]
	}).(LabelSelectorRequirementOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type LabelSelectorRequirementResponse struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In and NotIn
	Operator *string `pulumi:"operator"`
	// values is an array of string values, the values array must be non-empty.
	Values []string `pulumi:"values"`
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type LabelSelectorRequirementResponseOutput struct{ *pulumi.OutputState }

func (LabelSelectorRequirementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelSelectorRequirementResponse)(nil)).Elem()
}

func (o LabelSelectorRequirementResponseOutput) ToLabelSelectorRequirementResponseOutput() LabelSelectorRequirementResponseOutput {
	return o
}

func (o LabelSelectorRequirementResponseOutput) ToLabelSelectorRequirementResponseOutputWithContext(ctx context.Context) LabelSelectorRequirementResponseOutput {
	return o
}

// key is the label key that the selector applies to.
func (o LabelSelectorRequirementResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelSelectorRequirementResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In and NotIn
func (o LabelSelectorRequirementResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelSelectorRequirementResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values, the values array must be non-empty.
func (o LabelSelectorRequirementResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LabelSelectorRequirementResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type LabelSelectorRequirementResponseArrayOutput struct{ *pulumi.OutputState }

func (LabelSelectorRequirementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelSelectorRequirementResponse)(nil)).Elem()
}

func (o LabelSelectorRequirementResponseArrayOutput) ToLabelSelectorRequirementResponseArrayOutput() LabelSelectorRequirementResponseArrayOutput {
	return o
}

func (o LabelSelectorRequirementResponseArrayOutput) ToLabelSelectorRequirementResponseArrayOutputWithContext(ctx context.Context) LabelSelectorRequirementResponseArrayOutput {
	return o
}

func (o LabelSelectorRequirementResponseArrayOutput) Index(i pulumi.IntInput) LabelSelectorRequirementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LabelSelectorRequirementResponse {
		return vs[0].([]LabelSelectorRequirementResponse)[vs[1].(int)]
	}).(LabelSelectorRequirementResponseOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelectorResponse struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []LabelSelectorRequirementResponse `pulumi:"matchExpressions"`
	// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
	MatchLabels []string `pulumi:"matchLabels"`
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelectorResponseOutput struct{ *pulumi.OutputState }

func (LabelSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelSelectorResponse)(nil)).Elem()
}

func (o LabelSelectorResponseOutput) ToLabelSelectorResponseOutput() LabelSelectorResponseOutput {
	return o
}

func (o LabelSelectorResponseOutput) ToLabelSelectorResponseOutputWithContext(ctx context.Context) LabelSelectorResponseOutput {
	return o
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o LabelSelectorResponseOutput) MatchExpressions() LabelSelectorRequirementResponseArrayOutput {
	return o.ApplyT(func(v LabelSelectorResponse) []LabelSelectorRequirementResponse { return v.MatchExpressions }).(LabelSelectorRequirementResponseArrayOutput)
}

// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
func (o LabelSelectorResponseOutput) MatchLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LabelSelectorResponse) []string { return v.MatchLabels }).(pulumi.StringArrayOutput)
}

type LabelSelectorResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelSelectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelSelectorResponse)(nil)).Elem()
}

func (o LabelSelectorResponsePtrOutput) ToLabelSelectorResponsePtrOutput() LabelSelectorResponsePtrOutput {
	return o
}

func (o LabelSelectorResponsePtrOutput) ToLabelSelectorResponsePtrOutputWithContext(ctx context.Context) LabelSelectorResponsePtrOutput {
	return o
}

func (o LabelSelectorResponsePtrOutput) Elem() LabelSelectorResponseOutput {
	return o.ApplyT(func(v *LabelSelectorResponse) LabelSelectorResponse {
		if v != nil {
			return *v
		}
		var ret LabelSelectorResponse
		return ret
	}).(LabelSelectorResponseOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o LabelSelectorResponsePtrOutput) MatchExpressions() LabelSelectorRequirementResponseArrayOutput {
	return o.ApplyT(func(v *LabelSelectorResponse) []LabelSelectorRequirementResponse {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(LabelSelectorRequirementResponseArrayOutput)
}

// matchLabels is an array of {key=value} pairs. A single {key=value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is `key`, the operator is `In`, and the values array contains only `value`. The requirements are ANDed.
func (o LabelSelectorResponsePtrOutput) MatchLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LabelSelectorResponse) []string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringArrayOutput)
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type LinuxOSConfig struct {
	// The size in MB of a swap file that will be created on each node.
	SwapFileSizeMB *int `pulumi:"swapFileSizeMB"`
	// Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfig `pulumi:"sysctls"`
	// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageDefrag *string `pulumi:"transparentHugePageDefrag"`
	// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageEnabled *string `pulumi:"transparentHugePageEnabled"`
}

// LinuxOSConfigInput is an input type that accepts LinuxOSConfigArgs and LinuxOSConfigOutput values.
// You can construct a concrete instance of `LinuxOSConfigInput` via:
//
//	LinuxOSConfigArgs{...}
type LinuxOSConfigInput interface {
	pulumi.Input

	ToLinuxOSConfigOutput() LinuxOSConfigOutput
	ToLinuxOSConfigOutputWithContext(context.Context) LinuxOSConfigOutput
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type LinuxOSConfigArgs struct {
	// The size in MB of a swap file that will be created on each node.
	SwapFileSizeMB pulumi.IntPtrInput `pulumi:"swapFileSizeMB"`
	// Sysctl settings for Linux agent nodes.
	Sysctls SysctlConfigPtrInput `pulumi:"sysctls"`
	// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageDefrag pulumi.StringPtrInput `pulumi:"transparentHugePageDefrag"`
	// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageEnabled pulumi.StringPtrInput `pulumi:"transparentHugePageEnabled"`
}

func (LinuxOSConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOSConfig)(nil)).Elem()
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigOutput() LinuxOSConfigOutput {
	return i.ToLinuxOSConfigOutputWithContext(context.Background())
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigOutputWithContext(ctx context.Context) LinuxOSConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOSConfigOutput)
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return i.ToLinuxOSConfigPtrOutputWithContext(context.Background())
}

func (i LinuxOSConfigArgs) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOSConfigOutput).ToLinuxOSConfigPtrOutputWithContext(ctx)
}

// LinuxOSConfigPtrInput is an input type that accepts LinuxOSConfigArgs, LinuxOSConfigPtr and LinuxOSConfigPtrOutput values.
// You can construct a concrete instance of `LinuxOSConfigPtrInput` via:
//
//	        LinuxOSConfigArgs{...}
//
//	or:
//
//	        nil
type LinuxOSConfigPtrInput interface {
	pulumi.Input

	ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput
	ToLinuxOSConfigPtrOutputWithContext(context.Context) LinuxOSConfigPtrOutput
}

type linuxOSConfigPtrType LinuxOSConfigArgs

func LinuxOSConfigPtr(v *LinuxOSConfigArgs) LinuxOSConfigPtrInput {
	return (*linuxOSConfigPtrType)(v)
}

func (*linuxOSConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOSConfig)(nil)).Elem()
}

func (i *linuxOSConfigPtrType) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return i.ToLinuxOSConfigPtrOutputWithContext(context.Background())
}

func (i *linuxOSConfigPtrType) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOSConfigPtrOutput)
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type LinuxOSConfigOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOSConfig)(nil)).Elem()
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigOutput() LinuxOSConfigOutput {
	return o
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigOutputWithContext(ctx context.Context) LinuxOSConfigOutput {
	return o
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return o.ToLinuxOSConfigPtrOutputWithContext(context.Background())
}

func (o LinuxOSConfigOutput) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxOSConfig) *LinuxOSConfig {
		return &v
	}).(LinuxOSConfigPtrOutput)
}

// The size in MB of a swap file that will be created on each node.
func (o LinuxOSConfigOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *int { return v.SwapFileSizeMB }).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigOutput) Sysctls() SysctlConfigPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *SysctlConfig { return v.Sysctls }).(SysctlConfigPtrOutput)
}

// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *string { return v.TransparentHugePageDefrag }).(pulumi.StringPtrOutput)
}

// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfig) *string { return v.TransparentHugePageEnabled }).(pulumi.StringPtrOutput)
}

type LinuxOSConfigPtrOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOSConfig)(nil)).Elem()
}

func (o LinuxOSConfigPtrOutput) ToLinuxOSConfigPtrOutput() LinuxOSConfigPtrOutput {
	return o
}

func (o LinuxOSConfigPtrOutput) ToLinuxOSConfigPtrOutputWithContext(ctx context.Context) LinuxOSConfigPtrOutput {
	return o
}

func (o LinuxOSConfigPtrOutput) Elem() LinuxOSConfigOutput {
	return o.ApplyT(func(v *LinuxOSConfig) LinuxOSConfig {
		if v != nil {
			return *v
		}
		var ret LinuxOSConfig
		return ret
	}).(LinuxOSConfigOutput)
}

// The size in MB of a swap file that will be created on each node.
func (o LinuxOSConfigPtrOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *int {
		if v == nil {
			return nil
		}
		return v.SwapFileSizeMB
	}).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigPtrOutput) Sysctls() SysctlConfigPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *SysctlConfig {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(SysctlConfigPtrOutput)
}

// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigPtrOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageDefrag
	}).(pulumi.StringPtrOutput)
}

// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigPtrOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfig) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageEnabled
	}).(pulumi.StringPtrOutput)
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type LinuxOSConfigResponse struct {
	// The size in MB of a swap file that will be created on each node.
	SwapFileSizeMB *int `pulumi:"swapFileSizeMB"`
	// Sysctl settings for Linux agent nodes.
	Sysctls *SysctlConfigResponse `pulumi:"sysctls"`
	// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageDefrag *string `pulumi:"transparentHugePageDefrag"`
	// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
	TransparentHugePageEnabled *string `pulumi:"transparentHugePageEnabled"`
}

// See [AKS custom node configuration](https://docs.microsoft.com/azure/aks/custom-node-configuration) for more details.
type LinuxOSConfigResponseOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOSConfigResponse)(nil)).Elem()
}

func (o LinuxOSConfigResponseOutput) ToLinuxOSConfigResponseOutput() LinuxOSConfigResponseOutput {
	return o
}

func (o LinuxOSConfigResponseOutput) ToLinuxOSConfigResponseOutputWithContext(ctx context.Context) LinuxOSConfigResponseOutput {
	return o
}

// The size in MB of a swap file that will be created on each node.
func (o LinuxOSConfigResponseOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *int { return v.SwapFileSizeMB }).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigResponseOutput) Sysctls() SysctlConfigResponsePtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *SysctlConfigResponse { return v.Sysctls }).(SysctlConfigResponsePtrOutput)
}

// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigResponseOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *string { return v.TransparentHugePageDefrag }).(pulumi.StringPtrOutput)
}

// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigResponseOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOSConfigResponse) *string { return v.TransparentHugePageEnabled }).(pulumi.StringPtrOutput)
}

type LinuxOSConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxOSConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOSConfigResponse)(nil)).Elem()
}

func (o LinuxOSConfigResponsePtrOutput) ToLinuxOSConfigResponsePtrOutput() LinuxOSConfigResponsePtrOutput {
	return o
}

func (o LinuxOSConfigResponsePtrOutput) ToLinuxOSConfigResponsePtrOutputWithContext(ctx context.Context) LinuxOSConfigResponsePtrOutput {
	return o
}

func (o LinuxOSConfigResponsePtrOutput) Elem() LinuxOSConfigResponseOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) LinuxOSConfigResponse {
		if v != nil {
			return *v
		}
		var ret LinuxOSConfigResponse
		return ret
	}).(LinuxOSConfigResponseOutput)
}

// The size in MB of a swap file that will be created on each node.
func (o LinuxOSConfigResponsePtrOutput) SwapFileSizeMB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.SwapFileSizeMB
	}).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
func (o LinuxOSConfigResponsePtrOutput) Sysctls() SysctlConfigResponsePtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *SysctlConfigResponse {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(SysctlConfigResponsePtrOutput)
}

// Valid values are 'always', 'defer', 'defer+madvise', 'madvise' and 'never'. The default is 'madvise'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigResponsePtrOutput) TransparentHugePageDefrag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageDefrag
	}).(pulumi.StringPtrOutput)
}

// Valid values are 'always', 'madvise', and 'never'. The default is 'always'. For more information see [Transparent Hugepages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html#admin-guide-transhuge).
func (o LinuxOSConfigResponsePtrOutput) TransparentHugePageEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOSConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TransparentHugePageEnabled
	}).(pulumi.StringPtrOutput)
}

// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindow struct {
	// Length of maintenance window range from 4 to 24 hours.
	DurationHours int `pulumi:"durationHours"`
	// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
	NotAllowedDates []DateSpan `pulumi:"notAllowedDates"`
	// Recurrence schedule for the maintenance window.
	Schedule Schedule `pulumi:"schedule"`
	// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
	StartDate *string `pulumi:"startDate"`
	// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
	StartTime string `pulumi:"startTime"`
	// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
	UtcOffset *string `pulumi:"utcOffset"`
}

// Defaults sets the appropriate defaults for MaintenanceWindow
func (val *MaintenanceWindow) Defaults() *MaintenanceWindow {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.DurationHours) {
		tmp.DurationHours = 24
	}
	return &tmp
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//	MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindowArgs struct {
	// Length of maintenance window range from 4 to 24 hours.
	DurationHours pulumi.IntInput `pulumi:"durationHours"`
	// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
	NotAllowedDates DateSpanArrayInput `pulumi:"notAllowedDates"`
	// Recurrence schedule for the maintenance window.
	Schedule ScheduleInput `pulumi:"schedule"`
	// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
	UtcOffset pulumi.StringPtrInput `pulumi:"utcOffset"`
}

// Defaults sets the appropriate defaults for MaintenanceWindowArgs
func (val *MaintenanceWindowArgs) Defaults() *MaintenanceWindowArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DurationHours == nil {
		tmp.DurationHours = pulumi.Int(24)
	}
	return &tmp
}
func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//	        MaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// Length of maintenance window range from 4 to 24 hours.
func (o MaintenanceWindowOutput) DurationHours() pulumi.IntOutput {
	return o.ApplyT(func(v MaintenanceWindow) int { return v.DurationHours }).(pulumi.IntOutput)
}

// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
func (o MaintenanceWindowOutput) NotAllowedDates() DateSpanArrayOutput {
	return o.ApplyT(func(v MaintenanceWindow) []DateSpan { return v.NotAllowedDates }).(DateSpanArrayOutput)
}

// Recurrence schedule for the maintenance window.
func (o MaintenanceWindowOutput) Schedule() ScheduleOutput {
	return o.ApplyT(func(v MaintenanceWindow) Schedule { return v.Schedule }).(ScheduleOutput)
}

// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
func (o MaintenanceWindowOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
func (o MaintenanceWindowOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindow) string { return v.StartTime }).(pulumi.StringOutput)
}

// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
func (o MaintenanceWindowOutput) UtcOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.UtcOffset }).(pulumi.StringPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// Length of maintenance window range from 4 to 24 hours.
func (o MaintenanceWindowPtrOutput) DurationHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return &v.DurationHours
	}).(pulumi.IntPtrOutput)
}

// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
func (o MaintenanceWindowPtrOutput) NotAllowedDates() DateSpanArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindow) []DateSpan {
		if v == nil {
			return nil
		}
		return v.NotAllowedDates
	}).(DateSpanArrayOutput)
}

// Recurrence schedule for the maintenance window.
func (o MaintenanceWindowPtrOutput) Schedule() SchedulePtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *Schedule {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(SchedulePtrOutput)
}

// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
func (o MaintenanceWindowPtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
func (o MaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
func (o MaintenanceWindowPtrOutput) UtcOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.UtcOffset
	}).(pulumi.StringPtrOutput)
}

// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindowResponse struct {
	// Length of maintenance window range from 4 to 24 hours.
	DurationHours int `pulumi:"durationHours"`
	// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
	NotAllowedDates []DateSpanResponse `pulumi:"notAllowedDates"`
	// Recurrence schedule for the maintenance window.
	Schedule ScheduleResponse `pulumi:"schedule"`
	// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
	StartDate *string `pulumi:"startDate"`
	// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
	StartTime string `pulumi:"startTime"`
	// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
	UtcOffset *string `pulumi:"utcOffset"`
}

// Defaults sets the appropriate defaults for MaintenanceWindowResponse
func (val *MaintenanceWindowResponse) Defaults() *MaintenanceWindowResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.DurationHours) {
		tmp.DurationHours = 24
	}
	return &tmp
}

// Maintenance window used to configure scheduled auto-upgrade for a Managed Cluster.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

// Length of maintenance window range from 4 to 24 hours.
func (o MaintenanceWindowResponseOutput) DurationHours() pulumi.IntOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) int { return v.DurationHours }).(pulumi.IntOutput)
}

// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
func (o MaintenanceWindowResponseOutput) NotAllowedDates() DateSpanResponseArrayOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) []DateSpanResponse { return v.NotAllowedDates }).(DateSpanResponseArrayOutput)
}

// Recurrence schedule for the maintenance window.
func (o MaintenanceWindowResponseOutput) Schedule() ScheduleResponseOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) ScheduleResponse { return v.Schedule }).(ScheduleResponseOutput)
}

// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
func (o MaintenanceWindowResponseOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
func (o MaintenanceWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
func (o MaintenanceWindowResponseOutput) UtcOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *string { return v.UtcOffset }).(pulumi.StringPtrOutput)
}

type MaintenanceWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponsePtrOutput) ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput {
	return o
}

func (o MaintenanceWindowResponsePtrOutput) ToMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) MaintenanceWindowResponsePtrOutput {
	return o
}

func (o MaintenanceWindowResponsePtrOutput) Elem() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) MaintenanceWindowResponse {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindowResponse
		return ret
	}).(MaintenanceWindowResponseOutput)
}

// Length of maintenance window range from 4 to 24 hours.
func (o MaintenanceWindowResponsePtrOutput) DurationHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DurationHours
	}).(pulumi.IntPtrOutput)
}

// Date ranges on which upgrade is not allowed. 'utcOffset' applies to this field. For example, with 'utcOffset: +02:00' and 'dateSpan' being '2022-12-23' to '2023-01-03', maintenance will be blocked from '2022-12-22 22:00' to '2023-01-03 22:00' in UTC time.
func (o MaintenanceWindowResponsePtrOutput) NotAllowedDates() DateSpanResponseArrayOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) []DateSpanResponse {
		if v == nil {
			return nil
		}
		return v.NotAllowedDates
	}).(DateSpanResponseArrayOutput)
}

// Recurrence schedule for the maintenance window.
func (o MaintenanceWindowResponsePtrOutput) Schedule() ScheduleResponsePtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *ScheduleResponse {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(ScheduleResponsePtrOutput)
}

// The date the maintenance window activates. If the current date is before this date, the maintenance window is inactive and will not be used for upgrades. If not specified, the maintenance window will be active right away.
func (o MaintenanceWindowResponsePtrOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartDate
	}).(pulumi.StringPtrOutput)
}

// The start time of the maintenance window. Accepted values are from '00:00' to '23:59'. 'utcOffset' applies to this field. For example: '02:00' with 'utcOffset: +02:00' means UTC time '00:00'.
func (o MaintenanceWindowResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The UTC offset in format +/-HH:mm. For example, '+05:30' for IST and '-07:00' for PST. If not specified, the default is '+00:00'.
func (o MaintenanceWindowResponsePtrOutput) UtcOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.UtcOffset
	}).(pulumi.StringPtrOutput)
}

// For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
type ManagedClusterAADProfile struct {
	// The list of AAD group object IDs that will have admin role of the cluster.
	AdminGroupObjectIDs []string `pulumi:"adminGroupObjectIDs"`
	// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
	ClientAppID *string `pulumi:"clientAppID"`
	// Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRBAC *bool `pulumi:"enableAzureRBAC"`
	// Whether to enable managed AAD.
	Managed *bool `pulumi:"managed"`
	// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
	ServerAppID *string `pulumi:"serverAppID"`
	// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
	ServerAppSecret *string `pulumi:"serverAppSecret"`
	// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
	TenantID *string `pulumi:"tenantID"`
}

// ManagedClusterAADProfileInput is an input type that accepts ManagedClusterAADProfileArgs and ManagedClusterAADProfileOutput values.
// You can construct a concrete instance of `ManagedClusterAADProfileInput` via:
//
//	ManagedClusterAADProfileArgs{...}
type ManagedClusterAADProfileInput interface {
	pulumi.Input

	ToManagedClusterAADProfileOutput() ManagedClusterAADProfileOutput
	ToManagedClusterAADProfileOutputWithContext(context.Context) ManagedClusterAADProfileOutput
}

// For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
type ManagedClusterAADProfileArgs struct {
	// The list of AAD group object IDs that will have admin role of the cluster.
	AdminGroupObjectIDs pulumi.StringArrayInput `pulumi:"adminGroupObjectIDs"`
	// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
	ClientAppID pulumi.StringPtrInput `pulumi:"clientAppID"`
	// Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRBAC pulumi.BoolPtrInput `pulumi:"enableAzureRBAC"`
	// Whether to enable managed AAD.
	Managed pulumi.BoolPtrInput `pulumi:"managed"`
	// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
	ServerAppID pulumi.StringPtrInput `pulumi:"serverAppID"`
	// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
	ServerAppSecret pulumi.StringPtrInput `pulumi:"serverAppSecret"`
	// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
	TenantID pulumi.StringPtrInput `pulumi:"tenantID"`
}

func (ManagedClusterAADProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAADProfile)(nil)).Elem()
}

func (i ManagedClusterAADProfileArgs) ToManagedClusterAADProfileOutput() ManagedClusterAADProfileOutput {
	return i.ToManagedClusterAADProfileOutputWithContext(context.Background())
}

func (i ManagedClusterAADProfileArgs) ToManagedClusterAADProfileOutputWithContext(ctx context.Context) ManagedClusterAADProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAADProfileOutput)
}

func (i ManagedClusterAADProfileArgs) ToManagedClusterAADProfilePtrOutput() ManagedClusterAADProfilePtrOutput {
	return i.ToManagedClusterAADProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterAADProfileArgs) ToManagedClusterAADProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAADProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAADProfileOutput).ToManagedClusterAADProfilePtrOutputWithContext(ctx)
}

// ManagedClusterAADProfilePtrInput is an input type that accepts ManagedClusterAADProfileArgs, ManagedClusterAADProfilePtr and ManagedClusterAADProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterAADProfilePtrInput` via:
//
//	        ManagedClusterAADProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterAADProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterAADProfilePtrOutput() ManagedClusterAADProfilePtrOutput
	ToManagedClusterAADProfilePtrOutputWithContext(context.Context) ManagedClusterAADProfilePtrOutput
}

type managedClusterAADProfilePtrType ManagedClusterAADProfileArgs

func ManagedClusterAADProfilePtr(v *ManagedClusterAADProfileArgs) ManagedClusterAADProfilePtrInput {
	return (*managedClusterAADProfilePtrType)(v)
}

func (*managedClusterAADProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAADProfile)(nil)).Elem()
}

func (i *managedClusterAADProfilePtrType) ToManagedClusterAADProfilePtrOutput() ManagedClusterAADProfilePtrOutput {
	return i.ToManagedClusterAADProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterAADProfilePtrType) ToManagedClusterAADProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAADProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAADProfilePtrOutput)
}

// For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
type ManagedClusterAADProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterAADProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAADProfile)(nil)).Elem()
}

func (o ManagedClusterAADProfileOutput) ToManagedClusterAADProfileOutput() ManagedClusterAADProfileOutput {
	return o
}

func (o ManagedClusterAADProfileOutput) ToManagedClusterAADProfileOutputWithContext(ctx context.Context) ManagedClusterAADProfileOutput {
	return o
}

func (o ManagedClusterAADProfileOutput) ToManagedClusterAADProfilePtrOutput() ManagedClusterAADProfilePtrOutput {
	return o.ToManagedClusterAADProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterAADProfileOutput) ToManagedClusterAADProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAADProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterAADProfile) *ManagedClusterAADProfile {
		return &v
	}).(ManagedClusterAADProfilePtrOutput)
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o ManagedClusterAADProfileOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) []string { return v.AdminGroupObjectIDs }).(pulumi.StringArrayOutput)
}

// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) *string { return v.ClientAppID }).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o ManagedClusterAADProfileOutput) EnableAzureRBAC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) *bool { return v.EnableAzureRBAC }).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o ManagedClusterAADProfileOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) *bool { return v.Managed }).(pulumi.BoolPtrOutput)
}

// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) *string { return v.ServerAppID }).(pulumi.StringPtrOutput)
}

// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileOutput) ServerAppSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) *string { return v.ServerAppSecret }).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o ManagedClusterAADProfileOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfile) *string { return v.TenantID }).(pulumi.StringPtrOutput)
}

type ManagedClusterAADProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAADProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAADProfile)(nil)).Elem()
}

func (o ManagedClusterAADProfilePtrOutput) ToManagedClusterAADProfilePtrOutput() ManagedClusterAADProfilePtrOutput {
	return o
}

func (o ManagedClusterAADProfilePtrOutput) ToManagedClusterAADProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAADProfilePtrOutput {
	return o
}

func (o ManagedClusterAADProfilePtrOutput) Elem() ManagedClusterAADProfileOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) ManagedClusterAADProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAADProfile
		return ret
	}).(ManagedClusterAADProfileOutput)
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o ManagedClusterAADProfilePtrOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) []string {
		if v == nil {
			return nil
		}
		return v.AdminGroupObjectIDs
	}).(pulumi.StringArrayOutput)
}

// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfilePtrOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) *string {
		if v == nil {
			return nil
		}
		return v.ClientAppID
	}).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o ManagedClusterAADProfilePtrOutput) EnableAzureRBAC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAzureRBAC
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o ManagedClusterAADProfilePtrOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Managed
	}).(pulumi.BoolPtrOutput)
}

// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfilePtrOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppID
	}).(pulumi.StringPtrOutput)
}

// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfilePtrOutput) ServerAppSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppSecret
	}).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o ManagedClusterAADProfilePtrOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfile) *string {
		if v == nil {
			return nil
		}
		return v.TenantID
	}).(pulumi.StringPtrOutput)
}

// For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
type ManagedClusterAADProfileResponse struct {
	// The list of AAD group object IDs that will have admin role of the cluster.
	AdminGroupObjectIDs []string `pulumi:"adminGroupObjectIDs"`
	// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
	ClientAppID *string `pulumi:"clientAppID"`
	// Whether to enable Azure RBAC for Kubernetes authorization.
	EnableAzureRBAC *bool `pulumi:"enableAzureRBAC"`
	// Whether to enable managed AAD.
	Managed *bool `pulumi:"managed"`
	// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
	ServerAppID *string `pulumi:"serverAppID"`
	// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
	ServerAppSecret *string `pulumi:"serverAppSecret"`
	// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
	TenantID *string `pulumi:"tenantID"`
}

// For more details see [managed AAD on AKS](https://docs.microsoft.com/azure/aks/managed-aad).
type ManagedClusterAADProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAADProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAADProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAADProfileResponseOutput) ToManagedClusterAADProfileResponseOutput() ManagedClusterAADProfileResponseOutput {
	return o
}

func (o ManagedClusterAADProfileResponseOutput) ToManagedClusterAADProfileResponseOutputWithContext(ctx context.Context) ManagedClusterAADProfileResponseOutput {
	return o
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o ManagedClusterAADProfileResponseOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) []string { return v.AdminGroupObjectIDs }).(pulumi.StringArrayOutput)
}

// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileResponseOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) *string { return v.ClientAppID }).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o ManagedClusterAADProfileResponseOutput) EnableAzureRBAC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) *bool { return v.EnableAzureRBAC }).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o ManagedClusterAADProfileResponseOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) *bool { return v.Managed }).(pulumi.BoolPtrOutput)
}

// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileResponseOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) *string { return v.ServerAppID }).(pulumi.StringPtrOutput)
}

// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileResponseOutput) ServerAppSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) *string { return v.ServerAppSecret }).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o ManagedClusterAADProfileResponseOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAADProfileResponse) *string { return v.TenantID }).(pulumi.StringPtrOutput)
}

type ManagedClusterAADProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAADProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAADProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAADProfileResponsePtrOutput) ToManagedClusterAADProfileResponsePtrOutput() ManagedClusterAADProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAADProfileResponsePtrOutput) ToManagedClusterAADProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterAADProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAADProfileResponsePtrOutput) Elem() ManagedClusterAADProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) ManagedClusterAADProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAADProfileResponse
		return ret
	}).(ManagedClusterAADProfileResponseOutput)
}

// The list of AAD group object IDs that will have admin role of the cluster.
func (o ManagedClusterAADProfileResponsePtrOutput) AdminGroupObjectIDs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.AdminGroupObjectIDs
	}).(pulumi.StringArrayOutput)
}

// (DEPRECATED) The client AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileResponsePtrOutput) ClientAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientAppID
	}).(pulumi.StringPtrOutput)
}

// Whether to enable Azure RBAC for Kubernetes authorization.
func (o ManagedClusterAADProfileResponsePtrOutput) EnableAzureRBAC() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAzureRBAC
	}).(pulumi.BoolPtrOutput)
}

// Whether to enable managed AAD.
func (o ManagedClusterAADProfileResponsePtrOutput) Managed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Managed
	}).(pulumi.BoolPtrOutput)
}

// (DEPRECATED) The server AAD application ID. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileResponsePtrOutput) ServerAppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppID
	}).(pulumi.StringPtrOutput)
}

// (DEPRECATED) The server AAD application secret. Learn more at https://aka.ms/aks/aad-legacy.
func (o ManagedClusterAADProfileResponsePtrOutput) ServerAppSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerAppSecret
	}).(pulumi.StringPtrOutput)
}

// The AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
func (o ManagedClusterAADProfileResponsePtrOutput) TenantID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAADProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantID
	}).(pulumi.StringPtrOutput)
}

// Access profile for managed cluster API server.
type ManagedClusterAPIServerAccessProfile struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
	AuthorizedIPRanges []string `pulumi:"authorizedIPRanges"`
	// Whether to disable run command for the cluster or not.
	DisableRunCommand *bool `pulumi:"disableRunCommand"`
	// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
	EnablePrivateCluster *bool `pulumi:"enablePrivateCluster"`
	// Whether to create additional public FQDN for private cluster or not.
	EnablePrivateClusterPublicFQDN *bool `pulumi:"enablePrivateClusterPublicFQDN"`
	// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
	PrivateDNSZone *string `pulumi:"privateDNSZone"`
}

// ManagedClusterAPIServerAccessProfileInput is an input type that accepts ManagedClusterAPIServerAccessProfileArgs and ManagedClusterAPIServerAccessProfileOutput values.
// You can construct a concrete instance of `ManagedClusterAPIServerAccessProfileInput` via:
//
//	ManagedClusterAPIServerAccessProfileArgs{...}
type ManagedClusterAPIServerAccessProfileInput interface {
	pulumi.Input

	ToManagedClusterAPIServerAccessProfileOutput() ManagedClusterAPIServerAccessProfileOutput
	ToManagedClusterAPIServerAccessProfileOutputWithContext(context.Context) ManagedClusterAPIServerAccessProfileOutput
}

// Access profile for managed cluster API server.
type ManagedClusterAPIServerAccessProfileArgs struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
	AuthorizedIPRanges pulumi.StringArrayInput `pulumi:"authorizedIPRanges"`
	// Whether to disable run command for the cluster or not.
	DisableRunCommand pulumi.BoolPtrInput `pulumi:"disableRunCommand"`
	// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
	EnablePrivateCluster pulumi.BoolPtrInput `pulumi:"enablePrivateCluster"`
	// Whether to create additional public FQDN for private cluster or not.
	EnablePrivateClusterPublicFQDN pulumi.BoolPtrInput `pulumi:"enablePrivateClusterPublicFQDN"`
	// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
	PrivateDNSZone pulumi.StringPtrInput `pulumi:"privateDNSZone"`
}

func (ManagedClusterAPIServerAccessProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAPIServerAccessProfile)(nil)).Elem()
}

func (i ManagedClusterAPIServerAccessProfileArgs) ToManagedClusterAPIServerAccessProfileOutput() ManagedClusterAPIServerAccessProfileOutput {
	return i.ToManagedClusterAPIServerAccessProfileOutputWithContext(context.Background())
}

func (i ManagedClusterAPIServerAccessProfileArgs) ToManagedClusterAPIServerAccessProfileOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAPIServerAccessProfileOutput)
}

func (i ManagedClusterAPIServerAccessProfileArgs) ToManagedClusterAPIServerAccessProfilePtrOutput() ManagedClusterAPIServerAccessProfilePtrOutput {
	return i.ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterAPIServerAccessProfileArgs) ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAPIServerAccessProfileOutput).ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(ctx)
}

// ManagedClusterAPIServerAccessProfilePtrInput is an input type that accepts ManagedClusterAPIServerAccessProfileArgs, ManagedClusterAPIServerAccessProfilePtr and ManagedClusterAPIServerAccessProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterAPIServerAccessProfilePtrInput` via:
//
//	        ManagedClusterAPIServerAccessProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterAPIServerAccessProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterAPIServerAccessProfilePtrOutput() ManagedClusterAPIServerAccessProfilePtrOutput
	ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(context.Context) ManagedClusterAPIServerAccessProfilePtrOutput
}

type managedClusterAPIServerAccessProfilePtrType ManagedClusterAPIServerAccessProfileArgs

func ManagedClusterAPIServerAccessProfilePtr(v *ManagedClusterAPIServerAccessProfileArgs) ManagedClusterAPIServerAccessProfilePtrInput {
	return (*managedClusterAPIServerAccessProfilePtrType)(v)
}

func (*managedClusterAPIServerAccessProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAPIServerAccessProfile)(nil)).Elem()
}

func (i *managedClusterAPIServerAccessProfilePtrType) ToManagedClusterAPIServerAccessProfilePtrOutput() ManagedClusterAPIServerAccessProfilePtrOutput {
	return i.ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterAPIServerAccessProfilePtrType) ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAPIServerAccessProfilePtrOutput)
}

// Access profile for managed cluster API server.
type ManagedClusterAPIServerAccessProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterAPIServerAccessProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAPIServerAccessProfile)(nil)).Elem()
}

func (o ManagedClusterAPIServerAccessProfileOutput) ToManagedClusterAPIServerAccessProfileOutput() ManagedClusterAPIServerAccessProfileOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfileOutput) ToManagedClusterAPIServerAccessProfileOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfileOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfileOutput) ToManagedClusterAPIServerAccessProfilePtrOutput() ManagedClusterAPIServerAccessProfilePtrOutput {
	return o.ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterAPIServerAccessProfileOutput) ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterAPIServerAccessProfile) *ManagedClusterAPIServerAccessProfile {
		return &v
	}).(ManagedClusterAPIServerAccessProfilePtrOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
func (o ManagedClusterAPIServerAccessProfileOutput) AuthorizedIPRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfile) []string { return v.AuthorizedIPRanges }).(pulumi.StringArrayOutput)
}

// Whether to disable run command for the cluster or not.
func (o ManagedClusterAPIServerAccessProfileOutput) DisableRunCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfile) *bool { return v.DisableRunCommand }).(pulumi.BoolPtrOutput)
}

// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
func (o ManagedClusterAPIServerAccessProfileOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfile) *bool { return v.EnablePrivateCluster }).(pulumi.BoolPtrOutput)
}

// Whether to create additional public FQDN for private cluster or not.
func (o ManagedClusterAPIServerAccessProfileOutput) EnablePrivateClusterPublicFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfile) *bool { return v.EnablePrivateClusterPublicFQDN }).(pulumi.BoolPtrOutput)
}

// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
func (o ManagedClusterAPIServerAccessProfileOutput) PrivateDNSZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfile) *string { return v.PrivateDNSZone }).(pulumi.StringPtrOutput)
}

type ManagedClusterAPIServerAccessProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAPIServerAccessProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAPIServerAccessProfile)(nil)).Elem()
}

func (o ManagedClusterAPIServerAccessProfilePtrOutput) ToManagedClusterAPIServerAccessProfilePtrOutput() ManagedClusterAPIServerAccessProfilePtrOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfilePtrOutput) ToManagedClusterAPIServerAccessProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfilePtrOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfilePtrOutput) Elem() ManagedClusterAPIServerAccessProfileOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfile) ManagedClusterAPIServerAccessProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAPIServerAccessProfile
		return ret
	}).(ManagedClusterAPIServerAccessProfileOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
func (o ManagedClusterAPIServerAccessProfilePtrOutput) AuthorizedIPRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfile) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedIPRanges
	}).(pulumi.StringArrayOutput)
}

// Whether to disable run command for the cluster or not.
func (o ManagedClusterAPIServerAccessProfilePtrOutput) DisableRunCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DisableRunCommand
	}).(pulumi.BoolPtrOutput)
}

// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
func (o ManagedClusterAPIServerAccessProfilePtrOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateCluster
	}).(pulumi.BoolPtrOutput)
}

// Whether to create additional public FQDN for private cluster or not.
func (o ManagedClusterAPIServerAccessProfilePtrOutput) EnablePrivateClusterPublicFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateClusterPublicFQDN
	}).(pulumi.BoolPtrOutput)
}

// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
func (o ManagedClusterAPIServerAccessProfilePtrOutput) PrivateDNSZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfile) *string {
		if v == nil {
			return nil
		}
		return v.PrivateDNSZone
	}).(pulumi.StringPtrOutput)
}

// Access profile for managed cluster API server.
type ManagedClusterAPIServerAccessProfileResponse struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
	AuthorizedIPRanges []string `pulumi:"authorizedIPRanges"`
	// Whether to disable run command for the cluster or not.
	DisableRunCommand *bool `pulumi:"disableRunCommand"`
	// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
	EnablePrivateCluster *bool `pulumi:"enablePrivateCluster"`
	// Whether to create additional public FQDN for private cluster or not.
	EnablePrivateClusterPublicFQDN *bool `pulumi:"enablePrivateClusterPublicFQDN"`
	// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
	PrivateDNSZone *string `pulumi:"privateDNSZone"`
}

// Access profile for managed cluster API server.
type ManagedClusterAPIServerAccessProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAPIServerAccessProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAPIServerAccessProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAPIServerAccessProfileResponseOutput) ToManagedClusterAPIServerAccessProfileResponseOutput() ManagedClusterAPIServerAccessProfileResponseOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfileResponseOutput) ToManagedClusterAPIServerAccessProfileResponseOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfileResponseOutput {
	return o
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
func (o ManagedClusterAPIServerAccessProfileResponseOutput) AuthorizedIPRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfileResponse) []string { return v.AuthorizedIPRanges }).(pulumi.StringArrayOutput)
}

// Whether to disable run command for the cluster or not.
func (o ManagedClusterAPIServerAccessProfileResponseOutput) DisableRunCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfileResponse) *bool { return v.DisableRunCommand }).(pulumi.BoolPtrOutput)
}

// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
func (o ManagedClusterAPIServerAccessProfileResponseOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfileResponse) *bool { return v.EnablePrivateCluster }).(pulumi.BoolPtrOutput)
}

// Whether to create additional public FQDN for private cluster or not.
func (o ManagedClusterAPIServerAccessProfileResponseOutput) EnablePrivateClusterPublicFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfileResponse) *bool { return v.EnablePrivateClusterPublicFQDN }).(pulumi.BoolPtrOutput)
}

// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
func (o ManagedClusterAPIServerAccessProfileResponseOutput) PrivateDNSZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAPIServerAccessProfileResponse) *string { return v.PrivateDNSZone }).(pulumi.StringPtrOutput)
}

type ManagedClusterAPIServerAccessProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAPIServerAccessProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAPIServerAccessProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) ToManagedClusterAPIServerAccessProfileResponsePtrOutput() ManagedClusterAPIServerAccessProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) ToManagedClusterAPIServerAccessProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterAPIServerAccessProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) Elem() ManagedClusterAPIServerAccessProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfileResponse) ManagedClusterAPIServerAccessProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAPIServerAccessProfileResponse
		return ret
	}).(ManagedClusterAPIServerAccessProfileResponseOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with clusters that use Public IP Per Node, or clusters that are using a Basic Load Balancer. For more information see [API server authorized IP ranges](https://docs.microsoft.com/azure/aks/api-server-authorized-ip-ranges).
func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) AuthorizedIPRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedIPRanges
	}).(pulumi.StringArrayOutput)
}

// Whether to disable run command for the cluster or not.
func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) DisableRunCommand() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableRunCommand
	}).(pulumi.BoolPtrOutput)
}

// For more details, see [Creating a private AKS cluster](https://docs.microsoft.com/azure/aks/private-clusters).
func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) EnablePrivateCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateCluster
	}).(pulumi.BoolPtrOutput)
}

// Whether to create additional public FQDN for private cluster or not.
func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) EnablePrivateClusterPublicFQDN() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateClusterPublicFQDN
	}).(pulumi.BoolPtrOutput)
}

// The default is System. For more details see [configure private DNS zone](https://docs.microsoft.com/azure/aks/private-clusters#configure-private-dns-zone). Allowed values are 'system' and 'none'.
func (o ManagedClusterAPIServerAccessProfileResponsePtrOutput) PrivateDNSZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAPIServerAccessProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateDNSZone
	}).(pulumi.StringPtrOutput)
}

// A Kubernetes add-on profile for a managed cluster.
type ManagedClusterAddonProfile struct {
	// Key-value pairs for configuring an add-on.
	Config map[string]string `pulumi:"config"`
	// Whether the add-on is enabled or not.
	Enabled bool `pulumi:"enabled"`
}

// ManagedClusterAddonProfileInput is an input type that accepts ManagedClusterAddonProfileArgs and ManagedClusterAddonProfileOutput values.
// You can construct a concrete instance of `ManagedClusterAddonProfileInput` via:
//
//	ManagedClusterAddonProfileArgs{...}
type ManagedClusterAddonProfileInput interface {
	pulumi.Input

	ToManagedClusterAddonProfileOutput() ManagedClusterAddonProfileOutput
	ToManagedClusterAddonProfileOutputWithContext(context.Context) ManagedClusterAddonProfileOutput
}

// A Kubernetes add-on profile for a managed cluster.
type ManagedClusterAddonProfileArgs struct {
	// Key-value pairs for configuring an add-on.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Whether the add-on is enabled or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ManagedClusterAddonProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAddonProfile)(nil)).Elem()
}

func (i ManagedClusterAddonProfileArgs) ToManagedClusterAddonProfileOutput() ManagedClusterAddonProfileOutput {
	return i.ToManagedClusterAddonProfileOutputWithContext(context.Background())
}

func (i ManagedClusterAddonProfileArgs) ToManagedClusterAddonProfileOutputWithContext(ctx context.Context) ManagedClusterAddonProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAddonProfileOutput)
}

// ManagedClusterAddonProfileMapInput is an input type that accepts ManagedClusterAddonProfileMap and ManagedClusterAddonProfileMapOutput values.
// You can construct a concrete instance of `ManagedClusterAddonProfileMapInput` via:
//
//	ManagedClusterAddonProfileMap{ "key": ManagedClusterAddonProfileArgs{...} }
type ManagedClusterAddonProfileMapInput interface {
	pulumi.Input

	ToManagedClusterAddonProfileMapOutput() ManagedClusterAddonProfileMapOutput
	ToManagedClusterAddonProfileMapOutputWithContext(context.Context) ManagedClusterAddonProfileMapOutput
}

type ManagedClusterAddonProfileMap map[string]ManagedClusterAddonProfileInput

func (ManagedClusterAddonProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagedClusterAddonProfile)(nil)).Elem()
}

func (i ManagedClusterAddonProfileMap) ToManagedClusterAddonProfileMapOutput() ManagedClusterAddonProfileMapOutput {
	return i.ToManagedClusterAddonProfileMapOutputWithContext(context.Background())
}

func (i ManagedClusterAddonProfileMap) ToManagedClusterAddonProfileMapOutputWithContext(ctx context.Context) ManagedClusterAddonProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAddonProfileMapOutput)
}

// A Kubernetes add-on profile for a managed cluster.
type ManagedClusterAddonProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterAddonProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAddonProfile)(nil)).Elem()
}

func (o ManagedClusterAddonProfileOutput) ToManagedClusterAddonProfileOutput() ManagedClusterAddonProfileOutput {
	return o
}

func (o ManagedClusterAddonProfileOutput) ToManagedClusterAddonProfileOutputWithContext(ctx context.Context) ManagedClusterAddonProfileOutput {
	return o
}

// Key-value pairs for configuring an add-on.
func (o ManagedClusterAddonProfileOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfile) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Whether the add-on is enabled or not.
func (o ManagedClusterAddonProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagedClusterAddonProfileMapOutput struct{ *pulumi.OutputState }

func (ManagedClusterAddonProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagedClusterAddonProfile)(nil)).Elem()
}

func (o ManagedClusterAddonProfileMapOutput) ToManagedClusterAddonProfileMapOutput() ManagedClusterAddonProfileMapOutput {
	return o
}

func (o ManagedClusterAddonProfileMapOutput) ToManagedClusterAddonProfileMapOutputWithContext(ctx context.Context) ManagedClusterAddonProfileMapOutput {
	return o
}

func (o ManagedClusterAddonProfileMapOutput) MapIndex(k pulumi.StringInput) ManagedClusterAddonProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ManagedClusterAddonProfile {
		return vs[0].(map[string]ManagedClusterAddonProfile)[vs[1].(string)]
	}).(ManagedClusterAddonProfileOutput)
}

// A Kubernetes add-on profile for a managed cluster.
type ManagedClusterAddonProfileResponse struct {
	// Key-value pairs for configuring an add-on.
	Config map[string]string `pulumi:"config"`
	// Whether the add-on is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// Information of user assigned identity used by this add-on.
	Identity ManagedClusterAddonProfileResponseIdentity `pulumi:"identity"`
}

// A Kubernetes add-on profile for a managed cluster.
type ManagedClusterAddonProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAddonProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAddonProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAddonProfileResponseOutput) ToManagedClusterAddonProfileResponseOutput() ManagedClusterAddonProfileResponseOutput {
	return o
}

func (o ManagedClusterAddonProfileResponseOutput) ToManagedClusterAddonProfileResponseOutputWithContext(ctx context.Context) ManagedClusterAddonProfileResponseOutput {
	return o
}

// Key-value pairs for configuring an add-on.
func (o ManagedClusterAddonProfileResponseOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfileResponse) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Whether the add-on is enabled or not.
func (o ManagedClusterAddonProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Information of user assigned identity used by this add-on.
func (o ManagedClusterAddonProfileResponseOutput) Identity() ManagedClusterAddonProfileResponseIdentityOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfileResponse) ManagedClusterAddonProfileResponseIdentity {
		return v.Identity
	}).(ManagedClusterAddonProfileResponseIdentityOutput)
}

type ManagedClusterAddonProfileResponseMapOutput struct{ *pulumi.OutputState }

func (ManagedClusterAddonProfileResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagedClusterAddonProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAddonProfileResponseMapOutput) ToManagedClusterAddonProfileResponseMapOutput() ManagedClusterAddonProfileResponseMapOutput {
	return o
}

func (o ManagedClusterAddonProfileResponseMapOutput) ToManagedClusterAddonProfileResponseMapOutputWithContext(ctx context.Context) ManagedClusterAddonProfileResponseMapOutput {
	return o
}

func (o ManagedClusterAddonProfileResponseMapOutput) MapIndex(k pulumi.StringInput) ManagedClusterAddonProfileResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ManagedClusterAddonProfileResponse {
		return vs[0].(map[string]ManagedClusterAddonProfileResponse)[vs[1].(string)]
	}).(ManagedClusterAddonProfileResponseOutput)
}

// Information of user assigned identity used by this add-on.
type ManagedClusterAddonProfileResponseIdentity struct {
	// The client ID of the user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The object ID of the user assigned identity.
	ObjectId *string `pulumi:"objectId"`
	// The resource ID of the user assigned identity.
	ResourceId *string `pulumi:"resourceId"`
}

// Information of user assigned identity used by this add-on.
type ManagedClusterAddonProfileResponseIdentityOutput struct{ *pulumi.OutputState }

func (ManagedClusterAddonProfileResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAddonProfileResponseIdentity)(nil)).Elem()
}

func (o ManagedClusterAddonProfileResponseIdentityOutput) ToManagedClusterAddonProfileResponseIdentityOutput() ManagedClusterAddonProfileResponseIdentityOutput {
	return o
}

func (o ManagedClusterAddonProfileResponseIdentityOutput) ToManagedClusterAddonProfileResponseIdentityOutputWithContext(ctx context.Context) ManagedClusterAddonProfileResponseIdentityOutput {
	return o
}

// The client ID of the user assigned identity.
func (o ManagedClusterAddonProfileResponseIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfileResponseIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The object ID of the user assigned identity.
func (o ManagedClusterAddonProfileResponseIdentityOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfileResponseIdentity) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The resource ID of the user assigned identity.
func (o ManagedClusterAddonProfileResponseIdentityOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAddonProfileResponseIdentity) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Profile for the container service agent pool.
type ManagedClusterAgentPoolProfile struct {
	// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// AKS will associate the specified agent pool with the Capacity Reservation Group.
	CapacityReservationGroupID *string `pulumi:"capacityReservationGroupID"`
	// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
	Count *int `pulumi:"count"`
	// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
	CreationData *CreationData `pulumi:"creationData"`
	// Whether to enable auto-scaler
	EnableAutoScaling *bool `pulumi:"enableAutoScaling"`
	// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost *bool `pulumi:"enableEncryptionAtHost"`
	// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
	EnableFIPS *bool `pulumi:"enableFIPS"`
	// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
	EnableNodePublicIP *bool `pulumi:"enableNodePublicIP"`
	// Whether to enable UltraSSD
	EnableUltraSSD *bool `pulumi:"enableUltraSSD"`
	// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
	GpuInstanceProfile *string `pulumi:"gpuInstanceProfile"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
	HostGroupID *string `pulumi:"hostGroupID"`
	// The Kubelet configuration on the agent pool nodes.
	KubeletConfig *KubeletConfig `pulumi:"kubeletConfig"`
	// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
	KubeletDiskType *string `pulumi:"kubeletDiskType"`
	// The OS configuration of Linux agent nodes.
	LinuxOSConfig *LinuxOSConfig `pulumi:"linuxOSConfig"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
	MessageOfTheDay *string `pulumi:"messageOfTheDay"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
	Mode *string `pulumi:"mode"`
	// Windows agent pool names must be 6 characters or less.
	Name string `pulumi:"name"`
	// Network-related settings of an agent pool.
	NetworkProfile *AgentPoolNetworkProfile `pulumi:"networkProfile"`
	// The node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixID *string `pulumi:"nodePublicIPPrefixID"`
	// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// Both patch version <major.minor.patch> (e.g. 1.20.13) and <major.minor> (e.g. 1.20) are supported. When <major.minor> is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same <major.minor> once it has been created (e.g. 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
	OrchestratorVersion *string `pulumi:"orchestratorVersion"`
	// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
	OsDiskSizeGB *int `pulumi:"osDiskSizeGB"`
	// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
	OsDiskType *string `pulumi:"osDiskType"`
	// Specifies the OS SKU used by the agent pool. The default is Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
	OsSKU *string `pulumi:"osSKU"`
	// The operating system type. The default is Linux.
	OsType *string `pulumi:"osType"`
	// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetID *string `pulumi:"podSubnetID"`
	// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
	PowerState *PowerState `pulumi:"powerState"`
	// The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `pulumi:"proximityPlacementGroupID"`
	// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
	ScaleDownMode *string `pulumi:"scaleDownMode"`
	// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
	ScaleSetEvictionPolicy *string `pulumi:"scaleSetEvictionPolicy"`
	// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
	ScaleSetPriority *string `pulumi:"scaleSetPriority"`
	// The security settings of an agent pool.
	SecurityProfile *AgentPoolSecurityProfile `pulumi:"securityProfile"`
	// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
	SpotMaxPrice *float64 `pulumi:"spotMaxPrice"`
	// The tags to be persisted on the agent pool virtual machine scale set.
	Tags map[string]string `pulumi:"tags"`
	// The type of Agent Pool.
	Type *string `pulumi:"type"`
	// Settings for upgrading the agentpool
	UpgradeSettings *AgentPoolUpgradeSettings `pulumi:"upgradeSettings"`
	// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. If this field is not specified, AKS will attempt to find an appropriate VM SKU for your pool, based on quota and capacity. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize *string `pulumi:"vmSize"`
	// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetID *string `pulumi:"vnetSubnetID"`
	// The Windows agent pool's specific profile.
	WindowsProfile *AgentPoolWindowsProfile `pulumi:"windowsProfile"`
	// Determines the type of workload a node can run.
	WorkloadRuntime *string `pulumi:"workloadRuntime"`
}

// ManagedClusterAgentPoolProfileInput is an input type that accepts ManagedClusterAgentPoolProfileArgs and ManagedClusterAgentPoolProfileOutput values.
// You can construct a concrete instance of `ManagedClusterAgentPoolProfileInput` via:
//
//	ManagedClusterAgentPoolProfileArgs{...}
type ManagedClusterAgentPoolProfileInput interface {
	pulumi.Input

	ToManagedClusterAgentPoolProfileOutput() ManagedClusterAgentPoolProfileOutput
	ToManagedClusterAgentPoolProfileOutputWithContext(context.Context) ManagedClusterAgentPoolProfileOutput
}

// Profile for the container service agent pool.
type ManagedClusterAgentPoolProfileArgs struct {
	// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// AKS will associate the specified agent pool with the Capacity Reservation Group.
	CapacityReservationGroupID pulumi.StringPtrInput `pulumi:"capacityReservationGroupID"`
	// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
	CreationData CreationDataPtrInput `pulumi:"creationData"`
	// Whether to enable auto-scaler
	EnableAutoScaling pulumi.BoolPtrInput `pulumi:"enableAutoScaling"`
	// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost pulumi.BoolPtrInput `pulumi:"enableEncryptionAtHost"`
	// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
	EnableFIPS pulumi.BoolPtrInput `pulumi:"enableFIPS"`
	// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
	EnableNodePublicIP pulumi.BoolPtrInput `pulumi:"enableNodePublicIP"`
	// Whether to enable UltraSSD
	EnableUltraSSD pulumi.BoolPtrInput `pulumi:"enableUltraSSD"`
	// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
	GpuInstanceProfile pulumi.StringPtrInput `pulumi:"gpuInstanceProfile"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
	HostGroupID pulumi.StringPtrInput `pulumi:"hostGroupID"`
	// The Kubelet configuration on the agent pool nodes.
	KubeletConfig KubeletConfigPtrInput `pulumi:"kubeletConfig"`
	// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
	KubeletDiskType pulumi.StringPtrInput `pulumi:"kubeletDiskType"`
	// The OS configuration of Linux agent nodes.
	LinuxOSConfig LinuxOSConfigPtrInput `pulumi:"linuxOSConfig"`
	// The maximum number of nodes for auto-scaling
	MaxCount pulumi.IntPtrInput `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods pulumi.IntPtrInput `pulumi:"maxPods"`
	// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
	MessageOfTheDay pulumi.StringPtrInput `pulumi:"messageOfTheDay"`
	// The minimum number of nodes for auto-scaling
	MinCount pulumi.IntPtrInput `pulumi:"minCount"`
	// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Windows agent pool names must be 6 characters or less.
	Name pulumi.StringInput `pulumi:"name"`
	// Network-related settings of an agent pool.
	NetworkProfile AgentPoolNetworkProfilePtrInput `pulumi:"networkProfile"`
	// The node labels to be persisted across all nodes in agent pool.
	NodeLabels pulumi.StringMapInput `pulumi:"nodeLabels"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixID pulumi.StringPtrInput `pulumi:"nodePublicIPPrefixID"`
	// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints pulumi.StringArrayInput `pulumi:"nodeTaints"`
	// Both patch version <major.minor.patch> (e.g. 1.20.13) and <major.minor> (e.g. 1.20) are supported. When <major.minor> is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same <major.minor> once it has been created (e.g. 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
	OrchestratorVersion pulumi.StringPtrInput `pulumi:"orchestratorVersion"`
	// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
	OsDiskSizeGB pulumi.IntPtrInput `pulumi:"osDiskSizeGB"`
	// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
	OsDiskType pulumi.StringPtrInput `pulumi:"osDiskType"`
	// Specifies the OS SKU used by the agent pool. The default is Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
	OsSKU pulumi.StringPtrInput `pulumi:"osSKU"`
	// The operating system type. The default is Linux.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetID pulumi.StringPtrInput `pulumi:"podSubnetID"`
	// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
	PowerState PowerStatePtrInput `pulumi:"powerState"`
	// The ID for Proximity Placement Group.
	ProximityPlacementGroupID pulumi.StringPtrInput `pulumi:"proximityPlacementGroupID"`
	// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
	ScaleDownMode pulumi.StringPtrInput `pulumi:"scaleDownMode"`
	// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
	ScaleSetEvictionPolicy pulumi.StringPtrInput `pulumi:"scaleSetEvictionPolicy"`
	// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
	ScaleSetPriority pulumi.StringPtrInput `pulumi:"scaleSetPriority"`
	// The security settings of an agent pool.
	SecurityProfile AgentPoolSecurityProfilePtrInput `pulumi:"securityProfile"`
	// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
	SpotMaxPrice pulumi.Float64PtrInput `pulumi:"spotMaxPrice"`
	// The tags to be persisted on the agent pool virtual machine scale set.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of Agent Pool.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Settings for upgrading the agentpool
	UpgradeSettings AgentPoolUpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
	// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. If this field is not specified, AKS will attempt to find an appropriate VM SKU for your pool, based on quota and capacity. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
	// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetID pulumi.StringPtrInput `pulumi:"vnetSubnetID"`
	// The Windows agent pool's specific profile.
	WindowsProfile AgentPoolWindowsProfilePtrInput `pulumi:"windowsProfile"`
	// Determines the type of workload a node can run.
	WorkloadRuntime pulumi.StringPtrInput `pulumi:"workloadRuntime"`
}

func (ManagedClusterAgentPoolProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAgentPoolProfile)(nil)).Elem()
}

func (i ManagedClusterAgentPoolProfileArgs) ToManagedClusterAgentPoolProfileOutput() ManagedClusterAgentPoolProfileOutput {
	return i.ToManagedClusterAgentPoolProfileOutputWithContext(context.Background())
}

func (i ManagedClusterAgentPoolProfileArgs) ToManagedClusterAgentPoolProfileOutputWithContext(ctx context.Context) ManagedClusterAgentPoolProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAgentPoolProfileOutput)
}

// ManagedClusterAgentPoolProfileArrayInput is an input type that accepts ManagedClusterAgentPoolProfileArray and ManagedClusterAgentPoolProfileArrayOutput values.
// You can construct a concrete instance of `ManagedClusterAgentPoolProfileArrayInput` via:
//
//	ManagedClusterAgentPoolProfileArray{ ManagedClusterAgentPoolProfileArgs{...} }
type ManagedClusterAgentPoolProfileArrayInput interface {
	pulumi.Input

	ToManagedClusterAgentPoolProfileArrayOutput() ManagedClusterAgentPoolProfileArrayOutput
	ToManagedClusterAgentPoolProfileArrayOutputWithContext(context.Context) ManagedClusterAgentPoolProfileArrayOutput
}

type ManagedClusterAgentPoolProfileArray []ManagedClusterAgentPoolProfileInput

func (ManagedClusterAgentPoolProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterAgentPoolProfile)(nil)).Elem()
}

func (i ManagedClusterAgentPoolProfileArray) ToManagedClusterAgentPoolProfileArrayOutput() ManagedClusterAgentPoolProfileArrayOutput {
	return i.ToManagedClusterAgentPoolProfileArrayOutputWithContext(context.Background())
}

func (i ManagedClusterAgentPoolProfileArray) ToManagedClusterAgentPoolProfileArrayOutputWithContext(ctx context.Context) ManagedClusterAgentPoolProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAgentPoolProfileArrayOutput)
}

// Profile for the container service agent pool.
type ManagedClusterAgentPoolProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterAgentPoolProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAgentPoolProfile)(nil)).Elem()
}

func (o ManagedClusterAgentPoolProfileOutput) ToManagedClusterAgentPoolProfileOutput() ManagedClusterAgentPoolProfileOutput {
	return o
}

func (o ManagedClusterAgentPoolProfileOutput) ToManagedClusterAgentPoolProfileOutputWithContext(ctx context.Context) ManagedClusterAgentPoolProfileOutput {
	return o
}

// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
func (o ManagedClusterAgentPoolProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// AKS will associate the specified agent pool with the Capacity Reservation Group.
func (o ManagedClusterAgentPoolProfileOutput) CapacityReservationGroupID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.CapacityReservationGroupID }).(pulumi.StringPtrOutput)
}

// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
func (o ManagedClusterAgentPoolProfileOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
func (o ManagedClusterAgentPoolProfileOutput) CreationData() CreationDataPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *CreationData { return v.CreationData }).(CreationDataPtrOutput)
}

// Whether to enable auto-scaler
func (o ManagedClusterAgentPoolProfileOutput) EnableAutoScaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *bool { return v.EnableAutoScaling }).(pulumi.BoolPtrOutput)
}

// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
func (o ManagedClusterAgentPoolProfileOutput) EnableEncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *bool { return v.EnableEncryptionAtHost }).(pulumi.BoolPtrOutput)
}

// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
func (o ManagedClusterAgentPoolProfileOutput) EnableFIPS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *bool { return v.EnableFIPS }).(pulumi.BoolPtrOutput)
}

// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
func (o ManagedClusterAgentPoolProfileOutput) EnableNodePublicIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *bool { return v.EnableNodePublicIP }).(pulumi.BoolPtrOutput)
}

// Whether to enable UltraSSD
func (o ManagedClusterAgentPoolProfileOutput) EnableUltraSSD() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *bool { return v.EnableUltraSSD }).(pulumi.BoolPtrOutput)
}

// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
func (o ManagedClusterAgentPoolProfileOutput) GpuInstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.GpuInstanceProfile }).(pulumi.StringPtrOutput)
}

// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
func (o ManagedClusterAgentPoolProfileOutput) HostGroupID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.HostGroupID }).(pulumi.StringPtrOutput)
}

// The Kubelet configuration on the agent pool nodes.
func (o ManagedClusterAgentPoolProfileOutput) KubeletConfig() KubeletConfigPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *KubeletConfig { return v.KubeletConfig }).(KubeletConfigPtrOutput)
}

// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
func (o ManagedClusterAgentPoolProfileOutput) KubeletDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.KubeletDiskType }).(pulumi.StringPtrOutput)
}

// The OS configuration of Linux agent nodes.
func (o ManagedClusterAgentPoolProfileOutput) LinuxOSConfig() LinuxOSConfigPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *LinuxOSConfig { return v.LinuxOSConfig }).(LinuxOSConfigPtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o ManagedClusterAgentPoolProfileOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o ManagedClusterAgentPoolProfileOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
func (o ManagedClusterAgentPoolProfileOutput) MessageOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.MessageOfTheDay }).(pulumi.StringPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o ManagedClusterAgentPoolProfileOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
func (o ManagedClusterAgentPoolProfileOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Windows agent pool names must be 6 characters or less.
func (o ManagedClusterAgentPoolProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) string { return v.Name }).(pulumi.StringOutput)
}

// Network-related settings of an agent pool.
func (o ManagedClusterAgentPoolProfileOutput) NetworkProfile() AgentPoolNetworkProfilePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *AgentPoolNetworkProfile { return v.NetworkProfile }).(AgentPoolNetworkProfilePtrOutput)
}

// The node labels to be persisted across all nodes in agent pool.
func (o ManagedClusterAgentPoolProfileOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
func (o ManagedClusterAgentPoolProfileOutput) NodePublicIPPrefixID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.NodePublicIPPrefixID }).(pulumi.StringPtrOutput)
}

// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o ManagedClusterAgentPoolProfileOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// Both patch version <major.minor.patch> (e.g. 1.20.13) and <major.minor> (e.g. 1.20) are supported. When <major.minor> is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same <major.minor> once it has been created (e.g. 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
func (o ManagedClusterAgentPoolProfileOutput) OrchestratorVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.OrchestratorVersion }).(pulumi.StringPtrOutput)
}

// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
func (o ManagedClusterAgentPoolProfileOutput) OsDiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *int { return v.OsDiskSizeGB }).(pulumi.IntPtrOutput)
}

// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
func (o ManagedClusterAgentPoolProfileOutput) OsDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.OsDiskType }).(pulumi.StringPtrOutput)
}

// Specifies the OS SKU used by the agent pool. The default is Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
func (o ManagedClusterAgentPoolProfileOutput) OsSKU() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.OsSKU }).(pulumi.StringPtrOutput)
}

// The operating system type. The default is Linux.
func (o ManagedClusterAgentPoolProfileOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
func (o ManagedClusterAgentPoolProfileOutput) PodSubnetID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.PodSubnetID }).(pulumi.StringPtrOutput)
}

// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
func (o ManagedClusterAgentPoolProfileOutput) PowerState() PowerStatePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *PowerState { return v.PowerState }).(PowerStatePtrOutput)
}

// The ID for Proximity Placement Group.
func (o ManagedClusterAgentPoolProfileOutput) ProximityPlacementGroupID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.ProximityPlacementGroupID }).(pulumi.StringPtrOutput)
}

// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
func (o ManagedClusterAgentPoolProfileOutput) ScaleDownMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.ScaleDownMode }).(pulumi.StringPtrOutput)
}

// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
func (o ManagedClusterAgentPoolProfileOutput) ScaleSetEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.ScaleSetEvictionPolicy }).(pulumi.StringPtrOutput)
}

// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
func (o ManagedClusterAgentPoolProfileOutput) ScaleSetPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.ScaleSetPriority }).(pulumi.StringPtrOutput)
}

// The security settings of an agent pool.
func (o ManagedClusterAgentPoolProfileOutput) SecurityProfile() AgentPoolSecurityProfilePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *AgentPoolSecurityProfile { return v.SecurityProfile }).(AgentPoolSecurityProfilePtrOutput)
}

// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
func (o ManagedClusterAgentPoolProfileOutput) SpotMaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *float64 { return v.SpotMaxPrice }).(pulumi.Float64PtrOutput)
}

// The tags to be persisted on the agent pool virtual machine scale set.
func (o ManagedClusterAgentPoolProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of Agent Pool.
func (o ManagedClusterAgentPoolProfileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Settings for upgrading the agentpool
func (o ManagedClusterAgentPoolProfileOutput) UpgradeSettings() AgentPoolUpgradeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *AgentPoolUpgradeSettings { return v.UpgradeSettings }).(AgentPoolUpgradeSettingsPtrOutput)
}

// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. If this field is not specified, AKS will attempt to find an appropriate VM SKU for your pool, based on quota and capacity. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
func (o ManagedClusterAgentPoolProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
func (o ManagedClusterAgentPoolProfileOutput) VnetSubnetID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.VnetSubnetID }).(pulumi.StringPtrOutput)
}

// The Windows agent pool's specific profile.
func (o ManagedClusterAgentPoolProfileOutput) WindowsProfile() AgentPoolWindowsProfilePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *AgentPoolWindowsProfile { return v.WindowsProfile }).(AgentPoolWindowsProfilePtrOutput)
}

// Determines the type of workload a node can run.
func (o ManagedClusterAgentPoolProfileOutput) WorkloadRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfile) *string { return v.WorkloadRuntime }).(pulumi.StringPtrOutput)
}

type ManagedClusterAgentPoolProfileArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterAgentPoolProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterAgentPoolProfile)(nil)).Elem()
}

func (o ManagedClusterAgentPoolProfileArrayOutput) ToManagedClusterAgentPoolProfileArrayOutput() ManagedClusterAgentPoolProfileArrayOutput {
	return o
}

func (o ManagedClusterAgentPoolProfileArrayOutput) ToManagedClusterAgentPoolProfileArrayOutputWithContext(ctx context.Context) ManagedClusterAgentPoolProfileArrayOutput {
	return o
}

func (o ManagedClusterAgentPoolProfileArrayOutput) Index(i pulumi.IntInput) ManagedClusterAgentPoolProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterAgentPoolProfile {
		return vs[0].([]ManagedClusterAgentPoolProfile)[vs[1].(int)]
	}).(ManagedClusterAgentPoolProfileOutput)
}

// Profile for the container service agent pool.
type ManagedClusterAgentPoolProfileResponse struct {
	// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// AKS will associate the specified agent pool with the Capacity Reservation Group.
	CapacityReservationGroupID *string `pulumi:"capacityReservationGroupID"`
	// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
	Count *int `pulumi:"count"`
	// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
	CreationData *CreationDataResponse `pulumi:"creationData"`
	// If orchestratorVersion is a fully specified version <major.minor.patch>, this field will be exactly equal to it. If orchestratorVersion is <major.minor>, this field will contain the full <major.minor.patch> version being used.
	CurrentOrchestratorVersion string `pulumi:"currentOrchestratorVersion"`
	// Unique read-only string used to implement optimistic concurrency. The eTag value will change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a subsequent request to enable optimistic concurrency per the normal etag convention.
	ETag string `pulumi:"eTag"`
	// Whether to enable auto-scaler
	EnableAutoScaling *bool `pulumi:"enableAutoScaling"`
	// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost *bool `pulumi:"enableEncryptionAtHost"`
	// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
	EnableFIPS *bool `pulumi:"enableFIPS"`
	// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
	EnableNodePublicIP *bool `pulumi:"enableNodePublicIP"`
	// Whether to enable UltraSSD
	EnableUltraSSD *bool `pulumi:"enableUltraSSD"`
	// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
	GpuInstanceProfile *string `pulumi:"gpuInstanceProfile"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
	HostGroupID *string `pulumi:"hostGroupID"`
	// The Kubelet configuration on the agent pool nodes.
	KubeletConfig *KubeletConfigResponse `pulumi:"kubeletConfig"`
	// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
	KubeletDiskType *string `pulumi:"kubeletDiskType"`
	// The OS configuration of Linux agent nodes.
	LinuxOSConfig *LinuxOSConfigResponse `pulumi:"linuxOSConfig"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int `pulumi:"maxCount"`
	// The maximum number of pods that can run on a node.
	MaxPods *int `pulumi:"maxPods"`
	// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
	MessageOfTheDay *string `pulumi:"messageOfTheDay"`
	// The minimum number of nodes for auto-scaling
	MinCount *int `pulumi:"minCount"`
	// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
	Mode *string `pulumi:"mode"`
	// Windows agent pool names must be 6 characters or less.
	Name string `pulumi:"name"`
	// Network-related settings of an agent pool.
	NetworkProfile *AgentPoolNetworkProfileResponse `pulumi:"networkProfile"`
	// The version of node image
	NodeImageVersion string `pulumi:"nodeImageVersion"`
	// The node labels to be persisted across all nodes in agent pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixID *string `pulumi:"nodePublicIPPrefixID"`
	// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `pulumi:"nodeTaints"`
	// Both patch version <major.minor.patch> (e.g. 1.20.13) and <major.minor> (e.g. 1.20) are supported. When <major.minor> is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same <major.minor> once it has been created (e.g. 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
	OrchestratorVersion *string `pulumi:"orchestratorVersion"`
	// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
	OsDiskSizeGB *int `pulumi:"osDiskSizeGB"`
	// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
	OsDiskType *string `pulumi:"osDiskType"`
	// Specifies the OS SKU used by the agent pool. The default is Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
	OsSKU *string `pulumi:"osSKU"`
	// The operating system type. The default is Linux.
	OsType *string `pulumi:"osType"`
	// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetID *string `pulumi:"podSubnetID"`
	// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
	PowerState *PowerStateResponse `pulumi:"powerState"`
	// The current deployment or provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `pulumi:"proximityPlacementGroupID"`
	// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
	ScaleDownMode *string `pulumi:"scaleDownMode"`
	// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
	ScaleSetEvictionPolicy *string `pulumi:"scaleSetEvictionPolicy"`
	// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
	ScaleSetPriority *string `pulumi:"scaleSetPriority"`
	// The security settings of an agent pool.
	SecurityProfile *AgentPoolSecurityProfileResponse `pulumi:"securityProfile"`
	// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
	SpotMaxPrice *float64 `pulumi:"spotMaxPrice"`
	// The tags to be persisted on the agent pool virtual machine scale set.
	Tags map[string]string `pulumi:"tags"`
	// The type of Agent Pool.
	Type *string `pulumi:"type"`
	// Settings for upgrading the agentpool
	UpgradeSettings *AgentPoolUpgradeSettingsResponse `pulumi:"upgradeSettings"`
	// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. If this field is not specified, AKS will attempt to find an appropriate VM SKU for your pool, based on quota and capacity. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize *string `pulumi:"vmSize"`
	// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetID *string `pulumi:"vnetSubnetID"`
	// The Windows agent pool's specific profile.
	WindowsProfile *AgentPoolWindowsProfileResponse `pulumi:"windowsProfile"`
	// Determines the type of workload a node can run.
	WorkloadRuntime *string `pulumi:"workloadRuntime"`
}

// Profile for the container service agent pool.
type ManagedClusterAgentPoolProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAgentPoolProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAgentPoolProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAgentPoolProfileResponseOutput) ToManagedClusterAgentPoolProfileResponseOutput() ManagedClusterAgentPoolProfileResponseOutput {
	return o
}

func (o ManagedClusterAgentPoolProfileResponseOutput) ToManagedClusterAgentPoolProfileResponseOutputWithContext(ctx context.Context) ManagedClusterAgentPoolProfileResponseOutput {
	return o
}

// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is 'VirtualMachineScaleSets'.
func (o ManagedClusterAgentPoolProfileResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// AKS will associate the specified agent pool with the Capacity Reservation Group.
func (o ManagedClusterAgentPoolProfileResponseOutput) CapacityReservationGroupID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.CapacityReservationGroupID }).(pulumi.StringPtrOutput)
}

// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
func (o ManagedClusterAgentPoolProfileResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// CreationData to be used to specify the source Snapshot ID if the node pool will be created/upgraded using a snapshot.
func (o ManagedClusterAgentPoolProfileResponseOutput) CreationData() CreationDataResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *CreationDataResponse { return v.CreationData }).(CreationDataResponsePtrOutput)
}

// If orchestratorVersion is a fully specified version <major.minor.patch>, this field will be exactly equal to it. If orchestratorVersion is <major.minor>, this field will contain the full <major.minor.patch> version being used.
func (o ManagedClusterAgentPoolProfileResponseOutput) CurrentOrchestratorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) string { return v.CurrentOrchestratorVersion }).(pulumi.StringOutput)
}

// Unique read-only string used to implement optimistic concurrency. The eTag value will change when the resource is updated. Specify an if-match or if-none-match header with the eTag value for a subsequent request to enable optimistic concurrency per the normal etag convention.
func (o ManagedClusterAgentPoolProfileResponseOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) string { return v.ETag }).(pulumi.StringOutput)
}

// Whether to enable auto-scaler
func (o ManagedClusterAgentPoolProfileResponseOutput) EnableAutoScaling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *bool { return v.EnableAutoScaling }).(pulumi.BoolPtrOutput)
}

// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
func (o ManagedClusterAgentPoolProfileResponseOutput) EnableEncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *bool { return v.EnableEncryptionAtHost }).(pulumi.BoolPtrOutput)
}

// See [Add a FIPS-enabled node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#add-a-fips-enabled-node-pool-preview) for more details.
func (o ManagedClusterAgentPoolProfileResponseOutput) EnableFIPS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *bool { return v.EnableFIPS }).(pulumi.BoolPtrOutput)
}

// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see [assigning a public IP per node](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#assign-a-public-ip-per-node-for-your-node-pools). The default is false.
func (o ManagedClusterAgentPoolProfileResponseOutput) EnableNodePublicIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *bool { return v.EnableNodePublicIP }).(pulumi.BoolPtrOutput)
}

// Whether to enable UltraSSD
func (o ManagedClusterAgentPoolProfileResponseOutput) EnableUltraSSD() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *bool { return v.EnableUltraSSD }).(pulumi.BoolPtrOutput)
}

// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
func (o ManagedClusterAgentPoolProfileResponseOutput) GpuInstanceProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.GpuInstanceProfile }).(pulumi.StringPtrOutput)
}

// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see [Azure dedicated hosts](https://docs.microsoft.com/azure/virtual-machines/dedicated-hosts).
func (o ManagedClusterAgentPoolProfileResponseOutput) HostGroupID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.HostGroupID }).(pulumi.StringPtrOutput)
}

// The Kubelet configuration on the agent pool nodes.
func (o ManagedClusterAgentPoolProfileResponseOutput) KubeletConfig() KubeletConfigResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *KubeletConfigResponse { return v.KubeletConfig }).(KubeletConfigResponsePtrOutput)
}

// Determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage.
func (o ManagedClusterAgentPoolProfileResponseOutput) KubeletDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.KubeletDiskType }).(pulumi.StringPtrOutput)
}

// The OS configuration of Linux agent nodes.
func (o ManagedClusterAgentPoolProfileResponseOutput) LinuxOSConfig() LinuxOSConfigResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *LinuxOSConfigResponse { return v.LinuxOSConfig }).(LinuxOSConfigResponsePtrOutput)
}

// The maximum number of nodes for auto-scaling
func (o ManagedClusterAgentPoolProfileResponseOutput) MaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *int { return v.MaxCount }).(pulumi.IntPtrOutput)
}

// The maximum number of pods that can run on a node.
func (o ManagedClusterAgentPoolProfileResponseOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// A base64-encoded string which will be written to /etc/motd after decoding. This allows customization of the message of the day for Linux nodes. It must not be specified for Windows nodes. It must be a static string (i.e., will be printed raw and not be executed as a script).
func (o ManagedClusterAgentPoolProfileResponseOutput) MessageOfTheDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.MessageOfTheDay }).(pulumi.StringPtrOutput)
}

// The minimum number of nodes for auto-scaling
func (o ManagedClusterAgentPoolProfileResponseOutput) MinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *int { return v.MinCount }).(pulumi.IntPtrOutput)
}

// A cluster must have at least one 'System' Agent Pool at all times. For additional information on agent pool restrictions and best practices, see: https://docs.microsoft.com/azure/aks/use-system-pools
func (o ManagedClusterAgentPoolProfileResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Windows agent pool names must be 6 characters or less.
func (o ManagedClusterAgentPoolProfileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Network-related settings of an agent pool.
func (o ManagedClusterAgentPoolProfileResponseOutput) NetworkProfile() AgentPoolNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *AgentPoolNetworkProfileResponse {
		return v.NetworkProfile
	}).(AgentPoolNetworkProfileResponsePtrOutput)
}

// The version of node image
func (o ManagedClusterAgentPoolProfileResponseOutput) NodeImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) string { return v.NodeImageVersion }).(pulumi.StringOutput)
}

// The node labels to be persisted across all nodes in agent pool.
func (o ManagedClusterAgentPoolProfileResponseOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
func (o ManagedClusterAgentPoolProfileResponseOutput) NodePublicIPPrefixID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.NodePublicIPPrefixID }).(pulumi.StringPtrOutput)
}

// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
func (o ManagedClusterAgentPoolProfileResponseOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// Both patch version <major.minor.patch> (e.g. 1.20.13) and <major.minor> (e.g. 1.20) are supported. When <major.minor> is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same <major.minor> once it has been created (e.g. 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see [upgrading a node pool](https://docs.microsoft.com/azure/aks/use-multiple-node-pools#upgrade-a-node-pool).
func (o ManagedClusterAgentPoolProfileResponseOutput) OrchestratorVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.OrchestratorVersion }).(pulumi.StringPtrOutput)
}

// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
func (o ManagedClusterAgentPoolProfileResponseOutput) OsDiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *int { return v.OsDiskSizeGB }).(pulumi.IntPtrOutput)
}

// The default is 'Ephemeral' if the VM supports it and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to 'Managed'. May not be changed after creation. For more information see [Ephemeral OS](https://docs.microsoft.com/azure/aks/cluster-configuration#ephemeral-os).
func (o ManagedClusterAgentPoolProfileResponseOutput) OsDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.OsDiskType }).(pulumi.StringPtrOutput)
}

// Specifies the OS SKU used by the agent pool. The default is Ubuntu if OSType is Linux. The default is Windows2019 when Kubernetes <= 1.24 or Windows2022 when Kubernetes >= 1.25 if OSType is Windows.
func (o ManagedClusterAgentPoolProfileResponseOutput) OsSKU() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.OsSKU }).(pulumi.StringPtrOutput)
}

// The operating system type. The default is Linux.
func (o ManagedClusterAgentPoolProfileResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
func (o ManagedClusterAgentPoolProfileResponseOutput) PodSubnetID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.PodSubnetID }).(pulumi.StringPtrOutput)
}

// When an Agent Pool is first created it is initially Running. The Agent Pool can be stopped by setting this field to Stopped. A stopped Agent Pool stops all of its VMs and does not accrue billing charges. An Agent Pool can only be stopped if it is Running and provisioning state is Succeeded
func (o ManagedClusterAgentPoolProfileResponseOutput) PowerState() PowerStateResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *PowerStateResponse { return v.PowerState }).(PowerStateResponsePtrOutput)
}

// The current deployment or provisioning state.
func (o ManagedClusterAgentPoolProfileResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The ID for Proximity Placement Group.
func (o ManagedClusterAgentPoolProfileResponseOutput) ProximityPlacementGroupID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.ProximityPlacementGroupID }).(pulumi.StringPtrOutput)
}

// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete.
func (o ManagedClusterAgentPoolProfileResponseOutput) ScaleDownMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.ScaleDownMode }).(pulumi.StringPtrOutput)
}

// This cannot be specified unless the scaleSetPriority is 'Spot'. If not specified, the default is 'Delete'.
func (o ManagedClusterAgentPoolProfileResponseOutput) ScaleSetEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.ScaleSetEvictionPolicy }).(pulumi.StringPtrOutput)
}

// The Virtual Machine Scale Set priority. If not specified, the default is 'Regular'.
func (o ManagedClusterAgentPoolProfileResponseOutput) ScaleSetPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.ScaleSetPriority }).(pulumi.StringPtrOutput)
}

// The security settings of an agent pool.
func (o ManagedClusterAgentPoolProfileResponseOutput) SecurityProfile() AgentPoolSecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *AgentPoolSecurityProfileResponse {
		return v.SecurityProfile
	}).(AgentPoolSecurityProfileResponsePtrOutput)
}

// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see [spot VMs pricing](https://docs.microsoft.com/azure/virtual-machines/spot-vms#pricing)
func (o ManagedClusterAgentPoolProfileResponseOutput) SpotMaxPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *float64 { return v.SpotMaxPrice }).(pulumi.Float64PtrOutput)
}

// The tags to be persisted on the agent pool virtual machine scale set.
func (o ManagedClusterAgentPoolProfileResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of Agent Pool.
func (o ManagedClusterAgentPoolProfileResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Settings for upgrading the agentpool
func (o ManagedClusterAgentPoolProfileResponseOutput) UpgradeSettings() AgentPoolUpgradeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *AgentPoolUpgradeSettingsResponse {
		return v.UpgradeSettings
	}).(AgentPoolUpgradeSettingsResponsePtrOutput)
}

// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. If this field is not specified, AKS will attempt to find an appropriate VM SKU for your pool, based on quota and capacity. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
func (o ManagedClusterAgentPoolProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
func (o ManagedClusterAgentPoolProfileResponseOutput) VnetSubnetID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.VnetSubnetID }).(pulumi.StringPtrOutput)
}

// The Windows agent pool's specific profile.
func (o ManagedClusterAgentPoolProfileResponseOutput) WindowsProfile() AgentPoolWindowsProfileResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *AgentPoolWindowsProfileResponse {
		return v.WindowsProfile
	}).(AgentPoolWindowsProfileResponsePtrOutput)
}

// Determines the type of workload a node can run.
func (o ManagedClusterAgentPoolProfileResponseOutput) WorkloadRuntime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAgentPoolProfileResponse) *string { return v.WorkloadRuntime }).(pulumi.StringPtrOutput)
}

type ManagedClusterAgentPoolProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterAgentPoolProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterAgentPoolProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAgentPoolProfileResponseArrayOutput) ToManagedClusterAgentPoolProfileResponseArrayOutput() ManagedClusterAgentPoolProfileResponseArrayOutput {
	return o
}

func (o ManagedClusterAgentPoolProfileResponseArrayOutput) ToManagedClusterAgentPoolProfileResponseArrayOutputWithContext(ctx context.Context) ManagedClusterAgentPoolProfileResponseArrayOutput {
	return o
}

func (o ManagedClusterAgentPoolProfileResponseArrayOutput) Index(i pulumi.IntInput) ManagedClusterAgentPoolProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterAgentPoolProfileResponse {
		return vs[0].([]ManagedClusterAgentPoolProfileResponse)[vs[1].(int)]
	}).(ManagedClusterAgentPoolProfileResponseOutput)
}

// Auto upgrade profile for a managed cluster.
type ManagedClusterAutoUpgradeProfile struct {
	// Manner in which the OS on your nodes is updated. The default is NodeImage.
	NodeOSUpgradeChannel *string `pulumi:"nodeOSUpgradeChannel"`
	// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
	UpgradeChannel *string `pulumi:"upgradeChannel"`
}

// ManagedClusterAutoUpgradeProfileInput is an input type that accepts ManagedClusterAutoUpgradeProfileArgs and ManagedClusterAutoUpgradeProfileOutput values.
// You can construct a concrete instance of `ManagedClusterAutoUpgradeProfileInput` via:
//
//	ManagedClusterAutoUpgradeProfileArgs{...}
type ManagedClusterAutoUpgradeProfileInput interface {
	pulumi.Input

	ToManagedClusterAutoUpgradeProfileOutput() ManagedClusterAutoUpgradeProfileOutput
	ToManagedClusterAutoUpgradeProfileOutputWithContext(context.Context) ManagedClusterAutoUpgradeProfileOutput
}

// Auto upgrade profile for a managed cluster.
type ManagedClusterAutoUpgradeProfileArgs struct {
	// Manner in which the OS on your nodes is updated. The default is NodeImage.
	NodeOSUpgradeChannel pulumi.StringPtrInput `pulumi:"nodeOSUpgradeChannel"`
	// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
	UpgradeChannel pulumi.StringPtrInput `pulumi:"upgradeChannel"`
}

func (ManagedClusterAutoUpgradeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAutoUpgradeProfile)(nil)).Elem()
}

func (i ManagedClusterAutoUpgradeProfileArgs) ToManagedClusterAutoUpgradeProfileOutput() ManagedClusterAutoUpgradeProfileOutput {
	return i.ToManagedClusterAutoUpgradeProfileOutputWithContext(context.Background())
}

func (i ManagedClusterAutoUpgradeProfileArgs) ToManagedClusterAutoUpgradeProfileOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAutoUpgradeProfileOutput)
}

func (i ManagedClusterAutoUpgradeProfileArgs) ToManagedClusterAutoUpgradeProfilePtrOutput() ManagedClusterAutoUpgradeProfilePtrOutput {
	return i.ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterAutoUpgradeProfileArgs) ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAutoUpgradeProfileOutput).ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(ctx)
}

// ManagedClusterAutoUpgradeProfilePtrInput is an input type that accepts ManagedClusterAutoUpgradeProfileArgs, ManagedClusterAutoUpgradeProfilePtr and ManagedClusterAutoUpgradeProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterAutoUpgradeProfilePtrInput` via:
//
//	        ManagedClusterAutoUpgradeProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterAutoUpgradeProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterAutoUpgradeProfilePtrOutput() ManagedClusterAutoUpgradeProfilePtrOutput
	ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(context.Context) ManagedClusterAutoUpgradeProfilePtrOutput
}

type managedClusterAutoUpgradeProfilePtrType ManagedClusterAutoUpgradeProfileArgs

func ManagedClusterAutoUpgradeProfilePtr(v *ManagedClusterAutoUpgradeProfileArgs) ManagedClusterAutoUpgradeProfilePtrInput {
	return (*managedClusterAutoUpgradeProfilePtrType)(v)
}

func (*managedClusterAutoUpgradeProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAutoUpgradeProfile)(nil)).Elem()
}

func (i *managedClusterAutoUpgradeProfilePtrType) ToManagedClusterAutoUpgradeProfilePtrOutput() ManagedClusterAutoUpgradeProfilePtrOutput {
	return i.ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterAutoUpgradeProfilePtrType) ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAutoUpgradeProfilePtrOutput)
}

// Auto upgrade profile for a managed cluster.
type ManagedClusterAutoUpgradeProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterAutoUpgradeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAutoUpgradeProfile)(nil)).Elem()
}

func (o ManagedClusterAutoUpgradeProfileOutput) ToManagedClusterAutoUpgradeProfileOutput() ManagedClusterAutoUpgradeProfileOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfileOutput) ToManagedClusterAutoUpgradeProfileOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfileOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfileOutput) ToManagedClusterAutoUpgradeProfilePtrOutput() ManagedClusterAutoUpgradeProfilePtrOutput {
	return o.ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterAutoUpgradeProfileOutput) ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterAutoUpgradeProfile) *ManagedClusterAutoUpgradeProfile {
		return &v
	}).(ManagedClusterAutoUpgradeProfilePtrOutput)
}

// Manner in which the OS on your nodes is updated. The default is NodeImage.
func (o ManagedClusterAutoUpgradeProfileOutput) NodeOSUpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAutoUpgradeProfile) *string { return v.NodeOSUpgradeChannel }).(pulumi.StringPtrOutput)
}

// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
func (o ManagedClusterAutoUpgradeProfileOutput) UpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAutoUpgradeProfile) *string { return v.UpgradeChannel }).(pulumi.StringPtrOutput)
}

type ManagedClusterAutoUpgradeProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAutoUpgradeProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAutoUpgradeProfile)(nil)).Elem()
}

func (o ManagedClusterAutoUpgradeProfilePtrOutput) ToManagedClusterAutoUpgradeProfilePtrOutput() ManagedClusterAutoUpgradeProfilePtrOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfilePtrOutput) ToManagedClusterAutoUpgradeProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfilePtrOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfilePtrOutput) Elem() ManagedClusterAutoUpgradeProfileOutput {
	return o.ApplyT(func(v *ManagedClusterAutoUpgradeProfile) ManagedClusterAutoUpgradeProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAutoUpgradeProfile
		return ret
	}).(ManagedClusterAutoUpgradeProfileOutput)
}

// Manner in which the OS on your nodes is updated. The default is NodeImage.
func (o ManagedClusterAutoUpgradeProfilePtrOutput) NodeOSUpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAutoUpgradeProfile) *string {
		if v == nil {
			return nil
		}
		return v.NodeOSUpgradeChannel
	}).(pulumi.StringPtrOutput)
}

// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
func (o ManagedClusterAutoUpgradeProfilePtrOutput) UpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAutoUpgradeProfile) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeChannel
	}).(pulumi.StringPtrOutput)
}

// Auto upgrade profile for a managed cluster.
type ManagedClusterAutoUpgradeProfileResponse struct {
	// Manner in which the OS on your nodes is updated. The default is NodeImage.
	NodeOSUpgradeChannel *string `pulumi:"nodeOSUpgradeChannel"`
	// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
	UpgradeChannel *string `pulumi:"upgradeChannel"`
}

// Auto upgrade profile for a managed cluster.
type ManagedClusterAutoUpgradeProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAutoUpgradeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAutoUpgradeProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAutoUpgradeProfileResponseOutput) ToManagedClusterAutoUpgradeProfileResponseOutput() ManagedClusterAutoUpgradeProfileResponseOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfileResponseOutput) ToManagedClusterAutoUpgradeProfileResponseOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfileResponseOutput {
	return o
}

// Manner in which the OS on your nodes is updated. The default is NodeImage.
func (o ManagedClusterAutoUpgradeProfileResponseOutput) NodeOSUpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAutoUpgradeProfileResponse) *string { return v.NodeOSUpgradeChannel }).(pulumi.StringPtrOutput)
}

// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
func (o ManagedClusterAutoUpgradeProfileResponseOutput) UpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAutoUpgradeProfileResponse) *string { return v.UpgradeChannel }).(pulumi.StringPtrOutput)
}

type ManagedClusterAutoUpgradeProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAutoUpgradeProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAutoUpgradeProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAutoUpgradeProfileResponsePtrOutput) ToManagedClusterAutoUpgradeProfileResponsePtrOutput() ManagedClusterAutoUpgradeProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfileResponsePtrOutput) ToManagedClusterAutoUpgradeProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterAutoUpgradeProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAutoUpgradeProfileResponsePtrOutput) Elem() ManagedClusterAutoUpgradeProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterAutoUpgradeProfileResponse) ManagedClusterAutoUpgradeProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAutoUpgradeProfileResponse
		return ret
	}).(ManagedClusterAutoUpgradeProfileResponseOutput)
}

// Manner in which the OS on your nodes is updated. The default is NodeImage.
func (o ManagedClusterAutoUpgradeProfileResponsePtrOutput) NodeOSUpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAutoUpgradeProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeOSUpgradeChannel
	}).(pulumi.StringPtrOutput)
}

// For more information see [setting the AKS cluster auto-upgrade channel](https://docs.microsoft.com/azure/aks/upgrade-cluster#set-auto-upgrade-channel).
func (o ManagedClusterAutoUpgradeProfileResponsePtrOutput) UpgradeChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAutoUpgradeProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeChannel
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor addon profiles for monitoring the managed cluster.
type ManagedClusterAzureMonitorProfile struct {
	// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
	Metrics *ManagedClusterAzureMonitorProfileMetrics `pulumi:"metrics"`
}

// ManagedClusterAzureMonitorProfileInput is an input type that accepts ManagedClusterAzureMonitorProfileArgs and ManagedClusterAzureMonitorProfileOutput values.
// You can construct a concrete instance of `ManagedClusterAzureMonitorProfileInput` via:
//
//	ManagedClusterAzureMonitorProfileArgs{...}
type ManagedClusterAzureMonitorProfileInput interface {
	pulumi.Input

	ToManagedClusterAzureMonitorProfileOutput() ManagedClusterAzureMonitorProfileOutput
	ToManagedClusterAzureMonitorProfileOutputWithContext(context.Context) ManagedClusterAzureMonitorProfileOutput
}

// Azure Monitor addon profiles for monitoring the managed cluster.
type ManagedClusterAzureMonitorProfileArgs struct {
	// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
	Metrics ManagedClusterAzureMonitorProfileMetricsPtrInput `pulumi:"metrics"`
}

func (ManagedClusterAzureMonitorProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfile)(nil)).Elem()
}

func (i ManagedClusterAzureMonitorProfileArgs) ToManagedClusterAzureMonitorProfileOutput() ManagedClusterAzureMonitorProfileOutput {
	return i.ToManagedClusterAzureMonitorProfileOutputWithContext(context.Background())
}

func (i ManagedClusterAzureMonitorProfileArgs) ToManagedClusterAzureMonitorProfileOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileOutput)
}

func (i ManagedClusterAzureMonitorProfileArgs) ToManagedClusterAzureMonitorProfilePtrOutput() ManagedClusterAzureMonitorProfilePtrOutput {
	return i.ToManagedClusterAzureMonitorProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterAzureMonitorProfileArgs) ToManagedClusterAzureMonitorProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileOutput).ToManagedClusterAzureMonitorProfilePtrOutputWithContext(ctx)
}

// ManagedClusterAzureMonitorProfilePtrInput is an input type that accepts ManagedClusterAzureMonitorProfileArgs, ManagedClusterAzureMonitorProfilePtr and ManagedClusterAzureMonitorProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterAzureMonitorProfilePtrInput` via:
//
//	        ManagedClusterAzureMonitorProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterAzureMonitorProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterAzureMonitorProfilePtrOutput() ManagedClusterAzureMonitorProfilePtrOutput
	ToManagedClusterAzureMonitorProfilePtrOutputWithContext(context.Context) ManagedClusterAzureMonitorProfilePtrOutput
}

type managedClusterAzureMonitorProfilePtrType ManagedClusterAzureMonitorProfileArgs

func ManagedClusterAzureMonitorProfilePtr(v *ManagedClusterAzureMonitorProfileArgs) ManagedClusterAzureMonitorProfilePtrInput {
	return (*managedClusterAzureMonitorProfilePtrType)(v)
}

func (*managedClusterAzureMonitorProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfile)(nil)).Elem()
}

func (i *managedClusterAzureMonitorProfilePtrType) ToManagedClusterAzureMonitorProfilePtrOutput() ManagedClusterAzureMonitorProfilePtrOutput {
	return i.ToManagedClusterAzureMonitorProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterAzureMonitorProfilePtrType) ToManagedClusterAzureMonitorProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfilePtrOutput)
}

// Azure Monitor addon profiles for monitoring the managed cluster.
type ManagedClusterAzureMonitorProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfile)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileOutput) ToManagedClusterAzureMonitorProfileOutput() ManagedClusterAzureMonitorProfileOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileOutput) ToManagedClusterAzureMonitorProfileOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileOutput) ToManagedClusterAzureMonitorProfilePtrOutput() ManagedClusterAzureMonitorProfilePtrOutput {
	return o.ToManagedClusterAzureMonitorProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterAzureMonitorProfileOutput) ToManagedClusterAzureMonitorProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterAzureMonitorProfile) *ManagedClusterAzureMonitorProfile {
		return &v
	}).(ManagedClusterAzureMonitorProfilePtrOutput)
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
func (o ManagedClusterAzureMonitorProfileOutput) Metrics() ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfile) *ManagedClusterAzureMonitorProfileMetrics { return v.Metrics }).(ManagedClusterAzureMonitorProfileMetricsPtrOutput)
}

type ManagedClusterAzureMonitorProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfile)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfilePtrOutput) ToManagedClusterAzureMonitorProfilePtrOutput() ManagedClusterAzureMonitorProfilePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfilePtrOutput) ToManagedClusterAzureMonitorProfilePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfilePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfilePtrOutput) Elem() ManagedClusterAzureMonitorProfileOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfile) ManagedClusterAzureMonitorProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAzureMonitorProfile
		return ret
	}).(ManagedClusterAzureMonitorProfileOutput)
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
func (o ManagedClusterAzureMonitorProfilePtrOutput) Metrics() ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfile) *ManagedClusterAzureMonitorProfileMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ManagedClusterAzureMonitorProfileMetricsPtrOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
type ManagedClusterAzureMonitorProfileKubeStateMetrics struct {
	// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
	MetricAnnotationsAllowList *string `pulumi:"metricAnnotationsAllowList"`
	// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
	MetricLabelsAllowlist *string `pulumi:"metricLabelsAllowlist"`
}

// ManagedClusterAzureMonitorProfileKubeStateMetricsInput is an input type that accepts ManagedClusterAzureMonitorProfileKubeStateMetricsArgs and ManagedClusterAzureMonitorProfileKubeStateMetricsOutput values.
// You can construct a concrete instance of `ManagedClusterAzureMonitorProfileKubeStateMetricsInput` via:
//
//	ManagedClusterAzureMonitorProfileKubeStateMetricsArgs{...}
type ManagedClusterAzureMonitorProfileKubeStateMetricsInput interface {
	pulumi.Input

	ToManagedClusterAzureMonitorProfileKubeStateMetricsOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsOutput
	ToManagedClusterAzureMonitorProfileKubeStateMetricsOutputWithContext(context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsOutput
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
type ManagedClusterAzureMonitorProfileKubeStateMetricsArgs struct {
	// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
	MetricAnnotationsAllowList pulumi.StringPtrInput `pulumi:"metricAnnotationsAllowList"`
	// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
	MetricLabelsAllowlist pulumi.StringPtrInput `pulumi:"metricLabelsAllowlist"`
}

func (ManagedClusterAzureMonitorProfileKubeStateMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileKubeStateMetrics)(nil)).Elem()
}

func (i ManagedClusterAzureMonitorProfileKubeStateMetricsArgs) ToManagedClusterAzureMonitorProfileKubeStateMetricsOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsOutput {
	return i.ToManagedClusterAzureMonitorProfileKubeStateMetricsOutputWithContext(context.Background())
}

func (i ManagedClusterAzureMonitorProfileKubeStateMetricsArgs) ToManagedClusterAzureMonitorProfileKubeStateMetricsOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileKubeStateMetricsOutput)
}

func (i ManagedClusterAzureMonitorProfileKubeStateMetricsArgs) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return i.ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(context.Background())
}

func (i ManagedClusterAzureMonitorProfileKubeStateMetricsArgs) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileKubeStateMetricsOutput).ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(ctx)
}

// ManagedClusterAzureMonitorProfileKubeStateMetricsPtrInput is an input type that accepts ManagedClusterAzureMonitorProfileKubeStateMetricsArgs, ManagedClusterAzureMonitorProfileKubeStateMetricsPtr and ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput values.
// You can construct a concrete instance of `ManagedClusterAzureMonitorProfileKubeStateMetricsPtrInput` via:
//
//	        ManagedClusterAzureMonitorProfileKubeStateMetricsArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterAzureMonitorProfileKubeStateMetricsPtrInput interface {
	pulumi.Input

	ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput
	ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput
}

type managedClusterAzureMonitorProfileKubeStateMetricsPtrType ManagedClusterAzureMonitorProfileKubeStateMetricsArgs

func ManagedClusterAzureMonitorProfileKubeStateMetricsPtr(v *ManagedClusterAzureMonitorProfileKubeStateMetricsArgs) ManagedClusterAzureMonitorProfileKubeStateMetricsPtrInput {
	return (*managedClusterAzureMonitorProfileKubeStateMetricsPtrType)(v)
}

func (*managedClusterAzureMonitorProfileKubeStateMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileKubeStateMetrics)(nil)).Elem()
}

func (i *managedClusterAzureMonitorProfileKubeStateMetricsPtrType) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return i.ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(context.Background())
}

func (i *managedClusterAzureMonitorProfileKubeStateMetricsPtrType) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
type ManagedClusterAzureMonitorProfileKubeStateMetricsOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileKubeStateMetrics)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return o.ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(context.Background())
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterAzureMonitorProfileKubeStateMetrics) *ManagedClusterAzureMonitorProfileKubeStateMetrics {
		return &v
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput)
}

// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) MetricAnnotationsAllowList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileKubeStateMetrics) *string { return v.MetricAnnotationsAllowList }).(pulumi.StringPtrOutput)
}

// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsOutput) MetricLabelsAllowlist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileKubeStateMetrics) *string { return v.MetricLabelsAllowlist }).(pulumi.StringPtrOutput)
}

type ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileKubeStateMetrics)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput) Elem() ManagedClusterAzureMonitorProfileKubeStateMetricsOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileKubeStateMetrics) ManagedClusterAzureMonitorProfileKubeStateMetrics {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAzureMonitorProfileKubeStateMetrics
		return ret
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsOutput)
}

// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput) MetricAnnotationsAllowList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileKubeStateMetrics) *string {
		if v == nil {
			return nil
		}
		return v.MetricAnnotationsAllowList
	}).(pulumi.StringPtrOutput)
}

// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput) MetricLabelsAllowlist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileKubeStateMetrics) *string {
		if v == nil {
			return nil
		}
		return v.MetricLabelsAllowlist
	}).(pulumi.StringPtrOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
type ManagedClusterAzureMonitorProfileKubeStateMetricsResponse struct {
	// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
	MetricAnnotationsAllowList *string `pulumi:"metricAnnotationsAllowList"`
	// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
	MetricLabelsAllowlist *string `pulumi:"metricLabelsAllowlist"`
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
type ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileKubeStateMetricsResponse)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput {
	return o
}

// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput) MetricAnnotationsAllowList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileKubeStateMetricsResponse) *string {
		return v.MetricAnnotationsAllowList
	}).(pulumi.StringPtrOutput)
}

// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput) MetricLabelsAllowlist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileKubeStateMetricsResponse) *string {
		return v.MetricLabelsAllowlist
	}).(pulumi.StringPtrOutput)
}

type ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileKubeStateMetricsResponse)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput() ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput) ToManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput) Elem() ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileKubeStateMetricsResponse) ManagedClusterAzureMonitorProfileKubeStateMetricsResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAzureMonitorProfileKubeStateMetricsResponse
		return ret
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput)
}

// Comma-separated list of Kubernetes annotation keys that will be used in the resource's labels metric (Example: 'namespaces=[kubernetes.io/team,...],pods=[kubernetes.io/team],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput) MetricAnnotationsAllowList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileKubeStateMetricsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricAnnotationsAllowList
	}).(pulumi.StringPtrOutput)
}

// Comma-separated list of additional Kubernetes label keys that will be used in the resource's labels metric (Example: 'namespaces=[k8s-label-1,k8s-label-n,...],pods=[app],...'). By default the metric contains only resource name and namespace labels.
func (o ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput) MetricLabelsAllowlist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileKubeStateMetricsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetricLabelsAllowlist
	}).(pulumi.StringPtrOutput)
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
type ManagedClusterAzureMonitorProfileMetrics struct {
	// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
	Enabled bool `pulumi:"enabled"`
	// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
	KubeStateMetrics *ManagedClusterAzureMonitorProfileKubeStateMetrics `pulumi:"kubeStateMetrics"`
}

// ManagedClusterAzureMonitorProfileMetricsInput is an input type that accepts ManagedClusterAzureMonitorProfileMetricsArgs and ManagedClusterAzureMonitorProfileMetricsOutput values.
// You can construct a concrete instance of `ManagedClusterAzureMonitorProfileMetricsInput` via:
//
//	ManagedClusterAzureMonitorProfileMetricsArgs{...}
type ManagedClusterAzureMonitorProfileMetricsInput interface {
	pulumi.Input

	ToManagedClusterAzureMonitorProfileMetricsOutput() ManagedClusterAzureMonitorProfileMetricsOutput
	ToManagedClusterAzureMonitorProfileMetricsOutputWithContext(context.Context) ManagedClusterAzureMonitorProfileMetricsOutput
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
type ManagedClusterAzureMonitorProfileMetricsArgs struct {
	// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
	KubeStateMetrics ManagedClusterAzureMonitorProfileKubeStateMetricsPtrInput `pulumi:"kubeStateMetrics"`
}

func (ManagedClusterAzureMonitorProfileMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileMetrics)(nil)).Elem()
}

func (i ManagedClusterAzureMonitorProfileMetricsArgs) ToManagedClusterAzureMonitorProfileMetricsOutput() ManagedClusterAzureMonitorProfileMetricsOutput {
	return i.ToManagedClusterAzureMonitorProfileMetricsOutputWithContext(context.Background())
}

func (i ManagedClusterAzureMonitorProfileMetricsArgs) ToManagedClusterAzureMonitorProfileMetricsOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileMetricsOutput)
}

func (i ManagedClusterAzureMonitorProfileMetricsArgs) ToManagedClusterAzureMonitorProfileMetricsPtrOutput() ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return i.ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(context.Background())
}

func (i ManagedClusterAzureMonitorProfileMetricsArgs) ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileMetricsOutput).ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(ctx)
}

// ManagedClusterAzureMonitorProfileMetricsPtrInput is an input type that accepts ManagedClusterAzureMonitorProfileMetricsArgs, ManagedClusterAzureMonitorProfileMetricsPtr and ManagedClusterAzureMonitorProfileMetricsPtrOutput values.
// You can construct a concrete instance of `ManagedClusterAzureMonitorProfileMetricsPtrInput` via:
//
//	        ManagedClusterAzureMonitorProfileMetricsArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterAzureMonitorProfileMetricsPtrInput interface {
	pulumi.Input

	ToManagedClusterAzureMonitorProfileMetricsPtrOutput() ManagedClusterAzureMonitorProfileMetricsPtrOutput
	ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(context.Context) ManagedClusterAzureMonitorProfileMetricsPtrOutput
}

type managedClusterAzureMonitorProfileMetricsPtrType ManagedClusterAzureMonitorProfileMetricsArgs

func ManagedClusterAzureMonitorProfileMetricsPtr(v *ManagedClusterAzureMonitorProfileMetricsArgs) ManagedClusterAzureMonitorProfileMetricsPtrInput {
	return (*managedClusterAzureMonitorProfileMetricsPtrType)(v)
}

func (*managedClusterAzureMonitorProfileMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileMetrics)(nil)).Elem()
}

func (i *managedClusterAzureMonitorProfileMetricsPtrType) ToManagedClusterAzureMonitorProfileMetricsPtrOutput() ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return i.ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(context.Background())
}

func (i *managedClusterAzureMonitorProfileMetricsPtrType) ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterAzureMonitorProfileMetricsPtrOutput)
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
type ManagedClusterAzureMonitorProfileMetricsOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileMetrics)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileMetricsOutput) ToManagedClusterAzureMonitorProfileMetricsOutput() ManagedClusterAzureMonitorProfileMetricsOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsOutput) ToManagedClusterAzureMonitorProfileMetricsOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsOutput) ToManagedClusterAzureMonitorProfileMetricsPtrOutput() ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return o.ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(context.Background())
}

func (o ManagedClusterAzureMonitorProfileMetricsOutput) ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterAzureMonitorProfileMetrics) *ManagedClusterAzureMonitorProfileMetrics {
		return &v
	}).(ManagedClusterAzureMonitorProfileMetricsPtrOutput)
}

// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
func (o ManagedClusterAzureMonitorProfileMetricsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileMetrics) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
func (o ManagedClusterAzureMonitorProfileMetricsOutput) KubeStateMetrics() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileMetrics) *ManagedClusterAzureMonitorProfileKubeStateMetrics {
		return v.KubeStateMetrics
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput)
}

type ManagedClusterAzureMonitorProfileMetricsPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileMetrics)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileMetricsPtrOutput) ToManagedClusterAzureMonitorProfileMetricsPtrOutput() ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsPtrOutput) ToManagedClusterAzureMonitorProfileMetricsPtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsPtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsPtrOutput) Elem() ManagedClusterAzureMonitorProfileMetricsOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileMetrics) ManagedClusterAzureMonitorProfileMetrics {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAzureMonitorProfileMetrics
		return ret
	}).(ManagedClusterAzureMonitorProfileMetricsOutput)
}

// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
func (o ManagedClusterAzureMonitorProfileMetricsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileMetrics) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
func (o ManagedClusterAzureMonitorProfileMetricsPtrOutput) KubeStateMetrics() ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileMetrics) *ManagedClusterAzureMonitorProfileKubeStateMetrics {
		if v == nil {
			return nil
		}
		return v.KubeStateMetrics
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput)
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
type ManagedClusterAzureMonitorProfileMetricsResponse struct {
	// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
	Enabled bool `pulumi:"enabled"`
	// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
	KubeStateMetrics *ManagedClusterAzureMonitorProfileKubeStateMetricsResponse `pulumi:"kubeStateMetrics"`
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
type ManagedClusterAzureMonitorProfileMetricsResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileMetricsResponse)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileMetricsResponseOutput) ToManagedClusterAzureMonitorProfileMetricsResponseOutput() ManagedClusterAzureMonitorProfileMetricsResponseOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsResponseOutput) ToManagedClusterAzureMonitorProfileMetricsResponseOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsResponseOutput {
	return o
}

// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
func (o ManagedClusterAzureMonitorProfileMetricsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileMetricsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
func (o ManagedClusterAzureMonitorProfileMetricsResponseOutput) KubeStateMetrics() ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileMetricsResponse) *ManagedClusterAzureMonitorProfileKubeStateMetricsResponse {
		return v.KubeStateMetrics
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput)
}

type ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileMetricsResponse)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput) ToManagedClusterAzureMonitorProfileMetricsResponsePtrOutput() ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput) ToManagedClusterAzureMonitorProfileMetricsResponsePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput) Elem() ManagedClusterAzureMonitorProfileMetricsResponseOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileMetricsResponse) ManagedClusterAzureMonitorProfileMetricsResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAzureMonitorProfileMetricsResponse
		return ret
	}).(ManagedClusterAzureMonitorProfileMetricsResponseOutput)
}

// Whether to enable or disable the Azure Managed Prometheus addon for Prometheus monitoring. See aka.ms/AzureManagedPrometheus-aks-enable for details on enabling and disabling.
func (o ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileMetricsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Kube State Metrics profile for the Azure Managed Prometheus addon. These optional settings are for the kube-state-metrics pod that is deployed with the addon. See aka.ms/AzureManagedPrometheus-optional-parameters for details.
func (o ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput) KubeStateMetrics() ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileMetricsResponse) *ManagedClusterAzureMonitorProfileKubeStateMetricsResponse {
		if v == nil {
			return nil
		}
		return v.KubeStateMetrics
	}).(ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput)
}

// Azure Monitor addon profiles for monitoring the managed cluster.
type ManagedClusterAzureMonitorProfileResponse struct {
	// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
	Metrics *ManagedClusterAzureMonitorProfileMetricsResponse `pulumi:"metrics"`
}

// Azure Monitor addon profiles for monitoring the managed cluster.
type ManagedClusterAzureMonitorProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterAzureMonitorProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileResponseOutput) ToManagedClusterAzureMonitorProfileResponseOutput() ManagedClusterAzureMonitorProfileResponseOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileResponseOutput) ToManagedClusterAzureMonitorProfileResponseOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileResponseOutput {
	return o
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
func (o ManagedClusterAzureMonitorProfileResponseOutput) Metrics() ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterAzureMonitorProfileResponse) *ManagedClusterAzureMonitorProfileMetricsResponse {
		return v.Metrics
	}).(ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput)
}

type ManagedClusterAzureMonitorProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterAzureMonitorProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterAzureMonitorProfileResponse)(nil)).Elem()
}

func (o ManagedClusterAzureMonitorProfileResponsePtrOutput) ToManagedClusterAzureMonitorProfileResponsePtrOutput() ManagedClusterAzureMonitorProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileResponsePtrOutput) ToManagedClusterAzureMonitorProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterAzureMonitorProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterAzureMonitorProfileResponsePtrOutput) Elem() ManagedClusterAzureMonitorProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileResponse) ManagedClusterAzureMonitorProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterAzureMonitorProfileResponse
		return ret
	}).(ManagedClusterAzureMonitorProfileResponseOutput)
}

// Metrics profile for the Azure Monitor managed service for Prometheus addon. Collect out-of-the-box Kubernetes infrastructure metrics to send to an Azure Monitor Workspace and configure additional scraping for custom targets. See aka.ms/AzureManagedPrometheus for an overview.
func (o ManagedClusterAzureMonitorProfileResponsePtrOutput) Metrics() ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterAzureMonitorProfileResponse) *ManagedClusterAzureMonitorProfileMetricsResponse {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput)
}

// The cost analysis configuration for the cluster
type ManagedClusterCostAnalysis struct {
	// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterCostAnalysisInput is an input type that accepts ManagedClusterCostAnalysisArgs and ManagedClusterCostAnalysisOutput values.
// You can construct a concrete instance of `ManagedClusterCostAnalysisInput` via:
//
//	ManagedClusterCostAnalysisArgs{...}
type ManagedClusterCostAnalysisInput interface {
	pulumi.Input

	ToManagedClusterCostAnalysisOutput() ManagedClusterCostAnalysisOutput
	ToManagedClusterCostAnalysisOutputWithContext(context.Context) ManagedClusterCostAnalysisOutput
}

// The cost analysis configuration for the cluster
type ManagedClusterCostAnalysisArgs struct {
	// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterCostAnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterCostAnalysis)(nil)).Elem()
}

func (i ManagedClusterCostAnalysisArgs) ToManagedClusterCostAnalysisOutput() ManagedClusterCostAnalysisOutput {
	return i.ToManagedClusterCostAnalysisOutputWithContext(context.Background())
}

func (i ManagedClusterCostAnalysisArgs) ToManagedClusterCostAnalysisOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterCostAnalysisOutput)
}

func (i ManagedClusterCostAnalysisArgs) ToManagedClusterCostAnalysisPtrOutput() ManagedClusterCostAnalysisPtrOutput {
	return i.ToManagedClusterCostAnalysisPtrOutputWithContext(context.Background())
}

func (i ManagedClusterCostAnalysisArgs) ToManagedClusterCostAnalysisPtrOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterCostAnalysisOutput).ToManagedClusterCostAnalysisPtrOutputWithContext(ctx)
}

// ManagedClusterCostAnalysisPtrInput is an input type that accepts ManagedClusterCostAnalysisArgs, ManagedClusterCostAnalysisPtr and ManagedClusterCostAnalysisPtrOutput values.
// You can construct a concrete instance of `ManagedClusterCostAnalysisPtrInput` via:
//
//	        ManagedClusterCostAnalysisArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterCostAnalysisPtrInput interface {
	pulumi.Input

	ToManagedClusterCostAnalysisPtrOutput() ManagedClusterCostAnalysisPtrOutput
	ToManagedClusterCostAnalysisPtrOutputWithContext(context.Context) ManagedClusterCostAnalysisPtrOutput
}

type managedClusterCostAnalysisPtrType ManagedClusterCostAnalysisArgs

func ManagedClusterCostAnalysisPtr(v *ManagedClusterCostAnalysisArgs) ManagedClusterCostAnalysisPtrInput {
	return (*managedClusterCostAnalysisPtrType)(v)
}

func (*managedClusterCostAnalysisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterCostAnalysis)(nil)).Elem()
}

func (i *managedClusterCostAnalysisPtrType) ToManagedClusterCostAnalysisPtrOutput() ManagedClusterCostAnalysisPtrOutput {
	return i.ToManagedClusterCostAnalysisPtrOutputWithContext(context.Background())
}

func (i *managedClusterCostAnalysisPtrType) ToManagedClusterCostAnalysisPtrOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterCostAnalysisPtrOutput)
}

// The cost analysis configuration for the cluster
type ManagedClusterCostAnalysisOutput struct{ *pulumi.OutputState }

func (ManagedClusterCostAnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterCostAnalysis)(nil)).Elem()
}

func (o ManagedClusterCostAnalysisOutput) ToManagedClusterCostAnalysisOutput() ManagedClusterCostAnalysisOutput {
	return o
}

func (o ManagedClusterCostAnalysisOutput) ToManagedClusterCostAnalysisOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisOutput {
	return o
}

func (o ManagedClusterCostAnalysisOutput) ToManagedClusterCostAnalysisPtrOutput() ManagedClusterCostAnalysisPtrOutput {
	return o.ToManagedClusterCostAnalysisPtrOutputWithContext(context.Background())
}

func (o ManagedClusterCostAnalysisOutput) ToManagedClusterCostAnalysisPtrOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterCostAnalysis) *ManagedClusterCostAnalysis {
		return &v
	}).(ManagedClusterCostAnalysisPtrOutput)
}

// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
func (o ManagedClusterCostAnalysisOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterCostAnalysis) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterCostAnalysisPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterCostAnalysisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterCostAnalysis)(nil)).Elem()
}

func (o ManagedClusterCostAnalysisPtrOutput) ToManagedClusterCostAnalysisPtrOutput() ManagedClusterCostAnalysisPtrOutput {
	return o
}

func (o ManagedClusterCostAnalysisPtrOutput) ToManagedClusterCostAnalysisPtrOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisPtrOutput {
	return o
}

func (o ManagedClusterCostAnalysisPtrOutput) Elem() ManagedClusterCostAnalysisOutput {
	return o.ApplyT(func(v *ManagedClusterCostAnalysis) ManagedClusterCostAnalysis {
		if v != nil {
			return *v
		}
		var ret ManagedClusterCostAnalysis
		return ret
	}).(ManagedClusterCostAnalysisOutput)
}

// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
func (o ManagedClusterCostAnalysisPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterCostAnalysis) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The cost analysis configuration for the cluster
type ManagedClusterCostAnalysisResponse struct {
	// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
	Enabled *bool `pulumi:"enabled"`
}

// The cost analysis configuration for the cluster
type ManagedClusterCostAnalysisResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterCostAnalysisResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterCostAnalysisResponse)(nil)).Elem()
}

func (o ManagedClusterCostAnalysisResponseOutput) ToManagedClusterCostAnalysisResponseOutput() ManagedClusterCostAnalysisResponseOutput {
	return o
}

func (o ManagedClusterCostAnalysisResponseOutput) ToManagedClusterCostAnalysisResponseOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisResponseOutput {
	return o
}

// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
func (o ManagedClusterCostAnalysisResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterCostAnalysisResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterCostAnalysisResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterCostAnalysisResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterCostAnalysisResponse)(nil)).Elem()
}

func (o ManagedClusterCostAnalysisResponsePtrOutput) ToManagedClusterCostAnalysisResponsePtrOutput() ManagedClusterCostAnalysisResponsePtrOutput {
	return o
}

func (o ManagedClusterCostAnalysisResponsePtrOutput) ToManagedClusterCostAnalysisResponsePtrOutputWithContext(ctx context.Context) ManagedClusterCostAnalysisResponsePtrOutput {
	return o
}

func (o ManagedClusterCostAnalysisResponsePtrOutput) Elem() ManagedClusterCostAnalysisResponseOutput {
	return o.ApplyT(func(v *ManagedClusterCostAnalysisResponse) ManagedClusterCostAnalysisResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterCostAnalysisResponse
		return ret
	}).(ManagedClusterCostAnalysisResponseOutput)
}

// The Managed Cluster sku.tier must be set to 'Standard' or 'Premium' to enable this feature. Enabling this will add Kubernetes Namespace and Deployment details to the Cost Analysis views in the Azure portal. If not specified, the default is false. For more information see aka.ms/aks/docs/cost-analysis.
func (o ManagedClusterCostAnalysisResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterCostAnalysisResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster HTTP proxy configuration.
type ManagedClusterHTTPProxyConfig struct {
	// The HTTP proxy server endpoint to use.
	HttpProxy *string `pulumi:"httpProxy"`
	// The HTTPS proxy server endpoint to use.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The endpoints that should not go through proxy.
	NoProxy []string `pulumi:"noProxy"`
	// Alternative CA cert to use for connecting to proxy servers.
	TrustedCa *string `pulumi:"trustedCa"`
}

// ManagedClusterHTTPProxyConfigInput is an input type that accepts ManagedClusterHTTPProxyConfigArgs and ManagedClusterHTTPProxyConfigOutput values.
// You can construct a concrete instance of `ManagedClusterHTTPProxyConfigInput` via:
//
//	ManagedClusterHTTPProxyConfigArgs{...}
type ManagedClusterHTTPProxyConfigInput interface {
	pulumi.Input

	ToManagedClusterHTTPProxyConfigOutput() ManagedClusterHTTPProxyConfigOutput
	ToManagedClusterHTTPProxyConfigOutputWithContext(context.Context) ManagedClusterHTTPProxyConfigOutput
}

// Cluster HTTP proxy configuration.
type ManagedClusterHTTPProxyConfigArgs struct {
	// The HTTP proxy server endpoint to use.
	HttpProxy pulumi.StringPtrInput `pulumi:"httpProxy"`
	// The HTTPS proxy server endpoint to use.
	HttpsProxy pulumi.StringPtrInput `pulumi:"httpsProxy"`
	// The endpoints that should not go through proxy.
	NoProxy pulumi.StringArrayInput `pulumi:"noProxy"`
	// Alternative CA cert to use for connecting to proxy servers.
	TrustedCa pulumi.StringPtrInput `pulumi:"trustedCa"`
}

func (ManagedClusterHTTPProxyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterHTTPProxyConfig)(nil)).Elem()
}

func (i ManagedClusterHTTPProxyConfigArgs) ToManagedClusterHTTPProxyConfigOutput() ManagedClusterHTTPProxyConfigOutput {
	return i.ToManagedClusterHTTPProxyConfigOutputWithContext(context.Background())
}

func (i ManagedClusterHTTPProxyConfigArgs) ToManagedClusterHTTPProxyConfigOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterHTTPProxyConfigOutput)
}

func (i ManagedClusterHTTPProxyConfigArgs) ToManagedClusterHTTPProxyConfigPtrOutput() ManagedClusterHTTPProxyConfigPtrOutput {
	return i.ToManagedClusterHTTPProxyConfigPtrOutputWithContext(context.Background())
}

func (i ManagedClusterHTTPProxyConfigArgs) ToManagedClusterHTTPProxyConfigPtrOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterHTTPProxyConfigOutput).ToManagedClusterHTTPProxyConfigPtrOutputWithContext(ctx)
}

// ManagedClusterHTTPProxyConfigPtrInput is an input type that accepts ManagedClusterHTTPProxyConfigArgs, ManagedClusterHTTPProxyConfigPtr and ManagedClusterHTTPProxyConfigPtrOutput values.
// You can construct a concrete instance of `ManagedClusterHTTPProxyConfigPtrInput` via:
//
//	        ManagedClusterHTTPProxyConfigArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterHTTPProxyConfigPtrInput interface {
	pulumi.Input

	ToManagedClusterHTTPProxyConfigPtrOutput() ManagedClusterHTTPProxyConfigPtrOutput
	ToManagedClusterHTTPProxyConfigPtrOutputWithContext(context.Context) ManagedClusterHTTPProxyConfigPtrOutput
}

type managedClusterHTTPProxyConfigPtrType ManagedClusterHTTPProxyConfigArgs

func ManagedClusterHTTPProxyConfigPtr(v *ManagedClusterHTTPProxyConfigArgs) ManagedClusterHTTPProxyConfigPtrInput {
	return (*managedClusterHTTPProxyConfigPtrType)(v)
}

func (*managedClusterHTTPProxyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterHTTPProxyConfig)(nil)).Elem()
}

func (i *managedClusterHTTPProxyConfigPtrType) ToManagedClusterHTTPProxyConfigPtrOutput() ManagedClusterHTTPProxyConfigPtrOutput {
	return i.ToManagedClusterHTTPProxyConfigPtrOutputWithContext(context.Background())
}

func (i *managedClusterHTTPProxyConfigPtrType) ToManagedClusterHTTPProxyConfigPtrOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterHTTPProxyConfigPtrOutput)
}

// Cluster HTTP proxy configuration.
type ManagedClusterHTTPProxyConfigOutput struct{ *pulumi.OutputState }

func (ManagedClusterHTTPProxyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterHTTPProxyConfig)(nil)).Elem()
}

func (o ManagedClusterHTTPProxyConfigOutput) ToManagedClusterHTTPProxyConfigOutput() ManagedClusterHTTPProxyConfigOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigOutput) ToManagedClusterHTTPProxyConfigOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigOutput) ToManagedClusterHTTPProxyConfigPtrOutput() ManagedClusterHTTPProxyConfigPtrOutput {
	return o.ToManagedClusterHTTPProxyConfigPtrOutputWithContext(context.Background())
}

func (o ManagedClusterHTTPProxyConfigOutput) ToManagedClusterHTTPProxyConfigPtrOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterHTTPProxyConfig) *ManagedClusterHTTPProxyConfig {
		return &v
	}).(ManagedClusterHTTPProxyConfigPtrOutput)
}

// The HTTP proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfig) *string { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfig) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o ManagedClusterHTTPProxyConfigOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfig) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o ManagedClusterHTTPProxyConfigOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfig) *string { return v.TrustedCa }).(pulumi.StringPtrOutput)
}

type ManagedClusterHTTPProxyConfigPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterHTTPProxyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterHTTPProxyConfig)(nil)).Elem()
}

func (o ManagedClusterHTTPProxyConfigPtrOutput) ToManagedClusterHTTPProxyConfigPtrOutput() ManagedClusterHTTPProxyConfigPtrOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigPtrOutput) ToManagedClusterHTTPProxyConfigPtrOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigPtrOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigPtrOutput) Elem() ManagedClusterHTTPProxyConfigOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfig) ManagedClusterHTTPProxyConfig {
		if v != nil {
			return *v
		}
		var ret ManagedClusterHTTPProxyConfig
		return ret
	}).(ManagedClusterHTTPProxyConfigOutput)
}

// The HTTP proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigPtrOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.HttpProxy
	}).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigPtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o ManagedClusterHTTPProxyConfigPtrOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfig) []string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringArrayOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o ManagedClusterHTTPProxyConfigPtrOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.TrustedCa
	}).(pulumi.StringPtrOutput)
}

// Cluster HTTP proxy configuration.
type ManagedClusterHTTPProxyConfigResponse struct {
	// The HTTP proxy server endpoint to use.
	HttpProxy *string `pulumi:"httpProxy"`
	// The HTTPS proxy server endpoint to use.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The endpoints that should not go through proxy.
	NoProxy []string `pulumi:"noProxy"`
	// Alternative CA cert to use for connecting to proxy servers.
	TrustedCa *string `pulumi:"trustedCa"`
}

// Cluster HTTP proxy configuration.
type ManagedClusterHTTPProxyConfigResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterHTTPProxyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterHTTPProxyConfigResponse)(nil)).Elem()
}

func (o ManagedClusterHTTPProxyConfigResponseOutput) ToManagedClusterHTTPProxyConfigResponseOutput() ManagedClusterHTTPProxyConfigResponseOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigResponseOutput) ToManagedClusterHTTPProxyConfigResponseOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigResponseOutput {
	return o
}

// The HTTP proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigResponseOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfigResponse) *string { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigResponseOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfigResponse) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o ManagedClusterHTTPProxyConfigResponseOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfigResponse) []string { return v.NoProxy }).(pulumi.StringArrayOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o ManagedClusterHTTPProxyConfigResponseOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterHTTPProxyConfigResponse) *string { return v.TrustedCa }).(pulumi.StringPtrOutput)
}

type ManagedClusterHTTPProxyConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterHTTPProxyConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterHTTPProxyConfigResponse)(nil)).Elem()
}

func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) ToManagedClusterHTTPProxyConfigResponsePtrOutput() ManagedClusterHTTPProxyConfigResponsePtrOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) ToManagedClusterHTTPProxyConfigResponsePtrOutputWithContext(ctx context.Context) ManagedClusterHTTPProxyConfigResponsePtrOutput {
	return o
}

func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) Elem() ManagedClusterHTTPProxyConfigResponseOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfigResponse) ManagedClusterHTTPProxyConfigResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterHTTPProxyConfigResponse
		return ret
	}).(ManagedClusterHTTPProxyConfigResponseOutput)
}

// The HTTP proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpProxy
	}).(pulumi.StringPtrOutput)
}

// The HTTPS proxy server endpoint to use.
func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

// The endpoints that should not go through proxy.
func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) NoProxy() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringArrayOutput)
}

// Alternative CA cert to use for connecting to proxy servers.
func (o ManagedClusterHTTPProxyConfigResponsePtrOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterHTTPProxyConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrustedCa
	}).(pulumi.StringPtrOutput)
}

// Identity for the managed cluster.
type ManagedClusterIdentity struct {
	// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
	DelegatedResources map[string]DelegatedResource `pulumi:"delegatedResources"`
	// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
	Type *ResourceIdentityType `pulumi:"type"`
	// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedClusterIdentityInput is an input type that accepts ManagedClusterIdentityArgs and ManagedClusterIdentityOutput values.
// You can construct a concrete instance of `ManagedClusterIdentityInput` via:
//
//	ManagedClusterIdentityArgs{...}
type ManagedClusterIdentityInput interface {
	pulumi.Input

	ToManagedClusterIdentityOutput() ManagedClusterIdentityOutput
	ToManagedClusterIdentityOutputWithContext(context.Context) ManagedClusterIdentityOutput
}

// Identity for the managed cluster.
type ManagedClusterIdentityArgs struct {
	// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
	DelegatedResources DelegatedResourceMapInput `pulumi:"delegatedResources"`
	// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIdentity)(nil)).Elem()
}

func (i ManagedClusterIdentityArgs) ToManagedClusterIdentityOutput() ManagedClusterIdentityOutput {
	return i.ToManagedClusterIdentityOutputWithContext(context.Background())
}

func (i ManagedClusterIdentityArgs) ToManagedClusterIdentityOutputWithContext(ctx context.Context) ManagedClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIdentityOutput)
}

func (i ManagedClusterIdentityArgs) ToManagedClusterIdentityPtrOutput() ManagedClusterIdentityPtrOutput {
	return i.ToManagedClusterIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedClusterIdentityArgs) ToManagedClusterIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIdentityOutput).ToManagedClusterIdentityPtrOutputWithContext(ctx)
}

// ManagedClusterIdentityPtrInput is an input type that accepts ManagedClusterIdentityArgs, ManagedClusterIdentityPtr and ManagedClusterIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedClusterIdentityPtrInput` via:
//
//	        ManagedClusterIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterIdentityPtrInput interface {
	pulumi.Input

	ToManagedClusterIdentityPtrOutput() ManagedClusterIdentityPtrOutput
	ToManagedClusterIdentityPtrOutputWithContext(context.Context) ManagedClusterIdentityPtrOutput
}

type managedClusterIdentityPtrType ManagedClusterIdentityArgs

func ManagedClusterIdentityPtr(v *ManagedClusterIdentityArgs) ManagedClusterIdentityPtrInput {
	return (*managedClusterIdentityPtrType)(v)
}

func (*managedClusterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIdentity)(nil)).Elem()
}

func (i *managedClusterIdentityPtrType) ToManagedClusterIdentityPtrOutput() ManagedClusterIdentityPtrOutput {
	return i.ToManagedClusterIdentityPtrOutputWithContext(context.Background())
}

func (i *managedClusterIdentityPtrType) ToManagedClusterIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIdentityPtrOutput)
}

// Identity for the managed cluster.
type ManagedClusterIdentityOutput struct{ *pulumi.OutputState }

func (ManagedClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIdentity)(nil)).Elem()
}

func (o ManagedClusterIdentityOutput) ToManagedClusterIdentityOutput() ManagedClusterIdentityOutput {
	return o
}

func (o ManagedClusterIdentityOutput) ToManagedClusterIdentityOutputWithContext(ctx context.Context) ManagedClusterIdentityOutput {
	return o
}

func (o ManagedClusterIdentityOutput) ToManagedClusterIdentityPtrOutput() ManagedClusterIdentityPtrOutput {
	return o.ToManagedClusterIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedClusterIdentityOutput) ToManagedClusterIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterIdentity) *ManagedClusterIdentity {
		return &v
	}).(ManagedClusterIdentityPtrOutput)
}

// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
func (o ManagedClusterIdentityOutput) DelegatedResources() DelegatedResourceMapOutput {
	return o.ApplyT(func(v ManagedClusterIdentity) map[string]DelegatedResource { return v.DelegatedResources }).(DelegatedResourceMapOutput)
}

// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
func (o ManagedClusterIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v ManagedClusterIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedClusterIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedClusterIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIdentity)(nil)).Elem()
}

func (o ManagedClusterIdentityPtrOutput) ToManagedClusterIdentityPtrOutput() ManagedClusterIdentityPtrOutput {
	return o
}

func (o ManagedClusterIdentityPtrOutput) ToManagedClusterIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterIdentityPtrOutput {
	return o
}

func (o ManagedClusterIdentityPtrOutput) Elem() ManagedClusterIdentityOutput {
	return o.ApplyT(func(v *ManagedClusterIdentity) ManagedClusterIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedClusterIdentity
		return ret
	}).(ManagedClusterIdentityOutput)
}

// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
func (o ManagedClusterIdentityPtrOutput) DelegatedResources() DelegatedResourceMapOutput {
	return o.ApplyT(func(v *ManagedClusterIdentity) map[string]DelegatedResource {
		if v == nil {
			return nil
		}
		return v.DelegatedResources
	}).(DelegatedResourceMapOutput)
}

// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
func (o ManagedClusterIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ManagedClusterIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedClusterIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the managed cluster.
type ManagedClusterIdentityResponse struct {
	// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
	DelegatedResources map[string]DelegatedResourceResponse `pulumi:"delegatedResources"`
	// The principal id of the system assigned identity which is used by master components.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of the system assigned identity which is used by master components.
	TenantId string `pulumi:"tenantId"`
	// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
	Type *string `pulumi:"type"`
	// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]ManagedClusterIdentityResponseUserAssignedIdentities `pulumi:"userAssignedIdentities"`
}

// Identity for the managed cluster.
type ManagedClusterIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIdentityResponse)(nil)).Elem()
}

func (o ManagedClusterIdentityResponseOutput) ToManagedClusterIdentityResponseOutput() ManagedClusterIdentityResponseOutput {
	return o
}

func (o ManagedClusterIdentityResponseOutput) ToManagedClusterIdentityResponseOutputWithContext(ctx context.Context) ManagedClusterIdentityResponseOutput {
	return o
}

// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
func (o ManagedClusterIdentityResponseOutput) DelegatedResources() DelegatedResourceResponseMapOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponse) map[string]DelegatedResourceResponse {
		return v.DelegatedResources
	}).(DelegatedResourceResponseMapOutput)
}

// The principal id of the system assigned identity which is used by master components.
func (o ManagedClusterIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of the system assigned identity which is used by master components.
func (o ManagedClusterIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
func (o ManagedClusterIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedClusterIdentityResponseOutput) UserAssignedIdentities() ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponse) map[string]ManagedClusterIdentityResponseUserAssignedIdentities {
		return v.UserAssignedIdentities
	}).(ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ManagedClusterIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIdentityResponse)(nil)).Elem()
}

func (o ManagedClusterIdentityResponsePtrOutput) ToManagedClusterIdentityResponsePtrOutput() ManagedClusterIdentityResponsePtrOutput {
	return o
}

func (o ManagedClusterIdentityResponsePtrOutput) ToManagedClusterIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedClusterIdentityResponsePtrOutput {
	return o
}

func (o ManagedClusterIdentityResponsePtrOutput) Elem() ManagedClusterIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedClusterIdentityResponse) ManagedClusterIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterIdentityResponse
		return ret
	}).(ManagedClusterIdentityResponseOutput)
}

// The delegated identity resources assigned to this managed cluster. This can only be set by another Azure Resource Provider, and managed cluster only accept one delegated identity resource. Internal use only.
func (o ManagedClusterIdentityResponsePtrOutput) DelegatedResources() DelegatedResourceResponseMapOutput {
	return o.ApplyT(func(v *ManagedClusterIdentityResponse) map[string]DelegatedResourceResponse {
		if v == nil {
			return nil
		}
		return v.DelegatedResources
	}).(DelegatedResourceResponseMapOutput)
}

// The principal id of the system assigned identity which is used by master components.
func (o ManagedClusterIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the system assigned identity which is used by master components.
func (o ManagedClusterIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// For more information see [use managed identities in AKS](https://docs.microsoft.com/azure/aks/use-managed-identity).
func (o ManagedClusterIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The keys must be ARM resource IDs in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ManagedClusterIdentityResponsePtrOutput) UserAssignedIdentities() ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput {
	return o.ApplyT(func(v *ManagedClusterIdentityResponse) map[string]ManagedClusterIdentityResponseUserAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput)
}

type ManagedClusterIdentityResponseUserAssignedIdentities struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

type ManagedClusterIdentityResponseUserAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (ManagedClusterIdentityResponseUserAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ManagedClusterIdentityResponseUserAssignedIdentitiesOutput) ToManagedClusterIdentityResponseUserAssignedIdentitiesOutput() ManagedClusterIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

func (o ManagedClusterIdentityResponseUserAssignedIdentitiesOutput) ToManagedClusterIdentityResponseUserAssignedIdentitiesOutputWithContext(ctx context.Context) ManagedClusterIdentityResponseUserAssignedIdentitiesOutput {
	return o
}

// The client id of user assigned identity.
func (o ManagedClusterIdentityResponseUserAssignedIdentitiesOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponseUserAssignedIdentities) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o ManagedClusterIdentityResponseUserAssignedIdentitiesOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterIdentityResponseUserAssignedIdentities) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput struct{ *pulumi.OutputState }

func (ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ManagedClusterIdentityResponseUserAssignedIdentities)(nil)).Elem()
}

func (o ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput) ToManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput() ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput) ToManagedClusterIdentityResponseUserAssignedIdentitiesMapOutputWithContext(ctx context.Context) ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput {
	return o
}

func (o ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput) MapIndex(k pulumi.StringInput) ManagedClusterIdentityResponseUserAssignedIdentitiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ManagedClusterIdentityResponseUserAssignedIdentities {
		return vs[0].(map[string]ManagedClusterIdentityResponseUserAssignedIdentities)[vs[1].(string)]
	}).(ManagedClusterIdentityResponseUserAssignedIdentitiesOutput)
}

// Ingress profile for the container service cluster.
type ManagedClusterIngressProfile struct {
	// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
	WebAppRouting *ManagedClusterIngressProfileWebAppRouting `pulumi:"webAppRouting"`
}

// ManagedClusterIngressProfileInput is an input type that accepts ManagedClusterIngressProfileArgs and ManagedClusterIngressProfileOutput values.
// You can construct a concrete instance of `ManagedClusterIngressProfileInput` via:
//
//	ManagedClusterIngressProfileArgs{...}
type ManagedClusterIngressProfileInput interface {
	pulumi.Input

	ToManagedClusterIngressProfileOutput() ManagedClusterIngressProfileOutput
	ToManagedClusterIngressProfileOutputWithContext(context.Context) ManagedClusterIngressProfileOutput
}

// Ingress profile for the container service cluster.
type ManagedClusterIngressProfileArgs struct {
	// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
	WebAppRouting ManagedClusterIngressProfileWebAppRoutingPtrInput `pulumi:"webAppRouting"`
}

func (ManagedClusterIngressProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIngressProfile)(nil)).Elem()
}

func (i ManagedClusterIngressProfileArgs) ToManagedClusterIngressProfileOutput() ManagedClusterIngressProfileOutput {
	return i.ToManagedClusterIngressProfileOutputWithContext(context.Background())
}

func (i ManagedClusterIngressProfileArgs) ToManagedClusterIngressProfileOutputWithContext(ctx context.Context) ManagedClusterIngressProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIngressProfileOutput)
}

func (i ManagedClusterIngressProfileArgs) ToManagedClusterIngressProfilePtrOutput() ManagedClusterIngressProfilePtrOutput {
	return i.ToManagedClusterIngressProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterIngressProfileArgs) ToManagedClusterIngressProfilePtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIngressProfileOutput).ToManagedClusterIngressProfilePtrOutputWithContext(ctx)
}

// ManagedClusterIngressProfilePtrInput is an input type that accepts ManagedClusterIngressProfileArgs, ManagedClusterIngressProfilePtr and ManagedClusterIngressProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterIngressProfilePtrInput` via:
//
//	        ManagedClusterIngressProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterIngressProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterIngressProfilePtrOutput() ManagedClusterIngressProfilePtrOutput
	ToManagedClusterIngressProfilePtrOutputWithContext(context.Context) ManagedClusterIngressProfilePtrOutput
}

type managedClusterIngressProfilePtrType ManagedClusterIngressProfileArgs

func ManagedClusterIngressProfilePtr(v *ManagedClusterIngressProfileArgs) ManagedClusterIngressProfilePtrInput {
	return (*managedClusterIngressProfilePtrType)(v)
}

func (*managedClusterIngressProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIngressProfile)(nil)).Elem()
}

func (i *managedClusterIngressProfilePtrType) ToManagedClusterIngressProfilePtrOutput() ManagedClusterIngressProfilePtrOutput {
	return i.ToManagedClusterIngressProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterIngressProfilePtrType) ToManagedClusterIngressProfilePtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIngressProfilePtrOutput)
}

// Ingress profile for the container service cluster.
type ManagedClusterIngressProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIngressProfile)(nil)).Elem()
}

func (o ManagedClusterIngressProfileOutput) ToManagedClusterIngressProfileOutput() ManagedClusterIngressProfileOutput {
	return o
}

func (o ManagedClusterIngressProfileOutput) ToManagedClusterIngressProfileOutputWithContext(ctx context.Context) ManagedClusterIngressProfileOutput {
	return o
}

func (o ManagedClusterIngressProfileOutput) ToManagedClusterIngressProfilePtrOutput() ManagedClusterIngressProfilePtrOutput {
	return o.ToManagedClusterIngressProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterIngressProfileOutput) ToManagedClusterIngressProfilePtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterIngressProfile) *ManagedClusterIngressProfile {
		return &v
	}).(ManagedClusterIngressProfilePtrOutput)
}

// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
func (o ManagedClusterIngressProfileOutput) WebAppRouting() ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfile) *ManagedClusterIngressProfileWebAppRouting {
		return v.WebAppRouting
	}).(ManagedClusterIngressProfileWebAppRoutingPtrOutput)
}

type ManagedClusterIngressProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIngressProfile)(nil)).Elem()
}

func (o ManagedClusterIngressProfilePtrOutput) ToManagedClusterIngressProfilePtrOutput() ManagedClusterIngressProfilePtrOutput {
	return o
}

func (o ManagedClusterIngressProfilePtrOutput) ToManagedClusterIngressProfilePtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfilePtrOutput {
	return o
}

func (o ManagedClusterIngressProfilePtrOutput) Elem() ManagedClusterIngressProfileOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfile) ManagedClusterIngressProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterIngressProfile
		return ret
	}).(ManagedClusterIngressProfileOutput)
}

// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
func (o ManagedClusterIngressProfilePtrOutput) WebAppRouting() ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfile) *ManagedClusterIngressProfileWebAppRouting {
		if v == nil {
			return nil
		}
		return v.WebAppRouting
	}).(ManagedClusterIngressProfileWebAppRoutingPtrOutput)
}

// Ingress profile for the container service cluster.
type ManagedClusterIngressProfileResponse struct {
	// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
	WebAppRouting *ManagedClusterIngressProfileWebAppRoutingResponse `pulumi:"webAppRouting"`
}

// Ingress profile for the container service cluster.
type ManagedClusterIngressProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIngressProfileResponse)(nil)).Elem()
}

func (o ManagedClusterIngressProfileResponseOutput) ToManagedClusterIngressProfileResponseOutput() ManagedClusterIngressProfileResponseOutput {
	return o
}

func (o ManagedClusterIngressProfileResponseOutput) ToManagedClusterIngressProfileResponseOutputWithContext(ctx context.Context) ManagedClusterIngressProfileResponseOutput {
	return o
}

// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
func (o ManagedClusterIngressProfileResponseOutput) WebAppRouting() ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfileResponse) *ManagedClusterIngressProfileWebAppRoutingResponse {
		return v.WebAppRouting
	}).(ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput)
}

type ManagedClusterIngressProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIngressProfileResponse)(nil)).Elem()
}

func (o ManagedClusterIngressProfileResponsePtrOutput) ToManagedClusterIngressProfileResponsePtrOutput() ManagedClusterIngressProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterIngressProfileResponsePtrOutput) ToManagedClusterIngressProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterIngressProfileResponsePtrOutput) Elem() ManagedClusterIngressProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileResponse) ManagedClusterIngressProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterIngressProfileResponse
		return ret
	}).(ManagedClusterIngressProfileResponseOutput)
}

// App Routing settings for the ingress profile. You can find an overview and onboarding guide for this feature at https://learn.microsoft.com/en-us/azure/aks/app-routing?tabs=default%2Cdeploy-app-default.
func (o ManagedClusterIngressProfileResponsePtrOutput) WebAppRouting() ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileResponse) *ManagedClusterIngressProfileWebAppRoutingResponse {
		if v == nil {
			return nil
		}
		return v.WebAppRouting
	}).(ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput)
}

// Application Routing add-on settings for the ingress profile.
type ManagedClusterIngressProfileWebAppRouting struct {
	// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
	DnsZoneResourceIds []string `pulumi:"dnsZoneResourceIds"`
	// Whether to enable the Application Routing add-on.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterIngressProfileWebAppRoutingInput is an input type that accepts ManagedClusterIngressProfileWebAppRoutingArgs and ManagedClusterIngressProfileWebAppRoutingOutput values.
// You can construct a concrete instance of `ManagedClusterIngressProfileWebAppRoutingInput` via:
//
//	ManagedClusterIngressProfileWebAppRoutingArgs{...}
type ManagedClusterIngressProfileWebAppRoutingInput interface {
	pulumi.Input

	ToManagedClusterIngressProfileWebAppRoutingOutput() ManagedClusterIngressProfileWebAppRoutingOutput
	ToManagedClusterIngressProfileWebAppRoutingOutputWithContext(context.Context) ManagedClusterIngressProfileWebAppRoutingOutput
}

// Application Routing add-on settings for the ingress profile.
type ManagedClusterIngressProfileWebAppRoutingArgs struct {
	// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
	DnsZoneResourceIds pulumi.StringArrayInput `pulumi:"dnsZoneResourceIds"`
	// Whether to enable the Application Routing add-on.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterIngressProfileWebAppRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIngressProfileWebAppRouting)(nil)).Elem()
}

func (i ManagedClusterIngressProfileWebAppRoutingArgs) ToManagedClusterIngressProfileWebAppRoutingOutput() ManagedClusterIngressProfileWebAppRoutingOutput {
	return i.ToManagedClusterIngressProfileWebAppRoutingOutputWithContext(context.Background())
}

func (i ManagedClusterIngressProfileWebAppRoutingArgs) ToManagedClusterIngressProfileWebAppRoutingOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIngressProfileWebAppRoutingOutput)
}

func (i ManagedClusterIngressProfileWebAppRoutingArgs) ToManagedClusterIngressProfileWebAppRoutingPtrOutput() ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return i.ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(context.Background())
}

func (i ManagedClusterIngressProfileWebAppRoutingArgs) ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIngressProfileWebAppRoutingOutput).ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(ctx)
}

// ManagedClusterIngressProfileWebAppRoutingPtrInput is an input type that accepts ManagedClusterIngressProfileWebAppRoutingArgs, ManagedClusterIngressProfileWebAppRoutingPtr and ManagedClusterIngressProfileWebAppRoutingPtrOutput values.
// You can construct a concrete instance of `ManagedClusterIngressProfileWebAppRoutingPtrInput` via:
//
//	        ManagedClusterIngressProfileWebAppRoutingArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterIngressProfileWebAppRoutingPtrInput interface {
	pulumi.Input

	ToManagedClusterIngressProfileWebAppRoutingPtrOutput() ManagedClusterIngressProfileWebAppRoutingPtrOutput
	ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(context.Context) ManagedClusterIngressProfileWebAppRoutingPtrOutput
}

type managedClusterIngressProfileWebAppRoutingPtrType ManagedClusterIngressProfileWebAppRoutingArgs

func ManagedClusterIngressProfileWebAppRoutingPtr(v *ManagedClusterIngressProfileWebAppRoutingArgs) ManagedClusterIngressProfileWebAppRoutingPtrInput {
	return (*managedClusterIngressProfileWebAppRoutingPtrType)(v)
}

func (*managedClusterIngressProfileWebAppRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIngressProfileWebAppRouting)(nil)).Elem()
}

func (i *managedClusterIngressProfileWebAppRoutingPtrType) ToManagedClusterIngressProfileWebAppRoutingPtrOutput() ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return i.ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(context.Background())
}

func (i *managedClusterIngressProfileWebAppRoutingPtrType) ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterIngressProfileWebAppRoutingPtrOutput)
}

// Application Routing add-on settings for the ingress profile.
type ManagedClusterIngressProfileWebAppRoutingOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileWebAppRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIngressProfileWebAppRouting)(nil)).Elem()
}

func (o ManagedClusterIngressProfileWebAppRoutingOutput) ToManagedClusterIngressProfileWebAppRoutingOutput() ManagedClusterIngressProfileWebAppRoutingOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingOutput) ToManagedClusterIngressProfileWebAppRoutingOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingOutput) ToManagedClusterIngressProfileWebAppRoutingPtrOutput() ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return o.ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(context.Background())
}

func (o ManagedClusterIngressProfileWebAppRoutingOutput) ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterIngressProfileWebAppRouting) *ManagedClusterIngressProfileWebAppRouting {
		return &v
	}).(ManagedClusterIngressProfileWebAppRoutingPtrOutput)
}

// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
func (o ManagedClusterIngressProfileWebAppRoutingOutput) DnsZoneResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfileWebAppRouting) []string { return v.DnsZoneResourceIds }).(pulumi.StringArrayOutput)
}

// Whether to enable the Application Routing add-on.
func (o ManagedClusterIngressProfileWebAppRoutingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfileWebAppRouting) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterIngressProfileWebAppRoutingPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileWebAppRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIngressProfileWebAppRouting)(nil)).Elem()
}

func (o ManagedClusterIngressProfileWebAppRoutingPtrOutput) ToManagedClusterIngressProfileWebAppRoutingPtrOutput() ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingPtrOutput) ToManagedClusterIngressProfileWebAppRoutingPtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingPtrOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingPtrOutput) Elem() ManagedClusterIngressProfileWebAppRoutingOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRouting) ManagedClusterIngressProfileWebAppRouting {
		if v != nil {
			return *v
		}
		var ret ManagedClusterIngressProfileWebAppRouting
		return ret
	}).(ManagedClusterIngressProfileWebAppRoutingOutput)
}

// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
func (o ManagedClusterIngressProfileWebAppRoutingPtrOutput) DnsZoneResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRouting) []string {
		if v == nil {
			return nil
		}
		return v.DnsZoneResourceIds
	}).(pulumi.StringArrayOutput)
}

// Whether to enable the Application Routing add-on.
func (o ManagedClusterIngressProfileWebAppRoutingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRouting) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Application Routing add-on settings for the ingress profile.
type ManagedClusterIngressProfileWebAppRoutingResponse struct {
	// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
	DnsZoneResourceIds []string `pulumi:"dnsZoneResourceIds"`
	// Whether to enable the Application Routing add-on.
	Enabled *bool `pulumi:"enabled"`
	// Managed identity of the Application Routing add-on. This is the identity that should be granted permissions, for example, to manage the associated Azure DNS resource and get certificates from Azure Key Vault. See [this overview of the add-on](https://learn.microsoft.com/en-us/azure/aks/web-app-routing?tabs=with-osm) for more instructions.
	Identity UserAssignedIdentityResponse `pulumi:"identity"`
}

// Application Routing add-on settings for the ingress profile.
type ManagedClusterIngressProfileWebAppRoutingResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileWebAppRoutingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterIngressProfileWebAppRoutingResponse)(nil)).Elem()
}

func (o ManagedClusterIngressProfileWebAppRoutingResponseOutput) ToManagedClusterIngressProfileWebAppRoutingResponseOutput() ManagedClusterIngressProfileWebAppRoutingResponseOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingResponseOutput) ToManagedClusterIngressProfileWebAppRoutingResponseOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingResponseOutput {
	return o
}

// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
func (o ManagedClusterIngressProfileWebAppRoutingResponseOutput) DnsZoneResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfileWebAppRoutingResponse) []string { return v.DnsZoneResourceIds }).(pulumi.StringArrayOutput)
}

// Whether to enable the Application Routing add-on.
func (o ManagedClusterIngressProfileWebAppRoutingResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfileWebAppRoutingResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Managed identity of the Application Routing add-on. This is the identity that should be granted permissions, for example, to manage the associated Azure DNS resource and get certificates from Azure Key Vault. See [this overview of the add-on](https://learn.microsoft.com/en-us/azure/aks/web-app-routing?tabs=with-osm) for more instructions.
func (o ManagedClusterIngressProfileWebAppRoutingResponseOutput) Identity() UserAssignedIdentityResponseOutput {
	return o.ApplyT(func(v ManagedClusterIngressProfileWebAppRoutingResponse) UserAssignedIdentityResponse {
		return v.Identity
	}).(UserAssignedIdentityResponseOutput)
}

type ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterIngressProfileWebAppRoutingResponse)(nil)).Elem()
}

func (o ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) ToManagedClusterIngressProfileWebAppRoutingResponsePtrOutput() ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) ToManagedClusterIngressProfileWebAppRoutingResponsePtrOutputWithContext(ctx context.Context) ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput {
	return o
}

func (o ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) Elem() ManagedClusterIngressProfileWebAppRoutingResponseOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRoutingResponse) ManagedClusterIngressProfileWebAppRoutingResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterIngressProfileWebAppRoutingResponse
		return ret
	}).(ManagedClusterIngressProfileWebAppRoutingResponseOutput)
}

// Resource IDs of the DNS zones to be associated with the Application Routing add-on. Used only when Application Routing add-on is enabled. Public and private DNS zones can be in different resource groups, but all public DNS zones must be in the same resource group and all private DNS zones must be in the same resource group.
func (o ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) DnsZoneResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRoutingResponse) []string {
		if v == nil {
			return nil
		}
		return v.DnsZoneResourceIds
	}).(pulumi.StringArrayOutput)
}

// Whether to enable the Application Routing add-on.
func (o ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRoutingResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Managed identity of the Application Routing add-on. This is the identity that should be granted permissions, for example, to manage the associated Azure DNS resource and get certificates from Azure Key Vault. See [this overview of the add-on](https://learn.microsoft.com/en-us/azure/aks/web-app-routing?tabs=with-osm) for more instructions.
func (o ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput) Identity() UserAssignedIdentityResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterIngressProfileWebAppRoutingResponse) *UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return &v.Identity
	}).(UserAssignedIdentityResponsePtrOutput)
}

// Profile of the managed cluster load balancer.
type ManagedClusterLoadBalancerProfile struct {
	// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
	AllocatedOutboundPorts *int `pulumi:"allocatedOutboundPorts"`
	// The type of the managed inbound Load Balancer BackendPool.
	BackendPoolType *string `pulumi:"backendPoolType"`
	// The effective outbound IP resources of the cluster load balancer.
	EffectiveOutboundIPs []ResourceReference `pulumi:"effectiveOutboundIPs"`
	// Enable multiple standard load balancers per AKS cluster or not.
	EnableMultipleStandardLoadBalancers *bool `pulumi:"enableMultipleStandardLoadBalancers"`
	// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// Desired managed outbound IPs for the cluster load balancer.
	ManagedOutboundIPs *ManagedClusterLoadBalancerProfileManagedOutboundIPs `pulumi:"managedOutboundIPs"`
	// Desired outbound IP Prefix resources for the cluster load balancer.
	OutboundIPPrefixes *ManagedClusterLoadBalancerProfileOutboundIPPrefixes `pulumi:"outboundIPPrefixes"`
	// Desired outbound IP resources for the cluster load balancer.
	OutboundIPs *ManagedClusterLoadBalancerProfileOutboundIPs `pulumi:"outboundIPs"`
}

// Defaults sets the appropriate defaults for ManagedClusterLoadBalancerProfile
func (val *ManagedClusterLoadBalancerProfile) Defaults() *ManagedClusterLoadBalancerProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllocatedOutboundPorts == nil {
		allocatedOutboundPorts_ := 0
		tmp.AllocatedOutboundPorts = &allocatedOutboundPorts_
	}
	if tmp.BackendPoolType == nil {
		backendPoolType_ := "NodeIPConfiguration"
		tmp.BackendPoolType = &backendPoolType_
	}
	if tmp.IdleTimeoutInMinutes == nil {
		idleTimeoutInMinutes_ := 30
		tmp.IdleTimeoutInMinutes = &idleTimeoutInMinutes_
	}
	tmp.ManagedOutboundIPs = tmp.ManagedOutboundIPs.Defaults()

	return &tmp
}

// ManagedClusterLoadBalancerProfileInput is an input type that accepts ManagedClusterLoadBalancerProfileArgs and ManagedClusterLoadBalancerProfileOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileInput` via:
//
//	ManagedClusterLoadBalancerProfileArgs{...}
type ManagedClusterLoadBalancerProfileInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileOutput() ManagedClusterLoadBalancerProfileOutput
	ToManagedClusterLoadBalancerProfileOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileOutput
}

// Profile of the managed cluster load balancer.
type ManagedClusterLoadBalancerProfileArgs struct {
	// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
	AllocatedOutboundPorts pulumi.IntPtrInput `pulumi:"allocatedOutboundPorts"`
	// The type of the managed inbound Load Balancer BackendPool.
	BackendPoolType pulumi.StringPtrInput `pulumi:"backendPoolType"`
	// The effective outbound IP resources of the cluster load balancer.
	EffectiveOutboundIPs ResourceReferenceArrayInput `pulumi:"effectiveOutboundIPs"`
	// Enable multiple standard load balancers per AKS cluster or not.
	EnableMultipleStandardLoadBalancers pulumi.BoolPtrInput `pulumi:"enableMultipleStandardLoadBalancers"`
	// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
	IdleTimeoutInMinutes pulumi.IntPtrInput `pulumi:"idleTimeoutInMinutes"`
	// Desired managed outbound IPs for the cluster load balancer.
	ManagedOutboundIPs ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrInput `pulumi:"managedOutboundIPs"`
	// Desired outbound IP Prefix resources for the cluster load balancer.
	OutboundIPPrefixes ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrInput `pulumi:"outboundIPPrefixes"`
	// Desired outbound IP resources for the cluster load balancer.
	OutboundIPs ManagedClusterLoadBalancerProfileOutboundIPsPtrInput `pulumi:"outboundIPs"`
}

// Defaults sets the appropriate defaults for ManagedClusterLoadBalancerProfileArgs
func (val *ManagedClusterLoadBalancerProfileArgs) Defaults() *ManagedClusterLoadBalancerProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllocatedOutboundPorts == nil {
		tmp.AllocatedOutboundPorts = pulumi.IntPtr(0)
	}
	if tmp.BackendPoolType == nil {
		tmp.BackendPoolType = pulumi.StringPtr("NodeIPConfiguration")
	}
	if tmp.IdleTimeoutInMinutes == nil {
		tmp.IdleTimeoutInMinutes = pulumi.IntPtr(30)
	}

	return &tmp
}
func (ManagedClusterLoadBalancerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfile)(nil)).Elem()
}

func (i ManagedClusterLoadBalancerProfileArgs) ToManagedClusterLoadBalancerProfileOutput() ManagedClusterLoadBalancerProfileOutput {
	return i.ToManagedClusterLoadBalancerProfileOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileArgs) ToManagedClusterLoadBalancerProfileOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutput)
}

func (i ManagedClusterLoadBalancerProfileArgs) ToManagedClusterLoadBalancerProfilePtrOutput() ManagedClusterLoadBalancerProfilePtrOutput {
	return i.ToManagedClusterLoadBalancerProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileArgs) ToManagedClusterLoadBalancerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutput).ToManagedClusterLoadBalancerProfilePtrOutputWithContext(ctx)
}

// ManagedClusterLoadBalancerProfilePtrInput is an input type that accepts ManagedClusterLoadBalancerProfileArgs, ManagedClusterLoadBalancerProfilePtr and ManagedClusterLoadBalancerProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfilePtrInput` via:
//
//	        ManagedClusterLoadBalancerProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterLoadBalancerProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfilePtrOutput() ManagedClusterLoadBalancerProfilePtrOutput
	ToManagedClusterLoadBalancerProfilePtrOutputWithContext(context.Context) ManagedClusterLoadBalancerProfilePtrOutput
}

type managedClusterLoadBalancerProfilePtrType ManagedClusterLoadBalancerProfileArgs

func ManagedClusterLoadBalancerProfilePtr(v *ManagedClusterLoadBalancerProfileArgs) ManagedClusterLoadBalancerProfilePtrInput {
	return (*managedClusterLoadBalancerProfilePtrType)(v)
}

func (*managedClusterLoadBalancerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfile)(nil)).Elem()
}

func (i *managedClusterLoadBalancerProfilePtrType) ToManagedClusterLoadBalancerProfilePtrOutput() ManagedClusterLoadBalancerProfilePtrOutput {
	return i.ToManagedClusterLoadBalancerProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterLoadBalancerProfilePtrType) ToManagedClusterLoadBalancerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfilePtrOutput)
}

// Profile of the managed cluster load balancer.
type ManagedClusterLoadBalancerProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfile)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileOutput) ToManagedClusterLoadBalancerProfileOutput() ManagedClusterLoadBalancerProfileOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutput) ToManagedClusterLoadBalancerProfileOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutput) ToManagedClusterLoadBalancerProfilePtrOutput() ManagedClusterLoadBalancerProfilePtrOutput {
	return o.ToManagedClusterLoadBalancerProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterLoadBalancerProfileOutput) ToManagedClusterLoadBalancerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfile {
		return &v
	}).(ManagedClusterLoadBalancerProfilePtrOutput)
}

// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
func (o ManagedClusterLoadBalancerProfileOutput) AllocatedOutboundPorts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *int { return v.AllocatedOutboundPorts }).(pulumi.IntPtrOutput)
}

// The type of the managed inbound Load Balancer BackendPool.
func (o ManagedClusterLoadBalancerProfileOutput) BackendPoolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *string { return v.BackendPoolType }).(pulumi.StringPtrOutput)
}

// The effective outbound IP resources of the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileOutput) EffectiveOutboundIPs() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) []ResourceReference { return v.EffectiveOutboundIPs }).(ResourceReferenceArrayOutput)
}

// Enable multiple standard load balancers per AKS cluster or not.
func (o ManagedClusterLoadBalancerProfileOutput) EnableMultipleStandardLoadBalancers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *bool { return v.EnableMultipleStandardLoadBalancers }).(pulumi.BoolPtrOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
func (o ManagedClusterLoadBalancerProfileOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileOutput) ManagedOutboundIPs() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfileManagedOutboundIPs {
		return v.ManagedOutboundIPs
	}).(ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileOutput) OutboundIPPrefixes() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfileOutboundIPPrefixes {
		return v.OutboundIPPrefixes
	}).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput)
}

// Desired outbound IP resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileOutput) OutboundIPs() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfileOutboundIPs {
		return v.OutboundIPs
	}).(ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput)
}

type ManagedClusterLoadBalancerProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfile)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfilePtrOutput) ToManagedClusterLoadBalancerProfilePtrOutput() ManagedClusterLoadBalancerProfilePtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfilePtrOutput) ToManagedClusterLoadBalancerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfilePtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfilePtrOutput) Elem() ManagedClusterLoadBalancerProfileOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) ManagedClusterLoadBalancerProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfile
		return ret
	}).(ManagedClusterLoadBalancerProfileOutput)
}

// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
func (o ManagedClusterLoadBalancerProfilePtrOutput) AllocatedOutboundPorts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *int {
		if v == nil {
			return nil
		}
		return v.AllocatedOutboundPorts
	}).(pulumi.IntPtrOutput)
}

// The type of the managed inbound Load Balancer BackendPool.
func (o ManagedClusterLoadBalancerProfilePtrOutput) BackendPoolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *string {
		if v == nil {
			return nil
		}
		return v.BackendPoolType
	}).(pulumi.StringPtrOutput)
}

// The effective outbound IP resources of the cluster load balancer.
func (o ManagedClusterLoadBalancerProfilePtrOutput) EffectiveOutboundIPs() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) []ResourceReference {
		if v == nil {
			return nil
		}
		return v.EffectiveOutboundIPs
	}).(ResourceReferenceArrayOutput)
}

// Enable multiple standard load balancers per AKS cluster or not.
func (o ManagedClusterLoadBalancerProfilePtrOutput) EnableMultipleStandardLoadBalancers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMultipleStandardLoadBalancers
	}).(pulumi.BoolPtrOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
func (o ManagedClusterLoadBalancerProfilePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfilePtrOutput) ManagedOutboundIPs() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfileManagedOutboundIPs {
		if v == nil {
			return nil
		}
		return v.ManagedOutboundIPs
	}).(ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfilePtrOutput) OutboundIPPrefixes() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfileOutboundIPPrefixes {
		if v == nil {
			return nil
		}
		return v.OutboundIPPrefixes
	}).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput)
}

// Desired outbound IP resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfilePtrOutput) OutboundIPs() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfile) *ManagedClusterLoadBalancerProfileOutboundIPs {
		if v == nil {
			return nil
		}
		return v.OutboundIPs
	}).(ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
type ManagedClusterLoadBalancerProfileManagedOutboundIPs struct {
	// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
	CountIPv6 *int `pulumi:"countIPv6"`
}

// Defaults sets the appropriate defaults for ManagedClusterLoadBalancerProfileManagedOutboundIPs
func (val *ManagedClusterLoadBalancerProfileManagedOutboundIPs) Defaults() *ManagedClusterLoadBalancerProfileManagedOutboundIPs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.CountIPv6 == nil {
		countIPv6_ := 0
		tmp.CountIPv6 = &countIPv6_
	}
	return &tmp
}

// ManagedClusterLoadBalancerProfileManagedOutboundIPsInput is an input type that accepts ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs and ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileManagedOutboundIPsInput` via:
//
//	ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs{...}
type ManagedClusterLoadBalancerProfileManagedOutboundIPsInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput
	ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput
}

// Desired managed outbound IPs for the cluster load balancer.
type ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs struct {
	// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
	CountIPv6 pulumi.IntPtrInput `pulumi:"countIPv6"`
}

// Defaults sets the appropriate defaults for ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs
func (val *ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) Defaults() *ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		tmp.Count = pulumi.IntPtr(1)
	}
	if tmp.CountIPv6 == nil {
		tmp.CountIPv6 = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileManagedOutboundIPs)(nil)).Elem()
}

func (i ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput {
	return i.ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput)
}

func (i ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return i.ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput).ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(ctx)
}

// ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrInput is an input type that accepts ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs, ManagedClusterLoadBalancerProfileManagedOutboundIPsPtr and ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrInput` via:
//
//	        ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput
	ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput
}

type managedClusterLoadBalancerProfileManagedOutboundIPsPtrType ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs

func ManagedClusterLoadBalancerProfileManagedOutboundIPsPtr(v *ManagedClusterLoadBalancerProfileManagedOutboundIPsArgs) ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrInput {
	return (*managedClusterLoadBalancerProfileManagedOutboundIPsPtrType)(v)
}

func (*managedClusterLoadBalancerProfileManagedOutboundIPsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileManagedOutboundIPs)(nil)).Elem()
}

func (i *managedClusterLoadBalancerProfileManagedOutboundIPsPtrType) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return i.ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(context.Background())
}

func (i *managedClusterLoadBalancerProfileManagedOutboundIPsPtrType) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
type ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileManagedOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) ToManagedClusterLoadBalancerProfileManagedOutboundIPsOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return o.ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(context.Background())
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterLoadBalancerProfileManagedOutboundIPs) *ManagedClusterLoadBalancerProfileManagedOutboundIPs {
		return &v
	}).(ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput)
}

// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileManagedOutboundIPs) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput) CountIPv6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileManagedOutboundIPs) *int { return v.CountIPv6 }).(pulumi.IntPtrOutput)
}

type ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileManagedOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput) Elem() ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileManagedOutboundIPs) ManagedClusterLoadBalancerProfileManagedOutboundIPs {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileManagedOutboundIPs
		return ret
	}).(ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput)
}

// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileManagedOutboundIPs) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
func (o ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput) CountIPv6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileManagedOutboundIPs) *int {
		if v == nil {
			return nil
		}
		return v.CountIPv6
	}).(pulumi.IntPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileOutboundIPPrefixes struct {
	// A list of public IP prefix resources.
	PublicIPPrefixes []ResourceReference `pulumi:"publicIPPrefixes"`
}

// ManagedClusterLoadBalancerProfileOutboundIPPrefixesInput is an input type that accepts ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs and ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileOutboundIPPrefixesInput` via:
//
//	ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs{...}
type ManagedClusterLoadBalancerProfileOutboundIPPrefixesInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput
	ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput
}

// Desired outbound IP Prefix resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs struct {
	// A list of public IP prefix resources.
	PublicIPPrefixes ResourceReferenceArrayInput `pulumi:"publicIPPrefixes"`
}

func (ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileOutboundIPPrefixes)(nil)).Elem()
}

func (i ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput {
	return i.ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput)
}

func (i ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return i.ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput).ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(ctx)
}

// ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrInput is an input type that accepts ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs, ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtr and ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrInput` via:
//
//	        ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput
	ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput
}

type managedClusterLoadBalancerProfileOutboundIPPrefixesPtrType ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs

func ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtr(v *ManagedClusterLoadBalancerProfileOutboundIPPrefixesArgs) ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrInput {
	return (*managedClusterLoadBalancerProfileOutboundIPPrefixesPtrType)(v)
}

func (*managedClusterLoadBalancerProfileOutboundIPPrefixesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileOutboundIPPrefixes)(nil)).Elem()
}

func (i *managedClusterLoadBalancerProfileOutboundIPPrefixesPtrType) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return i.ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(context.Background())
}

func (i *managedClusterLoadBalancerProfileOutboundIPPrefixesPtrType) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileOutboundIPPrefixes)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return o.ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(context.Background())
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterLoadBalancerProfileOutboundIPPrefixes) *ManagedClusterLoadBalancerProfileOutboundIPPrefixes {
		return &v
	}).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput)
}

// A list of public IP prefix resources.
func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput) PublicIPPrefixes() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileOutboundIPPrefixes) []ResourceReference {
		return v.PublicIPPrefixes
	}).(ResourceReferenceArrayOutput)
}

type ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileOutboundIPPrefixes)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput) ToManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput) Elem() ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileOutboundIPPrefixes) ManagedClusterLoadBalancerProfileOutboundIPPrefixes {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileOutboundIPPrefixes
		return ret
	}).(ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput)
}

// A list of public IP prefix resources.
func (o ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput) PublicIPPrefixes() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileOutboundIPPrefixes) []ResourceReference {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefixes
	}).(ResourceReferenceArrayOutput)
}

// Desired outbound IP resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileOutboundIPs struct {
	// A list of public IP resources.
	PublicIPs []ResourceReference `pulumi:"publicIPs"`
}

// ManagedClusterLoadBalancerProfileOutboundIPsInput is an input type that accepts ManagedClusterLoadBalancerProfileOutboundIPsArgs and ManagedClusterLoadBalancerProfileOutboundIPsOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileOutboundIPsInput` via:
//
//	ManagedClusterLoadBalancerProfileOutboundIPsArgs{...}
type ManagedClusterLoadBalancerProfileOutboundIPsInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileOutboundIPsOutput() ManagedClusterLoadBalancerProfileOutboundIPsOutput
	ToManagedClusterLoadBalancerProfileOutboundIPsOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileOutboundIPsOutput
}

// Desired outbound IP resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileOutboundIPsArgs struct {
	// A list of public IP resources.
	PublicIPs ResourceReferenceArrayInput `pulumi:"publicIPs"`
}

func (ManagedClusterLoadBalancerProfileOutboundIPsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileOutboundIPs)(nil)).Elem()
}

func (i ManagedClusterLoadBalancerProfileOutboundIPsArgs) ToManagedClusterLoadBalancerProfileOutboundIPsOutput() ManagedClusterLoadBalancerProfileOutboundIPsOutput {
	return i.ToManagedClusterLoadBalancerProfileOutboundIPsOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileOutboundIPsArgs) ToManagedClusterLoadBalancerProfileOutboundIPsOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutboundIPsOutput)
}

func (i ManagedClusterLoadBalancerProfileOutboundIPsArgs) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return i.ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(context.Background())
}

func (i ManagedClusterLoadBalancerProfileOutboundIPsArgs) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutboundIPsOutput).ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(ctx)
}

// ManagedClusterLoadBalancerProfileOutboundIPsPtrInput is an input type that accepts ManagedClusterLoadBalancerProfileOutboundIPsArgs, ManagedClusterLoadBalancerProfileOutboundIPsPtr and ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput values.
// You can construct a concrete instance of `ManagedClusterLoadBalancerProfileOutboundIPsPtrInput` via:
//
//	        ManagedClusterLoadBalancerProfileOutboundIPsArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterLoadBalancerProfileOutboundIPsPtrInput interface {
	pulumi.Input

	ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput
	ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(context.Context) ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput
}

type managedClusterLoadBalancerProfileOutboundIPsPtrType ManagedClusterLoadBalancerProfileOutboundIPsArgs

func ManagedClusterLoadBalancerProfileOutboundIPsPtr(v *ManagedClusterLoadBalancerProfileOutboundIPsArgs) ManagedClusterLoadBalancerProfileOutboundIPsPtrInput {
	return (*managedClusterLoadBalancerProfileOutboundIPsPtrType)(v)
}

func (*managedClusterLoadBalancerProfileOutboundIPsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileOutboundIPs)(nil)).Elem()
}

func (i *managedClusterLoadBalancerProfileOutboundIPsPtrType) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return i.ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(context.Background())
}

func (i *managedClusterLoadBalancerProfileOutboundIPsPtrType) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput)
}

// Desired outbound IP resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileOutboundIPsOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileOutboundIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsOutput) ToManagedClusterLoadBalancerProfileOutboundIPsOutput() ManagedClusterLoadBalancerProfileOutboundIPsOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsOutput) ToManagedClusterLoadBalancerProfileOutboundIPsOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPsOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsOutput) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return o.ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(context.Background())
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsOutput) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterLoadBalancerProfileOutboundIPs) *ManagedClusterLoadBalancerProfileOutboundIPs {
		return &v
	}).(ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput)
}

// A list of public IP resources.
func (o ManagedClusterLoadBalancerProfileOutboundIPsOutput) PublicIPs() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileOutboundIPs) []ResourceReference { return v.PublicIPs }).(ResourceReferenceArrayOutput)
}

type ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput) Elem() ManagedClusterLoadBalancerProfileOutboundIPsOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileOutboundIPs) ManagedClusterLoadBalancerProfileOutboundIPs {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileOutboundIPs
		return ret
	}).(ManagedClusterLoadBalancerProfileOutboundIPsOutput)
}

// A list of public IP resources.
func (o ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput) PublicIPs() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileOutboundIPs) []ResourceReference {
		if v == nil {
			return nil
		}
		return v.PublicIPs
	}).(ResourceReferenceArrayOutput)
}

// Profile of the managed cluster load balancer.
type ManagedClusterLoadBalancerProfileResponse struct {
	// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
	AllocatedOutboundPorts *int `pulumi:"allocatedOutboundPorts"`
	// The type of the managed inbound Load Balancer BackendPool.
	BackendPoolType *string `pulumi:"backendPoolType"`
	// The effective outbound IP resources of the cluster load balancer.
	EffectiveOutboundIPs []ResourceReferenceResponse `pulumi:"effectiveOutboundIPs"`
	// Enable multiple standard load balancers per AKS cluster or not.
	EnableMultipleStandardLoadBalancers *bool `pulumi:"enableMultipleStandardLoadBalancers"`
	// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// Desired managed outbound IPs for the cluster load balancer.
	ManagedOutboundIPs *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs `pulumi:"managedOutboundIPs"`
	// Desired outbound IP Prefix resources for the cluster load balancer.
	OutboundIPPrefixes *ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes `pulumi:"outboundIPPrefixes"`
	// Desired outbound IP resources for the cluster load balancer.
	OutboundIPs *ManagedClusterLoadBalancerProfileResponseOutboundIPs `pulumi:"outboundIPs"`
}

// Defaults sets the appropriate defaults for ManagedClusterLoadBalancerProfileResponse
func (val *ManagedClusterLoadBalancerProfileResponse) Defaults() *ManagedClusterLoadBalancerProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllocatedOutboundPorts == nil {
		allocatedOutboundPorts_ := 0
		tmp.AllocatedOutboundPorts = &allocatedOutboundPorts_
	}
	if tmp.BackendPoolType == nil {
		backendPoolType_ := "NodeIPConfiguration"
		tmp.BackendPoolType = &backendPoolType_
	}
	if tmp.IdleTimeoutInMinutes == nil {
		idleTimeoutInMinutes_ := 30
		tmp.IdleTimeoutInMinutes = &idleTimeoutInMinutes_
	}
	tmp.ManagedOutboundIPs = tmp.ManagedOutboundIPs.Defaults()

	return &tmp
}

// Profile of the managed cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileResponse)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseOutput) ToManagedClusterLoadBalancerProfileResponseOutput() ManagedClusterLoadBalancerProfileResponseOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutput) ToManagedClusterLoadBalancerProfileResponseOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseOutput {
	return o
}

// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
func (o ManagedClusterLoadBalancerProfileResponseOutput) AllocatedOutboundPorts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *int { return v.AllocatedOutboundPorts }).(pulumi.IntPtrOutput)
}

// The type of the managed inbound Load Balancer BackendPool.
func (o ManagedClusterLoadBalancerProfileResponseOutput) BackendPoolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *string { return v.BackendPoolType }).(pulumi.StringPtrOutput)
}

// The effective outbound IP resources of the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponseOutput) EffectiveOutboundIPs() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) []ResourceReferenceResponse {
		return v.EffectiveOutboundIPs
	}).(ResourceReferenceResponseArrayOutput)
}

// Enable multiple standard load balancers per AKS cluster or not.
func (o ManagedClusterLoadBalancerProfileResponseOutput) EnableMultipleStandardLoadBalancers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *bool { return v.EnableMultipleStandardLoadBalancers }).(pulumi.BoolPtrOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
func (o ManagedClusterLoadBalancerProfileResponseOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponseOutput) ManagedOutboundIPs() ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs {
		return v.ManagedOutboundIPs
	}).(ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponseOutput) OutboundIPPrefixes() ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes {
		return v.OutboundIPPrefixes
	}).(ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput)
}

// Desired outbound IP resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponseOutput) OutboundIPs() ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponse) *ManagedClusterLoadBalancerProfileResponseOutboundIPs {
		return v.OutboundIPs
	}).(ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput)
}

type ManagedClusterLoadBalancerProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileResponse)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) ToManagedClusterLoadBalancerProfileResponsePtrOutput() ManagedClusterLoadBalancerProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) ToManagedClusterLoadBalancerProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) Elem() ManagedClusterLoadBalancerProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) ManagedClusterLoadBalancerProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileResponse
		return ret
	}).(ManagedClusterLoadBalancerProfileResponseOutput)
}

// The desired number of allocated SNAT ports per VM. Allowed values are in the range of 0 to 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) AllocatedOutboundPorts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.AllocatedOutboundPorts
	}).(pulumi.IntPtrOutput)
}

// The type of the managed inbound Load Balancer BackendPool.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) BackendPoolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackendPoolType
	}).(pulumi.StringPtrOutput)
}

// The effective outbound IP resources of the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) EffectiveOutboundIPs() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) []ResourceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.EffectiveOutboundIPs
	}).(ResourceReferenceResponseArrayOutput)
}

// Enable multiple standard load balancers per AKS cluster or not.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) EnableMultipleStandardLoadBalancers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMultipleStandardLoadBalancers
	}).(pulumi.BoolPtrOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 30 minutes.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) ManagedOutboundIPs() ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs {
		if v == nil {
			return nil
		}
		return v.ManagedOutboundIPs
	}).(ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) OutboundIPPrefixes() ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes {
		if v == nil {
			return nil
		}
		return v.OutboundIPPrefixes
	}).(ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput)
}

// Desired outbound IP resources for the cluster load balancer.
func (o ManagedClusterLoadBalancerProfileResponsePtrOutput) OutboundIPs() ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponse) *ManagedClusterLoadBalancerProfileResponseOutboundIPs {
		if v == nil {
			return nil
		}
		return v.OutboundIPs
	}).(ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput)
}

// Desired managed outbound IPs for the cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs struct {
	// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
	// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
	CountIPv6 *int `pulumi:"countIPv6"`
}

// Defaults sets the appropriate defaults for ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs
func (val *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs) Defaults() *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	if tmp.CountIPv6 == nil {
		countIPv6_ := 0
		tmp.CountIPv6 = &countIPv6_
	}
	return &tmp
}

// Desired managed outbound IPs for the cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput) ToManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput() ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput) ToManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput {
	return o
}

// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput) CountIPv6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs) *int { return v.CountIPv6 }).(pulumi.IntPtrOutput)
}

type ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput) Elem() ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs) ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs
		return ret
	}).(ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput)
}

// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
func (o ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput) CountIPv6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseManagedOutboundIPs) *int {
		if v == nil {
			return nil
		}
		return v.CountIPv6
	}).(pulumi.IntPtrOutput)
}

// Desired outbound IP Prefix resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes struct {
	// A list of public IP prefix resources.
	PublicIPPrefixes []ResourceReferenceResponse `pulumi:"publicIPPrefixes"`
}

// Desired outbound IP Prefix resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput() ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput {
	return o
}

// A list of public IP prefix resources.
func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput) PublicIPPrefixes() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes) []ResourceReferenceResponse {
		return v.PublicIPPrefixes
	}).(ResourceReferenceResponseArrayOutput)
}

type ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput() ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput) Elem() ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes) ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes
		return ret
	}).(ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput)
}

// A list of public IP prefix resources.
func (o ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput) PublicIPPrefixes() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixes) []ResourceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PublicIPPrefixes
	}).(ResourceReferenceResponseArrayOutput)
}

// Desired outbound IP resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseOutboundIPs struct {
	// A list of public IP resources.
	PublicIPs []ResourceReferenceResponse `pulumi:"publicIPs"`
}

// Desired outbound IP resources for the cluster load balancer.
type ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterLoadBalancerProfileResponseOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPsOutput() ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPsOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput {
	return o
}

// A list of public IP resources.
func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput) PublicIPs() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterLoadBalancerProfileResponseOutboundIPs) []ResourceReferenceResponse {
		return v.PublicIPs
	}).(ResourceReferenceResponseArrayOutput)
}

type ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterLoadBalancerProfileResponseOutboundIPs)(nil)).Elem()
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput() ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput) ToManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutputWithContext(ctx context.Context) ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput {
	return o
}

func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput) Elem() ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseOutboundIPs) ManagedClusterLoadBalancerProfileResponseOutboundIPs {
		if v != nil {
			return *v
		}
		var ret ManagedClusterLoadBalancerProfileResponseOutboundIPs
		return ret
	}).(ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput)
}

// A list of public IP resources.
func (o ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput) PublicIPs() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterLoadBalancerProfileResponseOutboundIPs) []ResourceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.PublicIPs
	}).(ResourceReferenceResponseArrayOutput)
}

// Profile of the managed outbound IP resources of the managed cluster.
type ManagedClusterManagedOutboundIPProfile struct {
	// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
}

// Defaults sets the appropriate defaults for ManagedClusterManagedOutboundIPProfile
func (val *ManagedClusterManagedOutboundIPProfile) Defaults() *ManagedClusterManagedOutboundIPProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	return &tmp
}

// ManagedClusterManagedOutboundIPProfileInput is an input type that accepts ManagedClusterManagedOutboundIPProfileArgs and ManagedClusterManagedOutboundIPProfileOutput values.
// You can construct a concrete instance of `ManagedClusterManagedOutboundIPProfileInput` via:
//
//	ManagedClusterManagedOutboundIPProfileArgs{...}
type ManagedClusterManagedOutboundIPProfileInput interface {
	pulumi.Input

	ToManagedClusterManagedOutboundIPProfileOutput() ManagedClusterManagedOutboundIPProfileOutput
	ToManagedClusterManagedOutboundIPProfileOutputWithContext(context.Context) ManagedClusterManagedOutboundIPProfileOutput
}

// Profile of the managed outbound IP resources of the managed cluster.
type ManagedClusterManagedOutboundIPProfileArgs struct {
	// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

// Defaults sets the appropriate defaults for ManagedClusterManagedOutboundIPProfileArgs
func (val *ManagedClusterManagedOutboundIPProfileArgs) Defaults() *ManagedClusterManagedOutboundIPProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		tmp.Count = pulumi.IntPtr(1)
	}
	return &tmp
}
func (ManagedClusterManagedOutboundIPProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterManagedOutboundIPProfile)(nil)).Elem()
}

func (i ManagedClusterManagedOutboundIPProfileArgs) ToManagedClusterManagedOutboundIPProfileOutput() ManagedClusterManagedOutboundIPProfileOutput {
	return i.ToManagedClusterManagedOutboundIPProfileOutputWithContext(context.Background())
}

func (i ManagedClusterManagedOutboundIPProfileArgs) ToManagedClusterManagedOutboundIPProfileOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterManagedOutboundIPProfileOutput)
}

func (i ManagedClusterManagedOutboundIPProfileArgs) ToManagedClusterManagedOutboundIPProfilePtrOutput() ManagedClusterManagedOutboundIPProfilePtrOutput {
	return i.ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterManagedOutboundIPProfileArgs) ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterManagedOutboundIPProfileOutput).ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(ctx)
}

// ManagedClusterManagedOutboundIPProfilePtrInput is an input type that accepts ManagedClusterManagedOutboundIPProfileArgs, ManagedClusterManagedOutboundIPProfilePtr and ManagedClusterManagedOutboundIPProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterManagedOutboundIPProfilePtrInput` via:
//
//	        ManagedClusterManagedOutboundIPProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterManagedOutboundIPProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterManagedOutboundIPProfilePtrOutput() ManagedClusterManagedOutboundIPProfilePtrOutput
	ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(context.Context) ManagedClusterManagedOutboundIPProfilePtrOutput
}

type managedClusterManagedOutboundIPProfilePtrType ManagedClusterManagedOutboundIPProfileArgs

func ManagedClusterManagedOutboundIPProfilePtr(v *ManagedClusterManagedOutboundIPProfileArgs) ManagedClusterManagedOutboundIPProfilePtrInput {
	return (*managedClusterManagedOutboundIPProfilePtrType)(v)
}

func (*managedClusterManagedOutboundIPProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterManagedOutboundIPProfile)(nil)).Elem()
}

func (i *managedClusterManagedOutboundIPProfilePtrType) ToManagedClusterManagedOutboundIPProfilePtrOutput() ManagedClusterManagedOutboundIPProfilePtrOutput {
	return i.ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterManagedOutboundIPProfilePtrType) ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterManagedOutboundIPProfilePtrOutput)
}

// Profile of the managed outbound IP resources of the managed cluster.
type ManagedClusterManagedOutboundIPProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterManagedOutboundIPProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterManagedOutboundIPProfile)(nil)).Elem()
}

func (o ManagedClusterManagedOutboundIPProfileOutput) ToManagedClusterManagedOutboundIPProfileOutput() ManagedClusterManagedOutboundIPProfileOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfileOutput) ToManagedClusterManagedOutboundIPProfileOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfileOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfileOutput) ToManagedClusterManagedOutboundIPProfilePtrOutput() ManagedClusterManagedOutboundIPProfilePtrOutput {
	return o.ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterManagedOutboundIPProfileOutput) ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterManagedOutboundIPProfile) *ManagedClusterManagedOutboundIPProfile {
		return &v
	}).(ManagedClusterManagedOutboundIPProfilePtrOutput)
}

// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
func (o ManagedClusterManagedOutboundIPProfileOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterManagedOutboundIPProfile) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type ManagedClusterManagedOutboundIPProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterManagedOutboundIPProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterManagedOutboundIPProfile)(nil)).Elem()
}

func (o ManagedClusterManagedOutboundIPProfilePtrOutput) ToManagedClusterManagedOutboundIPProfilePtrOutput() ManagedClusterManagedOutboundIPProfilePtrOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfilePtrOutput) ToManagedClusterManagedOutboundIPProfilePtrOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfilePtrOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfilePtrOutput) Elem() ManagedClusterManagedOutboundIPProfileOutput {
	return o.ApplyT(func(v *ManagedClusterManagedOutboundIPProfile) ManagedClusterManagedOutboundIPProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterManagedOutboundIPProfile
		return ret
	}).(ManagedClusterManagedOutboundIPProfileOutput)
}

// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
func (o ManagedClusterManagedOutboundIPProfilePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterManagedOutboundIPProfile) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Profile of the managed outbound IP resources of the managed cluster.
type ManagedClusterManagedOutboundIPProfileResponse struct {
	// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
	Count *int `pulumi:"count"`
}

// Defaults sets the appropriate defaults for ManagedClusterManagedOutboundIPProfileResponse
func (val *ManagedClusterManagedOutboundIPProfileResponse) Defaults() *ManagedClusterManagedOutboundIPProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Count == nil {
		count_ := 1
		tmp.Count = &count_
	}
	return &tmp
}

// Profile of the managed outbound IP resources of the managed cluster.
type ManagedClusterManagedOutboundIPProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterManagedOutboundIPProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterManagedOutboundIPProfileResponse)(nil)).Elem()
}

func (o ManagedClusterManagedOutboundIPProfileResponseOutput) ToManagedClusterManagedOutboundIPProfileResponseOutput() ManagedClusterManagedOutboundIPProfileResponseOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfileResponseOutput) ToManagedClusterManagedOutboundIPProfileResponseOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfileResponseOutput {
	return o
}

// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
func (o ManagedClusterManagedOutboundIPProfileResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterManagedOutboundIPProfileResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type ManagedClusterManagedOutboundIPProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterManagedOutboundIPProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterManagedOutboundIPProfileResponse)(nil)).Elem()
}

func (o ManagedClusterManagedOutboundIPProfileResponsePtrOutput) ToManagedClusterManagedOutboundIPProfileResponsePtrOutput() ManagedClusterManagedOutboundIPProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfileResponsePtrOutput) ToManagedClusterManagedOutboundIPProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterManagedOutboundIPProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterManagedOutboundIPProfileResponsePtrOutput) Elem() ManagedClusterManagedOutboundIPProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterManagedOutboundIPProfileResponse) ManagedClusterManagedOutboundIPProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterManagedOutboundIPProfileResponse
		return ret
	}).(ManagedClusterManagedOutboundIPProfileResponseOutput)
}

// The desired number of outbound IPs created/managed by Azure. Allowed values must be in the range of 1 to 16 (inclusive). The default value is 1.
func (o ManagedClusterManagedOutboundIPProfileResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterManagedOutboundIPProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// The metrics profile for the ManagedCluster.
type ManagedClusterMetricsProfile struct {
	// The cost analysis configuration for the cluster
	CostAnalysis *ManagedClusterCostAnalysis `pulumi:"costAnalysis"`
}

// ManagedClusterMetricsProfileInput is an input type that accepts ManagedClusterMetricsProfileArgs and ManagedClusterMetricsProfileOutput values.
// You can construct a concrete instance of `ManagedClusterMetricsProfileInput` via:
//
//	ManagedClusterMetricsProfileArgs{...}
type ManagedClusterMetricsProfileInput interface {
	pulumi.Input

	ToManagedClusterMetricsProfileOutput() ManagedClusterMetricsProfileOutput
	ToManagedClusterMetricsProfileOutputWithContext(context.Context) ManagedClusterMetricsProfileOutput
}

// The metrics profile for the ManagedCluster.
type ManagedClusterMetricsProfileArgs struct {
	// The cost analysis configuration for the cluster
	CostAnalysis ManagedClusterCostAnalysisPtrInput `pulumi:"costAnalysis"`
}

func (ManagedClusterMetricsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterMetricsProfile)(nil)).Elem()
}

func (i ManagedClusterMetricsProfileArgs) ToManagedClusterMetricsProfileOutput() ManagedClusterMetricsProfileOutput {
	return i.ToManagedClusterMetricsProfileOutputWithContext(context.Background())
}

func (i ManagedClusterMetricsProfileArgs) ToManagedClusterMetricsProfileOutputWithContext(ctx context.Context) ManagedClusterMetricsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterMetricsProfileOutput)
}

func (i ManagedClusterMetricsProfileArgs) ToManagedClusterMetricsProfilePtrOutput() ManagedClusterMetricsProfilePtrOutput {
	return i.ToManagedClusterMetricsProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterMetricsProfileArgs) ToManagedClusterMetricsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterMetricsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterMetricsProfileOutput).ToManagedClusterMetricsProfilePtrOutputWithContext(ctx)
}

// ManagedClusterMetricsProfilePtrInput is an input type that accepts ManagedClusterMetricsProfileArgs, ManagedClusterMetricsProfilePtr and ManagedClusterMetricsProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterMetricsProfilePtrInput` via:
//
//	        ManagedClusterMetricsProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterMetricsProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterMetricsProfilePtrOutput() ManagedClusterMetricsProfilePtrOutput
	ToManagedClusterMetricsProfilePtrOutputWithContext(context.Context) ManagedClusterMetricsProfilePtrOutput
}

type managedClusterMetricsProfilePtrType ManagedClusterMetricsProfileArgs

func ManagedClusterMetricsProfilePtr(v *ManagedClusterMetricsProfileArgs) ManagedClusterMetricsProfilePtrInput {
	return (*managedClusterMetricsProfilePtrType)(v)
}

func (*managedClusterMetricsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterMetricsProfile)(nil)).Elem()
}

func (i *managedClusterMetricsProfilePtrType) ToManagedClusterMetricsProfilePtrOutput() ManagedClusterMetricsProfilePtrOutput {
	return i.ToManagedClusterMetricsProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterMetricsProfilePtrType) ToManagedClusterMetricsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterMetricsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterMetricsProfilePtrOutput)
}

// The metrics profile for the ManagedCluster.
type ManagedClusterMetricsProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterMetricsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterMetricsProfile)(nil)).Elem()
}

func (o ManagedClusterMetricsProfileOutput) ToManagedClusterMetricsProfileOutput() ManagedClusterMetricsProfileOutput {
	return o
}

func (o ManagedClusterMetricsProfileOutput) ToManagedClusterMetricsProfileOutputWithContext(ctx context.Context) ManagedClusterMetricsProfileOutput {
	return o
}

func (o ManagedClusterMetricsProfileOutput) ToManagedClusterMetricsProfilePtrOutput() ManagedClusterMetricsProfilePtrOutput {
	return o.ToManagedClusterMetricsProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterMetricsProfileOutput) ToManagedClusterMetricsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterMetricsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterMetricsProfile) *ManagedClusterMetricsProfile {
		return &v
	}).(ManagedClusterMetricsProfilePtrOutput)
}

// The cost analysis configuration for the cluster
func (o ManagedClusterMetricsProfileOutput) CostAnalysis() ManagedClusterCostAnalysisPtrOutput {
	return o.ApplyT(func(v ManagedClusterMetricsProfile) *ManagedClusterCostAnalysis { return v.CostAnalysis }).(ManagedClusterCostAnalysisPtrOutput)
}

type ManagedClusterMetricsProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterMetricsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterMetricsProfile)(nil)).Elem()
}

func (o ManagedClusterMetricsProfilePtrOutput) ToManagedClusterMetricsProfilePtrOutput() ManagedClusterMetricsProfilePtrOutput {
	return o
}

func (o ManagedClusterMetricsProfilePtrOutput) ToManagedClusterMetricsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterMetricsProfilePtrOutput {
	return o
}

func (o ManagedClusterMetricsProfilePtrOutput) Elem() ManagedClusterMetricsProfileOutput {
	return o.ApplyT(func(v *ManagedClusterMetricsProfile) ManagedClusterMetricsProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterMetricsProfile
		return ret
	}).(ManagedClusterMetricsProfileOutput)
}

// The cost analysis configuration for the cluster
func (o ManagedClusterMetricsProfilePtrOutput) CostAnalysis() ManagedClusterCostAnalysisPtrOutput {
	return o.ApplyT(func(v *ManagedClusterMetricsProfile) *ManagedClusterCostAnalysis {
		if v == nil {
			return nil
		}
		return v.CostAnalysis
	}).(ManagedClusterCostAnalysisPtrOutput)
}

// The metrics profile for the ManagedCluster.
type ManagedClusterMetricsProfileResponse struct {
	// The cost analysis configuration for the cluster
	CostAnalysis *ManagedClusterCostAnalysisResponse `pulumi:"costAnalysis"`
}

// The metrics profile for the ManagedCluster.
type ManagedClusterMetricsProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterMetricsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterMetricsProfileResponse)(nil)).Elem()
}

func (o ManagedClusterMetricsProfileResponseOutput) ToManagedClusterMetricsProfileResponseOutput() ManagedClusterMetricsProfileResponseOutput {
	return o
}

func (o ManagedClusterMetricsProfileResponseOutput) ToManagedClusterMetricsProfileResponseOutputWithContext(ctx context.Context) ManagedClusterMetricsProfileResponseOutput {
	return o
}

// The cost analysis configuration for the cluster
func (o ManagedClusterMetricsProfileResponseOutput) CostAnalysis() ManagedClusterCostAnalysisResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterMetricsProfileResponse) *ManagedClusterCostAnalysisResponse {
		return v.CostAnalysis
	}).(ManagedClusterCostAnalysisResponsePtrOutput)
}

type ManagedClusterMetricsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterMetricsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterMetricsProfileResponse)(nil)).Elem()
}

func (o ManagedClusterMetricsProfileResponsePtrOutput) ToManagedClusterMetricsProfileResponsePtrOutput() ManagedClusterMetricsProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterMetricsProfileResponsePtrOutput) ToManagedClusterMetricsProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterMetricsProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterMetricsProfileResponsePtrOutput) Elem() ManagedClusterMetricsProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterMetricsProfileResponse) ManagedClusterMetricsProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterMetricsProfileResponse
		return ret
	}).(ManagedClusterMetricsProfileResponseOutput)
}

// The cost analysis configuration for the cluster
func (o ManagedClusterMetricsProfileResponsePtrOutput) CostAnalysis() ManagedClusterCostAnalysisResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterMetricsProfileResponse) *ManagedClusterCostAnalysisResponse {
		if v == nil {
			return nil
		}
		return v.CostAnalysis
	}).(ManagedClusterCostAnalysisResponsePtrOutput)
}

// Profile of the managed cluster NAT gateway.
type ManagedClusterNATGatewayProfile struct {
	// The effective outbound IP resources of the cluster NAT gateway.
	EffectiveOutboundIPs []ResourceReference `pulumi:"effectiveOutboundIPs"`
	// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// Profile of the managed outbound IP resources of the cluster NAT gateway.
	ManagedOutboundIPProfile *ManagedClusterManagedOutboundIPProfile `pulumi:"managedOutboundIPProfile"`
}

// Defaults sets the appropriate defaults for ManagedClusterNATGatewayProfile
func (val *ManagedClusterNATGatewayProfile) Defaults() *ManagedClusterNATGatewayProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IdleTimeoutInMinutes == nil {
		idleTimeoutInMinutes_ := 4
		tmp.IdleTimeoutInMinutes = &idleTimeoutInMinutes_
	}
	tmp.ManagedOutboundIPProfile = tmp.ManagedOutboundIPProfile.Defaults()

	return &tmp
}

// ManagedClusterNATGatewayProfileInput is an input type that accepts ManagedClusterNATGatewayProfileArgs and ManagedClusterNATGatewayProfileOutput values.
// You can construct a concrete instance of `ManagedClusterNATGatewayProfileInput` via:
//
//	ManagedClusterNATGatewayProfileArgs{...}
type ManagedClusterNATGatewayProfileInput interface {
	pulumi.Input

	ToManagedClusterNATGatewayProfileOutput() ManagedClusterNATGatewayProfileOutput
	ToManagedClusterNATGatewayProfileOutputWithContext(context.Context) ManagedClusterNATGatewayProfileOutput
}

// Profile of the managed cluster NAT gateway.
type ManagedClusterNATGatewayProfileArgs struct {
	// The effective outbound IP resources of the cluster NAT gateway.
	EffectiveOutboundIPs ResourceReferenceArrayInput `pulumi:"effectiveOutboundIPs"`
	// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
	IdleTimeoutInMinutes pulumi.IntPtrInput `pulumi:"idleTimeoutInMinutes"`
	// Profile of the managed outbound IP resources of the cluster NAT gateway.
	ManagedOutboundIPProfile ManagedClusterManagedOutboundIPProfilePtrInput `pulumi:"managedOutboundIPProfile"`
}

// Defaults sets the appropriate defaults for ManagedClusterNATGatewayProfileArgs
func (val *ManagedClusterNATGatewayProfileArgs) Defaults() *ManagedClusterNATGatewayProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IdleTimeoutInMinutes == nil {
		tmp.IdleTimeoutInMinutes = pulumi.IntPtr(4)
	}

	return &tmp
}
func (ManagedClusterNATGatewayProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterNATGatewayProfile)(nil)).Elem()
}

func (i ManagedClusterNATGatewayProfileArgs) ToManagedClusterNATGatewayProfileOutput() ManagedClusterNATGatewayProfileOutput {
	return i.ToManagedClusterNATGatewayProfileOutputWithContext(context.Background())
}

func (i ManagedClusterNATGatewayProfileArgs) ToManagedClusterNATGatewayProfileOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterNATGatewayProfileOutput)
}

func (i ManagedClusterNATGatewayProfileArgs) ToManagedClusterNATGatewayProfilePtrOutput() ManagedClusterNATGatewayProfilePtrOutput {
	return i.ToManagedClusterNATGatewayProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterNATGatewayProfileArgs) ToManagedClusterNATGatewayProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterNATGatewayProfileOutput).ToManagedClusterNATGatewayProfilePtrOutputWithContext(ctx)
}

// ManagedClusterNATGatewayProfilePtrInput is an input type that accepts ManagedClusterNATGatewayProfileArgs, ManagedClusterNATGatewayProfilePtr and ManagedClusterNATGatewayProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterNATGatewayProfilePtrInput` via:
//
//	        ManagedClusterNATGatewayProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterNATGatewayProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterNATGatewayProfilePtrOutput() ManagedClusterNATGatewayProfilePtrOutput
	ToManagedClusterNATGatewayProfilePtrOutputWithContext(context.Context) ManagedClusterNATGatewayProfilePtrOutput
}

type managedClusterNATGatewayProfilePtrType ManagedClusterNATGatewayProfileArgs

func ManagedClusterNATGatewayProfilePtr(v *ManagedClusterNATGatewayProfileArgs) ManagedClusterNATGatewayProfilePtrInput {
	return (*managedClusterNATGatewayProfilePtrType)(v)
}

func (*managedClusterNATGatewayProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterNATGatewayProfile)(nil)).Elem()
}

func (i *managedClusterNATGatewayProfilePtrType) ToManagedClusterNATGatewayProfilePtrOutput() ManagedClusterNATGatewayProfilePtrOutput {
	return i.ToManagedClusterNATGatewayProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterNATGatewayProfilePtrType) ToManagedClusterNATGatewayProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterNATGatewayProfilePtrOutput)
}

// Profile of the managed cluster NAT gateway.
type ManagedClusterNATGatewayProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterNATGatewayProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterNATGatewayProfile)(nil)).Elem()
}

func (o ManagedClusterNATGatewayProfileOutput) ToManagedClusterNATGatewayProfileOutput() ManagedClusterNATGatewayProfileOutput {
	return o
}

func (o ManagedClusterNATGatewayProfileOutput) ToManagedClusterNATGatewayProfileOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfileOutput {
	return o
}

func (o ManagedClusterNATGatewayProfileOutput) ToManagedClusterNATGatewayProfilePtrOutput() ManagedClusterNATGatewayProfilePtrOutput {
	return o.ToManagedClusterNATGatewayProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterNATGatewayProfileOutput) ToManagedClusterNATGatewayProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterNATGatewayProfile) *ManagedClusterNATGatewayProfile {
		return &v
	}).(ManagedClusterNATGatewayProfilePtrOutput)
}

// The effective outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfileOutput) EffectiveOutboundIPs() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v ManagedClusterNATGatewayProfile) []ResourceReference { return v.EffectiveOutboundIPs }).(ResourceReferenceArrayOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
func (o ManagedClusterNATGatewayProfileOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterNATGatewayProfile) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Profile of the managed outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfileOutput) ManagedOutboundIPProfile() ManagedClusterManagedOutboundIPProfilePtrOutput {
	return o.ApplyT(func(v ManagedClusterNATGatewayProfile) *ManagedClusterManagedOutboundIPProfile {
		return v.ManagedOutboundIPProfile
	}).(ManagedClusterManagedOutboundIPProfilePtrOutput)
}

type ManagedClusterNATGatewayProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterNATGatewayProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterNATGatewayProfile)(nil)).Elem()
}

func (o ManagedClusterNATGatewayProfilePtrOutput) ToManagedClusterNATGatewayProfilePtrOutput() ManagedClusterNATGatewayProfilePtrOutput {
	return o
}

func (o ManagedClusterNATGatewayProfilePtrOutput) ToManagedClusterNATGatewayProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfilePtrOutput {
	return o
}

func (o ManagedClusterNATGatewayProfilePtrOutput) Elem() ManagedClusterNATGatewayProfileOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfile) ManagedClusterNATGatewayProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterNATGatewayProfile
		return ret
	}).(ManagedClusterNATGatewayProfileOutput)
}

// The effective outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfilePtrOutput) EffectiveOutboundIPs() ResourceReferenceArrayOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfile) []ResourceReference {
		if v == nil {
			return nil
		}
		return v.EffectiveOutboundIPs
	}).(ResourceReferenceArrayOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
func (o ManagedClusterNATGatewayProfilePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfile) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// Profile of the managed outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfilePtrOutput) ManagedOutboundIPProfile() ManagedClusterManagedOutboundIPProfilePtrOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfile) *ManagedClusterManagedOutboundIPProfile {
		if v == nil {
			return nil
		}
		return v.ManagedOutboundIPProfile
	}).(ManagedClusterManagedOutboundIPProfilePtrOutput)
}

// Profile of the managed cluster NAT gateway.
type ManagedClusterNATGatewayProfileResponse struct {
	// The effective outbound IP resources of the cluster NAT gateway.
	EffectiveOutboundIPs []ResourceReferenceResponse `pulumi:"effectiveOutboundIPs"`
	// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// Profile of the managed outbound IP resources of the cluster NAT gateway.
	ManagedOutboundIPProfile *ManagedClusterManagedOutboundIPProfileResponse `pulumi:"managedOutboundIPProfile"`
}

// Defaults sets the appropriate defaults for ManagedClusterNATGatewayProfileResponse
func (val *ManagedClusterNATGatewayProfileResponse) Defaults() *ManagedClusterNATGatewayProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IdleTimeoutInMinutes == nil {
		idleTimeoutInMinutes_ := 4
		tmp.IdleTimeoutInMinutes = &idleTimeoutInMinutes_
	}
	tmp.ManagedOutboundIPProfile = tmp.ManagedOutboundIPProfile.Defaults()

	return &tmp
}

// Profile of the managed cluster NAT gateway.
type ManagedClusterNATGatewayProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterNATGatewayProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterNATGatewayProfileResponse)(nil)).Elem()
}

func (o ManagedClusterNATGatewayProfileResponseOutput) ToManagedClusterNATGatewayProfileResponseOutput() ManagedClusterNATGatewayProfileResponseOutput {
	return o
}

func (o ManagedClusterNATGatewayProfileResponseOutput) ToManagedClusterNATGatewayProfileResponseOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfileResponseOutput {
	return o
}

// The effective outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfileResponseOutput) EffectiveOutboundIPs() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterNATGatewayProfileResponse) []ResourceReferenceResponse {
		return v.EffectiveOutboundIPs
	}).(ResourceReferenceResponseArrayOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
func (o ManagedClusterNATGatewayProfileResponseOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterNATGatewayProfileResponse) *int { return v.IdleTimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Profile of the managed outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfileResponseOutput) ManagedOutboundIPProfile() ManagedClusterManagedOutboundIPProfileResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterNATGatewayProfileResponse) *ManagedClusterManagedOutboundIPProfileResponse {
		return v.ManagedOutboundIPProfile
	}).(ManagedClusterManagedOutboundIPProfileResponsePtrOutput)
}

type ManagedClusterNATGatewayProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterNATGatewayProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterNATGatewayProfileResponse)(nil)).Elem()
}

func (o ManagedClusterNATGatewayProfileResponsePtrOutput) ToManagedClusterNATGatewayProfileResponsePtrOutput() ManagedClusterNATGatewayProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterNATGatewayProfileResponsePtrOutput) ToManagedClusterNATGatewayProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterNATGatewayProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterNATGatewayProfileResponsePtrOutput) Elem() ManagedClusterNATGatewayProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfileResponse) ManagedClusterNATGatewayProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterNATGatewayProfileResponse
		return ret
	}).(ManagedClusterNATGatewayProfileResponseOutput)
}

// The effective outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfileResponsePtrOutput) EffectiveOutboundIPs() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfileResponse) []ResourceReferenceResponse {
		if v == nil {
			return nil
		}
		return v.EffectiveOutboundIPs
	}).(ResourceReferenceResponseArrayOutput)
}

// Desired outbound flow idle timeout in minutes. Allowed values are in the range of 4 to 120 (inclusive). The default value is 4 minutes.
func (o ManagedClusterNATGatewayProfileResponsePtrOutput) IdleTimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeoutInMinutes
	}).(pulumi.IntPtrOutput)
}

// Profile of the managed outbound IP resources of the cluster NAT gateway.
func (o ManagedClusterNATGatewayProfileResponsePtrOutput) ManagedOutboundIPProfile() ManagedClusterManagedOutboundIPProfileResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterNATGatewayProfileResponse) *ManagedClusterManagedOutboundIPProfileResponse {
		if v == nil {
			return nil
		}
		return v.ManagedOutboundIPProfile
	}).(ManagedClusterManagedOutboundIPProfileResponsePtrOutput)
}

// Node resource group lockdown profile for a managed cluster.
type ManagedClusterNodeResourceGroupProfile struct {
	// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
	RestrictionLevel *string `pulumi:"restrictionLevel"`
}

// ManagedClusterNodeResourceGroupProfileInput is an input type that accepts ManagedClusterNodeResourceGroupProfileArgs and ManagedClusterNodeResourceGroupProfileOutput values.
// You can construct a concrete instance of `ManagedClusterNodeResourceGroupProfileInput` via:
//
//	ManagedClusterNodeResourceGroupProfileArgs{...}
type ManagedClusterNodeResourceGroupProfileInput interface {
	pulumi.Input

	ToManagedClusterNodeResourceGroupProfileOutput() ManagedClusterNodeResourceGroupProfileOutput
	ToManagedClusterNodeResourceGroupProfileOutputWithContext(context.Context) ManagedClusterNodeResourceGroupProfileOutput
}

// Node resource group lockdown profile for a managed cluster.
type ManagedClusterNodeResourceGroupProfileArgs struct {
	// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
	RestrictionLevel pulumi.StringPtrInput `pulumi:"restrictionLevel"`
}

func (ManagedClusterNodeResourceGroupProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterNodeResourceGroupProfile)(nil)).Elem()
}

func (i ManagedClusterNodeResourceGroupProfileArgs) ToManagedClusterNodeResourceGroupProfileOutput() ManagedClusterNodeResourceGroupProfileOutput {
	return i.ToManagedClusterNodeResourceGroupProfileOutputWithContext(context.Background())
}

func (i ManagedClusterNodeResourceGroupProfileArgs) ToManagedClusterNodeResourceGroupProfileOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterNodeResourceGroupProfileOutput)
}

func (i ManagedClusterNodeResourceGroupProfileArgs) ToManagedClusterNodeResourceGroupProfilePtrOutput() ManagedClusterNodeResourceGroupProfilePtrOutput {
	return i.ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterNodeResourceGroupProfileArgs) ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterNodeResourceGroupProfileOutput).ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(ctx)
}

// ManagedClusterNodeResourceGroupProfilePtrInput is an input type that accepts ManagedClusterNodeResourceGroupProfileArgs, ManagedClusterNodeResourceGroupProfilePtr and ManagedClusterNodeResourceGroupProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterNodeResourceGroupProfilePtrInput` via:
//
//	        ManagedClusterNodeResourceGroupProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterNodeResourceGroupProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterNodeResourceGroupProfilePtrOutput() ManagedClusterNodeResourceGroupProfilePtrOutput
	ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(context.Context) ManagedClusterNodeResourceGroupProfilePtrOutput
}

type managedClusterNodeResourceGroupProfilePtrType ManagedClusterNodeResourceGroupProfileArgs

func ManagedClusterNodeResourceGroupProfilePtr(v *ManagedClusterNodeResourceGroupProfileArgs) ManagedClusterNodeResourceGroupProfilePtrInput {
	return (*managedClusterNodeResourceGroupProfilePtrType)(v)
}

func (*managedClusterNodeResourceGroupProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterNodeResourceGroupProfile)(nil)).Elem()
}

func (i *managedClusterNodeResourceGroupProfilePtrType) ToManagedClusterNodeResourceGroupProfilePtrOutput() ManagedClusterNodeResourceGroupProfilePtrOutput {
	return i.ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterNodeResourceGroupProfilePtrType) ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterNodeResourceGroupProfilePtrOutput)
}

// Node resource group lockdown profile for a managed cluster.
type ManagedClusterNodeResourceGroupProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterNodeResourceGroupProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterNodeResourceGroupProfile)(nil)).Elem()
}

func (o ManagedClusterNodeResourceGroupProfileOutput) ToManagedClusterNodeResourceGroupProfileOutput() ManagedClusterNodeResourceGroupProfileOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfileOutput) ToManagedClusterNodeResourceGroupProfileOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfileOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfileOutput) ToManagedClusterNodeResourceGroupProfilePtrOutput() ManagedClusterNodeResourceGroupProfilePtrOutput {
	return o.ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterNodeResourceGroupProfileOutput) ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterNodeResourceGroupProfile) *ManagedClusterNodeResourceGroupProfile {
		return &v
	}).(ManagedClusterNodeResourceGroupProfilePtrOutput)
}

// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
func (o ManagedClusterNodeResourceGroupProfileOutput) RestrictionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterNodeResourceGroupProfile) *string { return v.RestrictionLevel }).(pulumi.StringPtrOutput)
}

type ManagedClusterNodeResourceGroupProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterNodeResourceGroupProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterNodeResourceGroupProfile)(nil)).Elem()
}

func (o ManagedClusterNodeResourceGroupProfilePtrOutput) ToManagedClusterNodeResourceGroupProfilePtrOutput() ManagedClusterNodeResourceGroupProfilePtrOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfilePtrOutput) ToManagedClusterNodeResourceGroupProfilePtrOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfilePtrOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfilePtrOutput) Elem() ManagedClusterNodeResourceGroupProfileOutput {
	return o.ApplyT(func(v *ManagedClusterNodeResourceGroupProfile) ManagedClusterNodeResourceGroupProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterNodeResourceGroupProfile
		return ret
	}).(ManagedClusterNodeResourceGroupProfileOutput)
}

// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
func (o ManagedClusterNodeResourceGroupProfilePtrOutput) RestrictionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterNodeResourceGroupProfile) *string {
		if v == nil {
			return nil
		}
		return v.RestrictionLevel
	}).(pulumi.StringPtrOutput)
}

// Node resource group lockdown profile for a managed cluster.
type ManagedClusterNodeResourceGroupProfileResponse struct {
	// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
	RestrictionLevel *string `pulumi:"restrictionLevel"`
}

// Node resource group lockdown profile for a managed cluster.
type ManagedClusterNodeResourceGroupProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterNodeResourceGroupProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterNodeResourceGroupProfileResponse)(nil)).Elem()
}

func (o ManagedClusterNodeResourceGroupProfileResponseOutput) ToManagedClusterNodeResourceGroupProfileResponseOutput() ManagedClusterNodeResourceGroupProfileResponseOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfileResponseOutput) ToManagedClusterNodeResourceGroupProfileResponseOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfileResponseOutput {
	return o
}

// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
func (o ManagedClusterNodeResourceGroupProfileResponseOutput) RestrictionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterNodeResourceGroupProfileResponse) *string { return v.RestrictionLevel }).(pulumi.StringPtrOutput)
}

type ManagedClusterNodeResourceGroupProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterNodeResourceGroupProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterNodeResourceGroupProfileResponse)(nil)).Elem()
}

func (o ManagedClusterNodeResourceGroupProfileResponsePtrOutput) ToManagedClusterNodeResourceGroupProfileResponsePtrOutput() ManagedClusterNodeResourceGroupProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfileResponsePtrOutput) ToManagedClusterNodeResourceGroupProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterNodeResourceGroupProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterNodeResourceGroupProfileResponsePtrOutput) Elem() ManagedClusterNodeResourceGroupProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterNodeResourceGroupProfileResponse) ManagedClusterNodeResourceGroupProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterNodeResourceGroupProfileResponse
		return ret
	}).(ManagedClusterNodeResourceGroupProfileResponseOutput)
}

// The restriction level applied to the cluster's node resource group. If not specified, the default is 'Unrestricted'
func (o ManagedClusterNodeResourceGroupProfileResponsePtrOutput) RestrictionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterNodeResourceGroupProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RestrictionLevel
	}).(pulumi.StringPtrOutput)
}

// The OIDC issuer profile of the Managed Cluster.
type ManagedClusterOIDCIssuerProfile struct {
	// Whether the OIDC issuer is enabled.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterOIDCIssuerProfileInput is an input type that accepts ManagedClusterOIDCIssuerProfileArgs and ManagedClusterOIDCIssuerProfileOutput values.
// You can construct a concrete instance of `ManagedClusterOIDCIssuerProfileInput` via:
//
//	ManagedClusterOIDCIssuerProfileArgs{...}
type ManagedClusterOIDCIssuerProfileInput interface {
	pulumi.Input

	ToManagedClusterOIDCIssuerProfileOutput() ManagedClusterOIDCIssuerProfileOutput
	ToManagedClusterOIDCIssuerProfileOutputWithContext(context.Context) ManagedClusterOIDCIssuerProfileOutput
}

// The OIDC issuer profile of the Managed Cluster.
type ManagedClusterOIDCIssuerProfileArgs struct {
	// Whether the OIDC issuer is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterOIDCIssuerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterOIDCIssuerProfile)(nil)).Elem()
}

func (i ManagedClusterOIDCIssuerProfileArgs) ToManagedClusterOIDCIssuerProfileOutput() ManagedClusterOIDCIssuerProfileOutput {
	return i.ToManagedClusterOIDCIssuerProfileOutputWithContext(context.Background())
}

func (i ManagedClusterOIDCIssuerProfileArgs) ToManagedClusterOIDCIssuerProfileOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterOIDCIssuerProfileOutput)
}

func (i ManagedClusterOIDCIssuerProfileArgs) ToManagedClusterOIDCIssuerProfilePtrOutput() ManagedClusterOIDCIssuerProfilePtrOutput {
	return i.ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterOIDCIssuerProfileArgs) ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterOIDCIssuerProfileOutput).ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(ctx)
}

// ManagedClusterOIDCIssuerProfilePtrInput is an input type that accepts ManagedClusterOIDCIssuerProfileArgs, ManagedClusterOIDCIssuerProfilePtr and ManagedClusterOIDCIssuerProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterOIDCIssuerProfilePtrInput` via:
//
//	        ManagedClusterOIDCIssuerProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterOIDCIssuerProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterOIDCIssuerProfilePtrOutput() ManagedClusterOIDCIssuerProfilePtrOutput
	ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(context.Context) ManagedClusterOIDCIssuerProfilePtrOutput
}

type managedClusterOIDCIssuerProfilePtrType ManagedClusterOIDCIssuerProfileArgs

func ManagedClusterOIDCIssuerProfilePtr(v *ManagedClusterOIDCIssuerProfileArgs) ManagedClusterOIDCIssuerProfilePtrInput {
	return (*managedClusterOIDCIssuerProfilePtrType)(v)
}

func (*managedClusterOIDCIssuerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterOIDCIssuerProfile)(nil)).Elem()
}

func (i *managedClusterOIDCIssuerProfilePtrType) ToManagedClusterOIDCIssuerProfilePtrOutput() ManagedClusterOIDCIssuerProfilePtrOutput {
	return i.ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterOIDCIssuerProfilePtrType) ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterOIDCIssuerProfilePtrOutput)
}

// The OIDC issuer profile of the Managed Cluster.
type ManagedClusterOIDCIssuerProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterOIDCIssuerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterOIDCIssuerProfile)(nil)).Elem()
}

func (o ManagedClusterOIDCIssuerProfileOutput) ToManagedClusterOIDCIssuerProfileOutput() ManagedClusterOIDCIssuerProfileOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfileOutput) ToManagedClusterOIDCIssuerProfileOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfileOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfileOutput) ToManagedClusterOIDCIssuerProfilePtrOutput() ManagedClusterOIDCIssuerProfilePtrOutput {
	return o.ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterOIDCIssuerProfileOutput) ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterOIDCIssuerProfile) *ManagedClusterOIDCIssuerProfile {
		return &v
	}).(ManagedClusterOIDCIssuerProfilePtrOutput)
}

// Whether the OIDC issuer is enabled.
func (o ManagedClusterOIDCIssuerProfileOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterOIDCIssuerProfile) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterOIDCIssuerProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterOIDCIssuerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterOIDCIssuerProfile)(nil)).Elem()
}

func (o ManagedClusterOIDCIssuerProfilePtrOutput) ToManagedClusterOIDCIssuerProfilePtrOutput() ManagedClusterOIDCIssuerProfilePtrOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfilePtrOutput) ToManagedClusterOIDCIssuerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfilePtrOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfilePtrOutput) Elem() ManagedClusterOIDCIssuerProfileOutput {
	return o.ApplyT(func(v *ManagedClusterOIDCIssuerProfile) ManagedClusterOIDCIssuerProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterOIDCIssuerProfile
		return ret
	}).(ManagedClusterOIDCIssuerProfileOutput)
}

// Whether the OIDC issuer is enabled.
func (o ManagedClusterOIDCIssuerProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterOIDCIssuerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The OIDC issuer profile of the Managed Cluster.
type ManagedClusterOIDCIssuerProfileResponse struct {
	// Whether the OIDC issuer is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The OIDC issuer url of the Managed Cluster.
	IssuerURL string `pulumi:"issuerURL"`
}

// The OIDC issuer profile of the Managed Cluster.
type ManagedClusterOIDCIssuerProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterOIDCIssuerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterOIDCIssuerProfileResponse)(nil)).Elem()
}

func (o ManagedClusterOIDCIssuerProfileResponseOutput) ToManagedClusterOIDCIssuerProfileResponseOutput() ManagedClusterOIDCIssuerProfileResponseOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfileResponseOutput) ToManagedClusterOIDCIssuerProfileResponseOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfileResponseOutput {
	return o
}

// Whether the OIDC issuer is enabled.
func (o ManagedClusterOIDCIssuerProfileResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterOIDCIssuerProfileResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The OIDC issuer url of the Managed Cluster.
func (o ManagedClusterOIDCIssuerProfileResponseOutput) IssuerURL() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterOIDCIssuerProfileResponse) string { return v.IssuerURL }).(pulumi.StringOutput)
}

type ManagedClusterOIDCIssuerProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterOIDCIssuerProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterOIDCIssuerProfileResponse)(nil)).Elem()
}

func (o ManagedClusterOIDCIssuerProfileResponsePtrOutput) ToManagedClusterOIDCIssuerProfileResponsePtrOutput() ManagedClusterOIDCIssuerProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfileResponsePtrOutput) ToManagedClusterOIDCIssuerProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterOIDCIssuerProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterOIDCIssuerProfileResponsePtrOutput) Elem() ManagedClusterOIDCIssuerProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterOIDCIssuerProfileResponse) ManagedClusterOIDCIssuerProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterOIDCIssuerProfileResponse
		return ret
	}).(ManagedClusterOIDCIssuerProfileResponseOutput)
}

// Whether the OIDC issuer is enabled.
func (o ManagedClusterOIDCIssuerProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterOIDCIssuerProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The OIDC issuer url of the Managed Cluster.
func (o ManagedClusterOIDCIssuerProfileResponsePtrOutput) IssuerURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterOIDCIssuerProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IssuerURL
	}).(pulumi.StringPtrOutput)
}

// Details about the pod identity assigned to the Managed Cluster.
type ManagedClusterPodIdentity struct {
	// The binding selector to use for the AzureIdentityBinding resource.
	BindingSelector *string `pulumi:"bindingSelector"`
	// The user assigned identity details.
	Identity UserAssignedIdentity `pulumi:"identity"`
	// The name of the pod identity.
	Name string `pulumi:"name"`
	// The namespace of the pod identity.
	Namespace string `pulumi:"namespace"`
}

// ManagedClusterPodIdentityInput is an input type that accepts ManagedClusterPodIdentityArgs and ManagedClusterPodIdentityOutput values.
// You can construct a concrete instance of `ManagedClusterPodIdentityInput` via:
//
//	ManagedClusterPodIdentityArgs{...}
type ManagedClusterPodIdentityInput interface {
	pulumi.Input

	ToManagedClusterPodIdentityOutput() ManagedClusterPodIdentityOutput
	ToManagedClusterPodIdentityOutputWithContext(context.Context) ManagedClusterPodIdentityOutput
}

// Details about the pod identity assigned to the Managed Cluster.
type ManagedClusterPodIdentityArgs struct {
	// The binding selector to use for the AzureIdentityBinding resource.
	BindingSelector pulumi.StringPtrInput `pulumi:"bindingSelector"`
	// The user assigned identity details.
	Identity UserAssignedIdentityInput `pulumi:"identity"`
	// The name of the pod identity.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace of the pod identity.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ManagedClusterPodIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentity)(nil)).Elem()
}

func (i ManagedClusterPodIdentityArgs) ToManagedClusterPodIdentityOutput() ManagedClusterPodIdentityOutput {
	return i.ToManagedClusterPodIdentityOutputWithContext(context.Background())
}

func (i ManagedClusterPodIdentityArgs) ToManagedClusterPodIdentityOutputWithContext(ctx context.Context) ManagedClusterPodIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityOutput)
}

// ManagedClusterPodIdentityArrayInput is an input type that accepts ManagedClusterPodIdentityArray and ManagedClusterPodIdentityArrayOutput values.
// You can construct a concrete instance of `ManagedClusterPodIdentityArrayInput` via:
//
//	ManagedClusterPodIdentityArray{ ManagedClusterPodIdentityArgs{...} }
type ManagedClusterPodIdentityArrayInput interface {
	pulumi.Input

	ToManagedClusterPodIdentityArrayOutput() ManagedClusterPodIdentityArrayOutput
	ToManagedClusterPodIdentityArrayOutputWithContext(context.Context) ManagedClusterPodIdentityArrayOutput
}

type ManagedClusterPodIdentityArray []ManagedClusterPodIdentityInput

func (ManagedClusterPodIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentity)(nil)).Elem()
}

func (i ManagedClusterPodIdentityArray) ToManagedClusterPodIdentityArrayOutput() ManagedClusterPodIdentityArrayOutput {
	return i.ToManagedClusterPodIdentityArrayOutputWithContext(context.Background())
}

func (i ManagedClusterPodIdentityArray) ToManagedClusterPodIdentityArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityArrayOutput)
}

// Details about the pod identity assigned to the Managed Cluster.
type ManagedClusterPodIdentityOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentity)(nil)).Elem()
}

func (o ManagedClusterPodIdentityOutput) ToManagedClusterPodIdentityOutput() ManagedClusterPodIdentityOutput {
	return o
}

func (o ManagedClusterPodIdentityOutput) ToManagedClusterPodIdentityOutputWithContext(ctx context.Context) ManagedClusterPodIdentityOutput {
	return o
}

// The binding selector to use for the AzureIdentityBinding resource.
func (o ManagedClusterPodIdentityOutput) BindingSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentity) *string { return v.BindingSelector }).(pulumi.StringPtrOutput)
}

// The user assigned identity details.
func (o ManagedClusterPodIdentityOutput) Identity() UserAssignedIdentityOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentity) UserAssignedIdentity { return v.Identity }).(UserAssignedIdentityOutput)
}

// The name of the pod identity.
func (o ManagedClusterPodIdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentity) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace of the pod identity.
func (o ManagedClusterPodIdentityOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentity) string { return v.Namespace }).(pulumi.StringOutput)
}

type ManagedClusterPodIdentityArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentity)(nil)).Elem()
}

func (o ManagedClusterPodIdentityArrayOutput) ToManagedClusterPodIdentityArrayOutput() ManagedClusterPodIdentityArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityArrayOutput) ToManagedClusterPodIdentityArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityArrayOutput) Index(i pulumi.IntInput) ManagedClusterPodIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterPodIdentity {
		return vs[0].([]ManagedClusterPodIdentity)[vs[1].(int)]
	}).(ManagedClusterPodIdentityOutput)
}

// See [disable AAD Pod Identity for a specific Pod/Application](https://azure.github.io/aad-pod-identity/docs/configure/application_exception/) for more details.
type ManagedClusterPodIdentityException struct {
	// The name of the pod identity exception.
	Name string `pulumi:"name"`
	// The namespace of the pod identity exception.
	Namespace string `pulumi:"namespace"`
	// The pod labels to match.
	PodLabels map[string]string `pulumi:"podLabels"`
}

// ManagedClusterPodIdentityExceptionInput is an input type that accepts ManagedClusterPodIdentityExceptionArgs and ManagedClusterPodIdentityExceptionOutput values.
// You can construct a concrete instance of `ManagedClusterPodIdentityExceptionInput` via:
//
//	ManagedClusterPodIdentityExceptionArgs{...}
type ManagedClusterPodIdentityExceptionInput interface {
	pulumi.Input

	ToManagedClusterPodIdentityExceptionOutput() ManagedClusterPodIdentityExceptionOutput
	ToManagedClusterPodIdentityExceptionOutputWithContext(context.Context) ManagedClusterPodIdentityExceptionOutput
}

// See [disable AAD Pod Identity for a specific Pod/Application](https://azure.github.io/aad-pod-identity/docs/configure/application_exception/) for more details.
type ManagedClusterPodIdentityExceptionArgs struct {
	// The name of the pod identity exception.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace of the pod identity exception.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The pod labels to match.
	PodLabels pulumi.StringMapInput `pulumi:"podLabels"`
}

func (ManagedClusterPodIdentityExceptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityException)(nil)).Elem()
}

func (i ManagedClusterPodIdentityExceptionArgs) ToManagedClusterPodIdentityExceptionOutput() ManagedClusterPodIdentityExceptionOutput {
	return i.ToManagedClusterPodIdentityExceptionOutputWithContext(context.Background())
}

func (i ManagedClusterPodIdentityExceptionArgs) ToManagedClusterPodIdentityExceptionOutputWithContext(ctx context.Context) ManagedClusterPodIdentityExceptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityExceptionOutput)
}

// ManagedClusterPodIdentityExceptionArrayInput is an input type that accepts ManagedClusterPodIdentityExceptionArray and ManagedClusterPodIdentityExceptionArrayOutput values.
// You can construct a concrete instance of `ManagedClusterPodIdentityExceptionArrayInput` via:
//
//	ManagedClusterPodIdentityExceptionArray{ ManagedClusterPodIdentityExceptionArgs{...} }
type ManagedClusterPodIdentityExceptionArrayInput interface {
	pulumi.Input

	ToManagedClusterPodIdentityExceptionArrayOutput() ManagedClusterPodIdentityExceptionArrayOutput
	ToManagedClusterPodIdentityExceptionArrayOutputWithContext(context.Context) ManagedClusterPodIdentityExceptionArrayOutput
}

type ManagedClusterPodIdentityExceptionArray []ManagedClusterPodIdentityExceptionInput

func (ManagedClusterPodIdentityExceptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentityException)(nil)).Elem()
}

func (i ManagedClusterPodIdentityExceptionArray) ToManagedClusterPodIdentityExceptionArrayOutput() ManagedClusterPodIdentityExceptionArrayOutput {
	return i.ToManagedClusterPodIdentityExceptionArrayOutputWithContext(context.Background())
}

func (i ManagedClusterPodIdentityExceptionArray) ToManagedClusterPodIdentityExceptionArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityExceptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityExceptionArrayOutput)
}

// See [disable AAD Pod Identity for a specific Pod/Application](https://azure.github.io/aad-pod-identity/docs/configure/application_exception/) for more details.
type ManagedClusterPodIdentityExceptionOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityExceptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityException)(nil)).Elem()
}

func (o ManagedClusterPodIdentityExceptionOutput) ToManagedClusterPodIdentityExceptionOutput() ManagedClusterPodIdentityExceptionOutput {
	return o
}

func (o ManagedClusterPodIdentityExceptionOutput) ToManagedClusterPodIdentityExceptionOutputWithContext(ctx context.Context) ManagedClusterPodIdentityExceptionOutput {
	return o
}

// The name of the pod identity exception.
func (o ManagedClusterPodIdentityExceptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityException) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace of the pod identity exception.
func (o ManagedClusterPodIdentityExceptionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityException) string { return v.Namespace }).(pulumi.StringOutput)
}

// The pod labels to match.
func (o ManagedClusterPodIdentityExceptionOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityException) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

type ManagedClusterPodIdentityExceptionArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityExceptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentityException)(nil)).Elem()
}

func (o ManagedClusterPodIdentityExceptionArrayOutput) ToManagedClusterPodIdentityExceptionArrayOutput() ManagedClusterPodIdentityExceptionArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityExceptionArrayOutput) ToManagedClusterPodIdentityExceptionArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityExceptionArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityExceptionArrayOutput) Index(i pulumi.IntInput) ManagedClusterPodIdentityExceptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterPodIdentityException {
		return vs[0].([]ManagedClusterPodIdentityException)[vs[1].(int)]
	}).(ManagedClusterPodIdentityExceptionOutput)
}

// See [disable AAD Pod Identity for a specific Pod/Application](https://azure.github.io/aad-pod-identity/docs/configure/application_exception/) for more details.
type ManagedClusterPodIdentityExceptionResponse struct {
	// The name of the pod identity exception.
	Name string `pulumi:"name"`
	// The namespace of the pod identity exception.
	Namespace string `pulumi:"namespace"`
	// The pod labels to match.
	PodLabels map[string]string `pulumi:"podLabels"`
}

// See [disable AAD Pod Identity for a specific Pod/Application](https://azure.github.io/aad-pod-identity/docs/configure/application_exception/) for more details.
type ManagedClusterPodIdentityExceptionResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityExceptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityExceptionResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityExceptionResponseOutput) ToManagedClusterPodIdentityExceptionResponseOutput() ManagedClusterPodIdentityExceptionResponseOutput {
	return o
}

func (o ManagedClusterPodIdentityExceptionResponseOutput) ToManagedClusterPodIdentityExceptionResponseOutputWithContext(ctx context.Context) ManagedClusterPodIdentityExceptionResponseOutput {
	return o
}

// The name of the pod identity exception.
func (o ManagedClusterPodIdentityExceptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityExceptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace of the pod identity exception.
func (o ManagedClusterPodIdentityExceptionResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityExceptionResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// The pod labels to match.
func (o ManagedClusterPodIdentityExceptionResponseOutput) PodLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityExceptionResponse) map[string]string { return v.PodLabels }).(pulumi.StringMapOutput)
}

type ManagedClusterPodIdentityExceptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityExceptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentityExceptionResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityExceptionResponseArrayOutput) ToManagedClusterPodIdentityExceptionResponseArrayOutput() ManagedClusterPodIdentityExceptionResponseArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityExceptionResponseArrayOutput) ToManagedClusterPodIdentityExceptionResponseArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityExceptionResponseArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityExceptionResponseArrayOutput) Index(i pulumi.IntInput) ManagedClusterPodIdentityExceptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterPodIdentityExceptionResponse {
		return vs[0].([]ManagedClusterPodIdentityExceptionResponse)[vs[1].(int)]
	}).(ManagedClusterPodIdentityExceptionResponseOutput)
}

// See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on pod identity integration.
type ManagedClusterPodIdentityProfile struct {
	// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
	AllowNetworkPluginKubenet *bool `pulumi:"allowNetworkPluginKubenet"`
	// Whether the pod identity addon is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The pod identities to use in the cluster.
	UserAssignedIdentities []ManagedClusterPodIdentity `pulumi:"userAssignedIdentities"`
	// The pod identity exceptions to allow.
	UserAssignedIdentityExceptions []ManagedClusterPodIdentityException `pulumi:"userAssignedIdentityExceptions"`
}

// ManagedClusterPodIdentityProfileInput is an input type that accepts ManagedClusterPodIdentityProfileArgs and ManagedClusterPodIdentityProfileOutput values.
// You can construct a concrete instance of `ManagedClusterPodIdentityProfileInput` via:
//
//	ManagedClusterPodIdentityProfileArgs{...}
type ManagedClusterPodIdentityProfileInput interface {
	pulumi.Input

	ToManagedClusterPodIdentityProfileOutput() ManagedClusterPodIdentityProfileOutput
	ToManagedClusterPodIdentityProfileOutputWithContext(context.Context) ManagedClusterPodIdentityProfileOutput
}

// See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on pod identity integration.
type ManagedClusterPodIdentityProfileArgs struct {
	// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
	AllowNetworkPluginKubenet pulumi.BoolPtrInput `pulumi:"allowNetworkPluginKubenet"`
	// Whether the pod identity addon is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The pod identities to use in the cluster.
	UserAssignedIdentities ManagedClusterPodIdentityArrayInput `pulumi:"userAssignedIdentities"`
	// The pod identity exceptions to allow.
	UserAssignedIdentityExceptions ManagedClusterPodIdentityExceptionArrayInput `pulumi:"userAssignedIdentityExceptions"`
}

func (ManagedClusterPodIdentityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityProfile)(nil)).Elem()
}

func (i ManagedClusterPodIdentityProfileArgs) ToManagedClusterPodIdentityProfileOutput() ManagedClusterPodIdentityProfileOutput {
	return i.ToManagedClusterPodIdentityProfileOutputWithContext(context.Background())
}

func (i ManagedClusterPodIdentityProfileArgs) ToManagedClusterPodIdentityProfileOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityProfileOutput)
}

func (i ManagedClusterPodIdentityProfileArgs) ToManagedClusterPodIdentityProfilePtrOutput() ManagedClusterPodIdentityProfilePtrOutput {
	return i.ToManagedClusterPodIdentityProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterPodIdentityProfileArgs) ToManagedClusterPodIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityProfileOutput).ToManagedClusterPodIdentityProfilePtrOutputWithContext(ctx)
}

// ManagedClusterPodIdentityProfilePtrInput is an input type that accepts ManagedClusterPodIdentityProfileArgs, ManagedClusterPodIdentityProfilePtr and ManagedClusterPodIdentityProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterPodIdentityProfilePtrInput` via:
//
//	        ManagedClusterPodIdentityProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterPodIdentityProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterPodIdentityProfilePtrOutput() ManagedClusterPodIdentityProfilePtrOutput
	ToManagedClusterPodIdentityProfilePtrOutputWithContext(context.Context) ManagedClusterPodIdentityProfilePtrOutput
}

type managedClusterPodIdentityProfilePtrType ManagedClusterPodIdentityProfileArgs

func ManagedClusterPodIdentityProfilePtr(v *ManagedClusterPodIdentityProfileArgs) ManagedClusterPodIdentityProfilePtrInput {
	return (*managedClusterPodIdentityProfilePtrType)(v)
}

func (*managedClusterPodIdentityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPodIdentityProfile)(nil)).Elem()
}

func (i *managedClusterPodIdentityProfilePtrType) ToManagedClusterPodIdentityProfilePtrOutput() ManagedClusterPodIdentityProfilePtrOutput {
	return i.ToManagedClusterPodIdentityProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterPodIdentityProfilePtrType) ToManagedClusterPodIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPodIdentityProfilePtrOutput)
}

// See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on pod identity integration.
type ManagedClusterPodIdentityProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityProfile)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProfileOutput) ToManagedClusterPodIdentityProfileOutput() ManagedClusterPodIdentityProfileOutput {
	return o
}

func (o ManagedClusterPodIdentityProfileOutput) ToManagedClusterPodIdentityProfileOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfileOutput {
	return o
}

func (o ManagedClusterPodIdentityProfileOutput) ToManagedClusterPodIdentityProfilePtrOutput() ManagedClusterPodIdentityProfilePtrOutput {
	return o.ToManagedClusterPodIdentityProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterPodIdentityProfileOutput) ToManagedClusterPodIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterPodIdentityProfile) *ManagedClusterPodIdentityProfile {
		return &v
	}).(ManagedClusterPodIdentityProfilePtrOutput)
}

// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
func (o ManagedClusterPodIdentityProfileOutput) AllowNetworkPluginKubenet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfile) *bool { return v.AllowNetworkPluginKubenet }).(pulumi.BoolPtrOutput)
}

// Whether the pod identity addon is enabled.
func (o ManagedClusterPodIdentityProfileOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfile) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The pod identities to use in the cluster.
func (o ManagedClusterPodIdentityProfileOutput) UserAssignedIdentities() ManagedClusterPodIdentityArrayOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfile) []ManagedClusterPodIdentity { return v.UserAssignedIdentities }).(ManagedClusterPodIdentityArrayOutput)
}

// The pod identity exceptions to allow.
func (o ManagedClusterPodIdentityProfileOutput) UserAssignedIdentityExceptions() ManagedClusterPodIdentityExceptionArrayOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfile) []ManagedClusterPodIdentityException {
		return v.UserAssignedIdentityExceptions
	}).(ManagedClusterPodIdentityExceptionArrayOutput)
}

type ManagedClusterPodIdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPodIdentityProfile)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProfilePtrOutput) ToManagedClusterPodIdentityProfilePtrOutput() ManagedClusterPodIdentityProfilePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProfilePtrOutput) ToManagedClusterPodIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfilePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProfilePtrOutput) Elem() ManagedClusterPodIdentityProfileOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfile) ManagedClusterPodIdentityProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterPodIdentityProfile
		return ret
	}).(ManagedClusterPodIdentityProfileOutput)
}

// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
func (o ManagedClusterPodIdentityProfilePtrOutput) AllowNetworkPluginKubenet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNetworkPluginKubenet
	}).(pulumi.BoolPtrOutput)
}

// Whether the pod identity addon is enabled.
func (o ManagedClusterPodIdentityProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The pod identities to use in the cluster.
func (o ManagedClusterPodIdentityProfilePtrOutput) UserAssignedIdentities() ManagedClusterPodIdentityArrayOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfile) []ManagedClusterPodIdentity {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(ManagedClusterPodIdentityArrayOutput)
}

// The pod identity exceptions to allow.
func (o ManagedClusterPodIdentityProfilePtrOutput) UserAssignedIdentityExceptions() ManagedClusterPodIdentityExceptionArrayOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfile) []ManagedClusterPodIdentityException {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityExceptions
	}).(ManagedClusterPodIdentityExceptionArrayOutput)
}

// See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on pod identity integration.
type ManagedClusterPodIdentityProfileResponse struct {
	// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
	AllowNetworkPluginKubenet *bool `pulumi:"allowNetworkPluginKubenet"`
	// Whether the pod identity addon is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The pod identities to use in the cluster.
	UserAssignedIdentities []ManagedClusterPodIdentityResponse `pulumi:"userAssignedIdentities"`
	// The pod identity exceptions to allow.
	UserAssignedIdentityExceptions []ManagedClusterPodIdentityExceptionResponse `pulumi:"userAssignedIdentityExceptions"`
}

// See [use AAD pod identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity) for more details on pod identity integration.
type ManagedClusterPodIdentityProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityProfileResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProfileResponseOutput) ToManagedClusterPodIdentityProfileResponseOutput() ManagedClusterPodIdentityProfileResponseOutput {
	return o
}

func (o ManagedClusterPodIdentityProfileResponseOutput) ToManagedClusterPodIdentityProfileResponseOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfileResponseOutput {
	return o
}

// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
func (o ManagedClusterPodIdentityProfileResponseOutput) AllowNetworkPluginKubenet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfileResponse) *bool { return v.AllowNetworkPluginKubenet }).(pulumi.BoolPtrOutput)
}

// Whether the pod identity addon is enabled.
func (o ManagedClusterPodIdentityProfileResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfileResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The pod identities to use in the cluster.
func (o ManagedClusterPodIdentityProfileResponseOutput) UserAssignedIdentities() ManagedClusterPodIdentityResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfileResponse) []ManagedClusterPodIdentityResponse {
		return v.UserAssignedIdentities
	}).(ManagedClusterPodIdentityResponseArrayOutput)
}

// The pod identity exceptions to allow.
func (o ManagedClusterPodIdentityProfileResponseOutput) UserAssignedIdentityExceptions() ManagedClusterPodIdentityExceptionResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProfileResponse) []ManagedClusterPodIdentityExceptionResponse {
		return v.UserAssignedIdentityExceptions
	}).(ManagedClusterPodIdentityExceptionResponseArrayOutput)
}

type ManagedClusterPodIdentityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPodIdentityProfileResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProfileResponsePtrOutput) ToManagedClusterPodIdentityProfileResponsePtrOutput() ManagedClusterPodIdentityProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProfileResponsePtrOutput) ToManagedClusterPodIdentityProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProfileResponsePtrOutput) Elem() ManagedClusterPodIdentityProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfileResponse) ManagedClusterPodIdentityProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterPodIdentityProfileResponse
		return ret
	}).(ManagedClusterPodIdentityProfileResponseOutput)
}

// Running in Kubenet is disabled by default due to the security related nature of AAD Pod Identity and the risks of IP spoofing. See [using Kubenet network plugin with AAD Pod Identity](https://docs.microsoft.com/azure/aks/use-azure-ad-pod-identity#using-kubenet-network-plugin-with-azure-active-directory-pod-managed-identities) for more information.
func (o ManagedClusterPodIdentityProfileResponsePtrOutput) AllowNetworkPluginKubenet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNetworkPluginKubenet
	}).(pulumi.BoolPtrOutput)
}

// Whether the pod identity addon is enabled.
func (o ManagedClusterPodIdentityProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The pod identities to use in the cluster.
func (o ManagedClusterPodIdentityProfileResponsePtrOutput) UserAssignedIdentities() ManagedClusterPodIdentityResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfileResponse) []ManagedClusterPodIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(ManagedClusterPodIdentityResponseArrayOutput)
}

// The pod identity exceptions to allow.
func (o ManagedClusterPodIdentityProfileResponsePtrOutput) UserAssignedIdentityExceptions() ManagedClusterPodIdentityExceptionResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProfileResponse) []ManagedClusterPodIdentityExceptionResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityExceptions
	}).(ManagedClusterPodIdentityExceptionResponseArrayOutput)
}

// An error response from the pod identity provisioning.
type ManagedClusterPodIdentityProvisioningErrorBodyResponse struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `pulumi:"code"`
	// A list of additional details about the error.
	Details []ManagedClusterPodIdentityProvisioningErrorBodyResponse `pulumi:"details"`
	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `pulumi:"message"`
	// The target of the particular error. For example, the name of the property in error.
	Target *string `pulumi:"target"`
}

// An error response from the pod identity provisioning.
type ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityProvisioningErrorBodyResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) ToManagedClusterPodIdentityProvisioningErrorBodyResponseOutput() ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) ToManagedClusterPodIdentityProvisioningErrorBodyResponseOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput {
	return o
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProvisioningErrorBodyResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// A list of additional details about the error.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) Details() ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProvisioningErrorBodyResponse) []ManagedClusterPodIdentityProvisioningErrorBodyResponse {
		return v.Details
	}).(ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProvisioningErrorBodyResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The target of the particular error. For example, the name of the property in error.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProvisioningErrorBodyResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPodIdentityProvisioningErrorBodyResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) ToManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput() ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) ToManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) Elem() ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorBodyResponse) ManagedClusterPodIdentityProvisioningErrorBodyResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterPodIdentityProvisioningErrorBodyResponse
		return ret
	}).(ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput)
}

// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorBodyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// A list of additional details about the error.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) Details() ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorBodyResponse) []ManagedClusterPodIdentityProvisioningErrorBodyResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput)
}

// A message describing the error, intended to be suitable for display in a user interface.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorBodyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The target of the particular error. For example, the name of the property in error.
func (o ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorBodyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

type ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentityProvisioningErrorBodyResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput) ToManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput() ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput) ToManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput) Index(i pulumi.IntInput) ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterPodIdentityProvisioningErrorBodyResponse {
		return vs[0].([]ManagedClusterPodIdentityProvisioningErrorBodyResponse)[vs[1].(int)]
	}).(ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput)
}

// An error response from the pod identity provisioning.
type ManagedClusterPodIdentityProvisioningErrorResponse struct {
	// Details about the error.
	Error *ManagedClusterPodIdentityProvisioningErrorBodyResponse `pulumi:"error"`
}

// An error response from the pod identity provisioning.
type ManagedClusterPodIdentityProvisioningErrorResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProvisioningErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityProvisioningErrorResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProvisioningErrorResponseOutput) ToManagedClusterPodIdentityProvisioningErrorResponseOutput() ManagedClusterPodIdentityProvisioningErrorResponseOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorResponseOutput) ToManagedClusterPodIdentityProvisioningErrorResponseOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProvisioningErrorResponseOutput {
	return o
}

// Details about the error.
func (o ManagedClusterPodIdentityProvisioningErrorResponseOutput) Error() ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityProvisioningErrorResponse) *ManagedClusterPodIdentityProvisioningErrorBodyResponse {
		return v.Error
	}).(ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput)
}

type ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPodIdentityProvisioningErrorResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput) ToManagedClusterPodIdentityProvisioningErrorResponsePtrOutput() ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput) ToManagedClusterPodIdentityProvisioningErrorResponsePtrOutputWithContext(ctx context.Context) ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput {
	return o
}

func (o ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput) Elem() ManagedClusterPodIdentityProvisioningErrorResponseOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorResponse) ManagedClusterPodIdentityProvisioningErrorResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterPodIdentityProvisioningErrorResponse
		return ret
	}).(ManagedClusterPodIdentityProvisioningErrorResponseOutput)
}

// Details about the error.
func (o ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput) Error() ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterPodIdentityProvisioningErrorResponse) *ManagedClusterPodIdentityProvisioningErrorBodyResponse {
		if v == nil {
			return nil
		}
		return v.Error
	}).(ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput)
}

// Details about the pod identity assigned to the Managed Cluster.
type ManagedClusterPodIdentityResponse struct {
	// The binding selector to use for the AzureIdentityBinding resource.
	BindingSelector *string `pulumi:"bindingSelector"`
	// The user assigned identity details.
	Identity UserAssignedIdentityResponse `pulumi:"identity"`
	// The name of the pod identity.
	Name string `pulumi:"name"`
	// The namespace of the pod identity.
	Namespace        string                                            `pulumi:"namespace"`
	ProvisioningInfo ManagedClusterPodIdentityResponseProvisioningInfo `pulumi:"provisioningInfo"`
	// The current provisioning state of the pod identity.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Details about the pod identity assigned to the Managed Cluster.
type ManagedClusterPodIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityResponseOutput) ToManagedClusterPodIdentityResponseOutput() ManagedClusterPodIdentityResponseOutput {
	return o
}

func (o ManagedClusterPodIdentityResponseOutput) ToManagedClusterPodIdentityResponseOutputWithContext(ctx context.Context) ManagedClusterPodIdentityResponseOutput {
	return o
}

// The binding selector to use for the AzureIdentityBinding resource.
func (o ManagedClusterPodIdentityResponseOutput) BindingSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponse) *string { return v.BindingSelector }).(pulumi.StringPtrOutput)
}

// The user assigned identity details.
func (o ManagedClusterPodIdentityResponseOutput) Identity() UserAssignedIdentityResponseOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponse) UserAssignedIdentityResponse { return v.Identity }).(UserAssignedIdentityResponseOutput)
}

// The name of the pod identity.
func (o ManagedClusterPodIdentityResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace of the pod identity.
func (o ManagedClusterPodIdentityResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o ManagedClusterPodIdentityResponseOutput) ProvisioningInfo() ManagedClusterPodIdentityResponseProvisioningInfoOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponse) ManagedClusterPodIdentityResponseProvisioningInfo {
		return v.ProvisioningInfo
	}).(ManagedClusterPodIdentityResponseProvisioningInfoOutput)
}

// The current provisioning state of the pod identity.
func (o ManagedClusterPodIdentityResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ManagedClusterPodIdentityResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedClusterPodIdentityResponse)(nil)).Elem()
}

func (o ManagedClusterPodIdentityResponseArrayOutput) ToManagedClusterPodIdentityResponseArrayOutput() ManagedClusterPodIdentityResponseArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityResponseArrayOutput) ToManagedClusterPodIdentityResponseArrayOutputWithContext(ctx context.Context) ManagedClusterPodIdentityResponseArrayOutput {
	return o
}

func (o ManagedClusterPodIdentityResponseArrayOutput) Index(i pulumi.IntInput) ManagedClusterPodIdentityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedClusterPodIdentityResponse {
		return vs[0].([]ManagedClusterPodIdentityResponse)[vs[1].(int)]
	}).(ManagedClusterPodIdentityResponseOutput)
}

type ManagedClusterPodIdentityResponseProvisioningInfo struct {
	// Pod identity assignment error (if any).
	Error *ManagedClusterPodIdentityProvisioningErrorResponse `pulumi:"error"`
}

type ManagedClusterPodIdentityResponseProvisioningInfoOutput struct{ *pulumi.OutputState }

func (ManagedClusterPodIdentityResponseProvisioningInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPodIdentityResponseProvisioningInfo)(nil)).Elem()
}

func (o ManagedClusterPodIdentityResponseProvisioningInfoOutput) ToManagedClusterPodIdentityResponseProvisioningInfoOutput() ManagedClusterPodIdentityResponseProvisioningInfoOutput {
	return o
}

func (o ManagedClusterPodIdentityResponseProvisioningInfoOutput) ToManagedClusterPodIdentityResponseProvisioningInfoOutputWithContext(ctx context.Context) ManagedClusterPodIdentityResponseProvisioningInfoOutput {
	return o
}

// Pod identity assignment error (if any).
func (o ManagedClusterPodIdentityResponseProvisioningInfoOutput) Error() ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterPodIdentityResponseProvisioningInfo) *ManagedClusterPodIdentityProvisioningErrorResponse {
		return v.Error
	}).(ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput)
}

// Parameters to be applied to the cluster-autoscaler when enabled
type ManagedClusterPropertiesAutoScalerProfile struct {
	// Valid values are 'true' and 'false'
	BalanceSimilarNodeGroups *string `pulumi:"balanceSimilarNodeGroups"`
	// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
	DaemonsetEvictionForEmptyNodes *bool `pulumi:"daemonsetEvictionForEmptyNodes"`
	// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
	DaemonsetEvictionForOccupiedNodes *bool `pulumi:"daemonsetEvictionForOccupiedNodes"`
	// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
	Expander *string `pulumi:"expander"`
	// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
	IgnoreDaemonsetsUtilization *bool `pulumi:"ignoreDaemonsetsUtilization"`
	// The default is 10.
	MaxEmptyBulkDelete *string `pulumi:"maxEmptyBulkDelete"`
	// The default is 600.
	MaxGracefulTerminationSec *string `pulumi:"maxGracefulTerminationSec"`
	// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	MaxNodeProvisionTime *string `pulumi:"maxNodeProvisionTime"`
	// The default is 45. The maximum is 100 and the minimum is 0.
	MaxTotalUnreadyPercentage *string `pulumi:"maxTotalUnreadyPercentage"`
	// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
	NewPodScaleUpDelay *string `pulumi:"newPodScaleUpDelay"`
	// This must be an integer. The default is 3.
	OkTotalUnreadyCount *string `pulumi:"okTotalUnreadyCount"`
	// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterAdd *string `pulumi:"scaleDownDelayAfterAdd"`
	// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterDelete *string `pulumi:"scaleDownDelayAfterDelete"`
	// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterFailure *string `pulumi:"scaleDownDelayAfterFailure"`
	// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownUnneededTime *string `pulumi:"scaleDownUnneededTime"`
	// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownUnreadyTime *string `pulumi:"scaleDownUnreadyTime"`
	// The default is '0.5'.
	ScaleDownUtilizationThreshold *string `pulumi:"scaleDownUtilizationThreshold"`
	// The default is '10'. Values must be an integer number of seconds.
	ScanInterval *string `pulumi:"scanInterval"`
	// The default is true.
	SkipNodesWithLocalStorage *string `pulumi:"skipNodesWithLocalStorage"`
	// The default is true.
	SkipNodesWithSystemPods *string `pulumi:"skipNodesWithSystemPods"`
}

// ManagedClusterPropertiesAutoScalerProfileInput is an input type that accepts ManagedClusterPropertiesAutoScalerProfileArgs and ManagedClusterPropertiesAutoScalerProfileOutput values.
// You can construct a concrete instance of `ManagedClusterPropertiesAutoScalerProfileInput` via:
//
//	ManagedClusterPropertiesAutoScalerProfileArgs{...}
type ManagedClusterPropertiesAutoScalerProfileInput interface {
	pulumi.Input

	ToManagedClusterPropertiesAutoScalerProfileOutput() ManagedClusterPropertiesAutoScalerProfileOutput
	ToManagedClusterPropertiesAutoScalerProfileOutputWithContext(context.Context) ManagedClusterPropertiesAutoScalerProfileOutput
}

// Parameters to be applied to the cluster-autoscaler when enabled
type ManagedClusterPropertiesAutoScalerProfileArgs struct {
	// Valid values are 'true' and 'false'
	BalanceSimilarNodeGroups pulumi.StringPtrInput `pulumi:"balanceSimilarNodeGroups"`
	// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
	DaemonsetEvictionForEmptyNodes pulumi.BoolPtrInput `pulumi:"daemonsetEvictionForEmptyNodes"`
	// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
	DaemonsetEvictionForOccupiedNodes pulumi.BoolPtrInput `pulumi:"daemonsetEvictionForOccupiedNodes"`
	// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
	Expander pulumi.StringPtrInput `pulumi:"expander"`
	// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
	IgnoreDaemonsetsUtilization pulumi.BoolPtrInput `pulumi:"ignoreDaemonsetsUtilization"`
	// The default is 10.
	MaxEmptyBulkDelete pulumi.StringPtrInput `pulumi:"maxEmptyBulkDelete"`
	// The default is 600.
	MaxGracefulTerminationSec pulumi.StringPtrInput `pulumi:"maxGracefulTerminationSec"`
	// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	MaxNodeProvisionTime pulumi.StringPtrInput `pulumi:"maxNodeProvisionTime"`
	// The default is 45. The maximum is 100 and the minimum is 0.
	MaxTotalUnreadyPercentage pulumi.StringPtrInput `pulumi:"maxTotalUnreadyPercentage"`
	// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
	NewPodScaleUpDelay pulumi.StringPtrInput `pulumi:"newPodScaleUpDelay"`
	// This must be an integer. The default is 3.
	OkTotalUnreadyCount pulumi.StringPtrInput `pulumi:"okTotalUnreadyCount"`
	// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterAdd pulumi.StringPtrInput `pulumi:"scaleDownDelayAfterAdd"`
	// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterDelete pulumi.StringPtrInput `pulumi:"scaleDownDelayAfterDelete"`
	// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterFailure pulumi.StringPtrInput `pulumi:"scaleDownDelayAfterFailure"`
	// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownUnneededTime pulumi.StringPtrInput `pulumi:"scaleDownUnneededTime"`
	// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownUnreadyTime pulumi.StringPtrInput `pulumi:"scaleDownUnreadyTime"`
	// The default is '0.5'.
	ScaleDownUtilizationThreshold pulumi.StringPtrInput `pulumi:"scaleDownUtilizationThreshold"`
	// The default is '10'. Values must be an integer number of seconds.
	ScanInterval pulumi.StringPtrInput `pulumi:"scanInterval"`
	// The default is true.
	SkipNodesWithLocalStorage pulumi.StringPtrInput `pulumi:"skipNodesWithLocalStorage"`
	// The default is true.
	SkipNodesWithSystemPods pulumi.StringPtrInput `pulumi:"skipNodesWithSystemPods"`
}

func (ManagedClusterPropertiesAutoScalerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPropertiesAutoScalerProfile)(nil)).Elem()
}

func (i ManagedClusterPropertiesAutoScalerProfileArgs) ToManagedClusterPropertiesAutoScalerProfileOutput() ManagedClusterPropertiesAutoScalerProfileOutput {
	return i.ToManagedClusterPropertiesAutoScalerProfileOutputWithContext(context.Background())
}

func (i ManagedClusterPropertiesAutoScalerProfileArgs) ToManagedClusterPropertiesAutoScalerProfileOutputWithContext(ctx context.Context) ManagedClusterPropertiesAutoScalerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPropertiesAutoScalerProfileOutput)
}

func (i ManagedClusterPropertiesAutoScalerProfileArgs) ToManagedClusterPropertiesAutoScalerProfilePtrOutput() ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return i.ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterPropertiesAutoScalerProfileArgs) ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPropertiesAutoScalerProfileOutput).ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(ctx)
}

// ManagedClusterPropertiesAutoScalerProfilePtrInput is an input type that accepts ManagedClusterPropertiesAutoScalerProfileArgs, ManagedClusterPropertiesAutoScalerProfilePtr and ManagedClusterPropertiesAutoScalerProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterPropertiesAutoScalerProfilePtrInput` via:
//
//	        ManagedClusterPropertiesAutoScalerProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterPropertiesAutoScalerProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterPropertiesAutoScalerProfilePtrOutput() ManagedClusterPropertiesAutoScalerProfilePtrOutput
	ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(context.Context) ManagedClusterPropertiesAutoScalerProfilePtrOutput
}

type managedClusterPropertiesAutoScalerProfilePtrType ManagedClusterPropertiesAutoScalerProfileArgs

func ManagedClusterPropertiesAutoScalerProfilePtr(v *ManagedClusterPropertiesAutoScalerProfileArgs) ManagedClusterPropertiesAutoScalerProfilePtrInput {
	return (*managedClusterPropertiesAutoScalerProfilePtrType)(v)
}

func (*managedClusterPropertiesAutoScalerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPropertiesAutoScalerProfile)(nil)).Elem()
}

func (i *managedClusterPropertiesAutoScalerProfilePtrType) ToManagedClusterPropertiesAutoScalerProfilePtrOutput() ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return i.ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterPropertiesAutoScalerProfilePtrType) ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterPropertiesAutoScalerProfilePtrOutput)
}

// Parameters to be applied to the cluster-autoscaler when enabled
type ManagedClusterPropertiesAutoScalerProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterPropertiesAutoScalerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPropertiesAutoScalerProfile)(nil)).Elem()
}

func (o ManagedClusterPropertiesAutoScalerProfileOutput) ToManagedClusterPropertiesAutoScalerProfileOutput() ManagedClusterPropertiesAutoScalerProfileOutput {
	return o
}

func (o ManagedClusterPropertiesAutoScalerProfileOutput) ToManagedClusterPropertiesAutoScalerProfileOutputWithContext(ctx context.Context) ManagedClusterPropertiesAutoScalerProfileOutput {
	return o
}

func (o ManagedClusterPropertiesAutoScalerProfileOutput) ToManagedClusterPropertiesAutoScalerProfilePtrOutput() ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return o.ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterPropertiesAutoScalerProfileOutput) ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterPropertiesAutoScalerProfile) *ManagedClusterPropertiesAutoScalerProfile {
		return &v
	}).(ManagedClusterPropertiesAutoScalerProfilePtrOutput)
}

// Valid values are 'true' and 'false'
func (o ManagedClusterPropertiesAutoScalerProfileOutput) BalanceSimilarNodeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.BalanceSimilarNodeGroups }).(pulumi.StringPtrOutput)
}

// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) DaemonsetEvictionForEmptyNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *bool { return v.DaemonsetEvictionForEmptyNodes }).(pulumi.BoolPtrOutput)
}

// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) DaemonsetEvictionForOccupiedNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *bool { return v.DaemonsetEvictionForOccupiedNodes }).(pulumi.BoolPtrOutput)
}

// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) Expander() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.Expander }).(pulumi.StringPtrOutput)
}

// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) IgnoreDaemonsetsUtilization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *bool { return v.IgnoreDaemonsetsUtilization }).(pulumi.BoolPtrOutput)
}

// The default is 10.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) MaxEmptyBulkDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.MaxEmptyBulkDelete }).(pulumi.StringPtrOutput)
}

// The default is 600.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) MaxGracefulTerminationSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.MaxGracefulTerminationSec }).(pulumi.StringPtrOutput)
}

// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) MaxNodeProvisionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.MaxNodeProvisionTime }).(pulumi.StringPtrOutput)
}

// The default is 45. The maximum is 100 and the minimum is 0.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) MaxTotalUnreadyPercentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.MaxTotalUnreadyPercentage }).(pulumi.StringPtrOutput)
}

// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
func (o ManagedClusterPropertiesAutoScalerProfileOutput) NewPodScaleUpDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.NewPodScaleUpDelay }).(pulumi.StringPtrOutput)
}

// This must be an integer. The default is 3.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) OkTotalUnreadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.OkTotalUnreadyCount }).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScaleDownDelayAfterAdd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScaleDownDelayAfterAdd }).(pulumi.StringPtrOutput)
}

// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScaleDownDelayAfterDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScaleDownDelayAfterDelete }).(pulumi.StringPtrOutput)
}

// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScaleDownDelayAfterFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScaleDownDelayAfterFailure }).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScaleDownUnneededTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScaleDownUnneededTime }).(pulumi.StringPtrOutput)
}

// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScaleDownUnreadyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScaleDownUnreadyTime }).(pulumi.StringPtrOutput)
}

// The default is '0.5'.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScaleDownUtilizationThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScaleDownUtilizationThreshold }).(pulumi.StringPtrOutput)
}

// The default is '10'. Values must be an integer number of seconds.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) ScanInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.ScanInterval }).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) SkipNodesWithLocalStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.SkipNodesWithLocalStorage }).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesAutoScalerProfileOutput) SkipNodesWithSystemPods() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesAutoScalerProfile) *string { return v.SkipNodesWithSystemPods }).(pulumi.StringPtrOutput)
}

type ManagedClusterPropertiesAutoScalerProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterPropertiesAutoScalerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPropertiesAutoScalerProfile)(nil)).Elem()
}

func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ToManagedClusterPropertiesAutoScalerProfilePtrOutput() ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return o
}

func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ToManagedClusterPropertiesAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPropertiesAutoScalerProfilePtrOutput {
	return o
}

func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) Elem() ManagedClusterPropertiesAutoScalerProfileOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) ManagedClusterPropertiesAutoScalerProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterPropertiesAutoScalerProfile
		return ret
	}).(ManagedClusterPropertiesAutoScalerProfileOutput)
}

// Valid values are 'true' and 'false'
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) BalanceSimilarNodeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.BalanceSimilarNodeGroups
	}).(pulumi.StringPtrOutput)
}

// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) DaemonsetEvictionForEmptyNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DaemonsetEvictionForEmptyNodes
	}).(pulumi.BoolPtrOutput)
}

// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) DaemonsetEvictionForOccupiedNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DaemonsetEvictionForOccupiedNodes
	}).(pulumi.BoolPtrOutput)
}

// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) Expander() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.Expander
	}).(pulumi.StringPtrOutput)
}

// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) IgnoreDaemonsetsUtilization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreDaemonsetsUtilization
	}).(pulumi.BoolPtrOutput)
}

// The default is 10.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) MaxEmptyBulkDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxEmptyBulkDelete
	}).(pulumi.StringPtrOutput)
}

// The default is 600.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) MaxGracefulTerminationSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxGracefulTerminationSec
	}).(pulumi.StringPtrOutput)
}

// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) MaxNodeProvisionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxNodeProvisionTime
	}).(pulumi.StringPtrOutput)
}

// The default is 45. The maximum is 100 and the minimum is 0.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) MaxTotalUnreadyPercentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxTotalUnreadyPercentage
	}).(pulumi.StringPtrOutput)
}

// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) NewPodScaleUpDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.NewPodScaleUpDelay
	}).(pulumi.StringPtrOutput)
}

// This must be an integer. The default is 3.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) OkTotalUnreadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.OkTotalUnreadyCount
	}).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScaleDownDelayAfterAdd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterAdd
	}).(pulumi.StringPtrOutput)
}

// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScaleDownDelayAfterDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterDelete
	}).(pulumi.StringPtrOutput)
}

// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScaleDownDelayAfterFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterFailure
	}).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScaleDownUnneededTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUnneededTime
	}).(pulumi.StringPtrOutput)
}

// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScaleDownUnreadyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUnreadyTime
	}).(pulumi.StringPtrOutput)
}

// The default is '0.5'.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScaleDownUtilizationThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUtilizationThreshold
	}).(pulumi.StringPtrOutput)
}

// The default is '10'. Values must be an integer number of seconds.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) ScanInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScanInterval
	}).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) SkipNodesWithLocalStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.SkipNodesWithLocalStorage
	}).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesAutoScalerProfilePtrOutput) SkipNodesWithSystemPods() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.SkipNodesWithSystemPods
	}).(pulumi.StringPtrOutput)
}

// managed cluster properties for snapshot, these properties are read only.
type ManagedClusterPropertiesForSnapshotResponse struct {
	// Whether the cluster has enabled Kubernetes Role-Based Access Control or not.
	EnableRbac *bool `pulumi:"enableRbac"`
	// The current kubernetes version.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// The current network profile.
	NetworkProfile NetworkProfileForSnapshotResponse `pulumi:"networkProfile"`
	// The current managed cluster sku.
	Sku *ManagedClusterSKUResponse `pulumi:"sku"`
}

// managed cluster properties for snapshot, these properties are read only.
type ManagedClusterPropertiesForSnapshotResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterPropertiesForSnapshotResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPropertiesForSnapshotResponse)(nil)).Elem()
}

func (o ManagedClusterPropertiesForSnapshotResponseOutput) ToManagedClusterPropertiesForSnapshotResponseOutput() ManagedClusterPropertiesForSnapshotResponseOutput {
	return o
}

func (o ManagedClusterPropertiesForSnapshotResponseOutput) ToManagedClusterPropertiesForSnapshotResponseOutputWithContext(ctx context.Context) ManagedClusterPropertiesForSnapshotResponseOutput {
	return o
}

// Whether the cluster has enabled Kubernetes Role-Based Access Control or not.
func (o ManagedClusterPropertiesForSnapshotResponseOutput) EnableRbac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesForSnapshotResponse) *bool { return v.EnableRbac }).(pulumi.BoolPtrOutput)
}

// The current kubernetes version.
func (o ManagedClusterPropertiesForSnapshotResponseOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesForSnapshotResponse) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// The current network profile.
func (o ManagedClusterPropertiesForSnapshotResponseOutput) NetworkProfile() NetworkProfileForSnapshotResponseOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesForSnapshotResponse) NetworkProfileForSnapshotResponse {
		return v.NetworkProfile
	}).(NetworkProfileForSnapshotResponseOutput)
}

// The current managed cluster sku.
func (o ManagedClusterPropertiesForSnapshotResponseOutput) Sku() ManagedClusterSKUResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesForSnapshotResponse) *ManagedClusterSKUResponse { return v.Sku }).(ManagedClusterSKUResponsePtrOutput)
}

// Parameters to be applied to the cluster-autoscaler when enabled
type ManagedClusterPropertiesResponseAutoScalerProfile struct {
	// Valid values are 'true' and 'false'
	BalanceSimilarNodeGroups *string `pulumi:"balanceSimilarNodeGroups"`
	// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
	DaemonsetEvictionForEmptyNodes *bool `pulumi:"daemonsetEvictionForEmptyNodes"`
	// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
	DaemonsetEvictionForOccupiedNodes *bool `pulumi:"daemonsetEvictionForOccupiedNodes"`
	// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
	Expander *string `pulumi:"expander"`
	// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
	IgnoreDaemonsetsUtilization *bool `pulumi:"ignoreDaemonsetsUtilization"`
	// The default is 10.
	MaxEmptyBulkDelete *string `pulumi:"maxEmptyBulkDelete"`
	// The default is 600.
	MaxGracefulTerminationSec *string `pulumi:"maxGracefulTerminationSec"`
	// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	MaxNodeProvisionTime *string `pulumi:"maxNodeProvisionTime"`
	// The default is 45. The maximum is 100 and the minimum is 0.
	MaxTotalUnreadyPercentage *string `pulumi:"maxTotalUnreadyPercentage"`
	// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
	NewPodScaleUpDelay *string `pulumi:"newPodScaleUpDelay"`
	// This must be an integer. The default is 3.
	OkTotalUnreadyCount *string `pulumi:"okTotalUnreadyCount"`
	// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterAdd *string `pulumi:"scaleDownDelayAfterAdd"`
	// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterDelete *string `pulumi:"scaleDownDelayAfterDelete"`
	// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownDelayAfterFailure *string `pulumi:"scaleDownDelayAfterFailure"`
	// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownUnneededTime *string `pulumi:"scaleDownUnneededTime"`
	// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
	ScaleDownUnreadyTime *string `pulumi:"scaleDownUnreadyTime"`
	// The default is '0.5'.
	ScaleDownUtilizationThreshold *string `pulumi:"scaleDownUtilizationThreshold"`
	// The default is '10'. Values must be an integer number of seconds.
	ScanInterval *string `pulumi:"scanInterval"`
	// The default is true.
	SkipNodesWithLocalStorage *string `pulumi:"skipNodesWithLocalStorage"`
	// The default is true.
	SkipNodesWithSystemPods *string `pulumi:"skipNodesWithSystemPods"`
}

// Parameters to be applied to the cluster-autoscaler when enabled
type ManagedClusterPropertiesResponseAutoScalerProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterPropertiesResponseAutoScalerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterPropertiesResponseAutoScalerProfile)(nil)).Elem()
}

func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ToManagedClusterPropertiesResponseAutoScalerProfileOutput() ManagedClusterPropertiesResponseAutoScalerProfileOutput {
	return o
}

func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ToManagedClusterPropertiesResponseAutoScalerProfileOutputWithContext(ctx context.Context) ManagedClusterPropertiesResponseAutoScalerProfileOutput {
	return o
}

// Valid values are 'true' and 'false'
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) BalanceSimilarNodeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.BalanceSimilarNodeGroups }).(pulumi.StringPtrOutput)
}

// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) DaemonsetEvictionForEmptyNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *bool {
		return v.DaemonsetEvictionForEmptyNodes
	}).(pulumi.BoolPtrOutput)
}

// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) DaemonsetEvictionForOccupiedNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *bool {
		return v.DaemonsetEvictionForOccupiedNodes
	}).(pulumi.BoolPtrOutput)
}

// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) Expander() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.Expander }).(pulumi.StringPtrOutput)
}

// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) IgnoreDaemonsetsUtilization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *bool { return v.IgnoreDaemonsetsUtilization }).(pulumi.BoolPtrOutput)
}

// The default is 10.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) MaxEmptyBulkDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.MaxEmptyBulkDelete }).(pulumi.StringPtrOutput)
}

// The default is 600.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) MaxGracefulTerminationSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.MaxGracefulTerminationSec }).(pulumi.StringPtrOutput)
}

// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) MaxNodeProvisionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.MaxNodeProvisionTime }).(pulumi.StringPtrOutput)
}

// The default is 45. The maximum is 100 and the minimum is 0.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) MaxTotalUnreadyPercentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.MaxTotalUnreadyPercentage }).(pulumi.StringPtrOutput)
}

// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) NewPodScaleUpDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.NewPodScaleUpDelay }).(pulumi.StringPtrOutput)
}

// This must be an integer. The default is 3.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) OkTotalUnreadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.OkTotalUnreadyCount }).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScaleDownDelayAfterAdd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.ScaleDownDelayAfterAdd }).(pulumi.StringPtrOutput)
}

// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScaleDownDelayAfterDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.ScaleDownDelayAfterDelete }).(pulumi.StringPtrOutput)
}

// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScaleDownDelayAfterFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.ScaleDownDelayAfterFailure }).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScaleDownUnneededTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.ScaleDownUnneededTime }).(pulumi.StringPtrOutput)
}

// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScaleDownUnreadyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.ScaleDownUnreadyTime }).(pulumi.StringPtrOutput)
}

// The default is '0.5'.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScaleDownUtilizationThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		return v.ScaleDownUtilizationThreshold
	}).(pulumi.StringPtrOutput)
}

// The default is '10'. Values must be an integer number of seconds.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) ScanInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.ScanInterval }).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) SkipNodesWithLocalStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.SkipNodesWithLocalStorage }).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesResponseAutoScalerProfileOutput) SkipNodesWithSystemPods() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterPropertiesResponseAutoScalerProfile) *string { return v.SkipNodesWithSystemPods }).(pulumi.StringPtrOutput)
}

type ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterPropertiesResponseAutoScalerProfile)(nil)).Elem()
}

func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ToManagedClusterPropertiesResponseAutoScalerProfilePtrOutput() ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput {
	return o
}

func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ToManagedClusterPropertiesResponseAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput {
	return o
}

func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) Elem() ManagedClusterPropertiesResponseAutoScalerProfileOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) ManagedClusterPropertiesResponseAutoScalerProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterPropertiesResponseAutoScalerProfile
		return ret
	}).(ManagedClusterPropertiesResponseAutoScalerProfileOutput)
}

// Valid values are 'true' and 'false'
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) BalanceSimilarNodeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.BalanceSimilarNodeGroups
	}).(pulumi.StringPtrOutput)
}

// If set to true, all daemonset pods on empty nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) DaemonsetEvictionForEmptyNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DaemonsetEvictionForEmptyNodes
	}).(pulumi.BoolPtrOutput)
}

// If set to true, all daemonset pods on occupied nodes will be evicted before deletion of the node. If the daemonset pod cannot be evicted another node will be chosen for scaling. If set to false, the node will be deleted without ensuring that daemonset pods are deleted or evicted.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) DaemonsetEvictionForOccupiedNodes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DaemonsetEvictionForOccupiedNodes
	}).(pulumi.BoolPtrOutput)
}

// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) Expander() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.Expander
	}).(pulumi.StringPtrOutput)
}

// If set to true, the resources used by daemonset will be taken into account when making scaling down decisions.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) IgnoreDaemonsetsUtilization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreDaemonsetsUtilization
	}).(pulumi.BoolPtrOutput)
}

// The default is 10.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) MaxEmptyBulkDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxEmptyBulkDelete
	}).(pulumi.StringPtrOutput)
}

// The default is 600.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) MaxGracefulTerminationSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxGracefulTerminationSec
	}).(pulumi.StringPtrOutput)
}

// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) MaxNodeProvisionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxNodeProvisionTime
	}).(pulumi.StringPtrOutput)
}

// The default is 45. The maximum is 100 and the minimum is 0.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) MaxTotalUnreadyPercentage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.MaxTotalUnreadyPercentage
	}).(pulumi.StringPtrOutput)
}

// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) NewPodScaleUpDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.NewPodScaleUpDelay
	}).(pulumi.StringPtrOutput)
}

// This must be an integer. The default is 3.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) OkTotalUnreadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.OkTotalUnreadyCount
	}).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScaleDownDelayAfterAdd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterAdd
	}).(pulumi.StringPtrOutput)
}

// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScaleDownDelayAfterDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterDelete
	}).(pulumi.StringPtrOutput)
}

// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScaleDownDelayAfterFailure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownDelayAfterFailure
	}).(pulumi.StringPtrOutput)
}

// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScaleDownUnneededTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUnneededTime
	}).(pulumi.StringPtrOutput)
}

// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScaleDownUnreadyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUnreadyTime
	}).(pulumi.StringPtrOutput)
}

// The default is '0.5'.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScaleDownUtilizationThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScaleDownUtilizationThreshold
	}).(pulumi.StringPtrOutput)
}

// The default is '10'. Values must be an integer number of seconds.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) ScanInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.ScanInterval
	}).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) SkipNodesWithLocalStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.SkipNodesWithLocalStorage
	}).(pulumi.StringPtrOutput)
}

// The default is true.
func (o ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput) SkipNodesWithSystemPods() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterPropertiesResponseAutoScalerProfile) *string {
		if v == nil {
			return nil
		}
		return v.SkipNodesWithSystemPods
	}).(pulumi.StringPtrOutput)
}

// The SKU of a Managed Cluster.
type ManagedClusterSKU struct {
	// The name of a managed cluster SKU.
	Name *string `pulumi:"name"`
	// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
	Tier *string `pulumi:"tier"`
}

// ManagedClusterSKUInput is an input type that accepts ManagedClusterSKUArgs and ManagedClusterSKUOutput values.
// You can construct a concrete instance of `ManagedClusterSKUInput` via:
//
//	ManagedClusterSKUArgs{...}
type ManagedClusterSKUInput interface {
	pulumi.Input

	ToManagedClusterSKUOutput() ManagedClusterSKUOutput
	ToManagedClusterSKUOutputWithContext(context.Context) ManagedClusterSKUOutput
}

// The SKU of a Managed Cluster.
type ManagedClusterSKUArgs struct {
	// The name of a managed cluster SKU.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (ManagedClusterSKUArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKU)(nil)).Elem()
}

func (i ManagedClusterSKUArgs) ToManagedClusterSKUOutput() ManagedClusterSKUOutput {
	return i.ToManagedClusterSKUOutputWithContext(context.Background())
}

func (i ManagedClusterSKUArgs) ToManagedClusterSKUOutputWithContext(ctx context.Context) ManagedClusterSKUOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSKUOutput)
}

func (i ManagedClusterSKUArgs) ToManagedClusterSKUPtrOutput() ManagedClusterSKUPtrOutput {
	return i.ToManagedClusterSKUPtrOutputWithContext(context.Background())
}

func (i ManagedClusterSKUArgs) ToManagedClusterSKUPtrOutputWithContext(ctx context.Context) ManagedClusterSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSKUOutput).ToManagedClusterSKUPtrOutputWithContext(ctx)
}

// ManagedClusterSKUPtrInput is an input type that accepts ManagedClusterSKUArgs, ManagedClusterSKUPtr and ManagedClusterSKUPtrOutput values.
// You can construct a concrete instance of `ManagedClusterSKUPtrInput` via:
//
//	        ManagedClusterSKUArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterSKUPtrInput interface {
	pulumi.Input

	ToManagedClusterSKUPtrOutput() ManagedClusterSKUPtrOutput
	ToManagedClusterSKUPtrOutputWithContext(context.Context) ManagedClusterSKUPtrOutput
}

type managedClusterSKUPtrType ManagedClusterSKUArgs

func ManagedClusterSKUPtr(v *ManagedClusterSKUArgs) ManagedClusterSKUPtrInput {
	return (*managedClusterSKUPtrType)(v)
}

func (*managedClusterSKUPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSKU)(nil)).Elem()
}

func (i *managedClusterSKUPtrType) ToManagedClusterSKUPtrOutput() ManagedClusterSKUPtrOutput {
	return i.ToManagedClusterSKUPtrOutputWithContext(context.Background())
}

func (i *managedClusterSKUPtrType) ToManagedClusterSKUPtrOutputWithContext(ctx context.Context) ManagedClusterSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSKUPtrOutput)
}

// The SKU of a Managed Cluster.
type ManagedClusterSKUOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKU)(nil)).Elem()
}

func (o ManagedClusterSKUOutput) ToManagedClusterSKUOutput() ManagedClusterSKUOutput {
	return o
}

func (o ManagedClusterSKUOutput) ToManagedClusterSKUOutputWithContext(ctx context.Context) ManagedClusterSKUOutput {
	return o
}

func (o ManagedClusterSKUOutput) ToManagedClusterSKUPtrOutput() ManagedClusterSKUPtrOutput {
	return o.ToManagedClusterSKUPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSKUOutput) ToManagedClusterSKUPtrOutputWithContext(ctx context.Context) ManagedClusterSKUPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSKU) *ManagedClusterSKU {
		return &v
	}).(ManagedClusterSKUPtrOutput)
}

// The name of a managed cluster SKU.
func (o ManagedClusterSKUOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSKU) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
func (o ManagedClusterSKUOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSKU) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ManagedClusterSKUPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSKU)(nil)).Elem()
}

func (o ManagedClusterSKUPtrOutput) ToManagedClusterSKUPtrOutput() ManagedClusterSKUPtrOutput {
	return o
}

func (o ManagedClusterSKUPtrOutput) ToManagedClusterSKUPtrOutputWithContext(ctx context.Context) ManagedClusterSKUPtrOutput {
	return o
}

func (o ManagedClusterSKUPtrOutput) Elem() ManagedClusterSKUOutput {
	return o.ApplyT(func(v *ManagedClusterSKU) ManagedClusterSKU {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSKU
		return ret
	}).(ManagedClusterSKUOutput)
}

// The name of a managed cluster SKU.
func (o ManagedClusterSKUPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSKU) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
func (o ManagedClusterSKUPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSKU) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The SKU of a Managed Cluster.
type ManagedClusterSKUResponse struct {
	// The name of a managed cluster SKU.
	Name *string `pulumi:"name"`
	// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
	Tier *string `pulumi:"tier"`
}

// The SKU of a Managed Cluster.
type ManagedClusterSKUResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSKUResponse)(nil)).Elem()
}

func (o ManagedClusterSKUResponseOutput) ToManagedClusterSKUResponseOutput() ManagedClusterSKUResponseOutput {
	return o
}

func (o ManagedClusterSKUResponseOutput) ToManagedClusterSKUResponseOutputWithContext(ctx context.Context) ManagedClusterSKUResponseOutput {
	return o
}

// The name of a managed cluster SKU.
func (o ManagedClusterSKUResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSKUResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
func (o ManagedClusterSKUResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSKUResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ManagedClusterSKUResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSKUResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSKUResponse)(nil)).Elem()
}

func (o ManagedClusterSKUResponsePtrOutput) ToManagedClusterSKUResponsePtrOutput() ManagedClusterSKUResponsePtrOutput {
	return o
}

func (o ManagedClusterSKUResponsePtrOutput) ToManagedClusterSKUResponsePtrOutputWithContext(ctx context.Context) ManagedClusterSKUResponsePtrOutput {
	return o
}

func (o ManagedClusterSKUResponsePtrOutput) Elem() ManagedClusterSKUResponseOutput {
	return o.ApplyT(func(v *ManagedClusterSKUResponse) ManagedClusterSKUResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSKUResponse
		return ret
	}).(ManagedClusterSKUResponseOutput)
}

// The name of a managed cluster SKU.
func (o ManagedClusterSKUResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSKUResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// If not specified, the default is 'Free'. See [AKS Pricing Tier](https://learn.microsoft.com/azure/aks/free-standard-pricing-tiers) for more details.
func (o ManagedClusterSKUResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSKUResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Security profile for the container service cluster.
type ManagedClusterSecurityProfile struct {
	// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
	AzureKeyVaultKms *AzureKeyVaultKms `pulumi:"azureKeyVaultKms"`
	// Microsoft Defender settings for the security profile.
	Defender *ManagedClusterSecurityProfileDefender `pulumi:"defender"`
	// Image Cleaner settings for the security profile.
	ImageCleaner *ManagedClusterSecurityProfileImageCleaner `pulumi:"imageCleaner"`
	// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
	WorkloadIdentity *ManagedClusterSecurityProfileWorkloadIdentity `pulumi:"workloadIdentity"`
}

// Defaults sets the appropriate defaults for ManagedClusterSecurityProfile
func (val *ManagedClusterSecurityProfile) Defaults() *ManagedClusterSecurityProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AzureKeyVaultKms = tmp.AzureKeyVaultKms.Defaults()

	return &tmp
}

// ManagedClusterSecurityProfileInput is an input type that accepts ManagedClusterSecurityProfileArgs and ManagedClusterSecurityProfileOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileInput` via:
//
//	ManagedClusterSecurityProfileArgs{...}
type ManagedClusterSecurityProfileInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileOutput() ManagedClusterSecurityProfileOutput
	ToManagedClusterSecurityProfileOutputWithContext(context.Context) ManagedClusterSecurityProfileOutput
}

// Security profile for the container service cluster.
type ManagedClusterSecurityProfileArgs struct {
	// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
	AzureKeyVaultKms AzureKeyVaultKmsPtrInput `pulumi:"azureKeyVaultKms"`
	// Microsoft Defender settings for the security profile.
	Defender ManagedClusterSecurityProfileDefenderPtrInput `pulumi:"defender"`
	// Image Cleaner settings for the security profile.
	ImageCleaner ManagedClusterSecurityProfileImageCleanerPtrInput `pulumi:"imageCleaner"`
	// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
	WorkloadIdentity ManagedClusterSecurityProfileWorkloadIdentityPtrInput `pulumi:"workloadIdentity"`
}

// Defaults sets the appropriate defaults for ManagedClusterSecurityProfileArgs
func (val *ManagedClusterSecurityProfileArgs) Defaults() *ManagedClusterSecurityProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ManagedClusterSecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfile)(nil)).Elem()
}

func (i ManagedClusterSecurityProfileArgs) ToManagedClusterSecurityProfileOutput() ManagedClusterSecurityProfileOutput {
	return i.ToManagedClusterSecurityProfileOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileArgs) ToManagedClusterSecurityProfileOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileOutput)
}

func (i ManagedClusterSecurityProfileArgs) ToManagedClusterSecurityProfilePtrOutput() ManagedClusterSecurityProfilePtrOutput {
	return i.ToManagedClusterSecurityProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileArgs) ToManagedClusterSecurityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileOutput).ToManagedClusterSecurityProfilePtrOutputWithContext(ctx)
}

// ManagedClusterSecurityProfilePtrInput is an input type that accepts ManagedClusterSecurityProfileArgs, ManagedClusterSecurityProfilePtr and ManagedClusterSecurityProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfilePtrInput` via:
//
//	        ManagedClusterSecurityProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterSecurityProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfilePtrOutput() ManagedClusterSecurityProfilePtrOutput
	ToManagedClusterSecurityProfilePtrOutputWithContext(context.Context) ManagedClusterSecurityProfilePtrOutput
}

type managedClusterSecurityProfilePtrType ManagedClusterSecurityProfileArgs

func ManagedClusterSecurityProfilePtr(v *ManagedClusterSecurityProfileArgs) ManagedClusterSecurityProfilePtrInput {
	return (*managedClusterSecurityProfilePtrType)(v)
}

func (*managedClusterSecurityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfile)(nil)).Elem()
}

func (i *managedClusterSecurityProfilePtrType) ToManagedClusterSecurityProfilePtrOutput() ManagedClusterSecurityProfilePtrOutput {
	return i.ToManagedClusterSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterSecurityProfilePtrType) ToManagedClusterSecurityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfilePtrOutput)
}

// Security profile for the container service cluster.
type ManagedClusterSecurityProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfile)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileOutput) ToManagedClusterSecurityProfileOutput() ManagedClusterSecurityProfileOutput {
	return o
}

func (o ManagedClusterSecurityProfileOutput) ToManagedClusterSecurityProfileOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileOutput {
	return o
}

func (o ManagedClusterSecurityProfileOutput) ToManagedClusterSecurityProfilePtrOutput() ManagedClusterSecurityProfilePtrOutput {
	return o.ToManagedClusterSecurityProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterSecurityProfileOutput) ToManagedClusterSecurityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSecurityProfile) *ManagedClusterSecurityProfile {
		return &v
	}).(ManagedClusterSecurityProfilePtrOutput)
}

// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
func (o ManagedClusterSecurityProfileOutput) AzureKeyVaultKms() AzureKeyVaultKmsPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfile) *AzureKeyVaultKms { return v.AzureKeyVaultKms }).(AzureKeyVaultKmsPtrOutput)
}

// Microsoft Defender settings for the security profile.
func (o ManagedClusterSecurityProfileOutput) Defender() ManagedClusterSecurityProfileDefenderPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfile) *ManagedClusterSecurityProfileDefender { return v.Defender }).(ManagedClusterSecurityProfileDefenderPtrOutput)
}

// Image Cleaner settings for the security profile.
func (o ManagedClusterSecurityProfileOutput) ImageCleaner() ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfile) *ManagedClusterSecurityProfileImageCleaner {
		return v.ImageCleaner
	}).(ManagedClusterSecurityProfileImageCleanerPtrOutput)
}

// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
func (o ManagedClusterSecurityProfileOutput) WorkloadIdentity() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfile) *ManagedClusterSecurityProfileWorkloadIdentity {
		return v.WorkloadIdentity
	}).(ManagedClusterSecurityProfileWorkloadIdentityPtrOutput)
}

type ManagedClusterSecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfile)(nil)).Elem()
}

func (o ManagedClusterSecurityProfilePtrOutput) ToManagedClusterSecurityProfilePtrOutput() ManagedClusterSecurityProfilePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfilePtrOutput) ToManagedClusterSecurityProfilePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfilePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfilePtrOutput) Elem() ManagedClusterSecurityProfileOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfile) ManagedClusterSecurityProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfile
		return ret
	}).(ManagedClusterSecurityProfileOutput)
}

// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
func (o ManagedClusterSecurityProfilePtrOutput) AzureKeyVaultKms() AzureKeyVaultKmsPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfile) *AzureKeyVaultKms {
		if v == nil {
			return nil
		}
		return v.AzureKeyVaultKms
	}).(AzureKeyVaultKmsPtrOutput)
}

// Microsoft Defender settings for the security profile.
func (o ManagedClusterSecurityProfilePtrOutput) Defender() ManagedClusterSecurityProfileDefenderPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfile) *ManagedClusterSecurityProfileDefender {
		if v == nil {
			return nil
		}
		return v.Defender
	}).(ManagedClusterSecurityProfileDefenderPtrOutput)
}

// Image Cleaner settings for the security profile.
func (o ManagedClusterSecurityProfilePtrOutput) ImageCleaner() ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfile) *ManagedClusterSecurityProfileImageCleaner {
		if v == nil {
			return nil
		}
		return v.ImageCleaner
	}).(ManagedClusterSecurityProfileImageCleanerPtrOutput)
}

// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
func (o ManagedClusterSecurityProfilePtrOutput) WorkloadIdentity() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfile) *ManagedClusterSecurityProfileWorkloadIdentity {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(ManagedClusterSecurityProfileWorkloadIdentityPtrOutput)
}

// Microsoft Defender settings for the security profile.
type ManagedClusterSecurityProfileDefender struct {
	// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
	LogAnalyticsWorkspaceResourceId *string `pulumi:"logAnalyticsWorkspaceResourceId"`
	// Microsoft Defender threat detection for Cloud settings for the security profile.
	SecurityMonitoring *ManagedClusterSecurityProfileDefenderSecurityMonitoring `pulumi:"securityMonitoring"`
}

// ManagedClusterSecurityProfileDefenderInput is an input type that accepts ManagedClusterSecurityProfileDefenderArgs and ManagedClusterSecurityProfileDefenderOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileDefenderInput` via:
//
//	ManagedClusterSecurityProfileDefenderArgs{...}
type ManagedClusterSecurityProfileDefenderInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileDefenderOutput() ManagedClusterSecurityProfileDefenderOutput
	ToManagedClusterSecurityProfileDefenderOutputWithContext(context.Context) ManagedClusterSecurityProfileDefenderOutput
}

// Microsoft Defender settings for the security profile.
type ManagedClusterSecurityProfileDefenderArgs struct {
	// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
	LogAnalyticsWorkspaceResourceId pulumi.StringPtrInput `pulumi:"logAnalyticsWorkspaceResourceId"`
	// Microsoft Defender threat detection for Cloud settings for the security profile.
	SecurityMonitoring ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrInput `pulumi:"securityMonitoring"`
}

func (ManagedClusterSecurityProfileDefenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileDefender)(nil)).Elem()
}

func (i ManagedClusterSecurityProfileDefenderArgs) ToManagedClusterSecurityProfileDefenderOutput() ManagedClusterSecurityProfileDefenderOutput {
	return i.ToManagedClusterSecurityProfileDefenderOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileDefenderArgs) ToManagedClusterSecurityProfileDefenderOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileDefenderOutput)
}

func (i ManagedClusterSecurityProfileDefenderArgs) ToManagedClusterSecurityProfileDefenderPtrOutput() ManagedClusterSecurityProfileDefenderPtrOutput {
	return i.ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileDefenderArgs) ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileDefenderOutput).ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(ctx)
}

// ManagedClusterSecurityProfileDefenderPtrInput is an input type that accepts ManagedClusterSecurityProfileDefenderArgs, ManagedClusterSecurityProfileDefenderPtr and ManagedClusterSecurityProfileDefenderPtrOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileDefenderPtrInput` via:
//
//	        ManagedClusterSecurityProfileDefenderArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterSecurityProfileDefenderPtrInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileDefenderPtrOutput() ManagedClusterSecurityProfileDefenderPtrOutput
	ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(context.Context) ManagedClusterSecurityProfileDefenderPtrOutput
}

type managedClusterSecurityProfileDefenderPtrType ManagedClusterSecurityProfileDefenderArgs

func ManagedClusterSecurityProfileDefenderPtr(v *ManagedClusterSecurityProfileDefenderArgs) ManagedClusterSecurityProfileDefenderPtrInput {
	return (*managedClusterSecurityProfileDefenderPtrType)(v)
}

func (*managedClusterSecurityProfileDefenderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileDefender)(nil)).Elem()
}

func (i *managedClusterSecurityProfileDefenderPtrType) ToManagedClusterSecurityProfileDefenderPtrOutput() ManagedClusterSecurityProfileDefenderPtrOutput {
	return i.ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(context.Background())
}

func (i *managedClusterSecurityProfileDefenderPtrType) ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileDefenderPtrOutput)
}

// Microsoft Defender settings for the security profile.
type ManagedClusterSecurityProfileDefenderOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileDefender)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderOutput) ToManagedClusterSecurityProfileDefenderOutput() ManagedClusterSecurityProfileDefenderOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderOutput) ToManagedClusterSecurityProfileDefenderOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderOutput) ToManagedClusterSecurityProfileDefenderPtrOutput() ManagedClusterSecurityProfileDefenderPtrOutput {
	return o.ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSecurityProfileDefenderOutput) ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSecurityProfileDefender) *ManagedClusterSecurityProfileDefender {
		return &v
	}).(ManagedClusterSecurityProfileDefenderPtrOutput)
}

// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
func (o ManagedClusterSecurityProfileDefenderOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileDefender) *string { return v.LogAnalyticsWorkspaceResourceId }).(pulumi.StringPtrOutput)
}

// Microsoft Defender threat detection for Cloud settings for the security profile.
func (o ManagedClusterSecurityProfileDefenderOutput) SecurityMonitoring() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileDefender) *ManagedClusterSecurityProfileDefenderSecurityMonitoring {
		return v.SecurityMonitoring
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput)
}

type ManagedClusterSecurityProfileDefenderPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileDefender)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderPtrOutput) ToManagedClusterSecurityProfileDefenderPtrOutput() ManagedClusterSecurityProfileDefenderPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderPtrOutput) ToManagedClusterSecurityProfileDefenderPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderPtrOutput) Elem() ManagedClusterSecurityProfileDefenderOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefender) ManagedClusterSecurityProfileDefender {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileDefender
		return ret
	}).(ManagedClusterSecurityProfileDefenderOutput)
}

// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
func (o ManagedClusterSecurityProfileDefenderPtrOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefender) *string {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Microsoft Defender threat detection for Cloud settings for the security profile.
func (o ManagedClusterSecurityProfileDefenderPtrOutput) SecurityMonitoring() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefender) *ManagedClusterSecurityProfileDefenderSecurityMonitoring {
		if v == nil {
			return nil
		}
		return v.SecurityMonitoring
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput)
}

// Microsoft Defender settings for the security profile.
type ManagedClusterSecurityProfileDefenderResponse struct {
	// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
	LogAnalyticsWorkspaceResourceId *string `pulumi:"logAnalyticsWorkspaceResourceId"`
	// Microsoft Defender threat detection for Cloud settings for the security profile.
	SecurityMonitoring *ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse `pulumi:"securityMonitoring"`
}

// Microsoft Defender settings for the security profile.
type ManagedClusterSecurityProfileDefenderResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileDefenderResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderResponseOutput) ToManagedClusterSecurityProfileDefenderResponseOutput() ManagedClusterSecurityProfileDefenderResponseOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderResponseOutput) ToManagedClusterSecurityProfileDefenderResponseOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderResponseOutput {
	return o
}

// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
func (o ManagedClusterSecurityProfileDefenderResponseOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileDefenderResponse) *string {
		return v.LogAnalyticsWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Microsoft Defender threat detection for Cloud settings for the security profile.
func (o ManagedClusterSecurityProfileDefenderResponseOutput) SecurityMonitoring() ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileDefenderResponse) *ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse {
		return v.SecurityMonitoring
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput)
}

type ManagedClusterSecurityProfileDefenderResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileDefenderResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderResponsePtrOutput) ToManagedClusterSecurityProfileDefenderResponsePtrOutput() ManagedClusterSecurityProfileDefenderResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderResponsePtrOutput) ToManagedClusterSecurityProfileDefenderResponsePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderResponsePtrOutput) Elem() ManagedClusterSecurityProfileDefenderResponseOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderResponse) ManagedClusterSecurityProfileDefenderResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileDefenderResponse
		return ret
	}).(ManagedClusterSecurityProfileDefenderResponseOutput)
}

// Resource ID of the Log Analytics workspace to be associated with Microsoft Defender. When Microsoft Defender is enabled, this field is required and must be a valid workspace resource ID. When Microsoft Defender is disabled, leave the field empty.
func (o ManagedClusterSecurityProfileDefenderResponsePtrOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Microsoft Defender threat detection for Cloud settings for the security profile.
func (o ManagedClusterSecurityProfileDefenderResponsePtrOutput) SecurityMonitoring() ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderResponse) *ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse {
		if v == nil {
			return nil
		}
		return v.SecurityMonitoring
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput)
}

// Microsoft Defender settings for the security profile threat detection.
type ManagedClusterSecurityProfileDefenderSecurityMonitoring struct {
	// Whether to enable Defender threat detection
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterSecurityProfileDefenderSecurityMonitoringInput is an input type that accepts ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs and ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileDefenderSecurityMonitoringInput` via:
//
//	ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs{...}
type ManagedClusterSecurityProfileDefenderSecurityMonitoringInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput
	ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutputWithContext(context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput
}

// Microsoft Defender settings for the security profile threat detection.
type ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs struct {
	// Whether to enable Defender threat detection
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileDefenderSecurityMonitoring)(nil)).Elem()
}

func (i ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs) ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput {
	return i.ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs) ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput)
}

func (i ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return i.ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput).ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(ctx)
}

// ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrInput is an input type that accepts ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs, ManagedClusterSecurityProfileDefenderSecurityMonitoringPtr and ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrInput` via:
//
//	        ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput
	ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput
}

type managedClusterSecurityProfileDefenderSecurityMonitoringPtrType ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs

func ManagedClusterSecurityProfileDefenderSecurityMonitoringPtr(v *ManagedClusterSecurityProfileDefenderSecurityMonitoringArgs) ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrInput {
	return (*managedClusterSecurityProfileDefenderSecurityMonitoringPtrType)(v)
}

func (*managedClusterSecurityProfileDefenderSecurityMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileDefenderSecurityMonitoring)(nil)).Elem()
}

func (i *managedClusterSecurityProfileDefenderSecurityMonitoringPtrType) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return i.ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(context.Background())
}

func (i *managedClusterSecurityProfileDefenderSecurityMonitoringPtrType) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput)
}

// Microsoft Defender settings for the security profile threat detection.
type ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileDefenderSecurityMonitoring)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return o.ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSecurityProfileDefenderSecurityMonitoring) *ManagedClusterSecurityProfileDefenderSecurityMonitoring {
		return &v
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput)
}

// Whether to enable Defender threat detection
func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileDefenderSecurityMonitoring) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileDefenderSecurityMonitoring)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput) Elem() ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderSecurityMonitoring) ManagedClusterSecurityProfileDefenderSecurityMonitoring {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileDefenderSecurityMonitoring
		return ret
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput)
}

// Whether to enable Defender threat detection
func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderSecurityMonitoring) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Microsoft Defender settings for the security profile threat detection.
type ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse struct {
	// Whether to enable Defender threat detection
	Enabled *bool `pulumi:"enabled"`
}

// Microsoft Defender settings for the security profile threat detection.
type ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput {
	return o
}

// Whether to enable Defender threat detection
func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput() ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput) ToManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput) Elem() ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse) ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse
		return ret
	}).(ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput)
}

// Whether to enable Defender threat detection
func (o ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileDefenderSecurityMonitoringResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Image Cleaner removes unused images from nodes, freeing up disk space and helping to reduce attack surface area. Here are settings for the security profile.
type ManagedClusterSecurityProfileImageCleaner struct {
	// Whether to enable Image Cleaner on AKS cluster.
	Enabled *bool `pulumi:"enabled"`
	// Image Cleaner scanning interval in hours.
	IntervalHours *int `pulumi:"intervalHours"`
}

// ManagedClusterSecurityProfileImageCleanerInput is an input type that accepts ManagedClusterSecurityProfileImageCleanerArgs and ManagedClusterSecurityProfileImageCleanerOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileImageCleanerInput` via:
//
//	ManagedClusterSecurityProfileImageCleanerArgs{...}
type ManagedClusterSecurityProfileImageCleanerInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileImageCleanerOutput() ManagedClusterSecurityProfileImageCleanerOutput
	ToManagedClusterSecurityProfileImageCleanerOutputWithContext(context.Context) ManagedClusterSecurityProfileImageCleanerOutput
}

// Image Cleaner removes unused images from nodes, freeing up disk space and helping to reduce attack surface area. Here are settings for the security profile.
type ManagedClusterSecurityProfileImageCleanerArgs struct {
	// Whether to enable Image Cleaner on AKS cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Image Cleaner scanning interval in hours.
	IntervalHours pulumi.IntPtrInput `pulumi:"intervalHours"`
}

func (ManagedClusterSecurityProfileImageCleanerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileImageCleaner)(nil)).Elem()
}

func (i ManagedClusterSecurityProfileImageCleanerArgs) ToManagedClusterSecurityProfileImageCleanerOutput() ManagedClusterSecurityProfileImageCleanerOutput {
	return i.ToManagedClusterSecurityProfileImageCleanerOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileImageCleanerArgs) ToManagedClusterSecurityProfileImageCleanerOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileImageCleanerOutput)
}

func (i ManagedClusterSecurityProfileImageCleanerArgs) ToManagedClusterSecurityProfileImageCleanerPtrOutput() ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return i.ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileImageCleanerArgs) ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileImageCleanerOutput).ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(ctx)
}

// ManagedClusterSecurityProfileImageCleanerPtrInput is an input type that accepts ManagedClusterSecurityProfileImageCleanerArgs, ManagedClusterSecurityProfileImageCleanerPtr and ManagedClusterSecurityProfileImageCleanerPtrOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileImageCleanerPtrInput` via:
//
//	        ManagedClusterSecurityProfileImageCleanerArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterSecurityProfileImageCleanerPtrInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileImageCleanerPtrOutput() ManagedClusterSecurityProfileImageCleanerPtrOutput
	ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(context.Context) ManagedClusterSecurityProfileImageCleanerPtrOutput
}

type managedClusterSecurityProfileImageCleanerPtrType ManagedClusterSecurityProfileImageCleanerArgs

func ManagedClusterSecurityProfileImageCleanerPtr(v *ManagedClusterSecurityProfileImageCleanerArgs) ManagedClusterSecurityProfileImageCleanerPtrInput {
	return (*managedClusterSecurityProfileImageCleanerPtrType)(v)
}

func (*managedClusterSecurityProfileImageCleanerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileImageCleaner)(nil)).Elem()
}

func (i *managedClusterSecurityProfileImageCleanerPtrType) ToManagedClusterSecurityProfileImageCleanerPtrOutput() ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return i.ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(context.Background())
}

func (i *managedClusterSecurityProfileImageCleanerPtrType) ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileImageCleanerPtrOutput)
}

// Image Cleaner removes unused images from nodes, freeing up disk space and helping to reduce attack surface area. Here are settings for the security profile.
type ManagedClusterSecurityProfileImageCleanerOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileImageCleanerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileImageCleaner)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileImageCleanerOutput) ToManagedClusterSecurityProfileImageCleanerOutput() ManagedClusterSecurityProfileImageCleanerOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerOutput) ToManagedClusterSecurityProfileImageCleanerOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerOutput) ToManagedClusterSecurityProfileImageCleanerPtrOutput() ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return o.ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSecurityProfileImageCleanerOutput) ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSecurityProfileImageCleaner) *ManagedClusterSecurityProfileImageCleaner {
		return &v
	}).(ManagedClusterSecurityProfileImageCleanerPtrOutput)
}

// Whether to enable Image Cleaner on AKS cluster.
func (o ManagedClusterSecurityProfileImageCleanerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileImageCleaner) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Image Cleaner scanning interval in hours.
func (o ManagedClusterSecurityProfileImageCleanerOutput) IntervalHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileImageCleaner) *int { return v.IntervalHours }).(pulumi.IntPtrOutput)
}

type ManagedClusterSecurityProfileImageCleanerPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileImageCleanerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileImageCleaner)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileImageCleanerPtrOutput) ToManagedClusterSecurityProfileImageCleanerPtrOutput() ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerPtrOutput) ToManagedClusterSecurityProfileImageCleanerPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerPtrOutput) Elem() ManagedClusterSecurityProfileImageCleanerOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileImageCleaner) ManagedClusterSecurityProfileImageCleaner {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileImageCleaner
		return ret
	}).(ManagedClusterSecurityProfileImageCleanerOutput)
}

// Whether to enable Image Cleaner on AKS cluster.
func (o ManagedClusterSecurityProfileImageCleanerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileImageCleaner) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Image Cleaner scanning interval in hours.
func (o ManagedClusterSecurityProfileImageCleanerPtrOutput) IntervalHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileImageCleaner) *int {
		if v == nil {
			return nil
		}
		return v.IntervalHours
	}).(pulumi.IntPtrOutput)
}

// Image Cleaner removes unused images from nodes, freeing up disk space and helping to reduce attack surface area. Here are settings for the security profile.
type ManagedClusterSecurityProfileImageCleanerResponse struct {
	// Whether to enable Image Cleaner on AKS cluster.
	Enabled *bool `pulumi:"enabled"`
	// Image Cleaner scanning interval in hours.
	IntervalHours *int `pulumi:"intervalHours"`
}

// Image Cleaner removes unused images from nodes, freeing up disk space and helping to reduce attack surface area. Here are settings for the security profile.
type ManagedClusterSecurityProfileImageCleanerResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileImageCleanerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileImageCleanerResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileImageCleanerResponseOutput) ToManagedClusterSecurityProfileImageCleanerResponseOutput() ManagedClusterSecurityProfileImageCleanerResponseOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerResponseOutput) ToManagedClusterSecurityProfileImageCleanerResponseOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerResponseOutput {
	return o
}

// Whether to enable Image Cleaner on AKS cluster.
func (o ManagedClusterSecurityProfileImageCleanerResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileImageCleanerResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Image Cleaner scanning interval in hours.
func (o ManagedClusterSecurityProfileImageCleanerResponseOutput) IntervalHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileImageCleanerResponse) *int { return v.IntervalHours }).(pulumi.IntPtrOutput)
}

type ManagedClusterSecurityProfileImageCleanerResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileImageCleanerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileImageCleanerResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileImageCleanerResponsePtrOutput) ToManagedClusterSecurityProfileImageCleanerResponsePtrOutput() ManagedClusterSecurityProfileImageCleanerResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerResponsePtrOutput) ToManagedClusterSecurityProfileImageCleanerResponsePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileImageCleanerResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileImageCleanerResponsePtrOutput) Elem() ManagedClusterSecurityProfileImageCleanerResponseOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileImageCleanerResponse) ManagedClusterSecurityProfileImageCleanerResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileImageCleanerResponse
		return ret
	}).(ManagedClusterSecurityProfileImageCleanerResponseOutput)
}

// Whether to enable Image Cleaner on AKS cluster.
func (o ManagedClusterSecurityProfileImageCleanerResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileImageCleanerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Image Cleaner scanning interval in hours.
func (o ManagedClusterSecurityProfileImageCleanerResponsePtrOutput) IntervalHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileImageCleanerResponse) *int {
		if v == nil {
			return nil
		}
		return v.IntervalHours
	}).(pulumi.IntPtrOutput)
}

// Security profile for the container service cluster.
type ManagedClusterSecurityProfileResponse struct {
	// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
	AzureKeyVaultKms *AzureKeyVaultKmsResponse `pulumi:"azureKeyVaultKms"`
	// Microsoft Defender settings for the security profile.
	Defender *ManagedClusterSecurityProfileDefenderResponse `pulumi:"defender"`
	// Image Cleaner settings for the security profile.
	ImageCleaner *ManagedClusterSecurityProfileImageCleanerResponse `pulumi:"imageCleaner"`
	// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
	WorkloadIdentity *ManagedClusterSecurityProfileWorkloadIdentityResponse `pulumi:"workloadIdentity"`
}

// Defaults sets the appropriate defaults for ManagedClusterSecurityProfileResponse
func (val *ManagedClusterSecurityProfileResponse) Defaults() *ManagedClusterSecurityProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AzureKeyVaultKms = tmp.AzureKeyVaultKms.Defaults()

	return &tmp
}

// Security profile for the container service cluster.
type ManagedClusterSecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileResponseOutput) ToManagedClusterSecurityProfileResponseOutput() ManagedClusterSecurityProfileResponseOutput {
	return o
}

func (o ManagedClusterSecurityProfileResponseOutput) ToManagedClusterSecurityProfileResponseOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileResponseOutput {
	return o
}

// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
func (o ManagedClusterSecurityProfileResponseOutput) AzureKeyVaultKms() AzureKeyVaultKmsResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileResponse) *AzureKeyVaultKmsResponse { return v.AzureKeyVaultKms }).(AzureKeyVaultKmsResponsePtrOutput)
}

// Microsoft Defender settings for the security profile.
func (o ManagedClusterSecurityProfileResponseOutput) Defender() ManagedClusterSecurityProfileDefenderResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileResponse) *ManagedClusterSecurityProfileDefenderResponse {
		return v.Defender
	}).(ManagedClusterSecurityProfileDefenderResponsePtrOutput)
}

// Image Cleaner settings for the security profile.
func (o ManagedClusterSecurityProfileResponseOutput) ImageCleaner() ManagedClusterSecurityProfileImageCleanerResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileResponse) *ManagedClusterSecurityProfileImageCleanerResponse {
		return v.ImageCleaner
	}).(ManagedClusterSecurityProfileImageCleanerResponsePtrOutput)
}

// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
func (o ManagedClusterSecurityProfileResponseOutput) WorkloadIdentity() ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileResponse) *ManagedClusterSecurityProfileWorkloadIdentityResponse {
		return v.WorkloadIdentity
	}).(ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput)
}

type ManagedClusterSecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileResponsePtrOutput) ToManagedClusterSecurityProfileResponsePtrOutput() ManagedClusterSecurityProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileResponsePtrOutput) ToManagedClusterSecurityProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileResponsePtrOutput) Elem() ManagedClusterSecurityProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileResponse) ManagedClusterSecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileResponse
		return ret
	}).(ManagedClusterSecurityProfileResponseOutput)
}

// Azure Key Vault [key management service](https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/) settings for the security profile.
func (o ManagedClusterSecurityProfileResponsePtrOutput) AzureKeyVaultKms() AzureKeyVaultKmsResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileResponse) *AzureKeyVaultKmsResponse {
		if v == nil {
			return nil
		}
		return v.AzureKeyVaultKms
	}).(AzureKeyVaultKmsResponsePtrOutput)
}

// Microsoft Defender settings for the security profile.
func (o ManagedClusterSecurityProfileResponsePtrOutput) Defender() ManagedClusterSecurityProfileDefenderResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileResponse) *ManagedClusterSecurityProfileDefenderResponse {
		if v == nil {
			return nil
		}
		return v.Defender
	}).(ManagedClusterSecurityProfileDefenderResponsePtrOutput)
}

// Image Cleaner settings for the security profile.
func (o ManagedClusterSecurityProfileResponsePtrOutput) ImageCleaner() ManagedClusterSecurityProfileImageCleanerResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileResponse) *ManagedClusterSecurityProfileImageCleanerResponse {
		if v == nil {
			return nil
		}
		return v.ImageCleaner
	}).(ManagedClusterSecurityProfileImageCleanerResponsePtrOutput)
}

// Workload identity settings for the security profile. Workload identity enables Kubernetes applications to access Azure cloud resources securely with Azure AD. See https://aka.ms/aks/wi for more details.
func (o ManagedClusterSecurityProfileResponsePtrOutput) WorkloadIdentity() ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileResponse) *ManagedClusterSecurityProfileWorkloadIdentityResponse {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput)
}

// Workload identity settings for the security profile.
type ManagedClusterSecurityProfileWorkloadIdentity struct {
	// Whether to enable workload identity.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterSecurityProfileWorkloadIdentityInput is an input type that accepts ManagedClusterSecurityProfileWorkloadIdentityArgs and ManagedClusterSecurityProfileWorkloadIdentityOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileWorkloadIdentityInput` via:
//
//	ManagedClusterSecurityProfileWorkloadIdentityArgs{...}
type ManagedClusterSecurityProfileWorkloadIdentityInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileWorkloadIdentityOutput() ManagedClusterSecurityProfileWorkloadIdentityOutput
	ToManagedClusterSecurityProfileWorkloadIdentityOutputWithContext(context.Context) ManagedClusterSecurityProfileWorkloadIdentityOutput
}

// Workload identity settings for the security profile.
type ManagedClusterSecurityProfileWorkloadIdentityArgs struct {
	// Whether to enable workload identity.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterSecurityProfileWorkloadIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileWorkloadIdentity)(nil)).Elem()
}

func (i ManagedClusterSecurityProfileWorkloadIdentityArgs) ToManagedClusterSecurityProfileWorkloadIdentityOutput() ManagedClusterSecurityProfileWorkloadIdentityOutput {
	return i.ToManagedClusterSecurityProfileWorkloadIdentityOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileWorkloadIdentityArgs) ToManagedClusterSecurityProfileWorkloadIdentityOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileWorkloadIdentityOutput)
}

func (i ManagedClusterSecurityProfileWorkloadIdentityArgs) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutput() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return i.ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedClusterSecurityProfileWorkloadIdentityArgs) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileWorkloadIdentityOutput).ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(ctx)
}

// ManagedClusterSecurityProfileWorkloadIdentityPtrInput is an input type that accepts ManagedClusterSecurityProfileWorkloadIdentityArgs, ManagedClusterSecurityProfileWorkloadIdentityPtr and ManagedClusterSecurityProfileWorkloadIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedClusterSecurityProfileWorkloadIdentityPtrInput` via:
//
//	        ManagedClusterSecurityProfileWorkloadIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterSecurityProfileWorkloadIdentityPtrInput interface {
	pulumi.Input

	ToManagedClusterSecurityProfileWorkloadIdentityPtrOutput() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput
	ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(context.Context) ManagedClusterSecurityProfileWorkloadIdentityPtrOutput
}

type managedClusterSecurityProfileWorkloadIdentityPtrType ManagedClusterSecurityProfileWorkloadIdentityArgs

func ManagedClusterSecurityProfileWorkloadIdentityPtr(v *ManagedClusterSecurityProfileWorkloadIdentityArgs) ManagedClusterSecurityProfileWorkloadIdentityPtrInput {
	return (*managedClusterSecurityProfileWorkloadIdentityPtrType)(v)
}

func (*managedClusterSecurityProfileWorkloadIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileWorkloadIdentity)(nil)).Elem()
}

func (i *managedClusterSecurityProfileWorkloadIdentityPtrType) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutput() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return i.ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i *managedClusterSecurityProfileWorkloadIdentityPtrType) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterSecurityProfileWorkloadIdentityPtrOutput)
}

// Workload identity settings for the security profile.
type ManagedClusterSecurityProfileWorkloadIdentityOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileWorkloadIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileWorkloadIdentity)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileWorkloadIdentityOutput) ToManagedClusterSecurityProfileWorkloadIdentityOutput() ManagedClusterSecurityProfileWorkloadIdentityOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityOutput) ToManagedClusterSecurityProfileWorkloadIdentityOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityOutput) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutput() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return o.ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedClusterSecurityProfileWorkloadIdentityOutput) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterSecurityProfileWorkloadIdentity) *ManagedClusterSecurityProfileWorkloadIdentity {
		return &v
	}).(ManagedClusterSecurityProfileWorkloadIdentityPtrOutput)
}

// Whether to enable workload identity.
func (o ManagedClusterSecurityProfileWorkloadIdentityOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileWorkloadIdentity) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterSecurityProfileWorkloadIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileWorkloadIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileWorkloadIdentity)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileWorkloadIdentityPtrOutput) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutput() ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityPtrOutput) ToManagedClusterSecurityProfileWorkloadIdentityPtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityPtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityPtrOutput) Elem() ManagedClusterSecurityProfileWorkloadIdentityOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileWorkloadIdentity) ManagedClusterSecurityProfileWorkloadIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileWorkloadIdentity
		return ret
	}).(ManagedClusterSecurityProfileWorkloadIdentityOutput)
}

// Whether to enable workload identity.
func (o ManagedClusterSecurityProfileWorkloadIdentityPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileWorkloadIdentity) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Workload identity settings for the security profile.
type ManagedClusterSecurityProfileWorkloadIdentityResponse struct {
	// Whether to enable workload identity.
	Enabled *bool `pulumi:"enabled"`
}

// Workload identity settings for the security profile.
type ManagedClusterSecurityProfileWorkloadIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileWorkloadIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterSecurityProfileWorkloadIdentityResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileWorkloadIdentityResponseOutput) ToManagedClusterSecurityProfileWorkloadIdentityResponseOutput() ManagedClusterSecurityProfileWorkloadIdentityResponseOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityResponseOutput) ToManagedClusterSecurityProfileWorkloadIdentityResponseOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityResponseOutput {
	return o
}

// Whether to enable workload identity.
func (o ManagedClusterSecurityProfileWorkloadIdentityResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterSecurityProfileWorkloadIdentityResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterSecurityProfileWorkloadIdentityResponse)(nil)).Elem()
}

func (o ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput) ToManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput() ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput) ToManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput {
	return o
}

func (o ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput) Elem() ManagedClusterSecurityProfileWorkloadIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileWorkloadIdentityResponse) ManagedClusterSecurityProfileWorkloadIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterSecurityProfileWorkloadIdentityResponse
		return ret
	}).(ManagedClusterSecurityProfileWorkloadIdentityResponseOutput)
}

// Whether to enable workload identity.
func (o ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterSecurityProfileWorkloadIdentityResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
type ManagedClusterServicePrincipalProfile struct {
	// The ID for the service principal.
	ClientId string `pulumi:"clientId"`
	// The secret password associated with the service principal in plain text.
	Secret *string `pulumi:"secret"`
}

// ManagedClusterServicePrincipalProfileInput is an input type that accepts ManagedClusterServicePrincipalProfileArgs and ManagedClusterServicePrincipalProfileOutput values.
// You can construct a concrete instance of `ManagedClusterServicePrincipalProfileInput` via:
//
//	ManagedClusterServicePrincipalProfileArgs{...}
type ManagedClusterServicePrincipalProfileInput interface {
	pulumi.Input

	ToManagedClusterServicePrincipalProfileOutput() ManagedClusterServicePrincipalProfileOutput
	ToManagedClusterServicePrincipalProfileOutputWithContext(context.Context) ManagedClusterServicePrincipalProfileOutput
}

// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
type ManagedClusterServicePrincipalProfileArgs struct {
	// The ID for the service principal.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The secret password associated with the service principal in plain text.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
}

func (ManagedClusterServicePrincipalProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterServicePrincipalProfile)(nil)).Elem()
}

func (i ManagedClusterServicePrincipalProfileArgs) ToManagedClusterServicePrincipalProfileOutput() ManagedClusterServicePrincipalProfileOutput {
	return i.ToManagedClusterServicePrincipalProfileOutputWithContext(context.Background())
}

func (i ManagedClusterServicePrincipalProfileArgs) ToManagedClusterServicePrincipalProfileOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterServicePrincipalProfileOutput)
}

func (i ManagedClusterServicePrincipalProfileArgs) ToManagedClusterServicePrincipalProfilePtrOutput() ManagedClusterServicePrincipalProfilePtrOutput {
	return i.ToManagedClusterServicePrincipalProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterServicePrincipalProfileArgs) ToManagedClusterServicePrincipalProfilePtrOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterServicePrincipalProfileOutput).ToManagedClusterServicePrincipalProfilePtrOutputWithContext(ctx)
}

// ManagedClusterServicePrincipalProfilePtrInput is an input type that accepts ManagedClusterServicePrincipalProfileArgs, ManagedClusterServicePrincipalProfilePtr and ManagedClusterServicePrincipalProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterServicePrincipalProfilePtrInput` via:
//
//	        ManagedClusterServicePrincipalProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterServicePrincipalProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterServicePrincipalProfilePtrOutput() ManagedClusterServicePrincipalProfilePtrOutput
	ToManagedClusterServicePrincipalProfilePtrOutputWithContext(context.Context) ManagedClusterServicePrincipalProfilePtrOutput
}

type managedClusterServicePrincipalProfilePtrType ManagedClusterServicePrincipalProfileArgs

func ManagedClusterServicePrincipalProfilePtr(v *ManagedClusterServicePrincipalProfileArgs) ManagedClusterServicePrincipalProfilePtrInput {
	return (*managedClusterServicePrincipalProfilePtrType)(v)
}

func (*managedClusterServicePrincipalProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterServicePrincipalProfile)(nil)).Elem()
}

func (i *managedClusterServicePrincipalProfilePtrType) ToManagedClusterServicePrincipalProfilePtrOutput() ManagedClusterServicePrincipalProfilePtrOutput {
	return i.ToManagedClusterServicePrincipalProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterServicePrincipalProfilePtrType) ToManagedClusterServicePrincipalProfilePtrOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterServicePrincipalProfilePtrOutput)
}

// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
type ManagedClusterServicePrincipalProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterServicePrincipalProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterServicePrincipalProfile)(nil)).Elem()
}

func (o ManagedClusterServicePrincipalProfileOutput) ToManagedClusterServicePrincipalProfileOutput() ManagedClusterServicePrincipalProfileOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfileOutput) ToManagedClusterServicePrincipalProfileOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfileOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfileOutput) ToManagedClusterServicePrincipalProfilePtrOutput() ManagedClusterServicePrincipalProfilePtrOutput {
	return o.ToManagedClusterServicePrincipalProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterServicePrincipalProfileOutput) ToManagedClusterServicePrincipalProfilePtrOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterServicePrincipalProfile) *ManagedClusterServicePrincipalProfile {
		return &v
	}).(ManagedClusterServicePrincipalProfilePtrOutput)
}

// The ID for the service principal.
func (o ManagedClusterServicePrincipalProfileOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterServicePrincipalProfile) string { return v.ClientId }).(pulumi.StringOutput)
}

// The secret password associated with the service principal in plain text.
func (o ManagedClusterServicePrincipalProfileOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterServicePrincipalProfile) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type ManagedClusterServicePrincipalProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterServicePrincipalProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterServicePrincipalProfile)(nil)).Elem()
}

func (o ManagedClusterServicePrincipalProfilePtrOutput) ToManagedClusterServicePrincipalProfilePtrOutput() ManagedClusterServicePrincipalProfilePtrOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfilePtrOutput) ToManagedClusterServicePrincipalProfilePtrOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfilePtrOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfilePtrOutput) Elem() ManagedClusterServicePrincipalProfileOutput {
	return o.ApplyT(func(v *ManagedClusterServicePrincipalProfile) ManagedClusterServicePrincipalProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterServicePrincipalProfile
		return ret
	}).(ManagedClusterServicePrincipalProfileOutput)
}

// The ID for the service principal.
func (o ManagedClusterServicePrincipalProfilePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterServicePrincipalProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The secret password associated with the service principal in plain text.
func (o ManagedClusterServicePrincipalProfilePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterServicePrincipalProfile) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
type ManagedClusterServicePrincipalProfileResponse struct {
	// The ID for the service principal.
	ClientId string `pulumi:"clientId"`
	// The secret password associated with the service principal in plain text.
	Secret *string `pulumi:"secret"`
}

// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
type ManagedClusterServicePrincipalProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterServicePrincipalProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterServicePrincipalProfileResponse)(nil)).Elem()
}

func (o ManagedClusterServicePrincipalProfileResponseOutput) ToManagedClusterServicePrincipalProfileResponseOutput() ManagedClusterServicePrincipalProfileResponseOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfileResponseOutput) ToManagedClusterServicePrincipalProfileResponseOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfileResponseOutput {
	return o
}

// The ID for the service principal.
func (o ManagedClusterServicePrincipalProfileResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterServicePrincipalProfileResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The secret password associated with the service principal in plain text.
func (o ManagedClusterServicePrincipalProfileResponseOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterServicePrincipalProfileResponse) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type ManagedClusterServicePrincipalProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterServicePrincipalProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterServicePrincipalProfileResponse)(nil)).Elem()
}

func (o ManagedClusterServicePrincipalProfileResponsePtrOutput) ToManagedClusterServicePrincipalProfileResponsePtrOutput() ManagedClusterServicePrincipalProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfileResponsePtrOutput) ToManagedClusterServicePrincipalProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterServicePrincipalProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterServicePrincipalProfileResponsePtrOutput) Elem() ManagedClusterServicePrincipalProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterServicePrincipalProfileResponse) ManagedClusterServicePrincipalProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterServicePrincipalProfileResponse
		return ret
	}).(ManagedClusterServicePrincipalProfileResponseOutput)
}

// The ID for the service principal.
func (o ManagedClusterServicePrincipalProfileResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterServicePrincipalProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The secret password associated with the service principal in plain text.
func (o ManagedClusterServicePrincipalProfileResponsePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterServicePrincipalProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Storage profile for the container service cluster.
type ManagedClusterStorageProfile struct {
	// AzureBlob CSI Driver settings for the storage profile.
	BlobCSIDriver *ManagedClusterStorageProfileBlobCSIDriver `pulumi:"blobCSIDriver"`
	// AzureDisk CSI Driver settings for the storage profile.
	DiskCSIDriver *ManagedClusterStorageProfileDiskCSIDriver `pulumi:"diskCSIDriver"`
	// AzureFile CSI Driver settings for the storage profile.
	FileCSIDriver *ManagedClusterStorageProfileFileCSIDriver `pulumi:"fileCSIDriver"`
	// Snapshot Controller settings for the storage profile.
	SnapshotController *ManagedClusterStorageProfileSnapshotController `pulumi:"snapshotController"`
}

// ManagedClusterStorageProfileInput is an input type that accepts ManagedClusterStorageProfileArgs and ManagedClusterStorageProfileOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileInput` via:
//
//	ManagedClusterStorageProfileArgs{...}
type ManagedClusterStorageProfileInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileOutput() ManagedClusterStorageProfileOutput
	ToManagedClusterStorageProfileOutputWithContext(context.Context) ManagedClusterStorageProfileOutput
}

// Storage profile for the container service cluster.
type ManagedClusterStorageProfileArgs struct {
	// AzureBlob CSI Driver settings for the storage profile.
	BlobCSIDriver ManagedClusterStorageProfileBlobCSIDriverPtrInput `pulumi:"blobCSIDriver"`
	// AzureDisk CSI Driver settings for the storage profile.
	DiskCSIDriver ManagedClusterStorageProfileDiskCSIDriverPtrInput `pulumi:"diskCSIDriver"`
	// AzureFile CSI Driver settings for the storage profile.
	FileCSIDriver ManagedClusterStorageProfileFileCSIDriverPtrInput `pulumi:"fileCSIDriver"`
	// Snapshot Controller settings for the storage profile.
	SnapshotController ManagedClusterStorageProfileSnapshotControllerPtrInput `pulumi:"snapshotController"`
}

func (ManagedClusterStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfile)(nil)).Elem()
}

func (i ManagedClusterStorageProfileArgs) ToManagedClusterStorageProfileOutput() ManagedClusterStorageProfileOutput {
	return i.ToManagedClusterStorageProfileOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileArgs) ToManagedClusterStorageProfileOutputWithContext(ctx context.Context) ManagedClusterStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileOutput)
}

func (i ManagedClusterStorageProfileArgs) ToManagedClusterStorageProfilePtrOutput() ManagedClusterStorageProfilePtrOutput {
	return i.ToManagedClusterStorageProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileArgs) ToManagedClusterStorageProfilePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileOutput).ToManagedClusterStorageProfilePtrOutputWithContext(ctx)
}

// ManagedClusterStorageProfilePtrInput is an input type that accepts ManagedClusterStorageProfileArgs, ManagedClusterStorageProfilePtr and ManagedClusterStorageProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfilePtrInput` via:
//
//	        ManagedClusterStorageProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterStorageProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterStorageProfilePtrOutput() ManagedClusterStorageProfilePtrOutput
	ToManagedClusterStorageProfilePtrOutputWithContext(context.Context) ManagedClusterStorageProfilePtrOutput
}

type managedClusterStorageProfilePtrType ManagedClusterStorageProfileArgs

func ManagedClusterStorageProfilePtr(v *ManagedClusterStorageProfileArgs) ManagedClusterStorageProfilePtrInput {
	return (*managedClusterStorageProfilePtrType)(v)
}

func (*managedClusterStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfile)(nil)).Elem()
}

func (i *managedClusterStorageProfilePtrType) ToManagedClusterStorageProfilePtrOutput() ManagedClusterStorageProfilePtrOutput {
	return i.ToManagedClusterStorageProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterStorageProfilePtrType) ToManagedClusterStorageProfilePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfilePtrOutput)
}

// Storage profile for the container service cluster.
type ManagedClusterStorageProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfile)(nil)).Elem()
}

func (o ManagedClusterStorageProfileOutput) ToManagedClusterStorageProfileOutput() ManagedClusterStorageProfileOutput {
	return o
}

func (o ManagedClusterStorageProfileOutput) ToManagedClusterStorageProfileOutputWithContext(ctx context.Context) ManagedClusterStorageProfileOutput {
	return o
}

func (o ManagedClusterStorageProfileOutput) ToManagedClusterStorageProfilePtrOutput() ManagedClusterStorageProfilePtrOutput {
	return o.ToManagedClusterStorageProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterStorageProfileOutput) ToManagedClusterStorageProfilePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterStorageProfile) *ManagedClusterStorageProfile {
		return &v
	}).(ManagedClusterStorageProfilePtrOutput)
}

// AzureBlob CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileOutput) BlobCSIDriver() ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfile) *ManagedClusterStorageProfileBlobCSIDriver {
		return v.BlobCSIDriver
	}).(ManagedClusterStorageProfileBlobCSIDriverPtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileOutput) DiskCSIDriver() ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfile) *ManagedClusterStorageProfileDiskCSIDriver {
		return v.DiskCSIDriver
	}).(ManagedClusterStorageProfileDiskCSIDriverPtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileOutput) FileCSIDriver() ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfile) *ManagedClusterStorageProfileFileCSIDriver {
		return v.FileCSIDriver
	}).(ManagedClusterStorageProfileFileCSIDriverPtrOutput)
}

// Snapshot Controller settings for the storage profile.
func (o ManagedClusterStorageProfileOutput) SnapshotController() ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfile) *ManagedClusterStorageProfileSnapshotController {
		return v.SnapshotController
	}).(ManagedClusterStorageProfileSnapshotControllerPtrOutput)
}

type ManagedClusterStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfile)(nil)).Elem()
}

func (o ManagedClusterStorageProfilePtrOutput) ToManagedClusterStorageProfilePtrOutput() ManagedClusterStorageProfilePtrOutput {
	return o
}

func (o ManagedClusterStorageProfilePtrOutput) ToManagedClusterStorageProfilePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfilePtrOutput {
	return o
}

func (o ManagedClusterStorageProfilePtrOutput) Elem() ManagedClusterStorageProfileOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfile) ManagedClusterStorageProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfile
		return ret
	}).(ManagedClusterStorageProfileOutput)
}

// AzureBlob CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfilePtrOutput) BlobCSIDriver() ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfile) *ManagedClusterStorageProfileBlobCSIDriver {
		if v == nil {
			return nil
		}
		return v.BlobCSIDriver
	}).(ManagedClusterStorageProfileBlobCSIDriverPtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfilePtrOutput) DiskCSIDriver() ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfile) *ManagedClusterStorageProfileDiskCSIDriver {
		if v == nil {
			return nil
		}
		return v.DiskCSIDriver
	}).(ManagedClusterStorageProfileDiskCSIDriverPtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfilePtrOutput) FileCSIDriver() ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfile) *ManagedClusterStorageProfileFileCSIDriver {
		if v == nil {
			return nil
		}
		return v.FileCSIDriver
	}).(ManagedClusterStorageProfileFileCSIDriverPtrOutput)
}

// Snapshot Controller settings for the storage profile.
func (o ManagedClusterStorageProfilePtrOutput) SnapshotController() ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfile) *ManagedClusterStorageProfileSnapshotController {
		if v == nil {
			return nil
		}
		return v.SnapshotController
	}).(ManagedClusterStorageProfileSnapshotControllerPtrOutput)
}

// AzureBlob CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileBlobCSIDriver struct {
	// Whether to enable AzureBlob CSI Driver. The default value is false.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterStorageProfileBlobCSIDriverInput is an input type that accepts ManagedClusterStorageProfileBlobCSIDriverArgs and ManagedClusterStorageProfileBlobCSIDriverOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileBlobCSIDriverInput` via:
//
//	ManagedClusterStorageProfileBlobCSIDriverArgs{...}
type ManagedClusterStorageProfileBlobCSIDriverInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileBlobCSIDriverOutput() ManagedClusterStorageProfileBlobCSIDriverOutput
	ToManagedClusterStorageProfileBlobCSIDriverOutputWithContext(context.Context) ManagedClusterStorageProfileBlobCSIDriverOutput
}

// AzureBlob CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileBlobCSIDriverArgs struct {
	// Whether to enable AzureBlob CSI Driver. The default value is false.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterStorageProfileBlobCSIDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileBlobCSIDriver)(nil)).Elem()
}

func (i ManagedClusterStorageProfileBlobCSIDriverArgs) ToManagedClusterStorageProfileBlobCSIDriverOutput() ManagedClusterStorageProfileBlobCSIDriverOutput {
	return i.ToManagedClusterStorageProfileBlobCSIDriverOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileBlobCSIDriverArgs) ToManagedClusterStorageProfileBlobCSIDriverOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileBlobCSIDriverOutput)
}

func (i ManagedClusterStorageProfileBlobCSIDriverArgs) ToManagedClusterStorageProfileBlobCSIDriverPtrOutput() ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return i.ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileBlobCSIDriverArgs) ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileBlobCSIDriverOutput).ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(ctx)
}

// ManagedClusterStorageProfileBlobCSIDriverPtrInput is an input type that accepts ManagedClusterStorageProfileBlobCSIDriverArgs, ManagedClusterStorageProfileBlobCSIDriverPtr and ManagedClusterStorageProfileBlobCSIDriverPtrOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileBlobCSIDriverPtrInput` via:
//
//	        ManagedClusterStorageProfileBlobCSIDriverArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterStorageProfileBlobCSIDriverPtrInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileBlobCSIDriverPtrOutput() ManagedClusterStorageProfileBlobCSIDriverPtrOutput
	ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(context.Context) ManagedClusterStorageProfileBlobCSIDriverPtrOutput
}

type managedClusterStorageProfileBlobCSIDriverPtrType ManagedClusterStorageProfileBlobCSIDriverArgs

func ManagedClusterStorageProfileBlobCSIDriverPtr(v *ManagedClusterStorageProfileBlobCSIDriverArgs) ManagedClusterStorageProfileBlobCSIDriverPtrInput {
	return (*managedClusterStorageProfileBlobCSIDriverPtrType)(v)
}

func (*managedClusterStorageProfileBlobCSIDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileBlobCSIDriver)(nil)).Elem()
}

func (i *managedClusterStorageProfileBlobCSIDriverPtrType) ToManagedClusterStorageProfileBlobCSIDriverPtrOutput() ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return i.ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(context.Background())
}

func (i *managedClusterStorageProfileBlobCSIDriverPtrType) ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileBlobCSIDriverPtrOutput)
}

// AzureBlob CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileBlobCSIDriverOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileBlobCSIDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileBlobCSIDriver)(nil)).Elem()
}

func (o ManagedClusterStorageProfileBlobCSIDriverOutput) ToManagedClusterStorageProfileBlobCSIDriverOutput() ManagedClusterStorageProfileBlobCSIDriverOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverOutput) ToManagedClusterStorageProfileBlobCSIDriverOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverOutput) ToManagedClusterStorageProfileBlobCSIDriverPtrOutput() ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return o.ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(context.Background())
}

func (o ManagedClusterStorageProfileBlobCSIDriverOutput) ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterStorageProfileBlobCSIDriver) *ManagedClusterStorageProfileBlobCSIDriver {
		return &v
	}).(ManagedClusterStorageProfileBlobCSIDriverPtrOutput)
}

// Whether to enable AzureBlob CSI Driver. The default value is false.
func (o ManagedClusterStorageProfileBlobCSIDriverOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileBlobCSIDriver) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileBlobCSIDriverPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileBlobCSIDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileBlobCSIDriver)(nil)).Elem()
}

func (o ManagedClusterStorageProfileBlobCSIDriverPtrOutput) ToManagedClusterStorageProfileBlobCSIDriverPtrOutput() ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverPtrOutput) ToManagedClusterStorageProfileBlobCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverPtrOutput) Elem() ManagedClusterStorageProfileBlobCSIDriverOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileBlobCSIDriver) ManagedClusterStorageProfileBlobCSIDriver {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileBlobCSIDriver
		return ret
	}).(ManagedClusterStorageProfileBlobCSIDriverOutput)
}

// Whether to enable AzureBlob CSI Driver. The default value is false.
func (o ManagedClusterStorageProfileBlobCSIDriverPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileBlobCSIDriver) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AzureBlob CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileBlobCSIDriverResponse struct {
	// Whether to enable AzureBlob CSI Driver. The default value is false.
	Enabled *bool `pulumi:"enabled"`
}

// AzureBlob CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileBlobCSIDriverResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileBlobCSIDriverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileBlobCSIDriverResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileBlobCSIDriverResponseOutput) ToManagedClusterStorageProfileBlobCSIDriverResponseOutput() ManagedClusterStorageProfileBlobCSIDriverResponseOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverResponseOutput) ToManagedClusterStorageProfileBlobCSIDriverResponseOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverResponseOutput {
	return o
}

// Whether to enable AzureBlob CSI Driver. The default value is false.
func (o ManagedClusterStorageProfileBlobCSIDriverResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileBlobCSIDriverResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileBlobCSIDriverResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput) ToManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput() ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput) ToManagedClusterStorageProfileBlobCSIDriverResponsePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput) Elem() ManagedClusterStorageProfileBlobCSIDriverResponseOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileBlobCSIDriverResponse) ManagedClusterStorageProfileBlobCSIDriverResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileBlobCSIDriverResponse
		return ret
	}).(ManagedClusterStorageProfileBlobCSIDriverResponseOutput)
}

// Whether to enable AzureBlob CSI Driver. The default value is false.
func (o ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileBlobCSIDriverResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileDiskCSIDriver struct {
	// Whether to enable AzureDisk CSI Driver. The default value is true.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterStorageProfileDiskCSIDriverInput is an input type that accepts ManagedClusterStorageProfileDiskCSIDriverArgs and ManagedClusterStorageProfileDiskCSIDriverOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileDiskCSIDriverInput` via:
//
//	ManagedClusterStorageProfileDiskCSIDriverArgs{...}
type ManagedClusterStorageProfileDiskCSIDriverInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileDiskCSIDriverOutput() ManagedClusterStorageProfileDiskCSIDriverOutput
	ToManagedClusterStorageProfileDiskCSIDriverOutputWithContext(context.Context) ManagedClusterStorageProfileDiskCSIDriverOutput
}

// AzureDisk CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileDiskCSIDriverArgs struct {
	// Whether to enable AzureDisk CSI Driver. The default value is true.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterStorageProfileDiskCSIDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileDiskCSIDriver)(nil)).Elem()
}

func (i ManagedClusterStorageProfileDiskCSIDriverArgs) ToManagedClusterStorageProfileDiskCSIDriverOutput() ManagedClusterStorageProfileDiskCSIDriverOutput {
	return i.ToManagedClusterStorageProfileDiskCSIDriverOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileDiskCSIDriverArgs) ToManagedClusterStorageProfileDiskCSIDriverOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileDiskCSIDriverOutput)
}

func (i ManagedClusterStorageProfileDiskCSIDriverArgs) ToManagedClusterStorageProfileDiskCSIDriverPtrOutput() ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return i.ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileDiskCSIDriverArgs) ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileDiskCSIDriverOutput).ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(ctx)
}

// ManagedClusterStorageProfileDiskCSIDriverPtrInput is an input type that accepts ManagedClusterStorageProfileDiskCSIDriverArgs, ManagedClusterStorageProfileDiskCSIDriverPtr and ManagedClusterStorageProfileDiskCSIDriverPtrOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileDiskCSIDriverPtrInput` via:
//
//	        ManagedClusterStorageProfileDiskCSIDriverArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterStorageProfileDiskCSIDriverPtrInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileDiskCSIDriverPtrOutput() ManagedClusterStorageProfileDiskCSIDriverPtrOutput
	ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(context.Context) ManagedClusterStorageProfileDiskCSIDriverPtrOutput
}

type managedClusterStorageProfileDiskCSIDriverPtrType ManagedClusterStorageProfileDiskCSIDriverArgs

func ManagedClusterStorageProfileDiskCSIDriverPtr(v *ManagedClusterStorageProfileDiskCSIDriverArgs) ManagedClusterStorageProfileDiskCSIDriverPtrInput {
	return (*managedClusterStorageProfileDiskCSIDriverPtrType)(v)
}

func (*managedClusterStorageProfileDiskCSIDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileDiskCSIDriver)(nil)).Elem()
}

func (i *managedClusterStorageProfileDiskCSIDriverPtrType) ToManagedClusterStorageProfileDiskCSIDriverPtrOutput() ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return i.ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(context.Background())
}

func (i *managedClusterStorageProfileDiskCSIDriverPtrType) ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileDiskCSIDriverPtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileDiskCSIDriverOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileDiskCSIDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileDiskCSIDriver)(nil)).Elem()
}

func (o ManagedClusterStorageProfileDiskCSIDriverOutput) ToManagedClusterStorageProfileDiskCSIDriverOutput() ManagedClusterStorageProfileDiskCSIDriverOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverOutput) ToManagedClusterStorageProfileDiskCSIDriverOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverOutput) ToManagedClusterStorageProfileDiskCSIDriverPtrOutput() ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return o.ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(context.Background())
}

func (o ManagedClusterStorageProfileDiskCSIDriverOutput) ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterStorageProfileDiskCSIDriver) *ManagedClusterStorageProfileDiskCSIDriver {
		return &v
	}).(ManagedClusterStorageProfileDiskCSIDriverPtrOutput)
}

// Whether to enable AzureDisk CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileDiskCSIDriverOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileDiskCSIDriver) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileDiskCSIDriverPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileDiskCSIDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileDiskCSIDriver)(nil)).Elem()
}

func (o ManagedClusterStorageProfileDiskCSIDriverPtrOutput) ToManagedClusterStorageProfileDiskCSIDriverPtrOutput() ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverPtrOutput) ToManagedClusterStorageProfileDiskCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverPtrOutput) Elem() ManagedClusterStorageProfileDiskCSIDriverOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileDiskCSIDriver) ManagedClusterStorageProfileDiskCSIDriver {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileDiskCSIDriver
		return ret
	}).(ManagedClusterStorageProfileDiskCSIDriverOutput)
}

// Whether to enable AzureDisk CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileDiskCSIDriverPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileDiskCSIDriver) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileDiskCSIDriverResponse struct {
	// Whether to enable AzureDisk CSI Driver. The default value is true.
	Enabled *bool `pulumi:"enabled"`
}

// AzureDisk CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileDiskCSIDriverResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileDiskCSIDriverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileDiskCSIDriverResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileDiskCSIDriverResponseOutput) ToManagedClusterStorageProfileDiskCSIDriverResponseOutput() ManagedClusterStorageProfileDiskCSIDriverResponseOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverResponseOutput) ToManagedClusterStorageProfileDiskCSIDriverResponseOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverResponseOutput {
	return o
}

// Whether to enable AzureDisk CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileDiskCSIDriverResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileDiskCSIDriverResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileDiskCSIDriverResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput) ToManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput() ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput) ToManagedClusterStorageProfileDiskCSIDriverResponsePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput) Elem() ManagedClusterStorageProfileDiskCSIDriverResponseOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileDiskCSIDriverResponse) ManagedClusterStorageProfileDiskCSIDriverResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileDiskCSIDriverResponse
		return ret
	}).(ManagedClusterStorageProfileDiskCSIDriverResponseOutput)
}

// Whether to enable AzureDisk CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileDiskCSIDriverResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileFileCSIDriver struct {
	// Whether to enable AzureFile CSI Driver. The default value is true.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterStorageProfileFileCSIDriverInput is an input type that accepts ManagedClusterStorageProfileFileCSIDriverArgs and ManagedClusterStorageProfileFileCSIDriverOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileFileCSIDriverInput` via:
//
//	ManagedClusterStorageProfileFileCSIDriverArgs{...}
type ManagedClusterStorageProfileFileCSIDriverInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileFileCSIDriverOutput() ManagedClusterStorageProfileFileCSIDriverOutput
	ToManagedClusterStorageProfileFileCSIDriverOutputWithContext(context.Context) ManagedClusterStorageProfileFileCSIDriverOutput
}

// AzureFile CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileFileCSIDriverArgs struct {
	// Whether to enable AzureFile CSI Driver. The default value is true.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterStorageProfileFileCSIDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileFileCSIDriver)(nil)).Elem()
}

func (i ManagedClusterStorageProfileFileCSIDriverArgs) ToManagedClusterStorageProfileFileCSIDriverOutput() ManagedClusterStorageProfileFileCSIDriverOutput {
	return i.ToManagedClusterStorageProfileFileCSIDriverOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileFileCSIDriverArgs) ToManagedClusterStorageProfileFileCSIDriverOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileFileCSIDriverOutput)
}

func (i ManagedClusterStorageProfileFileCSIDriverArgs) ToManagedClusterStorageProfileFileCSIDriverPtrOutput() ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return i.ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileFileCSIDriverArgs) ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileFileCSIDriverOutput).ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(ctx)
}

// ManagedClusterStorageProfileFileCSIDriverPtrInput is an input type that accepts ManagedClusterStorageProfileFileCSIDriverArgs, ManagedClusterStorageProfileFileCSIDriverPtr and ManagedClusterStorageProfileFileCSIDriverPtrOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileFileCSIDriverPtrInput` via:
//
//	        ManagedClusterStorageProfileFileCSIDriverArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterStorageProfileFileCSIDriverPtrInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileFileCSIDriverPtrOutput() ManagedClusterStorageProfileFileCSIDriverPtrOutput
	ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(context.Context) ManagedClusterStorageProfileFileCSIDriverPtrOutput
}

type managedClusterStorageProfileFileCSIDriverPtrType ManagedClusterStorageProfileFileCSIDriverArgs

func ManagedClusterStorageProfileFileCSIDriverPtr(v *ManagedClusterStorageProfileFileCSIDriverArgs) ManagedClusterStorageProfileFileCSIDriverPtrInput {
	return (*managedClusterStorageProfileFileCSIDriverPtrType)(v)
}

func (*managedClusterStorageProfileFileCSIDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileFileCSIDriver)(nil)).Elem()
}

func (i *managedClusterStorageProfileFileCSIDriverPtrType) ToManagedClusterStorageProfileFileCSIDriverPtrOutput() ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return i.ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(context.Background())
}

func (i *managedClusterStorageProfileFileCSIDriverPtrType) ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileFileCSIDriverPtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileFileCSIDriverOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileFileCSIDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileFileCSIDriver)(nil)).Elem()
}

func (o ManagedClusterStorageProfileFileCSIDriverOutput) ToManagedClusterStorageProfileFileCSIDriverOutput() ManagedClusterStorageProfileFileCSIDriverOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverOutput) ToManagedClusterStorageProfileFileCSIDriverOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverOutput) ToManagedClusterStorageProfileFileCSIDriverPtrOutput() ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return o.ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(context.Background())
}

func (o ManagedClusterStorageProfileFileCSIDriverOutput) ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterStorageProfileFileCSIDriver) *ManagedClusterStorageProfileFileCSIDriver {
		return &v
	}).(ManagedClusterStorageProfileFileCSIDriverPtrOutput)
}

// Whether to enable AzureFile CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileFileCSIDriverOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileFileCSIDriver) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileFileCSIDriverPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileFileCSIDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileFileCSIDriver)(nil)).Elem()
}

func (o ManagedClusterStorageProfileFileCSIDriverPtrOutput) ToManagedClusterStorageProfileFileCSIDriverPtrOutput() ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverPtrOutput) ToManagedClusterStorageProfileFileCSIDriverPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverPtrOutput) Elem() ManagedClusterStorageProfileFileCSIDriverOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileFileCSIDriver) ManagedClusterStorageProfileFileCSIDriver {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileFileCSIDriver
		return ret
	}).(ManagedClusterStorageProfileFileCSIDriverOutput)
}

// Whether to enable AzureFile CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileFileCSIDriverPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileFileCSIDriver) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileFileCSIDriverResponse struct {
	// Whether to enable AzureFile CSI Driver. The default value is true.
	Enabled *bool `pulumi:"enabled"`
}

// AzureFile CSI Driver settings for the storage profile.
type ManagedClusterStorageProfileFileCSIDriverResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileFileCSIDriverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileFileCSIDriverResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileFileCSIDriverResponseOutput) ToManagedClusterStorageProfileFileCSIDriverResponseOutput() ManagedClusterStorageProfileFileCSIDriverResponseOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverResponseOutput) ToManagedClusterStorageProfileFileCSIDriverResponseOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverResponseOutput {
	return o
}

// Whether to enable AzureFile CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileFileCSIDriverResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileFileCSIDriverResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileFileCSIDriverResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput) ToManagedClusterStorageProfileFileCSIDriverResponsePtrOutput() ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput) ToManagedClusterStorageProfileFileCSIDriverResponsePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput) Elem() ManagedClusterStorageProfileFileCSIDriverResponseOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileFileCSIDriverResponse) ManagedClusterStorageProfileFileCSIDriverResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileFileCSIDriverResponse
		return ret
	}).(ManagedClusterStorageProfileFileCSIDriverResponseOutput)
}

// Whether to enable AzureFile CSI Driver. The default value is true.
func (o ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileFileCSIDriverResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Storage profile for the container service cluster.
type ManagedClusterStorageProfileResponse struct {
	// AzureBlob CSI Driver settings for the storage profile.
	BlobCSIDriver *ManagedClusterStorageProfileBlobCSIDriverResponse `pulumi:"blobCSIDriver"`
	// AzureDisk CSI Driver settings for the storage profile.
	DiskCSIDriver *ManagedClusterStorageProfileDiskCSIDriverResponse `pulumi:"diskCSIDriver"`
	// AzureFile CSI Driver settings for the storage profile.
	FileCSIDriver *ManagedClusterStorageProfileFileCSIDriverResponse `pulumi:"fileCSIDriver"`
	// Snapshot Controller settings for the storage profile.
	SnapshotController *ManagedClusterStorageProfileSnapshotControllerResponse `pulumi:"snapshotController"`
}

// Storage profile for the container service cluster.
type ManagedClusterStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileResponseOutput) ToManagedClusterStorageProfileResponseOutput() ManagedClusterStorageProfileResponseOutput {
	return o
}

func (o ManagedClusterStorageProfileResponseOutput) ToManagedClusterStorageProfileResponseOutputWithContext(ctx context.Context) ManagedClusterStorageProfileResponseOutput {
	return o
}

// AzureBlob CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileResponseOutput) BlobCSIDriver() ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileBlobCSIDriverResponse {
		return v.BlobCSIDriver
	}).(ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileResponseOutput) DiskCSIDriver() ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileDiskCSIDriverResponse {
		return v.DiskCSIDriver
	}).(ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileResponseOutput) FileCSIDriver() ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileFileCSIDriverResponse {
		return v.FileCSIDriver
	}).(ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput)
}

// Snapshot Controller settings for the storage profile.
func (o ManagedClusterStorageProfileResponseOutput) SnapshotController() ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileSnapshotControllerResponse {
		return v.SnapshotController
	}).(ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput)
}

type ManagedClusterStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileResponsePtrOutput) ToManagedClusterStorageProfileResponsePtrOutput() ManagedClusterStorageProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileResponsePtrOutput) ToManagedClusterStorageProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileResponsePtrOutput) Elem() ManagedClusterStorageProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileResponse) ManagedClusterStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileResponse
		return ret
	}).(ManagedClusterStorageProfileResponseOutput)
}

// AzureBlob CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileResponsePtrOutput) BlobCSIDriver() ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileBlobCSIDriverResponse {
		if v == nil {
			return nil
		}
		return v.BlobCSIDriver
	}).(ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput)
}

// AzureDisk CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileResponsePtrOutput) DiskCSIDriver() ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileDiskCSIDriverResponse {
		if v == nil {
			return nil
		}
		return v.DiskCSIDriver
	}).(ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput)
}

// AzureFile CSI Driver settings for the storage profile.
func (o ManagedClusterStorageProfileResponsePtrOutput) FileCSIDriver() ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileFileCSIDriverResponse {
		if v == nil {
			return nil
		}
		return v.FileCSIDriver
	}).(ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput)
}

// Snapshot Controller settings for the storage profile.
func (o ManagedClusterStorageProfileResponsePtrOutput) SnapshotController() ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileResponse) *ManagedClusterStorageProfileSnapshotControllerResponse {
		if v == nil {
			return nil
		}
		return v.SnapshotController
	}).(ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput)
}

// Snapshot Controller settings for the storage profile.
type ManagedClusterStorageProfileSnapshotController struct {
	// Whether to enable Snapshot Controller. The default value is true.
	Enabled *bool `pulumi:"enabled"`
}

// ManagedClusterStorageProfileSnapshotControllerInput is an input type that accepts ManagedClusterStorageProfileSnapshotControllerArgs and ManagedClusterStorageProfileSnapshotControllerOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileSnapshotControllerInput` via:
//
//	ManagedClusterStorageProfileSnapshotControllerArgs{...}
type ManagedClusterStorageProfileSnapshotControllerInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileSnapshotControllerOutput() ManagedClusterStorageProfileSnapshotControllerOutput
	ToManagedClusterStorageProfileSnapshotControllerOutputWithContext(context.Context) ManagedClusterStorageProfileSnapshotControllerOutput
}

// Snapshot Controller settings for the storage profile.
type ManagedClusterStorageProfileSnapshotControllerArgs struct {
	// Whether to enable Snapshot Controller. The default value is true.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ManagedClusterStorageProfileSnapshotControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileSnapshotController)(nil)).Elem()
}

func (i ManagedClusterStorageProfileSnapshotControllerArgs) ToManagedClusterStorageProfileSnapshotControllerOutput() ManagedClusterStorageProfileSnapshotControllerOutput {
	return i.ToManagedClusterStorageProfileSnapshotControllerOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileSnapshotControllerArgs) ToManagedClusterStorageProfileSnapshotControllerOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileSnapshotControllerOutput)
}

func (i ManagedClusterStorageProfileSnapshotControllerArgs) ToManagedClusterStorageProfileSnapshotControllerPtrOutput() ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return i.ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(context.Background())
}

func (i ManagedClusterStorageProfileSnapshotControllerArgs) ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileSnapshotControllerOutput).ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(ctx)
}

// ManagedClusterStorageProfileSnapshotControllerPtrInput is an input type that accepts ManagedClusterStorageProfileSnapshotControllerArgs, ManagedClusterStorageProfileSnapshotControllerPtr and ManagedClusterStorageProfileSnapshotControllerPtrOutput values.
// You can construct a concrete instance of `ManagedClusterStorageProfileSnapshotControllerPtrInput` via:
//
//	        ManagedClusterStorageProfileSnapshotControllerArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterStorageProfileSnapshotControllerPtrInput interface {
	pulumi.Input

	ToManagedClusterStorageProfileSnapshotControllerPtrOutput() ManagedClusterStorageProfileSnapshotControllerPtrOutput
	ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(context.Context) ManagedClusterStorageProfileSnapshotControllerPtrOutput
}

type managedClusterStorageProfileSnapshotControllerPtrType ManagedClusterStorageProfileSnapshotControllerArgs

func ManagedClusterStorageProfileSnapshotControllerPtr(v *ManagedClusterStorageProfileSnapshotControllerArgs) ManagedClusterStorageProfileSnapshotControllerPtrInput {
	return (*managedClusterStorageProfileSnapshotControllerPtrType)(v)
}

func (*managedClusterStorageProfileSnapshotControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileSnapshotController)(nil)).Elem()
}

func (i *managedClusterStorageProfileSnapshotControllerPtrType) ToManagedClusterStorageProfileSnapshotControllerPtrOutput() ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return i.ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(context.Background())
}

func (i *managedClusterStorageProfileSnapshotControllerPtrType) ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterStorageProfileSnapshotControllerPtrOutput)
}

// Snapshot Controller settings for the storage profile.
type ManagedClusterStorageProfileSnapshotControllerOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileSnapshotControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileSnapshotController)(nil)).Elem()
}

func (o ManagedClusterStorageProfileSnapshotControllerOutput) ToManagedClusterStorageProfileSnapshotControllerOutput() ManagedClusterStorageProfileSnapshotControllerOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerOutput) ToManagedClusterStorageProfileSnapshotControllerOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerOutput) ToManagedClusterStorageProfileSnapshotControllerPtrOutput() ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return o.ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(context.Background())
}

func (o ManagedClusterStorageProfileSnapshotControllerOutput) ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterStorageProfileSnapshotController) *ManagedClusterStorageProfileSnapshotController {
		return &v
	}).(ManagedClusterStorageProfileSnapshotControllerPtrOutput)
}

// Whether to enable Snapshot Controller. The default value is true.
func (o ManagedClusterStorageProfileSnapshotControllerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileSnapshotController) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileSnapshotControllerPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileSnapshotControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileSnapshotController)(nil)).Elem()
}

func (o ManagedClusterStorageProfileSnapshotControllerPtrOutput) ToManagedClusterStorageProfileSnapshotControllerPtrOutput() ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerPtrOutput) ToManagedClusterStorageProfileSnapshotControllerPtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerPtrOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerPtrOutput) Elem() ManagedClusterStorageProfileSnapshotControllerOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileSnapshotController) ManagedClusterStorageProfileSnapshotController {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileSnapshotController
		return ret
	}).(ManagedClusterStorageProfileSnapshotControllerOutput)
}

// Whether to enable Snapshot Controller. The default value is true.
func (o ManagedClusterStorageProfileSnapshotControllerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileSnapshotController) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Snapshot Controller settings for the storage profile.
type ManagedClusterStorageProfileSnapshotControllerResponse struct {
	// Whether to enable Snapshot Controller. The default value is true.
	Enabled *bool `pulumi:"enabled"`
}

// Snapshot Controller settings for the storage profile.
type ManagedClusterStorageProfileSnapshotControllerResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileSnapshotControllerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterStorageProfileSnapshotControllerResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileSnapshotControllerResponseOutput) ToManagedClusterStorageProfileSnapshotControllerResponseOutput() ManagedClusterStorageProfileSnapshotControllerResponseOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerResponseOutput) ToManagedClusterStorageProfileSnapshotControllerResponseOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerResponseOutput {
	return o
}

// Whether to enable Snapshot Controller. The default value is true.
func (o ManagedClusterStorageProfileSnapshotControllerResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterStorageProfileSnapshotControllerResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterStorageProfileSnapshotControllerResponse)(nil)).Elem()
}

func (o ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput) ToManagedClusterStorageProfileSnapshotControllerResponsePtrOutput() ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput) ToManagedClusterStorageProfileSnapshotControllerResponsePtrOutputWithContext(ctx context.Context) ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput {
	return o
}

func (o ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput) Elem() ManagedClusterStorageProfileSnapshotControllerResponseOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileSnapshotControllerResponse) ManagedClusterStorageProfileSnapshotControllerResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterStorageProfileSnapshotControllerResponse
		return ret
	}).(ManagedClusterStorageProfileSnapshotControllerResponseOutput)
}

// Whether to enable Snapshot Controller. The default value is true.
func (o ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterStorageProfileSnapshotControllerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The update to be applied to the ManagedClusters.
type ManagedClusterUpdate struct {
	// The node image upgrade to be applied to the target nodes in update run.
	NodeImageSelection *NodeImageSelection `pulumi:"nodeImageSelection"`
	// The upgrade to apply to the ManagedClusters.
	Upgrade ManagedClusterUpgradeSpec `pulumi:"upgrade"`
}

// ManagedClusterUpdateInput is an input type that accepts ManagedClusterUpdateArgs and ManagedClusterUpdateOutput values.
// You can construct a concrete instance of `ManagedClusterUpdateInput` via:
//
//	ManagedClusterUpdateArgs{...}
type ManagedClusterUpdateInput interface {
	pulumi.Input

	ToManagedClusterUpdateOutput() ManagedClusterUpdateOutput
	ToManagedClusterUpdateOutputWithContext(context.Context) ManagedClusterUpdateOutput
}

// The update to be applied to the ManagedClusters.
type ManagedClusterUpdateArgs struct {
	// The node image upgrade to be applied to the target nodes in update run.
	NodeImageSelection NodeImageSelectionPtrInput `pulumi:"nodeImageSelection"`
	// The upgrade to apply to the ManagedClusters.
	Upgrade ManagedClusterUpgradeSpecInput `pulumi:"upgrade"`
}

func (ManagedClusterUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpdate)(nil)).Elem()
}

func (i ManagedClusterUpdateArgs) ToManagedClusterUpdateOutput() ManagedClusterUpdateOutput {
	return i.ToManagedClusterUpdateOutputWithContext(context.Background())
}

func (i ManagedClusterUpdateArgs) ToManagedClusterUpdateOutputWithContext(ctx context.Context) ManagedClusterUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterUpdateOutput)
}

// The update to be applied to the ManagedClusters.
type ManagedClusterUpdateOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpdate)(nil)).Elem()
}

func (o ManagedClusterUpdateOutput) ToManagedClusterUpdateOutput() ManagedClusterUpdateOutput {
	return o
}

func (o ManagedClusterUpdateOutput) ToManagedClusterUpdateOutputWithContext(ctx context.Context) ManagedClusterUpdateOutput {
	return o
}

// The node image upgrade to be applied to the target nodes in update run.
func (o ManagedClusterUpdateOutput) NodeImageSelection() NodeImageSelectionPtrOutput {
	return o.ApplyT(func(v ManagedClusterUpdate) *NodeImageSelection { return v.NodeImageSelection }).(NodeImageSelectionPtrOutput)
}

// The upgrade to apply to the ManagedClusters.
func (o ManagedClusterUpdateOutput) Upgrade() ManagedClusterUpgradeSpecOutput {
	return o.ApplyT(func(v ManagedClusterUpdate) ManagedClusterUpgradeSpec { return v.Upgrade }).(ManagedClusterUpgradeSpecOutput)
}

// The update to be applied to the ManagedClusters.
type ManagedClusterUpdateResponse struct {
	// The node image upgrade to be applied to the target nodes in update run.
	NodeImageSelection *NodeImageSelectionResponse `pulumi:"nodeImageSelection"`
	// The upgrade to apply to the ManagedClusters.
	Upgrade ManagedClusterUpgradeSpecResponse `pulumi:"upgrade"`
}

// The update to be applied to the ManagedClusters.
type ManagedClusterUpdateResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpdateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpdateResponse)(nil)).Elem()
}

func (o ManagedClusterUpdateResponseOutput) ToManagedClusterUpdateResponseOutput() ManagedClusterUpdateResponseOutput {
	return o
}

func (o ManagedClusterUpdateResponseOutput) ToManagedClusterUpdateResponseOutputWithContext(ctx context.Context) ManagedClusterUpdateResponseOutput {
	return o
}

// The node image upgrade to be applied to the target nodes in update run.
func (o ManagedClusterUpdateResponseOutput) NodeImageSelection() NodeImageSelectionResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterUpdateResponse) *NodeImageSelectionResponse { return v.NodeImageSelection }).(NodeImageSelectionResponsePtrOutput)
}

// The upgrade to apply to the ManagedClusters.
func (o ManagedClusterUpdateResponseOutput) Upgrade() ManagedClusterUpgradeSpecResponseOutput {
	return o.ApplyT(func(v ManagedClusterUpdateResponse) ManagedClusterUpgradeSpecResponse { return v.Upgrade }).(ManagedClusterUpgradeSpecResponseOutput)
}

// The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpec struct {
	// The Kubernetes version to upgrade the member clusters to.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// ManagedClusterUpgradeType is the type of upgrade to be applied.
	Type string `pulumi:"type"`
}

// ManagedClusterUpgradeSpecInput is an input type that accepts ManagedClusterUpgradeSpecArgs and ManagedClusterUpgradeSpecOutput values.
// You can construct a concrete instance of `ManagedClusterUpgradeSpecInput` via:
//
//	ManagedClusterUpgradeSpecArgs{...}
type ManagedClusterUpgradeSpecInput interface {
	pulumi.Input

	ToManagedClusterUpgradeSpecOutput() ManagedClusterUpgradeSpecOutput
	ToManagedClusterUpgradeSpecOutputWithContext(context.Context) ManagedClusterUpgradeSpecOutput
}

// The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpecArgs struct {
	// The Kubernetes version to upgrade the member clusters to.
	KubernetesVersion pulumi.StringPtrInput `pulumi:"kubernetesVersion"`
	// ManagedClusterUpgradeType is the type of upgrade to be applied.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedClusterUpgradeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeSpec)(nil)).Elem()
}

func (i ManagedClusterUpgradeSpecArgs) ToManagedClusterUpgradeSpecOutput() ManagedClusterUpgradeSpecOutput {
	return i.ToManagedClusterUpgradeSpecOutputWithContext(context.Background())
}

func (i ManagedClusterUpgradeSpecArgs) ToManagedClusterUpgradeSpecOutputWithContext(ctx context.Context) ManagedClusterUpgradeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterUpgradeSpecOutput)
}

// The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpecOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpgradeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeSpec)(nil)).Elem()
}

func (o ManagedClusterUpgradeSpecOutput) ToManagedClusterUpgradeSpecOutput() ManagedClusterUpgradeSpecOutput {
	return o
}

func (o ManagedClusterUpgradeSpecOutput) ToManagedClusterUpgradeSpecOutputWithContext(ctx context.Context) ManagedClusterUpgradeSpecOutput {
	return o
}

// The Kubernetes version to upgrade the member clusters to.
func (o ManagedClusterUpgradeSpecOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterUpgradeSpec) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// ManagedClusterUpgradeType is the type of upgrade to be applied.
func (o ManagedClusterUpgradeSpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterUpgradeSpec) string { return v.Type }).(pulumi.StringOutput)
}

// The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpecResponse struct {
	// The Kubernetes version to upgrade the member clusters to.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// ManagedClusterUpgradeType is the type of upgrade to be applied.
	Type string `pulumi:"type"`
}

// The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpecResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterUpgradeSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterUpgradeSpecResponse)(nil)).Elem()
}

func (o ManagedClusterUpgradeSpecResponseOutput) ToManagedClusterUpgradeSpecResponseOutput() ManagedClusterUpgradeSpecResponseOutput {
	return o
}

func (o ManagedClusterUpgradeSpecResponseOutput) ToManagedClusterUpgradeSpecResponseOutputWithContext(ctx context.Context) ManagedClusterUpgradeSpecResponseOutput {
	return o
}

// The Kubernetes version to upgrade the member clusters to.
func (o ManagedClusterUpgradeSpecResponseOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterUpgradeSpecResponse) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// ManagedClusterUpgradeType is the type of upgrade to be applied.
func (o ManagedClusterUpgradeSpecResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterUpgradeSpecResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Profile for Windows VMs in the managed cluster.
type ManagedClusterWindowsProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
	AdminUsername string `pulumi:"adminUsername"`
	// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
	EnableCSIProxy *bool `pulumi:"enableCSIProxy"`
	// The Windows gMSA Profile in the Managed Cluster.
	GmsaProfile *WindowsGmsaProfile `pulumi:"gmsaProfile"`
	// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
	LicenseType *string `pulumi:"licenseType"`
}

// ManagedClusterWindowsProfileInput is an input type that accepts ManagedClusterWindowsProfileArgs and ManagedClusterWindowsProfileOutput values.
// You can construct a concrete instance of `ManagedClusterWindowsProfileInput` via:
//
//	ManagedClusterWindowsProfileArgs{...}
type ManagedClusterWindowsProfileInput interface {
	pulumi.Input

	ToManagedClusterWindowsProfileOutput() ManagedClusterWindowsProfileOutput
	ToManagedClusterWindowsProfileOutputWithContext(context.Context) ManagedClusterWindowsProfileOutput
}

// Profile for Windows VMs in the managed cluster.
type ManagedClusterWindowsProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
	AdminUsername pulumi.StringInput `pulumi:"adminUsername"`
	// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
	EnableCSIProxy pulumi.BoolPtrInput `pulumi:"enableCSIProxy"`
	// The Windows gMSA Profile in the Managed Cluster.
	GmsaProfile WindowsGmsaProfilePtrInput `pulumi:"gmsaProfile"`
	// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
	LicenseType pulumi.StringPtrInput `pulumi:"licenseType"`
}

func (ManagedClusterWindowsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWindowsProfile)(nil)).Elem()
}

func (i ManagedClusterWindowsProfileArgs) ToManagedClusterWindowsProfileOutput() ManagedClusterWindowsProfileOutput {
	return i.ToManagedClusterWindowsProfileOutputWithContext(context.Background())
}

func (i ManagedClusterWindowsProfileArgs) ToManagedClusterWindowsProfileOutputWithContext(ctx context.Context) ManagedClusterWindowsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWindowsProfileOutput)
}

func (i ManagedClusterWindowsProfileArgs) ToManagedClusterWindowsProfilePtrOutput() ManagedClusterWindowsProfilePtrOutput {
	return i.ToManagedClusterWindowsProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterWindowsProfileArgs) ToManagedClusterWindowsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWindowsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWindowsProfileOutput).ToManagedClusterWindowsProfilePtrOutputWithContext(ctx)
}

// ManagedClusterWindowsProfilePtrInput is an input type that accepts ManagedClusterWindowsProfileArgs, ManagedClusterWindowsProfilePtr and ManagedClusterWindowsProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterWindowsProfilePtrInput` via:
//
//	        ManagedClusterWindowsProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterWindowsProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterWindowsProfilePtrOutput() ManagedClusterWindowsProfilePtrOutput
	ToManagedClusterWindowsProfilePtrOutputWithContext(context.Context) ManagedClusterWindowsProfilePtrOutput
}

type managedClusterWindowsProfilePtrType ManagedClusterWindowsProfileArgs

func ManagedClusterWindowsProfilePtr(v *ManagedClusterWindowsProfileArgs) ManagedClusterWindowsProfilePtrInput {
	return (*managedClusterWindowsProfilePtrType)(v)
}

func (*managedClusterWindowsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWindowsProfile)(nil)).Elem()
}

func (i *managedClusterWindowsProfilePtrType) ToManagedClusterWindowsProfilePtrOutput() ManagedClusterWindowsProfilePtrOutput {
	return i.ToManagedClusterWindowsProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterWindowsProfilePtrType) ToManagedClusterWindowsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWindowsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWindowsProfilePtrOutput)
}

// Profile for Windows VMs in the managed cluster.
type ManagedClusterWindowsProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterWindowsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWindowsProfile)(nil)).Elem()
}

func (o ManagedClusterWindowsProfileOutput) ToManagedClusterWindowsProfileOutput() ManagedClusterWindowsProfileOutput {
	return o
}

func (o ManagedClusterWindowsProfileOutput) ToManagedClusterWindowsProfileOutputWithContext(ctx context.Context) ManagedClusterWindowsProfileOutput {
	return o
}

func (o ManagedClusterWindowsProfileOutput) ToManagedClusterWindowsProfilePtrOutput() ManagedClusterWindowsProfilePtrOutput {
	return o.ToManagedClusterWindowsProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterWindowsProfileOutput) ToManagedClusterWindowsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWindowsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterWindowsProfile) *ManagedClusterWindowsProfile {
		return &v
	}).(ManagedClusterWindowsProfilePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
func (o ManagedClusterWindowsProfileOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfile) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o ManagedClusterWindowsProfileOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfile) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
func (o ManagedClusterWindowsProfileOutput) EnableCSIProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfile) *bool { return v.EnableCSIProxy }).(pulumi.BoolPtrOutput)
}

// The Windows gMSA Profile in the Managed Cluster.
func (o ManagedClusterWindowsProfileOutput) GmsaProfile() WindowsGmsaProfilePtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfile) *WindowsGmsaProfile { return v.GmsaProfile }).(WindowsGmsaProfilePtrOutput)
}

// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
func (o ManagedClusterWindowsProfileOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfile) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

type ManagedClusterWindowsProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWindowsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWindowsProfile)(nil)).Elem()
}

func (o ManagedClusterWindowsProfilePtrOutput) ToManagedClusterWindowsProfilePtrOutput() ManagedClusterWindowsProfilePtrOutput {
	return o
}

func (o ManagedClusterWindowsProfilePtrOutput) ToManagedClusterWindowsProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWindowsProfilePtrOutput {
	return o
}

func (o ManagedClusterWindowsProfilePtrOutput) Elem() ManagedClusterWindowsProfileOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfile) ManagedClusterWindowsProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWindowsProfile
		return ret
	}).(ManagedClusterWindowsProfileOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
func (o ManagedClusterWindowsProfilePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o ManagedClusterWindowsProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
func (o ManagedClusterWindowsProfilePtrOutput) EnableCSIProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCSIProxy
	}).(pulumi.BoolPtrOutput)
}

// The Windows gMSA Profile in the Managed Cluster.
func (o ManagedClusterWindowsProfilePtrOutput) GmsaProfile() WindowsGmsaProfilePtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfile) *WindowsGmsaProfile {
		if v == nil {
			return nil
		}
		return v.GmsaProfile
	}).(WindowsGmsaProfilePtrOutput)
}

// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
func (o ManagedClusterWindowsProfilePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfile) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Profile for Windows VMs in the managed cluster.
type ManagedClusterWindowsProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
	AdminUsername string `pulumi:"adminUsername"`
	// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
	EnableCSIProxy *bool `pulumi:"enableCSIProxy"`
	// The Windows gMSA Profile in the Managed Cluster.
	GmsaProfile *WindowsGmsaProfileResponse `pulumi:"gmsaProfile"`
	// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
	LicenseType *string `pulumi:"licenseType"`
}

// Profile for Windows VMs in the managed cluster.
type ManagedClusterWindowsProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterWindowsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWindowsProfileResponse)(nil)).Elem()
}

func (o ManagedClusterWindowsProfileResponseOutput) ToManagedClusterWindowsProfileResponseOutput() ManagedClusterWindowsProfileResponseOutput {
	return o
}

func (o ManagedClusterWindowsProfileResponseOutput) ToManagedClusterWindowsProfileResponseOutputWithContext(ctx context.Context) ManagedClusterWindowsProfileResponseOutput {
	return o
}

// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
func (o ManagedClusterWindowsProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o ManagedClusterWindowsProfileResponseOutput) AdminUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfileResponse) string { return v.AdminUsername }).(pulumi.StringOutput)
}

// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
func (o ManagedClusterWindowsProfileResponseOutput) EnableCSIProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfileResponse) *bool { return v.EnableCSIProxy }).(pulumi.BoolPtrOutput)
}

// The Windows gMSA Profile in the Managed Cluster.
func (o ManagedClusterWindowsProfileResponseOutput) GmsaProfile() WindowsGmsaProfileResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfileResponse) *WindowsGmsaProfileResponse { return v.GmsaProfile }).(WindowsGmsaProfileResponsePtrOutput)
}

// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
func (o ManagedClusterWindowsProfileResponseOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedClusterWindowsProfileResponse) *string { return v.LicenseType }).(pulumi.StringPtrOutput)
}

type ManagedClusterWindowsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWindowsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWindowsProfileResponse)(nil)).Elem()
}

func (o ManagedClusterWindowsProfileResponsePtrOutput) ToManagedClusterWindowsProfileResponsePtrOutput() ManagedClusterWindowsProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterWindowsProfileResponsePtrOutput) ToManagedClusterWindowsProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterWindowsProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterWindowsProfileResponsePtrOutput) Elem() ManagedClusterWindowsProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfileResponse) ManagedClusterWindowsProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWindowsProfileResponse
		return ret
	}).(ManagedClusterWindowsProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
func (o ManagedClusterWindowsProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> **Restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1 character <br><br> **Max-length:** 20 characters
func (o ManagedClusterWindowsProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// For more details on CSI proxy, see the [CSI proxy GitHub repo](https://github.com/kubernetes-csi/csi-proxy).
func (o ManagedClusterWindowsProfileResponsePtrOutput) EnableCSIProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableCSIProxy
	}).(pulumi.BoolPtrOutput)
}

// The Windows gMSA Profile in the Managed Cluster.
func (o ManagedClusterWindowsProfileResponsePtrOutput) GmsaProfile() WindowsGmsaProfileResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfileResponse) *WindowsGmsaProfileResponse {
		if v == nil {
			return nil
		}
		return v.GmsaProfile
	}).(WindowsGmsaProfileResponsePtrOutput)
}

// The license type to use for Windows VMs. See [Azure Hybrid User Benefits](https://azure.microsoft.com/pricing/hybrid-benefit/faq/) for more details.
func (o ManagedClusterWindowsProfileResponsePtrOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWindowsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LicenseType
	}).(pulumi.StringPtrOutput)
}

// Workload Auto-scaler profile for the managed cluster.
type ManagedClusterWorkloadAutoScalerProfile struct {
	// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
	Keda *ManagedClusterWorkloadAutoScalerProfileKeda `pulumi:"keda"`
	// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
	VerticalPodAutoscaler *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler `pulumi:"verticalPodAutoscaler"`
}

// Defaults sets the appropriate defaults for ManagedClusterWorkloadAutoScalerProfile
func (val *ManagedClusterWorkloadAutoScalerProfile) Defaults() *ManagedClusterWorkloadAutoScalerProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.VerticalPodAutoscaler = tmp.VerticalPodAutoscaler.Defaults()

	return &tmp
}

// ManagedClusterWorkloadAutoScalerProfileInput is an input type that accepts ManagedClusterWorkloadAutoScalerProfileArgs and ManagedClusterWorkloadAutoScalerProfileOutput values.
// You can construct a concrete instance of `ManagedClusterWorkloadAutoScalerProfileInput` via:
//
//	ManagedClusterWorkloadAutoScalerProfileArgs{...}
type ManagedClusterWorkloadAutoScalerProfileInput interface {
	pulumi.Input

	ToManagedClusterWorkloadAutoScalerProfileOutput() ManagedClusterWorkloadAutoScalerProfileOutput
	ToManagedClusterWorkloadAutoScalerProfileOutputWithContext(context.Context) ManagedClusterWorkloadAutoScalerProfileOutput
}

// Workload Auto-scaler profile for the managed cluster.
type ManagedClusterWorkloadAutoScalerProfileArgs struct {
	// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
	Keda ManagedClusterWorkloadAutoScalerProfileKedaPtrInput `pulumi:"keda"`
	// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
	VerticalPodAutoscaler ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrInput `pulumi:"verticalPodAutoscaler"`
}

// Defaults sets the appropriate defaults for ManagedClusterWorkloadAutoScalerProfileArgs
func (val *ManagedClusterWorkloadAutoScalerProfileArgs) Defaults() *ManagedClusterWorkloadAutoScalerProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ManagedClusterWorkloadAutoScalerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfile)(nil)).Elem()
}

func (i ManagedClusterWorkloadAutoScalerProfileArgs) ToManagedClusterWorkloadAutoScalerProfileOutput() ManagedClusterWorkloadAutoScalerProfileOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileOutputWithContext(context.Background())
}

func (i ManagedClusterWorkloadAutoScalerProfileArgs) ToManagedClusterWorkloadAutoScalerProfileOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileOutput)
}

func (i ManagedClusterWorkloadAutoScalerProfileArgs) ToManagedClusterWorkloadAutoScalerProfilePtrOutput() ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(context.Background())
}

func (i ManagedClusterWorkloadAutoScalerProfileArgs) ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileOutput).ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(ctx)
}

// ManagedClusterWorkloadAutoScalerProfilePtrInput is an input type that accepts ManagedClusterWorkloadAutoScalerProfileArgs, ManagedClusterWorkloadAutoScalerProfilePtr and ManagedClusterWorkloadAutoScalerProfilePtrOutput values.
// You can construct a concrete instance of `ManagedClusterWorkloadAutoScalerProfilePtrInput` via:
//
//	        ManagedClusterWorkloadAutoScalerProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterWorkloadAutoScalerProfilePtrInput interface {
	pulumi.Input

	ToManagedClusterWorkloadAutoScalerProfilePtrOutput() ManagedClusterWorkloadAutoScalerProfilePtrOutput
	ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(context.Context) ManagedClusterWorkloadAutoScalerProfilePtrOutput
}

type managedClusterWorkloadAutoScalerProfilePtrType ManagedClusterWorkloadAutoScalerProfileArgs

func ManagedClusterWorkloadAutoScalerProfilePtr(v *ManagedClusterWorkloadAutoScalerProfileArgs) ManagedClusterWorkloadAutoScalerProfilePtrInput {
	return (*managedClusterWorkloadAutoScalerProfilePtrType)(v)
}

func (*managedClusterWorkloadAutoScalerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfile)(nil)).Elem()
}

func (i *managedClusterWorkloadAutoScalerProfilePtrType) ToManagedClusterWorkloadAutoScalerProfilePtrOutput() ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(context.Background())
}

func (i *managedClusterWorkloadAutoScalerProfilePtrType) ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfilePtrOutput)
}

// Workload Auto-scaler profile for the managed cluster.
type ManagedClusterWorkloadAutoScalerProfileOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfile)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileOutput) ToManagedClusterWorkloadAutoScalerProfileOutput() ManagedClusterWorkloadAutoScalerProfileOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileOutput) ToManagedClusterWorkloadAutoScalerProfileOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileOutput) ToManagedClusterWorkloadAutoScalerProfilePtrOutput() ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return o.ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(context.Background())
}

func (o ManagedClusterWorkloadAutoScalerProfileOutput) ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterWorkloadAutoScalerProfile) *ManagedClusterWorkloadAutoScalerProfile {
		return &v
	}).(ManagedClusterWorkloadAutoScalerProfilePtrOutput)
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfileOutput) Keda() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfile) *ManagedClusterWorkloadAutoScalerProfileKeda {
		return v.Keda
	}).(ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfileOutput) VerticalPodAutoscaler() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfile) *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler {
		return v.VerticalPodAutoscaler
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput)
}

type ManagedClusterWorkloadAutoScalerProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfile)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfilePtrOutput) ToManagedClusterWorkloadAutoScalerProfilePtrOutput() ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfilePtrOutput) ToManagedClusterWorkloadAutoScalerProfilePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfilePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfilePtrOutput) Elem() ManagedClusterWorkloadAutoScalerProfileOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfile) ManagedClusterWorkloadAutoScalerProfile {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWorkloadAutoScalerProfile
		return ret
	}).(ManagedClusterWorkloadAutoScalerProfileOutput)
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfilePtrOutput) Keda() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfile) *ManagedClusterWorkloadAutoScalerProfileKeda {
		if v == nil {
			return nil
		}
		return v.Keda
	}).(ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfilePtrOutput) VerticalPodAutoscaler() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfile) *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler {
		if v == nil {
			return nil
		}
		return v.VerticalPodAutoscaler
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput)
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileKeda struct {
	// Whether to enable KEDA.
	Enabled bool `pulumi:"enabled"`
}

// ManagedClusterWorkloadAutoScalerProfileKedaInput is an input type that accepts ManagedClusterWorkloadAutoScalerProfileKedaArgs and ManagedClusterWorkloadAutoScalerProfileKedaOutput values.
// You can construct a concrete instance of `ManagedClusterWorkloadAutoScalerProfileKedaInput` via:
//
//	ManagedClusterWorkloadAutoScalerProfileKedaArgs{...}
type ManagedClusterWorkloadAutoScalerProfileKedaInput interface {
	pulumi.Input

	ToManagedClusterWorkloadAutoScalerProfileKedaOutput() ManagedClusterWorkloadAutoScalerProfileKedaOutput
	ToManagedClusterWorkloadAutoScalerProfileKedaOutputWithContext(context.Context) ManagedClusterWorkloadAutoScalerProfileKedaOutput
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileKedaArgs struct {
	// Whether to enable KEDA.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ManagedClusterWorkloadAutoScalerProfileKedaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileKeda)(nil)).Elem()
}

func (i ManagedClusterWorkloadAutoScalerProfileKedaArgs) ToManagedClusterWorkloadAutoScalerProfileKedaOutput() ManagedClusterWorkloadAutoScalerProfileKedaOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileKedaOutputWithContext(context.Background())
}

func (i ManagedClusterWorkloadAutoScalerProfileKedaArgs) ToManagedClusterWorkloadAutoScalerProfileKedaOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileKedaOutput)
}

func (i ManagedClusterWorkloadAutoScalerProfileKedaArgs) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutput() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(context.Background())
}

func (i ManagedClusterWorkloadAutoScalerProfileKedaArgs) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileKedaOutput).ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(ctx)
}

// ManagedClusterWorkloadAutoScalerProfileKedaPtrInput is an input type that accepts ManagedClusterWorkloadAutoScalerProfileKedaArgs, ManagedClusterWorkloadAutoScalerProfileKedaPtr and ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput values.
// You can construct a concrete instance of `ManagedClusterWorkloadAutoScalerProfileKedaPtrInput` via:
//
//	        ManagedClusterWorkloadAutoScalerProfileKedaArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterWorkloadAutoScalerProfileKedaPtrInput interface {
	pulumi.Input

	ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutput() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput
	ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(context.Context) ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput
}

type managedClusterWorkloadAutoScalerProfileKedaPtrType ManagedClusterWorkloadAutoScalerProfileKedaArgs

func ManagedClusterWorkloadAutoScalerProfileKedaPtr(v *ManagedClusterWorkloadAutoScalerProfileKedaArgs) ManagedClusterWorkloadAutoScalerProfileKedaPtrInput {
	return (*managedClusterWorkloadAutoScalerProfileKedaPtrType)(v)
}

func (*managedClusterWorkloadAutoScalerProfileKedaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileKeda)(nil)).Elem()
}

func (i *managedClusterWorkloadAutoScalerProfileKedaPtrType) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutput() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(context.Background())
}

func (i *managedClusterWorkloadAutoScalerProfileKedaPtrType) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput)
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileKedaOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileKedaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileKeda)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaOutput) ToManagedClusterWorkloadAutoScalerProfileKedaOutput() ManagedClusterWorkloadAutoScalerProfileKedaOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaOutput) ToManagedClusterWorkloadAutoScalerProfileKedaOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaOutput) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutput() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return o.ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(context.Background())
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaOutput) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterWorkloadAutoScalerProfileKeda) *ManagedClusterWorkloadAutoScalerProfileKeda {
		return &v
	}).(ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput)
}

// Whether to enable KEDA.
func (o ManagedClusterWorkloadAutoScalerProfileKedaOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfileKeda) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileKeda)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutput() ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput) ToManagedClusterWorkloadAutoScalerProfileKedaPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput) Elem() ManagedClusterWorkloadAutoScalerProfileKedaOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileKeda) ManagedClusterWorkloadAutoScalerProfileKeda {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWorkloadAutoScalerProfileKeda
		return ret
	}).(ManagedClusterWorkloadAutoScalerProfileKedaOutput)
}

// Whether to enable KEDA.
func (o ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileKeda) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileKedaResponse struct {
	// Whether to enable KEDA.
	Enabled bool `pulumi:"enabled"`
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileKedaResponse)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput) ToManagedClusterWorkloadAutoScalerProfileKedaResponseOutput() ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput) ToManagedClusterWorkloadAutoScalerProfileKedaResponseOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput {
	return o
}

// Whether to enable KEDA.
func (o ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfileKedaResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileKedaResponse)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput) ToManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput() ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput) ToManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput) Elem() ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileKedaResponse) ManagedClusterWorkloadAutoScalerProfileKedaResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWorkloadAutoScalerProfileKedaResponse
		return ret
	}).(ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput)
}

// Whether to enable KEDA.
func (o ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileKedaResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Workload Auto-scaler profile for the managed cluster.
type ManagedClusterWorkloadAutoScalerProfileResponse struct {
	// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
	Keda *ManagedClusterWorkloadAutoScalerProfileKedaResponse `pulumi:"keda"`
	// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
	VerticalPodAutoscaler *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse `pulumi:"verticalPodAutoscaler"`
}

// Defaults sets the appropriate defaults for ManagedClusterWorkloadAutoScalerProfileResponse
func (val *ManagedClusterWorkloadAutoScalerProfileResponse) Defaults() *ManagedClusterWorkloadAutoScalerProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.VerticalPodAutoscaler = tmp.VerticalPodAutoscaler.Defaults()

	return &tmp
}

// Workload Auto-scaler profile for the managed cluster.
type ManagedClusterWorkloadAutoScalerProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileResponse)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileResponseOutput) ToManagedClusterWorkloadAutoScalerProfileResponseOutput() ManagedClusterWorkloadAutoScalerProfileResponseOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileResponseOutput) ToManagedClusterWorkloadAutoScalerProfileResponseOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileResponseOutput {
	return o
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfileResponseOutput) Keda() ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfileResponse) *ManagedClusterWorkloadAutoScalerProfileKedaResponse {
		return v.Keda
	}).(ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfileResponseOutput) VerticalPodAutoscaler() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfileResponse) *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse {
		return v.VerticalPodAutoscaler
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput)
}

type ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileResponse)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput) ToManagedClusterWorkloadAutoScalerProfileResponsePtrOutput() ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput) ToManagedClusterWorkloadAutoScalerProfileResponsePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput) Elem() ManagedClusterWorkloadAutoScalerProfileResponseOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileResponse) ManagedClusterWorkloadAutoScalerProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWorkloadAutoScalerProfileResponse
		return ret
	}).(ManagedClusterWorkloadAutoScalerProfileResponseOutput)
}

// KEDA (Kubernetes Event-driven Autoscaling) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput) Keda() ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileResponse) *ManagedClusterWorkloadAutoScalerProfileKedaResponse {
		if v == nil {
			return nil
		}
		return v.Keda
	}).(ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
func (o ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput) VerticalPodAutoscaler() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileResponse) *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse {
		if v == nil {
			return nil
		}
		return v.VerticalPodAutoscaler
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler struct {
	// Whether to enable VPA. Default value is false.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler
func (val *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) Defaults() *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerInput is an input type that accepts ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs and ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput values.
// You can construct a concrete instance of `ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerInput` via:
//
//	ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs{...}
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerInput interface {
	pulumi.Input

	ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput
	ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutputWithContext(context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs struct {
	// Whether to enable VPA. Default value is false.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs
func (val *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) Defaults() *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.Bool(false)
	}
	return &tmp
}
func (ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler)(nil)).Elem()
}

func (i ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutputWithContext(context.Background())
}

func (i ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput)
}

func (i ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(context.Background())
}

func (i ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput).ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(ctx)
}

// ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrInput is an input type that accepts ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs, ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtr and ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput values.
// You can construct a concrete instance of `ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrInput` via:
//
//	        ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs{...}
//
//	or:
//
//	        nil
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrInput interface {
	pulumi.Input

	ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput
	ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput
}

type managedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrType ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs

func ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtr(v *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerArgs) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrInput {
	return (*managedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrType)(v)
}

func (*managedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler)(nil)).Elem()
}

func (i *managedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrType) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return i.ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(context.Background())
}

func (i *managedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrType) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return o.ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(context.Background())
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler {
		return &v
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput)
}

// Whether to enable VPA. Default value is false.
func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput) Elem() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler
		return ret
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput)
}

// Whether to enable VPA. Default value is false.
func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse struct {
	// Whether to enable VPA. Default value is false.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse
func (val *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse) Defaults() *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// VPA (Vertical Pod Autoscaler) settings for the workload auto-scaler profile.
type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput {
	return o
}

// Whether to enable VPA. Default value is false.
func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse)(nil)).Elem()
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput) ToManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutputWithContext(ctx context.Context) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput {
	return o
}

func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput) Elem() ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse) ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse {
		if v != nil {
			return *v
		}
		var ret ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse
		return ret
	}).(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput)
}

// Whether to enable VPA. Default value is false.
func (o ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// The status of a member update operation.
type MemberUpdateStatusResponse struct {
	// The Azure resource id of the target Kubernetes cluster.
	ClusterResourceId string `pulumi:"clusterResourceId"`
	// The status message after processing the member update operation.
	Message string `pulumi:"message"`
	// The name of the FleetMember.
	Name string `pulumi:"name"`
	// The operation resource id of the latest attempt to perform the operation.
	OperationId string `pulumi:"operationId"`
	// The status of the MemberUpdate operation.
	Status UpdateStatusResponse `pulumi:"status"`
}

// The status of a member update operation.
type MemberUpdateStatusResponseOutput struct{ *pulumi.OutputState }

func (MemberUpdateStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MemberUpdateStatusResponse)(nil)).Elem()
}

func (o MemberUpdateStatusResponseOutput) ToMemberUpdateStatusResponseOutput() MemberUpdateStatusResponseOutput {
	return o
}

func (o MemberUpdateStatusResponseOutput) ToMemberUpdateStatusResponseOutputWithContext(ctx context.Context) MemberUpdateStatusResponseOutput {
	return o
}

// The Azure resource id of the target Kubernetes cluster.
func (o MemberUpdateStatusResponseOutput) ClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v MemberUpdateStatusResponse) string { return v.ClusterResourceId }).(pulumi.StringOutput)
}

// The status message after processing the member update operation.
func (o MemberUpdateStatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MemberUpdateStatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The name of the FleetMember.
func (o MemberUpdateStatusResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MemberUpdateStatusResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operation resource id of the latest attempt to perform the operation.
func (o MemberUpdateStatusResponseOutput) OperationId() pulumi.StringOutput {
	return o.ApplyT(func(v MemberUpdateStatusResponse) string { return v.OperationId }).(pulumi.StringOutput)
}

// The status of the MemberUpdate operation.
func (o MemberUpdateStatusResponseOutput) Status() UpdateStatusResponseOutput {
	return o.ApplyT(func(v MemberUpdateStatusResponse) UpdateStatusResponse { return v.Status }).(UpdateStatusResponseOutput)
}

type MemberUpdateStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (MemberUpdateStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MemberUpdateStatusResponse)(nil)).Elem()
}

func (o MemberUpdateStatusResponseArrayOutput) ToMemberUpdateStatusResponseArrayOutput() MemberUpdateStatusResponseArrayOutput {
	return o
}

func (o MemberUpdateStatusResponseArrayOutput) ToMemberUpdateStatusResponseArrayOutputWithContext(ctx context.Context) MemberUpdateStatusResponseArrayOutput {
	return o
}

func (o MemberUpdateStatusResponseArrayOutput) Index(i pulumi.IntInput) MemberUpdateStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MemberUpdateStatusResponse {
		return vs[0].([]MemberUpdateStatusResponse)[vs[1].(int)]
	}).(MemberUpdateStatusResponseOutput)
}

// Properties of a namespace managed by ARM
type NamespaceProperties struct {
	// Action if Kubernetes namespace with same name already exists.
	AdoptionPolicy *string `pulumi:"adoptionPolicy"`
	// The annotations of managed namespace.
	Annotations map[string]string `pulumi:"annotations"`
	// The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced.
	DefaultNetworkPolicy *NetworkPolicies `pulumi:"defaultNetworkPolicy"`
	// The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced.
	DefaultResourceQuota *ResourceQuota `pulumi:"defaultResourceQuota"`
	// Delete options of a namespace.
	DeletePolicy *string `pulumi:"deletePolicy"`
	// The labels of managed namespace.
	Labels map[string]string `pulumi:"labels"`
}

// Defaults sets the appropriate defaults for NamespaceProperties
func (val *NamespaceProperties) Defaults() *NamespaceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DefaultNetworkPolicy = tmp.DefaultNetworkPolicy.Defaults()

	return &tmp
}

// NamespacePropertiesInput is an input type that accepts NamespacePropertiesArgs and NamespacePropertiesOutput values.
// You can construct a concrete instance of `NamespacePropertiesInput` via:
//
//	NamespacePropertiesArgs{...}
type NamespacePropertiesInput interface {
	pulumi.Input

	ToNamespacePropertiesOutput() NamespacePropertiesOutput
	ToNamespacePropertiesOutputWithContext(context.Context) NamespacePropertiesOutput
}

// Properties of a namespace managed by ARM
type NamespacePropertiesArgs struct {
	// Action if Kubernetes namespace with same name already exists.
	AdoptionPolicy pulumi.StringPtrInput `pulumi:"adoptionPolicy"`
	// The annotations of managed namespace.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced.
	DefaultNetworkPolicy NetworkPoliciesPtrInput `pulumi:"defaultNetworkPolicy"`
	// The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced.
	DefaultResourceQuota ResourceQuotaPtrInput `pulumi:"defaultResourceQuota"`
	// Delete options of a namespace.
	DeletePolicy pulumi.StringPtrInput `pulumi:"deletePolicy"`
	// The labels of managed namespace.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

// Defaults sets the appropriate defaults for NamespacePropertiesArgs
func (val *NamespacePropertiesArgs) Defaults() *NamespacePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (NamespacePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceProperties)(nil)).Elem()
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesOutput() NamespacePropertiesOutput {
	return i.ToNamespacePropertiesOutputWithContext(context.Background())
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesOutputWithContext(ctx context.Context) NamespacePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesOutput)
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return i.ToNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i NamespacePropertiesArgs) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesOutput).ToNamespacePropertiesPtrOutputWithContext(ctx)
}

// NamespacePropertiesPtrInput is an input type that accepts NamespacePropertiesArgs, NamespacePropertiesPtr and NamespacePropertiesPtrOutput values.
// You can construct a concrete instance of `NamespacePropertiesPtrInput` via:
//
//	        NamespacePropertiesArgs{...}
//
//	or:
//
//	        nil
type NamespacePropertiesPtrInput interface {
	pulumi.Input

	ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput
	ToNamespacePropertiesPtrOutputWithContext(context.Context) NamespacePropertiesPtrOutput
}

type namespacePropertiesPtrType NamespacePropertiesArgs

func NamespacePropertiesPtr(v *NamespacePropertiesArgs) NamespacePropertiesPtrInput {
	return (*namespacePropertiesPtrType)(v)
}

func (*namespacePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceProperties)(nil)).Elem()
}

func (i *namespacePropertiesPtrType) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return i.ToNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (i *namespacePropertiesPtrType) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacePropertiesPtrOutput)
}

// Properties of a namespace managed by ARM
type NamespacePropertiesOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceProperties)(nil)).Elem()
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesOutput() NamespacePropertiesOutput {
	return o
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesOutputWithContext(ctx context.Context) NamespacePropertiesOutput {
	return o
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return o.ToNamespacePropertiesPtrOutputWithContext(context.Background())
}

func (o NamespacePropertiesOutput) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceProperties) *NamespaceProperties {
		return &v
	}).(NamespacePropertiesPtrOutput)
}

// Action if Kubernetes namespace with same name already exists.
func (o NamespacePropertiesOutput) AdoptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *string { return v.AdoptionPolicy }).(pulumi.StringPtrOutput)
}

// The annotations of managed namespace.
func (o NamespacePropertiesOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespaceProperties) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced.
func (o NamespacePropertiesOutput) DefaultNetworkPolicy() NetworkPoliciesPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *NetworkPolicies { return v.DefaultNetworkPolicy }).(NetworkPoliciesPtrOutput)
}

// The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced.
func (o NamespacePropertiesOutput) DefaultResourceQuota() ResourceQuotaPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *ResourceQuota { return v.DefaultResourceQuota }).(ResourceQuotaPtrOutput)
}

// Delete options of a namespace.
func (o NamespacePropertiesOutput) DeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceProperties) *string { return v.DeletePolicy }).(pulumi.StringPtrOutput)
}

// The labels of managed namespace.
func (o NamespacePropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespaceProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type NamespacePropertiesPtrOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceProperties)(nil)).Elem()
}

func (o NamespacePropertiesPtrOutput) ToNamespacePropertiesPtrOutput() NamespacePropertiesPtrOutput {
	return o
}

func (o NamespacePropertiesPtrOutput) ToNamespacePropertiesPtrOutputWithContext(ctx context.Context) NamespacePropertiesPtrOutput {
	return o
}

func (o NamespacePropertiesPtrOutput) Elem() NamespacePropertiesOutput {
	return o.ApplyT(func(v *NamespaceProperties) NamespaceProperties {
		if v != nil {
			return *v
		}
		var ret NamespaceProperties
		return ret
	}).(NamespacePropertiesOutput)
}

// Action if Kubernetes namespace with same name already exists.
func (o NamespacePropertiesPtrOutput) AdoptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *string {
		if v == nil {
			return nil
		}
		return v.AdoptionPolicy
	}).(pulumi.StringPtrOutput)
}

// The annotations of managed namespace.
func (o NamespacePropertiesPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NamespaceProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced.
func (o NamespacePropertiesPtrOutput) DefaultNetworkPolicy() NetworkPoliciesPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *NetworkPolicies {
		if v == nil {
			return nil
		}
		return v.DefaultNetworkPolicy
	}).(NetworkPoliciesPtrOutput)
}

// The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced.
func (o NamespacePropertiesPtrOutput) DefaultResourceQuota() ResourceQuotaPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *ResourceQuota {
		if v == nil {
			return nil
		}
		return v.DefaultResourceQuota
	}).(ResourceQuotaPtrOutput)
}

// Delete options of a namespace.
func (o NamespacePropertiesPtrOutput) DeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DeletePolicy
	}).(pulumi.StringPtrOutput)
}

// The labels of managed namespace.
func (o NamespacePropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NamespaceProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Properties of a namespace managed by ARM
type NamespacePropertiesResponse struct {
	// Action if Kubernetes namespace with same name already exists.
	AdoptionPolicy *string `pulumi:"adoptionPolicy"`
	// The annotations of managed namespace.
	Annotations map[string]string `pulumi:"annotations"`
	// The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced.
	DefaultNetworkPolicy *NetworkPoliciesResponse `pulumi:"defaultNetworkPolicy"`
	// The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced.
	DefaultResourceQuota *ResourceQuotaResponse `pulumi:"defaultResourceQuota"`
	// Delete options of a namespace.
	DeletePolicy *string `pulumi:"deletePolicy"`
	// The labels of managed namespace.
	Labels map[string]string `pulumi:"labels"`
	// The current provisioning state of the namespace.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for NamespacePropertiesResponse
func (val *NamespacePropertiesResponse) Defaults() *NamespacePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DefaultNetworkPolicy = tmp.DefaultNetworkPolicy.Defaults()

	return &tmp
}

// Properties of a namespace managed by ARM
type NamespacePropertiesResponseOutput struct{ *pulumi.OutputState }

func (NamespacePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacePropertiesResponse)(nil)).Elem()
}

func (o NamespacePropertiesResponseOutput) ToNamespacePropertiesResponseOutput() NamespacePropertiesResponseOutput {
	return o
}

func (o NamespacePropertiesResponseOutput) ToNamespacePropertiesResponseOutputWithContext(ctx context.Context) NamespacePropertiesResponseOutput {
	return o
}

// Action if Kubernetes namespace with same name already exists.
func (o NamespacePropertiesResponseOutput) AdoptionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *string { return v.AdoptionPolicy }).(pulumi.StringPtrOutput)
}

// The annotations of managed namespace.
func (o NamespacePropertiesResponseOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The default network policy enforced upon the namespace. Customers can have other Kubernetes network policy objects under the namespace. All the network policies will be enforced.
func (o NamespacePropertiesResponseOutput) DefaultNetworkPolicy() NetworkPoliciesResponsePtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *NetworkPoliciesResponse { return v.DefaultNetworkPolicy }).(NetworkPoliciesResponsePtrOutput)
}

// The default resource quota enforced upon the namespace. Customers can have other Kubernetes resource quota objects under the namespace. All the resource quotas will be enforced.
func (o NamespacePropertiesResponseOutput) DefaultResourceQuota() ResourceQuotaResponsePtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *ResourceQuotaResponse { return v.DefaultResourceQuota }).(ResourceQuotaResponsePtrOutput)
}

// Delete options of a namespace.
func (o NamespacePropertiesResponseOutput) DeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) *string { return v.DeletePolicy }).(pulumi.StringPtrOutput)
}

// The labels of managed namespace.
func (o NamespacePropertiesResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The current provisioning state of the namespace.
func (o NamespacePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Default network policy of the namespace, specifying ingress and egress rules.
type NetworkPolicies struct {
	// Egress policy for the network.
	Egress *string `pulumi:"egress"`
	// Ingress policy for the network.
	Ingress *string `pulumi:"ingress"`
}

// Defaults sets the appropriate defaults for NetworkPolicies
func (val *NetworkPolicies) Defaults() *NetworkPolicies {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Egress == nil {
		egress_ := "AllowAll"
		tmp.Egress = &egress_
	}
	if tmp.Ingress == nil {
		ingress_ := "AllowSameNamespace"
		tmp.Ingress = &ingress_
	}
	return &tmp
}

// NetworkPoliciesInput is an input type that accepts NetworkPoliciesArgs and NetworkPoliciesOutput values.
// You can construct a concrete instance of `NetworkPoliciesInput` via:
//
//	NetworkPoliciesArgs{...}
type NetworkPoliciesInput interface {
	pulumi.Input

	ToNetworkPoliciesOutput() NetworkPoliciesOutput
	ToNetworkPoliciesOutputWithContext(context.Context) NetworkPoliciesOutput
}

// Default network policy of the namespace, specifying ingress and egress rules.
type NetworkPoliciesArgs struct {
	// Egress policy for the network.
	Egress pulumi.StringPtrInput `pulumi:"egress"`
	// Ingress policy for the network.
	Ingress pulumi.StringPtrInput `pulumi:"ingress"`
}

// Defaults sets the appropriate defaults for NetworkPoliciesArgs
func (val *NetworkPoliciesArgs) Defaults() *NetworkPoliciesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Egress == nil {
		tmp.Egress = pulumi.StringPtr("AllowAll")
	}
	if tmp.Ingress == nil {
		tmp.Ingress = pulumi.StringPtr("AllowSameNamespace")
	}
	return &tmp
}
func (NetworkPoliciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicies)(nil)).Elem()
}

func (i NetworkPoliciesArgs) ToNetworkPoliciesOutput() NetworkPoliciesOutput {
	return i.ToNetworkPoliciesOutputWithContext(context.Background())
}

func (i NetworkPoliciesArgs) ToNetworkPoliciesOutputWithContext(ctx context.Context) NetworkPoliciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPoliciesOutput)
}

func (i NetworkPoliciesArgs) ToNetworkPoliciesPtrOutput() NetworkPoliciesPtrOutput {
	return i.ToNetworkPoliciesPtrOutputWithContext(context.Background())
}

func (i NetworkPoliciesArgs) ToNetworkPoliciesPtrOutputWithContext(ctx context.Context) NetworkPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPoliciesOutput).ToNetworkPoliciesPtrOutputWithContext(ctx)
}

// NetworkPoliciesPtrInput is an input type that accepts NetworkPoliciesArgs, NetworkPoliciesPtr and NetworkPoliciesPtrOutput values.
// You can construct a concrete instance of `NetworkPoliciesPtrInput` via:
//
//	        NetworkPoliciesArgs{...}
//
//	or:
//
//	        nil
type NetworkPoliciesPtrInput interface {
	pulumi.Input

	ToNetworkPoliciesPtrOutput() NetworkPoliciesPtrOutput
	ToNetworkPoliciesPtrOutputWithContext(context.Context) NetworkPoliciesPtrOutput
}

type networkPoliciesPtrType NetworkPoliciesArgs

func NetworkPoliciesPtr(v *NetworkPoliciesArgs) NetworkPoliciesPtrInput {
	return (*networkPoliciesPtrType)(v)
}

func (*networkPoliciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicies)(nil)).Elem()
}

func (i *networkPoliciesPtrType) ToNetworkPoliciesPtrOutput() NetworkPoliciesPtrOutput {
	return i.ToNetworkPoliciesPtrOutputWithContext(context.Background())
}

func (i *networkPoliciesPtrType) ToNetworkPoliciesPtrOutputWithContext(ctx context.Context) NetworkPoliciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPoliciesPtrOutput)
}

// Default network policy of the namespace, specifying ingress and egress rules.
type NetworkPoliciesOutput struct{ *pulumi.OutputState }

func (NetworkPoliciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPolicies)(nil)).Elem()
}

func (o NetworkPoliciesOutput) ToNetworkPoliciesOutput() NetworkPoliciesOutput {
	return o
}

func (o NetworkPoliciesOutput) ToNetworkPoliciesOutputWithContext(ctx context.Context) NetworkPoliciesOutput {
	return o
}

func (o NetworkPoliciesOutput) ToNetworkPoliciesPtrOutput() NetworkPoliciesPtrOutput {
	return o.ToNetworkPoliciesPtrOutputWithContext(context.Background())
}

func (o NetworkPoliciesOutput) ToNetworkPoliciesPtrOutputWithContext(ctx context.Context) NetworkPoliciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkPolicies) *NetworkPolicies {
		return &v
	}).(NetworkPoliciesPtrOutput)
}

// Egress policy for the network.
func (o NetworkPoliciesOutput) Egress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicies) *string { return v.Egress }).(pulumi.StringPtrOutput)
}

// Ingress policy for the network.
func (o NetworkPoliciesOutput) Ingress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPolicies) *string { return v.Ingress }).(pulumi.StringPtrOutput)
}

type NetworkPoliciesPtrOutput struct{ *pulumi.OutputState }

func (NetworkPoliciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicies)(nil)).Elem()
}

func (o NetworkPoliciesPtrOutput) ToNetworkPoliciesPtrOutput() NetworkPoliciesPtrOutput {
	return o
}

func (o NetworkPoliciesPtrOutput) ToNetworkPoliciesPtrOutputWithContext(ctx context.Context) NetworkPoliciesPtrOutput {
	return o
}

func (o NetworkPoliciesPtrOutput) Elem() NetworkPoliciesOutput {
	return o.ApplyT(func(v *NetworkPolicies) NetworkPolicies {
		if v != nil {
			return *v
		}
		var ret NetworkPolicies
		return ret
	}).(NetworkPoliciesOutput)
}

// Egress policy for the network.
func (o NetworkPoliciesPtrOutput) Egress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicies) *string {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(pulumi.StringPtrOutput)
}

// Ingress policy for the network.
func (o NetworkPoliciesPtrOutput) Ingress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicies) *string {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(pulumi.StringPtrOutput)
}

// Default network policy of the namespace, specifying ingress and egress rules.
type NetworkPoliciesResponse struct {
	// Egress policy for the network.
	Egress *string `pulumi:"egress"`
	// Ingress policy for the network.
	Ingress *string `pulumi:"ingress"`
}

// Defaults sets the appropriate defaults for NetworkPoliciesResponse
func (val *NetworkPoliciesResponse) Defaults() *NetworkPoliciesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Egress == nil {
		egress_ := "AllowAll"
		tmp.Egress = &egress_
	}
	if tmp.Ingress == nil {
		ingress_ := "AllowSameNamespace"
		tmp.Ingress = &ingress_
	}
	return &tmp
}

// Default network policy of the namespace, specifying ingress and egress rules.
type NetworkPoliciesResponseOutput struct{ *pulumi.OutputState }

func (NetworkPoliciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPoliciesResponse)(nil)).Elem()
}

func (o NetworkPoliciesResponseOutput) ToNetworkPoliciesResponseOutput() NetworkPoliciesResponseOutput {
	return o
}

func (o NetworkPoliciesResponseOutput) ToNetworkPoliciesResponseOutputWithContext(ctx context.Context) NetworkPoliciesResponseOutput {
	return o
}

// Egress policy for the network.
func (o NetworkPoliciesResponseOutput) Egress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPoliciesResponse) *string { return v.Egress }).(pulumi.StringPtrOutput)
}

// Ingress policy for the network.
func (o NetworkPoliciesResponseOutput) Ingress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPoliciesResponse) *string { return v.Ingress }).(pulumi.StringPtrOutput)
}

type NetworkPoliciesResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkPoliciesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPoliciesResponse)(nil)).Elem()
}

func (o NetworkPoliciesResponsePtrOutput) ToNetworkPoliciesResponsePtrOutput() NetworkPoliciesResponsePtrOutput {
	return o
}

func (o NetworkPoliciesResponsePtrOutput) ToNetworkPoliciesResponsePtrOutputWithContext(ctx context.Context) NetworkPoliciesResponsePtrOutput {
	return o
}

func (o NetworkPoliciesResponsePtrOutput) Elem() NetworkPoliciesResponseOutput {
	return o.ApplyT(func(v *NetworkPoliciesResponse) NetworkPoliciesResponse {
		if v != nil {
			return *v
		}
		var ret NetworkPoliciesResponse
		return ret
	}).(NetworkPoliciesResponseOutput)
}

// Egress policy for the network.
func (o NetworkPoliciesResponsePtrOutput) Egress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(pulumi.StringPtrOutput)
}

// Ingress policy for the network.
func (o NetworkPoliciesResponsePtrOutput) Ingress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPoliciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(pulumi.StringPtrOutput)
}

// network profile for managed cluster snapshot, these properties are read only.
type NetworkProfileForSnapshotResponse struct {
	// loadBalancerSku for managed cluster snapshot.
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// networkMode for managed cluster snapshot.
	NetworkMode *string `pulumi:"networkMode"`
	// networkPlugin for managed cluster snapshot.
	NetworkPlugin *string `pulumi:"networkPlugin"`
	// NetworkPluginMode for managed cluster snapshot.
	NetworkPluginMode *string `pulumi:"networkPluginMode"`
	// networkPolicy for managed cluster snapshot.
	NetworkPolicy *string `pulumi:"networkPolicy"`
}

// network profile for managed cluster snapshot, these properties are read only.
type NetworkProfileForSnapshotResponseOutput struct{ *pulumi.OutputState }

func (NetworkProfileForSnapshotResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileForSnapshotResponse)(nil)).Elem()
}

func (o NetworkProfileForSnapshotResponseOutput) ToNetworkProfileForSnapshotResponseOutput() NetworkProfileForSnapshotResponseOutput {
	return o
}

func (o NetworkProfileForSnapshotResponseOutput) ToNetworkProfileForSnapshotResponseOutputWithContext(ctx context.Context) NetworkProfileForSnapshotResponseOutput {
	return o
}

// loadBalancerSku for managed cluster snapshot.
func (o NetworkProfileForSnapshotResponseOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileForSnapshotResponse) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// networkMode for managed cluster snapshot.
func (o NetworkProfileForSnapshotResponseOutput) NetworkMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileForSnapshotResponse) *string { return v.NetworkMode }).(pulumi.StringPtrOutput)
}

// networkPlugin for managed cluster snapshot.
func (o NetworkProfileForSnapshotResponseOutput) NetworkPlugin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileForSnapshotResponse) *string { return v.NetworkPlugin }).(pulumi.StringPtrOutput)
}

// NetworkPluginMode for managed cluster snapshot.
func (o NetworkProfileForSnapshotResponseOutput) NetworkPluginMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileForSnapshotResponse) *string { return v.NetworkPluginMode }).(pulumi.StringPtrOutput)
}

// networkPolicy for managed cluster snapshot.
func (o NetworkProfileForSnapshotResponseOutput) NetworkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileForSnapshotResponse) *string { return v.NetworkPolicy }).(pulumi.StringPtrOutput)
}

// The node image upgrade to be applied to the target nodes in update run.
type NodeImageSelection struct {
	// The node image upgrade type.
	Type string `pulumi:"type"`
}

// NodeImageSelectionInput is an input type that accepts NodeImageSelectionArgs and NodeImageSelectionOutput values.
// You can construct a concrete instance of `NodeImageSelectionInput` via:
//
//	NodeImageSelectionArgs{...}
type NodeImageSelectionInput interface {
	pulumi.Input

	ToNodeImageSelectionOutput() NodeImageSelectionOutput
	ToNodeImageSelectionOutputWithContext(context.Context) NodeImageSelectionOutput
}

// The node image upgrade to be applied to the target nodes in update run.
type NodeImageSelectionArgs struct {
	// The node image upgrade type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodeImageSelectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelection)(nil)).Elem()
}

func (i NodeImageSelectionArgs) ToNodeImageSelectionOutput() NodeImageSelectionOutput {
	return i.ToNodeImageSelectionOutputWithContext(context.Background())
}

func (i NodeImageSelectionArgs) ToNodeImageSelectionOutputWithContext(ctx context.Context) NodeImageSelectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeImageSelectionOutput)
}

func (i NodeImageSelectionArgs) ToNodeImageSelectionPtrOutput() NodeImageSelectionPtrOutput {
	return i.ToNodeImageSelectionPtrOutputWithContext(context.Background())
}

func (i NodeImageSelectionArgs) ToNodeImageSelectionPtrOutputWithContext(ctx context.Context) NodeImageSelectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeImageSelectionOutput).ToNodeImageSelectionPtrOutputWithContext(ctx)
}

// NodeImageSelectionPtrInput is an input type that accepts NodeImageSelectionArgs, NodeImageSelectionPtr and NodeImageSelectionPtrOutput values.
// You can construct a concrete instance of `NodeImageSelectionPtrInput` via:
//
//	        NodeImageSelectionArgs{...}
//
//	or:
//
//	        nil
type NodeImageSelectionPtrInput interface {
	pulumi.Input

	ToNodeImageSelectionPtrOutput() NodeImageSelectionPtrOutput
	ToNodeImageSelectionPtrOutputWithContext(context.Context) NodeImageSelectionPtrOutput
}

type nodeImageSelectionPtrType NodeImageSelectionArgs

func NodeImageSelectionPtr(v *NodeImageSelectionArgs) NodeImageSelectionPtrInput {
	return (*nodeImageSelectionPtrType)(v)
}

func (*nodeImageSelectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeImageSelection)(nil)).Elem()
}

func (i *nodeImageSelectionPtrType) ToNodeImageSelectionPtrOutput() NodeImageSelectionPtrOutput {
	return i.ToNodeImageSelectionPtrOutputWithContext(context.Background())
}

func (i *nodeImageSelectionPtrType) ToNodeImageSelectionPtrOutputWithContext(ctx context.Context) NodeImageSelectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeImageSelectionPtrOutput)
}

// The node image upgrade to be applied to the target nodes in update run.
type NodeImageSelectionOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelection)(nil)).Elem()
}

func (o NodeImageSelectionOutput) ToNodeImageSelectionOutput() NodeImageSelectionOutput {
	return o
}

func (o NodeImageSelectionOutput) ToNodeImageSelectionOutputWithContext(ctx context.Context) NodeImageSelectionOutput {
	return o
}

func (o NodeImageSelectionOutput) ToNodeImageSelectionPtrOutput() NodeImageSelectionPtrOutput {
	return o.ToNodeImageSelectionPtrOutputWithContext(context.Background())
}

func (o NodeImageSelectionOutput) ToNodeImageSelectionPtrOutputWithContext(ctx context.Context) NodeImageSelectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeImageSelection) *NodeImageSelection {
		return &v
	}).(NodeImageSelectionPtrOutput)
}

// The node image upgrade type.
func (o NodeImageSelectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeImageSelection) string { return v.Type }).(pulumi.StringOutput)
}

type NodeImageSelectionPtrOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeImageSelection)(nil)).Elem()
}

func (o NodeImageSelectionPtrOutput) ToNodeImageSelectionPtrOutput() NodeImageSelectionPtrOutput {
	return o
}

func (o NodeImageSelectionPtrOutput) ToNodeImageSelectionPtrOutputWithContext(ctx context.Context) NodeImageSelectionPtrOutput {
	return o
}

func (o NodeImageSelectionPtrOutput) Elem() NodeImageSelectionOutput {
	return o.ApplyT(func(v *NodeImageSelection) NodeImageSelection {
		if v != nil {
			return *v
		}
		var ret NodeImageSelection
		return ret
	}).(NodeImageSelectionOutput)
}

// The node image upgrade type.
func (o NodeImageSelectionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeImageSelection) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The node image upgrade to be applied to the target nodes in update run.
type NodeImageSelectionResponse struct {
	// Custom node image versions to upgrade the nodes to. This field is required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a matching image version in this field, they are not upgraded.
	CustomNodeImageVersions []NodeImageVersionResponse `pulumi:"customNodeImageVersions"`
	// The node image upgrade type.
	Type string `pulumi:"type"`
}

// The node image upgrade to be applied to the target nodes in update run.
type NodeImageSelectionResponseOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelectionResponse)(nil)).Elem()
}

func (o NodeImageSelectionResponseOutput) ToNodeImageSelectionResponseOutput() NodeImageSelectionResponseOutput {
	return o
}

func (o NodeImageSelectionResponseOutput) ToNodeImageSelectionResponseOutputWithContext(ctx context.Context) NodeImageSelectionResponseOutput {
	return o
}

// Custom node image versions to upgrade the nodes to. This field is required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a matching image version in this field, they are not upgraded.
func (o NodeImageSelectionResponseOutput) CustomNodeImageVersions() NodeImageVersionResponseArrayOutput {
	return o.ApplyT(func(v NodeImageSelectionResponse) []NodeImageVersionResponse { return v.CustomNodeImageVersions }).(NodeImageVersionResponseArrayOutput)
}

// The node image upgrade type.
func (o NodeImageSelectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeImageSelectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type NodeImageSelectionResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeImageSelectionResponse)(nil)).Elem()
}

func (o NodeImageSelectionResponsePtrOutput) ToNodeImageSelectionResponsePtrOutput() NodeImageSelectionResponsePtrOutput {
	return o
}

func (o NodeImageSelectionResponsePtrOutput) ToNodeImageSelectionResponsePtrOutputWithContext(ctx context.Context) NodeImageSelectionResponsePtrOutput {
	return o
}

func (o NodeImageSelectionResponsePtrOutput) Elem() NodeImageSelectionResponseOutput {
	return o.ApplyT(func(v *NodeImageSelectionResponse) NodeImageSelectionResponse {
		if v != nil {
			return *v
		}
		var ret NodeImageSelectionResponse
		return ret
	}).(NodeImageSelectionResponseOutput)
}

// Custom node image versions to upgrade the nodes to. This field is required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a matching image version in this field, they are not upgraded.
func (o NodeImageSelectionResponsePtrOutput) CustomNodeImageVersions() NodeImageVersionResponseArrayOutput {
	return o.ApplyT(func(v *NodeImageSelectionResponse) []NodeImageVersionResponse {
		if v == nil {
			return nil
		}
		return v.CustomNodeImageVersions
	}).(NodeImageVersionResponseArrayOutput)
}

// The node image upgrade type.
func (o NodeImageSelectionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeImageSelectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The node image upgrade specs for the update run.
type NodeImageSelectionStatusResponse struct {
	// The image versions to upgrade the nodes to.
	SelectedNodeImageVersions []NodeImageVersionResponse `pulumi:"selectedNodeImageVersions"`
}

// The node image upgrade specs for the update run.
type NodeImageSelectionStatusResponseOutput struct{ *pulumi.OutputState }

func (NodeImageSelectionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageSelectionStatusResponse)(nil)).Elem()
}

func (o NodeImageSelectionStatusResponseOutput) ToNodeImageSelectionStatusResponseOutput() NodeImageSelectionStatusResponseOutput {
	return o
}

func (o NodeImageSelectionStatusResponseOutput) ToNodeImageSelectionStatusResponseOutputWithContext(ctx context.Context) NodeImageSelectionStatusResponseOutput {
	return o
}

// The image versions to upgrade the nodes to.
func (o NodeImageSelectionStatusResponseOutput) SelectedNodeImageVersions() NodeImageVersionResponseArrayOutput {
	return o.ApplyT(func(v NodeImageSelectionStatusResponse) []NodeImageVersionResponse {
		return v.SelectedNodeImageVersions
	}).(NodeImageVersionResponseArrayOutput)
}

// The node upgrade image version.
type NodeImageVersionResponse struct {
	// The image version to upgrade the nodes to (e.g., 'AKSUbuntu-1804gen2containerd-2022.12.13').
	Version string `pulumi:"version"`
}

// The node upgrade image version.
type NodeImageVersionResponseOutput struct{ *pulumi.OutputState }

func (NodeImageVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeImageVersionResponse)(nil)).Elem()
}

func (o NodeImageVersionResponseOutput) ToNodeImageVersionResponseOutput() NodeImageVersionResponseOutput {
	return o
}

func (o NodeImageVersionResponseOutput) ToNodeImageVersionResponseOutputWithContext(ctx context.Context) NodeImageVersionResponseOutput {
	return o
}

// The image version to upgrade the nodes to (e.g., 'AKSUbuntu-1804gen2containerd-2022.12.13').
func (o NodeImageVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v NodeImageVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

type NodeImageVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeImageVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeImageVersionResponse)(nil)).Elem()
}

func (o NodeImageVersionResponseArrayOutput) ToNodeImageVersionResponseArrayOutput() NodeImageVersionResponseArrayOutput {
	return o
}

func (o NodeImageVersionResponseArrayOutput) ToNodeImageVersionResponseArrayOutputWithContext(ctx context.Context) NodeImageVersionResponseArrayOutput {
	return o
}

func (o NodeImageVersionResponseArrayOutput) Index(i pulumi.IntInput) NodeImageVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeImageVersionResponse {
		return vs[0].([]NodeImageVersionResponse)[vs[1].(int)]
	}).(NodeImageVersionResponseOutput)
}

// The port range.
type PortRange struct {
	// The maximum port that is included in the range. It should be ranged from 1 to 65535, and be greater than or equal to portStart.
	PortEnd *int `pulumi:"portEnd"`
	// The minimum port that is included in the range. It should be ranged from 1 to 65535, and be less than or equal to portEnd.
	PortStart *int `pulumi:"portStart"`
	// The network protocol of the port.
	Protocol *string `pulumi:"protocol"`
}

// PortRangeInput is an input type that accepts PortRangeArgs and PortRangeOutput values.
// You can construct a concrete instance of `PortRangeInput` via:
//
//	PortRangeArgs{...}
type PortRangeInput interface {
	pulumi.Input

	ToPortRangeOutput() PortRangeOutput
	ToPortRangeOutputWithContext(context.Context) PortRangeOutput
}

// The port range.
type PortRangeArgs struct {
	// The maximum port that is included in the range. It should be ranged from 1 to 65535, and be greater than or equal to portStart.
	PortEnd pulumi.IntPtrInput `pulumi:"portEnd"`
	// The minimum port that is included in the range. It should be ranged from 1 to 65535, and be less than or equal to portEnd.
	PortStart pulumi.IntPtrInput `pulumi:"portStart"`
	// The network protocol of the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PortRange)(nil)).Elem()
}

func (i PortRangeArgs) ToPortRangeOutput() PortRangeOutput {
	return i.ToPortRangeOutputWithContext(context.Background())
}

func (i PortRangeArgs) ToPortRangeOutputWithContext(ctx context.Context) PortRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortRangeOutput)
}

// PortRangeArrayInput is an input type that accepts PortRangeArray and PortRangeArrayOutput values.
// You can construct a concrete instance of `PortRangeArrayInput` via:
//
//	PortRangeArray{ PortRangeArgs{...} }
type PortRangeArrayInput interface {
	pulumi.Input

	ToPortRangeArrayOutput() PortRangeArrayOutput
	ToPortRangeArrayOutputWithContext(context.Context) PortRangeArrayOutput
}

type PortRangeArray []PortRangeInput

func (PortRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortRange)(nil)).Elem()
}

func (i PortRangeArray) ToPortRangeArrayOutput() PortRangeArrayOutput {
	return i.ToPortRangeArrayOutputWithContext(context.Background())
}

func (i PortRangeArray) ToPortRangeArrayOutputWithContext(ctx context.Context) PortRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortRangeArrayOutput)
}

// The port range.
type PortRangeOutput struct{ *pulumi.OutputState }

func (PortRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortRange)(nil)).Elem()
}

func (o PortRangeOutput) ToPortRangeOutput() PortRangeOutput {
	return o
}

func (o PortRangeOutput) ToPortRangeOutputWithContext(ctx context.Context) PortRangeOutput {
	return o
}

// The maximum port that is included in the range. It should be ranged from 1 to 65535, and be greater than or equal to portStart.
func (o PortRangeOutput) PortEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortRange) *int { return v.PortEnd }).(pulumi.IntPtrOutput)
}

// The minimum port that is included in the range. It should be ranged from 1 to 65535, and be less than or equal to portEnd.
func (o PortRangeOutput) PortStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortRange) *int { return v.PortStart }).(pulumi.IntPtrOutput)
}

// The network protocol of the port.
func (o PortRangeOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortRange) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortRangeArrayOutput struct{ *pulumi.OutputState }

func (PortRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortRange)(nil)).Elem()
}

func (o PortRangeArrayOutput) ToPortRangeArrayOutput() PortRangeArrayOutput {
	return o
}

func (o PortRangeArrayOutput) ToPortRangeArrayOutputWithContext(ctx context.Context) PortRangeArrayOutput {
	return o
}

func (o PortRangeArrayOutput) Index(i pulumi.IntInput) PortRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortRange {
		return vs[0].([]PortRange)[vs[1].(int)]
	}).(PortRangeOutput)
}

// The port range.
type PortRangeResponse struct {
	// The maximum port that is included in the range. It should be ranged from 1 to 65535, and be greater than or equal to portStart.
	PortEnd *int `pulumi:"portEnd"`
	// The minimum port that is included in the range. It should be ranged from 1 to 65535, and be less than or equal to portEnd.
	PortStart *int `pulumi:"portStart"`
	// The network protocol of the port.
	Protocol *string `pulumi:"protocol"`
}

// The port range.
type PortRangeResponseOutput struct{ *pulumi.OutputState }

func (PortRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortRangeResponse)(nil)).Elem()
}

func (o PortRangeResponseOutput) ToPortRangeResponseOutput() PortRangeResponseOutput {
	return o
}

func (o PortRangeResponseOutput) ToPortRangeResponseOutputWithContext(ctx context.Context) PortRangeResponseOutput {
	return o
}

// The maximum port that is included in the range. It should be ranged from 1 to 65535, and be greater than or equal to portStart.
func (o PortRangeResponseOutput) PortEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortRangeResponse) *int { return v.PortEnd }).(pulumi.IntPtrOutput)
}

// The minimum port that is included in the range. It should be ranged from 1 to 65535, and be less than or equal to portEnd.
func (o PortRangeResponseOutput) PortStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PortRangeResponse) *int { return v.PortStart }).(pulumi.IntPtrOutput)
}

// The network protocol of the port.
func (o PortRangeResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortRangeResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (PortRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortRangeResponse)(nil)).Elem()
}

func (o PortRangeResponseArrayOutput) ToPortRangeResponseArrayOutput() PortRangeResponseArrayOutput {
	return o
}

func (o PortRangeResponseArrayOutput) ToPortRangeResponseArrayOutputWithContext(ctx context.Context) PortRangeResponseArrayOutput {
	return o
}

func (o PortRangeResponseArrayOutput) Index(i pulumi.IntInput) PortRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortRangeResponse {
		return vs[0].([]PortRangeResponse)[vs[1].(int)]
	}).(PortRangeResponseOutput)
}

// Describes the Power State of the cluster
type PowerState struct {
	// Tells whether the cluster is Running or Stopped
	Code *string `pulumi:"code"`
}

// PowerStateInput is an input type that accepts PowerStateArgs and PowerStateOutput values.
// You can construct a concrete instance of `PowerStateInput` via:
//
//	PowerStateArgs{...}
type PowerStateInput interface {
	pulumi.Input

	ToPowerStateOutput() PowerStateOutput
	ToPowerStateOutputWithContext(context.Context) PowerStateOutput
}

// Describes the Power State of the cluster
type PowerStateArgs struct {
	// Tells whether the cluster is Running or Stopped
	Code pulumi.StringPtrInput `pulumi:"code"`
}

func (PowerStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerState)(nil)).Elem()
}

func (i PowerStateArgs) ToPowerStateOutput() PowerStateOutput {
	return i.ToPowerStateOutputWithContext(context.Background())
}

func (i PowerStateArgs) ToPowerStateOutputWithContext(ctx context.Context) PowerStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerStateOutput)
}

func (i PowerStateArgs) ToPowerStatePtrOutput() PowerStatePtrOutput {
	return i.ToPowerStatePtrOutputWithContext(context.Background())
}

func (i PowerStateArgs) ToPowerStatePtrOutputWithContext(ctx context.Context) PowerStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerStateOutput).ToPowerStatePtrOutputWithContext(ctx)
}

// PowerStatePtrInput is an input type that accepts PowerStateArgs, PowerStatePtr and PowerStatePtrOutput values.
// You can construct a concrete instance of `PowerStatePtrInput` via:
//
//	        PowerStateArgs{...}
//
//	or:
//
//	        nil
type PowerStatePtrInput interface {
	pulumi.Input

	ToPowerStatePtrOutput() PowerStatePtrOutput
	ToPowerStatePtrOutputWithContext(context.Context) PowerStatePtrOutput
}

type powerStatePtrType PowerStateArgs

func PowerStatePtr(v *PowerStateArgs) PowerStatePtrInput {
	return (*powerStatePtrType)(v)
}

func (*powerStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerState)(nil)).Elem()
}

func (i *powerStatePtrType) ToPowerStatePtrOutput() PowerStatePtrOutput {
	return i.ToPowerStatePtrOutputWithContext(context.Background())
}

func (i *powerStatePtrType) ToPowerStatePtrOutputWithContext(ctx context.Context) PowerStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerStatePtrOutput)
}

// Describes the Power State of the cluster
type PowerStateOutput struct{ *pulumi.OutputState }

func (PowerStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerState)(nil)).Elem()
}

func (o PowerStateOutput) ToPowerStateOutput() PowerStateOutput {
	return o
}

func (o PowerStateOutput) ToPowerStateOutputWithContext(ctx context.Context) PowerStateOutput {
	return o
}

func (o PowerStateOutput) ToPowerStatePtrOutput() PowerStatePtrOutput {
	return o.ToPowerStatePtrOutputWithContext(context.Background())
}

func (o PowerStateOutput) ToPowerStatePtrOutputWithContext(ctx context.Context) PowerStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PowerState) *PowerState {
		return &v
	}).(PowerStatePtrOutput)
}

// Tells whether the cluster is Running or Stopped
func (o PowerStateOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerState) *string { return v.Code }).(pulumi.StringPtrOutput)
}

type PowerStatePtrOutput struct{ *pulumi.OutputState }

func (PowerStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerState)(nil)).Elem()
}

func (o PowerStatePtrOutput) ToPowerStatePtrOutput() PowerStatePtrOutput {
	return o
}

func (o PowerStatePtrOutput) ToPowerStatePtrOutputWithContext(ctx context.Context) PowerStatePtrOutput {
	return o
}

func (o PowerStatePtrOutput) Elem() PowerStateOutput {
	return o.ApplyT(func(v *PowerState) PowerState {
		if v != nil {
			return *v
		}
		var ret PowerState
		return ret
	}).(PowerStateOutput)
}

// Tells whether the cluster is Running or Stopped
func (o PowerStatePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerState) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// Describes the Power State of the cluster
type PowerStateResponse struct {
	// Tells whether the cluster is Running or Stopped
	Code *string `pulumi:"code"`
}

// Describes the Power State of the cluster
type PowerStateResponseOutput struct{ *pulumi.OutputState }

func (PowerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerStateResponse)(nil)).Elem()
}

func (o PowerStateResponseOutput) ToPowerStateResponseOutput() PowerStateResponseOutput {
	return o
}

func (o PowerStateResponseOutput) ToPowerStateResponseOutputWithContext(ctx context.Context) PowerStateResponseOutput {
	return o
}

// Tells whether the cluster is Running or Stopped
func (o PowerStateResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerStateResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

type PowerStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PowerStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerStateResponse)(nil)).Elem()
}

func (o PowerStateResponsePtrOutput) ToPowerStateResponsePtrOutput() PowerStateResponsePtrOutput {
	return o
}

func (o PowerStateResponsePtrOutput) ToPowerStateResponsePtrOutputWithContext(ctx context.Context) PowerStateResponsePtrOutput {
	return o
}

func (o PowerStateResponsePtrOutput) Elem() PowerStateResponseOutput {
	return o.ApplyT(func(v *PowerStateResponse) PowerStateResponse {
		if v != nil {
			return *v
		}
		var ret PowerStateResponse
		return ret
	}).(PowerStateResponseOutput)
}

// Tells whether the cluster is Running or Stopped
func (o PowerStateResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpoint struct {
	// The resource ID of the private endpoint
	Id *string `pulumi:"id"`
}

// PrivateEndpointInput is an input type that accepts PrivateEndpointArgs and PrivateEndpointOutput values.
// You can construct a concrete instance of `PrivateEndpointInput` via:
//
//	PrivateEndpointArgs{...}
type PrivateEndpointInput interface {
	pulumi.Input

	ToPrivateEndpointOutput() PrivateEndpointOutput
	ToPrivateEndpointOutputWithContext(context.Context) PrivateEndpointOutput
}

// Private endpoint which a connection belongs to.
type PrivateEndpointArgs struct {
	// The resource ID of the private endpoint
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (PrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return i.ToPrivateEndpointOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput)
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointArgs) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutput).ToPrivateEndpointPtrOutputWithContext(ctx)
}

// PrivateEndpointPtrInput is an input type that accepts PrivateEndpointArgs, PrivateEndpointPtr and PrivateEndpointPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointPtrInput` via:
//
//	        PrivateEndpointArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointPtrInput interface {
	pulumi.Input

	ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput
	ToPrivateEndpointPtrOutputWithContext(context.Context) PrivateEndpointPtrOutput
}

type privateEndpointPtrType PrivateEndpointArgs

func PrivateEndpointPtr(v *PrivateEndpointArgs) PrivateEndpointPtrInput {
	return (*privateEndpointPtrType)(v)
}

func (*privateEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return i.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (i *privateEndpointPtrType) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointPtrOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpointOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutput() PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointOutputWithContext(ctx context.Context) PrivateEndpointOutput {
	return o
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o.ToPrivateEndpointPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpoint) *PrivateEndpoint {
		return &v
	}).(PrivateEndpointPtrOutput)
}

// The resource ID of the private endpoint
func (o PrivateEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpoint)(nil)).Elem()
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutput() PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) ToPrivateEndpointPtrOutputWithContext(ctx context.Context) PrivateEndpointPtrOutput {
	return o
}

func (o PrivateEndpointPtrOutput) Elem() PrivateEndpointOutput {
	return o.ApplyT(func(v *PrivateEndpoint) PrivateEndpoint {
		if v != nil {
			return *v
		}
		var ret PrivateEndpoint
		return ret
	}).(PrivateEndpointOutput)
}

// The resource ID of the private endpoint
func (o PrivateEndpointPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Private endpoint which a connection belongs to.
type PrivateEndpointResponse struct {
	// The resource ID of the private endpoint
	Id *string `pulumi:"id"`
}

// Private endpoint which a connection belongs to.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The resource ID of the private endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The resource ID of the private endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A private link resource
type PrivateLinkResource struct {
	// The group ID of the resource.
	GroupId *string `pulumi:"groupId"`
	// The ID of the private link resource.
	Id *string `pulumi:"id"`
	// The name of the private link resource.
	Name *string `pulumi:"name"`
	// The RequiredMembers of the resource
	RequiredMembers []string `pulumi:"requiredMembers"`
	// The resource type.
	Type *string `pulumi:"type"`
}

// PrivateLinkResourceInput is an input type that accepts PrivateLinkResourceArgs and PrivateLinkResourceOutput values.
// You can construct a concrete instance of `PrivateLinkResourceInput` via:
//
//	PrivateLinkResourceArgs{...}
type PrivateLinkResourceInput interface {
	pulumi.Input

	ToPrivateLinkResourceOutput() PrivateLinkResourceOutput
	ToPrivateLinkResourceOutputWithContext(context.Context) PrivateLinkResourceOutput
}

// A private link resource
type PrivateLinkResourceArgs struct {
	// The group ID of the resource.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The ID of the private link resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the private link resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The RequiredMembers of the resource
	RequiredMembers pulumi.StringArrayInput `pulumi:"requiredMembers"`
	// The resource type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PrivateLinkResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkResource)(nil)).Elem()
}

func (i PrivateLinkResourceArgs) ToPrivateLinkResourceOutput() PrivateLinkResourceOutput {
	return i.ToPrivateLinkResourceOutputWithContext(context.Background())
}

func (i PrivateLinkResourceArgs) ToPrivateLinkResourceOutputWithContext(ctx context.Context) PrivateLinkResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkResourceOutput)
}

// PrivateLinkResourceArrayInput is an input type that accepts PrivateLinkResourceArray and PrivateLinkResourceArrayOutput values.
// You can construct a concrete instance of `PrivateLinkResourceArrayInput` via:
//
//	PrivateLinkResourceArray{ PrivateLinkResourceArgs{...} }
type PrivateLinkResourceArrayInput interface {
	pulumi.Input

	ToPrivateLinkResourceArrayOutput() PrivateLinkResourceArrayOutput
	ToPrivateLinkResourceArrayOutputWithContext(context.Context) PrivateLinkResourceArrayOutput
}

type PrivateLinkResourceArray []PrivateLinkResourceInput

func (PrivateLinkResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkResource)(nil)).Elem()
}

func (i PrivateLinkResourceArray) ToPrivateLinkResourceArrayOutput() PrivateLinkResourceArrayOutput {
	return i.ToPrivateLinkResourceArrayOutputWithContext(context.Background())
}

func (i PrivateLinkResourceArray) ToPrivateLinkResourceArrayOutputWithContext(ctx context.Context) PrivateLinkResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkResourceArrayOutput)
}

// A private link resource
type PrivateLinkResourceOutput struct{ *pulumi.OutputState }

func (PrivateLinkResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkResource)(nil)).Elem()
}

func (o PrivateLinkResourceOutput) ToPrivateLinkResourceOutput() PrivateLinkResourceOutput {
	return o
}

func (o PrivateLinkResourceOutput) ToPrivateLinkResourceOutputWithContext(ctx context.Context) PrivateLinkResourceOutput {
	return o
}

// The group ID of the resource.
func (o PrivateLinkResourceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResource) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ID of the private link resource.
func (o PrivateLinkResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the private link resource.
func (o PrivateLinkResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The RequiredMembers of the resource
func (o PrivateLinkResourceOutput) RequiredMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateLinkResource) []string { return v.RequiredMembers }).(pulumi.StringArrayOutput)
}

// The resource type.
func (o PrivateLinkResourceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResource) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrivateLinkResourceArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkResource)(nil)).Elem()
}

func (o PrivateLinkResourceArrayOutput) ToPrivateLinkResourceArrayOutput() PrivateLinkResourceArrayOutput {
	return o
}

func (o PrivateLinkResourceArrayOutput) ToPrivateLinkResourceArrayOutputWithContext(ctx context.Context) PrivateLinkResourceArrayOutput {
	return o
}

func (o PrivateLinkResourceArrayOutput) Index(i pulumi.IntInput) PrivateLinkResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkResource {
		return vs[0].([]PrivateLinkResource)[vs[1].(int)]
	}).(PrivateLinkResourceOutput)
}

// A private link resource
type PrivateLinkResourceResponse struct {
	// The group ID of the resource.
	GroupId *string `pulumi:"groupId"`
	// The ID of the private link resource.
	Id *string `pulumi:"id"`
	// The name of the private link resource.
	Name *string `pulumi:"name"`
	// The private link service ID of the resource, this field is exposed only to NRP internally.
	PrivateLinkServiceID string `pulumi:"privateLinkServiceID"`
	// The RequiredMembers of the resource
	RequiredMembers []string `pulumi:"requiredMembers"`
	// The resource type.
	Type *string `pulumi:"type"`
}

// A private link resource
type PrivateLinkResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkResourceResponse)(nil)).Elem()
}

func (o PrivateLinkResourceResponseOutput) ToPrivateLinkResourceResponseOutput() PrivateLinkResourceResponseOutput {
	return o
}

func (o PrivateLinkResourceResponseOutput) ToPrivateLinkResourceResponseOutputWithContext(ctx context.Context) PrivateLinkResourceResponseOutput {
	return o
}

// The group ID of the resource.
func (o PrivateLinkResourceResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResourceResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ID of the private link resource.
func (o PrivateLinkResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the private link resource.
func (o PrivateLinkResourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The private link service ID of the resource, this field is exposed only to NRP internally.
func (o PrivateLinkResourceResponseOutput) PrivateLinkServiceID() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkResourceResponse) string { return v.PrivateLinkServiceID }).(pulumi.StringOutput)
}

// The RequiredMembers of the resource
func (o PrivateLinkResourceResponseOutput) RequiredMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateLinkResourceResponse) []string { return v.RequiredMembers }).(pulumi.StringArrayOutput)
}

// The resource type.
func (o PrivateLinkResourceResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkResourceResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PrivateLinkResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkResourceResponse)(nil)).Elem()
}

func (o PrivateLinkResourceResponseArrayOutput) ToPrivateLinkResourceResponseArrayOutput() PrivateLinkResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkResourceResponseArrayOutput) ToPrivateLinkResourceResponseArrayOutputWithContext(ctx context.Context) PrivateLinkResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkResourceResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkResourceResponse {
		return vs[0].([]PrivateLinkResourceResponse)[vs[1].(int)]
	}).(PrivateLinkResourceResponseOutput)
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionState struct {
	// The private link service connection description.
	Description *string `pulumi:"description"`
	// The private link service connection status.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateArgs struct {
	// The private link service connection description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The private link service connection status.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// The private link service connection description.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The private link service connection status.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateResponse struct {
	// The private link service connection description.
	Description *string `pulumi:"description"`
	// The private link service connection status.
	Status *string `pulumi:"status"`
}

// The state of a private link service connection.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// The private link service connection description.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The private link service connection status.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlySchedule struct {
	// Specifies on which day of the week the maintenance occurs.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Specifies the number of months between each set of occurrences.
	IntervalMonths int `pulumi:"intervalMonths"`
	// Specifies on which week of the month the dayOfWeek applies.
	WeekIndex string `pulumi:"weekIndex"`
}

// RelativeMonthlyScheduleInput is an input type that accepts RelativeMonthlyScheduleArgs and RelativeMonthlyScheduleOutput values.
// You can construct a concrete instance of `RelativeMonthlyScheduleInput` via:
//
//	RelativeMonthlyScheduleArgs{...}
type RelativeMonthlyScheduleInput interface {
	pulumi.Input

	ToRelativeMonthlyScheduleOutput() RelativeMonthlyScheduleOutput
	ToRelativeMonthlyScheduleOutputWithContext(context.Context) RelativeMonthlyScheduleOutput
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlyScheduleArgs struct {
	// Specifies on which day of the week the maintenance occurs.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// Specifies the number of months between each set of occurrences.
	IntervalMonths pulumi.IntInput `pulumi:"intervalMonths"`
	// Specifies on which week of the month the dayOfWeek applies.
	WeekIndex pulumi.StringInput `pulumi:"weekIndex"`
}

func (RelativeMonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelativeMonthlySchedule)(nil)).Elem()
}

func (i RelativeMonthlyScheduleArgs) ToRelativeMonthlyScheduleOutput() RelativeMonthlyScheduleOutput {
	return i.ToRelativeMonthlyScheduleOutputWithContext(context.Background())
}

func (i RelativeMonthlyScheduleArgs) ToRelativeMonthlyScheduleOutputWithContext(ctx context.Context) RelativeMonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelativeMonthlyScheduleOutput)
}

func (i RelativeMonthlyScheduleArgs) ToRelativeMonthlySchedulePtrOutput() RelativeMonthlySchedulePtrOutput {
	return i.ToRelativeMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i RelativeMonthlyScheduleArgs) ToRelativeMonthlySchedulePtrOutputWithContext(ctx context.Context) RelativeMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelativeMonthlyScheduleOutput).ToRelativeMonthlySchedulePtrOutputWithContext(ctx)
}

// RelativeMonthlySchedulePtrInput is an input type that accepts RelativeMonthlyScheduleArgs, RelativeMonthlySchedulePtr and RelativeMonthlySchedulePtrOutput values.
// You can construct a concrete instance of `RelativeMonthlySchedulePtrInput` via:
//
//	        RelativeMonthlyScheduleArgs{...}
//
//	or:
//
//	        nil
type RelativeMonthlySchedulePtrInput interface {
	pulumi.Input

	ToRelativeMonthlySchedulePtrOutput() RelativeMonthlySchedulePtrOutput
	ToRelativeMonthlySchedulePtrOutputWithContext(context.Context) RelativeMonthlySchedulePtrOutput
}

type relativeMonthlySchedulePtrType RelativeMonthlyScheduleArgs

func RelativeMonthlySchedulePtr(v *RelativeMonthlyScheduleArgs) RelativeMonthlySchedulePtrInput {
	return (*relativeMonthlySchedulePtrType)(v)
}

func (*relativeMonthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelativeMonthlySchedule)(nil)).Elem()
}

func (i *relativeMonthlySchedulePtrType) ToRelativeMonthlySchedulePtrOutput() RelativeMonthlySchedulePtrOutput {
	return i.ToRelativeMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *relativeMonthlySchedulePtrType) ToRelativeMonthlySchedulePtrOutputWithContext(ctx context.Context) RelativeMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelativeMonthlySchedulePtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlyScheduleOutput struct{ *pulumi.OutputState }

func (RelativeMonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelativeMonthlySchedule)(nil)).Elem()
}

func (o RelativeMonthlyScheduleOutput) ToRelativeMonthlyScheduleOutput() RelativeMonthlyScheduleOutput {
	return o
}

func (o RelativeMonthlyScheduleOutput) ToRelativeMonthlyScheduleOutputWithContext(ctx context.Context) RelativeMonthlyScheduleOutput {
	return o
}

func (o RelativeMonthlyScheduleOutput) ToRelativeMonthlySchedulePtrOutput() RelativeMonthlySchedulePtrOutput {
	return o.ToRelativeMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o RelativeMonthlyScheduleOutput) ToRelativeMonthlySchedulePtrOutputWithContext(ctx context.Context) RelativeMonthlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelativeMonthlySchedule) *RelativeMonthlySchedule {
		return &v
	}).(RelativeMonthlySchedulePtrOutput)
}

// Specifies on which day of the week the maintenance occurs.
func (o RelativeMonthlyScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v RelativeMonthlySchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Specifies the number of months between each set of occurrences.
func (o RelativeMonthlyScheduleOutput) IntervalMonths() pulumi.IntOutput {
	return o.ApplyT(func(v RelativeMonthlySchedule) int { return v.IntervalMonths }).(pulumi.IntOutput)
}

// Specifies on which week of the month the dayOfWeek applies.
func (o RelativeMonthlyScheduleOutput) WeekIndex() pulumi.StringOutput {
	return o.ApplyT(func(v RelativeMonthlySchedule) string { return v.WeekIndex }).(pulumi.StringOutput)
}

type RelativeMonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (RelativeMonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelativeMonthlySchedule)(nil)).Elem()
}

func (o RelativeMonthlySchedulePtrOutput) ToRelativeMonthlySchedulePtrOutput() RelativeMonthlySchedulePtrOutput {
	return o
}

func (o RelativeMonthlySchedulePtrOutput) ToRelativeMonthlySchedulePtrOutputWithContext(ctx context.Context) RelativeMonthlySchedulePtrOutput {
	return o
}

func (o RelativeMonthlySchedulePtrOutput) Elem() RelativeMonthlyScheduleOutput {
	return o.ApplyT(func(v *RelativeMonthlySchedule) RelativeMonthlySchedule {
		if v != nil {
			return *v
		}
		var ret RelativeMonthlySchedule
		return ret
	}).(RelativeMonthlyScheduleOutput)
}

// Specifies on which day of the week the maintenance occurs.
func (o RelativeMonthlySchedulePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelativeMonthlySchedule) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of months between each set of occurrences.
func (o RelativeMonthlySchedulePtrOutput) IntervalMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RelativeMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalMonths
	}).(pulumi.IntPtrOutput)
}

// Specifies on which week of the month the dayOfWeek applies.
func (o RelativeMonthlySchedulePtrOutput) WeekIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelativeMonthlySchedule) *string {
		if v == nil {
			return nil
		}
		return &v.WeekIndex
	}).(pulumi.StringPtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlyScheduleResponse struct {
	// Specifies on which day of the week the maintenance occurs.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Specifies the number of months between each set of occurrences.
	IntervalMonths int `pulumi:"intervalMonths"`
	// Specifies on which week of the month the dayOfWeek applies.
	WeekIndex string `pulumi:"weekIndex"`
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
type RelativeMonthlyScheduleResponseOutput struct{ *pulumi.OutputState }

func (RelativeMonthlyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelativeMonthlyScheduleResponse)(nil)).Elem()
}

func (o RelativeMonthlyScheduleResponseOutput) ToRelativeMonthlyScheduleResponseOutput() RelativeMonthlyScheduleResponseOutput {
	return o
}

func (o RelativeMonthlyScheduleResponseOutput) ToRelativeMonthlyScheduleResponseOutputWithContext(ctx context.Context) RelativeMonthlyScheduleResponseOutput {
	return o
}

// Specifies on which day of the week the maintenance occurs.
func (o RelativeMonthlyScheduleResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v RelativeMonthlyScheduleResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Specifies the number of months between each set of occurrences.
func (o RelativeMonthlyScheduleResponseOutput) IntervalMonths() pulumi.IntOutput {
	return o.ApplyT(func(v RelativeMonthlyScheduleResponse) int { return v.IntervalMonths }).(pulumi.IntOutput)
}

// Specifies on which week of the month the dayOfWeek applies.
func (o RelativeMonthlyScheduleResponseOutput) WeekIndex() pulumi.StringOutput {
	return o.ApplyT(func(v RelativeMonthlyScheduleResponse) string { return v.WeekIndex }).(pulumi.StringOutput)
}

type RelativeMonthlyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RelativeMonthlyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelativeMonthlyScheduleResponse)(nil)).Elem()
}

func (o RelativeMonthlyScheduleResponsePtrOutput) ToRelativeMonthlyScheduleResponsePtrOutput() RelativeMonthlyScheduleResponsePtrOutput {
	return o
}

func (o RelativeMonthlyScheduleResponsePtrOutput) ToRelativeMonthlyScheduleResponsePtrOutputWithContext(ctx context.Context) RelativeMonthlyScheduleResponsePtrOutput {
	return o
}

func (o RelativeMonthlyScheduleResponsePtrOutput) Elem() RelativeMonthlyScheduleResponseOutput {
	return o.ApplyT(func(v *RelativeMonthlyScheduleResponse) RelativeMonthlyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RelativeMonthlyScheduleResponse
		return ret
	}).(RelativeMonthlyScheduleResponseOutput)
}

// Specifies on which day of the week the maintenance occurs.
func (o RelativeMonthlyScheduleResponsePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelativeMonthlyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of months between each set of occurrences.
func (o RelativeMonthlyScheduleResponsePtrOutput) IntervalMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RelativeMonthlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalMonths
	}).(pulumi.IntPtrOutput)
}

// Specifies on which week of the month the dayOfWeek applies.
func (o RelativeMonthlyScheduleResponsePtrOutput) WeekIndex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelativeMonthlyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WeekIndex
	}).(pulumi.StringPtrOutput)
}

// Resource quota for the namespace.
type ResourceQuota struct {
	// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
	CpuLimit *string `pulumi:"cpuLimit"`
	// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
	CpuRequest *string `pulumi:"cpuRequest"`
	// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
	MemoryLimit *string `pulumi:"memoryLimit"`
	// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
	MemoryRequest *string `pulumi:"memoryRequest"`
}

// ResourceQuotaInput is an input type that accepts ResourceQuotaArgs and ResourceQuotaOutput values.
// You can construct a concrete instance of `ResourceQuotaInput` via:
//
//	ResourceQuotaArgs{...}
type ResourceQuotaInput interface {
	pulumi.Input

	ToResourceQuotaOutput() ResourceQuotaOutput
	ToResourceQuotaOutputWithContext(context.Context) ResourceQuotaOutput
}

// Resource quota for the namespace.
type ResourceQuotaArgs struct {
	// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
	CpuLimit pulumi.StringPtrInput `pulumi:"cpuLimit"`
	// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
	CpuRequest pulumi.StringPtrInput `pulumi:"cpuRequest"`
	// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
	MemoryLimit pulumi.StringPtrInput `pulumi:"memoryLimit"`
	// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
	MemoryRequest pulumi.StringPtrInput `pulumi:"memoryRequest"`
}

func (ResourceQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuota)(nil)).Elem()
}

func (i ResourceQuotaArgs) ToResourceQuotaOutput() ResourceQuotaOutput {
	return i.ToResourceQuotaOutputWithContext(context.Background())
}

func (i ResourceQuotaArgs) ToResourceQuotaOutputWithContext(ctx context.Context) ResourceQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaOutput)
}

func (i ResourceQuotaArgs) ToResourceQuotaPtrOutput() ResourceQuotaPtrOutput {
	return i.ToResourceQuotaPtrOutputWithContext(context.Background())
}

func (i ResourceQuotaArgs) ToResourceQuotaPtrOutputWithContext(ctx context.Context) ResourceQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaOutput).ToResourceQuotaPtrOutputWithContext(ctx)
}

// ResourceQuotaPtrInput is an input type that accepts ResourceQuotaArgs, ResourceQuotaPtr and ResourceQuotaPtrOutput values.
// You can construct a concrete instance of `ResourceQuotaPtrInput` via:
//
//	        ResourceQuotaArgs{...}
//
//	or:
//
//	        nil
type ResourceQuotaPtrInput interface {
	pulumi.Input

	ToResourceQuotaPtrOutput() ResourceQuotaPtrOutput
	ToResourceQuotaPtrOutputWithContext(context.Context) ResourceQuotaPtrOutput
}

type resourceQuotaPtrType ResourceQuotaArgs

func ResourceQuotaPtr(v *ResourceQuotaArgs) ResourceQuotaPtrInput {
	return (*resourceQuotaPtrType)(v)
}

func (*resourceQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuota)(nil)).Elem()
}

func (i *resourceQuotaPtrType) ToResourceQuotaPtrOutput() ResourceQuotaPtrOutput {
	return i.ToResourceQuotaPtrOutputWithContext(context.Background())
}

func (i *resourceQuotaPtrType) ToResourceQuotaPtrOutputWithContext(ctx context.Context) ResourceQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceQuotaPtrOutput)
}

// Resource quota for the namespace.
type ResourceQuotaOutput struct{ *pulumi.OutputState }

func (ResourceQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuota)(nil)).Elem()
}

func (o ResourceQuotaOutput) ToResourceQuotaOutput() ResourceQuotaOutput {
	return o
}

func (o ResourceQuotaOutput) ToResourceQuotaOutputWithContext(ctx context.Context) ResourceQuotaOutput {
	return o
}

func (o ResourceQuotaOutput) ToResourceQuotaPtrOutput() ResourceQuotaPtrOutput {
	return o.ToResourceQuotaPtrOutputWithContext(context.Background())
}

func (o ResourceQuotaOutput) ToResourceQuotaPtrOutputWithContext(ctx context.Context) ResourceQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceQuota) *ResourceQuota {
		return &v
	}).(ResourceQuotaPtrOutput)
}

// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaOutput) CpuLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuota) *string { return v.CpuLimit }).(pulumi.StringPtrOutput)
}

// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaOutput) CpuRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuota) *string { return v.CpuRequest }).(pulumi.StringPtrOutput)
}

// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaOutput) MemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuota) *string { return v.MemoryLimit }).(pulumi.StringPtrOutput)
}

// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaOutput) MemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuota) *string { return v.MemoryRequest }).(pulumi.StringPtrOutput)
}

type ResourceQuotaPtrOutput struct{ *pulumi.OutputState }

func (ResourceQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuota)(nil)).Elem()
}

func (o ResourceQuotaPtrOutput) ToResourceQuotaPtrOutput() ResourceQuotaPtrOutput {
	return o
}

func (o ResourceQuotaPtrOutput) ToResourceQuotaPtrOutputWithContext(ctx context.Context) ResourceQuotaPtrOutput {
	return o
}

func (o ResourceQuotaPtrOutput) Elem() ResourceQuotaOutput {
	return o.ApplyT(func(v *ResourceQuota) ResourceQuota {
		if v != nil {
			return *v
		}
		var ret ResourceQuota
		return ret
	}).(ResourceQuotaOutput)
}

// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaPtrOutput) CpuLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuota) *string {
		if v == nil {
			return nil
		}
		return v.CpuLimit
	}).(pulumi.StringPtrOutput)
}

// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaPtrOutput) CpuRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuota) *string {
		if v == nil {
			return nil
		}
		return v.CpuRequest
	}).(pulumi.StringPtrOutput)
}

// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaPtrOutput) MemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuota) *string {
		if v == nil {
			return nil
		}
		return v.MemoryLimit
	}).(pulumi.StringPtrOutput)
}

// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaPtrOutput) MemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuota) *string {
		if v == nil {
			return nil
		}
		return v.MemoryRequest
	}).(pulumi.StringPtrOutput)
}

// Resource quota for the namespace.
type ResourceQuotaResponse struct {
	// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
	CpuLimit *string `pulumi:"cpuLimit"`
	// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
	CpuRequest *string `pulumi:"cpuRequest"`
	// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
	MemoryLimit *string `pulumi:"memoryLimit"`
	// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
	MemoryRequest *string `pulumi:"memoryRequest"`
}

// Resource quota for the namespace.
type ResourceQuotaResponseOutput struct{ *pulumi.OutputState }

func (ResourceQuotaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceQuotaResponse)(nil)).Elem()
}

func (o ResourceQuotaResponseOutput) ToResourceQuotaResponseOutput() ResourceQuotaResponseOutput {
	return o
}

func (o ResourceQuotaResponseOutput) ToResourceQuotaResponseOutputWithContext(ctx context.Context) ResourceQuotaResponseOutput {
	return o
}

// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaResponseOutput) CpuLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaResponse) *string { return v.CpuLimit }).(pulumi.StringPtrOutput)
}

// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaResponseOutput) CpuRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaResponse) *string { return v.CpuRequest }).(pulumi.StringPtrOutput)
}

// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaResponseOutput) MemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaResponse) *string { return v.MemoryLimit }).(pulumi.StringPtrOutput)
}

// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaResponseOutput) MemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceQuotaResponse) *string { return v.MemoryRequest }).(pulumi.StringPtrOutput)
}

type ResourceQuotaResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceQuotaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceQuotaResponse)(nil)).Elem()
}

func (o ResourceQuotaResponsePtrOutput) ToResourceQuotaResponsePtrOutput() ResourceQuotaResponsePtrOutput {
	return o
}

func (o ResourceQuotaResponsePtrOutput) ToResourceQuotaResponsePtrOutputWithContext(ctx context.Context) ResourceQuotaResponsePtrOutput {
	return o
}

func (o ResourceQuotaResponsePtrOutput) Elem() ResourceQuotaResponseOutput {
	return o.ApplyT(func(v *ResourceQuotaResponse) ResourceQuotaResponse {
		if v != nil {
			return *v
		}
		var ret ResourceQuotaResponse
		return ret
	}).(ResourceQuotaResponseOutput)
}

// CPU limit of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaResponsePtrOutput) CpuLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuotaResponse) *string {
		if v == nil {
			return nil
		}
		return v.CpuLimit
	}).(pulumi.StringPtrOutput)
}

// CPU request of the namespace in one-thousandth CPU form. See [CPU resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu) for more details.
func (o ResourceQuotaResponsePtrOutput) CpuRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuotaResponse) *string {
		if v == nil {
			return nil
		}
		return v.CpuRequest
	}).(pulumi.StringPtrOutput)
}

// Memory limit of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaResponsePtrOutput) MemoryLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuotaResponse) *string {
		if v == nil {
			return nil
		}
		return v.MemoryLimit
	}).(pulumi.StringPtrOutput)
}

// Memory request of the namespace in the power-of-two equivalents form: Ei, Pi, Ti, Gi, Mi, Ki. See [Memory resource units](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory) for more details.
func (o ResourceQuotaResponsePtrOutput) MemoryRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceQuotaResponse) *string {
		if v == nil {
			return nil
		}
		return v.MemoryRequest
	}).(pulumi.StringPtrOutput)
}

// A reference to an Azure resource.
type ResourceReference struct {
	// The fully qualified Azure resource id.
	Id *string `pulumi:"id"`
}

// ResourceReferenceInput is an input type that accepts ResourceReferenceArgs and ResourceReferenceOutput values.
// You can construct a concrete instance of `ResourceReferenceInput` via:
//
//	ResourceReferenceArgs{...}
type ResourceReferenceInput interface {
	pulumi.Input

	ToResourceReferenceOutput() ResourceReferenceOutput
	ToResourceReferenceOutputWithContext(context.Context) ResourceReferenceOutput
}

// A reference to an Azure resource.
type ResourceReferenceArgs struct {
	// The fully qualified Azure resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ResourceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReference)(nil)).Elem()
}

func (i ResourceReferenceArgs) ToResourceReferenceOutput() ResourceReferenceOutput {
	return i.ToResourceReferenceOutputWithContext(context.Background())
}

func (i ResourceReferenceArgs) ToResourceReferenceOutputWithContext(ctx context.Context) ResourceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceOutput)
}

// ResourceReferenceArrayInput is an input type that accepts ResourceReferenceArray and ResourceReferenceArrayOutput values.
// You can construct a concrete instance of `ResourceReferenceArrayInput` via:
//
//	ResourceReferenceArray{ ResourceReferenceArgs{...} }
type ResourceReferenceArrayInput interface {
	pulumi.Input

	ToResourceReferenceArrayOutput() ResourceReferenceArrayOutput
	ToResourceReferenceArrayOutputWithContext(context.Context) ResourceReferenceArrayOutput
}

type ResourceReferenceArray []ResourceReferenceInput

func (ResourceReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceReference)(nil)).Elem()
}

func (i ResourceReferenceArray) ToResourceReferenceArrayOutput() ResourceReferenceArrayOutput {
	return i.ToResourceReferenceArrayOutputWithContext(context.Background())
}

func (i ResourceReferenceArray) ToResourceReferenceArrayOutputWithContext(ctx context.Context) ResourceReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceReferenceArrayOutput)
}

// A reference to an Azure resource.
type ResourceReferenceOutput struct{ *pulumi.OutputState }

func (ResourceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReference)(nil)).Elem()
}

func (o ResourceReferenceOutput) ToResourceReferenceOutput() ResourceReferenceOutput {
	return o
}

func (o ResourceReferenceOutput) ToResourceReferenceOutputWithContext(ctx context.Context) ResourceReferenceOutput {
	return o
}

// The fully qualified Azure resource id.
func (o ResourceReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ResourceReferenceArrayOutput struct{ *pulumi.OutputState }

func (ResourceReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceReference)(nil)).Elem()
}

func (o ResourceReferenceArrayOutput) ToResourceReferenceArrayOutput() ResourceReferenceArrayOutput {
	return o
}

func (o ResourceReferenceArrayOutput) ToResourceReferenceArrayOutputWithContext(ctx context.Context) ResourceReferenceArrayOutput {
	return o
}

func (o ResourceReferenceArrayOutput) Index(i pulumi.IntInput) ResourceReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceReference {
		return vs[0].([]ResourceReference)[vs[1].(int)]
	}).(ResourceReferenceOutput)
}

// A reference to an Azure resource.
type ResourceReferenceResponse struct {
	// The fully qualified Azure resource id.
	Id *string `pulumi:"id"`
}

// A reference to an Azure resource.
type ResourceReferenceResponseOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutput() ResourceReferenceResponseOutput {
	return o
}

func (o ResourceReferenceResponseOutput) ToResourceReferenceResponseOutputWithContext(ctx context.Context) ResourceReferenceResponseOutput {
	return o
}

// The fully qualified Azure resource id.
func (o ResourceReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ResourceReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceReferenceResponse)(nil)).Elem()
}

func (o ResourceReferenceResponseArrayOutput) ToResourceReferenceResponseArrayOutput() ResourceReferenceResponseArrayOutput {
	return o
}

func (o ResourceReferenceResponseArrayOutput) ToResourceReferenceResponseArrayOutputWithContext(ctx context.Context) ResourceReferenceResponseArrayOutput {
	return o
}

func (o ResourceReferenceResponseArrayOutput) Index(i pulumi.IntInput) ResourceReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceReferenceResponse {
		return vs[0].([]ResourceReferenceResponse)[vs[1].(int)]
	}).(ResourceReferenceResponseOutput)
}

// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or 'relativeMonthly' for your maintenance schedule.
type Schedule struct {
	// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
	AbsoluteMonthly *AbsoluteMonthlySchedule `pulumi:"absoluteMonthly"`
	// For schedules like: 'recur every day' or 'recur every 3 days'.
	Daily *DailySchedule `pulumi:"daily"`
	// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
	RelativeMonthly *RelativeMonthlySchedule `pulumi:"relativeMonthly"`
	// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
	Weekly *WeeklySchedule `pulumi:"weekly"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//	ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or 'relativeMonthly' for your maintenance schedule.
type ScheduleArgs struct {
	// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
	AbsoluteMonthly AbsoluteMonthlySchedulePtrInput `pulumi:"absoluteMonthly"`
	// For schedules like: 'recur every day' or 'recur every 3 days'.
	Daily DailySchedulePtrInput `pulumi:"daily"`
	// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
	RelativeMonthly RelativeMonthlySchedulePtrInput `pulumi:"relativeMonthly"`
	// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
	Weekly WeeklySchedulePtrInput `pulumi:"weekly"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

func (i ScheduleArgs) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput).ToSchedulePtrOutputWithContext(ctx)
}

// SchedulePtrInput is an input type that accepts ScheduleArgs, SchedulePtr and SchedulePtrOutput values.
// You can construct a concrete instance of `SchedulePtrInput` via:
//
//	        ScheduleArgs{...}
//
//	or:
//
//	        nil
type SchedulePtrInput interface {
	pulumi.Input

	ToSchedulePtrOutput() SchedulePtrOutput
	ToSchedulePtrOutputWithContext(context.Context) SchedulePtrOutput
}

type schedulePtrType ScheduleArgs

func SchedulePtr(v *ScheduleArgs) SchedulePtrInput {
	return (*schedulePtrType)(v)
}

func (*schedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *schedulePtrType) ToSchedulePtrOutput() SchedulePtrOutput {
	return i.ToSchedulePtrOutputWithContext(context.Background())
}

func (i *schedulePtrType) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulePtrOutput)
}

// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or 'relativeMonthly' for your maintenance schedule.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o.ToSchedulePtrOutputWithContext(context.Background())
}

func (o ScheduleOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Schedule) *Schedule {
		return &v
	}).(SchedulePtrOutput)
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
func (o ScheduleOutput) AbsoluteMonthly() AbsoluteMonthlySchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *AbsoluteMonthlySchedule { return v.AbsoluteMonthly }).(AbsoluteMonthlySchedulePtrOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
func (o ScheduleOutput) Daily() DailySchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *DailySchedule { return v.Daily }).(DailySchedulePtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
func (o ScheduleOutput) RelativeMonthly() RelativeMonthlySchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *RelativeMonthlySchedule { return v.RelativeMonthly }).(RelativeMonthlySchedulePtrOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
func (o ScheduleOutput) Weekly() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v Schedule) *WeeklySchedule { return v.Weekly }).(WeeklySchedulePtrOutput)
}

type SchedulePtrOutput struct{ *pulumi.OutputState }

func (SchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o SchedulePtrOutput) ToSchedulePtrOutput() SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) ToSchedulePtrOutputWithContext(ctx context.Context) SchedulePtrOutput {
	return o
}

func (o SchedulePtrOutput) Elem() ScheduleOutput {
	return o.ApplyT(func(v *Schedule) Schedule {
		if v != nil {
			return *v
		}
		var ret Schedule
		return ret
	}).(ScheduleOutput)
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
func (o SchedulePtrOutput) AbsoluteMonthly() AbsoluteMonthlySchedulePtrOutput {
	return o.ApplyT(func(v *Schedule) *AbsoluteMonthlySchedule {
		if v == nil {
			return nil
		}
		return v.AbsoluteMonthly
	}).(AbsoluteMonthlySchedulePtrOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
func (o SchedulePtrOutput) Daily() DailySchedulePtrOutput {
	return o.ApplyT(func(v *Schedule) *DailySchedule {
		if v == nil {
			return nil
		}
		return v.Daily
	}).(DailySchedulePtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
func (o SchedulePtrOutput) RelativeMonthly() RelativeMonthlySchedulePtrOutput {
	return o.ApplyT(func(v *Schedule) *RelativeMonthlySchedule {
		if v == nil {
			return nil
		}
		return v.RelativeMonthly
	}).(RelativeMonthlySchedulePtrOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
func (o SchedulePtrOutput) Weekly() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v *Schedule) *WeeklySchedule {
		if v == nil {
			return nil
		}
		return v.Weekly
	}).(WeeklySchedulePtrOutput)
}

// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or 'relativeMonthly' for your maintenance schedule.
type ScheduleResponse struct {
	// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
	AbsoluteMonthly *AbsoluteMonthlyScheduleResponse `pulumi:"absoluteMonthly"`
	// For schedules like: 'recur every day' or 'recur every 3 days'.
	Daily *DailyScheduleResponse `pulumi:"daily"`
	// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
	RelativeMonthly *RelativeMonthlyScheduleResponse `pulumi:"relativeMonthly"`
	// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
	Weekly *WeeklyScheduleResponse `pulumi:"weekly"`
}

// One and only one of the schedule types should be specified. Choose either 'daily', 'weekly', 'absoluteMonthly' or 'relativeMonthly' for your maintenance schedule.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
func (o ScheduleResponseOutput) AbsoluteMonthly() AbsoluteMonthlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *AbsoluteMonthlyScheduleResponse { return v.AbsoluteMonthly }).(AbsoluteMonthlyScheduleResponsePtrOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
func (o ScheduleResponseOutput) Daily() DailyScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *DailyScheduleResponse { return v.Daily }).(DailyScheduleResponsePtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
func (o ScheduleResponseOutput) RelativeMonthly() RelativeMonthlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *RelativeMonthlyScheduleResponse { return v.RelativeMonthly }).(RelativeMonthlyScheduleResponsePtrOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
func (o ScheduleResponseOutput) Weekly() WeeklyScheduleResponsePtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *WeeklyScheduleResponse { return v.Weekly }).(WeeklyScheduleResponsePtrOutput)
}

type ScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutput() ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) ToScheduleResponsePtrOutputWithContext(ctx context.Context) ScheduleResponsePtrOutput {
	return o
}

func (o ScheduleResponsePtrOutput) Elem() ScheduleResponseOutput {
	return o.ApplyT(func(v *ScheduleResponse) ScheduleResponse {
		if v != nil {
			return *v
		}
		var ret ScheduleResponse
		return ret
	}).(ScheduleResponseOutput)
}

// For schedules like: 'recur every month on the 15th' or 'recur every 3 months on the 20th'.
func (o ScheduleResponsePtrOutput) AbsoluteMonthly() AbsoluteMonthlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *AbsoluteMonthlyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.AbsoluteMonthly
	}).(AbsoluteMonthlyScheduleResponsePtrOutput)
}

// For schedules like: 'recur every day' or 'recur every 3 days'.
func (o ScheduleResponsePtrOutput) Daily() DailyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *DailyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Daily
	}).(DailyScheduleResponsePtrOutput)
}

// For schedules like: 'recur every month on the first Monday' or 'recur every 3 months on last Friday'.
func (o ScheduleResponsePtrOutput) RelativeMonthly() RelativeMonthlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *RelativeMonthlyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.RelativeMonthly
	}).(RelativeMonthlyScheduleResponsePtrOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
func (o ScheduleResponsePtrOutput) Weekly() WeeklyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ScheduleResponse) *WeeklyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Weekly
	}).(WeeklyScheduleResponsePtrOutput)
}

// Service mesh profile for a managed cluster.
type ServiceMeshProfile struct {
	// Istio service mesh configuration.
	Istio *IstioServiceMesh `pulumi:"istio"`
	// Mode of the service mesh.
	Mode string `pulumi:"mode"`
}

// ServiceMeshProfileInput is an input type that accepts ServiceMeshProfileArgs and ServiceMeshProfileOutput values.
// You can construct a concrete instance of `ServiceMeshProfileInput` via:
//
//	ServiceMeshProfileArgs{...}
type ServiceMeshProfileInput interface {
	pulumi.Input

	ToServiceMeshProfileOutput() ServiceMeshProfileOutput
	ToServiceMeshProfileOutputWithContext(context.Context) ServiceMeshProfileOutput
}

// Service mesh profile for a managed cluster.
type ServiceMeshProfileArgs struct {
	// Istio service mesh configuration.
	Istio IstioServiceMeshPtrInput `pulumi:"istio"`
	// Mode of the service mesh.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (ServiceMeshProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshProfile)(nil)).Elem()
}

func (i ServiceMeshProfileArgs) ToServiceMeshProfileOutput() ServiceMeshProfileOutput {
	return i.ToServiceMeshProfileOutputWithContext(context.Background())
}

func (i ServiceMeshProfileArgs) ToServiceMeshProfileOutputWithContext(ctx context.Context) ServiceMeshProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshProfileOutput)
}

func (i ServiceMeshProfileArgs) ToServiceMeshProfilePtrOutput() ServiceMeshProfilePtrOutput {
	return i.ToServiceMeshProfilePtrOutputWithContext(context.Background())
}

func (i ServiceMeshProfileArgs) ToServiceMeshProfilePtrOutputWithContext(ctx context.Context) ServiceMeshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshProfileOutput).ToServiceMeshProfilePtrOutputWithContext(ctx)
}

// ServiceMeshProfilePtrInput is an input type that accepts ServiceMeshProfileArgs, ServiceMeshProfilePtr and ServiceMeshProfilePtrOutput values.
// You can construct a concrete instance of `ServiceMeshProfilePtrInput` via:
//
//	        ServiceMeshProfileArgs{...}
//
//	or:
//
//	        nil
type ServiceMeshProfilePtrInput interface {
	pulumi.Input

	ToServiceMeshProfilePtrOutput() ServiceMeshProfilePtrOutput
	ToServiceMeshProfilePtrOutputWithContext(context.Context) ServiceMeshProfilePtrOutput
}

type serviceMeshProfilePtrType ServiceMeshProfileArgs

func ServiceMeshProfilePtr(v *ServiceMeshProfileArgs) ServiceMeshProfilePtrInput {
	return (*serviceMeshProfilePtrType)(v)
}

func (*serviceMeshProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshProfile)(nil)).Elem()
}

func (i *serviceMeshProfilePtrType) ToServiceMeshProfilePtrOutput() ServiceMeshProfilePtrOutput {
	return i.ToServiceMeshProfilePtrOutputWithContext(context.Background())
}

func (i *serviceMeshProfilePtrType) ToServiceMeshProfilePtrOutputWithContext(ctx context.Context) ServiceMeshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshProfilePtrOutput)
}

// Service mesh profile for a managed cluster.
type ServiceMeshProfileOutput struct{ *pulumi.OutputState }

func (ServiceMeshProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshProfile)(nil)).Elem()
}

func (o ServiceMeshProfileOutput) ToServiceMeshProfileOutput() ServiceMeshProfileOutput {
	return o
}

func (o ServiceMeshProfileOutput) ToServiceMeshProfileOutputWithContext(ctx context.Context) ServiceMeshProfileOutput {
	return o
}

func (o ServiceMeshProfileOutput) ToServiceMeshProfilePtrOutput() ServiceMeshProfilePtrOutput {
	return o.ToServiceMeshProfilePtrOutputWithContext(context.Background())
}

func (o ServiceMeshProfileOutput) ToServiceMeshProfilePtrOutputWithContext(ctx context.Context) ServiceMeshProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceMeshProfile) *ServiceMeshProfile {
		return &v
	}).(ServiceMeshProfilePtrOutput)
}

// Istio service mesh configuration.
func (o ServiceMeshProfileOutput) Istio() IstioServiceMeshPtrOutput {
	return o.ApplyT(func(v ServiceMeshProfile) *IstioServiceMesh { return v.Istio }).(IstioServiceMeshPtrOutput)
}

// Mode of the service mesh.
func (o ServiceMeshProfileOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshProfile) string { return v.Mode }).(pulumi.StringOutput)
}

type ServiceMeshProfilePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshProfile)(nil)).Elem()
}

func (o ServiceMeshProfilePtrOutput) ToServiceMeshProfilePtrOutput() ServiceMeshProfilePtrOutput {
	return o
}

func (o ServiceMeshProfilePtrOutput) ToServiceMeshProfilePtrOutputWithContext(ctx context.Context) ServiceMeshProfilePtrOutput {
	return o
}

func (o ServiceMeshProfilePtrOutput) Elem() ServiceMeshProfileOutput {
	return o.ApplyT(func(v *ServiceMeshProfile) ServiceMeshProfile {
		if v != nil {
			return *v
		}
		var ret ServiceMeshProfile
		return ret
	}).(ServiceMeshProfileOutput)
}

// Istio service mesh configuration.
func (o ServiceMeshProfilePtrOutput) Istio() IstioServiceMeshPtrOutput {
	return o.ApplyT(func(v *ServiceMeshProfile) *IstioServiceMesh {
		if v == nil {
			return nil
		}
		return v.Istio
	}).(IstioServiceMeshPtrOutput)
}

// Mode of the service mesh.
func (o ServiceMeshProfilePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMeshProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Service mesh profile for a managed cluster.
type ServiceMeshProfileResponse struct {
	// Istio service mesh configuration.
	Istio *IstioServiceMeshResponse `pulumi:"istio"`
	// Mode of the service mesh.
	Mode string `pulumi:"mode"`
}

// Service mesh profile for a managed cluster.
type ServiceMeshProfileResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshProfileResponse)(nil)).Elem()
}

func (o ServiceMeshProfileResponseOutput) ToServiceMeshProfileResponseOutput() ServiceMeshProfileResponseOutput {
	return o
}

func (o ServiceMeshProfileResponseOutput) ToServiceMeshProfileResponseOutputWithContext(ctx context.Context) ServiceMeshProfileResponseOutput {
	return o
}

// Istio service mesh configuration.
func (o ServiceMeshProfileResponseOutput) Istio() IstioServiceMeshResponsePtrOutput {
	return o.ApplyT(func(v ServiceMeshProfileResponse) *IstioServiceMeshResponse { return v.Istio }).(IstioServiceMeshResponsePtrOutput)
}

// Mode of the service mesh.
func (o ServiceMeshProfileResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshProfileResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type ServiceMeshProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshProfileResponse)(nil)).Elem()
}

func (o ServiceMeshProfileResponsePtrOutput) ToServiceMeshProfileResponsePtrOutput() ServiceMeshProfileResponsePtrOutput {
	return o
}

func (o ServiceMeshProfileResponsePtrOutput) ToServiceMeshProfileResponsePtrOutputWithContext(ctx context.Context) ServiceMeshProfileResponsePtrOutput {
	return o
}

func (o ServiceMeshProfileResponsePtrOutput) Elem() ServiceMeshProfileResponseOutput {
	return o.ApplyT(func(v *ServiceMeshProfileResponse) ServiceMeshProfileResponse {
		if v != nil {
			return *v
		}
		var ret ServiceMeshProfileResponse
		return ret
	}).(ServiceMeshProfileResponseOutput)
}

// Istio service mesh configuration.
func (o ServiceMeshProfileResponsePtrOutput) Istio() IstioServiceMeshResponsePtrOutput {
	return o.ApplyT(func(v *ServiceMeshProfileResponse) *IstioServiceMeshResponse {
		if v == nil {
			return nil
		}
		return v.Istio
	}).(IstioServiceMeshResponsePtrOutput)
}

// Mode of the service mesh.
func (o ServiceMeshProfileResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMeshProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Sysctl settings for Linux agent nodes.
type SysctlConfig struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `pulumi:"fsAioMaxNr"`
	// Sysctl setting fs.file-max.
	FsFileMax *int `pulumi:"fsFileMax"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `pulumi:"fsInotifyMaxUserWatches"`
	// Sysctl setting fs.nr_open.
	FsNrOpen *int `pulumi:"fsNrOpen"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `pulumi:"kernelThreadsMax"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `pulumi:"netCoreNetdevMaxBacklog"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `pulumi:"netCoreOptmemMax"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `pulumi:"netCoreRmemDefault"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `pulumi:"netCoreRmemMax"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `pulumi:"netCoreSomaxconn"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `pulumi:"netCoreWmemDefault"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `pulumi:"netCoreWmemMax"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `pulumi:"netIpv4IpLocalPortRange"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `pulumi:"netIpv4NeighDefaultGcThresh1"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `pulumi:"netIpv4NeighDefaultGcThresh2"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `pulumi:"netIpv4NeighDefaultGcThresh3"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `pulumi:"netIpv4TcpFinTimeout"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `pulumi:"netIpv4TcpKeepaliveProbes"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `pulumi:"netIpv4TcpKeepaliveTime"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `pulumi:"netIpv4TcpMaxSynBacklog"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `pulumi:"netIpv4TcpMaxTwBuckets"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `pulumi:"netIpv4TcpTwReuse"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `pulumi:"netIpv4TcpkeepaliveIntvl"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `pulumi:"netNetfilterNfConntrackBuckets"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `pulumi:"netNetfilterNfConntrackMax"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `pulumi:"vmMaxMapCount"`
	// Sysctl setting vm.swappiness.
	VmSwappiness *int `pulumi:"vmSwappiness"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `pulumi:"vmVfsCachePressure"`
}

// SysctlConfigInput is an input type that accepts SysctlConfigArgs and SysctlConfigOutput values.
// You can construct a concrete instance of `SysctlConfigInput` via:
//
//	SysctlConfigArgs{...}
type SysctlConfigInput interface {
	pulumi.Input

	ToSysctlConfigOutput() SysctlConfigOutput
	ToSysctlConfigOutputWithContext(context.Context) SysctlConfigOutput
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigArgs struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr pulumi.IntPtrInput `pulumi:"fsAioMaxNr"`
	// Sysctl setting fs.file-max.
	FsFileMax pulumi.IntPtrInput `pulumi:"fsFileMax"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches pulumi.IntPtrInput `pulumi:"fsInotifyMaxUserWatches"`
	// Sysctl setting fs.nr_open.
	FsNrOpen pulumi.IntPtrInput `pulumi:"fsNrOpen"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax pulumi.IntPtrInput `pulumi:"kernelThreadsMax"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog pulumi.IntPtrInput `pulumi:"netCoreNetdevMaxBacklog"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax pulumi.IntPtrInput `pulumi:"netCoreOptmemMax"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault pulumi.IntPtrInput `pulumi:"netCoreRmemDefault"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax pulumi.IntPtrInput `pulumi:"netCoreRmemMax"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn pulumi.IntPtrInput `pulumi:"netCoreSomaxconn"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault pulumi.IntPtrInput `pulumi:"netCoreWmemDefault"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax pulumi.IntPtrInput `pulumi:"netCoreWmemMax"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange pulumi.StringPtrInput `pulumi:"netIpv4IpLocalPortRange"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 pulumi.IntPtrInput `pulumi:"netIpv4NeighDefaultGcThresh1"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 pulumi.IntPtrInput `pulumi:"netIpv4NeighDefaultGcThresh2"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 pulumi.IntPtrInput `pulumi:"netIpv4NeighDefaultGcThresh3"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout pulumi.IntPtrInput `pulumi:"netIpv4TcpFinTimeout"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes pulumi.IntPtrInput `pulumi:"netIpv4TcpKeepaliveProbes"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime pulumi.IntPtrInput `pulumi:"netIpv4TcpKeepaliveTime"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog pulumi.IntPtrInput `pulumi:"netIpv4TcpMaxSynBacklog"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets pulumi.IntPtrInput `pulumi:"netIpv4TcpMaxTwBuckets"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse pulumi.BoolPtrInput `pulumi:"netIpv4TcpTwReuse"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl pulumi.IntPtrInput `pulumi:"netIpv4TcpkeepaliveIntvl"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets pulumi.IntPtrInput `pulumi:"netNetfilterNfConntrackBuckets"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax pulumi.IntPtrInput `pulumi:"netNetfilterNfConntrackMax"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount pulumi.IntPtrInput `pulumi:"vmMaxMapCount"`
	// Sysctl setting vm.swappiness.
	VmSwappiness pulumi.IntPtrInput `pulumi:"vmSwappiness"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure pulumi.IntPtrInput `pulumi:"vmVfsCachePressure"`
}

func (SysctlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlConfig)(nil)).Elem()
}

func (i SysctlConfigArgs) ToSysctlConfigOutput() SysctlConfigOutput {
	return i.ToSysctlConfigOutputWithContext(context.Background())
}

func (i SysctlConfigArgs) ToSysctlConfigOutputWithContext(ctx context.Context) SysctlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlConfigOutput)
}

func (i SysctlConfigArgs) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return i.ToSysctlConfigPtrOutputWithContext(context.Background())
}

func (i SysctlConfigArgs) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlConfigOutput).ToSysctlConfigPtrOutputWithContext(ctx)
}

// SysctlConfigPtrInput is an input type that accepts SysctlConfigArgs, SysctlConfigPtr and SysctlConfigPtrOutput values.
// You can construct a concrete instance of `SysctlConfigPtrInput` via:
//
//	        SysctlConfigArgs{...}
//
//	or:
//
//	        nil
type SysctlConfigPtrInput interface {
	pulumi.Input

	ToSysctlConfigPtrOutput() SysctlConfigPtrOutput
	ToSysctlConfigPtrOutputWithContext(context.Context) SysctlConfigPtrOutput
}

type sysctlConfigPtrType SysctlConfigArgs

func SysctlConfigPtr(v *SysctlConfigArgs) SysctlConfigPtrInput {
	return (*sysctlConfigPtrType)(v)
}

func (*sysctlConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SysctlConfig)(nil)).Elem()
}

func (i *sysctlConfigPtrType) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return i.ToSysctlConfigPtrOutputWithContext(context.Background())
}

func (i *sysctlConfigPtrType) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SysctlConfigPtrOutput)
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigOutput struct{ *pulumi.OutputState }

func (SysctlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlConfig)(nil)).Elem()
}

func (o SysctlConfigOutput) ToSysctlConfigOutput() SysctlConfigOutput {
	return o
}

func (o SysctlConfigOutput) ToSysctlConfigOutputWithContext(ctx context.Context) SysctlConfigOutput {
	return o
}

func (o SysctlConfigOutput) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return o.ToSysctlConfigPtrOutputWithContext(context.Background())
}

func (o SysctlConfigOutput) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SysctlConfig) *SysctlConfig {
		return &v
	}).(SysctlConfigPtrOutput)
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsAioMaxNr }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsFileMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsInotifyMaxUserWatches }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.FsNrOpen }).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.KernelThreadsMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreNetdevMaxBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreOptmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreRmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreRmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreSomaxconn }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreWmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetCoreWmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *string { return v.NetIpv4IpLocalPortRange }).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4NeighDefaultGcThresh1 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4NeighDefaultGcThresh2 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4NeighDefaultGcThresh3 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpFinTimeout }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpKeepaliveProbes }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpKeepaliveTime }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpMaxSynBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpMaxTwBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *bool { return v.NetIpv4TcpTwReuse }).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetIpv4TcpkeepaliveIntvl }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetNetfilterNfConntrackBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.NetNetfilterNfConntrackMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.VmMaxMapCount }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.VmSwappiness }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfig) *int { return v.VmVfsCachePressure }).(pulumi.IntPtrOutput)
}

type SysctlConfigPtrOutput struct{ *pulumi.OutputState }

func (SysctlConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SysctlConfig)(nil)).Elem()
}

func (o SysctlConfigPtrOutput) ToSysctlConfigPtrOutput() SysctlConfigPtrOutput {
	return o
}

func (o SysctlConfigPtrOutput) ToSysctlConfigPtrOutputWithContext(ctx context.Context) SysctlConfigPtrOutput {
	return o
}

func (o SysctlConfigPtrOutput) Elem() SysctlConfigOutput {
	return o.ApplyT(func(v *SysctlConfig) SysctlConfig {
		if v != nil {
			return *v
		}
		var ret SysctlConfig
		return ret
	}).(SysctlConfigOutput)
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigPtrOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsAioMaxNr
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigPtrOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsFileMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigPtrOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsInotifyMaxUserWatches
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigPtrOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.FsNrOpen
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigPtrOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.KernelThreadsMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigPtrOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreNetdevMaxBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigPtrOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreOptmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigPtrOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigPtrOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigPtrOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreSomaxconn
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigPtrOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigPtrOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigPtrOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *string {
		if v == nil {
			return nil
		}
		return v.NetIpv4IpLocalPortRange
	}).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigPtrOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh1
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigPtrOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh2
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigPtrOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh3
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigPtrOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpFinTimeout
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigPtrOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveProbes
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigPtrOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveTime
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigPtrOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxSynBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigPtrOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxTwBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigPtrOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *bool {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpTwReuse
	}).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigPtrOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpkeepaliveIntvl
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigPtrOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigPtrOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigPtrOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.VmMaxMapCount
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigPtrOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.VmSwappiness
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigPtrOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfig) *int {
		if v == nil {
			return nil
		}
		return v.VmVfsCachePressure
	}).(pulumi.IntPtrOutput)
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigResponse struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int `pulumi:"fsAioMaxNr"`
	// Sysctl setting fs.file-max.
	FsFileMax *int `pulumi:"fsFileMax"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int `pulumi:"fsInotifyMaxUserWatches"`
	// Sysctl setting fs.nr_open.
	FsNrOpen *int `pulumi:"fsNrOpen"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax *int `pulumi:"kernelThreadsMax"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int `pulumi:"netCoreNetdevMaxBacklog"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int `pulumi:"netCoreOptmemMax"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int `pulumi:"netCoreRmemDefault"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int `pulumi:"netCoreRmemMax"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int `pulumi:"netCoreSomaxconn"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int `pulumi:"netCoreWmemDefault"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int `pulumi:"netCoreWmemMax"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `pulumi:"netIpv4IpLocalPortRange"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int `pulumi:"netIpv4NeighDefaultGcThresh1"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int `pulumi:"netIpv4NeighDefaultGcThresh2"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int `pulumi:"netIpv4NeighDefaultGcThresh3"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int `pulumi:"netIpv4TcpFinTimeout"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int `pulumi:"netIpv4TcpKeepaliveProbes"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int `pulumi:"netIpv4TcpKeepaliveTime"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int `pulumi:"netIpv4TcpMaxSynBacklog"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int `pulumi:"netIpv4TcpMaxTwBuckets"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `pulumi:"netIpv4TcpTwReuse"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int `pulumi:"netIpv4TcpkeepaliveIntvl"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int `pulumi:"netNetfilterNfConntrackBuckets"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int `pulumi:"netNetfilterNfConntrackMax"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount *int `pulumi:"vmMaxMapCount"`
	// Sysctl setting vm.swappiness.
	VmSwappiness *int `pulumi:"vmSwappiness"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int `pulumi:"vmVfsCachePressure"`
}

// Sysctl settings for Linux agent nodes.
type SysctlConfigResponseOutput struct{ *pulumi.OutputState }

func (SysctlConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SysctlConfigResponse)(nil)).Elem()
}

func (o SysctlConfigResponseOutput) ToSysctlConfigResponseOutput() SysctlConfigResponseOutput {
	return o
}

func (o SysctlConfigResponseOutput) ToSysctlConfigResponseOutputWithContext(ctx context.Context) SysctlConfigResponseOutput {
	return o
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigResponseOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsAioMaxNr }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigResponseOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsFileMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigResponseOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsInotifyMaxUserWatches }).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigResponseOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.FsNrOpen }).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigResponseOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.KernelThreadsMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigResponseOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreNetdevMaxBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigResponseOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreOptmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigResponseOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreRmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigResponseOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreRmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigResponseOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreSomaxconn }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigResponseOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreWmemDefault }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigResponseOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetCoreWmemMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigResponseOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *string { return v.NetIpv4IpLocalPortRange }).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigResponseOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4NeighDefaultGcThresh1 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigResponseOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4NeighDefaultGcThresh2 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigResponseOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4NeighDefaultGcThresh3 }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigResponseOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpFinTimeout }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigResponseOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpKeepaliveProbes }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigResponseOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpKeepaliveTime }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigResponseOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpMaxSynBacklog }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigResponseOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpMaxTwBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigResponseOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *bool { return v.NetIpv4TcpTwReuse }).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigResponseOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetIpv4TcpkeepaliveIntvl }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigResponseOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetNetfilterNfConntrackBuckets }).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigResponseOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.NetNetfilterNfConntrackMax }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigResponseOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.VmMaxMapCount }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigResponseOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.VmSwappiness }).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigResponseOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SysctlConfigResponse) *int { return v.VmVfsCachePressure }).(pulumi.IntPtrOutput)
}

type SysctlConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SysctlConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SysctlConfigResponse)(nil)).Elem()
}

func (o SysctlConfigResponsePtrOutput) ToSysctlConfigResponsePtrOutput() SysctlConfigResponsePtrOutput {
	return o
}

func (o SysctlConfigResponsePtrOutput) ToSysctlConfigResponsePtrOutputWithContext(ctx context.Context) SysctlConfigResponsePtrOutput {
	return o
}

func (o SysctlConfigResponsePtrOutput) Elem() SysctlConfigResponseOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) SysctlConfigResponse {
		if v != nil {
			return *v
		}
		var ret SysctlConfigResponse
		return ret
	}).(SysctlConfigResponseOutput)
}

// Sysctl setting fs.aio-max-nr.
func (o SysctlConfigResponsePtrOutput) FsAioMaxNr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsAioMaxNr
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.file-max.
func (o SysctlConfigResponsePtrOutput) FsFileMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsFileMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.inotify.max_user_watches.
func (o SysctlConfigResponsePtrOutput) FsInotifyMaxUserWatches() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsInotifyMaxUserWatches
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting fs.nr_open.
func (o SysctlConfigResponsePtrOutput) FsNrOpen() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.FsNrOpen
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting kernel.threads-max.
func (o SysctlConfigResponsePtrOutput) KernelThreadsMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.KernelThreadsMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.netdev_max_backlog.
func (o SysctlConfigResponsePtrOutput) NetCoreNetdevMaxBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreNetdevMaxBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.optmem_max.
func (o SysctlConfigResponsePtrOutput) NetCoreOptmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreOptmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_default.
func (o SysctlConfigResponsePtrOutput) NetCoreRmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.rmem_max.
func (o SysctlConfigResponsePtrOutput) NetCoreRmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreRmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.somaxconn.
func (o SysctlConfigResponsePtrOutput) NetCoreSomaxconn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreSomaxconn
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_default.
func (o SysctlConfigResponsePtrOutput) NetCoreWmemDefault() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemDefault
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.core.wmem_max.
func (o SysctlConfigResponsePtrOutput) NetCoreWmemMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetCoreWmemMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.ip_local_port_range.
func (o SysctlConfigResponsePtrOutput) NetIpv4IpLocalPortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.NetIpv4IpLocalPortRange
	}).(pulumi.StringPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
func (o SysctlConfigResponsePtrOutput) NetIpv4NeighDefaultGcThresh1() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh1
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
func (o SysctlConfigResponsePtrOutput) NetIpv4NeighDefaultGcThresh2() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh2
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
func (o SysctlConfigResponsePtrOutput) NetIpv4NeighDefaultGcThresh3() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4NeighDefaultGcThresh3
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_fin_timeout.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpFinTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpFinTimeout
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_probes.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpKeepaliveProbes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveProbes
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_time.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpKeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpKeepaliveTime
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_syn_backlog.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpMaxSynBacklog() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxSynBacklog
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_max_tw_buckets.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpMaxTwBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpMaxTwBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.ipv4.tcp_tw_reuse.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpTwReuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpTwReuse
	}).(pulumi.BoolPtrOutput)
}

// Sysctl setting net.ipv4.tcp_keepalive_intvl.
func (o SysctlConfigResponsePtrOutput) NetIpv4TcpkeepaliveIntvl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetIpv4TcpkeepaliveIntvl
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_buckets.
func (o SysctlConfigResponsePtrOutput) NetNetfilterNfConntrackBuckets() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackBuckets
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting net.netfilter.nf_conntrack_max.
func (o SysctlConfigResponsePtrOutput) NetNetfilterNfConntrackMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.NetNetfilterNfConntrackMax
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.max_map_count.
func (o SysctlConfigResponsePtrOutput) VmMaxMapCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.VmMaxMapCount
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.swappiness.
func (o SysctlConfigResponsePtrOutput) VmSwappiness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.VmSwappiness
	}).(pulumi.IntPtrOutput)
}

// Sysctl setting vm.vfs_cache_pressure.
func (o SysctlConfigResponsePtrOutput) VmVfsCachePressure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SysctlConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.VmVfsCachePressure
	}).(pulumi.IntPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Time in a week.
type TimeInWeek struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range.
	HourSlots []int `pulumi:"hourSlots"`
}

// TimeInWeekInput is an input type that accepts TimeInWeekArgs and TimeInWeekOutput values.
// You can construct a concrete instance of `TimeInWeekInput` via:
//
//	TimeInWeekArgs{...}
type TimeInWeekInput interface {
	pulumi.Input

	ToTimeInWeekOutput() TimeInWeekOutput
	ToTimeInWeekOutputWithContext(context.Context) TimeInWeekOutput
}

// Time in a week.
type TimeInWeekArgs struct {
	// The day of the week.
	Day pulumi.StringPtrInput `pulumi:"day"`
	// Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range.
	HourSlots pulumi.IntArrayInput `pulumi:"hourSlots"`
}

func (TimeInWeekArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeInWeek)(nil)).Elem()
}

func (i TimeInWeekArgs) ToTimeInWeekOutput() TimeInWeekOutput {
	return i.ToTimeInWeekOutputWithContext(context.Background())
}

func (i TimeInWeekArgs) ToTimeInWeekOutputWithContext(ctx context.Context) TimeInWeekOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeInWeekOutput)
}

// TimeInWeekArrayInput is an input type that accepts TimeInWeekArray and TimeInWeekArrayOutput values.
// You can construct a concrete instance of `TimeInWeekArrayInput` via:
//
//	TimeInWeekArray{ TimeInWeekArgs{...} }
type TimeInWeekArrayInput interface {
	pulumi.Input

	ToTimeInWeekArrayOutput() TimeInWeekArrayOutput
	ToTimeInWeekArrayOutputWithContext(context.Context) TimeInWeekArrayOutput
}

type TimeInWeekArray []TimeInWeekInput

func (TimeInWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeInWeek)(nil)).Elem()
}

func (i TimeInWeekArray) ToTimeInWeekArrayOutput() TimeInWeekArrayOutput {
	return i.ToTimeInWeekArrayOutputWithContext(context.Background())
}

func (i TimeInWeekArray) ToTimeInWeekArrayOutputWithContext(ctx context.Context) TimeInWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeInWeekArrayOutput)
}

// Time in a week.
type TimeInWeekOutput struct{ *pulumi.OutputState }

func (TimeInWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeInWeek)(nil)).Elem()
}

func (o TimeInWeekOutput) ToTimeInWeekOutput() TimeInWeekOutput {
	return o
}

func (o TimeInWeekOutput) ToTimeInWeekOutputWithContext(ctx context.Context) TimeInWeekOutput {
	return o
}

// The day of the week.
func (o TimeInWeekOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeInWeek) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range.
func (o TimeInWeekOutput) HourSlots() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TimeInWeek) []int { return v.HourSlots }).(pulumi.IntArrayOutput)
}

type TimeInWeekArrayOutput struct{ *pulumi.OutputState }

func (TimeInWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeInWeek)(nil)).Elem()
}

func (o TimeInWeekArrayOutput) ToTimeInWeekArrayOutput() TimeInWeekArrayOutput {
	return o
}

func (o TimeInWeekArrayOutput) ToTimeInWeekArrayOutputWithContext(ctx context.Context) TimeInWeekArrayOutput {
	return o
}

func (o TimeInWeekArrayOutput) Index(i pulumi.IntInput) TimeInWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeInWeek {
		return vs[0].([]TimeInWeek)[vs[1].(int)]
	}).(TimeInWeekOutput)
}

// Time in a week.
type TimeInWeekResponse struct {
	// The day of the week.
	Day *string `pulumi:"day"`
	// Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range.
	HourSlots []int `pulumi:"hourSlots"`
}

// Time in a week.
type TimeInWeekResponseOutput struct{ *pulumi.OutputState }

func (TimeInWeekResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeInWeekResponse)(nil)).Elem()
}

func (o TimeInWeekResponseOutput) ToTimeInWeekResponseOutput() TimeInWeekResponseOutput {
	return o
}

func (o TimeInWeekResponseOutput) ToTimeInWeekResponseOutputWithContext(ctx context.Context) TimeInWeekResponseOutput {
	return o
}

// The day of the week.
func (o TimeInWeekResponseOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeInWeekResponse) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// Each integer hour represents a time range beginning at 0m after the hour ending at the next hour (non-inclusive). 0 corresponds to 00:00 UTC, 23 corresponds to 23:00 UTC. Specifying [0, 1] means the 00:00 - 02:00 UTC time range.
func (o TimeInWeekResponseOutput) HourSlots() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TimeInWeekResponse) []int { return v.HourSlots }).(pulumi.IntArrayOutput)
}

type TimeInWeekResponseArrayOutput struct{ *pulumi.OutputState }

func (TimeInWeekResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeInWeekResponse)(nil)).Elem()
}

func (o TimeInWeekResponseArrayOutput) ToTimeInWeekResponseArrayOutput() TimeInWeekResponseArrayOutput {
	return o
}

func (o TimeInWeekResponseArrayOutput) ToTimeInWeekResponseArrayOutputWithContext(ctx context.Context) TimeInWeekResponseArrayOutput {
	return o
}

func (o TimeInWeekResponseArrayOutput) Index(i pulumi.IntInput) TimeInWeekResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeInWeekResponse {
		return vs[0].([]TimeInWeekResponse)[vs[1].(int)]
	}).(TimeInWeekResponseOutput)
}

// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpan struct {
	// The end of a time span
	End *string `pulumi:"end"`
	// The start of a time span
	Start *string `pulumi:"start"`
}

// TimeSpanInput is an input type that accepts TimeSpanArgs and TimeSpanOutput values.
// You can construct a concrete instance of `TimeSpanInput` via:
//
//	TimeSpanArgs{...}
type TimeSpanInput interface {
	pulumi.Input

	ToTimeSpanOutput() TimeSpanOutput
	ToTimeSpanOutputWithContext(context.Context) TimeSpanOutput
}

// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpanArgs struct {
	// The end of a time span
	End pulumi.StringPtrInput `pulumi:"end"`
	// The start of a time span
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (TimeSpanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSpan)(nil)).Elem()
}

func (i TimeSpanArgs) ToTimeSpanOutput() TimeSpanOutput {
	return i.ToTimeSpanOutputWithContext(context.Background())
}

func (i TimeSpanArgs) ToTimeSpanOutputWithContext(ctx context.Context) TimeSpanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSpanOutput)
}

// TimeSpanArrayInput is an input type that accepts TimeSpanArray and TimeSpanArrayOutput values.
// You can construct a concrete instance of `TimeSpanArrayInput` via:
//
//	TimeSpanArray{ TimeSpanArgs{...} }
type TimeSpanArrayInput interface {
	pulumi.Input

	ToTimeSpanArrayOutput() TimeSpanArrayOutput
	ToTimeSpanArrayOutputWithContext(context.Context) TimeSpanArrayOutput
}

type TimeSpanArray []TimeSpanInput

func (TimeSpanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeSpan)(nil)).Elem()
}

func (i TimeSpanArray) ToTimeSpanArrayOutput() TimeSpanArrayOutput {
	return i.ToTimeSpanArrayOutputWithContext(context.Background())
}

func (i TimeSpanArray) ToTimeSpanArrayOutputWithContext(ctx context.Context) TimeSpanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSpanArrayOutput)
}

// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpanOutput struct{ *pulumi.OutputState }

func (TimeSpanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSpan)(nil)).Elem()
}

func (o TimeSpanOutput) ToTimeSpanOutput() TimeSpanOutput {
	return o
}

func (o TimeSpanOutput) ToTimeSpanOutputWithContext(ctx context.Context) TimeSpanOutput {
	return o
}

// The end of a time span
func (o TimeSpanOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeSpan) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The start of a time span
func (o TimeSpanOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeSpan) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type TimeSpanArrayOutput struct{ *pulumi.OutputState }

func (TimeSpanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeSpan)(nil)).Elem()
}

func (o TimeSpanArrayOutput) ToTimeSpanArrayOutput() TimeSpanArrayOutput {
	return o
}

func (o TimeSpanArrayOutput) ToTimeSpanArrayOutputWithContext(ctx context.Context) TimeSpanArrayOutput {
	return o
}

func (o TimeSpanArrayOutput) Index(i pulumi.IntInput) TimeSpanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeSpan {
		return vs[0].([]TimeSpan)[vs[1].(int)]
	}).(TimeSpanOutput)
}

// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpanResponse struct {
	// The end of a time span
	End *string `pulumi:"end"`
	// The start of a time span
	Start *string `pulumi:"start"`
}

// For example, between 2021-05-25T13:00:00Z and 2021-05-25T14:00:00Z.
type TimeSpanResponseOutput struct{ *pulumi.OutputState }

func (TimeSpanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSpanResponse)(nil)).Elem()
}

func (o TimeSpanResponseOutput) ToTimeSpanResponseOutput() TimeSpanResponseOutput {
	return o
}

func (o TimeSpanResponseOutput) ToTimeSpanResponseOutputWithContext(ctx context.Context) TimeSpanResponseOutput {
	return o
}

// The end of a time span
func (o TimeSpanResponseOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeSpanResponse) *string { return v.End }).(pulumi.StringPtrOutput)
}

// The start of a time span
func (o TimeSpanResponseOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeSpanResponse) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type TimeSpanResponseArrayOutput struct{ *pulumi.OutputState }

func (TimeSpanResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimeSpanResponse)(nil)).Elem()
}

func (o TimeSpanResponseArrayOutput) ToTimeSpanResponseArrayOutput() TimeSpanResponseArrayOutput {
	return o
}

func (o TimeSpanResponseArrayOutput) ToTimeSpanResponseArrayOutputWithContext(ctx context.Context) TimeSpanResponseArrayOutput {
	return o
}

func (o TimeSpanResponseArrayOutput) Index(i pulumi.IntInput) TimeSpanResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimeSpanResponse {
		return vs[0].([]TimeSpanResponse)[vs[1].(int)]
	}).(TimeSpanResponseOutput)
}

// A group to be updated.
type UpdateGroup struct {
	// Name of the group.
	// It must match a group name of an existing fleet member.
	Name string `pulumi:"name"`
}

// UpdateGroupInput is an input type that accepts UpdateGroupArgs and UpdateGroupOutput values.
// You can construct a concrete instance of `UpdateGroupInput` via:
//
//	UpdateGroupArgs{...}
type UpdateGroupInput interface {
	pulumi.Input

	ToUpdateGroupOutput() UpdateGroupOutput
	ToUpdateGroupOutputWithContext(context.Context) UpdateGroupOutput
}

// A group to be updated.
type UpdateGroupArgs struct {
	// Name of the group.
	// It must match a group name of an existing fleet member.
	Name pulumi.StringInput `pulumi:"name"`
}

func (UpdateGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateGroup)(nil)).Elem()
}

func (i UpdateGroupArgs) ToUpdateGroupOutput() UpdateGroupOutput {
	return i.ToUpdateGroupOutputWithContext(context.Background())
}

func (i UpdateGroupArgs) ToUpdateGroupOutputWithContext(ctx context.Context) UpdateGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateGroupOutput)
}

// UpdateGroupArrayInput is an input type that accepts UpdateGroupArray and UpdateGroupArrayOutput values.
// You can construct a concrete instance of `UpdateGroupArrayInput` via:
//
//	UpdateGroupArray{ UpdateGroupArgs{...} }
type UpdateGroupArrayInput interface {
	pulumi.Input

	ToUpdateGroupArrayOutput() UpdateGroupArrayOutput
	ToUpdateGroupArrayOutputWithContext(context.Context) UpdateGroupArrayOutput
}

type UpdateGroupArray []UpdateGroupInput

func (UpdateGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateGroup)(nil)).Elem()
}

func (i UpdateGroupArray) ToUpdateGroupArrayOutput() UpdateGroupArrayOutput {
	return i.ToUpdateGroupArrayOutputWithContext(context.Background())
}

func (i UpdateGroupArray) ToUpdateGroupArrayOutputWithContext(ctx context.Context) UpdateGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateGroupArrayOutput)
}

// A group to be updated.
type UpdateGroupOutput struct{ *pulumi.OutputState }

func (UpdateGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateGroup)(nil)).Elem()
}

func (o UpdateGroupOutput) ToUpdateGroupOutput() UpdateGroupOutput {
	return o
}

func (o UpdateGroupOutput) ToUpdateGroupOutputWithContext(ctx context.Context) UpdateGroupOutput {
	return o
}

// Name of the group.
// It must match a group name of an existing fleet member.
func (o UpdateGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateGroup) string { return v.Name }).(pulumi.StringOutput)
}

type UpdateGroupArrayOutput struct{ *pulumi.OutputState }

func (UpdateGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateGroup)(nil)).Elem()
}

func (o UpdateGroupArrayOutput) ToUpdateGroupArrayOutput() UpdateGroupArrayOutput {
	return o
}

func (o UpdateGroupArrayOutput) ToUpdateGroupArrayOutputWithContext(ctx context.Context) UpdateGroupArrayOutput {
	return o
}

func (o UpdateGroupArrayOutput) Index(i pulumi.IntInput) UpdateGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpdateGroup {
		return vs[0].([]UpdateGroup)[vs[1].(int)]
	}).(UpdateGroupOutput)
}

// A group to be updated.
type UpdateGroupResponse struct {
	// Name of the group.
	// It must match a group name of an existing fleet member.
	Name string `pulumi:"name"`
}

// A group to be updated.
type UpdateGroupResponseOutput struct{ *pulumi.OutputState }

func (UpdateGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateGroupResponse)(nil)).Elem()
}

func (o UpdateGroupResponseOutput) ToUpdateGroupResponseOutput() UpdateGroupResponseOutput {
	return o
}

func (o UpdateGroupResponseOutput) ToUpdateGroupResponseOutputWithContext(ctx context.Context) UpdateGroupResponseOutput {
	return o
}

// Name of the group.
// It must match a group name of an existing fleet member.
func (o UpdateGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

type UpdateGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (UpdateGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateGroupResponse)(nil)).Elem()
}

func (o UpdateGroupResponseArrayOutput) ToUpdateGroupResponseArrayOutput() UpdateGroupResponseArrayOutput {
	return o
}

func (o UpdateGroupResponseArrayOutput) ToUpdateGroupResponseArrayOutputWithContext(ctx context.Context) UpdateGroupResponseArrayOutput {
	return o
}

func (o UpdateGroupResponseArrayOutput) Index(i pulumi.IntInput) UpdateGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpdateGroupResponse {
		return vs[0].([]UpdateGroupResponse)[vs[1].(int)]
	}).(UpdateGroupResponseOutput)
}

// The status of a UpdateGroup.
type UpdateGroupStatusResponse struct {
	// The list of member this UpdateGroup updates.
	Members []MemberUpdateStatusResponse `pulumi:"members"`
	// The name of the UpdateGroup.
	Name string `pulumi:"name"`
	// The status of the UpdateGroup.
	Status UpdateStatusResponse `pulumi:"status"`
}

// The status of a UpdateGroup.
type UpdateGroupStatusResponseOutput struct{ *pulumi.OutputState }

func (UpdateGroupStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateGroupStatusResponse)(nil)).Elem()
}

func (o UpdateGroupStatusResponseOutput) ToUpdateGroupStatusResponseOutput() UpdateGroupStatusResponseOutput {
	return o
}

func (o UpdateGroupStatusResponseOutput) ToUpdateGroupStatusResponseOutputWithContext(ctx context.Context) UpdateGroupStatusResponseOutput {
	return o
}

// The list of member this UpdateGroup updates.
func (o UpdateGroupStatusResponseOutput) Members() MemberUpdateStatusResponseArrayOutput {
	return o.ApplyT(func(v UpdateGroupStatusResponse) []MemberUpdateStatusResponse { return v.Members }).(MemberUpdateStatusResponseArrayOutput)
}

// The name of the UpdateGroup.
func (o UpdateGroupStatusResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateGroupStatusResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the UpdateGroup.
func (o UpdateGroupStatusResponseOutput) Status() UpdateStatusResponseOutput {
	return o.ApplyT(func(v UpdateGroupStatusResponse) UpdateStatusResponse { return v.Status }).(UpdateStatusResponseOutput)
}

type UpdateGroupStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (UpdateGroupStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateGroupStatusResponse)(nil)).Elem()
}

func (o UpdateGroupStatusResponseArrayOutput) ToUpdateGroupStatusResponseArrayOutput() UpdateGroupStatusResponseArrayOutput {
	return o
}

func (o UpdateGroupStatusResponseArrayOutput) ToUpdateGroupStatusResponseArrayOutputWithContext(ctx context.Context) UpdateGroupStatusResponseArrayOutput {
	return o
}

func (o UpdateGroupStatusResponseArrayOutput) Index(i pulumi.IntInput) UpdateGroupStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpdateGroupStatusResponse {
		return vs[0].([]UpdateGroupStatusResponse)[vs[1].(int)]
	}).(UpdateGroupStatusResponseOutput)
}

// The status of a UpdateRun.
type UpdateRunStatusResponse struct {
	// The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`.
	NodeImageSelection NodeImageSelectionStatusResponse `pulumi:"nodeImageSelection"`
	// The stages composing an update run. Stages are run sequentially withing an UpdateRun.
	Stages []UpdateStageStatusResponse `pulumi:"stages"`
	// The status of the UpdateRun.
	Status UpdateStatusResponse `pulumi:"status"`
}

// The status of a UpdateRun.
type UpdateRunStatusResponseOutput struct{ *pulumi.OutputState }

func (UpdateRunStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateRunStatusResponse)(nil)).Elem()
}

func (o UpdateRunStatusResponseOutput) ToUpdateRunStatusResponseOutput() UpdateRunStatusResponseOutput {
	return o
}

func (o UpdateRunStatusResponseOutput) ToUpdateRunStatusResponseOutputWithContext(ctx context.Context) UpdateRunStatusResponseOutput {
	return o
}

// The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`.
func (o UpdateRunStatusResponseOutput) NodeImageSelection() NodeImageSelectionStatusResponseOutput {
	return o.ApplyT(func(v UpdateRunStatusResponse) NodeImageSelectionStatusResponse { return v.NodeImageSelection }).(NodeImageSelectionStatusResponseOutput)
}

// The stages composing an update run. Stages are run sequentially withing an UpdateRun.
func (o UpdateRunStatusResponseOutput) Stages() UpdateStageStatusResponseArrayOutput {
	return o.ApplyT(func(v UpdateRunStatusResponse) []UpdateStageStatusResponse { return v.Stages }).(UpdateStageStatusResponseArrayOutput)
}

// The status of the UpdateRun.
func (o UpdateRunStatusResponseOutput) Status() UpdateStatusResponseOutput {
	return o.ApplyT(func(v UpdateRunStatusResponse) UpdateStatusResponse { return v.Status }).(UpdateStatusResponseOutput)
}

// Defines the update sequence of the clusters via stages and groups.
//
// Stages within a run are executed sequentially one after another.
// Groups within a stage are executed in parallel.
// Member clusters within a group are updated sequentially one after another.
//
// A valid strategy contains no duplicate groups within or across stages.
type UpdateRunStrategy struct {
	// The list of stages that compose this update run. Min size: 1.
	Stages []UpdateStage `pulumi:"stages"`
}

// UpdateRunStrategyInput is an input type that accepts UpdateRunStrategyArgs and UpdateRunStrategyOutput values.
// You can construct a concrete instance of `UpdateRunStrategyInput` via:
//
//	UpdateRunStrategyArgs{...}
type UpdateRunStrategyInput interface {
	pulumi.Input

	ToUpdateRunStrategyOutput() UpdateRunStrategyOutput
	ToUpdateRunStrategyOutputWithContext(context.Context) UpdateRunStrategyOutput
}

// Defines the update sequence of the clusters via stages and groups.
//
// Stages within a run are executed sequentially one after another.
// Groups within a stage are executed in parallel.
// Member clusters within a group are updated sequentially one after another.
//
// A valid strategy contains no duplicate groups within or across stages.
type UpdateRunStrategyArgs struct {
	// The list of stages that compose this update run. Min size: 1.
	Stages UpdateStageArrayInput `pulumi:"stages"`
}

func (UpdateRunStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateRunStrategy)(nil)).Elem()
}

func (i UpdateRunStrategyArgs) ToUpdateRunStrategyOutput() UpdateRunStrategyOutput {
	return i.ToUpdateRunStrategyOutputWithContext(context.Background())
}

func (i UpdateRunStrategyArgs) ToUpdateRunStrategyOutputWithContext(ctx context.Context) UpdateRunStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateRunStrategyOutput)
}

func (i UpdateRunStrategyArgs) ToUpdateRunStrategyPtrOutput() UpdateRunStrategyPtrOutput {
	return i.ToUpdateRunStrategyPtrOutputWithContext(context.Background())
}

func (i UpdateRunStrategyArgs) ToUpdateRunStrategyPtrOutputWithContext(ctx context.Context) UpdateRunStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateRunStrategyOutput).ToUpdateRunStrategyPtrOutputWithContext(ctx)
}

// UpdateRunStrategyPtrInput is an input type that accepts UpdateRunStrategyArgs, UpdateRunStrategyPtr and UpdateRunStrategyPtrOutput values.
// You can construct a concrete instance of `UpdateRunStrategyPtrInput` via:
//
//	        UpdateRunStrategyArgs{...}
//
//	or:
//
//	        nil
type UpdateRunStrategyPtrInput interface {
	pulumi.Input

	ToUpdateRunStrategyPtrOutput() UpdateRunStrategyPtrOutput
	ToUpdateRunStrategyPtrOutputWithContext(context.Context) UpdateRunStrategyPtrOutput
}

type updateRunStrategyPtrType UpdateRunStrategyArgs

func UpdateRunStrategyPtr(v *UpdateRunStrategyArgs) UpdateRunStrategyPtrInput {
	return (*updateRunStrategyPtrType)(v)
}

func (*updateRunStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateRunStrategy)(nil)).Elem()
}

func (i *updateRunStrategyPtrType) ToUpdateRunStrategyPtrOutput() UpdateRunStrategyPtrOutput {
	return i.ToUpdateRunStrategyPtrOutputWithContext(context.Background())
}

func (i *updateRunStrategyPtrType) ToUpdateRunStrategyPtrOutputWithContext(ctx context.Context) UpdateRunStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateRunStrategyPtrOutput)
}

// Defines the update sequence of the clusters via stages and groups.
//
// Stages within a run are executed sequentially one after another.
// Groups within a stage are executed in parallel.
// Member clusters within a group are updated sequentially one after another.
//
// A valid strategy contains no duplicate groups within or across stages.
type UpdateRunStrategyOutput struct{ *pulumi.OutputState }

func (UpdateRunStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateRunStrategy)(nil)).Elem()
}

func (o UpdateRunStrategyOutput) ToUpdateRunStrategyOutput() UpdateRunStrategyOutput {
	return o
}

func (o UpdateRunStrategyOutput) ToUpdateRunStrategyOutputWithContext(ctx context.Context) UpdateRunStrategyOutput {
	return o
}

func (o UpdateRunStrategyOutput) ToUpdateRunStrategyPtrOutput() UpdateRunStrategyPtrOutput {
	return o.ToUpdateRunStrategyPtrOutputWithContext(context.Background())
}

func (o UpdateRunStrategyOutput) ToUpdateRunStrategyPtrOutputWithContext(ctx context.Context) UpdateRunStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpdateRunStrategy) *UpdateRunStrategy {
		return &v
	}).(UpdateRunStrategyPtrOutput)
}

// The list of stages that compose this update run. Min size: 1.
func (o UpdateRunStrategyOutput) Stages() UpdateStageArrayOutput {
	return o.ApplyT(func(v UpdateRunStrategy) []UpdateStage { return v.Stages }).(UpdateStageArrayOutput)
}

type UpdateRunStrategyPtrOutput struct{ *pulumi.OutputState }

func (UpdateRunStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateRunStrategy)(nil)).Elem()
}

func (o UpdateRunStrategyPtrOutput) ToUpdateRunStrategyPtrOutput() UpdateRunStrategyPtrOutput {
	return o
}

func (o UpdateRunStrategyPtrOutput) ToUpdateRunStrategyPtrOutputWithContext(ctx context.Context) UpdateRunStrategyPtrOutput {
	return o
}

func (o UpdateRunStrategyPtrOutput) Elem() UpdateRunStrategyOutput {
	return o.ApplyT(func(v *UpdateRunStrategy) UpdateRunStrategy {
		if v != nil {
			return *v
		}
		var ret UpdateRunStrategy
		return ret
	}).(UpdateRunStrategyOutput)
}

// The list of stages that compose this update run. Min size: 1.
func (o UpdateRunStrategyPtrOutput) Stages() UpdateStageArrayOutput {
	return o.ApplyT(func(v *UpdateRunStrategy) []UpdateStage {
		if v == nil {
			return nil
		}
		return v.Stages
	}).(UpdateStageArrayOutput)
}

// Defines the update sequence of the clusters via stages and groups.
//
// Stages within a run are executed sequentially one after another.
// Groups within a stage are executed in parallel.
// Member clusters within a group are updated sequentially one after another.
//
// A valid strategy contains no duplicate groups within or across stages.
type UpdateRunStrategyResponse struct {
	// The list of stages that compose this update run. Min size: 1.
	Stages []UpdateStageResponse `pulumi:"stages"`
}

// Defines the update sequence of the clusters via stages and groups.
//
// Stages within a run are executed sequentially one after another.
// Groups within a stage are executed in parallel.
// Member clusters within a group are updated sequentially one after another.
//
// A valid strategy contains no duplicate groups within or across stages.
type UpdateRunStrategyResponseOutput struct{ *pulumi.OutputState }

func (UpdateRunStrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateRunStrategyResponse)(nil)).Elem()
}

func (o UpdateRunStrategyResponseOutput) ToUpdateRunStrategyResponseOutput() UpdateRunStrategyResponseOutput {
	return o
}

func (o UpdateRunStrategyResponseOutput) ToUpdateRunStrategyResponseOutputWithContext(ctx context.Context) UpdateRunStrategyResponseOutput {
	return o
}

// The list of stages that compose this update run. Min size: 1.
func (o UpdateRunStrategyResponseOutput) Stages() UpdateStageResponseArrayOutput {
	return o.ApplyT(func(v UpdateRunStrategyResponse) []UpdateStageResponse { return v.Stages }).(UpdateStageResponseArrayOutput)
}

type UpdateRunStrategyResponsePtrOutput struct{ *pulumi.OutputState }

func (UpdateRunStrategyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateRunStrategyResponse)(nil)).Elem()
}

func (o UpdateRunStrategyResponsePtrOutput) ToUpdateRunStrategyResponsePtrOutput() UpdateRunStrategyResponsePtrOutput {
	return o
}

func (o UpdateRunStrategyResponsePtrOutput) ToUpdateRunStrategyResponsePtrOutputWithContext(ctx context.Context) UpdateRunStrategyResponsePtrOutput {
	return o
}

func (o UpdateRunStrategyResponsePtrOutput) Elem() UpdateRunStrategyResponseOutput {
	return o.ApplyT(func(v *UpdateRunStrategyResponse) UpdateRunStrategyResponse {
		if v != nil {
			return *v
		}
		var ret UpdateRunStrategyResponse
		return ret
	}).(UpdateRunStrategyResponseOutput)
}

// The list of stages that compose this update run. Min size: 1.
func (o UpdateRunStrategyResponsePtrOutput) Stages() UpdateStageResponseArrayOutput {
	return o.ApplyT(func(v *UpdateRunStrategyResponse) []UpdateStageResponse {
		if v == nil {
			return nil
		}
		return v.Stages
	}).(UpdateStageResponseArrayOutput)
}

// Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.
type UpdateStage struct {
	// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
	AfterStageWaitInSeconds *int `pulumi:"afterStageWaitInSeconds"`
	// Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
	Groups []UpdateGroup `pulumi:"groups"`
	// The name of the stage. Must be unique within the UpdateRun.
	Name string `pulumi:"name"`
}

// UpdateStageInput is an input type that accepts UpdateStageArgs and UpdateStageOutput values.
// You can construct a concrete instance of `UpdateStageInput` via:
//
//	UpdateStageArgs{...}
type UpdateStageInput interface {
	pulumi.Input

	ToUpdateStageOutput() UpdateStageOutput
	ToUpdateStageOutputWithContext(context.Context) UpdateStageOutput
}

// Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.
type UpdateStageArgs struct {
	// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
	AfterStageWaitInSeconds pulumi.IntPtrInput `pulumi:"afterStageWaitInSeconds"`
	// Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
	Groups UpdateGroupArrayInput `pulumi:"groups"`
	// The name of the stage. Must be unique within the UpdateRun.
	Name pulumi.StringInput `pulumi:"name"`
}

func (UpdateStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateStage)(nil)).Elem()
}

func (i UpdateStageArgs) ToUpdateStageOutput() UpdateStageOutput {
	return i.ToUpdateStageOutputWithContext(context.Background())
}

func (i UpdateStageArgs) ToUpdateStageOutputWithContext(ctx context.Context) UpdateStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateStageOutput)
}

// UpdateStageArrayInput is an input type that accepts UpdateStageArray and UpdateStageArrayOutput values.
// You can construct a concrete instance of `UpdateStageArrayInput` via:
//
//	UpdateStageArray{ UpdateStageArgs{...} }
type UpdateStageArrayInput interface {
	pulumi.Input

	ToUpdateStageArrayOutput() UpdateStageArrayOutput
	ToUpdateStageArrayOutputWithContext(context.Context) UpdateStageArrayOutput
}

type UpdateStageArray []UpdateStageInput

func (UpdateStageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateStage)(nil)).Elem()
}

func (i UpdateStageArray) ToUpdateStageArrayOutput() UpdateStageArrayOutput {
	return i.ToUpdateStageArrayOutputWithContext(context.Background())
}

func (i UpdateStageArray) ToUpdateStageArrayOutputWithContext(ctx context.Context) UpdateStageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateStageArrayOutput)
}

// Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.
type UpdateStageOutput struct{ *pulumi.OutputState }

func (UpdateStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateStage)(nil)).Elem()
}

func (o UpdateStageOutput) ToUpdateStageOutput() UpdateStageOutput {
	return o
}

func (o UpdateStageOutput) ToUpdateStageOutputWithContext(ctx context.Context) UpdateStageOutput {
	return o
}

// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
func (o UpdateStageOutput) AfterStageWaitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpdateStage) *int { return v.AfterStageWaitInSeconds }).(pulumi.IntPtrOutput)
}

// Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
func (o UpdateStageOutput) Groups() UpdateGroupArrayOutput {
	return o.ApplyT(func(v UpdateStage) []UpdateGroup { return v.Groups }).(UpdateGroupArrayOutput)
}

// The name of the stage. Must be unique within the UpdateRun.
func (o UpdateStageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateStage) string { return v.Name }).(pulumi.StringOutput)
}

type UpdateStageArrayOutput struct{ *pulumi.OutputState }

func (UpdateStageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateStage)(nil)).Elem()
}

func (o UpdateStageArrayOutput) ToUpdateStageArrayOutput() UpdateStageArrayOutput {
	return o
}

func (o UpdateStageArrayOutput) ToUpdateStageArrayOutputWithContext(ctx context.Context) UpdateStageArrayOutput {
	return o
}

func (o UpdateStageArrayOutput) Index(i pulumi.IntInput) UpdateStageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpdateStage {
		return vs[0].([]UpdateStage)[vs[1].(int)]
	}).(UpdateStageOutput)
}

// Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.
type UpdateStageResponse struct {
	// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
	AfterStageWaitInSeconds *int `pulumi:"afterStageWaitInSeconds"`
	// Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
	Groups []UpdateGroupResponse `pulumi:"groups"`
	// The name of the stage. Must be unique within the UpdateRun.
	Name string `pulumi:"name"`
}

// Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage.
type UpdateStageResponseOutput struct{ *pulumi.OutputState }

func (UpdateStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateStageResponse)(nil)).Elem()
}

func (o UpdateStageResponseOutput) ToUpdateStageResponseOutput() UpdateStageResponseOutput {
	return o
}

func (o UpdateStageResponseOutput) ToUpdateStageResponseOutputWithContext(ctx context.Context) UpdateStageResponseOutput {
	return o
}

// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
func (o UpdateStageResponseOutput) AfterStageWaitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UpdateStageResponse) *int { return v.AfterStageWaitInSeconds }).(pulumi.IntPtrOutput)
}

// Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1.
func (o UpdateStageResponseOutput) Groups() UpdateGroupResponseArrayOutput {
	return o.ApplyT(func(v UpdateStageResponse) []UpdateGroupResponse { return v.Groups }).(UpdateGroupResponseArrayOutput)
}

// The name of the stage. Must be unique within the UpdateRun.
func (o UpdateStageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateStageResponse) string { return v.Name }).(pulumi.StringOutput)
}

type UpdateStageResponseArrayOutput struct{ *pulumi.OutputState }

func (UpdateStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateStageResponse)(nil)).Elem()
}

func (o UpdateStageResponseArrayOutput) ToUpdateStageResponseArrayOutput() UpdateStageResponseArrayOutput {
	return o
}

func (o UpdateStageResponseArrayOutput) ToUpdateStageResponseArrayOutputWithContext(ctx context.Context) UpdateStageResponseArrayOutput {
	return o
}

func (o UpdateStageResponseArrayOutput) Index(i pulumi.IntInput) UpdateStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpdateStageResponse {
		return vs[0].([]UpdateStageResponse)[vs[1].(int)]
	}).(UpdateStageResponseOutput)
}

// The status of a UpdateStage.
type UpdateStageStatusResponse struct {
	// The status of the wait period configured on the UpdateStage.
	AfterStageWaitStatus WaitStatusResponse `pulumi:"afterStageWaitStatus"`
	// The list of groups to be updated as part of this UpdateStage.
	Groups []UpdateGroupStatusResponse `pulumi:"groups"`
	// The name of the UpdateStage.
	Name string `pulumi:"name"`
	// The status of the UpdateStage.
	Status UpdateStatusResponse `pulumi:"status"`
}

// The status of a UpdateStage.
type UpdateStageStatusResponseOutput struct{ *pulumi.OutputState }

func (UpdateStageStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateStageStatusResponse)(nil)).Elem()
}

func (o UpdateStageStatusResponseOutput) ToUpdateStageStatusResponseOutput() UpdateStageStatusResponseOutput {
	return o
}

func (o UpdateStageStatusResponseOutput) ToUpdateStageStatusResponseOutputWithContext(ctx context.Context) UpdateStageStatusResponseOutput {
	return o
}

// The status of the wait period configured on the UpdateStage.
func (o UpdateStageStatusResponseOutput) AfterStageWaitStatus() WaitStatusResponseOutput {
	return o.ApplyT(func(v UpdateStageStatusResponse) WaitStatusResponse { return v.AfterStageWaitStatus }).(WaitStatusResponseOutput)
}

// The list of groups to be updated as part of this UpdateStage.
func (o UpdateStageStatusResponseOutput) Groups() UpdateGroupStatusResponseArrayOutput {
	return o.ApplyT(func(v UpdateStageStatusResponse) []UpdateGroupStatusResponse { return v.Groups }).(UpdateGroupStatusResponseArrayOutput)
}

// The name of the UpdateStage.
func (o UpdateStageStatusResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateStageStatusResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The status of the UpdateStage.
func (o UpdateStageStatusResponseOutput) Status() UpdateStatusResponseOutput {
	return o.ApplyT(func(v UpdateStageStatusResponse) UpdateStatusResponse { return v.Status }).(UpdateStatusResponseOutput)
}

type UpdateStageStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (UpdateStageStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpdateStageStatusResponse)(nil)).Elem()
}

func (o UpdateStageStatusResponseArrayOutput) ToUpdateStageStatusResponseArrayOutput() UpdateStageStatusResponseArrayOutput {
	return o
}

func (o UpdateStageStatusResponseArrayOutput) ToUpdateStageStatusResponseArrayOutputWithContext(ctx context.Context) UpdateStageStatusResponseArrayOutput {
	return o
}

func (o UpdateStageStatusResponseArrayOutput) Index(i pulumi.IntInput) UpdateStageStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpdateStageStatusResponse {
		return vs[0].([]UpdateStageStatusResponse)[vs[1].(int)]
	}).(UpdateStageStatusResponseOutput)
}

// The status for an operation or group of operations.
type UpdateStatusResponse struct {
	// The time the operation or group was completed.
	CompletedTime string `pulumi:"completedTime"`
	// The error details when a failure is encountered.
	Error ErrorDetailResponse `pulumi:"error"`
	// The time the operation or group was started.
	StartTime string `pulumi:"startTime"`
	// The State of the operation or group.
	State string `pulumi:"state"`
}

// The status for an operation or group of operations.
type UpdateStatusResponseOutput struct{ *pulumi.OutputState }

func (UpdateStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateStatusResponse)(nil)).Elem()
}

func (o UpdateStatusResponseOutput) ToUpdateStatusResponseOutput() UpdateStatusResponseOutput {
	return o
}

func (o UpdateStatusResponseOutput) ToUpdateStatusResponseOutputWithContext(ctx context.Context) UpdateStatusResponseOutput {
	return o
}

// The time the operation or group was completed.
func (o UpdateStatusResponseOutput) CompletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateStatusResponse) string { return v.CompletedTime }).(pulumi.StringOutput)
}

// The error details when a failure is encountered.
func (o UpdateStatusResponseOutput) Error() ErrorDetailResponseOutput {
	return o.ApplyT(func(v UpdateStatusResponse) ErrorDetailResponse { return v.Error }).(ErrorDetailResponseOutput)
}

// The time the operation or group was started.
func (o UpdateStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The State of the operation or group.
func (o UpdateStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UpdateStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Settings for overrides when upgrading a cluster.
type UpgradeOverrideSettings struct {
	// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
	ForceUpgrade *bool `pulumi:"forceUpgrade"`
	// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
	Until *string `pulumi:"until"`
}

// UpgradeOverrideSettingsInput is an input type that accepts UpgradeOverrideSettingsArgs and UpgradeOverrideSettingsOutput values.
// You can construct a concrete instance of `UpgradeOverrideSettingsInput` via:
//
//	UpgradeOverrideSettingsArgs{...}
type UpgradeOverrideSettingsInput interface {
	pulumi.Input

	ToUpgradeOverrideSettingsOutput() UpgradeOverrideSettingsOutput
	ToUpgradeOverrideSettingsOutputWithContext(context.Context) UpgradeOverrideSettingsOutput
}

// Settings for overrides when upgrading a cluster.
type UpgradeOverrideSettingsArgs struct {
	// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
	ForceUpgrade pulumi.BoolPtrInput `pulumi:"forceUpgrade"`
	// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
	Until pulumi.StringPtrInput `pulumi:"until"`
}

func (UpgradeOverrideSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOverrideSettings)(nil)).Elem()
}

func (i UpgradeOverrideSettingsArgs) ToUpgradeOverrideSettingsOutput() UpgradeOverrideSettingsOutput {
	return i.ToUpgradeOverrideSettingsOutputWithContext(context.Background())
}

func (i UpgradeOverrideSettingsArgs) ToUpgradeOverrideSettingsOutputWithContext(ctx context.Context) UpgradeOverrideSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOverrideSettingsOutput)
}

func (i UpgradeOverrideSettingsArgs) ToUpgradeOverrideSettingsPtrOutput() UpgradeOverrideSettingsPtrOutput {
	return i.ToUpgradeOverrideSettingsPtrOutputWithContext(context.Background())
}

func (i UpgradeOverrideSettingsArgs) ToUpgradeOverrideSettingsPtrOutputWithContext(ctx context.Context) UpgradeOverrideSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOverrideSettingsOutput).ToUpgradeOverrideSettingsPtrOutputWithContext(ctx)
}

// UpgradeOverrideSettingsPtrInput is an input type that accepts UpgradeOverrideSettingsArgs, UpgradeOverrideSettingsPtr and UpgradeOverrideSettingsPtrOutput values.
// You can construct a concrete instance of `UpgradeOverrideSettingsPtrInput` via:
//
//	        UpgradeOverrideSettingsArgs{...}
//
//	or:
//
//	        nil
type UpgradeOverrideSettingsPtrInput interface {
	pulumi.Input

	ToUpgradeOverrideSettingsPtrOutput() UpgradeOverrideSettingsPtrOutput
	ToUpgradeOverrideSettingsPtrOutputWithContext(context.Context) UpgradeOverrideSettingsPtrOutput
}

type upgradeOverrideSettingsPtrType UpgradeOverrideSettingsArgs

func UpgradeOverrideSettingsPtr(v *UpgradeOverrideSettingsArgs) UpgradeOverrideSettingsPtrInput {
	return (*upgradeOverrideSettingsPtrType)(v)
}

func (*upgradeOverrideSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOverrideSettings)(nil)).Elem()
}

func (i *upgradeOverrideSettingsPtrType) ToUpgradeOverrideSettingsPtrOutput() UpgradeOverrideSettingsPtrOutput {
	return i.ToUpgradeOverrideSettingsPtrOutputWithContext(context.Background())
}

func (i *upgradeOverrideSettingsPtrType) ToUpgradeOverrideSettingsPtrOutputWithContext(ctx context.Context) UpgradeOverrideSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeOverrideSettingsPtrOutput)
}

// Settings for overrides when upgrading a cluster.
type UpgradeOverrideSettingsOutput struct{ *pulumi.OutputState }

func (UpgradeOverrideSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOverrideSettings)(nil)).Elem()
}

func (o UpgradeOverrideSettingsOutput) ToUpgradeOverrideSettingsOutput() UpgradeOverrideSettingsOutput {
	return o
}

func (o UpgradeOverrideSettingsOutput) ToUpgradeOverrideSettingsOutputWithContext(ctx context.Context) UpgradeOverrideSettingsOutput {
	return o
}

func (o UpgradeOverrideSettingsOutput) ToUpgradeOverrideSettingsPtrOutput() UpgradeOverrideSettingsPtrOutput {
	return o.ToUpgradeOverrideSettingsPtrOutputWithContext(context.Background())
}

func (o UpgradeOverrideSettingsOutput) ToUpgradeOverrideSettingsPtrOutputWithContext(ctx context.Context) UpgradeOverrideSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpgradeOverrideSettings) *UpgradeOverrideSettings {
		return &v
	}).(UpgradeOverrideSettingsPtrOutput)
}

// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
func (o UpgradeOverrideSettingsOutput) ForceUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UpgradeOverrideSettings) *bool { return v.ForceUpgrade }).(pulumi.BoolPtrOutput)
}

// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
func (o UpgradeOverrideSettingsOutput) Until() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeOverrideSettings) *string { return v.Until }).(pulumi.StringPtrOutput)
}

type UpgradeOverrideSettingsPtrOutput struct{ *pulumi.OutputState }

func (UpgradeOverrideSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOverrideSettings)(nil)).Elem()
}

func (o UpgradeOverrideSettingsPtrOutput) ToUpgradeOverrideSettingsPtrOutput() UpgradeOverrideSettingsPtrOutput {
	return o
}

func (o UpgradeOverrideSettingsPtrOutput) ToUpgradeOverrideSettingsPtrOutputWithContext(ctx context.Context) UpgradeOverrideSettingsPtrOutput {
	return o
}

func (o UpgradeOverrideSettingsPtrOutput) Elem() UpgradeOverrideSettingsOutput {
	return o.ApplyT(func(v *UpgradeOverrideSettings) UpgradeOverrideSettings {
		if v != nil {
			return *v
		}
		var ret UpgradeOverrideSettings
		return ret
	}).(UpgradeOverrideSettingsOutput)
}

// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
func (o UpgradeOverrideSettingsPtrOutput) ForceUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UpgradeOverrideSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
func (o UpgradeOverrideSettingsPtrOutput) Until() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeOverrideSettings) *string {
		if v == nil {
			return nil
		}
		return v.Until
	}).(pulumi.StringPtrOutput)
}

// Settings for overrides when upgrading a cluster.
type UpgradeOverrideSettingsResponse struct {
	// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
	ForceUpgrade *bool `pulumi:"forceUpgrade"`
	// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
	Until *string `pulumi:"until"`
}

// Settings for overrides when upgrading a cluster.
type UpgradeOverrideSettingsResponseOutput struct{ *pulumi.OutputState }

func (UpgradeOverrideSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeOverrideSettingsResponse)(nil)).Elem()
}

func (o UpgradeOverrideSettingsResponseOutput) ToUpgradeOverrideSettingsResponseOutput() UpgradeOverrideSettingsResponseOutput {
	return o
}

func (o UpgradeOverrideSettingsResponseOutput) ToUpgradeOverrideSettingsResponseOutputWithContext(ctx context.Context) UpgradeOverrideSettingsResponseOutput {
	return o
}

// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
func (o UpgradeOverrideSettingsResponseOutput) ForceUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UpgradeOverrideSettingsResponse) *bool { return v.ForceUpgrade }).(pulumi.BoolPtrOutput)
}

// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
func (o UpgradeOverrideSettingsResponseOutput) Until() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeOverrideSettingsResponse) *string { return v.Until }).(pulumi.StringPtrOutput)
}

type UpgradeOverrideSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UpgradeOverrideSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeOverrideSettingsResponse)(nil)).Elem()
}

func (o UpgradeOverrideSettingsResponsePtrOutput) ToUpgradeOverrideSettingsResponsePtrOutput() UpgradeOverrideSettingsResponsePtrOutput {
	return o
}

func (o UpgradeOverrideSettingsResponsePtrOutput) ToUpgradeOverrideSettingsResponsePtrOutputWithContext(ctx context.Context) UpgradeOverrideSettingsResponsePtrOutput {
	return o
}

func (o UpgradeOverrideSettingsResponsePtrOutput) Elem() UpgradeOverrideSettingsResponseOutput {
	return o.ApplyT(func(v *UpgradeOverrideSettingsResponse) UpgradeOverrideSettingsResponse {
		if v != nil {
			return *v
		}
		var ret UpgradeOverrideSettingsResponse
		return ret
	}).(UpgradeOverrideSettingsResponseOutput)
}

// Whether to force upgrade the cluster. Note that this option instructs upgrade operation to bypass upgrade protections such as checking for deprecated API usage. Enable this option only with caution.
func (o UpgradeOverrideSettingsResponsePtrOutput) ForceUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UpgradeOverrideSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpgrade
	}).(pulumi.BoolPtrOutput)
}

// Until when the overrides are effective. Note that this only matches the start time of an upgrade, and the effectiveness won't change once an upgrade starts even if the `until` expires as upgrade proceeds. This field is not set by default. It must be set for the overrides to take effect.
func (o UpgradeOverrideSettingsResponsePtrOutput) Until() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpgradeOverrideSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Until
	}).(pulumi.StringPtrOutput)
}

// Details about a user assigned identity.
type UserAssignedIdentity struct {
	// The client ID of the user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The object ID of the user assigned identity.
	ObjectId *string `pulumi:"objectId"`
	// The resource ID of the user assigned identity.
	ResourceId *string `pulumi:"resourceId"`
}

// UserAssignedIdentityInput is an input type that accepts UserAssignedIdentityArgs and UserAssignedIdentityOutput values.
// You can construct a concrete instance of `UserAssignedIdentityInput` via:
//
//	UserAssignedIdentityArgs{...}
type UserAssignedIdentityInput interface {
	pulumi.Input

	ToUserAssignedIdentityOutput() UserAssignedIdentityOutput
	ToUserAssignedIdentityOutputWithContext(context.Context) UserAssignedIdentityOutput
}

// Details about a user assigned identity.
type UserAssignedIdentityArgs struct {
	// The client ID of the user assigned identity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The object ID of the user assigned identity.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The resource ID of the user assigned identity.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (UserAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return i.ToUserAssignedIdentityOutputWithContext(context.Background())
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityOutput)
}

// UserAssignedIdentityMapInput is an input type that accepts UserAssignedIdentityMap and UserAssignedIdentityMapOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapInput` via:
//
//	UserAssignedIdentityMap{ "key": UserAssignedIdentityArgs{...} }
type UserAssignedIdentityMapInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput
	ToUserAssignedIdentityMapOutputWithContext(context.Context) UserAssignedIdentityMapOutput
}

type UserAssignedIdentityMap map[string]UserAssignedIdentityInput

func (UserAssignedIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return i.ToUserAssignedIdentityMapOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapOutput)
}

// Details about a user assigned identity.
type UserAssignedIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return o
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return o
}

// The client ID of the user assigned identity.
func (o UserAssignedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The object ID of the user assigned identity.
func (o UserAssignedIdentityOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentity) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The resource ID of the user assigned identity.
func (o UserAssignedIdentityOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentity) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentity {
		return vs[0].(map[string]UserAssignedIdentity)[vs[1].(string)]
	}).(UserAssignedIdentityOutput)
}

// Details about a user assigned identity.
type UserAssignedIdentityResponse struct {
	// The client ID of the user assigned identity.
	ClientId *string `pulumi:"clientId"`
	// The object ID of the user assigned identity.
	ObjectId *string `pulumi:"objectId"`
	// The principal ID of the assigned identity.
	PrincipalId *string `pulumi:"principalId"`
	// The resource ID of the user assigned identity.
	ResourceId *string `pulumi:"resourceId"`
}

// Details about a user assigned identity.
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the user assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The object ID of the user assigned identity.
func (o UserAssignedIdentityResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The resource ID of the user assigned identity.
func (o UserAssignedIdentityResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponsePtrOutput) ToUserAssignedIdentityResponsePtrOutput() UserAssignedIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityResponsePtrOutput) ToUserAssignedIdentityResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityResponsePtrOutput) Elem() UserAssignedIdentityResponseOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) UserAssignedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentityResponse
		return ret
	}).(UserAssignedIdentityResponseOutput)
}

// The client ID of the user assigned identity.
func (o UserAssignedIdentityResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The object ID of the user assigned identity.
func (o UserAssignedIdentityResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the user assigned identity.
func (o UserAssignedIdentityResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// The status of the wait duration.
type WaitStatusResponse struct {
	// The status of the wait duration.
	Status UpdateStatusResponse `pulumi:"status"`
	// The wait duration configured in seconds.
	WaitDurationInSeconds int `pulumi:"waitDurationInSeconds"`
}

// The status of the wait duration.
type WaitStatusResponseOutput struct{ *pulumi.OutputState }

func (WaitStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WaitStatusResponse)(nil)).Elem()
}

func (o WaitStatusResponseOutput) ToWaitStatusResponseOutput() WaitStatusResponseOutput {
	return o
}

func (o WaitStatusResponseOutput) ToWaitStatusResponseOutputWithContext(ctx context.Context) WaitStatusResponseOutput {
	return o
}

// The status of the wait duration.
func (o WaitStatusResponseOutput) Status() UpdateStatusResponseOutput {
	return o.ApplyT(func(v WaitStatusResponse) UpdateStatusResponse { return v.Status }).(UpdateStatusResponseOutput)
}

// The wait duration configured in seconds.
func (o WaitStatusResponseOutput) WaitDurationInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v WaitStatusResponse) int { return v.WaitDurationInSeconds }).(pulumi.IntOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklySchedule struct {
	// Specifies on which day of the week the maintenance occurs.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Specifies the number of weeks between each set of occurrences.
	IntervalWeeks int `pulumi:"intervalWeeks"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//	WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklyScheduleArgs struct {
	// Specifies on which day of the week the maintenance occurs.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// Specifies the number of weeks between each set of occurrences.
	IntervalWeeks pulumi.IntInput `pulumi:"intervalWeeks"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput).ToWeeklySchedulePtrOutputWithContext(ctx)
}

// WeeklySchedulePtrInput is an input type that accepts WeeklyScheduleArgs, WeeklySchedulePtr and WeeklySchedulePtrOutput values.
// You can construct a concrete instance of `WeeklySchedulePtrInput` via:
//
//	        WeeklyScheduleArgs{...}
//
//	or:
//
//	        nil
type WeeklySchedulePtrInput interface {
	pulumi.Input

	ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput
	ToWeeklySchedulePtrOutputWithContext(context.Context) WeeklySchedulePtrOutput
}

type weeklySchedulePtrType WeeklyScheduleArgs

func WeeklySchedulePtr(v *WeeklyScheduleArgs) WeeklySchedulePtrInput {
	return (*weeklySchedulePtrType)(v)
}

func (*weeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklySchedulePtrOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklySchedule) *WeeklySchedule {
		return &v
	}).(WeeklySchedulePtrOutput)
}

// Specifies on which day of the week the maintenance occurs.
func (o WeeklyScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklySchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Specifies the number of weeks between each set of occurrences.
func (o WeeklyScheduleOutput) IntervalWeeks() pulumi.IntOutput {
	return o.ApplyT(func(v WeeklySchedule) int { return v.IntervalWeeks }).(pulumi.IntOutput)
}

type WeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) Elem() WeeklyScheduleOutput {
	return o.ApplyT(func(v *WeeklySchedule) WeeklySchedule {
		if v != nil {
			return *v
		}
		var ret WeeklySchedule
		return ret
	}).(WeeklyScheduleOutput)
}

// Specifies on which day of the week the maintenance occurs.
func (o WeeklySchedulePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of weeks between each set of occurrences.
func (o WeeklySchedulePtrOutput) IntervalWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalWeeks
	}).(pulumi.IntPtrOutput)
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklyScheduleResponse struct {
	// Specifies on which day of the week the maintenance occurs.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Specifies the number of weeks between each set of occurrences.
	IntervalWeeks int `pulumi:"intervalWeeks"`
}

// For schedules like: 'recur every Monday' or 'recur every 3 weeks on Wednesday'.
type WeeklyScheduleResponseOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutputWithContext(ctx context.Context) WeeklyScheduleResponseOutput {
	return o
}

// Specifies on which day of the week the maintenance occurs.
func (o WeeklyScheduleResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Specifies the number of weeks between each set of occurrences.
func (o WeeklyScheduleResponseOutput) IntervalWeeks() pulumi.IntOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) int { return v.IntervalWeeks }).(pulumi.IntOutput)
}

type WeeklyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponsePtrOutput) ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput {
	return o
}

func (o WeeklyScheduleResponsePtrOutput) ToWeeklyScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyScheduleResponsePtrOutput {
	return o
}

func (o WeeklyScheduleResponsePtrOutput) Elem() WeeklyScheduleResponseOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) WeeklyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret WeeklyScheduleResponse
		return ret
	}).(WeeklyScheduleResponseOutput)
}

// Specifies on which day of the week the maintenance occurs.
func (o WeeklyScheduleResponsePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of weeks between each set of occurrences.
func (o WeeklyScheduleResponsePtrOutput) IntervalWeeks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IntervalWeeks
	}).(pulumi.IntPtrOutput)
}

// Windows gMSA Profile in the managed cluster.
type WindowsGmsaProfile struct {
	// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
	DnsServer *string `pulumi:"dnsServer"`
	// Specifies whether to enable Windows gMSA in the managed cluster.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
	RootDomainName *string `pulumi:"rootDomainName"`
}

// WindowsGmsaProfileInput is an input type that accepts WindowsGmsaProfileArgs and WindowsGmsaProfileOutput values.
// You can construct a concrete instance of `WindowsGmsaProfileInput` via:
//
//	WindowsGmsaProfileArgs{...}
type WindowsGmsaProfileInput interface {
	pulumi.Input

	ToWindowsGmsaProfileOutput() WindowsGmsaProfileOutput
	ToWindowsGmsaProfileOutputWithContext(context.Context) WindowsGmsaProfileOutput
}

// Windows gMSA Profile in the managed cluster.
type WindowsGmsaProfileArgs struct {
	// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
	DnsServer pulumi.StringPtrInput `pulumi:"dnsServer"`
	// Specifies whether to enable Windows gMSA in the managed cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
	RootDomainName pulumi.StringPtrInput `pulumi:"rootDomainName"`
}

func (WindowsGmsaProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsGmsaProfile)(nil)).Elem()
}

func (i WindowsGmsaProfileArgs) ToWindowsGmsaProfileOutput() WindowsGmsaProfileOutput {
	return i.ToWindowsGmsaProfileOutputWithContext(context.Background())
}

func (i WindowsGmsaProfileArgs) ToWindowsGmsaProfileOutputWithContext(ctx context.Context) WindowsGmsaProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsGmsaProfileOutput)
}

func (i WindowsGmsaProfileArgs) ToWindowsGmsaProfilePtrOutput() WindowsGmsaProfilePtrOutput {
	return i.ToWindowsGmsaProfilePtrOutputWithContext(context.Background())
}

func (i WindowsGmsaProfileArgs) ToWindowsGmsaProfilePtrOutputWithContext(ctx context.Context) WindowsGmsaProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsGmsaProfileOutput).ToWindowsGmsaProfilePtrOutputWithContext(ctx)
}

// WindowsGmsaProfilePtrInput is an input type that accepts WindowsGmsaProfileArgs, WindowsGmsaProfilePtr and WindowsGmsaProfilePtrOutput values.
// You can construct a concrete instance of `WindowsGmsaProfilePtrInput` via:
//
//	        WindowsGmsaProfileArgs{...}
//
//	or:
//
//	        nil
type WindowsGmsaProfilePtrInput interface {
	pulumi.Input

	ToWindowsGmsaProfilePtrOutput() WindowsGmsaProfilePtrOutput
	ToWindowsGmsaProfilePtrOutputWithContext(context.Context) WindowsGmsaProfilePtrOutput
}

type windowsGmsaProfilePtrType WindowsGmsaProfileArgs

func WindowsGmsaProfilePtr(v *WindowsGmsaProfileArgs) WindowsGmsaProfilePtrInput {
	return (*windowsGmsaProfilePtrType)(v)
}

func (*windowsGmsaProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsGmsaProfile)(nil)).Elem()
}

func (i *windowsGmsaProfilePtrType) ToWindowsGmsaProfilePtrOutput() WindowsGmsaProfilePtrOutput {
	return i.ToWindowsGmsaProfilePtrOutputWithContext(context.Background())
}

func (i *windowsGmsaProfilePtrType) ToWindowsGmsaProfilePtrOutputWithContext(ctx context.Context) WindowsGmsaProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsGmsaProfilePtrOutput)
}

// Windows gMSA Profile in the managed cluster.
type WindowsGmsaProfileOutput struct{ *pulumi.OutputState }

func (WindowsGmsaProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsGmsaProfile)(nil)).Elem()
}

func (o WindowsGmsaProfileOutput) ToWindowsGmsaProfileOutput() WindowsGmsaProfileOutput {
	return o
}

func (o WindowsGmsaProfileOutput) ToWindowsGmsaProfileOutputWithContext(ctx context.Context) WindowsGmsaProfileOutput {
	return o
}

func (o WindowsGmsaProfileOutput) ToWindowsGmsaProfilePtrOutput() WindowsGmsaProfilePtrOutput {
	return o.ToWindowsGmsaProfilePtrOutputWithContext(context.Background())
}

func (o WindowsGmsaProfileOutput) ToWindowsGmsaProfilePtrOutputWithContext(ctx context.Context) WindowsGmsaProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsGmsaProfile) *WindowsGmsaProfile {
		return &v
	}).(WindowsGmsaProfilePtrOutput)
}

// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfileOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsGmsaProfile) *string { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable Windows gMSA in the managed cluster.
func (o WindowsGmsaProfileOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsGmsaProfile) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfileOutput) RootDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsGmsaProfile) *string { return v.RootDomainName }).(pulumi.StringPtrOutput)
}

type WindowsGmsaProfilePtrOutput struct{ *pulumi.OutputState }

func (WindowsGmsaProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsGmsaProfile)(nil)).Elem()
}

func (o WindowsGmsaProfilePtrOutput) ToWindowsGmsaProfilePtrOutput() WindowsGmsaProfilePtrOutput {
	return o
}

func (o WindowsGmsaProfilePtrOutput) ToWindowsGmsaProfilePtrOutputWithContext(ctx context.Context) WindowsGmsaProfilePtrOutput {
	return o
}

func (o WindowsGmsaProfilePtrOutput) Elem() WindowsGmsaProfileOutput {
	return o.ApplyT(func(v *WindowsGmsaProfile) WindowsGmsaProfile {
		if v != nil {
			return *v
		}
		var ret WindowsGmsaProfile
		return ret
	}).(WindowsGmsaProfileOutput)
}

// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfilePtrOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsGmsaProfile) *string {
		if v == nil {
			return nil
		}
		return v.DnsServer
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable Windows gMSA in the managed cluster.
func (o WindowsGmsaProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsGmsaProfile) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfilePtrOutput) RootDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsGmsaProfile) *string {
		if v == nil {
			return nil
		}
		return v.RootDomainName
	}).(pulumi.StringPtrOutput)
}

// Windows gMSA Profile in the managed cluster.
type WindowsGmsaProfileResponse struct {
	// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
	DnsServer *string `pulumi:"dnsServer"`
	// Specifies whether to enable Windows gMSA in the managed cluster.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
	RootDomainName *string `pulumi:"rootDomainName"`
}

// Windows gMSA Profile in the managed cluster.
type WindowsGmsaProfileResponseOutput struct{ *pulumi.OutputState }

func (WindowsGmsaProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsGmsaProfileResponse)(nil)).Elem()
}

func (o WindowsGmsaProfileResponseOutput) ToWindowsGmsaProfileResponseOutput() WindowsGmsaProfileResponseOutput {
	return o
}

func (o WindowsGmsaProfileResponseOutput) ToWindowsGmsaProfileResponseOutputWithContext(ctx context.Context) WindowsGmsaProfileResponseOutput {
	return o
}

// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfileResponseOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsGmsaProfileResponse) *string { return v.DnsServer }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable Windows gMSA in the managed cluster.
func (o WindowsGmsaProfileResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WindowsGmsaProfileResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfileResponseOutput) RootDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsGmsaProfileResponse) *string { return v.RootDomainName }).(pulumi.StringPtrOutput)
}

type WindowsGmsaProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsGmsaProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsGmsaProfileResponse)(nil)).Elem()
}

func (o WindowsGmsaProfileResponsePtrOutput) ToWindowsGmsaProfileResponsePtrOutput() WindowsGmsaProfileResponsePtrOutput {
	return o
}

func (o WindowsGmsaProfileResponsePtrOutput) ToWindowsGmsaProfileResponsePtrOutputWithContext(ctx context.Context) WindowsGmsaProfileResponsePtrOutput {
	return o
}

func (o WindowsGmsaProfileResponsePtrOutput) Elem() WindowsGmsaProfileResponseOutput {
	return o.ApplyT(func(v *WindowsGmsaProfileResponse) WindowsGmsaProfileResponse {
		if v != nil {
			return *v
		}
		var ret WindowsGmsaProfileResponse
		return ret
	}).(WindowsGmsaProfileResponseOutput)
}

// Specifies the DNS server for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfileResponsePtrOutput) DnsServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsGmsaProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsServer
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable Windows gMSA in the managed cluster.
func (o WindowsGmsaProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WindowsGmsaProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the root domain name for Windows gMSA. <br><br> Set it to empty if you have configured the DNS server in the vnet which is used to create the managed cluster.
func (o WindowsGmsaProfileResponsePtrOutput) RootDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsGmsaProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RootDomainName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(APIServerAccessProfileOutput{})
	pulumi.RegisterOutputType(APIServerAccessProfilePtrOutput{})
	pulumi.RegisterOutputType(APIServerAccessProfileResponseOutput{})
	pulumi.RegisterOutputType(APIServerAccessProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AbsoluteMonthlyScheduleOutput{})
	pulumi.RegisterOutputType(AbsoluteMonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(AbsoluteMonthlyScheduleResponseOutput{})
	pulumi.RegisterOutputType(AbsoluteMonthlyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingPtrOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingObservabilityOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingObservabilityPtrOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingObservabilityResponseOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingObservabilityResponsePtrOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingResponseOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingResponsePtrOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingSecurityOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingSecurityPtrOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingSecurityResponseOutput{})
	pulumi.RegisterOutputType(AdvancedNetworkingSecurityResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolNetworkProfileOutput{})
	pulumi.RegisterOutputType(AgentPoolNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(AgentPoolNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolSecurityProfileOutput{})
	pulumi.RegisterOutputType(AgentPoolSecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolSecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(AgentPoolSecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsResponseOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolWindowsProfileOutput{})
	pulumi.RegisterOutputType(AgentPoolWindowsProfilePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolWindowsProfileResponseOutput{})
	pulumi.RegisterOutputType(AgentPoolWindowsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentProfileOutput{})
	pulumi.RegisterOutputType(AgentProfilePtrOutput{})
	pulumi.RegisterOutputType(AgentProfileResponseOutput{})
	pulumi.RegisterOutputType(AgentProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeNodeImageSelectionOutput{})
	pulumi.RegisterOutputType(AutoUpgradeNodeImageSelectionPtrOutput{})
	pulumi.RegisterOutputType(AutoUpgradeNodeImageSelectionResponseOutput{})
	pulumi.RegisterOutputType(AutoUpgradeNodeImageSelectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultKmsOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultKmsPtrOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultKmsResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultKmsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeSettingsOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeSettingsResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceLinuxProfileOutput{})
	pulumi.RegisterOutputType(ContainerServiceLinuxProfilePtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceLinuxProfileResponseOutput{})
	pulumi.RegisterOutputType(ContainerServiceLinuxProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceNetworkProfileOutput{})
	pulumi.RegisterOutputType(ContainerServiceNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(ContainerServiceNetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshConfigurationOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshPublicKeyOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(ContainerServiceSshPublicKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(CreationDataOutput{})
	pulumi.RegisterOutputType(CreationDataPtrOutput{})
	pulumi.RegisterOutputType(CreationDataResponseOutput{})
	pulumi.RegisterOutputType(CreationDataResponsePtrOutput{})
	pulumi.RegisterOutputType(CredentialResultResponseOutput{})
	pulumi.RegisterOutputType(CredentialResultResponseArrayOutput{})
	pulumi.RegisterOutputType(DailyScheduleOutput{})
	pulumi.RegisterOutputType(DailySchedulePtrOutput{})
	pulumi.RegisterOutputType(DailyScheduleResponseOutput{})
	pulumi.RegisterOutputType(DailyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(DateSpanOutput{})
	pulumi.RegisterOutputType(DateSpanArrayOutput{})
	pulumi.RegisterOutputType(DateSpanResponseOutput{})
	pulumi.RegisterOutputType(DateSpanResponseArrayOutput{})
	pulumi.RegisterOutputType(DelegatedResourceOutput{})
	pulumi.RegisterOutputType(DelegatedResourceMapOutput{})
	pulumi.RegisterOutputType(DelegatedResourceResponseOutput{})
	pulumi.RegisterOutputType(DelegatedResourceResponseMapOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(FleetCredentialResultResponseOutput{})
	pulumi.RegisterOutputType(FleetCredentialResultResponseArrayOutput{})
	pulumi.RegisterOutputType(FleetHubProfileOutput{})
	pulumi.RegisterOutputType(FleetHubProfilePtrOutput{})
	pulumi.RegisterOutputType(FleetHubProfileResponseOutput{})
	pulumi.RegisterOutputType(FleetHubProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(IPTagOutput{})
	pulumi.RegisterOutputType(IPTagArrayOutput{})
	pulumi.RegisterOutputType(IPTagResponseOutput{})
	pulumi.RegisterOutputType(IPTagResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityBindingManagedIdentityProfileOutput{})
	pulumi.RegisterOutputType(IdentityBindingManagedIdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(IdentityBindingManagedIdentityProfileResponseOutput{})
	pulumi.RegisterOutputType(IdentityBindingOidcIssuerProfileResponseOutput{})
	pulumi.RegisterOutputType(IdentityBindingPropertiesOutput{})
	pulumi.RegisterOutputType(IdentityBindingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdentityBindingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IstioCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(IstioCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(IstioCertificateAuthorityResponseOutput{})
	pulumi.RegisterOutputType(IstioCertificateAuthorityResponsePtrOutput{})
	pulumi.RegisterOutputType(IstioComponentsOutput{})
	pulumi.RegisterOutputType(IstioComponentsPtrOutput{})
	pulumi.RegisterOutputType(IstioComponentsResponseOutput{})
	pulumi.RegisterOutputType(IstioComponentsResponsePtrOutput{})
	pulumi.RegisterOutputType(IstioEgressGatewayOutput{})
	pulumi.RegisterOutputType(IstioEgressGatewayArrayOutput{})
	pulumi.RegisterOutputType(IstioEgressGatewayResponseOutput{})
	pulumi.RegisterOutputType(IstioEgressGatewayResponseArrayOutput{})
	pulumi.RegisterOutputType(IstioIngressGatewayOutput{})
	pulumi.RegisterOutputType(IstioIngressGatewayArrayOutput{})
	pulumi.RegisterOutputType(IstioIngressGatewayResponseOutput{})
	pulumi.RegisterOutputType(IstioIngressGatewayResponseArrayOutput{})
	pulumi.RegisterOutputType(IstioPluginCertificateAuthorityOutput{})
	pulumi.RegisterOutputType(IstioPluginCertificateAuthorityPtrOutput{})
	pulumi.RegisterOutputType(IstioPluginCertificateAuthorityResponseOutput{})
	pulumi.RegisterOutputType(IstioPluginCertificateAuthorityResponsePtrOutput{})
	pulumi.RegisterOutputType(IstioServiceMeshOutput{})
	pulumi.RegisterOutputType(IstioServiceMeshPtrOutput{})
	pulumi.RegisterOutputType(IstioServiceMeshResponseOutput{})
	pulumi.RegisterOutputType(IstioServiceMeshResponsePtrOutput{})
	pulumi.RegisterOutputType(KubeletConfigOutput{})
	pulumi.RegisterOutputType(KubeletConfigPtrOutput{})
	pulumi.RegisterOutputType(KubeletConfigResponseOutput{})
	pulumi.RegisterOutputType(KubeletConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelSelectorOutput{})
	pulumi.RegisterOutputType(LabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(LabelSelectorRequirementOutput{})
	pulumi.RegisterOutputType(LabelSelectorRequirementArrayOutput{})
	pulumi.RegisterOutputType(LabelSelectorRequirementResponseOutput{})
	pulumi.RegisterOutputType(LabelSelectorRequirementResponseArrayOutput{})
	pulumi.RegisterOutputType(LabelSelectorResponseOutput{})
	pulumi.RegisterOutputType(LabelSelectorResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigPtrOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigResponseOutput{})
	pulumi.RegisterOutputType(LinuxOSConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAADProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterAADProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAADProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAADProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAPIServerAccessProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterAPIServerAccessProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAPIServerAccessProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAPIServerAccessProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAddonProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterAddonProfileMapOutput{})
	pulumi.RegisterOutputType(ManagedClusterAddonProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAddonProfileResponseMapOutput{})
	pulumi.RegisterOutputType(ManagedClusterAddonProfileResponseIdentityOutput{})
	pulumi.RegisterOutputType(ManagedClusterAgentPoolProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterAgentPoolProfileArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterAgentPoolProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAgentPoolProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterAutoUpgradeProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterAutoUpgradeProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAutoUpgradeProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAutoUpgradeProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileKubeStateMetricsOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileKubeStateMetricsPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileKubeStateMetricsResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileKubeStateMetricsResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileMetricsOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileMetricsPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileMetricsResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileMetricsResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterAzureMonitorProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterCostAnalysisOutput{})
	pulumi.RegisterOutputType(ManagedClusterCostAnalysisPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterCostAnalysisResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterCostAnalysisResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterHTTPProxyConfigOutput{})
	pulumi.RegisterOutputType(ManagedClusterHTTPProxyConfigPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterHTTPProxyConfigResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterHTTPProxyConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterIdentityOutput{})
	pulumi.RegisterOutputType(ManagedClusterIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterIdentityResponseUserAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(ManagedClusterIdentityResponseUserAssignedIdentitiesMapOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileWebAppRoutingOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileWebAppRoutingPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileWebAppRoutingResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterIngressProfileWebAppRoutingResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileManagedOutboundIPsOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileManagedOutboundIPsPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileOutboundIPPrefixesOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileOutboundIPPrefixesPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileOutboundIPsOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileOutboundIPsPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseManagedOutboundIPsPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseOutboundIPPrefixesPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseOutboundIPsOutput{})
	pulumi.RegisterOutputType(ManagedClusterLoadBalancerProfileResponseOutboundIPsPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterManagedOutboundIPProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterManagedOutboundIPProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterManagedOutboundIPProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterManagedOutboundIPProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterMetricsProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterMetricsProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterMetricsProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterMetricsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterNATGatewayProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterNATGatewayProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterNATGatewayProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterNATGatewayProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterNodeResourceGroupProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterNodeResourceGroupProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterNodeResourceGroupProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterNodeResourceGroupProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterOIDCIssuerProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterOIDCIssuerProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterOIDCIssuerProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterOIDCIssuerProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityExceptionOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityExceptionArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityExceptionResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityExceptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProvisioningErrorBodyResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProvisioningErrorBodyResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProvisioningErrorBodyResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProvisioningErrorResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityProvisioningErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedClusterPodIdentityResponseProvisioningInfoOutput{})
	pulumi.RegisterOutputType(ManagedClusterPropertiesAutoScalerProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterPropertiesAutoScalerProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterPropertiesForSnapshotResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterPropertiesResponseAutoScalerProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterPropertiesResponseAutoScalerProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterSKUResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderSecurityMonitoringOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderSecurityMonitoringPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderSecurityMonitoringResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileDefenderSecurityMonitoringResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileImageCleanerOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileImageCleanerPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileImageCleanerResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileImageCleanerResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileWorkloadIdentityOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileWorkloadIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileWorkloadIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterSecurityProfileWorkloadIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterServicePrincipalProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterServicePrincipalProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterServicePrincipalProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterServicePrincipalProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileBlobCSIDriverOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileBlobCSIDriverPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileBlobCSIDriverResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileBlobCSIDriverResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileDiskCSIDriverOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileDiskCSIDriverPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileDiskCSIDriverResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileDiskCSIDriverResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileFileCSIDriverOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileFileCSIDriverPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileFileCSIDriverResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileFileCSIDriverResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileSnapshotControllerOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileSnapshotControllerPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileSnapshotControllerResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterStorageProfileSnapshotControllerResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpdateOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpdateResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpgradeSpecOutput{})
	pulumi.RegisterOutputType(ManagedClusterUpgradeSpecResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterWindowsProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterWindowsProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWindowsProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterWindowsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileKedaOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileKedaPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileKedaResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileKedaResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerPtrOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponseOutput{})
	pulumi.RegisterOutputType(ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscalerResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MemberUpdateStatusResponseOutput{})
	pulumi.RegisterOutputType(MemberUpdateStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesPtrOutput{})
	pulumi.RegisterOutputType(NamespacePropertiesResponseOutput{})
	pulumi.RegisterOutputType(NetworkPoliciesOutput{})
	pulumi.RegisterOutputType(NetworkPoliciesPtrOutput{})
	pulumi.RegisterOutputType(NetworkPoliciesResponseOutput{})
	pulumi.RegisterOutputType(NetworkPoliciesResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileForSnapshotResponseOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionPtrOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionResponseOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeImageSelectionStatusResponseOutput{})
	pulumi.RegisterOutputType(NodeImageVersionResponseOutput{})
	pulumi.RegisterOutputType(NodeImageVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(PortRangeOutput{})
	pulumi.RegisterOutputType(PortRangeArrayOutput{})
	pulumi.RegisterOutputType(PortRangeResponseOutput{})
	pulumi.RegisterOutputType(PortRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(PowerStateOutput{})
	pulumi.RegisterOutputType(PowerStatePtrOutput{})
	pulumi.RegisterOutputType(PowerStateResponseOutput{})
	pulumi.RegisterOutputType(PowerStateResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutput{})
	pulumi.RegisterOutputType(PrivateEndpointPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkResourceOutput{})
	pulumi.RegisterOutputType(PrivateLinkResourceArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RelativeMonthlyScheduleOutput{})
	pulumi.RegisterOutputType(RelativeMonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(RelativeMonthlyScheduleResponseOutput{})
	pulumi.RegisterOutputType(RelativeMonthlyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceQuotaOutput{})
	pulumi.RegisterOutputType(ResourceQuotaPtrOutput{})
	pulumi.RegisterOutputType(ResourceQuotaResponseOutput{})
	pulumi.RegisterOutputType(ResourceQuotaResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceReferenceOutput{})
	pulumi.RegisterOutputType(ResourceReferenceArrayOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponseOutput{})
	pulumi.RegisterOutputType(ResourceReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(SchedulePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshProfileOutput{})
	pulumi.RegisterOutputType(ServiceMeshProfilePtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshProfileResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SysctlConfigOutput{})
	pulumi.RegisterOutputType(SysctlConfigPtrOutput{})
	pulumi.RegisterOutputType(SysctlConfigResponseOutput{})
	pulumi.RegisterOutputType(SysctlConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TimeInWeekOutput{})
	pulumi.RegisterOutputType(TimeInWeekArrayOutput{})
	pulumi.RegisterOutputType(TimeInWeekResponseOutput{})
	pulumi.RegisterOutputType(TimeInWeekResponseArrayOutput{})
	pulumi.RegisterOutputType(TimeSpanOutput{})
	pulumi.RegisterOutputType(TimeSpanArrayOutput{})
	pulumi.RegisterOutputType(TimeSpanResponseOutput{})
	pulumi.RegisterOutputType(TimeSpanResponseArrayOutput{})
	pulumi.RegisterOutputType(UpdateGroupOutput{})
	pulumi.RegisterOutputType(UpdateGroupArrayOutput{})
	pulumi.RegisterOutputType(UpdateGroupResponseOutput{})
	pulumi.RegisterOutputType(UpdateGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(UpdateGroupStatusResponseOutput{})
	pulumi.RegisterOutputType(UpdateGroupStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(UpdateRunStatusResponseOutput{})
	pulumi.RegisterOutputType(UpdateRunStrategyOutput{})
	pulumi.RegisterOutputType(UpdateRunStrategyPtrOutput{})
	pulumi.RegisterOutputType(UpdateRunStrategyResponseOutput{})
	pulumi.RegisterOutputType(UpdateRunStrategyResponsePtrOutput{})
	pulumi.RegisterOutputType(UpdateStageOutput{})
	pulumi.RegisterOutputType(UpdateStageArrayOutput{})
	pulumi.RegisterOutputType(UpdateStageResponseOutput{})
	pulumi.RegisterOutputType(UpdateStageResponseArrayOutput{})
	pulumi.RegisterOutputType(UpdateStageStatusResponseOutput{})
	pulumi.RegisterOutputType(UpdateStageStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(UpdateStatusResponseOutput{})
	pulumi.RegisterOutputType(UpgradeOverrideSettingsOutput{})
	pulumi.RegisterOutputType(UpgradeOverrideSettingsPtrOutput{})
	pulumi.RegisterOutputType(UpgradeOverrideSettingsResponseOutput{})
	pulumi.RegisterOutputType(UpgradeOverrideSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(WaitStatusResponseOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponseOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(WindowsGmsaProfileOutput{})
	pulumi.RegisterOutputType(WindowsGmsaProfilePtrOutput{})
	pulumi.RegisterOutputType(WindowsGmsaProfileResponseOutput{})
	pulumi.RegisterOutputType(WindowsGmsaProfileResponsePtrOutput{})
}
