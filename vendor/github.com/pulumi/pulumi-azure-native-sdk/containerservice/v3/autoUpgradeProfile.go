// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AutoUpgradeProfile resource.
//
// Uses Azure REST API version 2024-05-02-preview. In version 2.x of the Azure Native provider, it used API version 2024-05-02-preview.
//
// Other available API versions: 2025-03-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native containerservice [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type AutoUpgradeProfile struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Configures how auto-upgrade will be run.
	Channel pulumi.StringOutput `pulumi:"channel"`
	// If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
	// If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
	// This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
	// By default, this is set to False.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
	ETag pulumi.StringOutput `pulumi:"eTag"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The node image upgrade to be applied to the target clusters in auto upgrade.
	NodeImageSelection AutoUpgradeNodeImageSelectionResponsePtrOutput `pulumi:"nodeImageSelection"`
	// The provisioning state of the AutoUpgradeProfile resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
	UpdateStrategyId pulumi.StringPtrOutput `pulumi:"updateStrategyId"`
}

// NewAutoUpgradeProfile registers a new resource with the given unique name, arguments, and options.
func NewAutoUpgradeProfile(ctx *pulumi.Context,
	name string, args *AutoUpgradeProfileArgs, opts ...pulumi.ResourceOption) (*AutoUpgradeProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.FleetName == nil {
		return nil, errors.New("invalid value for required argument 'FleetName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerservice/v20240502preview:AutoUpgradeProfile"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250301:AutoUpgradeProfile"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AutoUpgradeProfile
	err := ctx.RegisterResource("azure-native:containerservice:AutoUpgradeProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoUpgradeProfile gets an existing AutoUpgradeProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoUpgradeProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoUpgradeProfileState, opts ...pulumi.ResourceOption) (*AutoUpgradeProfile, error) {
	var resource AutoUpgradeProfile
	err := ctx.ReadResource("azure-native:containerservice:AutoUpgradeProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoUpgradeProfile resources.
type autoUpgradeProfileState struct {
}

type AutoUpgradeProfileState struct {
}

func (AutoUpgradeProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoUpgradeProfileState)(nil)).Elem()
}

type autoUpgradeProfileArgs struct {
	// The name of the AutoUpgradeProfile resource.
	AutoUpgradeProfileName *string `pulumi:"autoUpgradeProfileName"`
	// Configures how auto-upgrade will be run.
	Channel string `pulumi:"channel"`
	// If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
	// If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
	// This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
	// By default, this is set to False.
	Disabled *bool `pulumi:"disabled"`
	// The name of the Fleet resource.
	FleetName string `pulumi:"fleetName"`
	// The node image upgrade to be applied to the target clusters in auto upgrade.
	NodeImageSelection *AutoUpgradeNodeImageSelection `pulumi:"nodeImageSelection"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
	UpdateStrategyId *string `pulumi:"updateStrategyId"`
}

// The set of arguments for constructing a AutoUpgradeProfile resource.
type AutoUpgradeProfileArgs struct {
	// The name of the AutoUpgradeProfile resource.
	AutoUpgradeProfileName pulumi.StringPtrInput
	// Configures how auto-upgrade will be run.
	Channel pulumi.StringInput
	// If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
	// If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
	// This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
	// By default, this is set to False.
	Disabled pulumi.BoolPtrInput
	// The name of the Fleet resource.
	FleetName pulumi.StringInput
	// The node image upgrade to be applied to the target clusters in auto upgrade.
	NodeImageSelection AutoUpgradeNodeImageSelectionPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
	UpdateStrategyId pulumi.StringPtrInput
}

func (AutoUpgradeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoUpgradeProfileArgs)(nil)).Elem()
}

type AutoUpgradeProfileInput interface {
	pulumi.Input

	ToAutoUpgradeProfileOutput() AutoUpgradeProfileOutput
	ToAutoUpgradeProfileOutputWithContext(ctx context.Context) AutoUpgradeProfileOutput
}

func (*AutoUpgradeProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeProfile)(nil)).Elem()
}

func (i *AutoUpgradeProfile) ToAutoUpgradeProfileOutput() AutoUpgradeProfileOutput {
	return i.ToAutoUpgradeProfileOutputWithContext(context.Background())
}

func (i *AutoUpgradeProfile) ToAutoUpgradeProfileOutputWithContext(ctx context.Context) AutoUpgradeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoUpgradeProfileOutput)
}

type AutoUpgradeProfileOutput struct{ *pulumi.OutputState }

func (AutoUpgradeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoUpgradeProfile)(nil)).Elem()
}

func (o AutoUpgradeProfileOutput) ToAutoUpgradeProfileOutput() AutoUpgradeProfileOutput {
	return o
}

func (o AutoUpgradeProfileOutput) ToAutoUpgradeProfileOutputWithContext(ctx context.Context) AutoUpgradeProfileOutput {
	return o
}

// The Azure API version of the resource.
func (o AutoUpgradeProfileOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Configures how auto-upgrade will be run.
func (o AutoUpgradeProfileOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringOutput { return v.Channel }).(pulumi.StringOutput)
}

// If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
// If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
// This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
// By default, this is set to False.
func (o AutoUpgradeProfileOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
func (o AutoUpgradeProfileOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringOutput { return v.ETag }).(pulumi.StringOutput)
}

// The name of the resource
func (o AutoUpgradeProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The node image upgrade to be applied to the target clusters in auto upgrade.
func (o AutoUpgradeProfileOutput) NodeImageSelection() AutoUpgradeNodeImageSelectionResponsePtrOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) AutoUpgradeNodeImageSelectionResponsePtrOutput {
		return v.NodeImageSelection
	}).(AutoUpgradeNodeImageSelectionResponsePtrOutput)
}

// The provisioning state of the AutoUpgradeProfile resource.
func (o AutoUpgradeProfileOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o AutoUpgradeProfileOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o AutoUpgradeProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet.
func (o AutoUpgradeProfileOutput) UpdateStrategyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoUpgradeProfile) pulumi.StringPtrOutput { return v.UpdateStrategyId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AutoUpgradeProfileOutput{})
}
