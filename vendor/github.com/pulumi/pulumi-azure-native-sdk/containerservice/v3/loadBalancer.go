// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The configurations regarding multiple standard load balancers. If not supplied, single load balancer mode will be used. Multiple standard load balancers mode will be used if at lease one configuration is supplied. There has to be a configuration named `kubernetes`.
//
// Uses Azure REST API version 2024-10-02-preview. In version 2.x of the Azure Native provider, it used API version 2024-03-02-preview.
//
// Other available API versions: 2024-03-02-preview, 2024-04-02-preview, 2024-05-02-preview, 2024-06-02-preview, 2024-07-02-preview, 2024-09-02-preview, 2025-01-02-preview, 2025-02-02-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native containerservice [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set to false manually, both of the external and the internal load balancer will not be selected for services unless they explicitly target it.
	AllowServicePlacement pulumi.BoolPtrOutput `pulumi:"allowServicePlacement"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Nodes that match this selector will be possible members of this load balancer.
	NodeSelector LabelSelectorResponsePtrOutput `pulumi:"nodeSelector"`
	// Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at least one node and minCount>=1 for autoscaling operations. An agent pool can only be the primary pool for a single load balancer.
	PrimaryAgentPoolName pulumi.StringOutput `pulumi:"primaryAgentPoolName"`
	// The current provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Only services that must match this selector can be placed on this load balancer.
	ServiceLabelSelector LabelSelectorResponsePtrOutput `pulumi:"serviceLabelSelector"`
	// Services created in namespaces that match the selector can be placed on this load balancer.
	ServiceNamespaceSelector LabelSelectorResponsePtrOutput `pulumi:"serviceNamespaceSelector"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.PrimaryAgentPoolName == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryAgentPoolName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerservice/v20240302preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20240402preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20240502preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20240602preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20240702preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20240902preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20241002preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250102preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:containerservice/v20250202preview:LoadBalancer"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("azure-native:containerservice:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("azure-native:containerservice:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
}

type LoadBalancerState struct {
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set to false manually, both of the external and the internal load balancer will not be selected for services unless they explicitly target it.
	AllowServicePlacement *bool `pulumi:"allowServicePlacement"`
	// The name of the load balancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// Name of the public load balancer. There will be an internal load balancer created if needed, and the name will be `<name>-internal`. The internal lb shares the same configurations as the external one. The internal lbs are not needed to be included in LoadBalancer list. There must be a name of kubernetes in the list.
	Name string `pulumi:"name"`
	// Nodes that match this selector will be possible members of this load balancer.
	NodeSelector *LabelSelector `pulumi:"nodeSelector"`
	// Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at least one node and minCount>=1 for autoscaling operations. An agent pool can only be the primary pool for a single load balancer.
	PrimaryAgentPoolName string `pulumi:"primaryAgentPoolName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the managed cluster resource.
	ResourceName string `pulumi:"resourceName"`
	// Only services that must match this selector can be placed on this load balancer.
	ServiceLabelSelector *LabelSelector `pulumi:"serviceLabelSelector"`
	// Services created in namespaces that match the selector can be placed on this load balancer.
	ServiceNamespaceSelector *LabelSelector `pulumi:"serviceNamespaceSelector"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set to false manually, both of the external and the internal load balancer will not be selected for services unless they explicitly target it.
	AllowServicePlacement pulumi.BoolPtrInput
	// The name of the load balancer.
	LoadBalancerName pulumi.StringPtrInput
	// Name of the public load balancer. There will be an internal load balancer created if needed, and the name will be `<name>-internal`. The internal lb shares the same configurations as the external one. The internal lbs are not needed to be included in LoadBalancer list. There must be a name of kubernetes in the list.
	Name pulumi.StringInput
	// Nodes that match this selector will be possible members of this load balancer.
	NodeSelector LabelSelectorPtrInput
	// Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at least one node and minCount>=1 for autoscaling operations. An agent pool can only be the primary pool for a single load balancer.
	PrimaryAgentPoolName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the managed cluster resource.
	ResourceName pulumi.StringInput
	// Only services that must match this selector can be placed on this load balancer.
	ServiceLabelSelector LabelSelectorPtrInput
	// Services created in namespaces that match the selector can be placed on this load balancer.
	ServiceNamespaceSelector LabelSelectorPtrInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// Whether to automatically place services on the load balancer. If not supplied, the default value is true. If set to false manually, both of the external and the internal load balancer will not be selected for services unless they explicitly target it.
func (o LoadBalancerOutput) AllowServicePlacement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.AllowServicePlacement }).(pulumi.BoolPtrOutput)
}

// The Azure API version of the resource.
func (o LoadBalancerOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Nodes that match this selector will be possible members of this load balancer.
func (o LoadBalancerOutput) NodeSelector() LabelSelectorResponsePtrOutput {
	return o.ApplyT(func(v *LoadBalancer) LabelSelectorResponsePtrOutput { return v.NodeSelector }).(LabelSelectorResponsePtrOutput)
}

// Required field. A string value that must specify the ID of an existing agent pool. All nodes in the given pool will always be added to this load balancer. This agent pool must have at least one node and minCount>=1 for autoscaling operations. An agent pool can only be the primary pool for a single load balancer.
func (o LoadBalancerOutput) PrimaryAgentPoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.PrimaryAgentPoolName }).(pulumi.StringOutput)
}

// The current provisioning state.
func (o LoadBalancerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Only services that must match this selector can be placed on this load balancer.
func (o LoadBalancerOutput) ServiceLabelSelector() LabelSelectorResponsePtrOutput {
	return o.ApplyT(func(v *LoadBalancer) LabelSelectorResponsePtrOutput { return v.ServiceLabelSelector }).(LabelSelectorResponsePtrOutput)
}

// Services created in namespaces that match the selector can be placed on this load balancer.
func (o LoadBalancerOutput) ServiceNamespaceSelector() LabelSelectorResponsePtrOutput {
	return o.ApplyT(func(v *LoadBalancer) LabelSelectorResponsePtrOutput { return v.ServiceNamespaceSelector }).(LabelSelectorResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LoadBalancerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *LoadBalancer) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LoadBalancerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerOutput{})
}
