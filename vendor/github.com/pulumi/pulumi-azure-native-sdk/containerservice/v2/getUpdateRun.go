// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a UpdateRun
// Azure REST API version: 2023-03-15-preview.
//
// Other available API versions: 2023-06-15-preview, 2023-08-15-preview, 2023-10-15, 2024-02-02-preview, 2024-04-01.
func LookupUpdateRun(ctx *pulumi.Context, args *LookupUpdateRunArgs, opts ...pulumi.InvokeOption) (*LookupUpdateRunResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupUpdateRunResult
	err := ctx.Invoke("azure-native:containerservice:getUpdateRun", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUpdateRunArgs struct {
	// The name of the Fleet resource.
	FleetName string `pulumi:"fleetName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the UpdateRun resource.
	UpdateRunName string `pulumi:"updateRunName"`
}

// A multi-stage process to perform update operations across members of a Fleet.
type LookupUpdateRunResult struct {
	// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
	ETag string `pulumi:"eTag"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started.
	ManagedClusterUpdate ManagedClusterUpdateResponse `pulumi:"managedClusterUpdate"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state of the UpdateRun resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The status of the UpdateRun.
	Status UpdateRunStatusResponse `pulumi:"status"`
	// The strategy defines the order in which the clusters will be updated.
	// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
	// The strategy of the UpdateRun can be modified until the run is started.
	Strategy *UpdateRunStrategyResponse `pulumi:"strategy"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupUpdateRunOutput(ctx *pulumi.Context, args LookupUpdateRunOutputArgs, opts ...pulumi.InvokeOption) LookupUpdateRunResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUpdateRunResult, error) {
			args := v.(LookupUpdateRunArgs)
			r, err := LookupUpdateRun(ctx, &args, opts...)
			var s LookupUpdateRunResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUpdateRunResultOutput)
}

type LookupUpdateRunOutputArgs struct {
	// The name of the Fleet resource.
	FleetName pulumi.StringInput `pulumi:"fleetName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the UpdateRun resource.
	UpdateRunName pulumi.StringInput `pulumi:"updateRunName"`
}

func (LookupUpdateRunOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUpdateRunArgs)(nil)).Elem()
}

// A multi-stage process to perform update operations across members of a Fleet.
type LookupUpdateRunResultOutput struct{ *pulumi.OutputState }

func (LookupUpdateRunResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUpdateRunResult)(nil)).Elem()
}

func (o LookupUpdateRunResultOutput) ToLookupUpdateRunResultOutput() LookupUpdateRunResultOutput {
	return o
}

func (o LookupUpdateRunResultOutput) ToLookupUpdateRunResultOutputWithContext(ctx context.Context) LookupUpdateRunResultOutput {
	return o
}

// If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
func (o LookupUpdateRunResultOutput) ETag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) string { return v.ETag }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupUpdateRunResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) string { return v.Id }).(pulumi.StringOutput)
}

// The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started.
func (o LookupUpdateRunResultOutput) ManagedClusterUpdate() ManagedClusterUpdateResponseOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) ManagedClusterUpdateResponse { return v.ManagedClusterUpdate }).(ManagedClusterUpdateResponseOutput)
}

// The name of the resource
func (o LookupUpdateRunResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the UpdateRun resource.
func (o LookupUpdateRunResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The status of the UpdateRun.
func (o LookupUpdateRunResultOutput) Status() UpdateRunStatusResponseOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) UpdateRunStatusResponse { return v.Status }).(UpdateRunStatusResponseOutput)
}

// The strategy defines the order in which the clusters will be updated.
// If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
// The strategy of the UpdateRun can be modified until the run is started.
func (o LookupUpdateRunResultOutput) Strategy() UpdateRunStrategyResponsePtrOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) *UpdateRunStrategyResponse { return v.Strategy }).(UpdateRunStrategyResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupUpdateRunResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupUpdateRunResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpdateRunResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUpdateRunResultOutput{})
}
