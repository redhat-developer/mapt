// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package resources

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Deployment stack object.
//
// Uses Azure REST API version 2024-03-01. In version 2.x of the Azure Native provider, it used API version 2022-08-01-preview.
//
// Other available API versions: 2022-08-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native resources [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type DeploymentStackAtSubscription struct {
	pulumi.CustomResourceState

	// Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
	ActionOnUnmanage ActionOnUnmanageResponseOutput `pulumi:"actionOnUnmanage"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The correlation id of the last Deployment stack upsert or delete operation. It is in GUID format and is used for tracing.
	CorrelationId pulumi.StringOutput `pulumi:"correlationId"`
	// The debug setting of the deployment.
	DebugSetting DeploymentStacksDebugSettingResponsePtrOutput `pulumi:"debugSetting"`
	// An array of resources that were deleted during the most recent Deployment stack update. Deleted means that the resource was removed from the template and relevant deletion operations were specified.
	DeletedResources ResourceReferenceResponseArrayOutput `pulumi:"deletedResources"`
	// Defines how resources deployed by the stack are locked.
	DenySettings DenySettingsResponseOutput `pulumi:"denySettings"`
	// The resourceId of the deployment resource created by the deployment stack.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
	DeploymentScope pulumi.StringPtrOutput `pulumi:"deploymentScope"`
	// Deployment stack description. Max length of 4096 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An array of resources that were detached during the most recent Deployment stack update. Detached means that the resource was removed from the template, but no relevant deletion operations were specified. So, the resource still exists while no longer being associated with the stack.
	DetachedResources ResourceReferenceResponseArrayOutput `pulumi:"detachedResources"`
	// The duration of the last successful Deployment stack update.
	Duration pulumi.StringOutput `pulumi:"duration"`
	// The error detail.
	Error ErrorDetailResponsePtrOutput `pulumi:"error"`
	// An array of resources that failed to reach goal state during the most recent update. Each resourceId is accompanied by an error message.
	FailedResources ResourceReferenceExtendedResponseArrayOutput `pulumi:"failedResources"`
	// The location of the Deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The outputs of the deployment resource created by the deployment stack.
	Outputs pulumi.AnyOutput `pulumi:"outputs"`
	// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
	Parameters DeploymentParameterResponseMapOutput `pulumi:"parameters"`
	// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
	ParametersLink DeploymentStacksParametersLinkResponsePtrOutput `pulumi:"parametersLink"`
	// State of the deployment stack.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// An array of resources currently managed by the deployment stack.
	Resources ManagedResourceReferenceResponseArrayOutput `pulumi:"resources"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Deployment stack resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Type of this resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDeploymentStackAtSubscription registers a new resource with the given unique name, arguments, and options.
func NewDeploymentStackAtSubscription(ctx *pulumi.Context,
	name string, args *DeploymentStackAtSubscriptionArgs, opts ...pulumi.ResourceOption) (*DeploymentStackAtSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionOnUnmanage == nil {
		return nil, errors.New("invalid value for required argument 'ActionOnUnmanage'")
	}
	if args.DenySettings == nil {
		return nil, errors.New("invalid value for required argument 'DenySettings'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:resources/v20220801preview:DeploymentStackAtSubscription"),
		},
		{
			Type: pulumi.String("azure-native:resources/v20240301:DeploymentStackAtSubscription"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DeploymentStackAtSubscription
	err := ctx.RegisterResource("azure-native:resources:DeploymentStackAtSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentStackAtSubscription gets an existing DeploymentStackAtSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentStackAtSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentStackAtSubscriptionState, opts ...pulumi.ResourceOption) (*DeploymentStackAtSubscription, error) {
	var resource DeploymentStackAtSubscription
	err := ctx.ReadResource("azure-native:resources:DeploymentStackAtSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentStackAtSubscription resources.
type deploymentStackAtSubscriptionState struct {
}

type DeploymentStackAtSubscriptionState struct {
}

func (DeploymentStackAtSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentStackAtSubscriptionState)(nil)).Elem()
}

type deploymentStackAtSubscriptionArgs struct {
	// Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
	ActionOnUnmanage ActionOnUnmanage `pulumi:"actionOnUnmanage"`
	// Flag to bypass service errors that indicate the stack resource list is not correctly synchronized.
	BypassStackOutOfSyncError *bool `pulumi:"bypassStackOutOfSyncError"`
	// The debug setting of the deployment.
	DebugSetting *DeploymentStacksDebugSetting `pulumi:"debugSetting"`
	// Defines how resources deployed by the stack are locked.
	DenySettings DenySettings `pulumi:"denySettings"`
	// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
	DeploymentScope *string `pulumi:"deploymentScope"`
	// Name of the deployment stack.
	DeploymentStackName *string `pulumi:"deploymentStackName"`
	// Deployment stack description. Max length of 4096 characters.
	Description *string `pulumi:"description"`
	// The location of the Deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
	Location *string `pulumi:"location"`
	// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
	Parameters map[string]DeploymentParameter `pulumi:"parameters"`
	// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
	ParametersLink *DeploymentStacksParametersLink `pulumi:"parametersLink"`
	// Deployment stack resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
	Template interface{} `pulumi:"template"`
	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink *DeploymentStacksTemplateLink `pulumi:"templateLink"`
}

// The set of arguments for constructing a DeploymentStackAtSubscription resource.
type DeploymentStackAtSubscriptionArgs struct {
	// Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
	ActionOnUnmanage ActionOnUnmanageInput
	// Flag to bypass service errors that indicate the stack resource list is not correctly synchronized.
	BypassStackOutOfSyncError pulumi.BoolPtrInput
	// The debug setting of the deployment.
	DebugSetting DeploymentStacksDebugSettingPtrInput
	// Defines how resources deployed by the stack are locked.
	DenySettings DenySettingsInput
	// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
	DeploymentScope pulumi.StringPtrInput
	// Name of the deployment stack.
	DeploymentStackName pulumi.StringPtrInput
	// Deployment stack description. Max length of 4096 characters.
	Description pulumi.StringPtrInput
	// The location of the Deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
	Location pulumi.StringPtrInput
	// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
	Parameters DeploymentParameterMapInput
	// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
	ParametersLink DeploymentStacksParametersLinkPtrInput
	// Deployment stack resource tags.
	Tags pulumi.StringMapInput
	// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template. It can be a JObject or well-formed JSON string. Use either the templateLink property or the template property, but not both.
	Template pulumi.Input
	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink DeploymentStacksTemplateLinkPtrInput
}

func (DeploymentStackAtSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentStackAtSubscriptionArgs)(nil)).Elem()
}

type DeploymentStackAtSubscriptionInput interface {
	pulumi.Input

	ToDeploymentStackAtSubscriptionOutput() DeploymentStackAtSubscriptionOutput
	ToDeploymentStackAtSubscriptionOutputWithContext(ctx context.Context) DeploymentStackAtSubscriptionOutput
}

func (*DeploymentStackAtSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStackAtSubscription)(nil)).Elem()
}

func (i *DeploymentStackAtSubscription) ToDeploymentStackAtSubscriptionOutput() DeploymentStackAtSubscriptionOutput {
	return i.ToDeploymentStackAtSubscriptionOutputWithContext(context.Background())
}

func (i *DeploymentStackAtSubscription) ToDeploymentStackAtSubscriptionOutputWithContext(ctx context.Context) DeploymentStackAtSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentStackAtSubscriptionOutput)
}

type DeploymentStackAtSubscriptionOutput struct{ *pulumi.OutputState }

func (DeploymentStackAtSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentStackAtSubscription)(nil)).Elem()
}

func (o DeploymentStackAtSubscriptionOutput) ToDeploymentStackAtSubscriptionOutput() DeploymentStackAtSubscriptionOutput {
	return o
}

func (o DeploymentStackAtSubscriptionOutput) ToDeploymentStackAtSubscriptionOutputWithContext(ctx context.Context) DeploymentStackAtSubscriptionOutput {
	return o
}

// Defines the behavior of resources that are no longer managed after the Deployment stack is updated or deleted.
func (o DeploymentStackAtSubscriptionOutput) ActionOnUnmanage() ActionOnUnmanageResponseOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) ActionOnUnmanageResponseOutput { return v.ActionOnUnmanage }).(ActionOnUnmanageResponseOutput)
}

// The Azure API version of the resource.
func (o DeploymentStackAtSubscriptionOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The correlation id of the last Deployment stack upsert or delete operation. It is in GUID format and is used for tracing.
func (o DeploymentStackAtSubscriptionOutput) CorrelationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.CorrelationId }).(pulumi.StringOutput)
}

// The debug setting of the deployment.
func (o DeploymentStackAtSubscriptionOutput) DebugSetting() DeploymentStacksDebugSettingResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) DeploymentStacksDebugSettingResponsePtrOutput {
		return v.DebugSetting
	}).(DeploymentStacksDebugSettingResponsePtrOutput)
}

// An array of resources that were deleted during the most recent Deployment stack update. Deleted means that the resource was removed from the template and relevant deletion operations were specified.
func (o DeploymentStackAtSubscriptionOutput) DeletedResources() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) ResourceReferenceResponseArrayOutput { return v.DeletedResources }).(ResourceReferenceResponseArrayOutput)
}

// Defines how resources deployed by the stack are locked.
func (o DeploymentStackAtSubscriptionOutput) DenySettings() DenySettingsResponseOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) DenySettingsResponseOutput { return v.DenySettings }).(DenySettingsResponseOutput)
}

// The resourceId of the deployment resource created by the deployment stack.
func (o DeploymentStackAtSubscriptionOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// The scope at which the initial deployment should be created. If a scope is not specified, it will default to the scope of the deployment stack. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroupId}'), subscription (format: '/subscriptions/{subscriptionId}'), resource group (format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}').
func (o DeploymentStackAtSubscriptionOutput) DeploymentScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringPtrOutput { return v.DeploymentScope }).(pulumi.StringPtrOutput)
}

// Deployment stack description. Max length of 4096 characters.
func (o DeploymentStackAtSubscriptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An array of resources that were detached during the most recent Deployment stack update. Detached means that the resource was removed from the template, but no relevant deletion operations were specified. So, the resource still exists while no longer being associated with the stack.
func (o DeploymentStackAtSubscriptionOutput) DetachedResources() ResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) ResourceReferenceResponseArrayOutput {
		return v.DetachedResources
	}).(ResourceReferenceResponseArrayOutput)
}

// The duration of the last successful Deployment stack update.
func (o DeploymentStackAtSubscriptionOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.Duration }).(pulumi.StringOutput)
}

// The error detail.
func (o DeploymentStackAtSubscriptionOutput) Error() ErrorDetailResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) ErrorDetailResponsePtrOutput { return v.Error }).(ErrorDetailResponsePtrOutput)
}

// An array of resources that failed to reach goal state during the most recent update. Each resourceId is accompanied by an error message.
func (o DeploymentStackAtSubscriptionOutput) FailedResources() ResourceReferenceExtendedResponseArrayOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) ResourceReferenceExtendedResponseArrayOutput {
		return v.FailedResources
	}).(ResourceReferenceExtendedResponseArrayOutput)
}

// The location of the Deployment stack. It cannot be changed after creation. It must be one of the supported Azure locations.
func (o DeploymentStackAtSubscriptionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of this resource.
func (o DeploymentStackAtSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The outputs of the deployment resource created by the deployment stack.
func (o DeploymentStackAtSubscriptionOutput) Outputs() pulumi.AnyOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.AnyOutput { return v.Outputs }).(pulumi.AnyOutput)
}

// Name and value pairs that define the deployment parameters for the template. Use this element when providing the parameter values directly in the request, rather than linking to an existing parameter file. Use either the parametersLink property or the parameters property, but not both.
func (o DeploymentStackAtSubscriptionOutput) Parameters() DeploymentParameterResponseMapOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) DeploymentParameterResponseMapOutput { return v.Parameters }).(DeploymentParameterResponseMapOutput)
}

// The URI of parameters file. Use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property, but not both.
func (o DeploymentStackAtSubscriptionOutput) ParametersLink() DeploymentStacksParametersLinkResponsePtrOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) DeploymentStacksParametersLinkResponsePtrOutput {
		return v.ParametersLink
	}).(DeploymentStacksParametersLinkResponsePtrOutput)
}

// State of the deployment stack.
func (o DeploymentStackAtSubscriptionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// An array of resources currently managed by the deployment stack.
func (o DeploymentStackAtSubscriptionOutput) Resources() ManagedResourceReferenceResponseArrayOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) ManagedResourceReferenceResponseArrayOutput { return v.Resources }).(ManagedResourceReferenceResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DeploymentStackAtSubscriptionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Deployment stack resource tags.
func (o DeploymentStackAtSubscriptionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Type of this resource.
func (o DeploymentStackAtSubscriptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentStackAtSubscription) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DeploymentStackAtSubscriptionOutput{})
}
