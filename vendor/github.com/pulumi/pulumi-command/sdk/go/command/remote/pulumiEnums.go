// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Logging string

const (
	// Capture stdout in logs but not stderr
	LoggingStdout = Logging("stdout")
	// Capture stderr in logs but not stdout
	LoggingStderr = Logging("stderr")
	// Capture stdout and stderr in logs
	LoggingStdoutAndStderr = Logging("stdoutAndStderr")
	// Capture no logs
	LoggingNone = Logging("none")
)

func (Logging) ElementType() reflect.Type {
	return reflect.TypeOf((*Logging)(nil)).Elem()
}

func (e Logging) ToLoggingOutput() LoggingOutput {
	return pulumi.ToOutput(e).(LoggingOutput)
}

func (e Logging) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LoggingOutput)
}

func (e Logging) ToLoggingPtrOutput() LoggingPtrOutput {
	return e.ToLoggingPtrOutputWithContext(context.Background())
}

func (e Logging) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return Logging(e).ToLoggingOutputWithContext(ctx).ToLoggingPtrOutputWithContext(ctx)
}

func (e Logging) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Logging) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Logging) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Logging) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LoggingOutput struct{ *pulumi.OutputState }

func (LoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Logging)(nil)).Elem()
}

func (o LoggingOutput) ToLoggingOutput() LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingPtrOutput() LoggingPtrOutput {
	return o.ToLoggingPtrOutputWithContext(context.Background())
}

func (o LoggingOutput) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Logging) *Logging {
		return &v
	}).(LoggingPtrOutput)
}

func (o LoggingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LoggingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Logging) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LoggingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Logging) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LoggingPtrOutput struct{ *pulumi.OutputState }

func (LoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (o LoggingPtrOutput) ToLoggingPtrOutput() LoggingPtrOutput {
	return o
}

func (o LoggingPtrOutput) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return o
}

func (o LoggingPtrOutput) Elem() LoggingOutput {
	return o.ApplyT(func(v *Logging) Logging {
		if v != nil {
			return *v
		}
		var ret Logging
		return ret
	}).(LoggingOutput)
}

func (o LoggingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LoggingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Logging) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LoggingInput is an input type that accepts values of the Logging enum
// A concrete instance of `LoggingInput` can be one of the following:
//
//	LoggingStdout
//	LoggingStderr
//	LoggingStdoutAndStderr
//	LoggingNone
type LoggingInput interface {
	pulumi.Input

	ToLoggingOutput() LoggingOutput
	ToLoggingOutputWithContext(context.Context) LoggingOutput
}

var loggingPtrType = reflect.TypeOf((**Logging)(nil)).Elem()

type LoggingPtrInput interface {
	pulumi.Input

	ToLoggingPtrOutput() LoggingPtrOutput
	ToLoggingPtrOutputWithContext(context.Context) LoggingPtrOutput
}

type loggingPtr string

func LoggingPtr(v string) LoggingPtrInput {
	return (*loggingPtr)(&v)
}

func (*loggingPtr) ElementType() reflect.Type {
	return loggingPtrType
}

func (in *loggingPtr) ToLoggingPtrOutput() LoggingPtrOutput {
	return pulumi.ToOutput(in).(LoggingPtrOutput)
}

func (in *loggingPtr) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LoggingPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingInput)(nil)).Elem(), Logging("stdout"))
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingPtrInput)(nil)).Elem(), Logging("stdout"))
	pulumi.RegisterOutputType(LoggingOutput{})
	pulumi.RegisterOutputType(LoggingPtrOutput{})
}
